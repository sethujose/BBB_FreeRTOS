cscope 15 $HOME/FreeRTOSV8.0.0/FreeRTOS/Source               0001976319
	@croutine.c

66 
	~"FªeRTOS.h
"

67 
	~"èsk.h
"

68 
	~"¸outöe.h
"

74 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


75 

	)

80 
Li°_t
 
	gpxRódyCoRoutöeLi°s
[ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 ];

81 
Li°_t
 
	gxDñayedCoRoutöeLi°1
;

82 
Li°_t
 
	gxDñayedCoRoutöeLi°2
;

83 
Li°_t
 * 
	gpxDñayedCoRoutöeLi°
;

84 
Li°_t
 * 
	gpxOvîÊowDñayedCoRoutöeLi°
;

85 
Li°_t
 
	gxPídögRódyCoRoutöeLi°
;

88 
CRCB_t
 * 
	gpxCuºítCoRoutöe
 = 
NULL
;

89 
UBa£Ty≥_t
 
	guxT›CoRoutöeRódyPri‹ôy
 = 0;

90 
TickTy≥_t
 
	gxCoRoutöeTickCou¡
 = 0, 
	gxLa°TickCou¡
 = 0, 
	gxPas£dTicks
 = 0;

93 
	#c‹INITIAL_STATE
 ( 0 )

	)

102 
	#¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 ) \

	)

104 if–
	gpxCRCB
->
	guxPri‹ôy
 > 
	guxT›CoRoutöeRódyPri‹ôy
 ) \

106 
	guxT›CoRoutöeRódyPri‹ôy
 = 
pxCRCB
->
uxPri‹ôy
; \

108 
vLi°In£πEnd
––
Li°_t
 * ) &–
pxRódyCoRoutöeLi°s
[ 
pxCRCB
->
uxPri‹ôy
 ] ), &–pxCRCB->
xGíîicLi°Iãm
 ) ); \

115 
¥vInôüli£CoRoutöeLi°s
( );

123 
¥vCheckPídögRódyLi°
( );

133 
¥vCheckDñayedLi°
( );

137 
Ba£Ty≥_t
 
	$xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
UBa£Ty≥_t
 
uxPri‹ôy
, UBa£Ty≥_à
uxIndex
 )

139 
Ba£Ty≥_t
 
xRëu∫
;

140 
CRCB_t
 *
pxCoRoutöe
;

143 
pxCoRoutöe
 = ( 
CRCB_t
 * ) 
	`pvP‹tMÆloc
( ( CRCB_t ) );

144 if–
pxCoRoutöe
 )

148 if–
pxCuºítCoRoutöe
 =
NULL
 )

150 
pxCuºítCoRoutöe
 = 
pxCoRoutöe
;

151 
	`¥vInôüli£CoRoutöeLi°s
();

155 if–
uxPri‹ôy
 >
c⁄figMAX_CO_ROUTINE_PRIORITIES
 )

157 
uxPri‹ôy
 = 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - 1;

161 
pxCoRoutöe
->
uxSèã
 = 
c‹INITIAL_STATE
;

162 
pxCoRoutöe
->
uxPri‹ôy
 = uxPriority;

163 
pxCoRoutöe
->
uxIndex
 = uxIndex;

164 
pxCoRoutöe
->
pxCoRoutöeFun˘i⁄
 = 
pxCoRoutöeCode
;

167 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ) );

168 
	`vLi°Inôüli£Iãm
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ) );

173 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xGíîicLi°Iãm
 ),ÖxCoRoutine );

174 
	`li°SET_LIST_ITEM_OWNER
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ),ÖxCoRoutine );

177 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCoRoutöe
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 ) );

181 
	`¥vAddCoRoutöeToRódyQueue
–
pxCoRoutöe
 );

183 
xRëu∫
 = 
pdPASS
;

187 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

190  
xRëu∫
;

191 
	}
}

194 
	$vCoRoutöeAddToDñayedLi°
–
TickTy≥_t
 
xTicksToDñay
, 
Li°_t
 *
pxEvítLi°
 )

196 
TickTy≥_t
 
xTimeToWake
;

200 
xTimeToWake
 = 
xCoRoutöeTickCou¡
 + 
xTicksToDñay
;

205 –Ë
	`uxLi°Remove
––
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

208 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

210 if–
xTimeToWake
 < 
xCoRoutöeTickCou¡
 )

214 
	`vLi°In£π
––
Li°_t
 * ) 
pxOvîÊowDñayedCoRoutöeLi°
, ( 
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

220 
	`vLi°In£π
––
Li°_t
 * ) 
pxDñayedCoRoutöeLi°
, ( 
Li°Iãm_t
 * ) &–
pxCuºítCoRoutöe
->
xGíîicLi°Iãm
 ) );

223 if–
pxEvítLi°
 )

227 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítCoRoutöe
->
xEvítLi°Iãm
 ) );

229 
	}
}

232 
	$¥vCheckPídögRódyLi°
( )

237  
	`li°LIST_IS_EMPTY
–&
xPídögRódyCoRoutöeLi°
 ) =
pdFALSE
 )

239 
CRCB_t
 *
pxUnblockedCRCB
;

242 
	`p‹tDISABLE_INTERRUPTS
();

244 
pxUnblockedCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–(&
xPídögRódyCoRoutöeLi°
) );

245 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

247 
	`p‹tENABLE_INTERRUPTS
();

249 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xGíîicLi°Iãm
 ) );

250 
	`¥vAddCoRoutöeToRódyQueue
–
pxUnblockedCRCB
 );

252 
	}
}

255 
	$¥vCheckDñayedLi°
( )

257 
CRCB_t
 *
pxCRCB
;

259 
xPas£dTicks
 = 
	`xTaskGëTickCou¡
(Ë- 
xLa°TickCou¡
;

260  
xPas£dTicks
 )

262 
xCoRoutöeTickCou¡
++;

263 
xPas£dTicks
--;

266 if–
xCoRoutöeTickCou¡
 == 0 )

268 
Li°_t
 * 
pxTemp
;

272 
pxTemp
 = 
pxDñayedCoRoutöeLi°
;

273 
pxDñayedCoRoutöeLi°
 = 
pxOvîÊowDñayedCoRoutöeLi°
;

274 
pxOvîÊowDñayedCoRoutöeLi°
 = 
pxTemp
;

278  
	`li°LIST_IS_EMPTY
–
pxDñayedCoRoutöeLi°
 ) =
pdFALSE
 )

280 
pxCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedCoRoutöeLi°
 );

282 if–
xCoRoutöeTickCou¡
 < 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) ) )

288 
	`p‹tDISABLE_INTERRUPTS
();

295 
	`uxLi°Remove
–&–
pxCRCB
->
xGíîicLi°Iãm
 ) );

298 if–
pxCRCB
->
xEvítLi°Iãm
.
pvC⁄èöî
 )

300 –Ë
	`uxLi°Remove
–&–
pxCRCB
->
xEvítLi°Iãm
 ) );

303 
	`p‹tENABLE_INTERRUPTS
();

305 
	`¥vAddCoRoutöeToRódyQueue
–
pxCRCB
 );

309 
xLa°TickCou¡
 = 
xCoRoutöeTickCou¡
;

310 
	}
}

313 
	$vCoRoutöeScheduÀ
( )

316 
	`¥vCheckPídögRódyLi°
();

319 
	`¥vCheckDñayedLi°
();

322  
	`li°LIST_IS_EMPTY
–&–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) ) )

324 if–
uxT›CoRoutöeRódyPri‹ôy
 == 0 )

329 --
uxT›CoRoutöeRódyPri‹ôy
;

334 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítCoRoutöe
, &–
pxRódyCoRoutöeLi°s
[ 
uxT›CoRoutöeRódyPri‹ôy
 ] ) );

337 –
pxCuºítCoRoutöe
->
pxCoRoutöeFun˘i⁄
 )–pxCuºítCoRoutöe,ÖxCuºítCoRoutöe->
uxIndex
 );

340 
	}
}

343 
	$¥vInôüli£CoRoutöeLi°s
( )

345 
UBa£Ty≥_t
 
uxPri‹ôy
;

347  
uxPri‹ôy
 = 0; uxPri‹ôy < 
c⁄figMAX_CO_ROUTINE_PRIORITIES
; uxPriority++ )

349 
	`vLi°Inôüli£
––
Li°_t
 * ) &–
pxRódyCoRoutöeLi°s
[ 
uxPri‹ôy
 ] ) );

352 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xDñayedCoRoutöeLi°1
 );

353 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xDñayedCoRoutöeLi°2
 );

354 
	`vLi°Inôüli£
––
Li°_t
 * ) &
xPídögRódyCoRoutöeLi°
 );

358 
pxDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°1
;

359 
pxOvîÊowDñayedCoRoutöeLi°
 = &
xDñayedCoRoutöeLi°2
;

360 
	}
}

363 
Ba£Ty≥_t
 
	$xCoRoutöeRemoveFromEvítLi°
–c⁄° 
Li°_t
 *
pxEvítLi°
 )

365 
CRCB_t
 *
pxUnblockedCRCB
;

366 
Ba£Ty≥_t
 
xRëu∫
;

371 
pxUnblockedCRCB
 = ( 
CRCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

372 –Ë
	`uxLi°Remove
–&–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

373 
	`vLi°In£πEnd
––
Li°_t
 * ) &–
xPídögRódyCoRoutöeLi°
 ), &–
pxUnblockedCRCB
->
xEvítLi°Iãm
 ) );

375 if–
pxUnblockedCRCB
->
uxPri‹ôy
 >
pxCuºítCoRoutöe
->uxPriority )

377 
xRëu∫
 = 
pdTRUE
;

381 
xRëu∫
 = 
pdFALSE
;

384  
xRëu∫
;

385 
	}
}

	@event_groups.c

67 
	~<°dlib.h
>

72 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

75 
	~"FªeRTOS.h
"

76 
	~"èsk.h
"

77 
	~"timîs.h
"

78 
	~"evít_groups.h
"

84 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


86 #i‡–
INCLUDE_xEvítGroupSëBôFromISR
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 0 )

87 #îr‹ 
c⁄figUSE_TIMERS
 
mu°
 
be
 
£t
 
to
 1Åÿ
make
 
the
 
xEvítGroupSëBôFromISR
(Ë
fun˘i⁄
 
avaûabÀ
.

90 #i‡–
INCLUDE_xEvítGroupSëBôFromISR
 =1 ) && ( 
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 0 )

91 #îr‹ 
INCLUDE_xTimîPídFun˘i⁄CÆl
 
mu°
 
Æso
 
be
 
£t
 
to
 
⁄e
Åÿ
make
 
the
 
xEvítGroupSëBôFromISR
(Ë
fun˘i⁄
 
avaûabÀ
.

97 #i‡
c⁄figUSE_16_BIT_TICKS
 == 1

98 
	#evítCLEAR_EVENTS_ON_EXIT_BIT
 0x0100U

	)

99 
	#evítUNBLOCKED_DUE_TO_BIT_SET
 0x0200U

	)

100 
	#evítWAIT_FOR_ALL_BITS
 0x0400U

	)

101 
	#evítEVENT_BITS_CONTROL_BYTES
 0xff00U

	)

103 
	#evítCLEAR_EVENTS_ON_EXIT_BIT
 0x01000000UL

	)

104 
	#evítUNBLOCKED_DUE_TO_BIT_SET
 0x02000000UL

	)

105 
	#evítWAIT_FOR_ALL_BITS
 0x04000000UL

	)

106 
	#evítEVENT_BITS_CONTROL_BYTES
 0xff000000UL

	)

109 
	sxEvítGroupDeföôi⁄


111 
EvítBôs_t
 
	muxEvítBôs
;

112 
Li°_t
 
	mxTasksWaôögF‹Bôs
;

114 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

115 
UBa£Ty≥_t
 
	muxEvítGroupNumbî
;

118 } 
	tEvítGroup_t
;

130 
Ba£Ty≥_t
 
¥vTe°WaôC⁄dôi⁄
–c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
 );

134 
EvítGroupH™dÀ_t
 
	$xEvítGroupCª©e
( )

136 
EvítGroup_t
 *
pxEvítBôs
;

138 
pxEvítBôs
 = 
	`pvP‹tMÆloc
––
EvítGroup_t
 ) );

139 if–
pxEvítBôs
 !
NULL
 )

141 
pxEvítBôs
->
uxEvítBôs
 = 0;

142 
	`vLi°Inôüli£
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ) );

143 
	`åa˚EVENT_GROUP_CREATE
–
pxEvítBôs
 );

147 
	`åa˚EVENT_GROUP_CREATE_FAILED
();

150  ( 
EvítGroupH™dÀ_t
 ) 
pxEvítBôs
;

151 
	}
}

154 
EvítBôs_t
 
	$xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 )

156 
EvítBôs_t
 
uxOrigöÆBôVÆue
, 
uxRëu∫
;

157 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

158 
Ba£Ty≥_t
 
xAÃódyYõlded
;

159 
Ba£Ty≥_t
 
xTimeoutOccuºed
 = 
pdFALSE
;

161 
	`c⁄figASSERT
––
uxBôsToWaôF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

162 
	`c⁄figASSERT
–
uxBôsToWaôF‹
 != 0 );

163 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

165 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

169 
	`vTaskSu•ídAŒ
();

171 
uxOrigöÆBôVÆue
 = 
pxEvítBôs
->
uxEvítBôs
;

173 –Ë
	`xEvítGroupSëBôs
–
xEvítGroup
, 
uxBôsToSë
 );

175 if–––
uxOrigöÆBôVÆue
 | 
uxBôsToSë
 ) & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

178 
uxRëu∫
 = ( 
uxOrigöÆBôVÆue
 | 
uxBôsToSë
 );

182 
pxEvítBôs
->
uxEvítBôs
 &
uxBôsToWaôF‹
;

184 
xTicksToWaô
 = 0;

188 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

190 
	`åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 );

195 
	`vTaskPœ˚OnUn‹dîedEvítLi°
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ), ( 
uxBôsToWaôF‹
 | 
evítCLEAR_EVENTS_ON_EXIT_BIT
 | 
evítWAIT_FOR_ALL_BITS
 ), 
xTicksToWaô
 );

201 
uxRëu∫
 = 0;

207 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

211 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

213 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

215 if–
xAÃódyYõlded
 =
pdFALSE
 )

217 
	`p‹tYIELD_WITHIN_API
();

221 
	`mtCOVERAGE_TEST_MARKER
();

228 
uxRëu∫
 = 
	`uxTaskRe£tEvítIãmVÆue
();

230 if––
uxRëu∫
 & 
evítUNBLOCKED_DUE_TO_BIT_SET
 ) =–
EvítBôs_t
 ) 0 )

233 
	`èskENTER_CRITICAL
();

235 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

241 if––
uxRëu∫
 & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

243 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

247 
	`mtCOVERAGE_TEST_MARKER
();

250 
	`èskEXIT_CRITICAL
();

252 
xTimeoutOccuºed
 = 
pdTRUE
;

258 
uxRëu∫
 &~
evítEVENT_BITS_CONTROL_BYTES
;

262 
	`åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 );

263  
uxRëu∫
;

264 
	}
}

267 
EvítBôs_t
 
	$xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 )

269 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

270 
EvítBôs_t
 
uxRëu∫
, 
uxC⁄åﬁBôs
 = 0;

271 
Ba£Ty≥_t
 
xWaôC⁄dôi⁄Më
, 
xAÃódyYõlded
;

272 
Ba£Ty≥_t
 
xTimeoutOccuºed
 = 
pdFALSE
;

276 
	`c⁄figASSERT
––
uxBôsToWaôF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

277 
	`c⁄figASSERT
–
uxBôsToWaôF‹
 != 0 );

278 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

280 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

284 
	`vTaskSu•ídAŒ
();

286 c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
 = 
pxEvítBôs
->
uxEvítBôs
;

289 
xWaôC⁄dôi⁄Më
 = 
	`¥vTe°WaôC⁄dôi⁄
–
uxCuºítEvítBôs
, 
uxBôsToWaôF‹
, 
xWaôF‹AŒBôs
 );

291 if–
xWaôC⁄dôi⁄Më
 !
pdFALSE
 )

295 
uxRëu∫
 = 
uxCuºítEvítBôs
;

296 
xTicksToWaô
 = ( 
TickTy≥_t
 ) 0;

299 if–
xCÀ¨OnExô
 !
pdFALSE
 )

301 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

305 
	`mtCOVERAGE_TEST_MARKER
();

308 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

312 
uxRëu∫
 = 
uxCuºítEvítBôs
;

320 if–
xCÀ¨OnExô
 !
pdFALSE
 )

322 
uxC⁄åﬁBôs
 |
evítCLEAR_EVENTS_ON_EXIT_BIT
;

326 
	`mtCOVERAGE_TEST_MARKER
();

329 if–
xWaôF‹AŒBôs
 !
pdFALSE
 )

331 
uxC⁄åﬁBôs
 |
evítWAIT_FOR_ALL_BITS
;

335 
	`mtCOVERAGE_TEST_MARKER
();

341 
	`vTaskPœ˚OnUn‹dîedEvítLi°
–&–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 ), ( 
uxBôsToWaôF‹
 | 
uxC⁄åﬁBôs
 ), 
xTicksToWaô
 );

346 
uxRëu∫
 = 0;

348 
	`åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 );

351 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

353 if–
xTicksToWaô
 !–
TickTy≥_t
 ) 0 )

355 if–
xAÃódyYõlded
 =
pdFALSE
 )

357 
	`p‹tYIELD_WITHIN_API
();

361 
	`mtCOVERAGE_TEST_MARKER
();

368 
uxRëu∫
 = 
	`uxTaskRe£tEvítIãmVÆue
();

370 if––
uxRëu∫
 & 
evítUNBLOCKED_DUE_TO_BIT_SET
 ) =–
EvítBôs_t
 ) 0 )

372 
	`èskENTER_CRITICAL
();

375 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

379 if–
	`¥vTe°WaôC⁄dôi⁄
–
uxRëu∫
, 
uxBôsToWaôF‹
, 
xWaôF‹AŒBôs
 ) !
pdFALSE
 )

381 if–
xCÀ¨OnExô
 !
pdFALSE
 )

383 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToWaôF‹
;

387 
	`mtCOVERAGE_TEST_MARKER
();

392 
	`mtCOVERAGE_TEST_MARKER
();

395 
	`èskEXIT_CRITICAL
();

397 
xTimeoutOccuºed
 = 
pdFALSE
;

403 
uxRëu∫
 &~
evítEVENT_BITS_CONTROL_BYTES
;

406 
	`åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 );

407  
uxRëu∫
;

408 
	}
}

411 
EvítBôs_t
 
	$xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 )

413 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

414 
EvítBôs_t
 
uxRëu∫
;

418 
	`c⁄figASSERT
––
uxBôsToCÀ¨
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

420 
	`èskENTER_CRITICAL
();

422 
	`åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 );

426 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

429 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToCÀ¨
;

431 
	`èskEXIT_CRITICAL
();

433  
uxRëu∫
;

434 
	}
}

437 
EvítBôs_t
 
	$xEvítGroupCÀ¨BôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToCÀ¨
 )

439 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

440 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

441 
EvítBôs_t
 
uxRëu∫
;

445 
	`c⁄figASSERT
––
uxBôsToCÀ¨
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

447 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

449 
	`åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 );

453 
uxRëu∫
 = 
pxEvítBôs
->
uxEvítBôs
;

456 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToCÀ¨
;

458 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

460  
uxRëu∫
;

461 
	}
}

464 
EvítBôs_t
 
	$xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
 )

466 
Li°Iãm_t
 *
pxLi°Iãm
, *
pxNext
;

467 
Li°Iãm_t
 c⁄° *
pxLi°End
;

468 
Li°_t
 *
pxLi°
;

469 
EvítBôs_t
 
uxBôsToCÀ¨
 = 0, 
uxBôsWaôedF‹
, 
uxC⁄åﬁBôs
;

470 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

471 
Ba£Ty≥_t
 
xM©chFound
 = 
pdFALSE
;

475 
	`c⁄figASSERT
––
uxBôsToSë
 & 
evítEVENT_BITS_CONTROL_BYTES
 ) == 0 );

477 
pxLi°
 = &–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 );

478 
pxLi°End
 = 
	`li°GET_END_MARKER
–
pxLi°
 );

479 
	`vTaskSu•ídAŒ
();

481 
	`åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 );

483 
pxLi°Iãm
 = 
	`li°GET_HEAD_ENTRY
–
pxLi°
 );

486 
pxEvítBôs
->
uxEvítBôs
 |
uxBôsToSë
;

489  
pxLi°Iãm
 !
pxLi°End
 )

491 
pxNext
 = 
	`li°GET_NEXT
–
pxLi°Iãm
 );

492 
uxBôsWaôedF‹
 = 
	`li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 );

493 
xM©chFound
 = 
pdFALSE
;

496 
uxC⁄åﬁBôs
 = 
uxBôsWaôedF‹
 & 
evítEVENT_BITS_CONTROL_BYTES
;

497 
uxBôsWaôedF‹
 &~
evítEVENT_BITS_CONTROL_BYTES
;

499 if––
uxC⁄åﬁBôs
 & 
evítWAIT_FOR_ALL_BITS
 ) =–
EvítBôs_t
 ) 0 )

502 if––
uxBôsWaôedF‹
 & 
pxEvítBôs
->
uxEvítBôs
 ) !–
EvítBôs_t
 ) 0 )

504 
xM©chFound
 = 
pdTRUE
;

508 
	`mtCOVERAGE_TEST_MARKER
();

511 if––
uxBôsWaôedF‹
 & 
pxEvítBôs
->
uxEvítBôs
 ) == uxBitsWaitedFor )

514 
xM©chFound
 = 
pdTRUE
;

521 if–
xM©chFound
 !
pdFALSE
 )

524 if––
uxC⁄åﬁBôs
 & 
evítCLEAR_EVENTS_ON_EXIT_BIT
 ) !–
EvítBôs_t
 ) 0 )

526 
uxBôsToCÀ¨
 |
uxBôsWaôedF‹
;

530 
	`mtCOVERAGE_TEST_MARKER
();

538 –Ë
	`xTaskRemoveFromUn‹dîedEvítLi°
–
pxLi°Iãm
, 
pxEvítBôs
->
uxEvítBôs
 | 
evítUNBLOCKED_DUE_TO_BIT_SET
 );

544 
pxLi°Iãm
 = 
pxNext
;

549 
pxEvítBôs
->
uxEvítBôs
 &~
uxBôsToCÀ¨
;

551 –Ë
	`xTaskResumeAŒ
();

553  
pxEvítBôs
->
uxEvítBôs
;

554 
	}
}

557 
	$vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 )

559 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

560 c⁄° 
Li°_t
 *
pxTasksWaôögF‹Bôs
 = &–
pxEvítBôs
->
xTasksWaôögF‹Bôs
 );

562 
	`vTaskSu•ídAŒ
();

564 
	`åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 );

566  
	`li°CURRENT_LIST_LENGTH
–
pxTasksWaôögF‹Bôs
 ) > ( 
UBa£Ty≥_t
 ) 0 )

570 
	`c⁄figASSERT
–
pxTasksWaôögF‹Bôs
->
xLi°End
.
pxNext
 !–
Li°Iãm_t
 * ) &(ÖxTasksWaitingForBits->xListEnd ) );

571 –Ë
	`xTaskRemoveFromUn‹dîedEvítLi°
–
pxTasksWaôögF‹Bôs
->
xLi°End
.
pxNext
, 
evítUNBLOCKED_DUE_TO_BIT_SET
 );

574 
	`vP‹tFªe
–
pxEvítBôs
 );

576 –Ë
	`xTaskResumeAŒ
();

577 
	}
}

582 
	$vEvítGroupSëBôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToSë
 )

584 –Ë
	`xEvítGroupSëBôs
–
pvEvítGroup
, ( 
EvítBôs_t
 ) 
ulBôsToSë
 );

585 
	}
}

588 
Ba£Ty≥_t
 
	$¥vTe°WaôC⁄dôi⁄
–c⁄° 
EvítBôs_t
 
uxCuºítEvítBôs
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xWaôF‹AŒBôs
 )

590 
Ba£Ty≥_t
 
xWaôC⁄dôi⁄Më
 = 
pdFALSE
;

592 if–
xWaôF‹AŒBôs
 =
pdFALSE
 )

596 if––
uxCuºítEvítBôs
 & 
uxBôsToWaôF‹
 ) !–
EvítBôs_t
 ) 0 )

598 
xWaôC⁄dôi⁄Më
 = 
pdTRUE
;

602 
	`mtCOVERAGE_TEST_MARKER
();

609 if––
uxCuºítEvítBôs
 & 
uxBôsToWaôF‹
 ) == uxBitsToWaitFor )

611 
xWaôC⁄dôi⁄Më
 = 
pdTRUE
;

615 
	`mtCOVERAGE_TEST_MARKER
();

619  
xWaôC⁄dôi⁄Më
;

620 
	}
}

623 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 1 ) )

624 
Ba£Ty≥_t
 
	$xEvítGroupSëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

626 
Ba£Ty≥_t
 
xRëu∫
;

628 
	`åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 );

629 
xRëu∫
 = 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) 
xEvítGroup
, ( 
uöt32_t
 ) 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 );

631  
xRëu∫
;

632 
	}
}

636 #i‡(
c⁄figUSE_TRACE_FACILITY
 == 1)

637 
UBa£Ty≥_t
 
	$uxEvítGroupGëNumbî
–* 
xEvítGroup
 )

639 
UBa£Ty≥_t
 
xRëu∫
;

640 
EvítGroup_t
 *
pxEvítBôs
 = ( EvítGroup_à* ) 
xEvítGroup
;

642 if–
xEvítGroup
 =
NULL
 )

644 
xRëu∫
 = 0;

648 
xRëu∫
 = 
pxEvítBôs
->
uxEvítGroupNumbî
;

651  
xRëu∫
;

652 
	}
}

	@include/FreeRTOS.h

66 #i‚de‡
INC_FREERTOS_H


67 
	#INC_FREERTOS_H


	)

72 
	~<°ddef.h
>

87 
	~<°döt.h
>

89 #ifde‡
__˝lu•lus


94 
	~"¥ojdefs.h
"

97 
	~"FªeRTOSC⁄fig.h
"

101 #i‚de‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION


102 
	#c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 0

	)

106 
	~"p‹èbÀ.h
"

114 #i‚de‡
c⁄figMINIMAL_STACK_SIZE


115 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMINIMAL_STACK_SIZE
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. c⁄figMINIMAL_STACK_SIZE 
deföes
 
the
 
size
 (ö 
w‹ds
Ë
of
Åhê
°ack
 
Æloˇãd
 
to
Åhê
idÀ
 
èsk
. 
Re„r
Åÿthê
demo
 
¥oje˘
 
¥ovided
 
your
 
p‹t
 
a
 
suôabÀ
 
vÆue
.

118 #i‚de‡
c⁄figMAX_PRIORITIES


119 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

122 #i‚de‡
c⁄figUSE_PREEMPTION


123 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_PREEMPTION
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

126 #i‚de‡
c⁄figUSE_IDLE_HOOK


127 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_IDLE_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

130 #i‚de‡
c⁄figUSE_TICK_HOOK


131 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_TICK_HOOK
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

134 #i‚de‡
c⁄figUSE_CO_ROUTINES


135 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_CO_ROUTINES
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

138 #i‚de‡
INCLUDE_vTaskPri‹ôySë


139 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskPri‹ôySë
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

142 #i‚de‡
INCLUDE_uxTaskPri‹ôyGë


143 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_uxTaskPri‹ôyGë
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

146 #i‚de‡
INCLUDE_vTaskDñëe


147 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñëe
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

150 #i‚de‡
INCLUDE_vTaskSu•íd


151 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskSu•íd
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

154 #i‚de‡
INCLUDE_vTaskDñayU¡û


155 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñayU¡û
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

158 #i‚de‡
INCLUDE_vTaskDñay


159 #îr‹ 
Missög
 
deföôi⁄
: 
INCLUDE_vTaskDñay
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

162 #i‚de‡
c⁄figUSE_16_BIT_TICKS


163 #îr‹ 
Missög
 
deföôi⁄
: 
c⁄figUSE_16_BIT_TICKS
 
mu°
 
be
 
deföed
 
ö
 
FªeRTOSC⁄fig
.
h
 
as
 
eôhî
 1 
‹
 0. 
Sì
 
the
 
C⁄figuøti⁄
 
£˘i⁄
 
of
Åhê
FªeRTOS
 
API
 
documíèti⁄
 
dëaûs
.

166 #i‡
c⁄figUSE_CO_ROUTINES
 != 0

167 #i‚de‡
c⁄figMAX_CO_ROUTINE_PRIORITIES


168 #îr‹ 
c⁄figMAX_CO_ROUTINE_PRIORITIES
 
mu°
 
be
 
gª©î
 
th™
 
‹
 
equÆ
 
to
 1.

172 #i‚de‡
c⁄figMAX_PRIORITIES


173 #îr‹ 
c⁄figMAX_PRIORITIES
 
mu°
 
be
 
deföed
 
to
 bê
gª©î
 
th™
 
‹
 
equÆ
Åo 1.

176 #i‚de‡
INCLUDE_xTaskGëIdÀTaskH™dÀ


177 
	#INCLUDE_xTaskGëIdÀTaskH™dÀ
 0

	)

180 #i‚de‡
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ


181 
	#INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 0

	)

184 #i‚de‡
INCLUDE_xQueueGëMuãxHﬁdî


185 
	#INCLUDE_xQueueGëMuãxHﬁdî
 0

	)

188 #i‚de‡
INCLUDE_xSem≠h‹eGëMuãxHﬁdî


189 
	#INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 
INCLUDE_xQueueGëMuãxHﬁdî


	)

192 #i‚de‡
INCLUDE_pcTaskGëTaskName


193 
	#INCLUDE_pcTaskGëTaskName
 0

	)

196 #i‚de‡
c⁄figUSE_APPLICATION_TASK_TAG


197 
	#c⁄figUSE_APPLICATION_TASK_TAG
 0

	)

200 #i‚de‡
INCLUDE_uxTaskGëSèckHighW©îM¨k


201 
	#INCLUDE_uxTaskGëSèckHighW©îM¨k
 0

	)

204 #i‚de‡
INCLUDE_eTaskGëSèã


205 
	#INCLUDE_eTaskGëSèã
 0

	)

208 #i‚de‡
c⁄figUSE_RECURSIVE_MUTEXES


209 
	#c⁄figUSE_RECURSIVE_MUTEXES
 0

	)

212 #i‚de‡
c⁄figUSE_MUTEXES


213 
	#c⁄figUSE_MUTEXES
 0

	)

216 #i‚de‡
c⁄figUSE_TIMERS


217 
	#c⁄figUSE_TIMERS
 0

	)

220 #i‚de‡
c⁄figUSE_COUNTING_SEMAPHORES


221 
	#c⁄figUSE_COUNTING_SEMAPHORES
 0

	)

224 #i‚de‡
c⁄figUSE_ALTERNATIVE_API


225 
	#c⁄figUSE_ALTERNATIVE_API
 0

	)

228 #i‚de‡
p‹tCRITICAL_NESTING_IN_TCB


229 
	#p‹tCRITICAL_NESTING_IN_TCB
 0

	)

232 #i‚de‡
c⁄figMAX_TASK_NAME_LEN


233 
	#c⁄figMAX_TASK_NAME_LEN
 16

	)

236 #i‚de‡
c⁄figIDLE_SHOULD_YIELD


237 
	#c⁄figIDLE_SHOULD_YIELD
 1

	)

240 #i‡
c⁄figMAX_TASK_NAME_LEN
 < 1

241 #îr‹ 
c⁄figMAX_TASK_NAME_LEN
 
mu°
 
be
 
£t
 
to
 
a
 
möimum
 
of
 1 
ö
 
FªeRTOSC⁄fig
.
h


244 #i‚de‡
INCLUDE_xTaskResumeFromISR


245 
	#INCLUDE_xTaskResumeFromISR
 1

	)

248 #i‚de‡
INCLUDE_xEvítGroupSëBôFromISR


249 
	#INCLUDE_xEvítGroupSëBôFromISR
 0

	)

252 #i‚de‡
INCLUDE_xTimîPídFun˘i⁄CÆl


253 
	#INCLUDE_xTimîPídFun˘i⁄CÆl
 0

	)

256 #i‚de‡
c⁄figASSERT


257 
	#c⁄figASSERT
–
x
 )

	)

258 
	#c⁄figASSERT_DEFINED
 0

	)

260 
	#c⁄figASSERT_DEFINED
 1

	)

264 #i‡
c⁄figUSE_TIMERS
 == 1

266 #i‚de‡
c⁄figTIMER_TASK_PRIORITY


267 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_PRIORITY
 
mu°
 
Æso
 
be
 
deföed
.

270 #i‚de‡
c⁄figTIMER_QUEUE_LENGTH


271 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_QUEUE_LENGTH
 
mu°
 
Æso
 
be
 
deföed
.

274 #i‚de‡
c⁄figTIMER_TASK_STACK_DEPTH


275 #îr‹ 
If
 
c⁄figUSE_TIMERS
 
is
 
£t
 
to
 1 
thí
 
c⁄figTIMER_TASK_STACK_DEPTH
 
mu°
 
Æso
 
be
 
deföed
.

280 #i‚de‡
INCLUDE_xTaskGëScheduÀrSèã


281 
	#INCLUDE_xTaskGëScheduÀrSèã
 0

	)

284 #i‚de‡
INCLUDE_xTaskGëCuºítTaskH™dÀ


285 
	#INCLUDE_xTaskGëCuºítTaskH™dÀ
 0

	)

289 #i‚de‡
p‹tSET_INTERRUPT_MASK_FROM_ISR


290 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0

	)

293 #i‚de‡
p‹tCLEAR_INTERRUPT_MASK_FROM_ISR


294 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusVÆue
 ) ( Ë
	)
uxSavedStatusValue

297 #i‚de‡
p‹tCLEAN_UP_TCB


298 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

301 #i‚de‡
p‹tPRE_TASK_DELETE_HOOK


302 
	#p‹tPRE_TASK_DELETE_HOOK
–
pvTaskToDñëe
, 
pxYõldPídög
 )

	)

305 #i‚de‡
p‹tSETUP_TCB


306 
	#p‹tSETUP_TCB
–
pxTCB
 ) ( Ë
	)
pxTCB

309 #i‚de‡
c⁄figQUEUE_REGISTRY_SIZE


310 
	#c⁄figQUEUE_REGISTRY_SIZE
 0U

	)

313 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 < 1 )

314 
	#vQueueAddToRegi°ry
–
xQueue
, 
pcName
 )

	)

315 
	#vQueueUƒegi°îQueue
–
xQueue
 )

	)

318 #i‚de‡
p‹tPOINTER_SIZE_TYPE


319 
	#p‹tPOINTER_SIZE_TYPE
 
uöt32_t


	)

323 #i‚de‡
åa˚START


326 
	#åa˚START
()

	)

329 #i‚de‡
åa˚END


332 
	#åa˚END
()

	)

335 #i‚de‡
åa˚TASK_SWITCHED_IN


338 
	#åa˚TASK_SWITCHED_IN
()

	)

341 #i‚de‡
åa˚INCREASE_TICK_COUNT


344 
	#åa˚INCREASE_TICK_COUNT
–
x
 )

	)

347 #i‚de‡
åa˚LOW_POWER_IDLE_BEGIN


349 
	#åa˚LOW_POWER_IDLE_BEGIN
()

	)

352 #i‚def 
åa˚LOW_POWER_IDLE_END


354 
	#åa˚LOW_POWER_IDLE_END
()

	)

357 #i‚de‡
åa˚TASK_SWITCHED_OUT


360 
	#åa˚TASK_SWITCHED_OUT
()

	)

363 #i‚de‡
åa˚TASK_PRIORITY_INHERIT


369 
	#åa˚TASK_PRIORITY_INHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxInhîôedPri‹ôy
 )

	)

372 #i‚de‡
åa˚TASK_PRIORITY_DISINHERIT


377 
	#åa˚TASK_PRIORITY_DISINHERIT
–
pxTCBOfMuãxHﬁdî
, 
uxOrigöÆPri‹ôy
 )

	)

380 #i‚de‡
åa˚BLOCKING_ON_QUEUE_RECEIVE


385 
	#åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 )

	)

388 #i‚de‡
åa˚BLOCKING_ON_QUEUE_SEND


393 
	#åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 )

	)

396 #i‚de‡
c⁄figCHECK_FOR_STACK_OVERFLOW


397 
	#c⁄figCHECK_FOR_STACK_OVERFLOW
 0

	)

402 #i‚de‡
åa˚MOVED_TASK_TO_READY_STATE


403 
	#åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 )

	)

406 #i‚de‡
åa˚QUEUE_CREATE


407 
	#åa˚QUEUE_CREATE
–
pxNewQueue
 )

	)

410 #i‚de‡
åa˚QUEUE_CREATE_FAILED


411 
	#åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 )

	)

414 #i‚de‡
åa˚CREATE_MUTEX


415 
	#åa˚CREATE_MUTEX
–
pxNewQueue
 )

	)

418 #i‚de‡
åa˚CREATE_MUTEX_FAILED


419 
	#åa˚CREATE_MUTEX_FAILED
()

	)

422 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE


423 
	#åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

426 #i‚de‡
åa˚GIVE_MUTEX_RECURSIVE_FAILED


427 
	#åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

430 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE


431 
	#åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 )

	)

434 #i‚de‡
åa˚TAKE_MUTEX_RECURSIVE_FAILED


435 
	#åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 )

	)

438 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE


439 
	#åa˚CREATE_COUNTING_SEMAPHORE
()

	)

442 #i‚de‡
åa˚CREATE_COUNTING_SEMAPHORE_FAILED


443 
	#åa˚CREATE_COUNTING_SEMAPHORE_FAILED
()

	)

446 #i‚de‡
åa˚QUEUE_SEND


447 
	#åa˚QUEUE_SEND
–
pxQueue
 )

	)

450 #i‚de‡
åa˚QUEUE_SEND_FAILED


451 
	#åa˚QUEUE_SEND_FAILED
–
pxQueue
 )

	)

454 #i‚de‡
åa˚QUEUE_RECEIVE


455 
	#åa˚QUEUE_RECEIVE
–
pxQueue
 )

	)

458 #i‚de‡
åa˚QUEUE_PEEK


459 
	#åa˚QUEUE_PEEK
–
pxQueue
 )

	)

462 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR


463 
	#åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 )

	)

466 #i‚de‡
åa˚QUEUE_RECEIVE_FAILED


467 
	#åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 )

	)

470 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR


471 
	#åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 )

	)

474 #i‚de‡
åa˚QUEUE_SEND_FROM_ISR_FAILED


475 
	#åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 )

	)

478 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR


479 
	#åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 )

	)

482 #i‚de‡
åa˚QUEUE_RECEIVE_FROM_ISR_FAILED


483 
	#åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 )

	)

486 #i‚de‡
åa˚QUEUE_PEEK_FROM_ISR_FAILED


487 
	#åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 )

	)

490 #i‚de‡
åa˚QUEUE_DELETE


491 
	#åa˚QUEUE_DELETE
–
pxQueue
 )

	)

494 #i‚de‡
åa˚TASK_CREATE


495 
	#åa˚TASK_CREATE
–
pxNewTCB
 )

	)

498 #i‚de‡
åa˚TASK_CREATE_FAILED


499 
	#åa˚TASK_CREATE_FAILED
()

	)

502 #i‚de‡
åa˚TASK_DELETE


503 
	#åa˚TASK_DELETE
–
pxTaskToDñëe
 )

	)

506 #i‚de‡
åa˚TASK_DELAY_UNTIL


507 
	#åa˚TASK_DELAY_UNTIL
()

	)

510 #i‚de‡
åa˚TASK_DELAY


511 
	#åa˚TASK_DELAY
()

	)

514 #i‚de‡
åa˚TASK_PRIORITY_SET


515 
	#åa˚TASK_PRIORITY_SET
–
pxTask
, 
uxNewPri‹ôy
 )

	)

518 #i‚de‡
åa˚TASK_SUSPEND


519 
	#åa˚TASK_SUSPEND
–
pxTaskToSu•íd
 )

	)

522 #i‚de‡
åa˚TASK_RESUME


523 
	#åa˚TASK_RESUME
–
pxTaskToResume
 )

	)

526 #i‚de‡
åa˚TASK_RESUME_FROM_ISR


527 
	#åa˚TASK_RESUME_FROM_ISR
–
pxTaskToResume
 )

	)

530 #i‚de‡
åa˚TASK_INCREMENT_TICK


531 
	#åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 )

	)

534 #i‚de‡
åa˚TIMER_CREATE


535 
	#åa˚TIMER_CREATE
–
pxNewTimî
 )

	)

538 #i‚de‡
åa˚TIMER_CREATE_FAILED


539 
	#åa˚TIMER_CREATE_FAILED
()

	)

542 #i‚de‡
åa˚TIMER_COMMAND_SEND


543 
	#åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xMesßgeID
, 
xMesßgeVÆueVÆue
, 
xRëu∫
 )

	)

546 #i‚de‡
åa˚TIMER_EXPIRED


547 
	#åa˚TIMER_EXPIRED
–
pxTimî
 )

	)

550 #i‚de‡
åa˚TIMER_COMMAND_RECEIVED


551 
	#åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßgeID
, 
xMesßgeVÆue
 )

	)

554 #i‚de‡
åa˚MALLOC


555 
	#åa˚MALLOC
–
pvAddªss
, 
uiSize
 )

	)

558 #i‚de‡
åa˚FREE


559 
	#åa˚FREE
–
pvAddªss
, 
uiSize
 )

	)

562 #i‚de‡
åa˚EVENT_GROUP_CREATE


563 
	#åa˚EVENT_GROUP_CREATE
–
xEvítGroup
 )

	)

566 #i‚de‡
åa˚EVENT_GROUP_CREATE_FAILED


567 
	#åa˚EVENT_GROUP_CREATE_FAILED
()

	)

570 #i‚de‡
åa˚EVENT_GROUP_SYNC_BLOCK


571 
	#åa˚EVENT_GROUP_SYNC_BLOCK
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
 )

	)

574 #i‚de‡
åa˚EVENT_GROUP_SYNC_END


575 
	#åa˚EVENT_GROUP_SYNC_END
–
xEvítGroup
, 
uxBôsToSë
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

578 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_BLOCK


579 
	#åa˚EVENT_GROUP_WAIT_BITS_BLOCK
–
xEvítGroup
, 
uxBôsToWaôF‹
 )

	)

582 #i‚de‡
åa˚EVENT_GROUP_WAIT_BITS_END


583 
	#åa˚EVENT_GROUP_WAIT_BITS_END
–
xEvítGroup
, 
uxBôsToWaôF‹
, 
xTimeoutOccuºed
 ) ( Ë
	)
xTimeoutOccurred

586 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS


587 
	#åa˚EVENT_GROUP_CLEAR_BITS
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

590 #i‚de‡
åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR


591 
	#åa˚EVENT_GROUP_CLEAR_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToCÀ¨
 )

	)

594 #i‚de‡
åa˚EVENT_GROUP_SET_BITS


595 
	#åa˚EVENT_GROUP_SET_BITS
–
xEvítGroup
, 
uxBôsToSë
 )

	)

598 #i‚de‡
åa˚EVENT_GROUP_SET_BITS_FROM_ISR


599 
	#åa˚EVENT_GROUP_SET_BITS_FROM_ISR
–
xEvítGroup
, 
uxBôsToSë
 )

	)

602 #i‚de‡
åa˚EVENT_GROUP_DELETE


603 
	#åa˚EVENT_GROUP_DELETE
–
xEvítGroup
 )

	)

606 #i‚de‡
åa˚PEND_FUNC_CALL


607 
	#åa˚PEND_FUNC_CALL
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

610 #i‚de‡
åa˚PEND_FUNC_CALL_FROM_ISR


611 
	#åa˚PEND_FUNC_CALL_FROM_ISR
(
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
ªt
)

	)

614 #i‚de‡
åa˚QUEUE_REGISTRY_ADD


615 
	#åa˚QUEUE_REGISTRY_ADD
(
xQueue
, 
pcQueueName
)

	)

618 #i‚de‡
c⁄figGENERATE_RUN_TIME_STATS


619 
	#c⁄figGENERATE_RUN_TIME_STATS
 0

	)

622 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

624 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


625 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
 
mu°
 
Æso
 
be
 deföed.Ö‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS 
should
 
ˇŒ
 
a
 
p‹t
 
œyî
 
fun˘i⁄
 
to
 
£tup
á 
≥rùhîÆ
 
timî
/
cou¡î
 
th©
 
ˇn
Åhí bê
u£d
 
as
 
the
 
run
 
time
 cou¡îÅimê
ba£
.

628 #i‚de‡
p‹tGET_RUN_TIME_COUNTER_VALUE


629 #i‚de‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


630 #îr‹ 
If
 
c⁄figGENERATE_RUN_TIME_STATS
 
is
 
deföed
 
thí
 
eôhî
 
p‹tGET_RUN_TIME_COUNTER_VALUE
 
‹
 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
 
mu°
 
Æso
 
be
 deföed. 
Sì
 
the
 
exam∂es
 
¥ovided
 
™d
Åhê
FªeRTOS
 
web
 
sôe
 
m‹e
 
öf‹m©i⁄
.

636 #i‚de‡
p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS


637 
	#p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
()

	)

640 #i‚de‡
c⁄figUSE_MALLOC_FAILED_HOOK


641 
	#c⁄figUSE_MALLOC_FAILED_HOOK
 0

	)

644 #i‚de‡
p‹tPRIVILEGE_BIT


645 
	#p‹tPRIVILEGE_BIT
 ( ( 
UBa£Ty≥_t
 ) 0x00 )

	)

648 #i‚de‡
p‹tYIELD_WITHIN_API


649 
	#p‹tYIELD_WITHIN_API
 
p‹tYIELD


	)

652 #i‚de‡
pvP‹tMÆlocAlig√d


653 
	#pvP‹tMÆlocAlig√d
–
x
, 
puxSèckBuf„r
 ) ( ( (ÖuxSèckBuf„∏Ë=
NULL
 ) ? ( 
	`pvP‹tMÆloc
––x ) ) ) : (ÖuxSèckBuf„∏Ë)

	)

656 #i‚de‡
vP‹tFªeAlig√d


657 
	#vP‹tFªeAlig√d
–
pvBlockToFªe
 ) 
	`vP‹tFªe
–pvBlockToFªê)

	)

660 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


661 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 )

	)

664 #i‚de‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP


665 
	#c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 2

	)

668 #i‡
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 < 2

669 #îr‹ 
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 
mu°
 
nŸ
 
be
 
Àss
 
th™
 2

672 #i‚de‡
c⁄figUSE_TICKLESS_IDLE


673 
	#c⁄figUSE_TICKLESS_IDLE
 0

	)

676 #i‚de‡
c⁄figPRE_SLEEP_PROCESSING


677 
	#c⁄figPRE_SLEEP_PROCESSING
–
x
 )

	)

680 #i‚de‡
c⁄figPOST_SLEEP_PROCESSING


681 
	#c⁄figPOST_SLEEP_PROCESSING
–
x
 )

	)

684 #i‚de‡
c⁄figUSE_QUEUE_SETS


685 
	#c⁄figUSE_QUEUE_SETS
 0

	)

688 #i‚de‡
p‹tTASK_USES_FLOATING_POINT


689 
	#p‹tTASK_USES_FLOATING_POINT
()

	)

692 #i‚de‡
c⁄figUSE_TIME_SLICING


693 
	#c⁄figUSE_TIME_SLICING
 1

	)

696 #i‚de‡
c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS


697 
	#c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS
 0

	)

700 #i‚de‡
c⁄figUSE_NEWLIB_REENTRANT


701 
	#c⁄figUSE_NEWLIB_REENTRANT
 0

	)

704 #i‚de‡
c⁄figUSE_STATS_FORMATTING_FUNCTIONS


705 
	#c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 0

	)

708 #i‚de‡
p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID


709 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
()

	)

712 #i‚de‡
c⁄figUSE_TRACE_FACILITY


713 
	#c⁄figUSE_TRACE_FACILITY
 0

	)

716 #i‚de‡
mtCOVERAGE_TEST_MARKER


717 
	#mtCOVERAGE_TEST_MARKER
()

	)

722 #i‚de‡
c⁄figENABLE_BACKWARD_COMPATIBILITY


723 
	#c⁄figENABLE_BACKWARD_COMPATIBILITY
 1

	)

726 #i‡
c⁄figENABLE_BACKWARD_COMPATIBILITY
 == 1

727 
	#eTaskSèãGë
 
eTaskGëSèã


	)

728 
	#p‹tTickTy≥
 
TickTy≥_t


	)

729 
	#xTaskH™dÀ
 
TaskH™dÀ_t


	)

730 
	#xQueueH™dÀ
 
QueueH™dÀ_t


	)

731 
	#xSem≠h‹eH™dÀ
 
Sem≠h‹eH™dÀ_t


	)

732 
	#xQueueSëH™dÀ
 
QueueSëH™dÀ_t


	)

733 
	#xQueueSëMembîH™dÀ
 
QueueSëMembîH™dÀ_t


	)

734 
	#xTimeOutTy≥
 
TimeOut_t


	)

735 
	#xMem‹yRegi⁄
 
Mem‹yRegi⁄_t


	)

736 
	#xTaskP¨amëîs
 
TaskP¨amëîs_t


	)

737 
	#xTaskSètusTy≥
 
TaskSètus_t


	)

738 
	#xTimîH™dÀ
 
TimîH™dÀ_t


	)

739 
	#xCoRoutöeH™dÀ
 
CoRoutöeH™dÀ_t


	)

740 
	#pdTASK_HOOK_CODE
 
TaskHookFun˘i⁄_t


	)

741 
	#p‹tTICK_RATE_MS
 
p‹tTICK_PERIOD_MS


	)

745 
	#tmrTIMER_CALLBACK
 
TimîCÆlbackFun˘i⁄_t


	)

746 
	#pdTASK_CODE
 
TaskFun˘i⁄_t


	)

747 
	#xLi°Iãm
 
Li°Iãm_t


	)

748 
	#xLi°
 
Li°_t


	)

751 #ifde‡
__˝lu•lus


	@include/StackMacros.h

66 #i‚de‡
STACK_MACROS_H


67 
	#STACK_MACROS_H


	)

85 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 == 0 )

88 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
()

	)

89 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
()

	)

94 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 == 1 )

98 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
()

	)

103 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

106 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
(Ë\

	)

109 if–
	gpxCuºítTCB
->
	gpxT›OfSèck
 <
pxCuºítTCB
->
pxSèck
 ) \

111 
vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

118 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

121 
	#èskFIRST_CHECK_FOR_STACK_OVERFLOW
(Ë\

	)

125 if–
	gpxCuºítTCB
->
	gpxT›OfSèck
 >
pxCuºítTCB
->
pxEndOfSèck
 ) \

127 
vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

134 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 < 0 ) )

136 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
(Ë\

	)

138 c⁄° 
uöt8_t
 
	gucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

139 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

140 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

141 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

142 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

146 if–
memcmp
––* ) 
pxCuºítTCB
->
pxSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

148 
vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

155 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) && ( 
p‹tSTACK_GROWTH
 > 0 ) )

157 
	#èskSECOND_CHECK_FOR_STACK_OVERFLOW
(Ë\

	)

159 
öt8_t
 *
	gpcEndOfSèck
 = ( i¡8_à* ) 
pxCuºítTCB
->
pxEndOfSèck
; \

160 c⁄° 
uöt8_t
 
	gucEx≥˘edSèckByãs
[] = { 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

161 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

162 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

163 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE, \

164 
tskSTACK_FILL_BYTE
,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE,ÅskSTACK_FILL_BYTE }; \

167 
	gpcEndOfSèck
 -–
ucEx≥˘edSèckByãs
 ); \

170 if–
memcmp
––* ) 
pcEndOfSèck
, ( * ) 
ucEx≥˘edSèckByãs
, ( ucExpectedStackBytes ) ) != 0 ) \

172 
vAµliˇti⁄SèckOvîÊowHook
––
TaskH™dÀ_t
 ) 
pxCuºítTCB
,ÖxCuºítTCB->
pcTaskName
 ); \

	@include/croutine.h

66 #i‚de‡
CO_ROUTINE_H


67 
	#CO_ROUTINE_H


	)

69 #i‚de‡
INC_FREERTOS_H


73 
	~"li°.h
"

75 #ifde‡
__˝lu•lus


82 * 
	tCoRoutöeH™dÀ_t
;

85 (*
¸COROUTINE_CODE
)–
	tCoRoutöeH™dÀ_t
, 
	tUBa£Ty≥_t
 );

87 
	sc‹CoRoutöeC⁄åﬁBlock


89 
¸COROUTINE_CODE
 
pxCoRoutöeFun˘i⁄
;

90 
Li°Iãm_t
 
xGíîicLi°Iãm
;

91 
Li°Iãm_t
 
xEvítLi°Iãm
;

92 
UBa£Ty≥_t
 
uxPri‹ôy
;

93 
UBa£Ty≥_t
 
uxIndex
;

94 
uöt16_t
 
uxSèã
;

95 } 
	tCRCB_t
;

169 
Ba£Ty≥_t
 
xCoRoutöeCª©e
–
¸COROUTINE_CODE
 
pxCoRoutöeCode
, 
UBa£Ty≥_t
 
uxPri‹ôy
, UBa£Ty≥_à
uxIndex
 );

211 
vCoRoutöeScheduÀ
( );

242 
	#¸START
–
pxCRCB
 )  ( ( 
CRCB_t
 * )–pxCRCB ) )->
uxSèã
 ) { 0:

	)

273 
	#¸END
(Ë}

	)

279 
	#¸SET_STATE0
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = (
__LINE__
 * 2); ; (__LINE__ * 2):

	)

280 
	#¸SET_STATE1
–
xH™dÀ
 ) ( ( 
CRCB_t
 * )–xH™dÀ ) )->
uxSèã
 = ((
__LINE__
 * 2)+1); ; ((__LINE__ * 2)+1):

	)

328 
	#¸DELAY
–
xH™dÀ
, 
xTicksToDñay
 ) \

	)

329 if––
xTicksToDñay
 ) > 0 ) \

331 
vCoRoutöeAddToDñayedLi°
––
xTicksToDñay
 ), 
NULL
 ); \

333 
¸SET_STATE0
––
xH™dÀ
 ) );

418 
	#¸QUEUE_SEND
–
xH™dÀ
, 
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
pxResu…
 ) \

	)

420 *–
pxResu…
 ) = 
xQueueCRSíd
––
pxQueue
Ë, ( 
pvIãmToQueue
Ë, ( 
xTicksToWaô
 ) ); \

421 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

423 
¸SET_STATE0
––
xH™dÀ
 ) ); \

424 *
pxResu…
 = 
xQueueCRSíd
––
pxQueue
 ), ( 
pvIãmToQueue
 ), 0 ); \

426 if–*
pxResu…
 =
îrQUEUE_YIELD
 ) \

428 
¸SET_STATE1
––
xH™dÀ
 ) ); \

429 *
pxResu…
 = 
pdPASS
; \

510 
	#¸QUEUE_RECEIVE
–
xH™dÀ
, 
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
pxResu…
 ) \

	)

512 *–
pxResu…
 ) = 
xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), ( 
xTicksToWaô
 ) ); \

513 if–*–
pxResu…
 ) =
îrQUEUE_BLOCKED
 ) \

515 
¸SET_STATE0
––
xH™dÀ
 ) ); \

516 *–
pxResu…
 ) = 
xQueueCRRe˚ive
––
pxQueue
Ë, ( 
pvBuf„r
 ), 0 ); \

518 if–*–
pxResu…
 ) =
îrQUEUE_YIELD
 ) \

520 
¸SET_STATE1
––
xH™dÀ
 ) ); \

521 *–
pxResu…
 ) = 
pdPASS
; \

619 
	#¸QUEUE_SEND_FROM_ISR
–
pxQueue
, 
pvIãmToQueue
, 
xCoRoutöePªviou¶yWokí
 ) 
	`xQueueCRSídFromISR
––pxQueuê), (ÖvIãmToQueuê), ( xCoRoutöePªviou¶yWokí ) )

	)

732 
	#¸QUEUE_RECEIVE_FROM_ISR
–
pxQueue
, 
pvBuf„r
, 
pxCoRoutöeWokí
 ) 
	`xQueueCRRe˚iveFromISR
––pxQueuê), (ÖvBuf„∏), (ÖxCoRoutöeWokí ) )

	)

743 
vCoRoutöeAddToDñayedLi°
–
TickTy≥_t
 
xTicksToDñay
, 
Li°_t
 *
pxEvítLi°
 );

752 
Ba£Ty≥_t
 
xCoRoutöeRemoveFromEvítLi°
–c⁄° 
Li°_t
 *
pxEvítLi°
 );

754 #ifde‡
__˝lu•lus


	@include/event_groups.h

66 #i‚de‡
EVENT_GROUPS_H


67 
	#EVENT_GROUPS_H


	)

69 #i‚de‡
INC_FREERTOS_H


70 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "includeÉvent_groups.h"

73 
	~"timîs.h
"

75 #ifde‡
__˝lu•lus


118 * 
	tEvítGroupH™dÀ_t
;

128 
TickTy≥_t
 
	tEvítBôs_t
;

172 
EvítGroupH™dÀ_t
 
xEvítGroupCª©e
–Ë
PRIVILEGED_FUNCTION
;

266 
EvítBôs_t
 
xEvítGroupWaôBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, c⁄° 
Ba£Ty≥_t
 
xCÀ¨OnExô
, c⁄° Ba£Ty≥_à
xWaôF‹AŒBôs
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

323 
EvítBôs_t
 
xEvítGroupCÀ¨Bôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

337 
EvítBôs_t
 
xEvítGroupCÀ¨BôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToCÀ¨
 ) 
PRIVILEGED_FUNCTION
;

411 
EvítBôs_t
 
xEvítGroupSëBôs
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
 ) 
PRIVILEGED_FUNCTION
;

485 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

486 
Ba£Ty≥_t
 
xEvítGroupSëBôsFromISR
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° 
EvítBôs_t
 
uxBôsToSë
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 );

488 
	#xEvítGroupSëBôsFromISR
–
xEvítGroup
, 
uxBôsToSë
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîPídFun˘i⁄CÆlFromISR
–
vEvítGroupSëBôsCÆlback
, ( * ) xEvítGroup, ( 
uöt32_t
 ) uxBôsToSë,ÖxHighîPri‹ôyTaskWokí )

	)

615 
EvítBôs_t
 
xEvítGroupSync
–
EvítGroupH™dÀ_t
 
xEvítGroup
, c⁄° EvítBôs_à
uxBôsToSë
, c⁄° EvítBôs_à
uxBôsToWaôF‹
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

634 
	#xEvítGroupGëBôs
–
xEvítGroup
 ) 
	`xEvítGroupCÀ¨Bôs
–xEvítGroup, 0 )

	)

651 
	#xEvítGroupGëBôsFromISR
–
xEvítGroup
 ) 
	`xEvítGroupCÀ¨BôsFromISR
–xEvítGroup, 0 )

	)

665 
vEvítGroupDñëe
–
EvítGroupH™dÀ_t
 
xEvítGroup
 );

668 
vEvítGroupSëBôsCÆlback
–*
pvEvítGroup
, c⁄° 
uöt32_t
 
ulBôsToSë
 );

670 #i‡(
c⁄figUSE_TRACE_FACILITY
 == 1)

671 
UBa£Ty≥_t
 
uxEvítGroupGëNumbî
–* 
xEvítGroup
 );

674 #ifde‡
__˝lu•lus


	@include/list.h

95 #i‚de‡
LIST_H


96 
	#LIST_H


	)

126 #i‚de‡
c⁄figLIST_VOLATILE


127 
	#c⁄figLIST_VOLATILE


	)

130 #ifde‡
__˝lu•lus


136 
	sxLIST_ITEM


138 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
xIãmVÆue
;

139 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
pxNext
;

140 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
pxPªvious
;

141 * 
pvOw√r
;

142 * 
c⁄figLIST_VOLATILE
 
pvC⁄èöî
;

144 
xLIST_ITEM
 
	tLi°Iãm_t
;

146 
	sxMINI_LIST_ITEM


148 
c⁄figLIST_VOLATILE
 
TickTy≥_t
 
xIãmVÆue
;

149 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
pxNext
;

150 
xLIST_ITEM
 * 
c⁄figLIST_VOLATILE
 
pxPªvious
;

152 
xMINI_LIST_ITEM
 
	tMöiLi°Iãm_t
;

157 
	sxLIST


159 
c⁄figLIST_VOLATILE
 
UBa£Ty≥_t
 
uxNumbîOfIãms
;

160 
Li°Iãm_t
 * 
c⁄figLIST_VOLATILE
 
pxIndex
;

161 
MöiLi°Iãm_t
 
xLi°End
;

162 } 
	tLi°_t
;

171 
	#li°SET_LIST_ITEM_OWNER
–
pxLi°Iãm
, 
pxOw√r
 ) ( (ÖxLi°Iãm )->
pvOw√r
 = ( * ) (ÖxOw√∏Ë)

	)

180 
	#li°GET_LIST_ITEM_OWNER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvOw√r
 )

	)

189 
	#li°SET_LIST_ITEM_VALUE
–
pxLi°Iãm
, 
xVÆue
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 = ( xVÆuêË)

	)

199 
	#li°GET_LIST_ITEM_VALUE
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
xIãmVÆue
 )

	)

208 
	#li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
->
xIãmVÆue
 )

	)

216 
	#li°GET_HEAD_ENTRY
–
pxLi°
 ) ( ( (ÖxLi° )->
xLi°End
 ).
pxNext
 )

	)

224 
	#li°GET_NEXT
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pxNext
 )

	)

232 
	#li°GET_END_MARKER
–
pxLi°
 ) ( ( 
Li°Iãm_t
 c⁄° * ) ( &––pxLi° )->
xLi°End
 ) ) )

	)

241 
	#li°LIST_IS_EMPTY
–
pxLi°
 ) ( ( 
Ba£Ty≥_t
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 =–
UBa£Ty≥_t
 ) 0 ) )

	)

246 
	#li°CURRENT_LIST_LENGTH
–
pxLi°
 ) ( (ÖxLi° )->
uxNumbîOfIãms
 )

	)

268 
	#li°GET_OWNER_OF_NEXT_ENTRY
–
pxTCB
, 
pxLi°
 ) \

	)

270 
Li°_t
 * c⁄° 
pxC⁄°Li°
 = ( 
pxLi°
 ); \

273 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

274 if––* ) ( 
pxC⁄°Li°
 )->
pxIndex
 =–* ) &––pxC⁄°Li° )->
xLi°End
 ) ) \

276 –
pxC⁄°Li°
 )->
pxIndex
 = (ÖxC⁄°Li° )->pxIndex->
pxNext
; \

278 –
pxTCB
 ) = ( 
pxC⁄°Li°
 )->
pxIndex
->
pvOw√r
; \

298 
	#li°GET_OWNER_OF_HEAD_ENTRY
–
pxLi°
 ) ( (&––pxLi° )->
xLi°End
 ))->
pxNext
->
pvOw√r
 )

	)

309 
	#li°IS_CONTAINED_WITHIN
–
pxLi°
, 
pxLi°Iãm
 ) ( ( 
Ba£Ty≥_t
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 =–* ) (ÖxLi° ) ) )

	)

317 
	#li°LIST_ITEM_CONTAINER
–
pxLi°Iãm
 ) ( (ÖxLi°Iãm )->
pvC⁄èöî
 )

	)

324 
	#li°LIST_IS_INITIALISED
–
pxLi°
 ) ( (ÖxLi° )->
xLi°End
.
xIãmVÆue
 =
p‹tMAX_DELAY
 )

	)

336 
vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 );

347 
vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 );

360 
vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 );

381 
vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 );

396 
UBa£Ty≥_t
 
uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 );

398 #ifde‡
__˝lu•lus


	@include/mpu_wrappers.h

66 #i‚de‡
MPU_WRAPPERS_H


67 
	#MPU_WRAPPERS_H


	)

71 #ifde‡
p‹tUSING_MPU_WRAPPERS


76 #i‚de‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


78 
	#xTaskGíîicCª©e
 
MPU_xTaskGíîicCª©e


	)

79 
	#vTaskAŒoˇãMPURegi⁄s
 
MPU_vTaskAŒoˇãMPURegi⁄s


	)

80 
	#vTaskDñëe
 
MPU_vTaskDñëe


	)

81 
	#vTaskDñayU¡û
 
MPU_vTaskDñayU¡û


	)

82 
	#vTaskDñay
 
MPU_vTaskDñay


	)

83 
	#uxTaskPri‹ôyGë
 
MPU_uxTaskPri‹ôyGë


	)

84 
	#vTaskPri‹ôySë
 
MPU_vTaskPri‹ôySë


	)

85 
	#eTaskGëSèã
 
MPU_eTaskGëSèã


	)

86 
	#vTaskSu•íd
 
MPU_vTaskSu•íd


	)

87 
	#vTaskResume
 
MPU_vTaskResume


	)

88 
	#vTaskSu•ídAŒ
 
MPU_vTaskSu•ídAŒ


	)

89 
	#xTaskResumeAŒ
 
MPU_xTaskResumeAŒ


	)

90 
	#xTaskGëTickCou¡
 
MPU_xTaskGëTickCou¡


	)

91 
	#uxTaskGëNumbîOfTasks
 
MPU_uxTaskGëNumbîOfTasks


	)

92 
	#vTaskLi°
 
MPU_vTaskLi°


	)

93 
	#vTaskGëRunTimeSèts
 
MPU_vTaskGëRunTimeSèts


	)

94 
	#vTaskSëAµliˇti⁄TaskTag
 
MPU_vTaskSëAµliˇti⁄TaskTag


	)

95 
	#xTaskGëAµliˇti⁄TaskTag
 
MPU_xTaskGëAµliˇti⁄TaskTag


	)

96 
	#xTaskCÆlAµliˇti⁄TaskHook
 
MPU_xTaskCÆlAµliˇti⁄TaskHook


	)

97 
	#uxTaskGëSèckHighW©îM¨k
 
MPU_uxTaskGëSèckHighW©îM¨k


	)

98 
	#xTaskGëCuºítTaskH™dÀ
 
MPU_xTaskGëCuºítTaskH™dÀ


	)

99 
	#xTaskGëScheduÀrSèã
 
MPU_xTaskGëScheduÀrSèã


	)

100 
	#xTaskGëIdÀTaskH™dÀ
 
MPU_xTaskGëIdÀTaskH™dÀ


	)

101 
	#uxTaskGëSy°emSèã
 
MPU_uxTaskGëSy°emSèã


	)

103 
	#xQueueGíîicCª©e
 
MPU_xQueueGíîicCª©e


	)

104 
	#xQueueCª©eMuãx
 
MPU_xQueueCª©eMuãx


	)

105 
	#xQueueGiveMuãxRecursive
 
MPU_xQueueGiveMuãxRecursive


	)

106 
	#xQueueTakeMuãxRecursive
 
MPU_xQueueTakeMuãxRecursive


	)

107 
	#xQueueCª©eCou¡ögSem≠h‹e
 
MPU_xQueueCª©eCou¡ögSem≠h‹e


	)

108 
	#xQueueGíîicSíd
 
MPU_xQueueGíîicSíd


	)

109 
	#xQueueA…GíîicSíd
 
MPU_xQueueA…GíîicSíd


	)

110 
	#xQueueA…GíîicRe˚ive
 
MPU_xQueueA…GíîicRe˚ive


	)

111 
	#xQueueGíîicRe˚ive
 
MPU_xQueueGíîicRe˚ive


	)

112 
	#uxQueueMesßgesWaôög
 
MPU_uxQueueMesßgesWaôög


	)

113 
	#vQueueDñëe
 
MPU_vQueueDñëe


	)

114 
	#xQueueGíîicRe£t
 
MPU_xQueueGíîicRe£t


	)

115 
	#xQueueCª©eSë
 
MPU_xQueueCª©eSë


	)

116 
	#xQueueSñe˘FromSë
 
MPU_xQueueSñe˘FromSë


	)

117 
	#xQueueAddToSë
 
MPU_xQueueAddToSë


	)

118 
	#xQueueRemoveFromSë
 
MPU_xQueueRemoveFromSë


	)

119 
	#xQueuePìkFromISR
 
MPU_xQueuePìkFromISR


	)

121 
	#pvP‹tMÆloc
 
MPU_pvP‹tMÆloc


	)

122 
	#vP‹tFªe
 
MPU_vP‹tFªe


	)

123 
	#xP‹tGëFªeHópSize
 
MPU_xP‹tGëFªeHópSize


	)

124 
	#vP‹tInôüli£Blocks
 
MPU_vP‹tInôüli£Blocks


	)

126 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

127 
	#vQueueAddToRegi°ry
 
MPU_vQueueAddToRegi°ry


	)

128 
	#vQueueUƒegi°îQueue
 
MPU_vQueueUƒegi°îQueue


	)

132 
	#PRIVILEGED_FUNCTION


	)

137 
	#PRIVILEGED_FUNCTION
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_fun˘i⁄s")))

	)

138 
	#PRIVILEGED_DATA
 
	`__©åibuã__
((
	`£˘i⁄
("¥ivûeged_d©a")))

	)

144 
	#PRIVILEGED_FUNCTION


	)

145 
	#PRIVILEGED_DATA


	)

146 
	#p‹tUSING_MPU_WRAPPERS
 0

	)

	@include/portable.h

70 #i‚de‡
PORTABLE_H


71 
	#PORTABLE_H


	)

77 #ifde‡
OPEN_WATCOM_INDUSTRIAL_PC_PORT


78 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\pc\p‹tma¸o.h
"

79 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

82 #ifde‡
OPEN_WATCOM_FLASH_LITE_186_PORT


83 
	~"..\..\Sour˚\p‹èbÀ\ow©com\16bôdos\Êsh186\p‹tma¸o.h
"

84 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

87 #ifde‡
GCC_MEGA_AVR


88 
	~"../p‹èbÀ/GCC/ATMega323/p‹tma¸o.h
"

91 #ifde‡
IAR_MEGA_AVR


92 
	~"../p‹èbÀ/IAR/ATMega323/p‹tma¸o.h
"

95 #ifde‡
MPLAB_PIC24_PORT


96 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

99 #ifde‡
MPLAB_DSPIC_PORT


100 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC24_dsPIC/p‹tma¸o.h
"

103 #ifde‡
MPLAB_PIC18F_PORT


104 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC18F/p‹tma¸o.h
"

107 #ifde‡
MPLAB_PIC32MX_PORT


108 
	~"../../Sour˚/p‹èbÀ/MPLAB/PIC32MX/p‹tma¸o.h
"

111 #ifde‡
_FEDPICC


112 
	~"libFªeRTOS/In˛ude/p‹tma¸o.h
"

115 #ifde‡
SDCC_CYGNAL


116 
	~"../../Sour˚/p‹èbÀ/SDCC/Cyg«l/p‹tma¸o.h
"

119 #ifde‡
GCC_ARM7


120 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC2000/p‹tma¸o.h
"

123 #ifde‡
GCC_ARM7_ECLIPSE


124 
	~"p‹tma¸o.h
"

127 #ifde‡
ROWLEY_LPC23xx


128 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_LPC23xx/p‹tma¸o.h
"

131 #ifde‡
IAR_MSP430


132 
	~"..\..\Sour˚\p‹èbÀ\IAR\MSP430\p‹tma¸o.h
"

135 #ifde‡
GCC_MSP430


136 
	~"../../Sour˚/p‹èbÀ/GCC/MSP430F449/p‹tma¸o.h
"

139 #ifde‡
ROWLEY_MSP430


140 
	~"../../Sour˚/p‹èbÀ/RowÀy/MSP430F449/p‹tma¸o.h
"

143 #ifde‡
ARM7_LPC21xx_KEIL_RVDS


144 
	~"..\..\Sour˚\p‹èbÀ\RVDS\ARM7_LPC21xx\p‹tma¸o.h
"

147 #ifde‡
SAM7_GCC


148 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91SAM7S/p‹tma¸o.h
"

151 #ifde‡
SAM7_IAR


152 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM7S64\p‹tma¸o.h
"

155 #ifde‡
SAM9XE_IAR


156 
	~"..\..\Sour˚\p‹èbÀ\IAR\AtmñSAM9XE\p‹tma¸o.h
"

159 #ifde‡
LPC2000_IAR


160 
	~"..\..\Sour˚\p‹èbÀ\IAR\LPC2000\p‹tma¸o.h
"

163 #ifde‡
STR71X_IAR


164 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR71x\p‹tma¸o.h
"

167 #ifde‡
STR75X_IAR


168 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR75x\p‹tma¸o.h
"

171 #ifde‡
STR75X_GCC


172 
	~"..\..\Sour˚\p‹èbÀ\GCC\STR75x\p‹tma¸o.h
"

175 #ifde‡
STR91X_IAR


176 
	~"..\..\Sour˚\p‹èbÀ\IAR\STR91x\p‹tma¸o.h
"

179 #ifde‡
GCC_H8S


180 
	~"../../Sour˚/p‹èbÀ/GCC/H8S2329/p‹tma¸o.h
"

183 #ifde‡
GCC_AT91FR40008


184 
	~"../../Sour˚/p‹èbÀ/GCC/ARM7_AT91FR40008/p‹tma¸o.h
"

187 #ifde‡
RVDS_ARMCM3_LM3S102


188 
	~"../../Sour˚/p‹èbÀ/RVDS/ARM_CM3/p‹tma¸o.h
"

191 #ifde‡
GCC_ARMCM3_LM3S102


192 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

195 #ifde‡
GCC_ARMCM3


196 
	~"../../Sour˚/p‹èbÀ/GCC/ARM_CM3/p‹tma¸o.h
"

199 #ifde‡
IAR_ARM_CM3


200 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

203 #ifde‡
IAR_ARMCM3_LM


204 
	~"../../Sour˚/p‹èbÀ/IAR/ARM_CM3/p‹tma¸o.h
"

207 #ifde‡
HCS12_CODE_WARRIOR


208 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/HCS12/p‹tma¸o.h
"

211 #ifde‡
MICROBLAZE_GCC


212 
	~"../../Sour˚/p‹èbÀ/GCC/Mi¸oBœze/p‹tma¸o.h
"

215 #ifde‡
TERN_EE


216 
	~"..\..\Sour˚\p‹èbÀ\P¨adigm\Tîn_EE\smÆl\p‹tma¸o.h
"

219 #ifde‡
GCC_HCS12


220 
	~"../../Sour˚/p‹èbÀ/GCC/HCS12/p‹tma¸o.h
"

223 #ifde‡
GCC_MCF5235


224 
	~"../../Sour˚/p‹èbÀ/GCC/MCF5235/p‹tma¸o.h
"

227 #ifde‡
COLDFIRE_V2_GCC


228 
	~"../../../Sour˚/p‹èbÀ/GCC/CﬁdFúe_V2/p‹tma¸o.h
"

231 #ifde‡
COLDFIRE_V2_CODEWARRIOR


232 
	~"../../Sour˚/p‹èbÀ/CodeW¨ri‹/CﬁdFúe_V2/p‹tma¸o.h
"

235 #ifde‡
GCC_PPC405


236 
	~"../../Sour˚/p‹èbÀ/GCC/PPC405_Xûöx/p‹tma¸o.h
"

239 #ifde‡
GCC_PPC440


240 
	~"../../Sour˚/p‹èbÀ/GCC/PPC440_Xûöx/p‹tma¸o.h
"

243 #ifde‡
_16FX_SOFTUNE


244 
	~"..\..\Sour˚\p‹èbÀ\So·u√\MB96340\p‹tma¸o.h
"

247 #ifde‡
BCC_INDUSTRIAL_PC_PORT


250 
	~"‰c⁄fig.h
"

251 
	~"..\p‹èbÀ\BCC\16BôDOS\PC\¥tma¸o.h
"

252 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

255 #ifde‡
BCC_FLASH_LITE_186_PORT


258 
	~"‰c⁄fig.h
"

259 
	~"..\p‹èbÀ\BCC\16BôDOS\Êsh186\¥tma¸o.h
"

260 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

263 #ifde‡
__GNUC__


264 #ifde‡
__AVR32_AVR32A__


265 
	~"p‹tma¸o.h
"

269 #ifde‡
__ICCAVR32__


270 #ifde‡
__CORE__


271 #i‡
__CORE__
 =
__AVR32A__


272 
	~"p‹tma¸o.h
"

277 #ifde‡
__91467D


278 
	~"p‹tma¸o.h
"

281 #ifde‡
__96340


282 
	~"p‹tma¸o.h
"

286 #ifde‡
__IAR_V850ES_Fx3__


287 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

290 #ifde‡
__IAR_V850ES_Jx3__


291 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

294 #ifde‡
__IAR_V850ES_Jx3_L__


295 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

298 #ifde‡
__IAR_V850ES_Jx2__


299 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

302 #ifde‡
__IAR_V850ES_Hx2__


303 
	~"../../Sour˚/p‹èbÀ/IAR/V850ES/p‹tma¸o.h
"

306 #ifde‡
__IAR_78K0R_Kx3__


307 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

310 #ifde‡
__IAR_78K0R_Kx3L__


311 
	~"../../Sour˚/p‹èbÀ/IAR/78K0R/p‹tma¸o.h
"

320 #i‚de‡
p‹tENTER_CRITICAL


321 
	~"p‹tma¸o.h
"

324 #i‡
p‹tBYTE_ALIGNMENT
 == 8

325 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

328 #i‡
p‹tBYTE_ALIGNMENT
 == 4

329 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0003 )

	)

332 #i‡
p‹tBYTE_ALIGNMENT
 == 2

333 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0001 )

	)

336 #i‡
p‹tBYTE_ALIGNMENT
 == 1

337 
	#p‹tBYTE_ALIGNMENT_MASK
 ( 0x0000 )

	)

340 #i‚de‡
p‹tBYTE_ALIGNMENT_MASK


344 #i‚de‡
p‹tNUM_CONFIGURABLE_REGIONS


345 
	#p‹tNUM_CONFIGURABLE_REGIONS
 1

	)

348 #ifde‡
__˝lu•lus


352 
	~"mpu_wøµîs.h
"

360 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

361 
SèckTy≥_t
 *
pxP‹tInôüli£Sèck
–SèckTy≥_à*
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
, 
Ba£Ty≥_t
 
xRunPrivûeged
 ) 
PRIVILEGED_FUNCTION
;

363 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

369 *
	`pvP‹tMÆloc
–
size_t
 
xSize
 ) 
PRIVILEGED_FUNCTION
;

370 
	`vP‹tFªe
–*
pv
 ) 
PRIVILEGED_FUNCTION
;

371 
	`vP‹tInôüli£Blocks
–Ë
PRIVILEGED_FUNCTION
;

372 
size_t
 
	`xP‹tGëFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

373 
size_t
 
	`xP‹tGëMöimumEvîFªeHópSize
–Ë
PRIVILEGED_FUNCTION
;

379 
Ba£Ty≥_t
 
	`xP‹tSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

386 
	`vP‹tEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

395 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

396 
xMEMORY_REGION
;

397 
	`vP‹tSt‹eTaskMPUSëtögs
–
xMPU_SETTINGS
 *
xMPUSëtögs
, c⁄° 
xMEMORY_REGION
 * c⁄° 
xRegi⁄s
, 
SèckTy≥_t
 *
pxBŸtomOfSèck
, 
uöt16_t
 
usSèckDïth
 ) 
PRIVILEGED_FUNCTION
;

400 #ifde‡
__˝lu•lus


401 
	}
}

	@include/projdefs.h

66 #i‚de‡
PROJDEFS_H


67 
	#PROJDEFS_H


	)

73 (*
	tTaskFun˘i⁄_t
)( * );

75 
	#pdFALSE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

76 
	#pdTRUE
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

78 
	#pdPASS
 ( 
pdTRUE
 )

	)

79 
	#pdFAIL
 ( 
pdFALSE
 )

	)

80 
	#îrQUEUE_EMPTY
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

81 
	#îrQUEUE_FULL
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

84 
	#îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
 ( -1 )

	)

85 
	#îrQUEUE_BLOCKED
 ( -4 )

	)

86 
	#îrQUEUE_YIELD
 ( -5 )

	)

	@include/queue.h

67 #i‚de‡
QUEUE_H


68 
	#QUEUE_H


	)

70 #i‚de‡
INC_FREERTOS_H


71 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include queue.h"

74 #ifde‡
__˝lu•lus


84 * 
	tQueueH™dÀ_t
;

91 * 
	tQueueSëH™dÀ_t
;

98 * 
	tQueueSëMembîH™dÀ_t
;

101 
	#queueSEND_TO_BACK
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

102 
	#queueSEND_TO_FRONT
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

103 
	#queueOVERWRITE
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

106 
	#queueQUEUE_TYPE_BASE
 ( ( 
uöt8_t
 ) 0U )

	)

107 
	#queueQUEUE_TYPE_SET
 ( ( 
uöt8_t
 ) 0U )

	)

108 
	#queueQUEUE_TYPE_MUTEX
 ( ( 
uöt8_t
 ) 1U )

	)

109 
	#queueQUEUE_TYPE_COUNTING_SEMAPHORE
 ( ( 
uöt8_t
 ) 2U )

	)

110 
	#queueQUEUE_TYPE_BINARY_SEMAPHORE
 ( ( 
uöt8_t
 ) 3U )

	)

111 
	#queueQUEUE_TYPE_RECURSIVE_MUTEX
 ( ( 
uöt8_t
 ) 4U )

	)

169 
	#xQueueCª©e
–
uxQueueLígth
, 
uxIãmSize
 ) 
	`xQueueGíîicCª©e
–uxQueueLígth, uxIãmSize, 
queueQUEUE_TYPE_BASE
 )

	)

251 
	#xQueueSídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

333 
	#xQueueSídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

417 
	#xQueueSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

500 
	#xQueueOvîwrôe
–
xQueue
, 
pvIãmToQueue
 ) 
	`xQueueGíîicSíd
––xQueuê), (ÖvIãmToQueuê), 0, 
queueOVERWRITE
 )

	)

588 
Ba£Ty≥_t
 
xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

684 
	#xQueuePìk
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdTRUE
 )

	)

717 
Ba£Ty≥_t
 
xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

810 
	#xQueueRe˚ive
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueGíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdFALSE
 )

	)

909 
Ba£Ty≥_t
 
xQueueGíîicRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° Ba£Ty≥_à
xJu°Pìk
 ) 
PRIVILEGED_FUNCTION
;

924 
UBa£Ty≥_t
 
uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

941 
UBa£Ty≥_t
 
uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

955 
vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1025 
	#xQueueSídToFr⁄tFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_FRONT
 )

	)

1096 
	#xQueueSídToBackFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1183 
	#xQueueOvîwrôeFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueOVERWRITE
 )

	)

1257 
	#xQueueSídFromISR
–
xQueue
, 
pvIãmToQueue
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––xQueuê), (ÖvIãmToQueuê), (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

1335 
Ba£Ty≥_t
 
xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

1424 
Ba£Ty≥_t
 
xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
 ) 
PRIVILEGED_FUNCTION
;

1430 
Ba£Ty≥_t
 
xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1431 
Ba£Ty≥_t
 
xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1432 
UBa£Ty≥_t
 
uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1449 
Ba£Ty≥_t
 
xQueueA…GíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, Ba£Ty≥_à
xC›yPosôi⁄
 );

1450 
Ba£Ty≥_t
 
xQueueA…GíîicRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, Ba£Ty≥_à
xJu°Pìkög
 );

1451 
	#xQueueA…SídToFr⁄t
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_FRONT
 )

	)

1452 
	#xQueueA…SídToBack
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicSíd
––xQueuê), (ÖvIãmToQueuê), ( xTicksToWaô ), 
queueSEND_TO_BACK
 )

	)

1453 
	#xQueueA…Re˚ive
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdFALSE
 )

	)

1454 
	#xQueueA…Pìk
–
xQueue
, 
pvBuf„r
, 
xTicksToWaô
 ) 
	`xQueueA…GíîicRe˚ive
––xQueuê), (ÖvBuf„∏), ( xTicksToWaô ), 
pdTRUE
 )

	)

1465 
Ba£Ty≥_t
 
xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, Ba£Ty≥_à
xCoRoutöePªviou¶yWokí
 );

1466 
Ba£Ty≥_t
 
xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, Ba£Ty≥_à*
pxTaskWokí
 );

1467 
Ba£Ty≥_t
 
xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
 );

1468 
Ba£Ty≥_t
 
xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 );

1475 
QueueH™dÀ_t
 
xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1476 
QueueH™dÀ_t
 
xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 ) 
PRIVILEGED_FUNCTION
;

1477 * 
xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 ) 
PRIVILEGED_FUNCTION
;

1483 
Ba£Ty≥_t
 
xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1484 
Ba£Ty≥_t
 
xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
pxMuãx
 ) 
PRIVILEGED_FUNCTION
;

1492 
	#xQueueRe£t
–
xQueue
 ) 
	`xQueueGíîicRe£t
–xQueue, 
pdFALSE
 )

	)

1516 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

1517 
vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcName
 ) 
PRIVILEGED_FUNCTION
;

1530 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

1531 
vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1538 
QueueH™dÀ_t
 
xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 ) 
PRIVILEGED_FUNCTION
;

1588 
QueueSëH™dÀ_t
 
xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 ) 
PRIVILEGED_FUNCTION
;

1612 
Ba£Ty≥_t
 
xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1631 
Ba£Ty≥_t
 
xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1667 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1672 
QueueSëMembîH™dÀ_t
 
xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 ) 
PRIVILEGED_FUNCTION
;

1675 
vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1676 
Ba£Ty≥_t
 
xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, Ba£Ty≥_à
xNewQueue
 ) 
PRIVILEGED_FUNCTION
;

1677 
vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 ) 
PRIVILEGED_FUNCTION
;

1678 
UBa£Ty≥_t
 
uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1679 
uöt8_t
 
ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 ) 
PRIVILEGED_FUNCTION
;

1682 #ifde‡
__˝lu•lus


	@include/semphr.h

66 #i‚de‡
SEMAPHORE_H


67 
	#SEMAPHORE_H


	)

69 #i‚de‡
INC_FREERTOS_H


70 #îr‹ "ö˛udêFªeRTOS.h" 
mu°
 
≠≥¨
 
ö
 
sour˚
 
fûes
 
bef‹e
 "include semphr.h"

73 
	~"queue.h
"

75 
QueueH™dÀ_t
 
	tSem≠h‹eH™dÀ_t
;

77 
	#£mBINARY_SEMAPHORE_QUEUE_LENGTH
 ( ( 
uöt8_t
 ) 1U )

	)

78 
	#£mSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
uöt8_t
 ) 0U )

	)

79 
	#£mGIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

127 
	#vSem≠h‹eCª©eBö¨y
–
xSem≠h‹e
 ) \

	)

129 –
	gxSem≠h‹e
 ) = 
xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 ); \

130 if––
	gxSem≠h‹e
 ) !
NULL
 ) \

132 –Ë
xSem≠h‹eGive
––
xSem≠h‹e
 ) ); \

181 
	#xSem≠h‹eCª©eBö¨y
(Ë
	`xQueueGíîicCª©e
––
UBa£Ty≥_t
 ) 1, 
£mSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_BINARY_SEMAPHORE
 )

	)

248 
	#xSem≠h‹eTake
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueGíîicRe˚ive
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, ( xBlockTimê), 
pdFALSE
 )

	)

341 
	#xSem≠h‹eTakeRecursive
–
xMuãx
, 
xBlockTime
 ) 
	`xQueueTakeMuãxRecursive
––xMuãx ), ( xBlockTimêË)

	)

356 
	#xSem≠h‹eA…Take
–
xSem≠h‹e
, 
xBlockTime
 ) 
	`xQueueA…GíîicRe˚ive
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, ( xBlockTimê), 
pdFALSE
 )

	)

419 
	#xSem≠h‹eGive
–
xSem≠h‹e
 ) 
	`xQueueGíîicSíd
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

503 
	#xSem≠h‹eGiveRecursive
–
xMuãx
 ) 
	`xQueueGiveMuãxRecursive
––xMuãx ) )

	)

517 
	#xSem≠h‹eA…Give
–
xSem≠h‹e
 ) 
	`xQueueA…GíîicSíd
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, 
£mGIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 )

	)

608 
	#xSem≠h‹eGiveFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueGíîicSídFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ), 
queueSEND_TO_BACK
 )

	)

642 
	#xSem≠h‹eTakeFromISR
–
xSem≠h‹e
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) ( xSem≠h‹ê), 
NULL
, (ÖxHighîPri‹ôyTaskWokí ) )

	)

689 
	#xSem≠h‹eCª©eMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_MUTEX
 )

	)

744 
	#xSem≠h‹eCª©eRecursiveMuãx
(Ë
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_RECURSIVE_MUTEX
 )

	)

807 
	#xSem≠h‹eCª©eCou¡ög
–
uxMaxCou¡
, 
uxInôülCou¡
 ) 
	`xQueueCª©eCou¡ögSem≠h‹e
––uxMaxCou¡ ), ( uxInôülCou¡ ) )

	)

821 
	#vSem≠h‹eDñëe
–
xSem≠h‹e
 ) 
	`vQueueDñëe
––
QueueH™dÀ_t
 ) ( xSem≠h‹êË)

	)

836 
	#xSem≠h‹eGëMuãxHﬁdî
–
xSem≠h‹e
 ) 
	`xQueueGëMuãxHﬁdî
––xSem≠h‹êË)

	)

	@include/task.h

67 #i‚de‡
INC_TASK_H


68 
	#INC_TASK_H


	)

70 #i‚de‡
INC_FREERTOS_H


74 
	~"li°.h
"

76 #ifde‡
__˝lu•lus


84 
	#tskKERNEL_VERSION_NUMBER
 "V8.0.0"

	)

85 
	#tskKERNEL_VERSION_MAJOR
 8

	)

86 
	#tskKERNEL_VERSION_MINOR
 0

	)

87 
	#tskKERNEL_VERSION_BUILD
 0

	)

99 * 
	tTaskH™dÀ_t
;

105 
Ba£Ty≥_t
 (*
	tTaskHookFun˘i⁄_t
)( * );

110 
eRu¬ög
 = 0,

111 
eRódy
,

112 
eBlocked
,

113 
eSu•íded
,

114 
eDñëed


115 } 
	teTaskSèã
;

120 
	sxTIME_OUT


122 
Ba£Ty≥_t
 
xOvîÊowCou¡
;

123 
TickTy≥_t
 
xTimeOnE¡îög
;

124 } 
	tTimeOut_t
;

129 
	sxMEMORY_REGION


131 *
pvBa£Addªss
;

132 
uöt32_t
 
ulLígthInByãs
;

133 
uöt32_t
 
ulP¨amëîs
;

134 } 
	tMem‹yRegi⁄_t
;

139 
	sxTASK_PARAMETERS


141 
TaskFun˘i⁄_t
 
pvTaskCode
;

142 c⁄° * c⁄° 
pcName
;

143 
uöt16_t
 
usSèckDïth
;

144 *
pvP¨amëîs
;

145 
UBa£Ty≥_t
 
uxPri‹ôy
;

146 
SèckTy≥_t
 *
puxSèckBuf„r
;

147 
Mem‹yRegi⁄_t
 
xRegi⁄s
[ 
p‹tNUM_CONFIGURABLE_REGIONS
 ];

148 } 
	tTaskP¨amëîs_t
;

152 
	sxTASK_STATUS


154 
TaskH™dÀ_t
 
xH™dÀ
;

155 c⁄° *
pcTaskName
;

156 
UBa£Ty≥_t
 
xTaskNumbî
;

157 
eTaskSèã
 
eCuºítSèã
;

158 
UBa£Ty≥_t
 
uxCuºítPri‹ôy
;

159 
UBa£Ty≥_t
 
uxBa£Pri‹ôy
;

160 
uöt32_t
 
ulRunTimeCou¡î
;

161 
uöt16_t
 
usSèckHighW©îM¨k
;

162 } 
	tTaskSètus_t
;

167 
eAb‹tSÀï
 = 0,

168 
eSènd¨dSÀï
,

169 
eNoTasksWaôögTimeout


170 } 
	teSÀïModeSètus
;

178 
	#tskIDLE_PRIORITY
 ( ( 
UBa£Ty≥_t
 ) 0U )

	)

188 
	#èskYIELD
(Ë
	`p‹tYIELD
()

	)

202 
	#èskENTER_CRITICAL
(Ë
	`p‹tENTER_CRITICAL
()

	)

216 
	#èskEXIT_CRITICAL
(Ë
	`p‹tEXIT_CRITICAL
()

	)

226 
	#èskDISABLE_INTERRUPTS
(Ë
	`p‹tDISABLE_INTERRUPTS
()

	)

236 
	#èskENABLE_INTERRUPTS
(Ë
	`p‹tENABLE_INTERRUPTS
()

	)

241 
	#èskSCHEDULER_SUSPENDED
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

242 
	#èskSCHEDULER_NOT_STARTED
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

243 
	#èskSCHEDULER_RUNNING
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

330 
	#xTaskCª©e
–
pvTaskCode
, 
pcName
, 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
 ) 
	`xTaskGíîicCª©e
––pvTaskCodê), (ÖcNamê), ( usSèckDïth ), (ÖvP¨amëî†), ( uxPri‹ôy ), (ÖxCª©edTask ), ( 
NULL
 ), ( NULL ) )

	)

399 
	#xTaskCª©eRe°ri˘ed
–
x
, 
pxCª©edTask
 ) 
	`xTaskGíîicCª©e
–((x)->
pvTaskCode
), ((x)->
pcName
), ((x)->
usSèckDïth
), ((x)->
pvP¨amëîs
), ((x)->
uxPri‹ôy
), (pxCª©edTask), ((x)->
puxSèckBuf„r
), ((x)->
xRegi⁄s
Ë)

	)

447 
vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
pxRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

488 
vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 ) 
PRIVILEGED_FUNCTION
;

540 
vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 ) 
PRIVILEGED_FUNCTION
;

599 
vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 ) 
PRIVILEGED_FUNCTION
;

646 
UBa£Ty≥_t
 
uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

664 
eTaskSèã
 
eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

706 
vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 ) 
PRIVILEGED_FUNCTION
;

757 
vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 ) 
PRIVILEGED_FUNCTION
;

806 
vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

835 
Ba£Ty≥_t
 
xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 ) 
PRIVILEGED_FUNCTION
;

868 
vTaskSèπScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

924 
vTaskEndScheduÀr
–Ë
PRIVILEGED_FUNCTION
;

975 
vTaskSu•ídAŒ
–Ë
PRIVILEGED_FUNCTION
;

1029 
Ba£Ty≥_t
 
xTaskResumeAŒ
–Ë
PRIVILEGED_FUNCTION
;

1044 
TickTy≥_t
 
xTaskGëTickCou¡
–Ë
PRIVILEGED_FUNCTION
;

1060 
TickTy≥_t
 
xTaskGëTickCou¡FromISR
–Ë
PRIVILEGED_FUNCTION
;

1074 
UBa£Ty≥_t
 
uxTaskGëNumbîOfTasks
–Ë
PRIVILEGED_FUNCTION
;

1088 *
pcTaskGëTaskName
–
TaskH™dÀ_t
 
xTaskToQuîy
 ) 
PRIVILEGED_FUNCTION
;

1109 
UBa£Ty≥_t
 
uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1117 #ifde‡
c⁄figUSE_APPLICATION_TASK_TAG


1118 #i‡
c⁄figUSE_APPLICATION_TASK_TAG
 == 1

1127 
vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

1135 
TaskHookFun˘i⁄_t
 
xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1150 
Ba£Ty≥_t
 
xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 ) 
PRIVILEGED_FUNCTION
;

1159 
TaskH™dÀ_t
 
xTaskGëIdÀTaskH™dÀ
( );

1258 
UBa£Ty≥_t
 
uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° UBa£Ty≥_à
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 );

1305 
vTaskLi°
–* 
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1359 
vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 ) 
PRIVILEGED_FUNCTION
;

1380 
Ba£Ty≥_t
 
xTaskIn¸emítTick
–Ë
PRIVILEGED_FUNCTION
;

1413 
vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1414 
vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xIãmVÆue
, c⁄° TickTy≥_à
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1427 
vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1453 
Ba£Ty≥_t
 
xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 ) 
PRIVILEGED_FUNCTION
;

1454 
Ba£Ty≥_t
 
xTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
, c⁄° 
TickTy≥_t
 
xIãmVÆue
 ) 
PRIVILEGED_FUNCTION
;

1464 
vTaskSwôchC⁄ãxt
–Ë
PRIVILEGED_FUNCTION
;

1470 
TickTy≥_t
 
uxTaskRe£tEvítIãmVÆue
–Ë
PRIVILEGED_FUNCTION
;

1475 
TaskH™dÀ_t
 
xTaskGëCuºítTaskH™dÀ
–Ë
PRIVILEGED_FUNCTION
;

1480 
vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 ) 
PRIVILEGED_FUNCTION
;

1486 
Ba£Ty≥_t
 
xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1492 
vTaskMis£dYõld
–Ë
PRIVILEGED_FUNCTION
;

1498 
Ba£Ty≥_t
 
xTaskGëScheduÀrSèã
–Ë
PRIVILEGED_FUNCTION
;

1504 
vTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

1510 
vTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 ) 
PRIVILEGED_FUNCTION
;

1516 
Ba£Ty≥_t
 
xTaskGíîicCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° * c⁄° 
pcName
, c⁄° 
uöt16_t
 
usSèckDïth
, * c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
, 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 ) 
PRIVILEGED_FUNCTION
;

1521 
UBa£Ty≥_t
 
uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

1527 
vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
, c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 ) 
PRIVILEGED_FUNCTION
;

1537 
vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 ) 
PRIVILEGED_FUNCTION
;

1553 
eSÀïModeSètus
 
eTaskC⁄fúmSÀïModeSètus
–Ë
PRIVILEGED_FUNCTION
;

1555 #ifde‡
__˝lu•lus


	@include/timers.h

67 #i‚de‡
TIMERS_H


68 
	#TIMERS_H


	)

70 #i‚de‡
INC_FREERTOS_H


76 
	~"èsk.h
"

79 #ifde‡
__˝lu•lus


92 
	#tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) -2 )

	)

93 
	#tmrCOMMAND_EXECUTE_CALLBACK
 ( ( 
Ba£Ty≥_t
 ) -1 )

	)

94 
	#tmrCOMMAND_START_DONT_TRACE
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

95 
	#tmrCOMMAND_START
 ( ( 
Ba£Ty≥_t
 ) 1 )

	)

96 
	#tmrCOMMAND_RESET
 ( ( 
Ba£Ty≥_t
 ) 2 )

	)

97 
	#tmrCOMMAND_STOP
 ( ( 
Ba£Ty≥_t
 ) 3 )

	)

98 
	#tmrCOMMAND_CHANGE_PERIOD
 ( ( 
Ba£Ty≥_t
 ) 4 )

	)

99 
	#tmrCOMMAND_DELETE
 ( ( 
Ba£Ty≥_t
 ) 5 )

	)

101 
	#tmrFIRST_FROM_ISR_COMMAND
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

102 
	#tmrCOMMAND_START_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 6 )

	)

103 
	#tmrCOMMAND_RESET_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 7 )

	)

104 
	#tmrCOMMAND_STOP_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 8 )

	)

105 
	#tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
 ( ( 
Ba£Ty≥_t
 ) 9 )

	)

114 * 
	tTimîH™dÀ_t
;

119 (*
TimîCÆlbackFun˘i⁄_t
)–
	tTimîH™dÀ_t
 
	txTimî
 );

125 (*
PídedFun˘i⁄_t
)–*, 
	tuöt32_t
 );

256 
TimîH™dÀ_t
 
xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, * c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 ) 
PRIVILEGED_FUNCTION
;

278 *
pvTimîGëTimîID
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

315 
Ba£Ty≥_t
 
xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 ) 
PRIVILEGED_FUNCTION
;

326 
TaskH™dÀ_t
 
xTimîGëTimîD´m⁄TaskH™dÀ
( );

378 
	#xTimîSèπ
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

420 
	#xTimîSt›
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

500 
	#xTimîCh™gePîiod
–
xTimî
, 
xNewPîiod
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD
, ( xNewPîiod ), 
NULL
, ( xTicksToWaô ) )

	)

538 
	#xTimîDñëe
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_DELETE
, 0U, 
NULL
, ( xTicksToWaô ) )

	)

662 
	#xTimîRe£t
–
xTimî
, 
xTicksToWaô
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET
, ( 
	`xTaskGëTickCou¡
(Ë), 
NULL
, ( xTicksToWaô ) )

	)

748 
	#xTimîSèπFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_START_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

811 
	#xTimîSt›FromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_STOP_FROM_ISR
, 0, (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

884 
	#xTimîCh™gePîiodFromISR
–
xTimî
, 
xNewPîiod
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
, ( xNewPîiod ), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

970 
	#xTimîRe£tFromISR
–
xTimî
, 
pxHighîPri‹ôyTaskWokí
 ) 
	`xTimîGíîicComm™d
––xTimî ), 
tmrCOMMAND_RESET_FROM_ISR
, ( 
	`xTaskGëTickCou¡FromISR
(Ë), (ÖxHighîPri‹ôyTaskWokí ), 0U )

	)

1061 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆlFromISR
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, Ba£Ty≥_à*
pxHighîPri‹ôyTaskWokí
 );

1095 
Ba£Ty≥_t
 
xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 );

1101 
Ba£Ty≥_t
 
xTimîCª©eTimîTask
–Ë
PRIVILEGED_FUNCTION
;

1102 
Ba£Ty≥_t
 
xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° Ba£Ty≥_à
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 ) 
PRIVILEGED_FUNCTION
;

1104 #ifde‡
__˝lu•lus


	@list.c

67 
	~<°dlib.h
>

68 
	~"FªeRTOS.h
"

69 
	~"li°.h
"

75 
	$vLi°Inôüli£
–
Li°_t
 * c⁄° 
pxLi°
 )

80 
pxLi°
->
pxIndex
 = ( 
Li°Iãm_t
 * ) &–pxLi°->
xLi°End
 );

84 
pxLi°
->
xLi°End
.
xIãmVÆue
 = 
p‹tMAX_DELAY
;

88 
pxLi°
->
xLi°End
.
pxNext
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

89 
pxLi°
->
xLi°End
.
pxPªvious
 = ( 
Li°Iãm_t
 * ) &(ÖxList->xListEnd );

91 
pxLi°
->
uxNumbîOfIãms
 = ( 
UBa£Ty≥_t
 ) 0U;

92 
	}
}

95 
	$vLi°Inôüli£Iãm
–
Li°Iãm_t
 * c⁄° 
pxIãm
 )

98 
pxIãm
->
pvC⁄èöî
 = 
NULL
;

99 
	}
}

102 
	$vLi°In£πEnd
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

104 
Li°Iãm_t
 * c⁄° 
pxIndex
 = 
pxLi°
->pxIndex;

109 
pxNewLi°Iãm
->
pxNext
 = 
pxIndex
;

110 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIndex
->pxPrevious;

111 
pxIndex
->
pxPªvious
->
pxNext
 = 
pxNewLi°Iãm
;

112 
pxIndex
->
pxPªvious
 = 
pxNewLi°Iãm
;

115 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

117 –
pxLi°
->
uxNumbîOfIãms
 )++;

118 
	}
}

121 
	$vLi°In£π
–
Li°_t
 * c⁄° 
pxLi°
, 
Li°Iãm_t
 * c⁄° 
pxNewLi°Iãm
 )

123 
Li°Iãm_t
 *
pxIãøt‹
;

124 c⁄° 
TickTy≥_t
 
xVÆueOfIn£πi⁄
 = 
pxNewLi°Iãm
->
xIãmVÆue
;

135 if–
xVÆueOfIn£πi⁄
 =
p‹tMAX_DELAY
 )

137 
pxIãøt‹
 = 
pxLi°
->
xLi°End
.
pxPªvious
;

159  
pxIãøt‹
 = ( 
Li°Iãm_t
 * ) &–
pxLi°
->
xLi°End
 );ÖxIãøt‹->
pxNext
->
xIãmVÆue
 <
xVÆueOfIn£πi⁄
;ÖxIterator =ÖxIterator->pxNext )

166 
pxNewLi°Iãm
->
pxNext
 = 
pxIãøt‹
->pxNext;

167 
pxNewLi°Iãm
->
pxNext
->
pxPªvious
 =ÖxNewListItem;

168 
pxNewLi°Iãm
->
pxPªvious
 = 
pxIãøt‹
;

169 
pxIãøt‹
->
pxNext
 = 
pxNewLi°Iãm
;

173 
pxNewLi°Iãm
->
pvC⁄èöî
 = ( * ) 
pxLi°
;

175 –
pxLi°
->
uxNumbîOfIãms
 )++;

176 
	}
}

179 
UBa£Ty≥_t
 
	$uxLi°Remove
–
Li°Iãm_t
 * c⁄° 
pxIãmToRemove
 )

183 
Li°_t
 * c⁄° 
pxLi°
 = ( Li°_à* ) 
pxIãmToRemove
->
pvC⁄èöî
;

185 
pxIãmToRemove
->
pxNext
->
pxPªvious
 =ÖxItemToRemove->pxPrevious;

186 
pxIãmToRemove
->
pxPªvious
->
pxNext
 =ÖxItemToRemove->pxNext;

189 if–
pxLi°
->
pxIndex
 =
pxIãmToRemove
 )

191 
pxLi°
->
pxIndex
 = 
pxIãmToRemove
->
pxPªvious
;

195 
	`mtCOVERAGE_TEST_MARKER
();

198 
pxIãmToRemove
->
pvC⁄èöî
 = 
NULL
;

199 –
pxLi°
->
uxNumbîOfIãms
 )--;

201  
pxLi°
->
uxNumbîOfIãms
;

202 
	}
}

	@portable/BCC/16BitDOS/Flsh186/port.c

84 
	~<dos.h
>

85 
	~<°dlib.h
>

86 
	~<£tjmp.h
>

88 
	~"FªeRTOS.h
"

89 
	~"èsk.h
"

90 
	~"p‹èsm.h
"

94 
	#p‹tTIMER_EOI_TYPE
 ( 8 )

	)

95 
	#p‹tRESET_PIC
(Ë
	`p‹tOUTPUT_WORD
––
uöt16_t
 ) 0xff22, 
p‹tTIMER_EOI_TYPE
 )

	)

96 
	#p‹tTIMER_INT_NUMBER
 0x12

	)

98 
	#p‹tTIMER_1_CONTROL_REGISTER
 ( ( 
uöt16_t
 ) 0xff5ê)

	)

99 
	#p‹tTIMER_0_CONTROL_REGISTER
 ( ( 
uöt16_t
 ) 0xff56 )

	)

100 
	#p‹tTIMER_INTERRUPT_ENABLE
 ( ( 
uöt16_t
 ) 0x2000 )

	)

103 
¥vSëTickFªquícy
–
uöt32_t
 
ulTickR©eHz
 );

106 
¥vExôFun˘i⁄
( );

110 #if–
c⁄figUSE_PREEMPTION
 == 1 )

113 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

117 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

121 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

126 
Ba£Ty≥_t
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

131 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISR
 )();

134 
jmp_buf
 
	gxJumpBuf
;

139 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

145 
pxOldSwôchISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 );

149 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

151 #if–
c⁄figUSE_PREEMPTION
 == 1 )

154 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vPªem±iveTick
 );

159 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vN⁄Pªem±iveTick
 );

163 
	`¥vSëTickFªquícy
–
c⁄figTICK_RATE_HZ
 );

166 if–
	`£tjmp
–
xJumpBuf
 ) != 0 )

168 
	`¥vExôFun˘i⁄
();

169 
xScheduÀrRu¬ög
 = 
pdFALSE
;

173 
xScheduÀrRu¬ög
 = 
pdTRUE
;

176 
	`p‹tFIRST_CONTEXT
();

179  
xScheduÀrRu¬ög
;

180 
	}
}

185 #if–
c⁄figUSE_PREEMPTION
 == 1 )

186 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

189 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

192 
	`p‹tSWITCH_CONTEXT
();

196 
	`p‹tRESET_PIC
();

197 
	}
}

199 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

203 
	`xTaskIn¸emítTick
();

204 
	`p‹tRESET_PIC
();

205 
	}
}

209 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

212 
	`p‹tSWITCH_CONTEXT
();

213 
	}
}

216 
	$vP‹tEndScheduÀr
( )

221 
	`l⁄gjmp
–
xJumpBuf
, 1 );

222 
	}
}

225 
	$¥vExôFun˘i⁄
( )

227 c⁄° 
uöt16_t
 
usTimîDißbÀ
 = 0x0000;

228 
uöt16_t
 
usTimî0C⁄åﬁ
;

232 
	`p‹tDISABLE_INTERRUPTS
();

233 if–
xScheduÀrRu¬ög
 =
pdTRUE
 )

237 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
pxOldSwôchISR
 );

243 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_1_CONTROL_REGISTER
, 
usTimîDißbÀ
 );

246 
usTimî0C⁄åﬁ
 = 
	`p‹tINPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
 );

247 
usTimî0C⁄åﬁ
 |
p‹tTIMER_INTERRUPT_ENABLE
;

248 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
, 
usTimî0C⁄åﬁ
 );

251 
	`p‹tENABLE_INTERRUPTS
();

252 
	}
}

255 
	$¥vSëTickFªquícy
–
uöt32_t
 
ulTickR©eHz
 )

257 c⁄° 
uöt16_t
 
usMaxCou¡Regi°î
 = 0xff5a;

258 c⁄° 
uöt16_t
 
usTimîPri‹ôyRegi°î
 = 0xff32;

259 c⁄° 
uöt16_t
 
usTimîE«bÀ
 = 0xC000;

260 c⁄° 
uöt16_t
 
usRëriggî
 = 0x0001;

261 c⁄° 
uöt16_t
 
usTimîHighPri‹ôy
 = 0x0000;

262 
uöt16_t
 
usTimî0C⁄åﬁ
;

266 c⁄° 
uöt32_t
 
ulClockFªquícy
 = ( uint32_t ) 0x7f31a0UL;

268 
uöt32_t
 
ulTimîCou¡
 = 
ulClockFªquícy
 / 
ulTickR©eHz
;

270 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_1_CONTROL_REGISTER
, 
usTimîE«bÀ
 | 
p‹tTIMER_INTERRUPT_ENABLE
 | 
usRëriggî
 );

271 
	`p‹tOUTPUT_WORD
–
usMaxCou¡Regi°î
, ( 
uöt16_t
 ) 
ulTimîCou¡
 );

272 
	`p‹tOUTPUT_WORD
–
usTimîPri‹ôyRegi°î
, 
usTimîHighPri‹ôy
 );

275 
usTimî0C⁄åﬁ
 = 
	`p‹tINPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
 );

276 
usTimî0C⁄åﬁ
 &~
p‹tTIMER_INTERRUPT_ENABLE
;

277 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
, 
usTimî0C⁄åﬁ
 );

278 
	}
}

	@portable/BCC/16BitDOS/Flsh186/prtmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

80 
	#p‹tCHAR
 

	)

81 
	#p‹tFLOAT
 

	)

82 
	#p‹tDOUBLE
 

	)

83 
	#p‹tLONG
 

	)

84 
	#p‹tSHORT
 

	)

85 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

86 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

88 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

89 
	tBa£Ty≥_t
;

90 
	tUBa£Ty≥_t
;

92 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

93 
uöt16_t
 
	tTickTy≥_t
;

94 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

96 
uöt32_t
 
	tTickTy≥_t
;

97 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

102 
	#p‹tENTER_CRITICAL
(Ë
__asm
{ 
pushf
 } \

	)

103 
	g__asm
{ 
	g˛i
 } \

105 
	#p‹tEXIT_CRITICAL
(Ë
__asm
{ 
p›f
 }

	)

107 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
{ 
˛i
 }

	)

109 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
{ 
°i
 }

	)

113 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

114 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

115 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

116 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

117 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

118 
	#p‹tBYTE_ALIGNMENT
 2

	)

119 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

123 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

124 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

125 
	#p‹tINPUT_WORD
–
xAddr
 ) 
	`öpw
–xAdd∏)

	)

126 
	#p‹tOUTPUT_WORD
–
xAddr
, 
usVÆue
 ) 
	`ouçw
–xAddr, usVÆuê)

	)

131 
	#p‹tTASK_FUNCTION_PROTO
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

132 
	#p‹tTASK_FUNCTION
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

	@portable/BCC/16BitDOS/PC/port.c

78 
	~<°dlib.h
>

79 
	~<dos.h
>

80 
	~<£tjmp.h
>

82 
	~"FªeRTOS.h
"

83 
	~"èsk.h
"

84 
	~"p‹èsm.h
"

93 
	#p‹tTIMER_INT_NUMBER
 0x08

	)

96 
¥vSëTickFªquícy
–
uöt32_t
 
ulTickR©eHz
 );

99 
¥vExôFun˘i⁄
( );

104 
¥vP‹tRe£tPIC
( );

108 #if–
c⁄figUSE_PREEMPTION
 == 1 )

111 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

115 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

119 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

123 
¥vSëTickFªquícyDeÁu…
( );

128 
öt16_t
 
	gsDOSTickCou¡î
;

131 
Ba£Ty≥_t
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

134 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISR
 )();

137 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISRPlus1
 )();

140 
jmp_buf
 
	gxJumpBuf
;

145 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

147 
pxISR
 
pxOrigöÆTickISR
;

153 
pxOldSwôchISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 );

154 
pxOrigöÆTickISR
 = 
	`_dos_gëve˘
–
p‹tTIMER_INT_NUMBER
 );

155 
pxOldSwôchISRPlus1
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 + 1 );

157 
	`¥vSëTickFªquícy
–
c⁄figTICK_RATE_HZ
 );

161 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

165 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
 + 1, 
pxOrigöÆTickISR
 );

169 #if–
c⁄figUSE_PREEMPTION
 == 1 )

172 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vPªem±iveTick
 );

177 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vN⁄Pªem±iveTick
 );

184 
sDOSTickCou¡î
 = 
p‹tTICKS_PER_DOS_TICK
;

187 if–
	`£tjmp
–
xJumpBuf
 ) != 0 )

189 
	`¥vExôFun˘i⁄
();

190 
xScheduÀrRu¬ög
 = 
pdFALSE
;

194 
xScheduÀrRu¬ög
 = 
pdTRUE
;

197 
	`p‹tFIRST_CONTEXT
();

200  
xScheduÀrRu¬ög
;

201 
	}
}

206 #if–
c⁄figUSE_PREEMPTION
 == 1 )

207 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

210 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

213 
	`p‹tSWITCH_CONTEXT
();

217 
	`¥vP‹tRe£tPIC
();

218 
	}
}

220 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

224 
	`xTaskIn¸emítTick
();

225 
	`¥vP‹tRe£tPIC
();

226 
	}
}

230 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

233 
	`p‹tSWITCH_CONTEXT
();

234 
	}
}

237 
	$¥vP‹tRe£tPIC
( )

243 --
sDOSTickCou¡î
;

244 if–
sDOSTickCou¡î
 <= 0 )

246 
sDOSTickCou¡î
 = ( 
öt16_t
 ) 
p‹tTICKS_PER_DOS_TICK
;

247 
__asm
{ 
p‹tSWITCH_INT_NUMBER
 + 1 };

253 
__asm


255 
mov
 
Æ
, 20
H


256 
out
 20
H
, 
Æ


259 
	}
}

262 
	$vP‹tEndScheduÀr
( )

267 
	`l⁄gjmp
–
xJumpBuf
, 1 );

268 
	}
}

271 
	$¥vExôFun˘i⁄
( )

273 –
__öãºu±
 
__Ár
 *
pxOrigöÆTickISR
 )();

277 
	`p‹tDISABLE_INTERRUPTS
();

278 if–
xScheduÀrRu¬ög
 =
pdTRUE
 )

281 
pxOrigöÆTickISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 + 1 );

282 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
pxOrigöÆTickISR
 );

283 
	`¥vSëTickFªquícyDeÁu…
();

287 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
pxOldSwôchISR
 );

288 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
 + 1, 
pxOldSwôchISRPlus1
 );

292 
	`p‹tENABLE_INTERRUPTS
();

293 
	}
}

296 
	$¥vSëTickFªquícy
–
uöt32_t
 
ulTickR©eHz
 )

298 c⁄° 
uöt16_t
 
usPIT_MODE
 = ( uint16_t ) 0x43;

299 c⁄° 
uöt16_t
 
usPIT0
 = ( uint16_t ) 0x40;

300 c⁄° 
uöt32_t
 
ulPIT_CONST
 = ( uint32_t ) 1193180UL;

301 c⁄° 
uöt16_t
 
us8254_CTR0_MODE3
 = ( uint16_t ) 0x36;

302 
uöt32_t
 
ulOuçut
;

305 
	`p‹tOUTPUT_BYTE
–
usPIT_MODE
, 
us8254_CTR0_MODE3
 );

306 
ulOuçut
 = 
ulPIT_CONST
 / 
ulTickR©eHz
;

307 
	`p‹tOUTPUT_BYTE
–
usPIT0
, ( 
uöt16_t
 )–
ulOuçut
 & ( 
uöt32_t
 ) 0xff ) );

308 
ulOuçut
 >>= 8;

309 
	`p‹tOUTPUT_BYTE
–
usPIT0
, ( 
uöt16_t
 ) ( 
ulOuçut
 & ( 
uöt32_t
 ) 0xff ) );

310 
	}
}

313 
	$¥vSëTickFªquícyDeÁu…
( )

315 c⁄° 
uöt16_t
 
usPIT_MODE
 = ( uint16_t ) 0x43;

316 c⁄° 
uöt16_t
 
usPIT0
 = ( uint16_t ) 0x40;

317 c⁄° 
uöt16_t
 
us8254_CTR0_MODE3
 = ( uint16_t ) 0x36;

319 
	`p‹tOUTPUT_BYTE
–
usPIT_MODE
, 
us8254_CTR0_MODE3
 );

320 
	`p‹tOUTPUT_BYTE
–
usPIT0
,0 );

321 
	`p‹tOUTPUT_BYTE
–
usPIT0
,0 );

322 
	}
}

	@portable/BCC/16BitDOS/PC/prtmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

80 
	#p‹tCHAR
 

	)

81 
	#p‹tFLOAT
 

	)

82 
	#p‹tDOUBLE
 

	)

83 
	#p‹tLONG
 

	)

84 
	#p‹tSHORT
 

	)

85 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

86 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

88 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

89 
	tBa£Ty≥_t
;

90 
	tUBa£Ty≥_t
;

92 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

93 
uöt16_t
 
	tTickTy≥_t
;

94 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

96 
uöt32_t
 
	tTickTy≥_t
;

97 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

102 
	#p‹tENTER_CRITICAL
(Ë
__asm
{ 
pushf
 } \

	)

103 
	g__asm
{ 
	g˛i
 } \

105 
	#p‹tEXIT_CRITICAL
(Ë
__asm
{ 
p›f
 }

	)

107 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
{ 
˛i
 }

	)

109 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
{ 
°i
 }

	)

113 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

114 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

115 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

116 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

117 
	#p‹tDOS_TICK_RATE
 ( 18.20648 )

	)

118 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

119 
	#p‹tTICKS_PER_DOS_TICK
 ( ( 
uöt16_t
 ) ( ( ( 
p‹tDOUBLE
 ) 
c⁄figTICK_RATE_HZ
 / 
p‹tDOS_TICK_RATE
 ) + 0.5 ) )

	)

120 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

121 
	#p‹tBYTE_ALIGNMENT
 ( 2 )

	)

125 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

126 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

131 
	#p‹tTASK_FUNCTION_PROTO
–
vTaskFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*pvP¨amëî†)

	)

132 
	#p‹tTASK_FUNCTION
–
vTaskFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*pvP¨amëî†)

	)

	@portable/BCC/16BitDOS/common/portasm.h

66 #i‚de‡
PORT_ASM_H


67 
	#PORT_ASM_H


	)

69 
	tTCB_t
;

70 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

71 
vTaskSwôchC⁄ãxt
( );

78 
p‹tSWITCH_CONTEXT
( );

85 
p‹tFIRST_CONTEXT
( );

93 
	#p‹tSWITCH_CONTEXT
(Ë\

	)

94 
	gasm
 { 
mov
 
	gax
, 
£g
 
	gpxCuºítTCB
 } \

95 
	gasm
 { 
mov
 
	gds
, 
	gax
 } \

96 
	gasm
 { 
Às
 
	gbx
, 
	gpxCuºítTCB
 } \

97 
	gasm
 { 
mov
 
	ges
:0x2[ 
bx
 ], 
	gss
 } \

98 
	gasm
 { 
mov
 
	ges
:[ 
bx
 ], 
	g•
 } \

99 
	gasm
 { 
ˇŒ
 
Ár
 
±r
 
	gvTaskSwôchC⁄ãxt
 } \

100 
	gasm
 { 
mov
 
	gax
, 
£g
 
	gpxCuºítTCB
 } \

101 
	gasm
 { 
mov
 
	gds
, 
	gax
 } \

102 
	gasm
 { 
Às
 
	gbx
, 
dw‹d
 
±r
 
	gpxCuºítTCB
 } \

103 
	gasm
 { 
mov
 
	gss
, 
	ges
:[ 
bx
 + 2 ] } \

104 
asm
 { 
mov
 
•
, 
	ges
:[ 
bx
 ] }

106 
	#p‹tFIRST_CONTEXT
(Ë\

	)

107 
__asm
 { 
mov
 
ax
, 
£g
 
	gpxCuºítTCB
 } \

108 
	g__asm
 { 
mov
 
	gds
, 
	gax
 } \

109 
	g__asm
 { 
Às
 
	gbx
, 
dw‹d
 
±r
 
	gpxCuºítTCB
 } \

110 
	g__asm
 { 
mov
 
	gss
, 
	ges
:[ 
bx
 + 2 ] } \

111 
__asm
 { 
mov
 
•
, 
	ges
:[ 
bx
 ] } \

112 
__asm
 { 
p›
 
bp
 } \

113 
__asm
 { 
p›
 
di
 } \

114 
__asm
 { 
p›
 
si
 } \

115 
__asm
 { 
p›
 
ds
 } \

116 
__asm
 { 
p›
 
es
 } \

117 
__asm
 { 
p›
 
dx
 } \

118 
__asm
 { 
p›
 
cx
 } \

119 
__asm
 { 
p›
 
bx
 } \

120 
__asm
 { 
p›
 
ax
 } \

121 
__asm
 { 
úë
 }

	@portable/BCC/16BitDOS/common/portcomn.c

79 
	~<dos.h
>

80 
	~<°dlib.h
>

81 
	~"FªeRTOS.h
"

86 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

88 
SèckTy≥_t
 
DS_Reg
 = 0;

93 *
pxT›OfSèck
 = 0x1111;

94 
pxT›OfSèck
--;

95 *
pxT›OfSèck
 = 0x2222;

96 
pxT›OfSèck
--;

97 *
pxT›OfSèck
 = 0x3333;

98 
pxT›OfSèck
--;

99 *
pxT›OfSèck
 = 0x4444;

100 
pxT›OfSèck
--;

101 *
pxT›OfSèck
 = 0x5555;

102 
pxT›OfSèck
--;

111 *
pxT›OfSèck
 = 
	`FP_SEG
–
pvP¨amëîs
 );

112 
pxT›OfSèck
--;

113 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

114 
pxT›OfSèck
--;

115 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

116 
pxT›OfSèck
--;

117 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

118 
pxT›OfSèck
--;

121 *
pxT›OfSèck
 = 
p‹tINITIAL_SW
;

122 
pxT›OfSèck
--;

123 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

124 
pxT›OfSèck
--;

125 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

126 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xAAAA;

132 
pxT›OfSèck
--;

133 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xBBBB;

134 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xCCCC;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xDDDD;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xEEEE;

140 
pxT›OfSèck
--;

143 
__asm
{ 
MOV
 
DS_Reg
, 
DS
 };

145 *
pxT›OfSèck
 = 
DS_Reg
;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0123;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xDDDD;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xBBBB;

155  
pxT›OfSèck
;

156 
	}
}

	@portable/CCS/ARM_Cortex-R4/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

73 
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999;

78 
	#p‹tRTI_GCTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFC00 ) )

	)

79 
	#p‹tRTI_TBCTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFC04 ) )

	)

80 
	#p‹tRTI_COMPCTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFC0C ) )

	)

81 
	#p‹tRTI_CNT0_FRC0_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFC10 ) )

	)

82 
	#p‹tRTI_CNT0_UC0_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFC14 ) )

	)

83 
	#p‹tRTI_CNT0_CPUC0_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFC18 ) )

	)

84 
	#p‹tRTI_CNT0_COMP0_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFC50 ) )

	)

85 
	#p‹tRTI_CNT0_UDCP0_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFC54 ) )

	)

86 
	#p‹tRTI_SETINTENA_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFC80 ) )

	)

87 
	#p‹tRTI_CLEARINTENA_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFC84 ) )

	)

88 
	#p‹tRTI_INTFLAG_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFC88 ) )

	)

92 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1F )

	)

93 
	#p‹tINITIAL_FPSCR
 ( ( 
SèckTy≥_t
 ) 0x00 )

	)

94 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 0x04 )

	)

95 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

99 
	#p‹tSPACE_BETWEEN_TOS_AND_PARAMETERS
 ( 12 )

	)

104 
vP‹tSèπFú°Task
( );

110 
uöt32_t
 
	gulTaskHasFPUC⁄ãxt
 = 0;

118 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

120 
SèckTy≥_t
 *
pxOrigöÆTOS
;

122 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

124 #i‡
__TI_VFP_SUPPORT__


127 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

138 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00000000;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

143 
pxT›OfSèck
--;

145 #ifde‡
p‹tPRELOAD_TASK_REGISTERS


147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

170 
pxT›OfSèck
--;

174 
pxT›OfSèck
 -
p‹tSPACE_BETWEEN_TOS_AND_PARAMETERS
;

179 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

180 
pxT›OfSèck
--;

183 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( ( 
	`_gë_CPSR
(Ë& ~0xFF ) | 
p‹tINITIAL_SPSR
 );

185 if–––
uöt32_t
 ) 
pxCode
 & 0x01UL ) != 0x00 )

188 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

191 #ifde‡
__TI_VFP_SUPPORT__


193 
pxT›OfSèck
--;

198 *
pxT›OfSèck
 = 
pdFALSE
;

202  
pxT›OfSèck
;

203 
	}
}

206 
	$¥vSëupTimîI¡îru±
()

209 
p‹tRTI_GCTRL_REG
 &= 0xFFFFFFFEUL;

212 
p‹tRTI_TBCTRL_REG
 = 0x00000000U;

215 
p‹tRTI_COMPCTRL_REG
 = 0x00000000U;

218 
p‹tRTI_CNT0_UC0_REG
 = 0x00000000U;

219 
p‹tRTI_CNT0_FRC0_REG
 = 0x00000000U;

222 
p‹tRTI_CNT0_CPUC0_REG
 = 0x00000001U;

223 
p‹tRTI_CNT0_COMP0_REG
 = ( 
c⁄figCPU_CLOCK_HZ
 / 2 ) / 
c⁄figTICK_RATE_HZ
;

224 
p‹tRTI_CNT0_UDCP0_REG
 = ( 
c⁄figCPU_CLOCK_HZ
 / 2 ) / 
c⁄figTICK_RATE_HZ
;

227 
p‹tRTI_INTFLAG_REG
 = 0x0007000FU;

228 
p‹tRTI_CLEARINTENA_REG
 = 0x00070F0FU;

231 
p‹tRTI_SETINTENA_REG
 = 0x00000001U;

232 
p‹tRTI_GCTRL_REG
 |= 0x00000001U;

233 
	}
}

239 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
()

242 
	`¥vSëupTimîI¡îru±
();

245 
ulCrôiˇlNe°ög
 = 0;

249 
	`vP‹tSèπFú°Task
();

252  
pdFAIL
;

253 
	}
}

259 
	$vP‹tEndScheduÀr
()

263 
	`c⁄figASSERT
–
ulCrôiˇlNe°ög
 == 1000UL );

264 
	}
}

267 #i‡
c⁄figUSE_PREEMPTION
 == 0

271 
__öãºu±
 
	$vP‹tN⁄Pªem±iveTick
( )

274 
p‹tRTI_INTFLAG_REG
 = 0x00000001;

278 
	`xTaskIn¸emítTick
();

279 
	}
}

290 
vP‹tPªem±iveTick
( );

299 
	$vP‹tE¡îCrôiˇl
( )

302 
	`p‹tDISABLE_INTERRUPTS
();

307 
ulCrôiˇlNe°ög
++;

308 
	}
}

315 
	$vP‹tExôCrôiˇl
( )

317 if–
ulCrôiˇlNe°ög
 > 0 )

320 
ulCrôiˇlNe°ög
--;

324 if–
ulCrôiˇlNe°ög
 == 0 )

327 
	`p‹tENABLE_INTERRUPTS
();

330 
	}
}

333 #i‡
__TI_VFP_SUPPORT__


335 
	$vP‹tTaskU£sFPU
( )

337 
	`vP‹tInôüli£FPSCR
( );

341 
ulTaskHasFPUC⁄ãxt
 = 
pdTRUE
;

344 
	`vP‹tInôüli£FPSCR
();

345 
	}
}

	@portable/CCS/ARM_Cortex-R4/portmacro.h

66 #i‚de‡
__PORTMACRO_H__


67 
	#__PORTMACRO_H__


	)

80 
	#p‹tCHAR
 

	)

81 
	#p‹tFLOAT
 

	)

82 
	#p‹tDOUBLE
 

	)

83 
	#p‹tLONG
 

	)

84 
	#p‹tSHORT
 

	)

85 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

86 
	#p‹tBASE_TYPE
 

	)

88 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

89 
	tBa£Ty≥_t
;

90 
	tUBa£Ty≥_t
;

92 #i‡(
c⁄figUSE_16_BIT_TICKS
 == 1)

93 
uöt16_t
 
	tTickTy≥_t
;

94 
	#p‹tMAX_DELAY
 (
TickTy≥_t
Ë0xFFFF

	)

96 
uöt32_t
 
	tTickTy≥_t
;

97 
	#p‹tMAX_DELAY
 (
TickTy≥_t
Ë0xFFFFFFFFF

	)

102 
	#p‹tSTACK_GROWTH
 (-1)

	)

103 
	#p‹tTICK_PERIOD_MS
 ((
TickTy≥_t
Ë1000 / 
c⁄figTICK_RATE_HZ
)

	)

104 
	#p‹tBYTE_ALIGNMENT
 8

	)

107 
vP‹tE¡îCrôiˇl
();

108 
vP‹tExôCrôiˇl
();

109 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

110 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

111 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`asm
–" CPSID I" )

	)

112 
	#p‹tENABLE_INTERRUPTS
(Ë
	`asm
–" CPSIE I" )

	)

115 #¥agm®
SWI_ALIAS
–
vP‹tYõld
, 0 )

116 
vP‹tYõld
( );

117 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

118 
	#p‹tSYS_SSIR1_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xFFFFFFB0 ) )

	)

119 
	#p‹tSYS_SSIR1_SSKEY
 ( 0x7500UL )

	)

120 
	#p‹tYIELD_WITHIN_API
(Ë{ 
p‹tSYS_SSIR1_REG
 = 
p‹tSYS_SSIR1_SSKEY
; 
	`asm
–" DSB " );ásm–" ISB " ); }

	)

121 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ){ 
p‹tSYS_SSIR1_REG
 = 
p‹tSYS_SSIR1_SSKEY
; ( Ëp‹tSYS_SSIR1_REG; }

	)

124 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

127 #if–
c⁄figMAX_PRIORITIES
 > 32 )

128 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

132 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

133 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

137 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`__˛z
––uxRódyPri‹ôõ†ËË)

	)

143 
	#p‹tTASK_FUNCTION
(
vFun˘i⁄
, 
pvP¨amëîs
Ë
	`vFun˘i⁄
(*pvP¨amëîs)

	)

144 
	#p‹tTASK_FUNCTION_PROTO
(
vFun˘i⁄
, 
pvP¨amëîs
Ë
	`vFun˘i⁄
(*pvP¨amëîs)

	)

	@portable/CCS/MSP430X/data_model.h

55 .
$DEFINED
–
__LARGE_DATA_MODEL__
 )

56 .
	gdeföe
 "pushm.a", 
	gpushm_x


57 .
	gdeföe
 "p›m.a", 
	gp›m_x


58 .
	gdeföe
 "push.a", 
	gpush_x


59 .
	gdeföe
 "p›.a", 
	gp›_x


60 .
	gdeföe
 "mov.a", 
	gmov_x


62 .
	gdeföe
 "pushm.w", 
	gpushm_x


63 .
	gdeföe
 "p›m.w", 
	gp›m_x


64 .
	gdeföe
 "push.w", 
	gpush_x


65 .
	gdeföe
 "p›.w", 
	gp›_x


66 .
	gdeföe
 "mov.w", 
	gmov_x


67 .
	gídif


69 .
$DEFINED
–
__LARGE_CODE_MODEL__
 )

70 .
	gdeföe
 "ˇŒa", 
	gˇŒ_x


71 .
	gdeföe
 "ªè", 
	gªt_x


73 .
	gdeföe
 "ˇŒ", 
	gˇŒ_x


74 .
	gdeföe
 "ªt", 
	gªt_x


75 .
	gídif


	@portable/CCS/MSP430X/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

76 
	#p‹tACLK_FREQUENCY_HZ
 ( ( 
TickTy≥_t
 ) 32768 )

	)

77 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( 
uöt16_t
 ) 10 )

	)

78 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
SèckTy≥_t
 ) 0x08 )

	)

82 
	tTCB_t
;

83 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

93 vﬁ©ûê
uöt16_t
 
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

101 
vP‹tSëupTimîI¡îru±
( );

110 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

112 
uöt16_t
 *
pusT›OfSèck
;

113 
uöt32_t
 *
pulT›OfSèck
, 
ulTemp
;

129 if––
pxCode
 ) =–
uöt16_t
 ) )

131 
pusT›OfSèck
 = ( 
uöt16_t
 * ) 
pxT›OfSèck
;

132 
ulTemp
 = ( 
uöt32_t
 ) 
pxCode
;

133 *
pusT›OfSèck
 = ( 
uöt16_t
 ) 
ulTemp
;

138 
pusT›OfSèck
 = ( 
uöt16_t
 * ) 
pxT›OfSèck
;

139 
pusT›OfSèck
--;

140 
pulT›OfSèck
 = ( 
uöt32_t
 * ) 
pusT›OfSèck
;

141 *
pulT›OfSèck
 = ( 
uöt32_t
 ) 
pxCode
;

144 
pusT›OfSèck
--;

145 *
pusT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

146 
pusT›OfSèck
 -––
SèckTy≥_t
 ) / 2 );

149 
pxT›OfSèck
 = ( 
SèckTy≥_t
 * ) 
pusT›OfSèck
;

152 #ifde‡
PRELOAD_REGISTER_VALUES


153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xffff;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xeeee;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xdddd;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xbbbb;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaa;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x9999;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x8888;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x5555;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x6666;

172 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x5555;

174 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x4444;

176 
pxT›OfSèck
--;

178 
pxT›OfSèck
 -= 3;

179 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

180 
pxT›OfSèck
 -= 9;

186 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

190  
pxT›OfSèck
;

191 
	}
}

194 
	$vP‹tEndScheduÀr
( )

198 
	}
}

204 
	$vP‹tSëupTimîI¡îru±
( )

206 
	`vAµliˇti⁄SëupTimîI¡îru±
();

207 
	}
}

210 #¥agm®
ve˘‹
=
c⁄figTICK_VECTOR


211 
öãºu±
 
	$vTickISRE¡ry
( )

213 
	`vP‹tTickISR
( );

215 
	`__bic_SR_ªgi°î_⁄_exô
–
SCG1
 + 
SCG0
 + 
OSCOFF
 + 
CPUOFF
 );

216 #i‡
c⁄figUSE_PREEMPTION
 == 1

217 
	`vP‹tPªem±iveTickISR
( );

218 
	`vP‹tPªem±iveTickISR
();

220 
	`vP‹tCo›î©iveTickISR
( );

221 
	`vP‹tCo›î©iveTickISR
();

223 
	}
}

	@portable/CCS/MSP430X/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

80 
	~"m•430.h
"

83 
	#p‹tCHAR
 

	)

84 
	#p‹tFLOAT
 

	)

85 
	#p‹tDOUBLE
 

	)

86 
	#p‹tLONG
 

	)

87 
	#p‹tSHORT
 

	)

88 
	#p‹tBASE_TYPE
 
p‹tSHORT


	)

91 #ifde‡
__LARGE_DATA_MODEL__


92 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

94 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

97 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

98 
	tBa£Ty≥_t
;

99 
	tUBa£Ty≥_t
;

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
uöt16_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

105 
uöt32_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

112 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`_dißbÀ_öãºu±
(); 
	`_n›
()

	)

113 
	#p‹tENABLE_INTERRUPTS
(Ë
	`_íabÀ_öãºu±
(); 
	`_n›
()

	)

117 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
uöt16_t
 ) 0 )

	)

119 
	#p‹tENTER_CRITICAL
(Ë\

	)

121 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

123 
p‹tDISABLE_INTERRUPTS
(); \

128 
	gusCrôiˇlNe°ög
++; \

131 
	#p‹tEXIT_CRITICAL
(Ë\

	)

133 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

135 if–
	gusCrôiˇlNe°ög
 > 
	gp‹tNO_CRITICAL_SECTION_NESTING
 ) \

138 
	gusCrôiˇlNe°ög
--; \

142 if–
	gusCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

144 
p‹tENABLE_INTERRUPTS
(); \

155 
vP‹tYõld
( );

156 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

160 
	#p‹tBYTE_ALIGNMENT
 2

	)

161 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

162 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

163 
	#p‹tNOP
(Ë
	`__no_›î©i⁄
()

	)

167 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

168 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

170 
vTaskSwôchC⁄ãxt
( );

171 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x ) 
	`vP‹tYõld
()

	)

173 
vAµliˇti⁄SëupTimîI¡îru±
( );

177 
	#p‹tLU_PRINTF_SPECIFIER_REQUIRED


	)

	@portable/CodeWarrior/ColdFire_V1/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

71 
	#p‹tINITIAL_FORMAT_VECTOR
 ( ( 
SèckTy≥_t
 ) 0x4000 )

	)

74 
	#p‹tINITIAL_STATUS_REGISTER
 ( ( 
SèckTy≥_t
 ) 0x2000)

	)

77 
	#p‹tPRESCALE_VALUE
 ( ( 
uöt8_t
 ) 10 )

	)

80 
	#p‹tRTC_CLOCK_HZ
 ( ( 
uöt32_t
 ) 1000 )

	)

82 
asm
 
öãºu±
 
Ve˘‹Numbî_VL1swi
 
vP‹tYõldISR
( );

83 
¥vSëupTimîI¡îru±
( );

87 
uöt32_t
 
	gulCrôiˇlNe°ög
 = 0x9999UL;

91 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 * 
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

94 
uöt32_t
 
ulOrigöÆA5
;

96 
__asm
{ 
MOVE
.
L
 
A5
, 
ulOrigöÆA5
 };

99 *
pxT›OfSèck
 = (
SèckTy≥_t
) 0xDEADBEEF;

100 
pxT›OfSèck
--;

103 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

104 
pxT›OfSèck
--;

106 *
pxT›OfSèck
 = ( 
p‹tINITIAL_FORMAT_VECTOR
 << 16UL ) | ( 
p‹tINITIAL_STATUS_REGISTER
 );

107 
pxT›OfSèck
--;

109 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0;

110 
pxT›OfSèck
 -= 14;

113 *–
pxT›OfSèck
 + 8 ) = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

116 *–
pxT›OfSèck
 + 13 ) = 
ulOrigöÆA5
;

118  
pxT›OfSèck
;

119 
	}
}

122 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

124 
	`vP‹tSèπFú°Task
( );

126 
ulCrôiˇlNe°ög
 = 0UL;

129 
	`¥vSëupTimîI¡îru±
();

132 
	`vP‹tSèπFú°Task
();

134  
pdFALSE
;

135 
	}
}

138 
	$¥vSëupTimîI¡îru±
( )

141 
RTCSC
 |= 8;

144 
RTCMOD
 = 
p‹tRTC_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

148 
RTCSC_RTIE
 = 1;

149 
	}
}

152 
	$vP‹tEndScheduÀr
( )

155 
	}
}

158 
	$vP‹tE¡îCrôiˇl
( )

160 if–
ulCrôiˇlNe°ög
 == 0UL )

166 
	`p‹tDISABLE_INTERRUPTS
();

167 if–
INTC_FRC
 == 0UL )

172 
	`p‹tENABLE_INTERRUPTS
();

176 
ulCrôiˇlNe°ög
++;

177 
	}
}

180 
	$vP‹tExôCrôiˇl
( )

182 
ulCrôiˇlNe°ög
--;

183 if–
ulCrôiˇlNe°ög
 == 0 )

185 
	`p‹tENABLE_INTERRUPTS
();

187 
	}
}

190 
	$vP‹tYõldH™dÀr
( )

192 
uöt32_t
 
ulSavedI¡îru±Mask
;

194 
ulSavedI¡îru±Mask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

197 
INTC_CFRC
 = 0x3E;

198 
	`vTaskSwôchC⁄ãxt
();

200 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulSavedI¡îru±Mask
 );

201 
	}
}

204 
öãºu±
 
Ve˘‹Numbî_Vπc
 
	$vP‹tTickISR
( )

206 
uöt32_t
 
ulSavedI¡îru±Mask
;

209 
RTCSC
 |
RTCSC_RTIF_MASK
;

212 
ulSavedI¡îru±Mask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

214 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

216 
	`èskYIELD
();

219 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulSavedI¡îru±Mask
 );

220 
	}
}

	@portable/CodeWarrior/ColdFire_V1/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tBYTE_ALIGNMENT
 4

	)

108 
	#p‹tSTACK_GROWTH
 -1

	)

109 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

112 
uöt32_t
 
ulP‹tSëIPL
( uint32_t );

113 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

114 
	#p‹tENABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–0 )

	)

117 
vP‹tE¡îCrôiˇl
( );

118 
vP‹tExôCrôiˇl
( );

119 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

120 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

122 
UBa£Ty≥_t
 
uxP‹tSëI¡îru±MaskFromISR
( );

123 
vP‹tCÀ¨I¡îru±MaskFromISR
–
UBa£Ty≥_t
 );

124 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

125 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusRegi°î
 ) 
	`ulP‹tSëIPL
–uxSavedSètusRegi°î )

	)

130 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"n›" )

	)

133 
	#p‹tYIELD
(Ë
INTC_SFRC
 = 0x3E; 
	`p‹tNOP
();Ö‹tNOP();Ö‹tNOP();Ö‹tNOP();Ö‹tNOP()

	)

138 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†Ë
	`__©åibuã__
((
n‹ëu∫
))

	)

139 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

142 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed !
pdFALSE
 ) \

	)

144 
p‹tYIELD
(); \

148 #ifde‡
__˝lu•lus


	@portable/CodeWarrior/ColdFire_V2/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

71 
	#p‹tINITIAL_FORMAT_VECTOR
 ( ( 
SèckTy≥_t
 ) 0x4000 )

	)

74 
	#p‹tINITIAL_STATUS_REGISTER
 ( ( 
SèckTy≥_t
 ) 0x2000)

	)

78 
uöt32_t
 
	gulCrôiˇlNe°ög
 = 0x9999UL;

81 
	#p‹tSAVE_CONTEXT
(Ë\

	)

82 
	gÀa
.
l
 (-60, %
•
), %
	g•
; \

83 
	gmovem
.
	gl
 %
	gd0
-%
	gÂ
, (%
	g•
); \

84 
	gmove
.
l
 
	gpxCuºítTCB
, %
	ga0
; \

85 
	gmove
.
	gl
 %
	g•
, (%
	ga0
);

87 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

88 
	gmove
.
l
 
	gpxCuºítTCB
, %
	ga0
; \

89 
	gmove
.
l
 (%
a0
), %
	g•
; \

90 
	gmovem
.
l
 (%
•
), %
	gd0
-%
	gÂ
; \

91 
	gÀa
.
	gl
 %
	g•
@(60), %sp; \

92 
πe


98 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 * 
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

100 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

101 
pxT›OfSèck
--;

103 *
pxT›OfSèck
 = (
SèckTy≥_t
) 0xDEADBEEF;

104 
pxT›OfSèck
--;

107 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

108 
pxT›OfSèck
--;

110 *
pxT›OfSèck
 = ( 
p‹tINITIAL_FORMAT_VECTOR
 << 16UL ) | ( 
p‹tINITIAL_STATUS_REGISTER
 );

111 
pxT›OfSèck
--;

113 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0;

114 
pxT›OfSèck
 -= 14;

116  
pxT›OfSèck
;

117 
	}
}

120 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

122 
	`vP‹tSèπFú°Task
( );

124 
ulCrôiˇlNe°ög
 = 0UL;

127 
	`vAµliˇti⁄SëupI¡îru±s
();

130 
	`vP‹tSèπFú°Task
();

132  
pdFALSE
;

133 
	}
}

136 
	$vP‹tEndScheduÀr
( )

139 
	}
}

142 
	$vP‹tE¡îCrôiˇl
( )

144 if–
ulCrôiˇlNe°ög
 == 0UL )

150 
	`p‹tDISABLE_INTERRUPTS
();

151 if–
MCF_INTC0_INTFRCH
 == 0UL )

156 
	`p‹tENABLE_INTERRUPTS
();

160 
ulCrôiˇlNe°ög
++;

161 
	}
}

164 
	$vP‹tExôCrôiˇl
( )

166 
ulCrôiˇlNe°ög
--;

167 if–
ulCrôiˇlNe°ög
 == 0 )

169 
	`p‹tENABLE_INTERRUPTS
();

171 
	}
}

174 
	$vP‹tYõldH™dÀr
( )

176 
uöt32_t
 
ulSavedI¡îru±Mask
;

178 
ulSavedI¡îru±Mask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

180 
MCF_INTC0_INTFRCL
 = 0;

181 
	`vTaskSwôchC⁄ãxt
();

182 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulSavedI¡îru±Mask
 );

183 
	}
}

	@portable/CodeWarrior/ColdFire_V2/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

96 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

97 
uöt16_t
 
	tTickTy≥_t
;

98 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

100 
uöt32_t
 
	tTickTy≥_t
;

101 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

106 
	#p‹tBYTE_ALIGNMENT
 4

	)

107 
	#p‹tSTACK_GROWTH
 -1

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

110 
uöt32_t
 
ulP‹tSëIPL
( uint32_t );

111 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

112 
	#p‹tENABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–0 )

	)

115 
vP‹tE¡îCrôiˇl
( );

116 
vP‹tExôCrôiˇl
( );

117 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

118 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

120 
UBa£Ty≥_t
 
uxP‹tSëI¡îru±MaskFromISR
( );

121 
vP‹tCÀ¨I¡îru±MaskFromISR
–
UBa£Ty≥_t
 );

122 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

123 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusRegi°î
 ) 
	`ulP‹tSëIPL
–uxSavedSètusRegi°î )

	)

129 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"n›" )

	)

132 
	#p‹tYIELD
(Ë
MCF_INTC0_INTFRCL
 = ( 1UL << 
c⁄figYIELD_INTERRUPT_VECTOR
 ); 
	`p‹tNOP
();Ö‹tNOP(Ë

	)

137 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†Ë
	`__©åibuã__
((
n‹ëu∫
))

	)

138 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

141 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed !
pdFALSE
 ) \

	)

143 
p‹tYIELD
(); \

147 #ifde‡
__˝lu•lus


	@portable/CodeWarrior/HCS12/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

80 
¥vSëupTimîI¡îru±
( );

84 #¥agm®
CODE_SEG
 
__NEAR_SEG
 
NON_BANKED


87 
öãºu±
 
vP‹tYõld
( );

90 
öãºu±
 
vP‹tTickI¡îru±
( );

96 
Ba£Ty≥_t
 
xB™kedSèπScheduÀr
( );

98 #¥agm®
CODE_SEG
 
DEFAULT


106 vﬁ©ûê
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xff;

113 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

135 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) *–((SèckTy≥_à*Ë(&
pxCode
) ) + 1 );

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) *–((SèckTy≥_à*Ë(&
pxCode
) ) + 0 );

138 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xff;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xee;

146 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xdd;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xcc;

152 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) *–((SèckTy≥_à*Ë(&
pvP¨amëîs
) ) + 0 );

156 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) *–((SèckTy≥_à*Ë(&
pvP¨amëîs
) ) + 1 );

160 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

165 
pxT›OfSèck
--;

167 #ifde‡
BANKED_MODEL


169 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( ( Ë
pxCode
 );

170 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

177  
pxT›OfSèck
;

178 
	}
}

181 
	$vP‹tEndScheduÀr
( )

184 
	}
}

187 
	$¥vSëupTimîI¡îru±
( )

189 
	`TickTimî_SëFªqHz
–
c⁄figTICK_RATE_HZ
 );

190 
	`TickTimî_E«bÀ
();

191 
	}
}

194 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

202  
	`xB™kedSèπScheduÀr
();

203 
	}
}

206 #¥agm®
CODE_SEG
 
__NEAR_SEG
 
NON_BANKED


208 
Ba£Ty≥_t
 
	$xB™kedSèπScheduÀr
( )

212 
	`¥vSëupTimîI¡îru±
();

215 
	`p‹tRESTORE_CONTEXT
();

218 
	`__asm
( "rti" );

221  
pdFALSE
;

222 
	}
}

233 
öãºu±
 
	$vP‹tYõld
( )

235 
	`p‹tSAVE_CONTEXT
();

236 
	`vTaskSwôchC⁄ãxt
();

237 
	`p‹tRESTORE_CONTEXT
();

238 
	}
}

246 
öãºu±
 
	$vP‹tTickI¡îru±
( )

248 #i‡
c⁄figUSE_PREEMPTION
 == 1

251 
	`p‹tSAVE_CONTEXT
();

254 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

256 
	`vTaskSwôchC⁄ãxt
();

259 
TFLG1
 = 1;

263 
	`p‹tRESTORE_CONTEXT
();

267 
	`xTaskIn¸emítTick
();

268 
TFLG1
 = 1;

271 
	}
}

273 #¥agm®
CODE_SEG
 
DEFAULT


	@portable/CodeWarrior/HCS12/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

81 
	#p‹tCHAR
 

	)

82 
	#p‹tFLOAT
 

	)

83 
	#p‹tDOUBLE
 

	)

84 
	#p‹tLONG
 

	)

85 
	#p‹tSHORT
 

	)

86 
	#p‹tSTACK_TYPE
 
uöt8_t


	)

87 
	#p‹tBASE_TYPE
 

	)

89 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

90 sig√d 
	tBa£Ty≥_t
;

91 
	tUBa£Ty≥_t
;

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
uöt16_t
 
	tTickTy≥_t
;

95 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

97 
uöt32_t
 
	tTickTy≥_t
;

98 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

103 
	#p‹tBYTE_ALIGNMENT
 1

	)

104 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

105 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

106 
	#p‹tYIELD
(Ë
	`__asm
–"swi" );

	)

107 
	#p‹tNOP
(Ë
	`__asm
–"n›" );

	)

111 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
–"˛i" )

	)

112 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
–"£i" )

	)

120 
	#p‹tENTER_CRITICAL
(Ë\

	)

122 vﬁ©ûê
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

124 
p‹tDISABLE_INTERRUPTS
(); \

125 
	guxCrôiˇlNe°ög
++; \

133 
	#p‹tEXIT_CRITICAL
(Ë\

	)

135 vﬁ©ûê
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

137 
	guxCrôiˇlNe°ög
--; \

138 if–
	guxCrôiˇlNe°ög
 == 0 ) \

140 
p‹tENABLE_INTERRUPTS
(); \

157 #ifde‡
BANKED_MODEL


163 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

165 vﬁ©ûê* 
pxCuºítTCB
; \

166 vﬁ©ûê
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

168 
__asm
( "ldxÖxCurrentTCB" ); \

169 
__asm
( "lds 0, x" ); \

170 
__asm
( "pula" ); \

171 
__asm
( "staa uxCriticalNesting" ); \

172 
__asm
( "pula" ); \

173 
__asm
( "staa 0x30" ); \

181 
	#p‹tSAVE_CONTEXT
(Ë\

	)

183 vﬁ©ûê* 
pxCuºítTCB
; \

184 vﬁ©ûê
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

186 
__asm
( "ldaa 0x30" ); \

187 
__asm
( "psha" ); \

188 
__asm
( "ldaa uxCriticalNesting" ); \

189 
__asm
( "psha" ); \

190 
__asm
( "ldxÖxCurrentTCB" ); \

191 
__asm
( "sts 0, x" ); \

200 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

202 vﬁ©ûê* 
pxCuºítTCB
; \

203 vﬁ©ûê
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

205 
__asm
( "ldxÖxCurrentTCB" ); \

206 
__asm
( "lds 0, x" ); \

207 
__asm
( "pula" ); \

208 
__asm
( "staa uxCriticalNesting" ); \

211 
	#p‹tSAVE_CONTEXT
(Ë\

	)

213 vﬁ©ûê* 
pxCuºítTCB
; \

214 vﬁ©ûê
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

216 
__asm
( "ldaa uxCriticalNesting" ); \

217 
__asm
( "psha" ); \

218 
__asm
( "ldxÖxCurrentTCB" ); \

219 
__asm
( "sts 0, x" ); \

229 
	#p‹tTASK_SWITCH_FROM_ISR
(Ë\

	)

230 
p‹tSAVE_CONTEXT
(); \

231 
vTaskSwôchC⁄ãxt
(); \

232 
p‹tRESTORE_CONTEXT
();

236 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

237 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

	@portable/GCC/ARM7_AT91FR40008/port.c

77 
	~<°dlib.h
>

80 
	~"FªeRTOS.h
"

81 
	~"èsk.h
"

84 
	~"AT91R40008.h
"

85 
	~"pio.h
"

86 
	~"aic.h
"

87 
	~"tc.h
"

90 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

91 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

92 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

93 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
SèckTy≥_t
 ) 0 )

	)

94 
	#p‹tTICK_PRIORITY_6
 ( 6 )

	)

98 
¥vSëupTimîI¡îru±
( );

104 
vP‹tISRSèπFú°Task
( );

114 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

116 
SèckTy≥_t
 *
pxOrigöÆTOS
;

118 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

122 
pxT›OfSèck
--;

130 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

131 
pxT›OfSèck
--;

133 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaaaaaa;

134 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

160 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

165 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

171 #ifde‡
THUMB_INTERWORK


174 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

178 
pxT›OfSèck
--;

184 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_SECTION_NESTING
;

186  
pxT›OfSèck
;

187 
	}
}

190 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

194 
	`¥vSëupTimîI¡îru±
();

197 
	`vP‹tISRSèπFú°Task
();

201 
	}
}

204 
	$vP‹tEndScheduÀr
( )

208 
	}
}

214 
	$¥vSëupTimîI¡îru±
( )

216 vﬁ©ûê
uöt32_t
 
ulDummy
;

219 
AT91C_BASE_PS
->
PS_PCER
 = 
p‹tTIMER_CLK_ENABLE_BIT
;

222 
p‹tTIMER_REG_BASE_PTR
->
TC_CCR
 = 
TC_CLKDIS
;

225 
p‹tTIMER_REG_BASE_PTR
->
TC_IDR
 = 0xFFFFFFFF;

228 
ulDummy
 = 
p‹tTIMER_REG_BASE_PTR
->
TC_SR
;

233 #i‡
c⁄figUSE_PREEMPTION
 == 1

235 –
vPªem±iveTick
 )( );

236 
AT91C_BASE_AIC
->
AIC_SVR
[
p‹tTIMER_AIC_CHANNEL
] = ( 
uöt32_t
 ) 
vPªem±iveTick
;

240 –
vN⁄Pªem±iveTick
 )( );

241 
AT91C_BASE_AIC
->
AIC_SVR
[
p‹tTIMER_AIC_CHANNEL
] = ( 
uöt32_t
 ) 
vN⁄Pªem±iveTick
;

246 
AT91C_BASE_AIC
->
AIC_SMR
[ 
p‹tTIMER_AIC_CHANNEL
 ] = 
AIC_SRCTYPE_INT_LEVEL_SENSITIVE
 | 
p‹tTICK_PRIORITY_6
;

251 
p‹tTIMER_REG_BASE_PTR
->
TC_IER
 = 
TC_CPCS
;

254 
AT91C_BASE_AIC
->
AIC_IECR
 = (1 << 
p‹tTIMER_AIC_CHANNEL
);

257 if–(
c⁄figCPU_CLOCK_HZ
 / (
c⁄figTICK_RATE_HZ
 * 2) ) <= 0xFFFF )

261 
p‹tTIMER_REG_BASE_PTR
->
TC_CMR
 = 
TC_WAVE
 | 
TC_CLKS_MCK2
 | 
TC_BURST_NONE
 | 
TC_CPCTRG
;

262 
p‹tTIMER_REG_BASE_PTR
->
TC_RC
 = 
c⁄figCPU_CLOCK_HZ
 / (
c⁄figTICK_RATE_HZ
 * 2);

268 
p‹tTIMER_REG_BASE_PTR
->
TC_CMR
 = 
TC_WAVE
 | 
TC_CLKS_MCK8
 | 
TC_BURST_NONE
 | 
TC_CPCTRG
;

269 
p‹tTIMER_REG_BASE_PTR
->
TC_RC
 = 
c⁄figCPU_CLOCK_HZ
 / (
c⁄figTICK_RATE_HZ
 * 8);

273 
p‹tTIMER_REG_BASE_PTR
->
TC_CCR
 = 
TC_SWTRG
 | 
TC_CLKEN
;

274 
	}
}

	@portable/GCC/ARM7_AT91FR40008/portISR.c

82 
	~"FªeRTOS.h
"

83 
	~"èsk.h
"

86 
	#p‹tCLEAR_AIC_INTERRUPT
 ( ( 
uöt32_t
 ) 0 )

	)

89 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

90 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

95 
	$vP‹tYõldPro˚ss‹
–Ë
	`__©åibuã__
((
	`öãºu±
("SWI"), 
«ked
));

101 
	`vP‹tISRSèπFú°Task
( );

104 
	$vP‹tISRSèπFú°Task
( )

108 
	`p‹tRESTORE_CONTEXT
();

109 
	}
}

120 
	$vP‹tYõldPro˚ss‹
( )

125 
asm
 volatile ( "ADD LR, LR, #4" );

128 
	`p‹tSAVE_CONTEXT
();

131 
	`vTaskSwôchC⁄ãxt
();

134 
	`p‹tRESTORE_CONTEXT
();

135 
	}
}

143 #i‡
c⁄figUSE_PREEMPTION
 == 0

147 
	$vN⁄Pªem±iveTick
–Ë
	`__©åibuã__
 ((
	`öãºu±
 ("IRQ")));

148 
	$vN⁄Pªem±iveTick
( )

150 vﬁ©ûê
uöt32_t
 
ulDummy
;

153 
ulDummy
 = 
p‹tTIMER_REG_BASE_PTR
->
TC_SR
;

155 
	`xTaskIn¸emítTick
();

158 
AT91C_BASE_AIC
->
AIC_EOICR
 = 
p‹tCLEAR_AIC_INTERRUPT
;

159 
	}
}

165 
	$vPªem±iveTick
–Ë
	`__©åibuã__
((
«ked
));

166 
	$vPªem±iveTick
( )

169 
	`p‹tSAVE_CONTEXT
();

173 vﬁ©ûê
uöt32_t
 
ulDummy
;

176 
ulDummy
 = 
p‹tTIMER_REG_BASE_PTR
->
TC_SR
;

180 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

182 
	`vTaskSwôchC⁄ãxt
();

186 
AT91C_BASE_AIC
->
AIC_EOICR
 = 
p‹tCLEAR_AIC_INTERRUPT
;

189 
	`p‹tRESTORE_CONTEXT
();

190 
	}
}

201 #ifde‡
THUMB_INTERWORK


203 
	$vP‹tDißbÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

204 
	$vP‹tE«bÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

206 
	$vP‹tDißbÀI¡îru±sFromThumb
( )

208 
asm
 volatile (

215 
	}
}

217 
	$vP‹tE«bÀI¡îru±sFromThumb
( )

219 
asm
 volatile (

226 
	}
}

234 
	$vP‹tE¡îCrôiˇl
( )

237 
asm
 volatile (

247 
ulCrôiˇlNe°ög
++;

248 
	}
}

250 
	$vP‹tExôCrôiˇl
( )

252 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

255 
ulCrôiˇlNe°ög
--;

259 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

262 
asm
 volatile (

270 
	}
}

	@portable/GCC/ARM7_AT91FR40008/portmacro.h

89 #i‚de‡
PORTMACRO_H


90 
	#PORTMACRO_H


	)

92 #ifde‡
__˝lu•lus


107 
	#p‹tCHAR
 

	)

108 
	#p‹tFLOAT
 

	)

109 
	#p‹tDOUBLE
 

	)

110 
	#p‹tLONG
 

	)

111 
	#p‹tSHORT
 

	)

112 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

113 
	#p‹tBASE_TYPE
 

	)

115 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

116 
	tBa£Ty≥_t
;

117 
	tUBa£Ty≥_t
;

119 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

120 
uöt16_t
 
	tTickTy≥_t
;

121 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

123 
uöt32_t
 
	tTickTy≥_t
;

124 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

129 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

130 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

131 
	#p‹tBYTE_ALIGNMENT
 8

	)

132 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"SWI 0" )

	)

133 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

140 
	#p‹tTIMER_REG_BASE_PTR
 
AT91C_BASE_TC0


	)

141 
	#p‹tTIMER_CLK_ENABLE_BIT
 
AT91C_PS_TC0


	)

142 
	#p‹tTIMER_AIC_CHANNEL
 ( ( 
uöt32_t
 ) 4 )

	)

154 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

156 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

157 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

160 
asm
 volatile ( \

186 –Ë
	gulCrôiˇlNe°ög
; \

187 –Ë
	gpxCuºítTCB
; \

191 
	#p‹tSAVE_CONTEXT
(Ë\

	)

193 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

194 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

197 
asm
 volatile ( \

233 –Ë
	gulCrôiˇlNe°ög
; \

234 –Ë
	gpxCuºítTCB
; \

237 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

248 #ifde‡
THUMB_INTERWORK


250 
vP‹tDißbÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

251 
vP‹tE«bÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

253 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tDißbÀI¡îru±sFromThumb
()

	)

254 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tE«bÀI¡îru±sFromThumb
()

	)

258 
	#p‹tDISABLE_INTERRUPTS
(Ë\

	)

259 
asm
 volatile ( \

266 
	#p‹tENABLE_INTERRUPTS
(Ë\

	)

267 
asm
 volatile ( \

276 
vP‹tE¡îCrôiˇl
( );

277 
vP‹tExôCrôiˇl
( );

279 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

280 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

285 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

286 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

288 #ifde‡
__˝lu•lus


	@portable/GCC/ARM7_AT91SAM7S/AT91SAM7X256.h

46 #i‚de‡
AT91SAM7X256_H


47 
	#AT91SAM7X256_H


	)

49 vﬁ©ûê
	tAT91_REG
;

54 
	s_AT91S_SYS
 {

55 
AT91_REG
 
	mAIC_SMR
[32];

56 
AT91_REG
 
	mAIC_SVR
[32];

57 
AT91_REG
 
	mAIC_IVR
;

58 
AT91_REG
 
	mAIC_FVR
;

59 
AT91_REG
 
	mAIC_ISR
;

60 
AT91_REG
 
	mAIC_IPR
;

61 
AT91_REG
 
	mAIC_IMR
;

62 
AT91_REG
 
	mAIC_CISR
;

63 
AT91_REG
 
	mRe£rved0
[2];

64 
AT91_REG
 
	mAIC_IECR
;

65 
AT91_REG
 
	mAIC_IDCR
;

66 
AT91_REG
 
	mAIC_ICCR
;

67 
AT91_REG
 
	mAIC_ISCR
;

68 
AT91_REG
 
	mAIC_EOICR
;

69 
AT91_REG
 
	mAIC_SPU
;

70 
AT91_REG
 
	mAIC_DCR
;

71 
AT91_REG
 
	mRe£rved1
[1];

72 
AT91_REG
 
	mAIC_FFER
;

73 
AT91_REG
 
	mAIC_FFDR
;

74 
AT91_REG
 
	mAIC_FFSR
;

75 
AT91_REG
 
	mRe£rved2
[45];

76 
AT91_REG
 
	mDBGU_CR
;

77 
AT91_REG
 
	mDBGU_MR
;

78 
AT91_REG
 
	mDBGU_IER
;

79 
AT91_REG
 
	mDBGU_IDR
;

80 
AT91_REG
 
	mDBGU_IMR
;

81 
AT91_REG
 
	mDBGU_CSR
;

82 
AT91_REG
 
	mDBGU_RHR
;

83 
AT91_REG
 
	mDBGU_THR
;

84 
AT91_REG
 
	mDBGU_BRGR
;

85 
AT91_REG
 
	mRe£rved3
[7];

86 
AT91_REG
 
	mDBGU_CIDR
;

87 
AT91_REG
 
	mDBGU_EXID
;

88 
AT91_REG
 
	mDBGU_FNTR
;

89 
AT91_REG
 
	mRe£rved4
[45];

90 
AT91_REG
 
	mDBGU_RPR
;

91 
AT91_REG
 
	mDBGU_RCR
;

92 
AT91_REG
 
	mDBGU_TPR
;

93 
AT91_REG
 
	mDBGU_TCR
;

94 
AT91_REG
 
	mDBGU_RNPR
;

95 
AT91_REG
 
	mDBGU_RNCR
;

96 
AT91_REG
 
	mDBGU_TNPR
;

97 
AT91_REG
 
	mDBGU_TNCR
;

98 
AT91_REG
 
	mDBGU_PTCR
;

99 
AT91_REG
 
	mDBGU_PTSR
;

100 
AT91_REG
 
	mRe£rved5
[54];

101 
AT91_REG
 
	mPIOA_PER
;

102 
AT91_REG
 
	mPIOA_PDR
;

103 
AT91_REG
 
	mPIOA_PSR
;

104 
AT91_REG
 
	mRe£rved6
[1];

105 
AT91_REG
 
	mPIOA_OER
;

106 
AT91_REG
 
	mPIOA_ODR
;

107 
AT91_REG
 
	mPIOA_OSR
;

108 
AT91_REG
 
	mRe£rved7
[1];

109 
AT91_REG
 
	mPIOA_IFER
;

110 
AT91_REG
 
	mPIOA_IFDR
;

111 
AT91_REG
 
	mPIOA_IFSR
;

112 
AT91_REG
 
	mRe£rved8
[1];

113 
AT91_REG
 
	mPIOA_SODR
;

114 
AT91_REG
 
	mPIOA_CODR
;

115 
AT91_REG
 
	mPIOA_ODSR
;

116 
AT91_REG
 
	mPIOA_PDSR
;

117 
AT91_REG
 
	mPIOA_IER
;

118 
AT91_REG
 
	mPIOA_IDR
;

119 
AT91_REG
 
	mPIOA_IMR
;

120 
AT91_REG
 
	mPIOA_ISR
;

121 
AT91_REG
 
	mPIOA_MDER
;

122 
AT91_REG
 
	mPIOA_MDDR
;

123 
AT91_REG
 
	mPIOA_MDSR
;

124 
AT91_REG
 
	mRe£rved9
[1];

125 
AT91_REG
 
	mPIOA_PPUDR
;

126 
AT91_REG
 
	mPIOA_PPUER
;

127 
AT91_REG
 
	mPIOA_PPUSR
;

128 
AT91_REG
 
	mRe£rved10
[1];

129 
AT91_REG
 
	mPIOA_ASR
;

130 
AT91_REG
 
	mPIOA_BSR
;

131 
AT91_REG
 
	mPIOA_ABSR
;

132 
AT91_REG
 
	mRe£rved11
[9];

133 
AT91_REG
 
	mPIOA_OWER
;

134 
AT91_REG
 
	mPIOA_OWDR
;

135 
AT91_REG
 
	mPIOA_OWSR
;

136 
AT91_REG
 
	mRe£rved12
[85];

137 
AT91_REG
 
	mPIOB_PER
;

138 
AT91_REG
 
	mPIOB_PDR
;

139 
AT91_REG
 
	mPIOB_PSR
;

140 
AT91_REG
 
	mRe£rved13
[1];

141 
AT91_REG
 
	mPIOB_OER
;

142 
AT91_REG
 
	mPIOB_ODR
;

143 
AT91_REG
 
	mPIOB_OSR
;

144 
AT91_REG
 
	mRe£rved14
[1];

145 
AT91_REG
 
	mPIOB_IFER
;

146 
AT91_REG
 
	mPIOB_IFDR
;

147 
AT91_REG
 
	mPIOB_IFSR
;

148 
AT91_REG
 
	mRe£rved15
[1];

149 
AT91_REG
 
	mPIOB_SODR
;

150 
AT91_REG
 
	mPIOB_CODR
;

151 
AT91_REG
 
	mPIOB_ODSR
;

152 
AT91_REG
 
	mPIOB_PDSR
;

153 
AT91_REG
 
	mPIOB_IER
;

154 
AT91_REG
 
	mPIOB_IDR
;

155 
AT91_REG
 
	mPIOB_IMR
;

156 
AT91_REG
 
	mPIOB_ISR
;

157 
AT91_REG
 
	mPIOB_MDER
;

158 
AT91_REG
 
	mPIOB_MDDR
;

159 
AT91_REG
 
	mPIOB_MDSR
;

160 
AT91_REG
 
	mRe£rved16
[1];

161 
AT91_REG
 
	mPIOB_PPUDR
;

162 
AT91_REG
 
	mPIOB_PPUER
;

163 
AT91_REG
 
	mPIOB_PPUSR
;

164 
AT91_REG
 
	mRe£rved17
[1];

165 
AT91_REG
 
	mPIOB_ASR
;

166 
AT91_REG
 
	mPIOB_BSR
;

167 
AT91_REG
 
	mPIOB_ABSR
;

168 
AT91_REG
 
	mRe£rved18
[9];

169 
AT91_REG
 
	mPIOB_OWER
;

170 
AT91_REG
 
	mPIOB_OWDR
;

171 
AT91_REG
 
	mPIOB_OWSR
;

172 
AT91_REG
 
	mRe£rved19
[341];

173 
AT91_REG
 
	mPMC_SCER
;

174 
AT91_REG
 
	mPMC_SCDR
;

175 
AT91_REG
 
	mPMC_SCSR
;

176 
AT91_REG
 
	mRe£rved20
[1];

177 
AT91_REG
 
	mPMC_PCER
;

178 
AT91_REG
 
	mPMC_PCDR
;

179 
AT91_REG
 
	mPMC_PCSR
;

180 
AT91_REG
 
	mRe£rved21
[1];

181 
AT91_REG
 
	mPMC_MOR
;

182 
AT91_REG
 
	mPMC_MCFR
;

183 
AT91_REG
 
	mRe£rved22
[1];

184 
AT91_REG
 
	mPMC_PLLR
;

185 
AT91_REG
 
	mPMC_MCKR
;

186 
AT91_REG
 
	mRe£rved23
[3];

187 
AT91_REG
 
	mPMC_PCKR
[4];

188 
AT91_REG
 
	mRe£rved24
[4];

189 
AT91_REG
 
	mPMC_IER
;

190 
AT91_REG
 
	mPMC_IDR
;

191 
AT91_REG
 
	mPMC_SR
;

192 
AT91_REG
 
	mPMC_IMR
;

193 
AT91_REG
 
	mRe£rved25
[36];

194 
AT91_REG
 
	mRSTC_RCR
;

195 
AT91_REG
 
	mRSTC_RSR
;

196 
AT91_REG
 
	mRSTC_RMR
;

197 
AT91_REG
 
	mRe£rved26
[5];

198 
AT91_REG
 
	mRTTC_RTMR
;

199 
AT91_REG
 
	mRTTC_RTAR
;

200 
AT91_REG
 
	mRTTC_RTVR
;

201 
AT91_REG
 
	mRTTC_RTSR
;

202 
AT91_REG
 
	mPITC_PIMR
;

203 
AT91_REG
 
	mPITC_PISR
;

204 
AT91_REG
 
	mPITC_PIVR
;

205 
AT91_REG
 
	mPITC_PIIR
;

206 
AT91_REG
 
	mWDTC_WDCR
;

207 
AT91_REG
 
	mWDTC_WDMR
;

208 
AT91_REG
 
	mWDTC_WDSR
;

209 
AT91_REG
 
	mRe£rved27
[5];

210 
AT91_REG
 
	mVREG_MR
;

211 } 
	tAT91S_SYS
, *
	tAT91PS_SYS
;

217 
	s_AT91S_AIC
 {

218 
AT91_REG
 
	mAIC_SMR
[32];

219 
AT91_REG
 
	mAIC_SVR
[32];

220 
AT91_REG
 
	mAIC_IVR
;

221 
AT91_REG
 
	mAIC_FVR
;

222 
AT91_REG
 
	mAIC_ISR
;

223 
AT91_REG
 
	mAIC_IPR
;

224 
AT91_REG
 
	mAIC_IMR
;

225 
AT91_REG
 
	mAIC_CISR
;

226 
AT91_REG
 
	mRe£rved0
[2];

227 
AT91_REG
 
	mAIC_IECR
;

228 
AT91_REG
 
	mAIC_IDCR
;

229 
AT91_REG
 
	mAIC_ICCR
;

230 
AT91_REG
 
	mAIC_ISCR
;

231 
AT91_REG
 
	mAIC_EOICR
;

232 
AT91_REG
 
	mAIC_SPU
;

233 
AT91_REG
 
	mAIC_DCR
;

234 
AT91_REG
 
	mRe£rved1
[1];

235 
AT91_REG
 
	mAIC_FFER
;

236 
AT91_REG
 
	mAIC_FFDR
;

237 
AT91_REG
 
	mAIC_FFSR
;

238 } 
	tAT91S_AIC
, *
	tAT91PS_AIC
;

241 
	#AT91C_AIC_PRIOR
 (() 0x7 << 0)

242 
	#AT91C_AIC_PRIOR_LOWEST
 (() 0x0)

243 
	#AT91C_AIC_PRIOR_HIGHEST
 (() 0x7)

244 
	#AT91C_AIC_SRCTYPE
 (() 0x3 << 5)

245 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (() 0x0 << 5)

246 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (() 0x0 << 5)

247 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (() 0x1 << 5)

248 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (() 0x1 << 5)

249 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (() 0x2 << 5)

250 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (() 0x3 << 5)

252 
	#AT91C_AIC_NFIQ
 (() 0x1 << 0)

253 
	#AT91C_AIC_NIRQ
 (() 0x1 << 1)

255 
	#AT91C_AIC_DCR_PROT
 (() 0x1 << 0)

256 
	#AT91C_AIC_DCR_GMSK
 (() 0x1 << 1)

257 

	)

261 
	s_AT91S_PDC
 {

262 
AT91_REG
 
	mPDC_RPR
;

263 
AT91_REG
 
	mPDC_RCR
;

264 
AT91_REG
 
	mPDC_TPR
;

265 
AT91_REG
 
	mPDC_TCR
;

266 
AT91_REG
 
	mPDC_RNPR
;

267 
AT91_REG
 
	mPDC_RNCR
;

268 
AT91_REG
 
	mPDC_TNPR
;

269 
AT91_REG
 
	mPDC_TNCR
;

270 
AT91_REG
 
	mPDC_PTCR
;

271 
AT91_REG
 
	mPDC_PTSR
;

272 } 
	tAT91S_PDC
, *
	tAT91PS_PDC
;

275 
	#AT91C_PDC_RXTEN
 (() 0x1 << 0)

276 
	#AT91C_PDC_RXTDIS
 (() 0x1 << 1)

277 
	#AT91C_PDC_TXTEN
 (() 0x1 << 8)

278 
	#AT91C_PDC_TXTDIS
 (() 0x1 << 9)

280 

	)

284 
	s_AT91S_DBGU
 {

285 
AT91_REG
 
	mDBGU_CR
;

286 
AT91_REG
 
	mDBGU_MR
;

287 
AT91_REG
 
	mDBGU_IER
;

288 
AT91_REG
 
	mDBGU_IDR
;

289 
AT91_REG
 
	mDBGU_IMR
;

290 
AT91_REG
 
	mDBGU_CSR
;

291 
AT91_REG
 
	mDBGU_RHR
;

292 
AT91_REG
 
	mDBGU_THR
;

293 
AT91_REG
 
	mDBGU_BRGR
;

294 
AT91_REG
 
	mRe£rved0
[7];

295 
AT91_REG
 
	mDBGU_CIDR
;

296 
AT91_REG
 
	mDBGU_EXID
;

297 
AT91_REG
 
	mDBGU_FNTR
;

298 
AT91_REG
 
	mRe£rved1
[45];

299 
AT91_REG
 
	mDBGU_RPR
;

300 
AT91_REG
 
	mDBGU_RCR
;

301 
AT91_REG
 
	mDBGU_TPR
;

302 
AT91_REG
 
	mDBGU_TCR
;

303 
AT91_REG
 
	mDBGU_RNPR
;

304 
AT91_REG
 
	mDBGU_RNCR
;

305 
AT91_REG
 
	mDBGU_TNPR
;

306 
AT91_REG
 
	mDBGU_TNCR
;

307 
AT91_REG
 
	mDBGU_PTCR
;

308 
AT91_REG
 
	mDBGU_PTSR
;

309 } 
	tAT91S_DBGU
, *
	tAT91PS_DBGU
;

312 
	#AT91C_US_RSTRX
 (() 0x1 << 2)

313 
	#AT91C_US_RSTTX
 (() 0x1 << 3)

314 
	#AT91C_US_RXEN
 (() 0x1 << 4)

315 
	#AT91C_US_RXDIS
 (() 0x1 << 5)

316 
	#AT91C_US_TXEN
 (() 0x1 << 6)

317 
	#AT91C_US_TXDIS
 (() 0x1 << 7)

318 
	#AT91C_US_RSTSTA
 (() 0x1 << 8)

320 
	#AT91C_US_PAR
 (() 0x7 << 9)

321 
	#AT91C_US_PAR_EVEN
 (() 0x0 << 9)

322 
	#AT91C_US_PAR_ODD
 (() 0x1 << 9)

323 
	#AT91C_US_PAR_SPACE
 (() 0x2 << 9)

324 
	#AT91C_US_PAR_MARK
 (() 0x3 << 9)

325 
	#AT91C_US_PAR_NONE
 (() 0x4 << 9)

326 
	#AT91C_US_PAR_MULTI_DROP
 (() 0x6 << 9)

327 
	#AT91C_US_CHMODE
 (() 0x3 << 14)

328 
	#AT91C_US_CHMODE_NORMAL
 (() 0x0 << 14)

329 
	#AT91C_US_CHMODE_AUTO
 (() 0x1 << 14)

330 
	#AT91C_US_CHMODE_LOCAL
 (() 0x2 << 14)

331 
	#AT91C_US_CHMODE_REMOTE
 (() 0x3 << 14)

333 
	#AT91C_US_RXRDY
 (() 0x1 << 0)

334 
	#AT91C_US_TXRDY
 (() 0x1 << 1)

335 
	#AT91C_US_ENDRX
 (() 0x1 << 3)

336 
	#AT91C_US_ENDTX
 (() 0x1 << 4)

337 
	#AT91C_US_OVRE
 (() 0x1 << 5)

338 
	#AT91C_US_FRAME
 (() 0x1 << 6)

339 
	#AT91C_US_PARE
 (() 0x1 << 7)

340 
	#AT91C_US_TXEMPTY
 (() 0x1 << 9)

341 
	#AT91C_US_TXBUFE
 (() 0x1 << 11)

342 
	#AT91C_US_RXBUFF
 (() 0x1 << 12)

343 
	#AT91C_US_COMM_TX
 (() 0x1 << 30)

344 
	#AT91C_US_COMM_RX
 (() 0x1 << 31)

349 
	#AT91C_US_FORCE_NTRST
 (() 0x1 << 0)

350 

	)

354 
	s_AT91S_PIO
 {

355 
AT91_REG
 
	mPIO_PER
;

356 
AT91_REG
 
	mPIO_PDR
;

357 
AT91_REG
 
	mPIO_PSR
;

358 
AT91_REG
 
	mRe£rved0
[1];

359 
AT91_REG
 
	mPIO_OER
;

360 
AT91_REG
 
	mPIO_ODR
;

361 
AT91_REG
 
	mPIO_OSR
;

362 
AT91_REG
 
	mRe£rved1
[1];

363 
AT91_REG
 
	mPIO_IFER
;

364 
AT91_REG
 
	mPIO_IFDR
;

365 
AT91_REG
 
	mPIO_IFSR
;

366 
AT91_REG
 
	mRe£rved2
[1];

367 
AT91_REG
 
	mPIO_SODR
;

368 
AT91_REG
 
	mPIO_CODR
;

369 
AT91_REG
 
	mPIO_ODSR
;

370 
AT91_REG
 
	mPIO_PDSR
;

371 
AT91_REG
 
	mPIO_IER
;

372 
AT91_REG
 
	mPIO_IDR
;

373 
AT91_REG
 
	mPIO_IMR
;

374 
AT91_REG
 
	mPIO_ISR
;

375 
AT91_REG
 
	mPIO_MDER
;

376 
AT91_REG
 
	mPIO_MDDR
;

377 
AT91_REG
 
	mPIO_MDSR
;

378 
AT91_REG
 
	mRe£rved3
[1];

379 
AT91_REG
 
	mPIO_PPUDR
;

380 
AT91_REG
 
	mPIO_PPUER
;

381 
AT91_REG
 
	mPIO_PPUSR
;

382 
AT91_REG
 
	mRe£rved4
[1];

383 
AT91_REG
 
	mPIO_ASR
;

384 
AT91_REG
 
	mPIO_BSR
;

385 
AT91_REG
 
	mPIO_ABSR
;

386 
AT91_REG
 
	mRe£rved5
[9];

387 
AT91_REG
 
	mPIO_OWER
;

388 
AT91_REG
 
	mPIO_OWDR
;

389 
AT91_REG
 
	mPIO_OWSR
;

390 } 
	tAT91S_PIO
, *
	tAT91PS_PIO
;

396 
	s_AT91S_CKGR
 {

397 
AT91_REG
 
	mCKGR_MOR
;

398 
AT91_REG
 
	mCKGR_MCFR
;

399 
AT91_REG
 
	mRe£rved0
[1];

400 
AT91_REG
 
	mCKGR_PLLR
;

401 } 
	tAT91S_CKGR
, *
	tAT91PS_CKGR
;

404 
	#AT91C_CKGR_MOSCEN
 (() 0x1 << 0)

405 
	#AT91C_CKGR_OSCBYPASS
 (() 0x1 << 1)

406 
	#AT91C_CKGR_OSCOUNT
 (() 0xFF << 8)

408 
	#AT91C_CKGR_MAINF
 (() 0xFFFF << 0)

409 
	#AT91C_CKGR_MAINRDY
 (() 0x1 << 16)

411 
	#AT91C_CKGR_DIV
 (() 0xFF << 0)

412 
	#AT91C_CKGR_DIV_0
 (() 0x0)

413 
	#AT91C_CKGR_DIV_BYPASS
 (() 0x1)

414 
	#AT91C_CKGR_PLLCOUNT
 (() 0x3F << 8)

415 
	#AT91C_CKGR_OUT
 (() 0x3 << 14)

416 
	#AT91C_CKGR_OUT_0
 (() 0x0 << 14)

417 
	#AT91C_CKGR_OUT_1
 (() 0x1 << 14)

418 
	#AT91C_CKGR_OUT_2
 (() 0x2 << 14)

419 
	#AT91C_CKGR_OUT_3
 (() 0x3 << 14)

420 
	#AT91C_CKGR_MUL
 (() 0x7FF << 16)

421 
	#AT91C_CKGR_USBDIV
 (() 0x3 << 28)

422 
	#AT91C_CKGR_USBDIV_0
 (() 0x0 << 28)

423 
	#AT91C_CKGR_USBDIV_1
 (() 0x1 << 28)

424 
	#AT91C_CKGR_USBDIV_2
 (() 0x2 << 28)

425 

	)

429 
	s_AT91S_PMC
 {

430 
AT91_REG
 
	mPMC_SCER
;

431 
AT91_REG
 
	mPMC_SCDR
;

432 
AT91_REG
 
	mPMC_SCSR
;

433 
AT91_REG
 
	mRe£rved0
[1];

434 
AT91_REG
 
	mPMC_PCER
;

435 
AT91_REG
 
	mPMC_PCDR
;

436 
AT91_REG
 
	mPMC_PCSR
;

437 
AT91_REG
 
	mRe£rved1
[1];

438 
AT91_REG
 
	mPMC_MOR
;

439 
AT91_REG
 
	mPMC_MCFR
;

440 
AT91_REG
 
	mRe£rved2
[1];

441 
AT91_REG
 
	mPMC_PLLR
;

442 
AT91_REG
 
	mPMC_MCKR
;

443 
AT91_REG
 
	mRe£rved3
[3];

444 
AT91_REG
 
	mPMC_PCKR
[4];

445 
AT91_REG
 
	mRe£rved4
[4];

446 
AT91_REG
 
	mPMC_IER
;

447 
AT91_REG
 
	mPMC_IDR
;

448 
AT91_REG
 
	mPMC_SR
;

449 
AT91_REG
 
	mPMC_IMR
;

450 } 
	tAT91S_PMC
, *
	tAT91PS_PMC
;

453 
	#AT91C_PMC_PCK
 (() 0x1 << 0)

454 
	#AT91C_PMC_UDP
 (() 0x1 << 7)

455 
	#AT91C_PMC_PCK0
 (() 0x1 << 8)

456 
	#AT91C_PMC_PCK1
 (() 0x1 << 9)

457 
	#AT91C_PMC_PCK2
 (() 0x1 << 10)

458 
	#AT91C_PMC_PCK3
 (() 0x1 << 11)

465 
	#AT91C_PMC_CSS
 (() 0x3 << 0)

466 
	#AT91C_PMC_CSS_SLOW_CLK
 (() 0x0)

467 
	#AT91C_PMC_CSS_MAIN_CLK
 (() 0x1)

468 
	#AT91C_PMC_CSS_PLL_CLK
 (() 0x3)

469 
	#AT91C_PMC_PRES
 (() 0x7 << 2)

470 
	#AT91C_PMC_PRES_CLK
 (() 0x0 << 2)

471 
	#AT91C_PMC_PRES_CLK_2
 (() 0x1 << 2)

472 
	#AT91C_PMC_PRES_CLK_4
 (() 0x2 << 2)

473 
	#AT91C_PMC_PRES_CLK_8
 (() 0x3 << 2)

474 
	#AT91C_PMC_PRES_CLK_16
 (() 0x4 << 2)

475 
	#AT91C_PMC_PRES_CLK_32
 (() 0x5 << 2)

476 
	#AT91C_PMC_PRES_CLK_64
 (() 0x6 << 2)

479 
	#AT91C_PMC_MOSCS
 (() 0x1 << 0)

480 
	#AT91C_PMC_LOCK
 (() 0x1 << 2)

481 
	#AT91C_PMC_MCKRDY
 (() 0x1 << 3)

482 
	#AT91C_PMC_PCK0RDY
 (() 0x1 << 8)

483 
	#AT91C_PMC_PCK1RDY
 (() 0x1 << 9)

484 
	#AT91C_PMC_PCK2RDY
 (() 0x1 << 10)

485 
	#AT91C_PMC_PCK3RDY
 (() 0x1 << 11)

489 

	)

493 
	s_AT91S_RSTC
 {

494 
AT91_REG
 
	mRSTC_RCR
;

495 
AT91_REG
 
	mRSTC_RSR
;

496 
AT91_REG
 
	mRSTC_RMR
;

497 } 
	tAT91S_RSTC
, *
	tAT91PS_RSTC
;

500 
	#AT91C_RSTC_PROCRST
 (() 0x1 << 0)

501 
	#AT91C_RSTC_PERRST
 (() 0x1 << 2)

502 
	#AT91C_RSTC_EXTRST
 (() 0x1 << 3)

503 
	#AT91C_RSTC_KEY
 (() 0xFF << 24)

505 
	#AT91C_RSTC_URSTS
 (() 0x1 << 0)

506 
	#AT91C_RSTC_BODSTS
 (() 0x1 << 1)

507 
	#AT91C_RSTC_RSTTYP
 (() 0x7 << 8)

508 
	#AT91C_RSTC_RSTTYP_POWERUP
 (() 0x0 << 8)

509 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (() 0x1 << 8)

510 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (() 0x2 << 8)

511 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (() 0x3 << 8)

512 
	#AT91C_RSTC_RSTTYP_USER
 (() 0x4 << 8)

513 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (() 0x5 << 8)

514 
	#AT91C_RSTC_NRSTL
 (() 0x1 << 16)

515 
	#AT91C_RSTC_SRCMP
 (() 0x1 << 17)

517 
	#AT91C_RSTC_URSTEN
 (() 0x1 << 0)

518 
	#AT91C_RSTC_URSTIEN
 (() 0x1 << 4)

519 
	#AT91C_RSTC_ERSTL
 (() 0xF << 8)

520 
	#AT91C_RSTC_BODIEN
 (() 0x1 << 16)

521 

	)

525 
	s_AT91S_RTTC
 {

526 
AT91_REG
 
	mRTTC_RTMR
;

527 
AT91_REG
 
	mRTTC_RTAR
;

528 
AT91_REG
 
	mRTTC_RTVR
;

529 
AT91_REG
 
	mRTTC_RTSR
;

530 } 
	tAT91S_RTTC
, *
	tAT91PS_RTTC
;

533 
	#AT91C_RTTC_RTPRES
 (() 0xFFFF << 0)

534 
	#AT91C_RTTC_ALMIEN
 (() 0x1 << 16)

535 
	#AT91C_RTTC_RTTINCIEN
 (() 0x1 << 17)

536 
	#AT91C_RTTC_RTTRST
 (() 0x1 << 18)

538 
	#AT91C_RTTC_ALMV
 (() 0x0 << 0)

540 
	#AT91C_RTTC_CRTV
 (() 0x0 << 0)

542 
	#AT91C_RTTC_ALMS
 (() 0x1 << 0)

543 
	#AT91C_RTTC_RTTINC
 (() 0x1 << 1)

544 

	)

548 
	s_AT91S_PITC
 {

549 
AT91_REG
 
	mPITC_PIMR
;

550 
AT91_REG
 
	mPITC_PISR
;

551 
AT91_REG
 
	mPITC_PIVR
;

552 
AT91_REG
 
	mPITC_PIIR
;

553 } 
	tAT91S_PITC
, *
	tAT91PS_PITC
;

556 
	#AT91C_PITC_PIV
 (() 0xFFFFF << 0)

557 
	#AT91C_PITC_PITEN
 (() 0x1 << 24)

558 
	#AT91C_PITC_PITIEN
 (() 0x1 << 25)

560 
	#AT91C_PITC_PITS
 (() 0x1 << 0)

562 
	#AT91C_PITC_CPIV
 (() 0xFFFFF << 0)

563 
	#AT91C_PITC_PICNT
 (() 0xFFF << 20)

565 

	)

569 
	s_AT91S_WDTC
 {

570 
AT91_REG
 
	mWDTC_WDCR
;

571 
AT91_REG
 
	mWDTC_WDMR
;

572 
AT91_REG
 
	mWDTC_WDSR
;

573 } 
	tAT91S_WDTC
, *
	tAT91PS_WDTC
;

576 
	#AT91C_WDTC_WDRSTT
 (() 0x1 << 0)

577 
	#AT91C_WDTC_KEY
 (() 0xFF << 24)

579 
	#AT91C_WDTC_WDV
 (() 0xFFF << 0)

580 
	#AT91C_WDTC_WDFIEN
 (() 0x1 << 12)

581 
	#AT91C_WDTC_WDRSTEN
 (() 0x1 << 13)

582 
	#AT91C_WDTC_WDRPROC
 (() 0x1 << 14)

583 
	#AT91C_WDTC_WDDIS
 (() 0x1 << 15)

584 
	#AT91C_WDTC_WDD
 (() 0xFFF << 16)

585 
	#AT91C_WDTC_WDDBGHLT
 (() 0x1 << 28)

586 
	#AT91C_WDTC_WDIDLEHLT
 (() 0x1 << 29)

588 
	#AT91C_WDTC_WDUNF
 (() 0x1 << 0)

589 
	#AT91C_WDTC_WDERR
 (() 0x1 << 1)

590 

	)

594 
	s_AT91S_VREG
 {

595 
AT91_REG
 
	mVREG_MR
;

596 } 
	tAT91S_VREG
, *
	tAT91PS_VREG
;

599 
	#AT91C_VREG_PSTDBY
 (() 0x1 << 0)

600 

	)

604 
	s_AT91S_MC
 {

605 
AT91_REG
 
	mMC_RCR
;

606 
AT91_REG
 
	mMC_ASR
;

607 
AT91_REG
 
	mMC_AASR
;

608 
AT91_REG
 
	mRe£rved0
[21];

609 
AT91_REG
 
	mMC_FMR
;

610 
AT91_REG
 
	mMC_FCR
;

611 
AT91_REG
 
	mMC_FSR
;

612 } 
	tAT91S_MC
, *
	tAT91PS_MC
;

615 
	#AT91C_MC_RCB
 (() 0x1 << 0)

617 
	#AT91C_MC_UNDADD
 (() 0x1 << 0)

618 
	#AT91C_MC_MISADD
 (() 0x1 << 1)

619 
	#AT91C_MC_ABTSZ
 (() 0x3 << 8)

620 
	#AT91C_MC_ABTSZ_BYTE
 (() 0x0 << 8)

621 
	#AT91C_MC_ABTSZ_HWORD
 (() 0x1 << 8)

622 
	#AT91C_MC_ABTSZ_WORD
 (() 0x2 << 8)

623 
	#AT91C_MC_ABTTYP
 (() 0x3 << 10)

624 
	#AT91C_MC_ABTTYP_DATAR
 (() 0x0 << 10)

625 
	#AT91C_MC_ABTTYP_DATAW
 (() 0x1 << 10)

626 
	#AT91C_MC_ABTTYP_FETCH
 (() 0x2 << 10)

627 
	#AT91C_MC_MST0
 (() 0x1 << 16)

628 
	#AT91C_MC_MST1
 (() 0x1 << 17)

629 
	#AT91C_MC_SVMST0
 (() 0x1 << 24)

630 
	#AT91C_MC_SVMST1
 (() 0x1 << 25)

632 
	#AT91C_MC_FRDY
 (() 0x1 << 0)

633 
	#AT91C_MC_LOCKE
 (() 0x1 << 2)

634 
	#AT91C_MC_PROGE
 (() 0x1 << 3)

635 
	#AT91C_MC_NEBP
 (() 0x1 << 7)

636 
	#AT91C_MC_FWS
 (() 0x3 << 8)

637 
	#AT91C_MC_FWS_0FWS
 (() 0x0 << 8)

638 
	#AT91C_MC_FWS_1FWS
 (() 0x1 << 8)

639 
	#AT91C_MC_FWS_2FWS
 (() 0x2 << 8)

640 
	#AT91C_MC_FWS_3FWS
 (() 0x3 << 8)

641 
	#AT91C_MC_FMCN
 (() 0xFF << 16)

643 
	#AT91C_MC_FCMD
 (() 0xF << 0)

644 
	#AT91C_MC_FCMD_START_PROG
 (() 0x1)

645 
	#AT91C_MC_FCMD_LOCK
 (() 0x2)

646 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (() 0x3)

647 
	#AT91C_MC_FCMD_UNLOCK
 (() 0x4)

648 
	#AT91C_MC_FCMD_ERASE_ALL
 (() 0x8)

649 
	#AT91C_MC_FCMD_SET_GP_NVM
 (() 0xB)

650 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (() 0xD)

651 
	#AT91C_MC_FCMD_SET_SECURITY
 (() 0xF)

652 
	#AT91C_MC_PAGEN
 (() 0x3FF << 8)

653 
	#AT91C_MC_KEY
 (() 0xFF << 24)

655 
	#AT91C_MC_SECURITY
 (() 0x1 << 4)

656 
	#AT91C_MC_GPNVM0
 (() 0x1 << 8)

657 
	#AT91C_MC_GPNVM1
 (() 0x1 << 9)

658 
	#AT91C_MC_GPNVM2
 (() 0x1 << 10)

659 
	#AT91C_MC_GPNVM3
 (() 0x1 << 11)

660 
	#AT91C_MC_GPNVM4
 (() 0x1 << 12)

661 
	#AT91C_MC_GPNVM5
 (() 0x1 << 13)

662 
	#AT91C_MC_GPNVM6
 (() 0x1 << 14)

663 
	#AT91C_MC_GPNVM7
 (() 0x1 << 15)

664 
	#AT91C_MC_LOCKS0
 (() 0x1 << 16)

665 
	#AT91C_MC_LOCKS1
 (() 0x1 << 17)

666 
	#AT91C_MC_LOCKS2
 (() 0x1 << 18)

667 
	#AT91C_MC_LOCKS3
 (() 0x1 << 19)

668 
	#AT91C_MC_LOCKS4
 (() 0x1 << 20)

669 
	#AT91C_MC_LOCKS5
 (() 0x1 << 21)

670 
	#AT91C_MC_LOCKS6
 (() 0x1 << 22)

671 
	#AT91C_MC_LOCKS7
 (() 0x1 << 23)

672 
	#AT91C_MC_LOCKS8
 (() 0x1 << 24)

673 
	#AT91C_MC_LOCKS9
 (() 0x1 << 25)

674 
	#AT91C_MC_LOCKS10
 (() 0x1 << 26)

675 
	#AT91C_MC_LOCKS11
 (() 0x1 << 27)

676 
	#AT91C_MC_LOCKS12
 (() 0x1 << 28)

677 
	#AT91C_MC_LOCKS13
 (() 0x1 << 29)

678 
	#AT91C_MC_LOCKS14
 (() 0x1 << 30)

679 
	#AT91C_MC_LOCKS15
 (() 0x1 << 31)

680 

	)

684 
	s_AT91S_SPI
 {

685 
AT91_REG
 
	mSPI_CR
;

686 
AT91_REG
 
	mSPI_MR
;

687 
AT91_REG
 
	mSPI_RDR
;

688 
AT91_REG
 
	mSPI_TDR
;

689 
AT91_REG
 
	mSPI_SR
;

690 
AT91_REG
 
	mSPI_IER
;

691 
AT91_REG
 
	mSPI_IDR
;

692 
AT91_REG
 
	mSPI_IMR
;

693 
AT91_REG
 
	mRe£rved0
[4];

694 
AT91_REG
 
	mSPI_CSR
[4];

695 
AT91_REG
 
	mRe£rved1
[48];

696 
AT91_REG
 
	mSPI_RPR
;

697 
AT91_REG
 
	mSPI_RCR
;

698 
AT91_REG
 
	mSPI_TPR
;

699 
AT91_REG
 
	mSPI_TCR
;

700 
AT91_REG
 
	mSPI_RNPR
;

701 
AT91_REG
 
	mSPI_RNCR
;

702 
AT91_REG
 
	mSPI_TNPR
;

703 
AT91_REG
 
	mSPI_TNCR
;

704 
AT91_REG
 
	mSPI_PTCR
;

705 
AT91_REG
 
	mSPI_PTSR
;

706 } 
	tAT91S_SPI
, *
	tAT91PS_SPI
;

709 
	#AT91C_SPI_SPIEN
 (() 0x1 << 0)

710 
	#AT91C_SPI_SPIDIS
 (() 0x1 << 1)

711 
	#AT91C_SPI_SWRST
 (() 0x1 << 7)

712 
	#AT91C_SPI_LASTXFER
 (() 0x1 << 24)

714 
	#AT91C_SPI_MSTR
 (() 0x1 << 0)

715 
	#AT91C_SPI_PS
 (() 0x1 << 1)

716 
	#AT91C_SPI_PS_FIXED
 (() 0x0 << 1)

717 
	#AT91C_SPI_PS_VARIABLE
 (() 0x1 << 1)

718 
	#AT91C_SPI_PCSDEC
 (() 0x1 << 2)

719 
	#AT91C_SPI_FDIV
 (() 0x1 << 3)

720 
	#AT91C_SPI_MODFDIS
 (() 0x1 << 4)

721 
	#AT91C_SPI_LLB
 (() 0x1 << 7)

722 
	#AT91C_SPI_PCS
 (() 0xF << 16)

723 
	#AT91C_SPI_DLYBCS
 (() 0xFF << 24)

725 
	#AT91C_SPI_RD
 (() 0xFFFF << 0)

726 
	#AT91C_SPI_RPCS
 (() 0xF << 16)

728 
	#AT91C_SPI_TD
 (() 0xFFFF << 0)

729 
	#AT91C_SPI_TPCS
 (() 0xF << 16)

731 
	#AT91C_SPI_RDRF
 (() 0x1 << 0)

732 
	#AT91C_SPI_TDRE
 (() 0x1 << 1)

733 
	#AT91C_SPI_MODF
 (() 0x1 << 2)

734 
	#AT91C_SPI_OVRES
 (() 0x1 << 3)

735 
	#AT91C_SPI_ENDRX
 (() 0x1 << 4)

736 
	#AT91C_SPI_ENDTX
 (() 0x1 << 5)

737 
	#AT91C_SPI_RXBUFF
 (() 0x1 << 6)

738 
	#AT91C_SPI_TXBUFE
 (() 0x1 << 7)

739 
	#AT91C_SPI_NSSR
 (() 0x1 << 8)

740 
	#AT91C_SPI_TXEMPTY
 (() 0x1 << 9)

741 
	#AT91C_SPI_SPIENS
 (() 0x1 << 16)

746 
	#AT91C_SPI_CPOL
 (() 0x1 << 0)

747 
	#AT91C_SPI_NCPHA
 (() 0x1 << 1)

748 
	#AT91C_SPI_CSAAT
 (() 0x1 << 3)

749 
	#AT91C_SPI_BITS
 (() 0xF << 4)

750 
	#AT91C_SPI_BITS_8
 (() 0x0 << 4)

751 
	#AT91C_SPI_BITS_9
 (() 0x1 << 4)

752 
	#AT91C_SPI_BITS_10
 (() 0x2 << 4)

753 
	#AT91C_SPI_BITS_11
 (() 0x3 << 4)

754 
	#AT91C_SPI_BITS_12
 (() 0x4 << 4)

755 
	#AT91C_SPI_BITS_13
 (() 0x5 << 4)

756 
	#AT91C_SPI_BITS_14
 (() 0x6 << 4)

757 
	#AT91C_SPI_BITS_15
 (() 0x7 << 4)

758 
	#AT91C_SPI_BITS_16
 (() 0x8 << 4)

759 
	#AT91C_SPI_SCBR
 (() 0xFF << 8)

760 
	#AT91C_SPI_DLYBS
 (() 0xFF << 16)

761 
	#AT91C_SPI_DLYBCT
 (() 0xFF << 24)

762 

	)

766 
	s_AT91S_USART
 {

767 
AT91_REG
 
	mUS_CR
;

768 
AT91_REG
 
	mUS_MR
;

769 
AT91_REG
 
	mUS_IER
;

770 
AT91_REG
 
	mUS_IDR
;

771 
AT91_REG
 
	mUS_IMR
;

772 
AT91_REG
 
	mUS_CSR
;

773 
AT91_REG
 
	mUS_RHR
;

774 
AT91_REG
 
	mUS_THR
;

775 
AT91_REG
 
	mUS_BRGR
;

776 
AT91_REG
 
	mUS_RTOR
;

777 
AT91_REG
 
	mUS_TTGR
;

778 
AT91_REG
 
	mRe£rved0
[5];

779 
AT91_REG
 
	mUS_FIDI
;

780 
AT91_REG
 
	mUS_NER
;

781 
AT91_REG
 
	mRe£rved1
[1];

782 
AT91_REG
 
	mUS_IF
;

783 
AT91_REG
 
	mRe£rved2
[44];

784 
AT91_REG
 
	mUS_RPR
;

785 
AT91_REG
 
	mUS_RCR
;

786 
AT91_REG
 
	mUS_TPR
;

787 
AT91_REG
 
	mUS_TCR
;

788 
AT91_REG
 
	mUS_RNPR
;

789 
AT91_REG
 
	mUS_RNCR
;

790 
AT91_REG
 
	mUS_TNPR
;

791 
AT91_REG
 
	mUS_TNCR
;

792 
AT91_REG
 
	mUS_PTCR
;

793 
AT91_REG
 
	mUS_PTSR
;

794 } 
	tAT91S_USART
, *
	tAT91PS_USART
;

797 
	#AT91C_US_STTBRK
 (() 0x1 << 9)

798 
	#AT91C_US_STPBRK
 (() 0x1 << 10)

799 
	#AT91C_US_STTTO
 (() 0x1 << 11)

800 
	#AT91C_US_SENDA
 (() 0x1 << 12)

801 
	#AT91C_US_RSTIT
 (() 0x1 << 13)

802 
	#AT91C_US_RSTNACK
 (() 0x1 << 14)

803 
	#AT91C_US_RETTO
 (() 0x1 << 15)

804 
	#AT91C_US_DTREN
 (() 0x1 << 16)

805 
	#AT91C_US_DTRDIS
 (() 0x1 << 17)

806 
	#AT91C_US_RTSEN
 (() 0x1 << 18)

807 
	#AT91C_US_RTSDIS
 (() 0x1 << 19)

809 
	#AT91C_US_USMODE
 (() 0xF << 0)

810 
	#AT91C_US_USMODE_NORMAL
 (() 0x0)

811 
	#AT91C_US_USMODE_RS485
 (() 0x1)

812 
	#AT91C_US_USMODE_HWHSH
 (() 0x2)

813 
	#AT91C_US_USMODE_MODEM
 (() 0x3)

814 
	#AT91C_US_USMODE_ISO7816_0
 (() 0x4)

815 
	#AT91C_US_USMODE_ISO7816_1
 (() 0x6)

816 
	#AT91C_US_USMODE_IRDA
 (() 0x8)

817 
	#AT91C_US_USMODE_SWHSH
 (() 0xC)

818 
	#AT91C_US_CLKS
 (() 0x3 << 4)

819 
	#AT91C_US_CLKS_CLOCK
 (() 0x0 << 4)

820 
	#AT91C_US_CLKS_FDIV1
 (() 0x1 << 4)

821 
	#AT91C_US_CLKS_SLOW
 (() 0x2 << 4)

822 
	#AT91C_US_CLKS_EXT
 (() 0x3 << 4)

823 
	#AT91C_US_CHRL
 (() 0x3 << 6)

824 
	#AT91C_US_CHRL_5_BITS
 (() 0x0 << 6)

825 
	#AT91C_US_CHRL_6_BITS
 (() 0x1 << 6)

826 
	#AT91C_US_CHRL_7_BITS
 (() 0x2 << 6)

827 
	#AT91C_US_CHRL_8_BITS
 (() 0x3 << 6)

828 
	#AT91C_US_SYNC
 (() 0x1 << 8)

829 
	#AT91C_US_NBSTOP
 (() 0x3 << 12)

830 
	#AT91C_US_NBSTOP_1_BIT
 (() 0x0 << 12)

831 
	#AT91C_US_NBSTOP_15_BIT
 (() 0x1 << 12)

832 
	#AT91C_US_NBSTOP_2_BIT
 (() 0x2 << 12)

833 
	#AT91C_US_MSBF
 (() 0x1 << 16)

834 
	#AT91C_US_MODE9
 (() 0x1 << 17)

835 
	#AT91C_US_CKLO
 (() 0x1 << 18)

836 
	#AT91C_US_OVER
 (() 0x1 << 19)

837 
	#AT91C_US_INACK
 (() 0x1 << 20)

838 
	#AT91C_US_DSNACK
 (() 0x1 << 21)

839 
	#AT91C_US_MAX_ITER
 (() 0x1 << 24)

840 
	#AT91C_US_FILTER
 (() 0x1 << 28)

842 
	#AT91C_US_RXBRK
 (() 0x1 << 2)

843 
	#AT91C_US_TIMEOUT
 (() 0x1 << 8)

844 
	#AT91C_US_ITERATION
 (() 0x1 << 10)

845 
	#AT91C_US_NACK
 (() 0x1 << 13)

846 
	#AT91C_US_RIIC
 (() 0x1 << 16)

847 
	#AT91C_US_DSRIC
 (() 0x1 << 17)

848 
	#AT91C_US_DCDIC
 (() 0x1 << 18)

849 
	#AT91C_US_CTSIC
 (() 0x1 << 19)

853 
	#AT91C_US_RI
 (() 0x1 << 20)

854 
	#AT91C_US_DSR
 (() 0x1 << 21)

855 
	#AT91C_US_DCD
 (() 0x1 << 22)

856 
	#AT91C_US_CTS
 (() 0x1 << 23)

857 

	)

861 
	s_AT91S_SSC
 {

862 
AT91_REG
 
	mSSC_CR
;

863 
AT91_REG
 
	mSSC_CMR
;

864 
AT91_REG
 
	mRe£rved0
[2];

865 
AT91_REG
 
	mSSC_RCMR
;

866 
AT91_REG
 
	mSSC_RFMR
;

867 
AT91_REG
 
	mSSC_TCMR
;

868 
AT91_REG
 
	mSSC_TFMR
;

869 
AT91_REG
 
	mSSC_RHR
;

870 
AT91_REG
 
	mSSC_THR
;

871 
AT91_REG
 
	mRe£rved1
[2];

872 
AT91_REG
 
	mSSC_RSHR
;

873 
AT91_REG
 
	mSSC_TSHR
;

874 
AT91_REG
 
	mRe£rved2
[2];

875 
AT91_REG
 
	mSSC_SR
;

876 
AT91_REG
 
	mSSC_IER
;

877 
AT91_REG
 
	mSSC_IDR
;

878 
AT91_REG
 
	mSSC_IMR
;

879 
AT91_REG
 
	mRe£rved3
[44];

880 
AT91_REG
 
	mSSC_RPR
;

881 
AT91_REG
 
	mSSC_RCR
;

882 
AT91_REG
 
	mSSC_TPR
;

883 
AT91_REG
 
	mSSC_TCR
;

884 
AT91_REG
 
	mSSC_RNPR
;

885 
AT91_REG
 
	mSSC_RNCR
;

886 
AT91_REG
 
	mSSC_TNPR
;

887 
AT91_REG
 
	mSSC_TNCR
;

888 
AT91_REG
 
	mSSC_PTCR
;

889 
AT91_REG
 
	mSSC_PTSR
;

890 } 
	tAT91S_SSC
, *
	tAT91PS_SSC
;

893 
	#AT91C_SSC_RXEN
 (() 0x1 << 0)

894 
	#AT91C_SSC_RXDIS
 (() 0x1 << 1)

895 
	#AT91C_SSC_TXEN
 (() 0x1 << 8)

896 
	#AT91C_SSC_TXDIS
 (() 0x1 << 9)

897 
	#AT91C_SSC_SWRST
 (() 0x1 << 15)

899 
	#AT91C_SSC_CKS
 (() 0x3 << 0)

900 
	#AT91C_SSC_CKS_DIV
 (() 0x0)

901 
	#AT91C_SSC_CKS_TK
 (() 0x1)

902 
	#AT91C_SSC_CKS_RK
 (() 0x2)

903 
	#AT91C_SSC_CKO
 (() 0x7 << 2)

904 
	#AT91C_SSC_CKO_NONE
 (() 0x0 << 2)

905 
	#AT91C_SSC_CKO_CONTINOUS
 (() 0x1 << 2)

906 
	#AT91C_SSC_CKO_DATA_TX
 (() 0x2 << 2)

907 
	#AT91C_SSC_CKI
 (() 0x1 << 5)

908 
	#AT91C_SSC_START
 (() 0xF << 8)

909 
	#AT91C_SSC_START_CONTINOUS
 (() 0x0 << 8)

910 
	#AT91C_SSC_START_TX
 (() 0x1 << 8)

911 
	#AT91C_SSC_START_LOW_RF
 (() 0x2 << 8)

912 
	#AT91C_SSC_START_HIGH_RF
 (() 0x3 << 8)

913 
	#AT91C_SSC_START_FALL_RF
 (() 0x4 << 8)

914 
	#AT91C_SSC_START_RISE_RF
 (() 0x5 << 8)

915 
	#AT91C_SSC_START_LEVEL_RF
 (() 0x6 << 8)

916 
	#AT91C_SSC_START_EDGE_RF
 (() 0x7 << 8)

917 
	#AT91C_SSC_START_0
 (() 0x8 << 8)

918 
	#AT91C_SSC_STTDLY
 (() 0xFF << 16)

919 
	#AT91C_SSC_PERIOD
 (() 0xFF << 24)

921 
	#AT91C_SSC_DATLEN
 (() 0x1F << 0)

922 
	#AT91C_SSC_LOOP
 (() 0x1 << 5)

923 
	#AT91C_SSC_MSBF
 (() 0x1 << 7)

924 
	#AT91C_SSC_DATNB
 (() 0xF << 8)

925 
	#AT91C_SSC_FSLEN
 (() 0xF << 16)

926 
	#AT91C_SSC_FSOS
 (() 0x7 << 20)

927 
	#AT91C_SSC_FSOS_NONE
 (() 0x0 << 20)

928 
	#AT91C_SSC_FSOS_NEGATIVE
 (() 0x1 << 20)

929 
	#AT91C_SSC_FSOS_POSITIVE
 (() 0x2 << 20)

930 
	#AT91C_SSC_FSOS_LOW
 (() 0x3 << 20)

931 
	#AT91C_SSC_FSOS_HIGH
 (() 0x4 << 20)

932 
	#AT91C_SSC_FSOS_TOGGLE
 (() 0x5 << 20)

933 
	#AT91C_SSC_FSEDGE
 (() 0x1 << 24)

936 
	#AT91C_SSC_DATDEF
 (() 0x1 << 5)

937 
	#AT91C_SSC_FSDEN
 (() 0x1 << 23)

939 
	#AT91C_SSC_TXRDY
 (() 0x1 << 0)

940 
	#AT91C_SSC_TXEMPTY
 (() 0x1 << 1)

941 
	#AT91C_SSC_ENDTX
 (() 0x1 << 2)

942 
	#AT91C_SSC_TXBUFE
 (() 0x1 << 3)

943 
	#AT91C_SSC_RXRDY
 (() 0x1 << 4)

944 
	#AT91C_SSC_OVRUN
 (() 0x1 << 5)

945 
	#AT91C_SSC_ENDRX
 (() 0x1 << 6)

946 
	#AT91C_SSC_RXBUFF
 (() 0x1 << 7)

947 
	#AT91C_SSC_TXSYN
 (() 0x1 << 10)

948 
	#AT91C_SSC_RXSYN
 (() 0x1 << 11)

949 
	#AT91C_SSC_TXENA
 (() 0x1 << 16)

950 
	#AT91C_SSC_RXENA
 (() 0x1 << 17)

954 

	)

958 
	s_AT91S_TWI
 {

959 
AT91_REG
 
	mTWI_CR
;

960 
AT91_REG
 
	mTWI_MMR
;

961 
AT91_REG
 
	mRe£rved0
[1];

962 
AT91_REG
 
	mTWI_IADR
;

963 
AT91_REG
 
	mTWI_CWGR
;

964 
AT91_REG
 
	mRe£rved1
[3];

965 
AT91_REG
 
	mTWI_SR
;

966 
AT91_REG
 
	mTWI_IER
;

967 
AT91_REG
 
	mTWI_IDR
;

968 
AT91_REG
 
	mTWI_IMR
;

969 
AT91_REG
 
	mTWI_RHR
;

970 
AT91_REG
 
	mTWI_THR
;

971 } 
	tAT91S_TWI
, *
	tAT91PS_TWI
;

974 
	#AT91C_TWI_START
 (() 0x1 << 0)

975 
	#AT91C_TWI_STOP
 (() 0x1 << 1)

976 
	#AT91C_TWI_MSEN
 (() 0x1 << 2)

977 
	#AT91C_TWI_MSDIS
 (() 0x1 << 3)

978 
	#AT91C_TWI_SWRST
 (() 0x1 << 7)

980 
	#AT91C_TWI_IADRSZ
 (() 0x3 << 8)

981 
	#AT91C_TWI_IADRSZ_NO
 (() 0x0 << 8)

982 
	#AT91C_TWI_IADRSZ_1_BYTE
 (() 0x1 << 8)

983 
	#AT91C_TWI_IADRSZ_2_BYTE
 (() 0x2 << 8)

984 
	#AT91C_TWI_IADRSZ_3_BYTE
 (() 0x3 << 8)

985 
	#AT91C_TWI_MREAD
 (() 0x1 << 12)

986 
	#AT91C_TWI_DADR
 (() 0x7F << 16)

988 
	#AT91C_TWI_CLDIV
 (() 0xFF << 0)

989 
	#AT91C_TWI_CHDIV
 (() 0xFF << 8)

990 
	#AT91C_TWI_CKDIV
 (() 0x7 << 16)

992 
	#AT91C_TWI_TXCOMP
 (() 0x1 << 0)

993 
	#AT91C_TWI_RXRDY
 (() 0x1 << 1)

994 
	#AT91C_TWI_TXRDY
 (() 0x1 << 2)

995 
	#AT91C_TWI_OVRE
 (() 0x1 << 6)

996 
	#AT91C_TWI_UNRE
 (() 0x1 << 7)

997 
	#AT91C_TWI_NACK
 (() 0x1 << 8)

1001 

	)

1005 
	s_AT91S_PWMC_CH
 {

1006 
AT91_REG
 
	mPWMC_CMR
;

1007 
AT91_REG
 
	mPWMC_CDTYR
;

1008 
AT91_REG
 
	mPWMC_CPRDR
;

1009 
AT91_REG
 
	mPWMC_CCNTR
;

1010 
AT91_REG
 
	mPWMC_CUPDR
;

1011 
AT91_REG
 
	mPWMC_Re£rved
[3];

1012 } 
	tAT91S_PWMC_CH
, *
	tAT91PS_PWMC_CH
;

1015 
	#AT91C_PWMC_CPRE
 (() 0xF << 0)

1016 
	#AT91C_PWMC_CPRE_MCK
 (() 0x0)

1017 
	#AT91C_PWMC_CPRE_MCKA
 (() 0xB)

1018 
	#AT91C_PWMC_CPRE_MCKB
 (() 0xC)

1019 
	#AT91C_PWMC_CALG
 (() 0x1 << 8)

1020 
	#AT91C_PWMC_CPOL
 (() 0x1 << 9)

1021 
	#AT91C_PWMC_CPD
 (() 0x1 << 10)

1023 
	#AT91C_PWMC_CDTY
 (() 0x0 << 0)

1025 
	#AT91C_PWMC_CPRD
 (() 0x0 << 0)

1027 
	#AT91C_PWMC_CCNT
 (() 0x0 << 0)

1029 
	#AT91C_PWMC_CUPD
 (() 0x0 << 0)

1030 

	)

1034 
	s_AT91S_PWMC
 {

1035 
AT91_REG
 
	mPWMC_MR
;

1036 
AT91_REG
 
	mPWMC_ENA
;

1037 
AT91_REG
 
	mPWMC_DIS
;

1038 
AT91_REG
 
	mPWMC_SR
;

1039 
AT91_REG
 
	mPWMC_IER
;

1040 
AT91_REG
 
	mPWMC_IDR
;

1041 
AT91_REG
 
	mPWMC_IMR
;

1042 
AT91_REG
 
	mPWMC_ISR
;

1043 
AT91_REG
 
	mRe£rved0
[55];

1044 
AT91_REG
 
	mPWMC_VR
;

1045 
AT91_REG
 
	mRe£rved1
[64];

1046 
AT91S_PWMC_CH
 
	mPWMC_CH
[4];

1047 } 
	tAT91S_PWMC
, *
	tAT91PS_PWMC
;

1050 
	#AT91C_PWMC_DIVA
 (() 0xFF << 0)

1051 
	#AT91C_PWMC_PREA
 (() 0xF << 8)

1052 
	#AT91C_PWMC_PREA_MCK
 (() 0x0 << 8)

1053 
	#AT91C_PWMC_DIVB
 (() 0xFF << 16)

1054 
	#AT91C_PWMC_PREB
 (() 0xF << 24)

1055 
	#AT91C_PWMC_PREB_MCK
 (() 0x0 << 24)

1057 
	#AT91C_PWMC_CHID0
 (() 0x1 << 0)

1058 
	#AT91C_PWMC_CHID1
 (() 0x1 << 1)

1059 
	#AT91C_PWMC_CHID2
 (() 0x1 << 2)

1060 
	#AT91C_PWMC_CHID3
 (() 0x1 << 3)

1067 

	)

1071 
	s_AT91S_UDP
 {

1072 
AT91_REG
 
	mUDP_NUM
;

1073 
AT91_REG
 
	mUDP_GLBSTATE
;

1074 
AT91_REG
 
	mUDP_FADDR
;

1075 
AT91_REG
 
	mRe£rved0
[1];

1076 
AT91_REG
 
	mUDP_IER
;

1077 
AT91_REG
 
	mUDP_IDR
;

1078 
AT91_REG
 
	mUDP_IMR
;

1079 
AT91_REG
 
	mUDP_ISR
;

1080 
AT91_REG
 
	mUDP_ICR
;

1081 
AT91_REG
 
	mRe£rved1
[1];

1082 
AT91_REG
 
	mUDP_RSTEP
;

1083 
AT91_REG
 
	mRe£rved2
[1];

1084 
AT91_REG
 
	mUDP_CSR
[6];

1085 
AT91_REG
 
	mRe£rved3
[2];

1086 
AT91_REG
 
	mUDP_FDR
[6];

1087 
AT91_REG
 
	mRe£rved4
[3];

1088 
AT91_REG
 
	mUDP_TXVC
;

1089 } 
	tAT91S_UDP
, *
	tAT91PS_UDP
;

1092 
	#AT91C_UDP_FRM_NUM
 (() 0x7FF << 0)

1093 
	#AT91C_UDP_FRM_ERR
 (() 0x1 << 16)

1094 
	#AT91C_UDP_FRM_OK
 (() 0x1 << 17)

1096 
	#AT91C_UDP_FADDEN
 (() 0x1 << 0)

1097 
	#AT91C_UDP_CONFG
 (() 0x1 << 1)

1098 
	#AT91C_UDP_ESR
 (() 0x1 << 2)

1099 
	#AT91C_UDP_RSMINPR
 (() 0x1 << 3)

1100 
	#AT91C_UDP_RMWUPE
 (() 0x1 << 4)

1102 
	#AT91C_UDP_FADD
 (() 0xFF << 0)

1103 
	#AT91C_UDP_FEN
 (() 0x1 << 8)

1105 
	#AT91C_UDP_EPINT0
 (() 0x1 << 0)

1106 
	#AT91C_UDP_EPINT1
 (() 0x1 << 1)

1107 
	#AT91C_UDP_EPINT2
 (() 0x1 << 2)

1108 
	#AT91C_UDP_EPINT3
 (() 0x1 << 3)

1109 
	#AT91C_UDP_EPINT4
 (() 0x1 << 4)

1110 
	#AT91C_UDP_EPINT5
 (() 0x1 << 5)

1111 
	#AT91C_UDP_RXSUSP
 (() 0x1 << 8)

1112 
	#AT91C_UDP_RXRSM
 (() 0x1 << 9)

1113 
	#AT91C_UDP_EXTRSM
 (() 0x1 << 10)

1114 
	#AT91C_UDP_SOFINT
 (() 0x1 << 11)

1115 
	#AT91C_UDP_WAKEUP
 (() 0x1 << 13)

1119 
	#AT91C_UDP_ENDBUSRES
 (() 0x1 << 12)

1122 
	#AT91C_UDP_EP0
 (() 0x1 << 0)

1123 
	#AT91C_UDP_EP1
 (() 0x1 << 1)

1124 
	#AT91C_UDP_EP2
 (() 0x1 << 2)

1125 
	#AT91C_UDP_EP3
 (() 0x1 << 3)

1126 
	#AT91C_UDP_EP4
 (() 0x1 << 4)

1127 
	#AT91C_UDP_EP5
 (() 0x1 << 5)

1129 
	#AT91C_UDP_TXCOMP
 (() 0x1 << 0)

1130 
	#AT91C_UDP_RX_DATA_BK0
 (() 0x1 << 1)

1131 
	#AT91C_UDP_RXSETUP
 (() 0x1 << 2)

1132 
	#AT91C_UDP_ISOERROR
 (() 0x1 << 3)

1133 
	#AT91C_UDP_TXPKTRDY
 (() 0x1 << 4)

1134 
	#AT91C_UDP_FORCESTALL
 (() 0x1 << 5)

1135 
	#AT91C_UDP_RX_DATA_BK1
 (() 0x1 << 6)

1136 
	#AT91C_UDP_DIR
 (() 0x1 << 7)

1137 
	#AT91C_UDP_EPTYPE
 (() 0x7 << 8)

1138 
	#AT91C_UDP_EPTYPE_CTRL
 (() 0x0 << 8)

1139 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (() 0x1 << 8)

1140 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (() 0x2 << 8)

1141 
	#AT91C_UDP_EPTYPE_INT_OUT
 (() 0x3 << 8)

1142 
	#AT91C_UDP_EPTYPE_ISO_IN
 (() 0x5 << 8)

1143 
	#AT91C_UDP_EPTYPE_BULK_IN
 (() 0x6 << 8)

1144 
	#AT91C_UDP_EPTYPE_INT_IN
 (() 0x7 << 8)

1145 
	#AT91C_UDP_DTGLE
 (() 0x1 << 11)

1146 
	#AT91C_UDP_EPEDS
 (() 0x1 << 15)

1147 
	#AT91C_UDP_RXBYTECNT
 (() 0x7FF << 16)

1149 
	#AT91C_UDP_TXVDIS
 (() 0x1 << 8)

1150 
	#AT91C_UDP_PUON
 (() 0x1 << 9)

1151 

	)

1155 
	s_AT91S_TC
 {

1156 
AT91_REG
 
	mTC_CCR
;

1157 
AT91_REG
 
	mTC_CMR
;

1158 
AT91_REG
 
	mRe£rved0
[2];

1159 
AT91_REG
 
	mTC_CV
;

1160 
AT91_REG
 
	mTC_RA
;

1161 
AT91_REG
 
	mTC_RB
;

1162 
AT91_REG
 
	mTC_RC
;

1163 
AT91_REG
 
	mTC_SR
;

1164 
AT91_REG
 
	mTC_IER
;

1165 
AT91_REG
 
	mTC_IDR
;

1166 
AT91_REG
 
	mTC_IMR
;

1167 } 
	tAT91S_TC
, *
	tAT91PS_TC
;

1170 
	#AT91C_TC_CLKEN
 (() 0x1 << 0)

1171 
	#AT91C_TC_CLKDIS
 (() 0x1 << 1)

1172 
	#AT91C_TC_SWTRG
 (() 0x1 << 2)

1174 
	#AT91C_TC_CLKS
 (() 0x7 << 0)

1175 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (() 0x0)

1176 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (() 0x1)

1177 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (() 0x2)

1178 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (() 0x3)

1179 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (() 0x4)

1180 
	#AT91C_TC_CLKS_XC0
 (() 0x5)

1181 
	#AT91C_TC_CLKS_XC1
 (() 0x6)

1182 
	#AT91C_TC_CLKS_XC2
 (() 0x7)

1183 
	#AT91C_TC_CLKI
 (() 0x1 << 3)

1184 
	#AT91C_TC_BURST
 (() 0x3 << 4)

1185 
	#AT91C_TC_BURST_NONE
 (() 0x0 << 4)

1186 
	#AT91C_TC_BURST_XC0
 (() 0x1 << 4)

1187 
	#AT91C_TC_BURST_XC1
 (() 0x2 << 4)

1188 
	#AT91C_TC_BURST_XC2
 (() 0x3 << 4)

1189 
	#AT91C_TC_CPCSTOP
 (() 0x1 << 6)

1190 
	#AT91C_TC_LDBSTOP
 (() 0x1 << 6)

1191 
	#AT91C_TC_CPCDIS
 (() 0x1 << 7)

1192 
	#AT91C_TC_LDBDIS
 (() 0x1 << 7)

1193 
	#AT91C_TC_ETRGEDG
 (() 0x3 << 8)

1194 
	#AT91C_TC_ETRGEDG_NONE
 (() 0x0 << 8)

1195 
	#AT91C_TC_ETRGEDG_RISING
 (() 0x1 << 8)

1196 
	#AT91C_TC_ETRGEDG_FALLING
 (() 0x2 << 8)

1197 
	#AT91C_TC_ETRGEDG_BOTH
 (() 0x3 << 8)

1198 
	#AT91C_TC_EEVTEDG
 (() 0x3 << 8)

1199 
	#AT91C_TC_EEVTEDG_NONE
 (() 0x0 << 8)

1200 
	#AT91C_TC_EEVTEDG_RISING
 (() 0x1 << 8)

1201 
	#AT91C_TC_EEVTEDG_FALLING
 (() 0x2 << 8)

1202 
	#AT91C_TC_EEVTEDG_BOTH
 (() 0x3 << 8)

1203 
	#AT91C_TC_EEVT
 (() 0x3 << 10)

1204 
	#AT91C_TC_EEVT_TIOB
 (() 0x0 << 10)

1205 
	#AT91C_TC_EEVT_XC0
 (() 0x1 << 10)

1206 
	#AT91C_TC_EEVT_XC1
 (() 0x2 << 10)

1207 
	#AT91C_TC_EEVT_XC2
 (() 0x3 << 10)

1208 
	#AT91C_TC_ABETRG
 (() 0x1 << 10)

1209 
	#AT91C_TC_ENETRG
 (() 0x1 << 12)

1210 
	#AT91C_TC_WAVESEL
 (() 0x3 << 13)

1211 
	#AT91C_TC_WAVESEL_UP
 (() 0x0 << 13)

1212 
	#AT91C_TC_WAVESEL_UPDOWN
 (() 0x1 << 13)

1213 
	#AT91C_TC_WAVESEL_UP_AUTO
 (() 0x2 << 13)

1214 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (() 0x3 << 13)

1215 
	#AT91C_TC_CPCTRG
 (() 0x1 << 14)

1216 
	#AT91C_TC_WAVE
 (() 0x1 << 15)

1217 
	#AT91C_TC_ACPA
 (() 0x3 << 16)

1218 
	#AT91C_TC_ACPA_NONE
 (() 0x0 << 16)

1219 
	#AT91C_TC_ACPA_SET
 (() 0x1 << 16)

1220 
	#AT91C_TC_ACPA_CLEAR
 (() 0x2 << 16)

1221 
	#AT91C_TC_ACPA_TOGGLE
 (() 0x3 << 16)

1222 
	#AT91C_TC_LDRA
 (() 0x3 << 16)

1223 
	#AT91C_TC_LDRA_NONE
 (() 0x0 << 16)

1224 
	#AT91C_TC_LDRA_RISING
 (() 0x1 << 16)

1225 
	#AT91C_TC_LDRA_FALLING
 (() 0x2 << 16)

1226 
	#AT91C_TC_LDRA_BOTH
 (() 0x3 << 16)

1227 
	#AT91C_TC_ACPC
 (() 0x3 << 18)

1228 
	#AT91C_TC_ACPC_NONE
 (() 0x0 << 18)

1229 
	#AT91C_TC_ACPC_SET
 (() 0x1 << 18)

1230 
	#AT91C_TC_ACPC_CLEAR
 (() 0x2 << 18)

1231 
	#AT91C_TC_ACPC_TOGGLE
 (() 0x3 << 18)

1232 
	#AT91C_TC_LDRB
 (() 0x3 << 18)

1233 
	#AT91C_TC_LDRB_NONE
 (() 0x0 << 18)

1234 
	#AT91C_TC_LDRB_RISING
 (() 0x1 << 18)

1235 
	#AT91C_TC_LDRB_FALLING
 (() 0x2 << 18)

1236 
	#AT91C_TC_LDRB_BOTH
 (() 0x3 << 18)

1237 
	#AT91C_TC_AEEVT
 (() 0x3 << 20)

1238 
	#AT91C_TC_AEEVT_NONE
 (() 0x0 << 20)

1239 
	#AT91C_TC_AEEVT_SET
 (() 0x1 << 20)

1240 
	#AT91C_TC_AEEVT_CLEAR
 (() 0x2 << 20)

1241 
	#AT91C_TC_AEEVT_TOGGLE
 (() 0x3 << 20)

1242 
	#AT91C_TC_ASWTRG
 (() 0x3 << 22)

1243 
	#AT91C_TC_ASWTRG_NONE
 (() 0x0 << 22)

1244 
	#AT91C_TC_ASWTRG_SET
 (() 0x1 << 22)

1245 
	#AT91C_TC_ASWTRG_CLEAR
 (() 0x2 << 22)

1246 
	#AT91C_TC_ASWTRG_TOGGLE
 (() 0x3 << 22)

1247 
	#AT91C_TC_BCPB
 (() 0x3 << 24)

1248 
	#AT91C_TC_BCPB_NONE
 (() 0x0 << 24)

1249 
	#AT91C_TC_BCPB_SET
 (() 0x1 << 24)

1250 
	#AT91C_TC_BCPB_CLEAR
 (() 0x2 << 24)

1251 
	#AT91C_TC_BCPB_TOGGLE
 (() 0x3 << 24)

1252 
	#AT91C_TC_BCPC
 (() 0x3 << 26)

1253 
	#AT91C_TC_BCPC_NONE
 (() 0x0 << 26)

1254 
	#AT91C_TC_BCPC_SET
 (() 0x1 << 26)

1255 
	#AT91C_TC_BCPC_CLEAR
 (() 0x2 << 26)

1256 
	#AT91C_TC_BCPC_TOGGLE
 (() 0x3 << 26)

1257 
	#AT91C_TC_BEEVT
 (() 0x3 << 28)

1258 
	#AT91C_TC_BEEVT_NONE
 (() 0x0 << 28)

1259 
	#AT91C_TC_BEEVT_SET
 (() 0x1 << 28)

1260 
	#AT91C_TC_BEEVT_CLEAR
 (() 0x2 << 28)

1261 
	#AT91C_TC_BEEVT_TOGGLE
 (() 0x3 << 28)

1262 
	#AT91C_TC_BSWTRG
 (() 0x3 << 30)

1263 
	#AT91C_TC_BSWTRG_NONE
 (() 0x0 << 30)

1264 
	#AT91C_TC_BSWTRG_SET
 (() 0x1 << 30)

1265 
	#AT91C_TC_BSWTRG_CLEAR
 (() 0x2 << 30)

1266 
	#AT91C_TC_BSWTRG_TOGGLE
 (() 0x3 << 30)

1268 
	#AT91C_TC_COVFS
 (() 0x1 << 0)

1269 
	#AT91C_TC_LOVRS
 (() 0x1 << 1)

1270 
	#AT91C_TC_CPAS
 (() 0x1 << 2)

1271 
	#AT91C_TC_CPBS
 (() 0x1 << 3)

1272 
	#AT91C_TC_CPCS
 (() 0x1 << 4)

1273 
	#AT91C_TC_LDRAS
 (() 0x1 << 5)

1274 
	#AT91C_TC_LDRBS
 (() 0x1 << 6)

1275 
	#AT91C_TC_ETRGS
 (() 0x1 << 7)

1276 
	#AT91C_TC_CLKSTA
 (() 0x1 << 16)

1277 
	#AT91C_TC_MTIOA
 (() 0x1 << 17)

1278 
	#AT91C_TC_MTIOB
 (() 0x1 << 18)

1282 

	)

1286 
	s_AT91S_TCB
 {

1287 
AT91S_TC
 
	mTCB_TC0
;

1288 
AT91_REG
 
	mRe£rved0
[4];

1289 
AT91S_TC
 
	mTCB_TC1
;

1290 
AT91_REG
 
	mRe£rved1
[4];

1291 
AT91S_TC
 
	mTCB_TC2
;

1292 
AT91_REG
 
	mRe£rved2
[4];

1293 
AT91_REG
 
	mTCB_BCR
;

1294 
AT91_REG
 
	mTCB_BMR
;

1295 } 
	tAT91S_TCB
, *
	tAT91PS_TCB
;

1298 
	#AT91C_TCB_SYNC
 (() 0x1 << 0)

1300 
	#AT91C_TCB_TC0XC0S
 (() 0x3 << 0)

1301 
	#AT91C_TCB_TC0XC0S_TCLK0
 (() 0x0)

1302 
	#AT91C_TCB_TC0XC0S_NONE
 (() 0x1)

1303 
	#AT91C_TCB_TC0XC0S_TIOA1
 (() 0x2)

1304 
	#AT91C_TCB_TC0XC0S_TIOA2
 (() 0x3)

1305 
	#AT91C_TCB_TC1XC1S
 (() 0x3 << 2)

1306 
	#AT91C_TCB_TC1XC1S_TCLK1
 (() 0x0 << 2)

1307 
	#AT91C_TCB_TC1XC1S_NONE
 (() 0x1 << 2)

1308 
	#AT91C_TCB_TC1XC1S_TIOA0
 (() 0x2 << 2)

1309 
	#AT91C_TCB_TC1XC1S_TIOA2
 (() 0x3 << 2)

1310 
	#AT91C_TCB_TC2XC2S
 (() 0x3 << 4)

1311 
	#AT91C_TCB_TC2XC2S_TCLK2
 (() 0x0 << 4)

1312 
	#AT91C_TCB_TC2XC2S_NONE
 (() 0x1 << 4)

1313 
	#AT91C_TCB_TC2XC2S_TIOA0
 (() 0x2 << 4)

1314 
	#AT91C_TCB_TC2XC2S_TIOA1
 (() 0x3 << 4)

1315 

	)

1319 
	s_AT91S_CAN_MB
 {

1320 
AT91_REG
 
	mCAN_MB_MMR
;

1321 
AT91_REG
 
	mCAN_MB_MAM
;

1322 
AT91_REG
 
	mCAN_MB_MID
;

1323 
AT91_REG
 
	mCAN_MB_MFID
;

1324 
AT91_REG
 
	mCAN_MB_MSR
;

1325 
AT91_REG
 
	mCAN_MB_MDL
;

1326 
AT91_REG
 
	mCAN_MB_MDH
;

1327 
AT91_REG
 
	mCAN_MB_MCR
;

1328 } 
	tAT91S_CAN_MB
, *
	tAT91PS_CAN_MB
;

1331 
	#AT91C_CAN_MTIMEMARK
 (() 0xFFFF << 0)

1332 
	#AT91C_CAN_PRIOR
 (() 0xF << 16)

1333 
	#AT91C_CAN_MOT
 (() 0x7 << 24)

1334 
	#AT91C_CAN_MOT_DIS
 (() 0x0 << 24)

1335 
	#AT91C_CAN_MOT_RX
 (() 0x1 << 24)

1336 
	#AT91C_CAN_MOT_RXOVERWRITE
 (() 0x2 << 24)

1337 
	#AT91C_CAN_MOT_TX
 (() 0x3 << 24)

1338 
	#AT91C_CAN_MOT_CONSUMER
 (() 0x4 << 24)

1339 
	#AT91C_CAN_MOT_PRODUCER
 (() 0x5 << 24)

1341 
	#AT91C_CAN_MIDvB
 (() 0x3FFFF << 0)

1342 
	#AT91C_CAN_MIDvA
 (() 0x7FF << 18)

1343 
	#AT91C_CAN_MIDE
 (() 0x1 << 29)

1347 
	#AT91C_CAN_MTIMESTAMP
 (() 0xFFFF << 0)

1348 
	#AT91C_CAN_MDLC
 (() 0xF << 16)

1349 
	#AT91C_CAN_MRTR
 (() 0x1 << 20)

1350 
	#AT91C_CAN_MABT
 (() 0x1 << 22)

1351 
	#AT91C_CAN_MRDY
 (() 0x1 << 23)

1352 
	#AT91C_CAN_MMI
 (() 0x1 << 24)

1356 
	#AT91C_CAN_MACR
 (() 0x1 << 22)

1357 
	#AT91C_CAN_MTCR
 (() 0x1 << 23)

1358 

	)

1362 
	s_AT91S_CAN
 {

1363 
AT91_REG
 
	mCAN_MR
;

1364 
AT91_REG
 
	mCAN_IER
;

1365 
AT91_REG
 
	mCAN_IDR
;

1366 
AT91_REG
 
	mCAN_IMR
;

1367 
AT91_REG
 
	mCAN_SR
;

1368 
AT91_REG
 
	mCAN_BR
;

1369 
AT91_REG
 
	mCAN_TIM
;

1370 
AT91_REG
 
	mCAN_TIMESTP
;

1371 
AT91_REG
 
	mCAN_ECR
;

1372 
AT91_REG
 
	mCAN_TCR
;

1373 
AT91_REG
 
	mCAN_ACR
;

1374 
AT91_REG
 
	mRe£rved0
[52];

1375 
AT91_REG
 
	mCAN_VR
;

1376 
AT91_REG
 
	mRe£rved1
[64];

1377 
AT91S_CAN_MB
 
	mCAN_MB0
;

1378 
AT91S_CAN_MB
 
	mCAN_MB1
;

1379 
AT91S_CAN_MB
 
	mCAN_MB2
;

1380 
AT91S_CAN_MB
 
	mCAN_MB3
;

1381 
AT91S_CAN_MB
 
	mCAN_MB4
;

1382 
AT91S_CAN_MB
 
	mCAN_MB5
;

1383 
AT91S_CAN_MB
 
	mCAN_MB6
;

1384 
AT91S_CAN_MB
 
	mCAN_MB7
;

1385 
AT91S_CAN_MB
 
	mCAN_MB8
;

1386 
AT91S_CAN_MB
 
	mCAN_MB9
;

1387 
AT91S_CAN_MB
 
	mCAN_MB10
;

1388 
AT91S_CAN_MB
 
	mCAN_MB11
;

1389 
AT91S_CAN_MB
 
	mCAN_MB12
;

1390 
AT91S_CAN_MB
 
	mCAN_MB13
;

1391 
AT91S_CAN_MB
 
	mCAN_MB14
;

1392 
AT91S_CAN_MB
 
	mCAN_MB15
;

1393 } 
	tAT91S_CAN
, *
	tAT91PS_CAN
;

1396 
	#AT91C_CAN_CANEN
 (() 0x1 << 0)

1397 
	#AT91C_CAN_LPM
 (() 0x1 << 1)

1398 
	#AT91C_CAN_ABM
 (() 0x1 << 2)

1399 
	#AT91C_CAN_OVL
 (() 0x1 << 3)

1400 
	#AT91C_CAN_TEOF
 (() 0x1 << 4)

1401 
	#AT91C_CAN_TTM
 (() 0x1 << 5)

1402 
	#AT91C_CAN_TIMFRZ
 (() 0x1 << 6)

1403 
	#AT91C_CAN_DRPT
 (() 0x1 << 7)

1405 
	#AT91C_CAN_MB0
 (() 0x1 << 0)

1406 
	#AT91C_CAN_MB1
 (() 0x1 << 1)

1407 
	#AT91C_CAN_MB2
 (() 0x1 << 2)

1408 
	#AT91C_CAN_MB3
 (() 0x1 << 3)

1409 
	#AT91C_CAN_MB4
 (() 0x1 << 4)

1410 
	#AT91C_CAN_MB5
 (() 0x1 << 5)

1411 
	#AT91C_CAN_MB6
 (() 0x1 << 6)

1412 
	#AT91C_CAN_MB7
 (() 0x1 << 7)

1413 
	#AT91C_CAN_MB8
 (() 0x1 << 8)

1414 
	#AT91C_CAN_MB9
 (() 0x1 << 9)

1415 
	#AT91C_CAN_MB10
 (() 0x1 << 10)

1416 
	#AT91C_CAN_MB11
 (() 0x1 << 11)

1417 
	#AT91C_CAN_MB12
 (() 0x1 << 12)

1418 
	#AT91C_CAN_MB13
 (() 0x1 << 13)

1419 
	#AT91C_CAN_MB14
 (() 0x1 << 14)

1420 
	#AT91C_CAN_MB15
 (() 0x1 << 15)

1421 
	#AT91C_CAN_ERRA
 (() 0x1 << 16)

1422 
	#AT91C_CAN_WARN
 (() 0x1 << 17)

1423 
	#AT91C_CAN_ERRP
 (() 0x1 << 18)

1424 
	#AT91C_CAN_BOFF
 (() 0x1 << 19)

1425 
	#AT91C_CAN_SLEEP
 (() 0x1 << 20)

1426 
	#AT91C_CAN_WAKEUP
 (() 0x1 << 21)

1427 
	#AT91C_CAN_TOVF
 (() 0x1 << 22)

1428 
	#AT91C_CAN_TSTP
 (() 0x1 << 23)

1429 
	#AT91C_CAN_CERR
 (() 0x1 << 24)

1430 
	#AT91C_CAN_SERR
 (() 0x1 << 25)

1431 
	#AT91C_CAN_AERR
 (() 0x1 << 26)

1432 
	#AT91C_CAN_FERR
 (() 0x1 << 27)

1433 
	#AT91C_CAN_BERR
 (() 0x1 << 28)

1437 
	#AT91C_CAN_RBSY
 (() 0x1 << 29)

1438 
	#AT91C_CAN_TBSY
 (() 0x1 << 30)

1439 
	#AT91C_CAN_OVLY
 (() 0x1 << 31)

1441 
	#AT91C_CAN_PHASE2
 (() 0x7 << 0)

1442 
	#AT91C_CAN_PHASE1
 (() 0x7 << 4)

1443 
	#AT91C_CAN_PROPAG
 (() 0x7 << 8)

1444 
	#AT91C_CAN_SYNC
 (() 0x3 << 12)

1445 
	#AT91C_CAN_BRP
 (() 0x7F << 16)

1446 
	#AT91C_CAN_SMP
 (() 0x1 << 24)

1448 
	#AT91C_CAN_TIMER
 (() 0xFFFF << 0)

1451 
	#AT91C_CAN_REC
 (() 0xFF << 0)

1452 
	#AT91C_CAN_TEC
 (() 0xFF << 16)

1454 
	#AT91C_CAN_TIMRST
 (() 0x1 << 31)

1456 

	)

1460 
	s_AT91S_EMAC
 {

1461 
AT91_REG
 
	mEMAC_NCR
;

1462 
AT91_REG
 
	mEMAC_NCFGR
;

1463 
AT91_REG
 
	mEMAC_NSR
;

1464 
AT91_REG
 
	mRe£rved0
[2];

1465 
AT91_REG
 
	mEMAC_TSR
;

1466 
AT91_REG
 
	mEMAC_RBQP
;

1467 
AT91_REG
 
	mEMAC_TBQP
;

1468 
AT91_REG
 
	mEMAC_RSR
;

1469 
AT91_REG
 
	mEMAC_ISR
;

1470 
AT91_REG
 
	mEMAC_IER
;

1471 
AT91_REG
 
	mEMAC_IDR
;

1472 
AT91_REG
 
	mEMAC_IMR
;

1473 
AT91_REG
 
	mEMAC_MAN
;

1474 
AT91_REG
 
	mEMAC_PTR
;

1475 
AT91_REG
 
	mEMAC_PFR
;

1476 
AT91_REG
 
	mEMAC_FTO
;

1477 
AT91_REG
 
	mEMAC_SCF
;

1478 
AT91_REG
 
	mEMAC_MCF
;

1479 
AT91_REG
 
	mEMAC_FRO
;

1480 
AT91_REG
 
	mEMAC_FCSE
;

1481 
AT91_REG
 
	mEMAC_ALE
;

1482 
AT91_REG
 
	mEMAC_DTF
;

1483 
AT91_REG
 
	mEMAC_LCOL
;

1484 
AT91_REG
 
	mEMAC_ECOL
;

1485 
AT91_REG
 
	mEMAC_TUND
;

1486 
AT91_REG
 
	mEMAC_CSE
;

1487 
AT91_REG
 
	mEMAC_RRE
;

1488 
AT91_REG
 
	mEMAC_ROV
;

1489 
AT91_REG
 
	mEMAC_RSE
;

1490 
AT91_REG
 
	mEMAC_ELE
;

1491 
AT91_REG
 
	mEMAC_RJA
;

1492 
AT91_REG
 
	mEMAC_USF
;

1493 
AT91_REG
 
	mEMAC_STE
;

1494 
AT91_REG
 
	mEMAC_RLE
;

1495 
AT91_REG
 
	mEMAC_TPF
;

1496 
AT91_REG
 
	mEMAC_HRB
;

1497 
AT91_REG
 
	mEMAC_HRT
;

1498 
AT91_REG
 
	mEMAC_SA1L
;

1499 
AT91_REG
 
	mEMAC_SA1H
;

1500 
AT91_REG
 
	mEMAC_SA2L
;

1501 
AT91_REG
 
	mEMAC_SA2H
;

1502 
AT91_REG
 
	mEMAC_SA3L
;

1503 
AT91_REG
 
	mEMAC_SA3H
;

1504 
AT91_REG
 
	mEMAC_SA4L
;

1505 
AT91_REG
 
	mEMAC_SA4H
;

1506 
AT91_REG
 
	mEMAC_TID
;

1507 
AT91_REG
 
	mEMAC_TPQ
;

1508 
AT91_REG
 
	mEMAC_USRIO
;

1509 
AT91_REG
 
	mEMAC_WOL
;

1510 
AT91_REG
 
	mRe£rved1
[13];

1511 
AT91_REG
 
	mEMAC_REV
;

1512 } 
	tAT91S_EMAC
, *
	tAT91PS_EMAC
;

1515 
	#AT91C_EMAC_LB
 (() 0x1 << 0)

1516 
	#AT91C_EMAC_LLB
 (() 0x1 << 1)

1517 
	#AT91C_EMAC_RE
 (() 0x1 << 2)

1518 
	#AT91C_EMAC_TE
 (() 0x1 << 3)

1519 
	#AT91C_EMAC_MPE
 (() 0x1 << 4)

1520 
	#AT91C_EMAC_CLRSTAT
 (() 0x1 << 5)

1521 
	#AT91C_EMAC_INCSTAT
 (() 0x1 << 6)

1522 
	#AT91C_EMAC_WESTAT
 (() 0x1 << 7)

1523 
	#AT91C_EMAC_BP
 (() 0x1 << 8)

1524 
	#AT91C_EMAC_TSTART
 (() 0x1 << 9)

1525 
	#AT91C_EMAC_THALT
 (() 0x1 << 10)

1526 
	#AT91C_EMAC_TPFR
 (() 0x1 << 11)

1527 
	#AT91C_EMAC_TZQ
 (() 0x1 << 12)

1529 
	#AT91C_EMAC_SPD
 (() 0x1 << 0)

1530 
	#AT91C_EMAC_FD
 (() 0x1 << 1)

1531 
	#AT91C_EMAC_JFRAME
 (() 0x1 << 3)

1532 
	#AT91C_EMAC_CAF
 (() 0x1 << 4)

1533 
	#AT91C_EMAC_NBC
 (() 0x1 << 5)

1534 
	#AT91C_EMAC_MTI
 (() 0x1 << 6)

1535 
	#AT91C_EMAC_UNI
 (() 0x1 << 7)

1536 
	#AT91C_EMAC_BIG
 (() 0x1 << 8)

1537 
	#AT91C_EMAC_EAE
 (() 0x1 << 9)

1538 
	#AT91C_EMAC_CLK
 (() 0x3 << 10)

1539 
	#AT91C_EMAC_CLK_HCLK_8
 (() 0x0 << 10)

1540 
	#AT91C_EMAC_CLK_HCLK_16
 (() 0x1 << 10)

1541 
	#AT91C_EMAC_CLK_HCLK_32
 (() 0x2 << 10)

1542 
	#AT91C_EMAC_CLK_HCLK_64
 (() 0x3 << 10)

1543 
	#AT91C_EMAC_RTY
 (() 0x1 << 12)

1544 
	#AT91C_EMAC_PAE
 (() 0x1 << 13)

1545 
	#AT91C_EMAC_RBOF
 (() 0x3 << 14)

1546 
	#AT91C_EMAC_RBOF_OFFSET_0
 (() 0x0 << 14)

1547 
	#AT91C_EMAC_RBOF_OFFSET_1
 (() 0x1 << 14)

1548 
	#AT91C_EMAC_RBOF_OFFSET_2
 (() 0x2 << 14)

1549 
	#AT91C_EMAC_RBOF_OFFSET_3
 (() 0x3 << 14)

1550 
	#AT91C_EMAC_RLCE
 (() 0x1 << 16)

1551 
	#AT91C_EMAC_DRFCS
 (() 0x1 << 17)

1552 
	#AT91C_EMAC_EFRHD
 (() 0x1 << 18)

1553 
	#AT91C_EMAC_IRXFCS
 (() 0x1 << 19)

1555 
	#AT91C_EMAC_LINKR
 (() 0x1 << 0)

1556 
	#AT91C_EMAC_MDIO
 (() 0x1 << 1)

1557 
	#AT91C_EMAC_IDLE
 (() 0x1 << 2)

1559 
	#AT91C_EMAC_UBR
 (() 0x1 << 0)

1560 
	#AT91C_EMAC_COL
 (() 0x1 << 1)

1561 
	#AT91C_EMAC_RLES
 (() 0x1 << 2)

1562 
	#AT91C_EMAC_TGO
 (() 0x1 << 3)

1563 
	#AT91C_EMAC_BEX
 (() 0x1 << 4)

1564 
	#AT91C_EMAC_COMP
 (() 0x1 << 5)

1565 
	#AT91C_EMAC_UND
 (() 0x1 << 6)

1567 
	#AT91C_EMAC_BNA
 (() 0x1 << 0)

1568 
	#AT91C_EMAC_REC
 (() 0x1 << 1)

1569 
	#AT91C_EMAC_OVR
 (() 0x1 << 2)

1571 
	#AT91C_EMAC_MFD
 (() 0x1 << 0)

1572 
	#AT91C_EMAC_RCOMP
 (() 0x1 << 1)

1573 
	#AT91C_EMAC_RXUBR
 (() 0x1 << 2)

1574 
	#AT91C_EMAC_TXUBR
 (() 0x1 << 3)

1575 
	#AT91C_EMAC_TUNDR
 (() 0x1 << 4)

1576 
	#AT91C_EMAC_RLEX
 (() 0x1 << 5)

1577 
	#AT91C_EMAC_TXERR
 (() 0x1 << 6)

1578 
	#AT91C_EMAC_TCOMP
 (() 0x1 << 7)

1579 
	#AT91C_EMAC_LINK
 (() 0x1 << 9)

1580 
	#AT91C_EMAC_ROVR
 (() 0x1 << 10)

1581 
	#AT91C_EMAC_HRESP
 (() 0x1 << 11)

1582 
	#AT91C_EMAC_PFRE
 (() 0x1 << 12)

1583 
	#AT91C_EMAC_PTZ
 (() 0x1 << 13)

1588 
	#AT91C_EMAC_DATA
 (() 0xFFFF << 0)

1589 
	#AT91C_EMAC_CODE
 (() 0x3 << 16)

1590 
	#AT91C_EMAC_REGA
 (() 0x1F << 18)

1591 
	#AT91C_EMAC_PHYA
 (() 0x1F << 23)

1592 
	#AT91C_EMAC_RW
 (() 0x3 << 28)

1593 
	#AT91C_EMAC_SOF
 (() 0x3 << 30)

1595 
	#AT91C_EMAC_RMII
 (() 0x1 << 0)

1597 
	#AT91C_EMAC_IP
 (() 0xFFFF << 0)

1598 
	#AT91C_EMAC_MAG
 (() 0x1 << 16)

1599 
	#AT91C_EMAC_ARP
 (() 0x1 << 17)

1600 
	#AT91C_EMAC_SA1
 (() 0x1 << 18)

1602 
	#AT91C_EMAC_REVREF
 (() 0xFFFF << 0)

1603 
	#AT91C_EMAC_PARTREF
 (() 0xFFFF << 16)

1604 

	)

1608 
	s_AT91S_ADC
 {

1609 
AT91_REG
 
	mADC_CR
;

1610 
AT91_REG
 
	mADC_MR
;

1611 
AT91_REG
 
	mRe£rved0
[2];

1612 
AT91_REG
 
	mADC_CHER
;

1613 
AT91_REG
 
	mADC_CHDR
;

1614 
AT91_REG
 
	mADC_CHSR
;

1615 
AT91_REG
 
	mADC_SR
;

1616 
AT91_REG
 
	mADC_LCDR
;

1617 
AT91_REG
 
	mADC_IER
;

1618 
AT91_REG
 
	mADC_IDR
;

1619 
AT91_REG
 
	mADC_IMR
;

1620 
AT91_REG
 
	mADC_CDR0
;

1621 
AT91_REG
 
	mADC_CDR1
;

1622 
AT91_REG
 
	mADC_CDR2
;

1623 
AT91_REG
 
	mADC_CDR3
;

1624 
AT91_REG
 
	mADC_CDR4
;

1625 
AT91_REG
 
	mADC_CDR5
;

1626 
AT91_REG
 
	mADC_CDR6
;

1627 
AT91_REG
 
	mADC_CDR7
;

1628 
AT91_REG
 
	mRe£rved1
[44];

1629 
AT91_REG
 
	mADC_RPR
;

1630 
AT91_REG
 
	mADC_RCR
;

1631 
AT91_REG
 
	mADC_TPR
;

1632 
AT91_REG
 
	mADC_TCR
;

1633 
AT91_REG
 
	mADC_RNPR
;

1634 
AT91_REG
 
	mADC_RNCR
;

1635 
AT91_REG
 
	mADC_TNPR
;

1636 
AT91_REG
 
	mADC_TNCR
;

1637 
AT91_REG
 
	mADC_PTCR
;

1638 
AT91_REG
 
	mADC_PTSR
;

1639 } 
	tAT91S_ADC
, *
	tAT91PS_ADC
;

1642 
	#AT91C_ADC_SWRST
 (() 0x1 << 0)

1643 
	#AT91C_ADC_START
 (() 0x1 << 1)

1645 
	#AT91C_ADC_TRGEN
 (() 0x1 << 0)

1646 
	#AT91C_ADC_TRGEN_DIS
 (() 0x0)

1647 
	#AT91C_ADC_TRGEN_EN
 (() 0x1)

1648 
	#AT91C_ADC_TRGSEL
 (() 0x7 << 1)

1649 
	#AT91C_ADC_TRGSEL_TIOA0
 (() 0x0 << 1)

1650 
	#AT91C_ADC_TRGSEL_TIOA1
 (() 0x1 << 1)

1651 
	#AT91C_ADC_TRGSEL_TIOA2
 (() 0x2 << 1)

1652 
	#AT91C_ADC_TRGSEL_TIOA3
 (() 0x3 << 1)

1653 
	#AT91C_ADC_TRGSEL_TIOA4
 (() 0x4 << 1)

1654 
	#AT91C_ADC_TRGSEL_TIOA5
 (() 0x5 << 1)

1655 
	#AT91C_ADC_TRGSEL_EXT
 (() 0x6 << 1)

1656 
	#AT91C_ADC_LOWRES
 (() 0x1 << 4)

1657 
	#AT91C_ADC_LOWRES_10_BIT
 (() 0x0 << 4)

1658 
	#AT91C_ADC_LOWRES_8_BIT
 (() 0x1 << 4)

1659 
	#AT91C_ADC_SLEEP
 (() 0x1 << 5)

1660 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (() 0x0 << 5)

1661 
	#AT91C_ADC_SLEEP_MODE
 (() 0x1 << 5)

1662 
	#AT91C_ADC_PRESCAL
 (() 0x3F << 8)

1663 
	#AT91C_ADC_STARTUP
 (() 0x1F << 16)

1664 
	#AT91C_ADC_SHTIM
 (() 0xF << 24)

1666 
	#AT91C_ADC_CH0
 (() 0x1 << 0)

1667 
	#AT91C_ADC_CH1
 (() 0x1 << 1)

1668 
	#AT91C_ADC_CH2
 (() 0x1 << 2)

1669 
	#AT91C_ADC_CH3
 (() 0x1 << 3)

1670 
	#AT91C_ADC_CH4
 (() 0x1 << 4)

1671 
	#AT91C_ADC_CH5
 (() 0x1 << 5)

1672 
	#AT91C_ADC_CH6
 (() 0x1 << 6)

1673 
	#AT91C_ADC_CH7
 (() 0x1 << 7)

1677 
	#AT91C_ADC_EOC0
 (() 0x1 << 0)

1678 
	#AT91C_ADC_EOC1
 (() 0x1 << 1)

1679 
	#AT91C_ADC_EOC2
 (() 0x1 << 2)

1680 
	#AT91C_ADC_EOC3
 (() 0x1 << 3)

1681 
	#AT91C_ADC_EOC4
 (() 0x1 << 4)

1682 
	#AT91C_ADC_EOC5
 (() 0x1 << 5)

1683 
	#AT91C_ADC_EOC6
 (() 0x1 << 6)

1684 
	#AT91C_ADC_EOC7
 (() 0x1 << 7)

1685 
	#AT91C_ADC_OVRE0
 (() 0x1 << 8)

1686 
	#AT91C_ADC_OVRE1
 (() 0x1 << 9)

1687 
	#AT91C_ADC_OVRE2
 (() 0x1 << 10)

1688 
	#AT91C_ADC_OVRE3
 (() 0x1 << 11)

1689 
	#AT91C_ADC_OVRE4
 (() 0x1 << 12)

1690 
	#AT91C_ADC_OVRE5
 (() 0x1 << 13)

1691 
	#AT91C_ADC_OVRE6
 (() 0x1 << 14)

1692 
	#AT91C_ADC_OVRE7
 (() 0x1 << 15)

1693 
	#AT91C_ADC_DRDY
 (() 0x1 << 16)

1694 
	#AT91C_ADC_GOVRE
 (() 0x1 << 17)

1695 
	#AT91C_ADC_ENDRX
 (() 0x1 << 18)

1696 
	#AT91C_ADC_RXBUFF
 (() 0x1 << 19)

1698 
	#AT91C_ADC_LDATA
 (() 0x3FF << 0)

1703 
	#AT91C_ADC_DATA
 (() 0x3FF << 0)

1711 

	)

1715 
	s_AT91S_AES
 {

1716 
AT91_REG
 
	mAES_CR
;

1717 
AT91_REG
 
	mAES_MR
;

1718 
AT91_REG
 
	mRe£rved0
[2];

1719 
AT91_REG
 
	mAES_IER
;

1720 
AT91_REG
 
	mAES_IDR
;

1721 
AT91_REG
 
	mAES_IMR
;

1722 
AT91_REG
 
	mAES_ISR
;

1723 
AT91_REG
 
	mAES_KEYWxR
[4];

1724 
AT91_REG
 
	mRe£rved1
[4];

1725 
AT91_REG
 
	mAES_IDATAxR
[4];

1726 
AT91_REG
 
	mAES_ODATAxR
[4];

1727 
AT91_REG
 
	mAES_IVxR
[4];

1728 
AT91_REG
 
	mRe£rved2
[35];

1729 
AT91_REG
 
	mAES_VR
;

1730 
AT91_REG
 
	mAES_RPR
;

1731 
AT91_REG
 
	mAES_RCR
;

1732 
AT91_REG
 
	mAES_TPR
;

1733 
AT91_REG
 
	mAES_TCR
;

1734 
AT91_REG
 
	mAES_RNPR
;

1735 
AT91_REG
 
	mAES_RNCR
;

1736 
AT91_REG
 
	mAES_TNPR
;

1737 
AT91_REG
 
	mAES_TNCR
;

1738 
AT91_REG
 
	mAES_PTCR
;

1739 
AT91_REG
 
	mAES_PTSR
;

1740 } 
	tAT91S_AES
, *
	tAT91PS_AES
;

1743 
	#AT91C_AES_START
 (() 0x1 << 0)

1744 
	#AT91C_AES_SWRST
 (() 0x1 << 8)

1745 
	#AT91C_AES_LOADSEED
 (() 0x1 << 16)

1747 
	#AT91C_AES_CIPHER
 (() 0x1 << 0)

1748 
	#AT91C_AES_PROCDLY
 (() 0xF << 4)

1749 
	#AT91C_AES_SMOD
 (() 0x3 << 8)

1750 
	#AT91C_AES_SMOD_MANUAL
 (() 0x0 << 8)

1751 
	#AT91C_AES_SMOD_AUTO
 (() 0x1 << 8)

1752 
	#AT91C_AES_SMOD_PDC
 (() 0x2 << 8)

1753 
	#AT91C_AES_OPMOD
 (() 0x7 << 12)

1754 
	#AT91C_AES_OPMOD_ECB
 (() 0x0 << 12)

1755 
	#AT91C_AES_OPMOD_CBC
 (() 0x1 << 12)

1756 
	#AT91C_AES_OPMOD_OFB
 (() 0x2 << 12)

1757 
	#AT91C_AES_OPMOD_CFB
 (() 0x3 << 12)

1758 
	#AT91C_AES_OPMOD_CTR
 (() 0x4 << 12)

1759 
	#AT91C_AES_LOD
 (() 0x1 << 15)

1760 
	#AT91C_AES_CFBS
 (() 0x7 << 16)

1761 
	#AT91C_AES_CFBS_128_BIT
 (() 0x0 << 16)

1762 
	#AT91C_AES_CFBS_64_BIT
 (() 0x1 << 16)

1763 
	#AT91C_AES_CFBS_32_BIT
 (() 0x2 << 16)

1764 
	#AT91C_AES_CFBS_16_BIT
 (() 0x3 << 16)

1765 
	#AT91C_AES_CFBS_8_BIT
 (() 0x4 << 16)

1766 
	#AT91C_AES_CKEY
 (() 0xF << 20)

1767 
	#AT91C_AES_CTYPE
 (() 0x1F << 24)

1768 
	#AT91C_AES_CTYPE_TYPE1_EN
 (() 0x1 << 24)

1769 
	#AT91C_AES_CTYPE_TYPE2_EN
 (() 0x2 << 24)

1770 
	#AT91C_AES_CTYPE_TYPE3_EN
 (() 0x4 << 24)

1771 
	#AT91C_AES_CTYPE_TYPE4_EN
 (() 0x8 << 24)

1772 
	#AT91C_AES_CTYPE_TYPE5_EN
 (() 0x10 << 24)

1774 
	#AT91C_AES_DATRDY
 (() 0x1 << 0)

1775 
	#AT91C_AES_ENDRX
 (() 0x1 << 1)

1776 
	#AT91C_AES_ENDTX
 (() 0x1 << 2)

1777 
	#AT91C_AES_RXBUFF
 (() 0x1 << 3)

1778 
	#AT91C_AES_TXBUFE
 (() 0x1 << 4)

1779 
	#AT91C_AES_URAD
 (() 0x1 << 8)

1783 
	#AT91C_AES_URAT
 (() 0x7 << 12)

1784 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1785 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1786 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1787 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (() 0x3 << 12)

1788 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (() 0x4 << 12)

1789 
	#AT91C_AES_URAT_WO_REG_READ
 (() 0x5 << 12)

1790 

	)

1794 
	s_AT91S_TDES
 {

1795 
AT91_REG
 
	mTDES_CR
;

1796 
AT91_REG
 
	mTDES_MR
;

1797 
AT91_REG
 
	mRe£rved0
[2];

1798 
AT91_REG
 
	mTDES_IER
;

1799 
AT91_REG
 
	mTDES_IDR
;

1800 
AT91_REG
 
	mTDES_IMR
;

1801 
AT91_REG
 
	mTDES_ISR
;

1802 
AT91_REG
 
	mTDES_KEY1WxR
[2];

1803 
AT91_REG
 
	mTDES_KEY2WxR
[2];

1804 
AT91_REG
 
	mTDES_KEY3WxR
[2];

1805 
AT91_REG
 
	mRe£rved1
[2];

1806 
AT91_REG
 
	mTDES_IDATAxR
[2];

1807 
AT91_REG
 
	mRe£rved2
[2];

1808 
AT91_REG
 
	mTDES_ODATAxR
[2];

1809 
AT91_REG
 
	mRe£rved3
[2];

1810 
AT91_REG
 
	mTDES_IVxR
[2];

1811 
AT91_REG
 
	mRe£rved4
[37];

1812 
AT91_REG
 
	mTDES_VR
;

1813 
AT91_REG
 
	mTDES_RPR
;

1814 
AT91_REG
 
	mTDES_RCR
;

1815 
AT91_REG
 
	mTDES_TPR
;

1816 
AT91_REG
 
	mTDES_TCR
;

1817 
AT91_REG
 
	mTDES_RNPR
;

1818 
AT91_REG
 
	mTDES_RNCR
;

1819 
AT91_REG
 
	mTDES_TNPR
;

1820 
AT91_REG
 
	mTDES_TNCR
;

1821 
AT91_REG
 
	mTDES_PTCR
;

1822 
AT91_REG
 
	mTDES_PTSR
;

1823 } 
	tAT91S_TDES
, *
	tAT91PS_TDES
;

1826 
	#AT91C_TDES_START
 (() 0x1 << 0)

1827 
	#AT91C_TDES_SWRST
 (() 0x1 << 8)

1829 
	#AT91C_TDES_CIPHER
 (() 0x1 << 0)

1830 
	#AT91C_TDES_TDESMOD
 (() 0x1 << 1)

1831 
	#AT91C_TDES_KEYMOD
 (() 0x1 << 4)

1832 
	#AT91C_TDES_SMOD
 (() 0x3 << 8)

1833 
	#AT91C_TDES_SMOD_MANUAL
 (() 0x0 << 8)

1834 
	#AT91C_TDES_SMOD_AUTO
 (() 0x1 << 8)

1835 
	#AT91C_TDES_SMOD_PDC
 (() 0x2 << 8)

1836 
	#AT91C_TDES_OPMOD
 (() 0x3 << 12)

1837 
	#AT91C_TDES_OPMOD_ECB
 (() 0x0 << 12)

1838 
	#AT91C_TDES_OPMOD_CBC
 (() 0x1 << 12)

1839 
	#AT91C_TDES_OPMOD_OFB
 (() 0x2 << 12)

1840 
	#AT91C_TDES_OPMOD_CFB
 (() 0x3 << 12)

1841 
	#AT91C_TDES_LOD
 (() 0x1 << 15)

1842 
	#AT91C_TDES_CFBS
 (() 0x3 << 16)

1843 
	#AT91C_TDES_CFBS_64_BIT
 (() 0x0 << 16)

1844 
	#AT91C_TDES_CFBS_32_BIT
 (() 0x1 << 16)

1845 
	#AT91C_TDES_CFBS_16_BIT
 (() 0x2 << 16)

1846 
	#AT91C_TDES_CFBS_8_BIT
 (() 0x3 << 16)

1848 
	#AT91C_TDES_DATRDY
 (() 0x1 << 0)

1849 
	#AT91C_TDES_ENDRX
 (() 0x1 << 1)

1850 
	#AT91C_TDES_ENDTX
 (() 0x1 << 2)

1851 
	#AT91C_TDES_RXBUFF
 (() 0x1 << 3)

1852 
	#AT91C_TDES_TXBUFE
 (() 0x1 << 4)

1853 
	#AT91C_TDES_URAD
 (() 0x1 << 8)

1857 
	#AT91C_TDES_URAT
 (() 0x3 << 12)

1858 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1859 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1860 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1861 
	#AT91C_TDES_URAT_WO_REG_READ
 (() 0x3 << 12)

1862 

	)

1868 
	#AT91C_AIC_IVR
 ((
AT91_REG
 *) 0xFFFFF100)

1869 
	#AT91C_AIC_SMR
 ((
AT91_REG
 *) 0xFFFFF000)

1870 
	#AT91C_AIC_FVR
 ((
AT91_REG
 *) 0xFFFFF104)

1871 
	#AT91C_AIC_DCR
 ((
AT91_REG
 *) 0xFFFFF138)

1872 
	#AT91C_AIC_EOICR
 ((
AT91_REG
 *) 0xFFFFF130)

1873 
	#AT91C_AIC_SVR
 ((
AT91_REG
 *) 0xFFFFF080)

1874 
	#AT91C_AIC_FFSR
 ((
AT91_REG
 *) 0xFFFFF148)

1875 
	#AT91C_AIC_ICCR
 ((
AT91_REG
 *) 0xFFFFF128)

1876 
	#AT91C_AIC_ISR
 ((
AT91_REG
 *) 0xFFFFF108)

1877 
	#AT91C_AIC_IMR
 ((
AT91_REG
 *) 0xFFFFF110)

1878 
	#AT91C_AIC_IPR
 ((
AT91_REG
 *) 0xFFFFF10C)

1879 
	#AT91C_AIC_FFER
 ((
AT91_REG
 *) 0xFFFFF140)

1880 
	#AT91C_AIC_IECR
 ((
AT91_REG
 *) 0xFFFFF120)

1881 
	#AT91C_AIC_ISCR
 ((
AT91_REG
 *) 0xFFFFF12C)

1882 
	#AT91C_AIC_FFDR
 ((
AT91_REG
 *) 0xFFFFF144)

1883 
	#AT91C_AIC_CISR
 ((
AT91_REG
 *) 0xFFFFF114)

1884 
	#AT91C_AIC_IDCR
 ((
AT91_REG
 *) 0xFFFFF124)

1885 
	#AT91C_AIC_SPU
 ((
AT91_REG
 *) 0xFFFFF134)

1887 
	#AT91C_DBGU_TCR
 ((
AT91_REG
 *) 0xFFFFF30C)

1888 
	#AT91C_DBGU_RNPR
 ((
AT91_REG
 *) 0xFFFFF310)

1889 
	#AT91C_DBGU_TNPR
 ((
AT91_REG
 *) 0xFFFFF318)

1890 
	#AT91C_DBGU_TPR
 ((
AT91_REG
 *) 0xFFFFF308)

1891 
	#AT91C_DBGU_RPR
 ((
AT91_REG
 *) 0xFFFFF300)

1892 
	#AT91C_DBGU_RCR
 ((
AT91_REG
 *) 0xFFFFF304)

1893 
	#AT91C_DBGU_RNCR
 ((
AT91_REG
 *) 0xFFFFF314)

1894 
	#AT91C_DBGU_PTCR
 ((
AT91_REG
 *) 0xFFFFF320)

1895 
	#AT91C_DBGU_PTSR
 ((
AT91_REG
 *) 0xFFFFF324)

1896 
	#AT91C_DBGU_TNCR
 ((
AT91_REG
 *) 0xFFFFF31C)

1898 
	#AT91C_DBGU_EXID
 ((
AT91_REG
 *) 0xFFFFF244)

1899 
	#AT91C_DBGU_BRGR
 ((
AT91_REG
 *) 0xFFFFF220)

1900 
	#AT91C_DBGU_IDR
 ((
AT91_REG
 *) 0xFFFFF20C)

1901 
	#AT91C_DBGU_CSR
 ((
AT91_REG
 *) 0xFFFFF214)

1902 
	#AT91C_DBGU_CIDR
 ((
AT91_REG
 *) 0xFFFFF240)

1903 
	#AT91C_DBGU_MR
 ((
AT91_REG
 *) 0xFFFFF204)

1904 
	#AT91C_DBGU_IMR
 ((
AT91_REG
 *) 0xFFFFF210)

1905 
	#AT91C_DBGU_CR
 ((
AT91_REG
 *) 0xFFFFF200)

1906 
	#AT91C_DBGU_FNTR
 ((
AT91_REG
 *) 0xFFFFF248)

1907 
	#AT91C_DBGU_THR
 ((
AT91_REG
 *) 0xFFFFF21C)

1908 
	#AT91C_DBGU_RHR
 ((
AT91_REG
 *) 0xFFFFF218)

1909 
	#AT91C_DBGU_IER
 ((
AT91_REG
 *) 0xFFFFF208)

1911 
	#AT91C_PIOA_ODR
 ((
AT91_REG
 *) 0xFFFFF414)

1912 
	#AT91C_PIOA_SODR
 ((
AT91_REG
 *) 0xFFFFF430)

1913 
	#AT91C_PIOA_ISR
 ((
AT91_REG
 *) 0xFFFFF44C)

1914 
	#AT91C_PIOA_ABSR
 ((
AT91_REG
 *) 0xFFFFF478)

1915 
	#AT91C_PIOA_IER
 ((
AT91_REG
 *) 0xFFFFF440)

1916 
	#AT91C_PIOA_PPUDR
 ((
AT91_REG
 *) 0xFFFFF460)

1917 
	#AT91C_PIOA_IMR
 ((
AT91_REG
 *) 0xFFFFF448)

1918 
	#AT91C_PIOA_PER
 ((
AT91_REG
 *) 0xFFFFF400)

1919 
	#AT91C_PIOA_IFDR
 ((
AT91_REG
 *) 0xFFFFF424)

1920 
	#AT91C_PIOA_OWDR
 ((
AT91_REG
 *) 0xFFFFF4A4)

1921 
	#AT91C_PIOA_MDSR
 ((
AT91_REG
 *) 0xFFFFF458)

1922 
	#AT91C_PIOA_IDR
 ((
AT91_REG
 *) 0xFFFFF444)

1923 
	#AT91C_PIOA_ODSR
 ((
AT91_REG
 *) 0xFFFFF438)

1924 
	#AT91C_PIOA_PPUSR
 ((
AT91_REG
 *) 0xFFFFF468)

1925 
	#AT91C_PIOA_OWSR
 ((
AT91_REG
 *) 0xFFFFF4A8)

1926 
	#AT91C_PIOA_BSR
 ((
AT91_REG
 *) 0xFFFFF474)

1927 
	#AT91C_PIOA_OWER
 ((
AT91_REG
 *) 0xFFFFF4A0)

1928 
	#AT91C_PIOA_IFER
 ((
AT91_REG
 *) 0xFFFFF420)

1929 
	#AT91C_PIOA_PDSR
 ((
AT91_REG
 *) 0xFFFFF43C)

1930 
	#AT91C_PIOA_PPUER
 ((
AT91_REG
 *) 0xFFFFF464)

1931 
	#AT91C_PIOA_OSR
 ((
AT91_REG
 *) 0xFFFFF418)

1932 
	#AT91C_PIOA_ASR
 ((
AT91_REG
 *) 0xFFFFF470)

1933 
	#AT91C_PIOA_MDDR
 ((
AT91_REG
 *) 0xFFFFF454)

1934 
	#AT91C_PIOA_CODR
 ((
AT91_REG
 *) 0xFFFFF434)

1935 
	#AT91C_PIOA_MDER
 ((
AT91_REG
 *) 0xFFFFF450)

1936 
	#AT91C_PIOA_PDR
 ((
AT91_REG
 *) 0xFFFFF404)

1937 
	#AT91C_PIOA_IFSR
 ((
AT91_REG
 *) 0xFFFFF428)

1938 
	#AT91C_PIOA_OER
 ((
AT91_REG
 *) 0xFFFFF410)

1939 
	#AT91C_PIOA_PSR
 ((
AT91_REG
 *) 0xFFFFF408)

1941 
	#AT91C_PIOB_OWDR
 ((
AT91_REG
 *) 0xFFFFF6A4)

1942 
	#AT91C_PIOB_MDER
 ((
AT91_REG
 *) 0xFFFFF650)

1943 
	#AT91C_PIOB_PPUSR
 ((
AT91_REG
 *) 0xFFFFF668)

1944 
	#AT91C_PIOB_IMR
 ((
AT91_REG
 *) 0xFFFFF648)

1945 
	#AT91C_PIOB_ASR
 ((
AT91_REG
 *) 0xFFFFF670)

1946 
	#AT91C_PIOB_PPUDR
 ((
AT91_REG
 *) 0xFFFFF660)

1947 
	#AT91C_PIOB_PSR
 ((
AT91_REG
 *) 0xFFFFF608)

1948 
	#AT91C_PIOB_IER
 ((
AT91_REG
 *) 0xFFFFF640)

1949 
	#AT91C_PIOB_CODR
 ((
AT91_REG
 *) 0xFFFFF634)

1950 
	#AT91C_PIOB_OWER
 ((
AT91_REG
 *) 0xFFFFF6A0)

1951 
	#AT91C_PIOB_ABSR
 ((
AT91_REG
 *) 0xFFFFF678)

1952 
	#AT91C_PIOB_IFDR
 ((
AT91_REG
 *) 0xFFFFF624)

1953 
	#AT91C_PIOB_PDSR
 ((
AT91_REG
 *) 0xFFFFF63C)

1954 
	#AT91C_PIOB_IDR
 ((
AT91_REG
 *) 0xFFFFF644)

1955 
	#AT91C_PIOB_OWSR
 ((
AT91_REG
 *) 0xFFFFF6A8)

1956 
	#AT91C_PIOB_PDR
 ((
AT91_REG
 *) 0xFFFFF604)

1957 
	#AT91C_PIOB_ODR
 ((
AT91_REG
 *) 0xFFFFF614)

1958 
	#AT91C_PIOB_IFSR
 ((
AT91_REG
 *) 0xFFFFF628)

1959 
	#AT91C_PIOB_PPUER
 ((
AT91_REG
 *) 0xFFFFF664)

1960 
	#AT91C_PIOB_SODR
 ((
AT91_REG
 *) 0xFFFFF630)

1961 
	#AT91C_PIOB_ISR
 ((
AT91_REG
 *) 0xFFFFF64C)

1962 
	#AT91C_PIOB_ODSR
 ((
AT91_REG
 *) 0xFFFFF638)

1963 
	#AT91C_PIOB_OSR
 ((
AT91_REG
 *) 0xFFFFF618)

1964 
	#AT91C_PIOB_MDSR
 ((
AT91_REG
 *) 0xFFFFF658)

1965 
	#AT91C_PIOB_IFER
 ((
AT91_REG
 *) 0xFFFFF620)

1966 
	#AT91C_PIOB_BSR
 ((
AT91_REG
 *) 0xFFFFF674)

1967 
	#AT91C_PIOB_MDDR
 ((
AT91_REG
 *) 0xFFFFF654)

1968 
	#AT91C_PIOB_OER
 ((
AT91_REG
 *) 0xFFFFF610)

1969 
	#AT91C_PIOB_PER
 ((
AT91_REG
 *) 0xFFFFF600)

1971 
	#AT91C_CKGR_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1972 
	#AT91C_CKGR_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1973 
	#AT91C_CKGR_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1975 
	#AT91C_PMC_IDR
 ((
AT91_REG
 *) 0xFFFFFC64)

1976 
	#AT91C_PMC_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1977 
	#AT91C_PMC_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1978 
	#AT91C_PMC_PCER
 ((
AT91_REG
 *) 0xFFFFFC10)

1979 
	#AT91C_PMC_PCKR
 ((
AT91_REG
 *) 0xFFFFFC40)

1980 
	#AT91C_PMC_MCKR
 ((
AT91_REG
 *) 0xFFFFFC30)

1981 
	#AT91C_PMC_SCDR
 ((
AT91_REG
 *) 0xFFFFFC04)

1982 
	#AT91C_PMC_PCDR
 ((
AT91_REG
 *) 0xFFFFFC14)

1983 
	#AT91C_PMC_SCSR
 ((
AT91_REG
 *) 0xFFFFFC08)

1984 
	#AT91C_PMC_PCSR
 ((
AT91_REG
 *) 0xFFFFFC18)

1985 
	#AT91C_PMC_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1986 
	#AT91C_PMC_SCER
 ((
AT91_REG
 *) 0xFFFFFC00)

1987 
	#AT91C_PMC_IMR
 ((
AT91_REG
 *) 0xFFFFFC6C)

1988 
	#AT91C_PMC_IER
 ((
AT91_REG
 *) 0xFFFFFC60)

1989 
	#AT91C_PMC_SR
 ((
AT91_REG
 *) 0xFFFFFC68)

1991 
	#AT91C_RSTC_RCR
 ((
AT91_REG
 *) 0xFFFFFD00)

1992 
	#AT91C_RSTC_RMR
 ((
AT91_REG
 *) 0xFFFFFD08)

1993 
	#AT91C_RSTC_RSR
 ((
AT91_REG
 *) 0xFFFFFD04)

1995 
	#AT91C_RTTC_RTSR
 ((
AT91_REG
 *) 0xFFFFFD2C)

1996 
	#AT91C_RTTC_RTMR
 ((
AT91_REG
 *) 0xFFFFFD20)

1997 
	#AT91C_RTTC_RTVR
 ((
AT91_REG
 *) 0xFFFFFD28)

1998 
	#AT91C_RTTC_RTAR
 ((
AT91_REG
 *) 0xFFFFFD24)

2000 
	#AT91C_PITC_PIVR
 ((
AT91_REG
 *) 0xFFFFFD38)

2001 
	#AT91C_PITC_PISR
 ((
AT91_REG
 *) 0xFFFFFD34)

2002 
	#AT91C_PITC_PIIR
 ((
AT91_REG
 *) 0xFFFFFD3C)

2003 
	#AT91C_PITC_PIMR
 ((
AT91_REG
 *) 0xFFFFFD30)

2005 
	#AT91C_WDTC_WDCR
 ((
AT91_REG
 *) 0xFFFFFD40)

2006 
	#AT91C_WDTC_WDSR
 ((
AT91_REG
 *) 0xFFFFFD48)

2007 
	#AT91C_WDTC_WDMR
 ((
AT91_REG
 *) 0xFFFFFD44)

2009 
	#AT91C_VREG_MR
 ((
AT91_REG
 *) 0xFFFFFD60)

2011 
	#AT91C_MC_ASR
 ((
AT91_REG
 *) 0xFFFFFF04)

2012 
	#AT91C_MC_RCR
 ((
AT91_REG
 *) 0xFFFFFF00)

2013 
	#AT91C_MC_FCR
 ((
AT91_REG
 *) 0xFFFFFF64)

2014 
	#AT91C_MC_AASR
 ((
AT91_REG
 *) 0xFFFFFF08)

2015 
	#AT91C_MC_FSR
 ((
AT91_REG
 *) 0xFFFFFF68)

2016 
	#AT91C_MC_FMR
 ((
AT91_REG
 *) 0xFFFFFF60)

2018 
	#AT91C_SPI1_PTCR
 ((
AT91_REG
 *) 0xFFFE4120)

2019 
	#AT91C_SPI1_RPR
 ((
AT91_REG
 *) 0xFFFE4100)

2020 
	#AT91C_SPI1_TNCR
 ((
AT91_REG
 *) 0xFFFE411C)

2021 
	#AT91C_SPI1_TPR
 ((
AT91_REG
 *) 0xFFFE4108)

2022 
	#AT91C_SPI1_TNPR
 ((
AT91_REG
 *) 0xFFFE4118)

2023 
	#AT91C_SPI1_TCR
 ((
AT91_REG
 *) 0xFFFE410C)

2024 
	#AT91C_SPI1_RCR
 ((
AT91_REG
 *) 0xFFFE4104)

2025 
	#AT91C_SPI1_RNPR
 ((
AT91_REG
 *) 0xFFFE4110)

2026 
	#AT91C_SPI1_RNCR
 ((
AT91_REG
 *) 0xFFFE4114)

2027 
	#AT91C_SPI1_PTSR
 ((
AT91_REG
 *) 0xFFFE4124)

2029 
	#AT91C_SPI1_IMR
 ((
AT91_REG
 *) 0xFFFE401C)

2030 
	#AT91C_SPI1_IER
 ((
AT91_REG
 *) 0xFFFE4014)

2031 
	#AT91C_SPI1_MR
 ((
AT91_REG
 *) 0xFFFE4004)

2032 
	#AT91C_SPI1_RDR
 ((
AT91_REG
 *) 0xFFFE4008)

2033 
	#AT91C_SPI1_IDR
 ((
AT91_REG
 *) 0xFFFE4018)

2034 
	#AT91C_SPI1_SR
 ((
AT91_REG
 *) 0xFFFE4010)

2035 
	#AT91C_SPI1_TDR
 ((
AT91_REG
 *) 0xFFFE400C)

2036 
	#AT91C_SPI1_CR
 ((
AT91_REG
 *) 0xFFFE4000)

2037 
	#AT91C_SPI1_CSR
 ((
AT91_REG
 *) 0xFFFE4030)

2039 
	#AT91C_SPI0_PTCR
 ((
AT91_REG
 *) 0xFFFE0120)

2040 
	#AT91C_SPI0_TPR
 ((
AT91_REG
 *) 0xFFFE0108)

2041 
	#AT91C_SPI0_TCR
 ((
AT91_REG
 *) 0xFFFE010C)

2042 
	#AT91C_SPI0_RCR
 ((
AT91_REG
 *) 0xFFFE0104)

2043 
	#AT91C_SPI0_PTSR
 ((
AT91_REG
 *) 0xFFFE0124)

2044 
	#AT91C_SPI0_RNPR
 ((
AT91_REG
 *) 0xFFFE0110)

2045 
	#AT91C_SPI0_RPR
 ((
AT91_REG
 *) 0xFFFE0100)

2046 
	#AT91C_SPI0_TNCR
 ((
AT91_REG
 *) 0xFFFE011C)

2047 
	#AT91C_SPI0_RNCR
 ((
AT91_REG
 *) 0xFFFE0114)

2048 
	#AT91C_SPI0_TNPR
 ((
AT91_REG
 *) 0xFFFE0118)

2050 
	#AT91C_SPI0_IER
 ((
AT91_REG
 *) 0xFFFE0014)

2051 
	#AT91C_SPI0_SR
 ((
AT91_REG
 *) 0xFFFE0010)

2052 
	#AT91C_SPI0_IDR
 ((
AT91_REG
 *) 0xFFFE0018)

2053 
	#AT91C_SPI0_CR
 ((
AT91_REG
 *) 0xFFFE0000)

2054 
	#AT91C_SPI0_MR
 ((
AT91_REG
 *) 0xFFFE0004)

2055 
	#AT91C_SPI0_IMR
 ((
AT91_REG
 *) 0xFFFE001C)

2056 
	#AT91C_SPI0_TDR
 ((
AT91_REG
 *) 0xFFFE000C)

2057 
	#AT91C_SPI0_RDR
 ((
AT91_REG
 *) 0xFFFE0008)

2058 
	#AT91C_SPI0_CSR
 ((
AT91_REG
 *) 0xFFFE0030)

2060 
	#AT91C_US1_RNCR
 ((
AT91_REG
 *) 0xFFFC4114)

2061 
	#AT91C_US1_PTCR
 ((
AT91_REG
 *) 0xFFFC4120)

2062 
	#AT91C_US1_TCR
 ((
AT91_REG
 *) 0xFFFC410C)

2063 
	#AT91C_US1_PTSR
 ((
AT91_REG
 *) 0xFFFC4124)

2064 
	#AT91C_US1_TNPR
 ((
AT91_REG
 *) 0xFFFC4118)

2065 
	#AT91C_US1_RCR
 ((
AT91_REG
 *) 0xFFFC4104)

2066 
	#AT91C_US1_RNPR
 ((
AT91_REG
 *) 0xFFFC4110)

2067 
	#AT91C_US1_RPR
 ((
AT91_REG
 *) 0xFFFC4100)

2068 
	#AT91C_US1_TNCR
 ((
AT91_REG
 *) 0xFFFC411C)

2069 
	#AT91C_US1_TPR
 ((
AT91_REG
 *) 0xFFFC4108)

2071 
	#AT91C_US1_IF
 ((
AT91_REG
 *) 0xFFFC404C)

2072 
	#AT91C_US1_NER
 ((
AT91_REG
 *) 0xFFFC4044)

2073 
	#AT91C_US1_RTOR
 ((
AT91_REG
 *) 0xFFFC4024)

2074 
	#AT91C_US1_CSR
 ((
AT91_REG
 *) 0xFFFC4014)

2075 
	#AT91C_US1_IDR
 ((
AT91_REG
 *) 0xFFFC400C)

2076 
	#AT91C_US1_IER
 ((
AT91_REG
 *) 0xFFFC4008)

2077 
	#AT91C_US1_THR
 ((
AT91_REG
 *) 0xFFFC401C)

2078 
	#AT91C_US1_TTGR
 ((
AT91_REG
 *) 0xFFFC4028)

2079 
	#AT91C_US1_RHR
 ((
AT91_REG
 *) 0xFFFC4018)

2080 
	#AT91C_US1_BRGR
 ((
AT91_REG
 *) 0xFFFC4020)

2081 
	#AT91C_US1_IMR
 ((
AT91_REG
 *) 0xFFFC4010)

2082 
	#AT91C_US1_FIDI
 ((
AT91_REG
 *) 0xFFFC4040)

2083 
	#AT91C_US1_CR
 ((
AT91_REG
 *) 0xFFFC4000)

2084 
	#AT91C_US1_MR
 ((
AT91_REG
 *) 0xFFFC4004)

2086 
	#AT91C_US0_TNPR
 ((
AT91_REG
 *) 0xFFFC0118)

2087 
	#AT91C_US0_RNPR
 ((
AT91_REG
 *) 0xFFFC0110)

2088 
	#AT91C_US0_TCR
 ((
AT91_REG
 *) 0xFFFC010C)

2089 
	#AT91C_US0_PTCR
 ((
AT91_REG
 *) 0xFFFC0120)

2090 
	#AT91C_US0_PTSR
 ((
AT91_REG
 *) 0xFFFC0124)

2091 
	#AT91C_US0_TNCR
 ((
AT91_REG
 *) 0xFFFC011C)

2092 
	#AT91C_US0_TPR
 ((
AT91_REG
 *) 0xFFFC0108)

2093 
	#AT91C_US0_RCR
 ((
AT91_REG
 *) 0xFFFC0104)

2094 
	#AT91C_US0_RPR
 ((
AT91_REG
 *) 0xFFFC0100)

2095 
	#AT91C_US0_RNCR
 ((
AT91_REG
 *) 0xFFFC0114)

2097 
	#AT91C_US0_BRGR
 ((
AT91_REG
 *) 0xFFFC0020)

2098 
	#AT91C_US0_NER
 ((
AT91_REG
 *) 0xFFFC0044)

2099 
	#AT91C_US0_CR
 ((
AT91_REG
 *) 0xFFFC0000)

2100 
	#AT91C_US0_IMR
 ((
AT91_REG
 *) 0xFFFC0010)

2101 
	#AT91C_US0_FIDI
 ((
AT91_REG
 *) 0xFFFC0040)

2102 
	#AT91C_US0_TTGR
 ((
AT91_REG
 *) 0xFFFC0028)

2103 
	#AT91C_US0_MR
 ((
AT91_REG
 *) 0xFFFC0004)

2104 
	#AT91C_US0_RTOR
 ((
AT91_REG
 *) 0xFFFC0024)

2105 
	#AT91C_US0_CSR
 ((
AT91_REG
 *) 0xFFFC0014)

2106 
	#AT91C_US0_RHR
 ((
AT91_REG
 *) 0xFFFC0018)

2107 
	#AT91C_US0_IDR
 ((
AT91_REG
 *) 0xFFFC000C)

2108 
	#AT91C_US0_THR
 ((
AT91_REG
 *) 0xFFFC001C)

2109 
	#AT91C_US0_IF
 ((
AT91_REG
 *) 0xFFFC004C)

2110 
	#AT91C_US0_IER
 ((
AT91_REG
 *) 0xFFFC0008)

2112 
	#AT91C_SSC_TNCR
 ((
AT91_REG
 *) 0xFFFD411C)

2113 
	#AT91C_SSC_RPR
 ((
AT91_REG
 *) 0xFFFD4100)

2114 
	#AT91C_SSC_RNCR
 ((
AT91_REG
 *) 0xFFFD4114)

2115 
	#AT91C_SSC_TPR
 ((
AT91_REG
 *) 0xFFFD4108)

2116 
	#AT91C_SSC_PTCR
 ((
AT91_REG
 *) 0xFFFD4120)

2117 
	#AT91C_SSC_TCR
 ((
AT91_REG
 *) 0xFFFD410C)

2118 
	#AT91C_SSC_RCR
 ((
AT91_REG
 *) 0xFFFD4104)

2119 
	#AT91C_SSC_RNPR
 ((
AT91_REG
 *) 0xFFFD4110)

2120 
	#AT91C_SSC_TNPR
 ((
AT91_REG
 *) 0xFFFD4118)

2121 
	#AT91C_SSC_PTSR
 ((
AT91_REG
 *) 0xFFFD4124)

2123 
	#AT91C_SSC_RHR
 ((
AT91_REG
 *) 0xFFFD4020)

2124 
	#AT91C_SSC_RSHR
 ((
AT91_REG
 *) 0xFFFD4030)

2125 
	#AT91C_SSC_TFMR
 ((
AT91_REG
 *) 0xFFFD401C)

2126 
	#AT91C_SSC_IDR
 ((
AT91_REG
 *) 0xFFFD4048)

2127 
	#AT91C_SSC_THR
 ((
AT91_REG
 *) 0xFFFD4024)

2128 
	#AT91C_SSC_RCMR
 ((
AT91_REG
 *) 0xFFFD4010)

2129 
	#AT91C_SSC_IER
 ((
AT91_REG
 *) 0xFFFD4044)

2130 
	#AT91C_SSC_TSHR
 ((
AT91_REG
 *) 0xFFFD4034)

2131 
	#AT91C_SSC_SR
 ((
AT91_REG
 *) 0xFFFD4040)

2132 
	#AT91C_SSC_CMR
 ((
AT91_REG
 *) 0xFFFD4004)

2133 
	#AT91C_SSC_TCMR
 ((
AT91_REG
 *) 0xFFFD4018)

2134 
	#AT91C_SSC_CR
 ((
AT91_REG
 *) 0xFFFD4000)

2135 
	#AT91C_SSC_IMR
 ((
AT91_REG
 *) 0xFFFD404C)

2136 
	#AT91C_SSC_RFMR
 ((
AT91_REG
 *) 0xFFFD4014)

2138 
	#AT91C_TWI_IER
 ((
AT91_REG
 *) 0xFFFB8024)

2139 
	#AT91C_TWI_CR
 ((
AT91_REG
 *) 0xFFFB8000)

2140 
	#AT91C_TWI_SR
 ((
AT91_REG
 *) 0xFFFB8020)

2141 
	#AT91C_TWI_IMR
 ((
AT91_REG
 *) 0xFFFB802C)

2142 
	#AT91C_TWI_THR
 ((
AT91_REG
 *) 0xFFFB8034)

2143 
	#AT91C_TWI_IDR
 ((
AT91_REG
 *) 0xFFFB8028)

2144 
	#AT91C_TWI_IADR
 ((
AT91_REG
 *) 0xFFFB800C)

2145 
	#AT91C_TWI_MMR
 ((
AT91_REG
 *) 0xFFFB8004)

2146 
	#AT91C_TWI_CWGR
 ((
AT91_REG
 *) 0xFFFB8010)

2147 
	#AT91C_TWI_RHR
 ((
AT91_REG
 *) 0xFFFB8030)

2149 
	#AT91C_PWMC_CH3_CUPDR
 ((
AT91_REG
 *) 0xFFFCC270)

2150 
	#AT91C_PWMC_CH3_Re£rved
 ((
AT91_REG
 *) 0xFFFCC274)

2151 
	#AT91C_PWMC_CH3_CPRDR
 ((
AT91_REG
 *) 0xFFFCC268)

2152 
	#AT91C_PWMC_CH3_CDTYR
 ((
AT91_REG
 *) 0xFFFCC264)

2153 
	#AT91C_PWMC_CH3_CCNTR
 ((
AT91_REG
 *) 0xFFFCC26C)

2154 
	#AT91C_PWMC_CH3_CMR
 ((
AT91_REG
 *) 0xFFFCC260)

2156 
	#AT91C_PWMC_CH2_Re£rved
 ((
AT91_REG
 *) 0xFFFCC254)

2157 
	#AT91C_PWMC_CH2_CMR
 ((
AT91_REG
 *) 0xFFFCC240)

2158 
	#AT91C_PWMC_CH2_CCNTR
 ((
AT91_REG
 *) 0xFFFCC24C)

2159 
	#AT91C_PWMC_CH2_CPRDR
 ((
AT91_REG
 *) 0xFFFCC248)

2160 
	#AT91C_PWMC_CH2_CUPDR
 ((
AT91_REG
 *) 0xFFFCC250)

2161 
	#AT91C_PWMC_CH2_CDTYR
 ((
AT91_REG
 *) 0xFFFCC244)

2163 
	#AT91C_PWMC_CH1_Re£rved
 ((
AT91_REG
 *) 0xFFFCC234)

2164 
	#AT91C_PWMC_CH1_CUPDR
 ((
AT91_REG
 *) 0xFFFCC230)

2165 
	#AT91C_PWMC_CH1_CPRDR
 ((
AT91_REG
 *) 0xFFFCC228)

2166 
	#AT91C_PWMC_CH1_CCNTR
 ((
AT91_REG
 *) 0xFFFCC22C)

2167 
	#AT91C_PWMC_CH1_CDTYR
 ((
AT91_REG
 *) 0xFFFCC224)

2168 
	#AT91C_PWMC_CH1_CMR
 ((
AT91_REG
 *) 0xFFFCC220)

2170 
	#AT91C_PWMC_CH0_Re£rved
 ((
AT91_REG
 *) 0xFFFCC214)

2171 
	#AT91C_PWMC_CH0_CPRDR
 ((
AT91_REG
 *) 0xFFFCC208)

2172 
	#AT91C_PWMC_CH0_CDTYR
 ((
AT91_REG
 *) 0xFFFCC204)

2173 
	#AT91C_PWMC_CH0_CMR
 ((
AT91_REG
 *) 0xFFFCC200)

2174 
	#AT91C_PWMC_CH0_CUPDR
 ((
AT91_REG
 *) 0xFFFCC210)

2175 
	#AT91C_PWMC_CH0_CCNTR
 ((
AT91_REG
 *) 0xFFFCC20C)

2177 
	#AT91C_PWMC_IDR
 ((
AT91_REG
 *) 0xFFFCC014)

2178 
	#AT91C_PWMC_DIS
 ((
AT91_REG
 *) 0xFFFCC008)

2179 
	#AT91C_PWMC_IER
 ((
AT91_REG
 *) 0xFFFCC010)

2180 
	#AT91C_PWMC_VR
 ((
AT91_REG
 *) 0xFFFCC0FC)

2181 
	#AT91C_PWMC_ISR
 ((
AT91_REG
 *) 0xFFFCC01C)

2182 
	#AT91C_PWMC_SR
 ((
AT91_REG
 *) 0xFFFCC00C)

2183 
	#AT91C_PWMC_IMR
 ((
AT91_REG
 *) 0xFFFCC018)

2184 
	#AT91C_PWMC_MR
 ((
AT91_REG
 *) 0xFFFCC000)

2185 
	#AT91C_PWMC_ENA
 ((
AT91_REG
 *) 0xFFFCC004)

2187 
	#AT91C_UDP_IMR
 ((
AT91_REG
 *) 0xFFFB0018)

2188 
	#AT91C_UDP_FADDR
 ((
AT91_REG
 *) 0xFFFB0008)

2189 
	#AT91C_UDP_NUM
 ((
AT91_REG
 *) 0xFFFB0000)

2190 
	#AT91C_UDP_FDR
 ((
AT91_REG
 *) 0xFFFB0050)

2191 
	#AT91C_UDP_ISR
 ((
AT91_REG
 *) 0xFFFB001C)

2192 
	#AT91C_UDP_CSR
 ((
AT91_REG
 *) 0xFFFB0030)

2193 
	#AT91C_UDP_IDR
 ((
AT91_REG
 *) 0xFFFB0014)

2194 
	#AT91C_UDP_ICR
 ((
AT91_REG
 *) 0xFFFB0020)

2195 
	#AT91C_UDP_RSTEP
 ((
AT91_REG
 *) 0xFFFB0028)

2196 
	#AT91C_UDP_TXVC
 ((
AT91_REG
 *) 0xFFFB0074)

2197 
	#AT91C_UDP_GLBSTATE
 ((
AT91_REG
 *) 0xFFFB0004)

2198 
	#AT91C_UDP_IER
 ((
AT91_REG
 *) 0xFFFB0010)

2200 
	#AT91C_TC0_SR
 ((
AT91_REG
 *) 0xFFFA0020)

2201 
	#AT91C_TC0_RC
 ((
AT91_REG
 *) 0xFFFA001C)

2202 
	#AT91C_TC0_RB
 ((
AT91_REG
 *) 0xFFFA0018)

2203 
	#AT91C_TC0_CCR
 ((
AT91_REG
 *) 0xFFFA0000)

2204 
	#AT91C_TC0_CMR
 ((
AT91_REG
 *) 0xFFFA0004)

2205 
	#AT91C_TC0_IER
 ((
AT91_REG
 *) 0xFFFA0024)

2206 
	#AT91C_TC0_RA
 ((
AT91_REG
 *) 0xFFFA0014)

2207 
	#AT91C_TC0_IDR
 ((
AT91_REG
 *) 0xFFFA0028)

2208 
	#AT91C_TC0_CV
 ((
AT91_REG
 *) 0xFFFA0010)

2209 
	#AT91C_TC0_IMR
 ((
AT91_REG
 *) 0xFFFA002C)

2211 
	#AT91C_TC1_RB
 ((
AT91_REG
 *) 0xFFFA0058)

2212 
	#AT91C_TC1_CCR
 ((
AT91_REG
 *) 0xFFFA0040)

2213 
	#AT91C_TC1_IER
 ((
AT91_REG
 *) 0xFFFA0064)

2214 
	#AT91C_TC1_IDR
 ((
AT91_REG
 *) 0xFFFA0068)

2215 
	#AT91C_TC1_SR
 ((
AT91_REG
 *) 0xFFFA0060)

2216 
	#AT91C_TC1_CMR
 ((
AT91_REG
 *) 0xFFFA0044)

2217 
	#AT91C_TC1_RA
 ((
AT91_REG
 *) 0xFFFA0054)

2218 
	#AT91C_TC1_RC
 ((
AT91_REG
 *) 0xFFFA005C)

2219 
	#AT91C_TC1_IMR
 ((
AT91_REG
 *) 0xFFFA006C)

2220 
	#AT91C_TC1_CV
 ((
AT91_REG
 *) 0xFFFA0050)

2222 
	#AT91C_TC2_CMR
 ((
AT91_REG
 *) 0xFFFA0084)

2223 
	#AT91C_TC2_CCR
 ((
AT91_REG
 *) 0xFFFA0080)

2224 
	#AT91C_TC2_CV
 ((
AT91_REG
 *) 0xFFFA0090)

2225 
	#AT91C_TC2_RA
 ((
AT91_REG
 *) 0xFFFA0094)

2226 
	#AT91C_TC2_RB
 ((
AT91_REG
 *) 0xFFFA0098)

2227 
	#AT91C_TC2_IDR
 ((
AT91_REG
 *) 0xFFFA00A8)

2228 
	#AT91C_TC2_IMR
 ((
AT91_REG
 *) 0xFFFA00AC)

2229 
	#AT91C_TC2_RC
 ((
AT91_REG
 *) 0xFFFA009C)

2230 
	#AT91C_TC2_IER
 ((
AT91_REG
 *) 0xFFFA00A4)

2231 
	#AT91C_TC2_SR
 ((
AT91_REG
 *) 0xFFFA00A0)

2233 
	#AT91C_TCB_BMR
 ((
AT91_REG
 *) 0xFFFA00C4)

2234 
	#AT91C_TCB_BCR
 ((
AT91_REG
 *) 0xFFFA00C0)

2236 
	#AT91C_CAN_MB0_MDL
 ((
AT91_REG
 *) 0xFFFD0214)

2237 
	#AT91C_CAN_MB0_MAM
 ((
AT91_REG
 *) 0xFFFD0204)

2238 
	#AT91C_CAN_MB0_MCR
 ((
AT91_REG
 *) 0xFFFD021C)

2239 
	#AT91C_CAN_MB0_MID
 ((
AT91_REG
 *) 0xFFFD0208)

2240 
	#AT91C_CAN_MB0_MSR
 ((
AT91_REG
 *) 0xFFFD0210)

2241 
	#AT91C_CAN_MB0_MFID
 ((
AT91_REG
 *) 0xFFFD020C)

2242 
	#AT91C_CAN_MB0_MDH
 ((
AT91_REG
 *) 0xFFFD0218)

2243 
	#AT91C_CAN_MB0_MMR
 ((
AT91_REG
 *) 0xFFFD0200)

2245 
	#AT91C_CAN_MB1_MDL
 ((
AT91_REG
 *) 0xFFFD0234)

2246 
	#AT91C_CAN_MB1_MID
 ((
AT91_REG
 *) 0xFFFD0228)

2247 
	#AT91C_CAN_MB1_MMR
 ((
AT91_REG
 *) 0xFFFD0220)

2248 
	#AT91C_CAN_MB1_MSR
 ((
AT91_REG
 *) 0xFFFD0230)

2249 
	#AT91C_CAN_MB1_MAM
 ((
AT91_REG
 *) 0xFFFD0224)

2250 
	#AT91C_CAN_MB1_MDH
 ((
AT91_REG
 *) 0xFFFD0238)

2251 
	#AT91C_CAN_MB1_MCR
 ((
AT91_REG
 *) 0xFFFD023C)

2252 
	#AT91C_CAN_MB1_MFID
 ((
AT91_REG
 *) 0xFFFD022C)

2254 
	#AT91C_CAN_MB2_MCR
 ((
AT91_REG
 *) 0xFFFD025C)

2255 
	#AT91C_CAN_MB2_MDH
 ((
AT91_REG
 *) 0xFFFD0258)

2256 
	#AT91C_CAN_MB2_MID
 ((
AT91_REG
 *) 0xFFFD0248)

2257 
	#AT91C_CAN_MB2_MDL
 ((
AT91_REG
 *) 0xFFFD0254)

2258 
	#AT91C_CAN_MB2_MMR
 ((
AT91_REG
 *) 0xFFFD0240)

2259 
	#AT91C_CAN_MB2_MAM
 ((
AT91_REG
 *) 0xFFFD0244)

2260 
	#AT91C_CAN_MB2_MFID
 ((
AT91_REG
 *) 0xFFFD024C)

2261 
	#AT91C_CAN_MB2_MSR
 ((
AT91_REG
 *) 0xFFFD0250)

2263 
	#AT91C_CAN_MB3_MFID
 ((
AT91_REG
 *) 0xFFFD026C)

2264 
	#AT91C_CAN_MB3_MAM
 ((
AT91_REG
 *) 0xFFFD0264)

2265 
	#AT91C_CAN_MB3_MID
 ((
AT91_REG
 *) 0xFFFD0268)

2266 
	#AT91C_CAN_MB3_MCR
 ((
AT91_REG
 *) 0xFFFD027C)

2267 
	#AT91C_CAN_MB3_MMR
 ((
AT91_REG
 *) 0xFFFD0260)

2268 
	#AT91C_CAN_MB3_MSR
 ((
AT91_REG
 *) 0xFFFD0270)

2269 
	#AT91C_CAN_MB3_MDL
 ((
AT91_REG
 *) 0xFFFD0274)

2270 
	#AT91C_CAN_MB3_MDH
 ((
AT91_REG
 *) 0xFFFD0278)

2272 
	#AT91C_CAN_MB4_MID
 ((
AT91_REG
 *) 0xFFFD0288)

2273 
	#AT91C_CAN_MB4_MMR
 ((
AT91_REG
 *) 0xFFFD0280)

2274 
	#AT91C_CAN_MB4_MDH
 ((
AT91_REG
 *) 0xFFFD0298)

2275 
	#AT91C_CAN_MB4_MFID
 ((
AT91_REG
 *) 0xFFFD028C)

2276 
	#AT91C_CAN_MB4_MSR
 ((
AT91_REG
 *) 0xFFFD0290)

2277 
	#AT91C_CAN_MB4_MCR
 ((
AT91_REG
 *) 0xFFFD029C)

2278 
	#AT91C_CAN_MB4_MDL
 ((
AT91_REG
 *) 0xFFFD0294)

2279 
	#AT91C_CAN_MB4_MAM
 ((
AT91_REG
 *) 0xFFFD0284)

2281 
	#AT91C_CAN_MB5_MSR
 ((
AT91_REG
 *) 0xFFFD02B0)

2282 
	#AT91C_CAN_MB5_MCR
 ((
AT91_REG
 *) 0xFFFD02BC)

2283 
	#AT91C_CAN_MB5_MFID
 ((
AT91_REG
 *) 0xFFFD02AC)

2284 
	#AT91C_CAN_MB5_MDH
 ((
AT91_REG
 *) 0xFFFD02B8)

2285 
	#AT91C_CAN_MB5_MID
 ((
AT91_REG
 *) 0xFFFD02A8)

2286 
	#AT91C_CAN_MB5_MMR
 ((
AT91_REG
 *) 0xFFFD02A0)

2287 
	#AT91C_CAN_MB5_MDL
 ((
AT91_REG
 *) 0xFFFD02B4)

2288 
	#AT91C_CAN_MB5_MAM
 ((
AT91_REG
 *) 0xFFFD02A4)

2290 
	#AT91C_CAN_MB6_MFID
 ((
AT91_REG
 *) 0xFFFD02CC)

2291 
	#AT91C_CAN_MB6_MID
 ((
AT91_REG
 *) 0xFFFD02C8)

2292 
	#AT91C_CAN_MB6_MAM
 ((
AT91_REG
 *) 0xFFFD02C4)

2293 
	#AT91C_CAN_MB6_MSR
 ((
AT91_REG
 *) 0xFFFD02D0)

2294 
	#AT91C_CAN_MB6_MDL
 ((
AT91_REG
 *) 0xFFFD02D4)

2295 
	#AT91C_CAN_MB6_MCR
 ((
AT91_REG
 *) 0xFFFD02DC)

2296 
	#AT91C_CAN_MB6_MDH
 ((
AT91_REG
 *) 0xFFFD02D8)

2297 
	#AT91C_CAN_MB6_MMR
 ((
AT91_REG
 *) 0xFFFD02C0)

2299 
	#AT91C_CAN_MB7_MCR
 ((
AT91_REG
 *) 0xFFFD02FC)

2300 
	#AT91C_CAN_MB7_MDH
 ((
AT91_REG
 *) 0xFFFD02F8)

2301 
	#AT91C_CAN_MB7_MFID
 ((
AT91_REG
 *) 0xFFFD02EC)

2302 
	#AT91C_CAN_MB7_MDL
 ((
AT91_REG
 *) 0xFFFD02F4)

2303 
	#AT91C_CAN_MB7_MID
 ((
AT91_REG
 *) 0xFFFD02E8)

2304 
	#AT91C_CAN_MB7_MMR
 ((
AT91_REG
 *) 0xFFFD02E0)

2305 
	#AT91C_CAN_MB7_MAM
 ((
AT91_REG
 *) 0xFFFD02E4)

2306 
	#AT91C_CAN_MB7_MSR
 ((
AT91_REG
 *) 0xFFFD02F0)

2308 
	#AT91C_CAN_TCR
 ((
AT91_REG
 *) 0xFFFD0024)

2309 
	#AT91C_CAN_IMR
 ((
AT91_REG
 *) 0xFFFD000C)

2310 
	#AT91C_CAN_IER
 ((
AT91_REG
 *) 0xFFFD0004)

2311 
	#AT91C_CAN_ECR
 ((
AT91_REG
 *) 0xFFFD0020)

2312 
	#AT91C_CAN_TIMESTP
 ((
AT91_REG
 *) 0xFFFD001C)

2313 
	#AT91C_CAN_MR
 ((
AT91_REG
 *) 0xFFFD0000)

2314 
	#AT91C_CAN_IDR
 ((
AT91_REG
 *) 0xFFFD0008)

2315 
	#AT91C_CAN_ACR
 ((
AT91_REG
 *) 0xFFFD0028)

2316 
	#AT91C_CAN_TIM
 ((
AT91_REG
 *) 0xFFFD0018)

2317 
	#AT91C_CAN_SR
 ((
AT91_REG
 *) 0xFFFD0010)

2318 
	#AT91C_CAN_BR
 ((
AT91_REG
 *) 0xFFFD0014)

2319 
	#AT91C_CAN_VR
 ((
AT91_REG
 *) 0xFFFD00FC)

2321 
	#AT91C_EMAC_ISR
 ((
AT91_REG
 *) 0xFFFDC024)

2322 
	#AT91C_EMAC_SA4H
 ((
AT91_REG
 *) 0xFFFDC0B4)

2323 
	#AT91C_EMAC_SA1L
 ((
AT91_REG
 *) 0xFFFDC098)

2324 
	#AT91C_EMAC_ELE
 ((
AT91_REG
 *) 0xFFFDC078)

2325 
	#AT91C_EMAC_LCOL
 ((
AT91_REG
 *) 0xFFFDC05C)

2326 
	#AT91C_EMAC_RLE
 ((
AT91_REG
 *) 0xFFFDC088)

2327 
	#AT91C_EMAC_WOL
 ((
AT91_REG
 *) 0xFFFDC0C4)

2328 
	#AT91C_EMAC_DTF
 ((
AT91_REG
 *) 0xFFFDC058)

2329 
	#AT91C_EMAC_TUND
 ((
AT91_REG
 *) 0xFFFDC064)

2330 
	#AT91C_EMAC_NCR
 ((
AT91_REG
 *) 0xFFFDC000)

2331 
	#AT91C_EMAC_SA4L
 ((
AT91_REG
 *) 0xFFFDC0B0)

2332 
	#AT91C_EMAC_RSR
 ((
AT91_REG
 *) 0xFFFDC020)

2333 
	#AT91C_EMAC_SA3L
 ((
AT91_REG
 *) 0xFFFDC0A8)

2334 
	#AT91C_EMAC_TSR
 ((
AT91_REG
 *) 0xFFFDC014)

2335 
	#AT91C_EMAC_IDR
 ((
AT91_REG
 *) 0xFFFDC02C)

2336 
	#AT91C_EMAC_RSE
 ((
AT91_REG
 *) 0xFFFDC074)

2337 
	#AT91C_EMAC_ECOL
 ((
AT91_REG
 *) 0xFFFDC060)

2338 
	#AT91C_EMAC_TID
 ((
AT91_REG
 *) 0xFFFDC0B8)

2339 
	#AT91C_EMAC_HRB
 ((
AT91_REG
 *) 0xFFFDC090)

2340 
	#AT91C_EMAC_TBQP
 ((
AT91_REG
 *) 0xFFFDC01C)

2341 
	#AT91C_EMAC_USRIO
 ((
AT91_REG
 *) 0xFFFDC0C0)

2342 
	#AT91C_EMAC_PTR
 ((
AT91_REG
 *) 0xFFFDC038)

2343 
	#AT91C_EMAC_SA2H
 ((
AT91_REG
 *) 0xFFFDC0A4)

2344 
	#AT91C_EMAC_ROV
 ((
AT91_REG
 *) 0xFFFDC070)

2345 
	#AT91C_EMAC_ALE
 ((
AT91_REG
 *) 0xFFFDC054)

2346 
	#AT91C_EMAC_RJA
 ((
AT91_REG
 *) 0xFFFDC07C)

2347 
	#AT91C_EMAC_RBQP
 ((
AT91_REG
 *) 0xFFFDC018)

2348 
	#AT91C_EMAC_TPF
 ((
AT91_REG
 *) 0xFFFDC08C)

2349 
	#AT91C_EMAC_NCFGR
 ((
AT91_REG
 *) 0xFFFDC004)

2350 
	#AT91C_EMAC_HRT
 ((
AT91_REG
 *) 0xFFFDC094)

2351 
	#AT91C_EMAC_USF
 ((
AT91_REG
 *) 0xFFFDC080)

2352 
	#AT91C_EMAC_FCSE
 ((
AT91_REG
 *) 0xFFFDC050)

2353 
	#AT91C_EMAC_TPQ
 ((
AT91_REG
 *) 0xFFFDC0BC)

2354 
	#AT91C_EMAC_MAN
 ((
AT91_REG
 *) 0xFFFDC034)

2355 
	#AT91C_EMAC_FTO
 ((
AT91_REG
 *) 0xFFFDC040)

2356 
	#AT91C_EMAC_REV
 ((
AT91_REG
 *) 0xFFFDC0FC)

2357 
	#AT91C_EMAC_IMR
 ((
AT91_REG
 *) 0xFFFDC030)

2358 
	#AT91C_EMAC_SCF
 ((
AT91_REG
 *) 0xFFFDC044)

2359 
	#AT91C_EMAC_PFR
 ((
AT91_REG
 *) 0xFFFDC03C)

2360 
	#AT91C_EMAC_MCF
 ((
AT91_REG
 *) 0xFFFDC048)

2361 
	#AT91C_EMAC_NSR
 ((
AT91_REG
 *) 0xFFFDC008)

2362 
	#AT91C_EMAC_SA2L
 ((
AT91_REG
 *) 0xFFFDC0A0)

2363 
	#AT91C_EMAC_FRO
 ((
AT91_REG
 *) 0xFFFDC04C)

2364 
	#AT91C_EMAC_IER
 ((
AT91_REG
 *) 0xFFFDC028)

2365 
	#AT91C_EMAC_SA1H
 ((
AT91_REG
 *) 0xFFFDC09C)

2366 
	#AT91C_EMAC_CSE
 ((
AT91_REG
 *) 0xFFFDC068)

2367 
	#AT91C_EMAC_SA3H
 ((
AT91_REG
 *) 0xFFFDC0AC)

2368 
	#AT91C_EMAC_RRE
 ((
AT91_REG
 *) 0xFFFDC06C)

2369 
	#AT91C_EMAC_STE
 ((
AT91_REG
 *) 0xFFFDC084)

2371 
	#AT91C_ADC_PTSR
 ((
AT91_REG
 *) 0xFFFD8124)

2372 
	#AT91C_ADC_PTCR
 ((
AT91_REG
 *) 0xFFFD8120)

2373 
	#AT91C_ADC_TNPR
 ((
AT91_REG
 *) 0xFFFD8118)

2374 
	#AT91C_ADC_TNCR
 ((
AT91_REG
 *) 0xFFFD811C)

2375 
	#AT91C_ADC_RNPR
 ((
AT91_REG
 *) 0xFFFD8110)

2376 
	#AT91C_ADC_RNCR
 ((
AT91_REG
 *) 0xFFFD8114)

2377 
	#AT91C_ADC_RPR
 ((
AT91_REG
 *) 0xFFFD8100)

2378 
	#AT91C_ADC_TCR
 ((
AT91_REG
 *) 0xFFFD810C)

2379 
	#AT91C_ADC_TPR
 ((
AT91_REG
 *) 0xFFFD8108)

2380 
	#AT91C_ADC_RCR
 ((
AT91_REG
 *) 0xFFFD8104)

2382 
	#AT91C_ADC_CDR2
 ((
AT91_REG
 *) 0xFFFD8038)

2383 
	#AT91C_ADC_CDR3
 ((
AT91_REG
 *) 0xFFFD803C)

2384 
	#AT91C_ADC_CDR0
 ((
AT91_REG
 *) 0xFFFD8030)

2385 
	#AT91C_ADC_CDR5
 ((
AT91_REG
 *) 0xFFFD8044)

2386 
	#AT91C_ADC_CHDR
 ((
AT91_REG
 *) 0xFFFD8014)

2387 
	#AT91C_ADC_SR
 ((
AT91_REG
 *) 0xFFFD801C)

2388 
	#AT91C_ADC_CDR4
 ((
AT91_REG
 *) 0xFFFD8040)

2389 
	#AT91C_ADC_CDR1
 ((
AT91_REG
 *) 0xFFFD8034)

2390 
	#AT91C_ADC_LCDR
 ((
AT91_REG
 *) 0xFFFD8020)

2391 
	#AT91C_ADC_IDR
 ((
AT91_REG
 *) 0xFFFD8028)

2392 
	#AT91C_ADC_CR
 ((
AT91_REG
 *) 0xFFFD8000)

2393 
	#AT91C_ADC_CDR7
 ((
AT91_REG
 *) 0xFFFD804C)

2394 
	#AT91C_ADC_CDR6
 ((
AT91_REG
 *) 0xFFFD8048)

2395 
	#AT91C_ADC_IER
 ((
AT91_REG
 *) 0xFFFD8024)

2396 
	#AT91C_ADC_CHER
 ((
AT91_REG
 *) 0xFFFD8010)

2397 
	#AT91C_ADC_CHSR
 ((
AT91_REG
 *) 0xFFFD8018)

2398 
	#AT91C_ADC_MR
 ((
AT91_REG
 *) 0xFFFD8004)

2399 
	#AT91C_ADC_IMR
 ((
AT91_REG
 *) 0xFFFD802C)

2401 
	#AT91C_AES_TPR
 ((
AT91_REG
 *) 0xFFFA4108)

2402 
	#AT91C_AES_PTCR
 ((
AT91_REG
 *) 0xFFFA4120)

2403 
	#AT91C_AES_RNPR
 ((
AT91_REG
 *) 0xFFFA4110)

2404 
	#AT91C_AES_TNCR
 ((
AT91_REG
 *) 0xFFFA411C)

2405 
	#AT91C_AES_TCR
 ((
AT91_REG
 *) 0xFFFA410C)

2406 
	#AT91C_AES_RCR
 ((
AT91_REG
 *) 0xFFFA4104)

2407 
	#AT91C_AES_RNCR
 ((
AT91_REG
 *) 0xFFFA4114)

2408 
	#AT91C_AES_TNPR
 ((
AT91_REG
 *) 0xFFFA4118)

2409 
	#AT91C_AES_RPR
 ((
AT91_REG
 *) 0xFFFA4100)

2410 
	#AT91C_AES_PTSR
 ((
AT91_REG
 *) 0xFFFA4124)

2412 
	#AT91C_AES_IVxR
 ((
AT91_REG
 *) 0xFFFA4060)

2413 
	#AT91C_AES_MR
 ((
AT91_REG
 *) 0xFFFA4004)

2414 
	#AT91C_AES_VR
 ((
AT91_REG
 *) 0xFFFA40FC)

2415 
	#AT91C_AES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA4050)

2416 
	#AT91C_AES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA4040)

2417 
	#AT91C_AES_CR
 ((
AT91_REG
 *) 0xFFFA4000)

2418 
	#AT91C_AES_IDR
 ((
AT91_REG
 *) 0xFFFA4014)

2419 
	#AT91C_AES_IMR
 ((
AT91_REG
 *) 0xFFFA4018)

2420 
	#AT91C_AES_IER
 ((
AT91_REG
 *) 0xFFFA4010)

2421 
	#AT91C_AES_KEYWxR
 ((
AT91_REG
 *) 0xFFFA4020)

2422 
	#AT91C_AES_ISR
 ((
AT91_REG
 *) 0xFFFA401C)

2424 
	#AT91C_TDES_RNCR
 ((
AT91_REG
 *) 0xFFFA8114)

2425 
	#AT91C_TDES_TCR
 ((
AT91_REG
 *) 0xFFFA810C)

2426 
	#AT91C_TDES_RCR
 ((
AT91_REG
 *) 0xFFFA8104)

2427 
	#AT91C_TDES_TNPR
 ((
AT91_REG
 *) 0xFFFA8118)

2428 
	#AT91C_TDES_RNPR
 ((
AT91_REG
 *) 0xFFFA8110)

2429 
	#AT91C_TDES_RPR
 ((
AT91_REG
 *) 0xFFFA8100)

2430 
	#AT91C_TDES_TNCR
 ((
AT91_REG
 *) 0xFFFA811C)

2431 
	#AT91C_TDES_TPR
 ((
AT91_REG
 *) 0xFFFA8108)

2432 
	#AT91C_TDES_PTSR
 ((
AT91_REG
 *) 0xFFFA8124)

2433 
	#AT91C_TDES_PTCR
 ((
AT91_REG
 *) 0xFFFA8120)

2435 
	#AT91C_TDES_KEY2WxR
 ((
AT91_REG
 *) 0xFFFA8028)

2436 
	#AT91C_TDES_KEY3WxR
 ((
AT91_REG
 *) 0xFFFA8030)

2437 
	#AT91C_TDES_IDR
 ((
AT91_REG
 *) 0xFFFA8014)

2438 
	#AT91C_TDES_VR
 ((
AT91_REG
 *) 0xFFFA80FC)

2439 
	#AT91C_TDES_IVxR
 ((
AT91_REG
 *) 0xFFFA8060)

2440 
	#AT91C_TDES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA8050)

2441 
	#AT91C_TDES_IMR
 ((
AT91_REG
 *) 0xFFFA8018)

2442 
	#AT91C_TDES_MR
 ((
AT91_REG
 *) 0xFFFA8004)

2443 
	#AT91C_TDES_CR
 ((
AT91_REG
 *) 0xFFFA8000)

2444 
	#AT91C_TDES_IER
 ((
AT91_REG
 *) 0xFFFA8010)

2445 
	#AT91C_TDES_ISR
 ((
AT91_REG
 *) 0xFFFA801C)

2446 
	#AT91C_TDES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA8040)

2447 
	#AT91C_TDES_KEY1WxR
 ((
AT91_REG
 *) 0xFFFA8020)

2448 

	)

2452 
	#AT91C_PIO_PA0
 (() 1 << 0)

2453 
	#AT91C_PA0_RXD0
 ((Ë
AT91C_PIO_PA0
)

2454 
	#AT91C_PIO_PA1
 (() 1 << 1)

2455 
	#AT91C_PA1_TXD0
 ((Ë
AT91C_PIO_PA1
)

2456 
	#AT91C_PIO_PA10
 (() 1 << 10)

2457 
	#AT91C_PA10_TWD
 ((Ë
AT91C_PIO_PA10
)

2458 
	#AT91C_PIO_PA11
 (() 1 << 11)

2459 
	#AT91C_PA11_TWCK
 ((Ë
AT91C_PIO_PA11
)

2460 
	#AT91C_PIO_PA12
 (() 1 << 12)

2461 
	#AT91C_PA12_NPCS00
 ((Ë
AT91C_PIO_PA12
)

2462 
	#AT91C_PIO_PA13
 (() 1 << 13)

2463 
	#AT91C_PA13_NPCS01
 ((Ë
AT91C_PIO_PA13
)

2464 
	#AT91C_PA13_PCK1
 ((Ë
AT91C_PIO_PA13
)

2465 
	#AT91C_PIO_PA14
 (() 1 << 14)

2466 
	#AT91C_PA14_NPCS02
 ((Ë
AT91C_PIO_PA14
)

2467 
	#AT91C_PA14_IRQ1
 ((Ë
AT91C_PIO_PA14
)

2468 
	#AT91C_PIO_PA15
 (() 1 << 15)

2469 
	#AT91C_PA15_NPCS03
 ((Ë
AT91C_PIO_PA15
)

2470 
	#AT91C_PA15_TCLK2
 ((Ë
AT91C_PIO_PA15
)

2471 
	#AT91C_PIO_PA16
 (() 1 << 16)

2472 
	#AT91C_PA16_MISO0
 ((Ë
AT91C_PIO_PA16
)

2473 
	#AT91C_PIO_PA17
 (() 1 << 17)

2474 
	#AT91C_PA17_MOSI0
 ((Ë
AT91C_PIO_PA17
)

2475 
	#AT91C_PIO_PA18
 (() 1 << 18)

2476 
	#AT91C_PA18_SPCK0
 ((Ë
AT91C_PIO_PA18
)

2477 
	#AT91C_PIO_PA19
 (() 1 << 19)

2478 
	#AT91C_PA19_CANRX
 ((Ë
AT91C_PIO_PA19
)

2479 
	#AT91C_PIO_PA2
 (() 1 << 2)

2480 
	#AT91C_PA2_SCK0
 ((Ë
AT91C_PIO_PA2
)

2481 
	#AT91C_PA2_NPCS11
 ((Ë
AT91C_PIO_PA2
)

2482 
	#AT91C_PIO_PA20
 (() 1 << 20)

2483 
	#AT91C_PA20_CANTX
 ((Ë
AT91C_PIO_PA20
)

2484 
	#AT91C_PIO_PA21
 (() 1 << 21)

2485 
	#AT91C_PA21_TF
 ((Ë
AT91C_PIO_PA21
)

2486 
	#AT91C_PA21_NPCS10
 ((Ë
AT91C_PIO_PA21
)

2487 
	#AT91C_PIO_PA22
 (() 1 << 22)

2488 
	#AT91C_PA22_TK
 ((Ë
AT91C_PIO_PA22
)

2489 
	#AT91C_PA22_SPCK1
 ((Ë
AT91C_PIO_PA22
)

2490 
	#AT91C_PIO_PA23
 (() 1 << 23)

2491 
	#AT91C_PA23_TD
 ((Ë
AT91C_PIO_PA23
)

2492 
	#AT91C_PA23_MOSI1
 ((Ë
AT91C_PIO_PA23
)

2493 
	#AT91C_PIO_PA24
 (() 1 << 24)

2494 
	#AT91C_PA24_RD
 ((Ë
AT91C_PIO_PA24
)

2495 
	#AT91C_PA24_MISO1
 ((Ë
AT91C_PIO_PA24
)

2496 
	#AT91C_PIO_PA25
 (() 1 << 25)

2497 
	#AT91C_PA25_RK
 ((Ë
AT91C_PIO_PA25
)

2498 
	#AT91C_PA25_NPCS11
 ((Ë
AT91C_PIO_PA25
)

2499 
	#AT91C_PIO_PA26
 (() 1 << 26)

2500 
	#AT91C_PA26_RF
 ((Ë
AT91C_PIO_PA26
)

2501 
	#AT91C_PA26_NPCS12
 ((Ë
AT91C_PIO_PA26
)

2502 
	#AT91C_PIO_PA27
 (() 1 << 27)

2503 
	#AT91C_PA27_DRXD
 ((Ë
AT91C_PIO_PA27
)

2504 
	#AT91C_PA27_PCK3
 ((Ë
AT91C_PIO_PA27
)

2505 
	#AT91C_PIO_PA28
 (() 1 << 28)

2506 
	#AT91C_PA28_DTXD
 ((Ë
AT91C_PIO_PA28
)

2507 
	#AT91C_PIO_PA29
 (() 1 << 29)

2508 
	#AT91C_PA29_FIQ
 ((Ë
AT91C_PIO_PA29
)

2509 
	#AT91C_PA29_NPCS13
 ((Ë
AT91C_PIO_PA29
)

2510 
	#AT91C_PIO_PA3
 (() 1 << 3)

2511 
	#AT91C_PA3_RTS0
 ((Ë
AT91C_PIO_PA3
)

2512 
	#AT91C_PA3_NPCS12
 ((Ë
AT91C_PIO_PA3
)

2513 
	#AT91C_PIO_PA30
 (() 1 << 30)

2514 
	#AT91C_PA30_IRQ0
 ((Ë
AT91C_PIO_PA30
)

2515 
	#AT91C_PA30_PCK2
 ((Ë
AT91C_PIO_PA30
)

2516 
	#AT91C_PIO_PA4
 (() 1 << 4)

2517 
	#AT91C_PA4_CTS0
 ((Ë
AT91C_PIO_PA4
)

2518 
	#AT91C_PA4_NPCS13
 ((Ë
AT91C_PIO_PA4
)

2519 
	#AT91C_PIO_PA5
 (() 1 << 5)

2520 
	#AT91C_PA5_RXD1
 ((Ë
AT91C_PIO_PA5
)

2521 
	#AT91C_PIO_PA6
 (() 1 << 6)

2522 
	#AT91C_PA6_TXD1
 ((Ë
AT91C_PIO_PA6
)

2523 
	#AT91C_PIO_PA7
 (() 1 << 7)

2524 
	#AT91C_PA7_SCK1
 ((Ë
AT91C_PIO_PA7
)

2525 
	#AT91C_PA7_NPCS01
 ((Ë
AT91C_PIO_PA7
)

2526 
	#AT91C_PIO_PA8
 (() 1 << 8)

2527 
	#AT91C_PA8_RTS1
 ((Ë
AT91C_PIO_PA8
)

2528 
	#AT91C_PA8_NPCS02
 ((Ë
AT91C_PIO_PA8
)

2529 
	#AT91C_PIO_PA9
 (() 1 << 9)

2530 
	#AT91C_PA9_CTS1
 ((Ë
AT91C_PIO_PA9
)

2531 
	#AT91C_PA9_NPCS03
 ((Ë
AT91C_PIO_PA9
)

2532 
	#AT91C_PIO_PB0
 (() 1 << 0)

2533 
	#AT91C_PB0_ETXCK_EREFCK
 ((Ë
AT91C_PIO_PB0
)

2534 
	#AT91C_PB0_PCK0
 ((Ë
AT91C_PIO_PB0
)

2535 
	#AT91C_PIO_PB1
 (() 1 << 1)

2536 
	#AT91C_PB1_ETXEN
 ((Ë
AT91C_PIO_PB1
)

2537 
	#AT91C_PIO_PB10
 (() 1 << 10)

2538 
	#AT91C_PB10_ETX2
 ((Ë
AT91C_PIO_PB10
)

2539 
	#AT91C_PB10_NPCS11
 ((Ë
AT91C_PIO_PB10
)

2540 
	#AT91C_PIO_PB11
 (() 1 << 11)

2541 
	#AT91C_PB11_ETX3
 ((Ë
AT91C_PIO_PB11
)

2542 
	#AT91C_PB11_NPCS12
 ((Ë
AT91C_PIO_PB11
)

2543 
	#AT91C_PIO_PB12
 (() 1 << 12)

2544 
	#AT91C_PB12_ETXER
 ((Ë
AT91C_PIO_PB12
)

2545 
	#AT91C_PB12_TCLK0
 ((Ë
AT91C_PIO_PB12
)

2546 
	#AT91C_PIO_PB13
 (() 1 << 13)

2547 
	#AT91C_PB13_ERX2
 ((Ë
AT91C_PIO_PB13
)

2548 
	#AT91C_PB13_NPCS01
 ((Ë
AT91C_PIO_PB13
)

2549 
	#AT91C_PIO_PB14
 (() 1 << 14)

2550 
	#AT91C_PB14_ERX3
 ((Ë
AT91C_PIO_PB14
)

2551 
	#AT91C_PB14_NPCS02
 ((Ë
AT91C_PIO_PB14
)

2552 
	#AT91C_PIO_PB15
 (() 1 << 15)

2553 
	#AT91C_PB15_ERXDV
 ((Ë
AT91C_PIO_PB15
)

2554 
	#AT91C_PIO_PB16
 (() 1 << 16)

2555 
	#AT91C_PB16_ECOL
 ((Ë
AT91C_PIO_PB16
)

2556 
	#AT91C_PB16_NPCS13
 ((Ë
AT91C_PIO_PB16
)

2557 
	#AT91C_PIO_PB17
 (() 1 << 17)

2558 
	#AT91C_PB17_ERXCK
 ((Ë
AT91C_PIO_PB17
)

2559 
	#AT91C_PB17_NPCS03
 ((Ë
AT91C_PIO_PB17
)

2560 
	#AT91C_PIO_PB18
 (() 1 << 18)

2561 
	#AT91C_PB18_EF100
 ((Ë
AT91C_PIO_PB18
)

2562 
	#AT91C_PB18_ADTRG
 ((Ë
AT91C_PIO_PB18
)

2563 
	#AT91C_PIO_PB19
 (() 1 << 19)

2564 
	#AT91C_PB19_PWM0
 ((Ë
AT91C_PIO_PB19
)

2565 
	#AT91C_PB19_TCLK1
 ((Ë
AT91C_PIO_PB19
)

2566 
	#AT91C_PIO_PB2
 (() 1 << 2)

2567 
	#AT91C_PB2_ETX0
 ((Ë
AT91C_PIO_PB2
)

2568 
	#AT91C_PIO_PB20
 (() 1 << 20)

2569 
	#AT91C_PB20_PWM1
 ((Ë
AT91C_PIO_PB20
)

2570 
	#AT91C_PB20_PCK0
 ((Ë
AT91C_PIO_PB20
)

2571 
	#AT91C_PIO_PB21
 (() 1 << 21)

2572 
	#AT91C_PB21_PWM2
 ((Ë
AT91C_PIO_PB21
)

2573 
	#AT91C_PB21_PCK1
 ((Ë
AT91C_PIO_PB21
)

2574 
	#AT91C_PIO_PB22
 (() 1 << 22)

2575 
	#AT91C_PB22_PWM3
 ((Ë
AT91C_PIO_PB22
)

2576 
	#AT91C_PB22_PCK2
 ((Ë
AT91C_PIO_PB22
)

2577 
	#AT91C_PIO_PB23
 (() 1 << 23)

2578 
	#AT91C_PB23_TIOA0
 ((Ë
AT91C_PIO_PB23
)

2579 
	#AT91C_PB23_DCD1
 ((Ë
AT91C_PIO_PB23
)

2580 
	#AT91C_PIO_PB24
 (() 1 << 24)

2581 
	#AT91C_PB24_TIOB0
 ((Ë
AT91C_PIO_PB24
)

2582 
	#AT91C_PB24_DSR1
 ((Ë
AT91C_PIO_PB24
)

2583 
	#AT91C_PIO_PB25
 (() 1 << 25)

2584 
	#AT91C_PB25_TIOA1
 ((Ë
AT91C_PIO_PB25
)

2585 
	#AT91C_PB25_DTR1
 ((Ë
AT91C_PIO_PB25
)

2586 
	#AT91C_PIO_PB26
 (() 1 << 26)

2587 
	#AT91C_PB26_TIOB1
 ((Ë
AT91C_PIO_PB26
)

2588 
	#AT91C_PB26_RI1
 ((Ë
AT91C_PIO_PB26
)

2589 
	#AT91C_PIO_PB27
 (() 1 << 27)

2590 
	#AT91C_PB27_TIOA2
 ((Ë
AT91C_PIO_PB27
)

2591 
	#AT91C_PB27_PWM0
 ((Ë
AT91C_PIO_PB27
)

2592 
	#AT91C_PIO_PB28
 (() 1 << 28)

2593 
	#AT91C_PB28_TIOB2
 ((Ë
AT91C_PIO_PB28
)

2594 
	#AT91C_PB28_PWM1
 ((Ë
AT91C_PIO_PB28
)

2595 
	#AT91C_PIO_PB29
 (() 1 << 29)

2596 
	#AT91C_PB29_PCK1
 ((Ë
AT91C_PIO_PB29
)

2597 
	#AT91C_PB29_PWM2
 ((Ë
AT91C_PIO_PB29
)

2598 
	#AT91C_PIO_PB3
 (() 1 << 3)

2599 
	#AT91C_PB3_ETX1
 ((Ë
AT91C_PIO_PB3
)

2600 
	#AT91C_PIO_PB30
 (() 1 << 30)

2601 
	#AT91C_PB30_PCK2
 ((Ë
AT91C_PIO_PB30
)

2602 
	#AT91C_PB30_PWM3
 ((Ë
AT91C_PIO_PB30
)

2603 
	#AT91C_PIO_PB4
 (() 1 << 4)

2604 
	#AT91C_PB4_ECRS_ECRSDV
 ((Ë
AT91C_PIO_PB4
)

2605 
	#AT91C_PIO_PB5
 (() 1 << 5)

2606 
	#AT91C_PB5_ERX0
 ((Ë
AT91C_PIO_PB5
)

2607 
	#AT91C_PIO_PB6
 (() 1 << 6)

2608 
	#AT91C_PB6_ERX1
 ((Ë
AT91C_PIO_PB6
)

2609 
	#AT91C_PIO_PB7
 (() 1 << 7)

2610 
	#AT91C_PB7_ERXER
 ((Ë
AT91C_PIO_PB7
)

2611 
	#AT91C_PIO_PB8
 (() 1 << 8)

2612 
	#AT91C_PB8_EMDC
 ((Ë
AT91C_PIO_PB8
)

2613 
	#AT91C_PIO_PB9
 (() 1 << 9)

2614 
	#AT91C_PB9_EMDIO
 ((Ë
AT91C_PIO_PB9
)

2615 

	)

2619 
	#AT91C_ID_FIQ
 (() 0)

2620 
	#AT91C_ID_SYS
 (() 1)

2621 
	#AT91C_ID_PIOA
 (() 2)

2622 
	#AT91C_ID_PIOB
 (() 3)

2623 
	#AT91C_ID_SPI0
 (() 4)

2624 
	#AT91C_ID_SPI1
 (() 5)

2625 
	#AT91C_ID_US0
 (() 6)

2626 
	#AT91C_ID_US1
 (() 7)

2627 
	#AT91C_ID_SSC
 (() 8)

2628 
	#AT91C_ID_TWI
 (() 9)

2629 
	#AT91C_ID_PWMC
 (() 10)

2630 
	#AT91C_ID_UDP
 (() 11)

2631 
	#AT91C_ID_TC0
 (() 12)

2632 
	#AT91C_ID_TC1
 (() 13)

2633 
	#AT91C_ID_TC2
 (() 14)

2634 
	#AT91C_ID_CAN
 (() 15)

2635 
	#AT91C_ID_EMAC
 (() 16)

2636 
	#AT91C_ID_ADC
 (() 17)

2637 
	#AT91C_ID_AES
 (() 18)

2638 
	#AT91C_ID_TDES
 (() 19)

2639 
	#AT91C_ID_20_Re£rved
 (() 20)

2640 
	#AT91C_ID_21_Re£rved
 (() 21)

2641 
	#AT91C_ID_22_Re£rved
 (() 22)

2642 
	#AT91C_ID_23_Re£rved
 (() 23)

2643 
	#AT91C_ID_24_Re£rved
 (() 24)

2644 
	#AT91C_ID_25_Re£rved
 (() 25)

2645 
	#AT91C_ID_26_Re£rved
 (() 26)

2646 
	#AT91C_ID_27_Re£rved
 (() 27)

2647 
	#AT91C_ID_28_Re£rved
 (() 28)

2648 
	#AT91C_ID_29_Re£rved
 (() 29)

2649 
	#AT91C_ID_IRQ0
 (() 30)

2650 
	#AT91C_ID_IRQ1
 (() 31)

2651 

	)

2655 
	#AT91C_BASE_SYS
 ((
AT91PS_SYS
) 0xFFFFF000)

2656 
	#AT91C_BASE_AIC
 ((
AT91PS_AIC
) 0xFFFFF000)

2657 
	#AT91C_BASE_PDC_DBGU
 ((
AT91PS_PDC
) 0xFFFFF300)

2658 
	#AT91C_BASE_DBGU
 ((
AT91PS_DBGU
) 0xFFFFF200)

2659 
	#AT91C_BASE_PIOA
 ((
AT91PS_PIO
) 0xFFFFF400)

2660 
	#AT91C_BASE_PIOB
 ((
AT91PS_PIO
) 0xFFFFF600)

2661 
	#AT91C_BASE_CKGR
 ((
AT91PS_CKGR
) 0xFFFFFC20)

2662 
	#AT91C_BASE_PMC
 ((
AT91PS_PMC
) 0xFFFFFC00)

2663 
	#AT91C_BASE_RSTC
 ((
AT91PS_RSTC
) 0xFFFFFD00)

2664 
	#AT91C_BASE_RTTC
 ((
AT91PS_RTTC
) 0xFFFFFD20)

2665 
	#AT91C_BASE_PITC
 ((
AT91PS_PITC
) 0xFFFFFD30)

2666 
	#AT91C_BASE_WDTC
 ((
AT91PS_WDTC
) 0xFFFFFD40)

2667 
	#AT91C_BASE_VREG
 ((
AT91PS_VREG
) 0xFFFFFD60)

2668 
	#AT91C_BASE_MC
 ((
AT91PS_MC
) 0xFFFFFF00)

2669 
	#AT91C_BASE_PDC_SPI1
 ((
AT91PS_PDC
) 0xFFFE4100)

2670 
	#AT91C_BASE_SPI1
 ((
AT91PS_SPI
) 0xFFFE4000)

2671 
	#AT91C_BASE_PDC_SPI0
 ((
AT91PS_PDC
) 0xFFFE0100)

2672 
	#AT91C_BASE_SPI0
 ((
AT91PS_SPI
) 0xFFFE0000)

2673 
	#AT91C_BASE_PDC_US1
 ((
AT91PS_PDC
) 0xFFFC4100)

2674 
	#AT91C_BASE_US1
 ((
AT91PS_USART
) 0xFFFC4000)

2675 
	#AT91C_BASE_PDC_US0
 ((
AT91PS_PDC
) 0xFFFC0100)

2676 
	#AT91C_BASE_US0
 ((
AT91PS_USART
) 0xFFFC0000)

2677 
	#AT91C_BASE_PDC_SSC
 ((
AT91PS_PDC
) 0xFFFD4100)

2678 
	#AT91C_BASE_SSC
 ((
AT91PS_SSC
) 0xFFFD4000)

2679 
	#AT91C_BASE_TWI
 ((
AT91PS_TWI
) 0xFFFB8000)

2680 
	#AT91C_BASE_PWMC_CH3
 ((
AT91PS_PWMC_CH
) 0xFFFCC260)

2681 
	#AT91C_BASE_PWMC_CH2
 ((
AT91PS_PWMC_CH
) 0xFFFCC240)

2682 
	#AT91C_BASE_PWMC_CH1
 ((
AT91PS_PWMC_CH
) 0xFFFCC220)

2683 
	#AT91C_BASE_PWMC_CH0
 ((
AT91PS_PWMC_CH
) 0xFFFCC200)

2684 
	#AT91C_BASE_PWMC
 ((
AT91PS_PWMC
) 0xFFFCC000)

2685 
	#AT91C_BASE_UDP
 ((
AT91PS_UDP
) 0xFFFB0000)

2686 
	#AT91C_BASE_TC0
 ((
AT91PS_TC
) 0xFFFA0000)

2687 
	#AT91C_BASE_TC1
 ((
AT91PS_TC
) 0xFFFA0040)

2688 
	#AT91C_BASE_TC2
 ((
AT91PS_TC
) 0xFFFA0080)

2689 
	#AT91C_BASE_TCB
 ((
AT91PS_TCB
) 0xFFFA0000)

2690 
	#AT91C_BASE_CAN_MB0
 ((
AT91PS_CAN_MB
) 0xFFFD0200)

2691 
	#AT91C_BASE_CAN_MB1
 ((
AT91PS_CAN_MB
) 0xFFFD0220)

2692 
	#AT91C_BASE_CAN_MB2
 ((
AT91PS_CAN_MB
) 0xFFFD0240)

2693 
	#AT91C_BASE_CAN_MB3
 ((
AT91PS_CAN_MB
) 0xFFFD0260)

2694 
	#AT91C_BASE_CAN_MB4
 ((
AT91PS_CAN_MB
) 0xFFFD0280)

2695 
	#AT91C_BASE_CAN_MB5
 ((
AT91PS_CAN_MB
) 0xFFFD02A0)

2696 
	#AT91C_BASE_CAN_MB6
 ((
AT91PS_CAN_MB
) 0xFFFD02C0)

2697 
	#AT91C_BASE_CAN_MB7
 ((
AT91PS_CAN_MB
) 0xFFFD02E0)

2698 
	#AT91C_BASE_CAN
 ((
AT91PS_CAN
) 0xFFFD0000)

2699 
	#AT91C_BASE_EMAC
 ((
AT91PS_EMAC
) 0xFFFDC000)

2700 
	#AT91C_BASE_PDC_ADC
 ((
AT91PS_PDC
) 0xFFFD8100)

2701 
	#AT91C_BASE_ADC
 ((
AT91PS_ADC
) 0xFFFD8000)

2702 
	#AT91C_BASE_PDC_AES
 ((
AT91PS_PDC
) 0xFFFA4100)

2703 
	#AT91C_BASE_AES
 ((
AT91PS_AES
) 0xFFFA4000)

2704 
	#AT91C_BASE_PDC_TDES
 ((
AT91PS_PDC
) 0xFFFA8100)

2705 
	#AT91C_BASE_TDES
 ((
AT91PS_TDES
) 0xFFFA8000)

2706 

	)

2710 
	#AT91C_ISRAM
 ((*) 0x00200000)

2711 
	#AT91C_ISRAM_SIZE
 (() 0x00010000)

2712 
	#AT91C_IFLASH
 ((*) 0x00100000)

2713 
	#AT91C_IFLASH_SIZE
 (() 0x00040000)

2714 

	)

2715 
	#AT91F_AIC_C⁄figuªIt
–
úq_id
, 
¥i‹ôy
, 
§c_ty≥
, 
√wH™dÀr
 ) \

	)

2717 
	gmask
 ; \

2719 
	gmask
 = 0x1 << 
úq_id
; \

2721 
	gAT91C_BASE_AIC
->
	gAIC_IDCR
 = 
mask
 ; \

2723 
	gAT91C_BASE_AIC
->
	gAIC_SVR
[
úq_id
] = (Ë
√wH™dÀr
 ; \

2725 
	gAT91C_BASE_AIC
->
	gAIC_SMR
[
úq_id
] = 
§c_ty≥
 | 
¥i‹ôy
 ; \

2727 
	gAT91C_BASE_AIC
->
	gAIC_ICCR
 = 
mask
 ; \

	@portable/GCC/ARM7_AT91SAM7S/ioat91sam7x256.h

46 #i‚de‡
AT91SAM7X256_H


47 
	#AT91SAM7X256_H


	)

49 vﬁ©ûê
	tAT91_REG
;

54 
	s_AT91S_SYS
 {

55 
AT91_REG
 
	mAIC_SMR
[32];

56 
AT91_REG
 
	mAIC_SVR
[32];

57 
AT91_REG
 
	mAIC_IVR
;

58 
AT91_REG
 
	mAIC_FVR
;

59 
AT91_REG
 
	mAIC_ISR
;

60 
AT91_REG
 
	mAIC_IPR
;

61 
AT91_REG
 
	mAIC_IMR
;

62 
AT91_REG
 
	mAIC_CISR
;

63 
AT91_REG
 
	mRe£rved0
[2];

64 
AT91_REG
 
	mAIC_IECR
;

65 
AT91_REG
 
	mAIC_IDCR
;

66 
AT91_REG
 
	mAIC_ICCR
;

67 
AT91_REG
 
	mAIC_ISCR
;

68 
AT91_REG
 
	mAIC_EOICR
;

69 
AT91_REG
 
	mAIC_SPU
;

70 
AT91_REG
 
	mAIC_DCR
;

71 
AT91_REG
 
	mRe£rved1
[1];

72 
AT91_REG
 
	mAIC_FFER
;

73 
AT91_REG
 
	mAIC_FFDR
;

74 
AT91_REG
 
	mAIC_FFSR
;

75 
AT91_REG
 
	mRe£rved2
[45];

76 
AT91_REG
 
	mDBGU_CR
;

77 
AT91_REG
 
	mDBGU_MR
;

78 
AT91_REG
 
	mDBGU_IER
;

79 
AT91_REG
 
	mDBGU_IDR
;

80 
AT91_REG
 
	mDBGU_IMR
;

81 
AT91_REG
 
	mDBGU_CSR
;

82 
AT91_REG
 
	mDBGU_RHR
;

83 
AT91_REG
 
	mDBGU_THR
;

84 
AT91_REG
 
	mDBGU_BRGR
;

85 
AT91_REG
 
	mRe£rved3
[7];

86 
AT91_REG
 
	mDBGU_CIDR
;

87 
AT91_REG
 
	mDBGU_EXID
;

88 
AT91_REG
 
	mDBGU_FNTR
;

89 
AT91_REG
 
	mRe£rved4
[45];

90 
AT91_REG
 
	mDBGU_RPR
;

91 
AT91_REG
 
	mDBGU_RCR
;

92 
AT91_REG
 
	mDBGU_TPR
;

93 
AT91_REG
 
	mDBGU_TCR
;

94 
AT91_REG
 
	mDBGU_RNPR
;

95 
AT91_REG
 
	mDBGU_RNCR
;

96 
AT91_REG
 
	mDBGU_TNPR
;

97 
AT91_REG
 
	mDBGU_TNCR
;

98 
AT91_REG
 
	mDBGU_PTCR
;

99 
AT91_REG
 
	mDBGU_PTSR
;

100 
AT91_REG
 
	mRe£rved5
[54];

101 
AT91_REG
 
	mPIOA_PER
;

102 
AT91_REG
 
	mPIOA_PDR
;

103 
AT91_REG
 
	mPIOA_PSR
;

104 
AT91_REG
 
	mRe£rved6
[1];

105 
AT91_REG
 
	mPIOA_OER
;

106 
AT91_REG
 
	mPIOA_ODR
;

107 
AT91_REG
 
	mPIOA_OSR
;

108 
AT91_REG
 
	mRe£rved7
[1];

109 
AT91_REG
 
	mPIOA_IFER
;

110 
AT91_REG
 
	mPIOA_IFDR
;

111 
AT91_REG
 
	mPIOA_IFSR
;

112 
AT91_REG
 
	mRe£rved8
[1];

113 
AT91_REG
 
	mPIOA_SODR
;

114 
AT91_REG
 
	mPIOA_CODR
;

115 
AT91_REG
 
	mPIOA_ODSR
;

116 
AT91_REG
 
	mPIOA_PDSR
;

117 
AT91_REG
 
	mPIOA_IER
;

118 
AT91_REG
 
	mPIOA_IDR
;

119 
AT91_REG
 
	mPIOA_IMR
;

120 
AT91_REG
 
	mPIOA_ISR
;

121 
AT91_REG
 
	mPIOA_MDER
;

122 
AT91_REG
 
	mPIOA_MDDR
;

123 
AT91_REG
 
	mPIOA_MDSR
;

124 
AT91_REG
 
	mRe£rved9
[1];

125 
AT91_REG
 
	mPIOA_PPUDR
;

126 
AT91_REG
 
	mPIOA_PPUER
;

127 
AT91_REG
 
	mPIOA_PPUSR
;

128 
AT91_REG
 
	mRe£rved10
[1];

129 
AT91_REG
 
	mPIOA_ASR
;

130 
AT91_REG
 
	mPIOA_BSR
;

131 
AT91_REG
 
	mPIOA_ABSR
;

132 
AT91_REG
 
	mRe£rved11
[9];

133 
AT91_REG
 
	mPIOA_OWER
;

134 
AT91_REG
 
	mPIOA_OWDR
;

135 
AT91_REG
 
	mPIOA_OWSR
;

136 
AT91_REG
 
	mRe£rved12
[85];

137 
AT91_REG
 
	mPIOB_PER
;

138 
AT91_REG
 
	mPIOB_PDR
;

139 
AT91_REG
 
	mPIOB_PSR
;

140 
AT91_REG
 
	mRe£rved13
[1];

141 
AT91_REG
 
	mPIOB_OER
;

142 
AT91_REG
 
	mPIOB_ODR
;

143 
AT91_REG
 
	mPIOB_OSR
;

144 
AT91_REG
 
	mRe£rved14
[1];

145 
AT91_REG
 
	mPIOB_IFER
;

146 
AT91_REG
 
	mPIOB_IFDR
;

147 
AT91_REG
 
	mPIOB_IFSR
;

148 
AT91_REG
 
	mRe£rved15
[1];

149 
AT91_REG
 
	mPIOB_SODR
;

150 
AT91_REG
 
	mPIOB_CODR
;

151 
AT91_REG
 
	mPIOB_ODSR
;

152 
AT91_REG
 
	mPIOB_PDSR
;

153 
AT91_REG
 
	mPIOB_IER
;

154 
AT91_REG
 
	mPIOB_IDR
;

155 
AT91_REG
 
	mPIOB_IMR
;

156 
AT91_REG
 
	mPIOB_ISR
;

157 
AT91_REG
 
	mPIOB_MDER
;

158 
AT91_REG
 
	mPIOB_MDDR
;

159 
AT91_REG
 
	mPIOB_MDSR
;

160 
AT91_REG
 
	mRe£rved16
[1];

161 
AT91_REG
 
	mPIOB_PPUDR
;

162 
AT91_REG
 
	mPIOB_PPUER
;

163 
AT91_REG
 
	mPIOB_PPUSR
;

164 
AT91_REG
 
	mRe£rved17
[1];

165 
AT91_REG
 
	mPIOB_ASR
;

166 
AT91_REG
 
	mPIOB_BSR
;

167 
AT91_REG
 
	mPIOB_ABSR
;

168 
AT91_REG
 
	mRe£rved18
[9];

169 
AT91_REG
 
	mPIOB_OWER
;

170 
AT91_REG
 
	mPIOB_OWDR
;

171 
AT91_REG
 
	mPIOB_OWSR
;

172 
AT91_REG
 
	mRe£rved19
[341];

173 
AT91_REG
 
	mPMC_SCER
;

174 
AT91_REG
 
	mPMC_SCDR
;

175 
AT91_REG
 
	mPMC_SCSR
;

176 
AT91_REG
 
	mRe£rved20
[1];

177 
AT91_REG
 
	mPMC_PCER
;

178 
AT91_REG
 
	mPMC_PCDR
;

179 
AT91_REG
 
	mPMC_PCSR
;

180 
AT91_REG
 
	mRe£rved21
[1];

181 
AT91_REG
 
	mPMC_MOR
;

182 
AT91_REG
 
	mPMC_MCFR
;

183 
AT91_REG
 
	mRe£rved22
[1];

184 
AT91_REG
 
	mPMC_PLLR
;

185 
AT91_REG
 
	mPMC_MCKR
;

186 
AT91_REG
 
	mRe£rved23
[3];

187 
AT91_REG
 
	mPMC_PCKR
[4];

188 
AT91_REG
 
	mRe£rved24
[4];

189 
AT91_REG
 
	mPMC_IER
;

190 
AT91_REG
 
	mPMC_IDR
;

191 
AT91_REG
 
	mPMC_SR
;

192 
AT91_REG
 
	mPMC_IMR
;

193 
AT91_REG
 
	mRe£rved25
[36];

194 
AT91_REG
 
	mRSTC_RCR
;

195 
AT91_REG
 
	mRSTC_RSR
;

196 
AT91_REG
 
	mRSTC_RMR
;

197 
AT91_REG
 
	mRe£rved26
[5];

198 
AT91_REG
 
	mRTTC_RTMR
;

199 
AT91_REG
 
	mRTTC_RTAR
;

200 
AT91_REG
 
	mRTTC_RTVR
;

201 
AT91_REG
 
	mRTTC_RTSR
;

202 
AT91_REG
 
	mPITC_PIMR
;

203 
AT91_REG
 
	mPITC_PISR
;

204 
AT91_REG
 
	mPITC_PIVR
;

205 
AT91_REG
 
	mPITC_PIIR
;

206 
AT91_REG
 
	mWDTC_WDCR
;

207 
AT91_REG
 
	mWDTC_WDMR
;

208 
AT91_REG
 
	mWDTC_WDSR
;

209 
AT91_REG
 
	mRe£rved27
[5];

210 
AT91_REG
 
	mVREG_MR
;

211 } 
	tAT91S_SYS
, *
	tAT91PS_SYS
;

217 
	s_AT91S_AIC
 {

218 
AT91_REG
 
	mAIC_SMR
[32];

219 
AT91_REG
 
	mAIC_SVR
[32];

220 
AT91_REG
 
	mAIC_IVR
;

221 
AT91_REG
 
	mAIC_FVR
;

222 
AT91_REG
 
	mAIC_ISR
;

223 
AT91_REG
 
	mAIC_IPR
;

224 
AT91_REG
 
	mAIC_IMR
;

225 
AT91_REG
 
	mAIC_CISR
;

226 
AT91_REG
 
	mRe£rved0
[2];

227 
AT91_REG
 
	mAIC_IECR
;

228 
AT91_REG
 
	mAIC_IDCR
;

229 
AT91_REG
 
	mAIC_ICCR
;

230 
AT91_REG
 
	mAIC_ISCR
;

231 
AT91_REG
 
	mAIC_EOICR
;

232 
AT91_REG
 
	mAIC_SPU
;

233 
AT91_REG
 
	mAIC_DCR
;

234 
AT91_REG
 
	mRe£rved1
[1];

235 
AT91_REG
 
	mAIC_FFER
;

236 
AT91_REG
 
	mAIC_FFDR
;

237 
AT91_REG
 
	mAIC_FFSR
;

238 } 
	tAT91S_AIC
, *
	tAT91PS_AIC
;

241 
	#AT91C_AIC_PRIOR
 (() 0x7 << 0)

242 
	#AT91C_AIC_PRIOR_LOWEST
 (() 0x0)

243 
	#AT91C_AIC_PRIOR_HIGHEST
 (() 0x7)

244 
	#AT91C_AIC_SRCTYPE
 (() 0x3 << 5)

245 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (() 0x0 << 5)

246 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (() 0x0 << 5)

247 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (() 0x1 << 5)

248 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (() 0x1 << 5)

249 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (() 0x2 << 5)

250 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (() 0x3 << 5)

252 
	#AT91C_AIC_NFIQ
 (() 0x1 << 0)

253 
	#AT91C_AIC_NIRQ
 (() 0x1 << 1)

255 
	#AT91C_AIC_DCR_PROT
 (() 0x1 << 0)

256 
	#AT91C_AIC_DCR_GMSK
 (() 0x1 << 1)

257 

	)

261 
	s_AT91S_PDC
 {

262 
AT91_REG
 
	mPDC_RPR
;

263 
AT91_REG
 
	mPDC_RCR
;

264 
AT91_REG
 
	mPDC_TPR
;

265 
AT91_REG
 
	mPDC_TCR
;

266 
AT91_REG
 
	mPDC_RNPR
;

267 
AT91_REG
 
	mPDC_RNCR
;

268 
AT91_REG
 
	mPDC_TNPR
;

269 
AT91_REG
 
	mPDC_TNCR
;

270 
AT91_REG
 
	mPDC_PTCR
;

271 
AT91_REG
 
	mPDC_PTSR
;

272 } 
	tAT91S_PDC
, *
	tAT91PS_PDC
;

275 
	#AT91C_PDC_RXTEN
 (() 0x1 << 0)

276 
	#AT91C_PDC_RXTDIS
 (() 0x1 << 1)

277 
	#AT91C_PDC_TXTEN
 (() 0x1 << 8)

278 
	#AT91C_PDC_TXTDIS
 (() 0x1 << 9)

280 

	)

284 
	s_AT91S_DBGU
 {

285 
AT91_REG
 
	mDBGU_CR
;

286 
AT91_REG
 
	mDBGU_MR
;

287 
AT91_REG
 
	mDBGU_IER
;

288 
AT91_REG
 
	mDBGU_IDR
;

289 
AT91_REG
 
	mDBGU_IMR
;

290 
AT91_REG
 
	mDBGU_CSR
;

291 
AT91_REG
 
	mDBGU_RHR
;

292 
AT91_REG
 
	mDBGU_THR
;

293 
AT91_REG
 
	mDBGU_BRGR
;

294 
AT91_REG
 
	mRe£rved0
[7];

295 
AT91_REG
 
	mDBGU_CIDR
;

296 
AT91_REG
 
	mDBGU_EXID
;

297 
AT91_REG
 
	mDBGU_FNTR
;

298 
AT91_REG
 
	mRe£rved1
[45];

299 
AT91_REG
 
	mDBGU_RPR
;

300 
AT91_REG
 
	mDBGU_RCR
;

301 
AT91_REG
 
	mDBGU_TPR
;

302 
AT91_REG
 
	mDBGU_TCR
;

303 
AT91_REG
 
	mDBGU_RNPR
;

304 
AT91_REG
 
	mDBGU_RNCR
;

305 
AT91_REG
 
	mDBGU_TNPR
;

306 
AT91_REG
 
	mDBGU_TNCR
;

307 
AT91_REG
 
	mDBGU_PTCR
;

308 
AT91_REG
 
	mDBGU_PTSR
;

309 } 
	tAT91S_DBGU
, *
	tAT91PS_DBGU
;

312 
	#AT91C_US_RSTRX
 (() 0x1 << 2)

313 
	#AT91C_US_RSTTX
 (() 0x1 << 3)

314 
	#AT91C_US_RXEN
 (() 0x1 << 4)

315 
	#AT91C_US_RXDIS
 (() 0x1 << 5)

316 
	#AT91C_US_TXEN
 (() 0x1 << 6)

317 
	#AT91C_US_TXDIS
 (() 0x1 << 7)

318 
	#AT91C_US_RSTSTA
 (() 0x1 << 8)

320 
	#AT91C_US_PAR
 (() 0x7 << 9)

321 
	#AT91C_US_PAR_EVEN
 (() 0x0 << 9)

322 
	#AT91C_US_PAR_ODD
 (() 0x1 << 9)

323 
	#AT91C_US_PAR_SPACE
 (() 0x2 << 9)

324 
	#AT91C_US_PAR_MARK
 (() 0x3 << 9)

325 
	#AT91C_US_PAR_NONE
 (() 0x4 << 9)

326 
	#AT91C_US_PAR_MULTI_DROP
 (() 0x6 << 9)

327 
	#AT91C_US_CHMODE
 (() 0x3 << 14)

328 
	#AT91C_US_CHMODE_NORMAL
 (() 0x0 << 14)

329 
	#AT91C_US_CHMODE_AUTO
 (() 0x1 << 14)

330 
	#AT91C_US_CHMODE_LOCAL
 (() 0x2 << 14)

331 
	#AT91C_US_CHMODE_REMOTE
 (() 0x3 << 14)

333 
	#AT91C_US_RXRDY
 (() 0x1 << 0)

334 
	#AT91C_US_TXRDY
 (() 0x1 << 1)

335 
	#AT91C_US_ENDRX
 (() 0x1 << 3)

336 
	#AT91C_US_ENDTX
 (() 0x1 << 4)

337 
	#AT91C_US_OVRE
 (() 0x1 << 5)

338 
	#AT91C_US_FRAME
 (() 0x1 << 6)

339 
	#AT91C_US_PARE
 (() 0x1 << 7)

340 
	#AT91C_US_TXEMPTY
 (() 0x1 << 9)

341 
	#AT91C_US_TXBUFE
 (() 0x1 << 11)

342 
	#AT91C_US_RXBUFF
 (() 0x1 << 12)

343 
	#AT91C_US_COMM_TX
 (() 0x1 << 30)

344 
	#AT91C_US_COMM_RX
 (() 0x1 << 31)

349 
	#AT91C_US_FORCE_NTRST
 (() 0x1 << 0)

350 

	)

354 
	s_AT91S_PIO
 {

355 
AT91_REG
 
	mPIO_PER
;

356 
AT91_REG
 
	mPIO_PDR
;

357 
AT91_REG
 
	mPIO_PSR
;

358 
AT91_REG
 
	mRe£rved0
[1];

359 
AT91_REG
 
	mPIO_OER
;

360 
AT91_REG
 
	mPIO_ODR
;

361 
AT91_REG
 
	mPIO_OSR
;

362 
AT91_REG
 
	mRe£rved1
[1];

363 
AT91_REG
 
	mPIO_IFER
;

364 
AT91_REG
 
	mPIO_IFDR
;

365 
AT91_REG
 
	mPIO_IFSR
;

366 
AT91_REG
 
	mRe£rved2
[1];

367 
AT91_REG
 
	mPIO_SODR
;

368 
AT91_REG
 
	mPIO_CODR
;

369 
AT91_REG
 
	mPIO_ODSR
;

370 
AT91_REG
 
	mPIO_PDSR
;

371 
AT91_REG
 
	mPIO_IER
;

372 
AT91_REG
 
	mPIO_IDR
;

373 
AT91_REG
 
	mPIO_IMR
;

374 
AT91_REG
 
	mPIO_ISR
;

375 
AT91_REG
 
	mPIO_MDER
;

376 
AT91_REG
 
	mPIO_MDDR
;

377 
AT91_REG
 
	mPIO_MDSR
;

378 
AT91_REG
 
	mRe£rved3
[1];

379 
AT91_REG
 
	mPIO_PPUDR
;

380 
AT91_REG
 
	mPIO_PPUER
;

381 
AT91_REG
 
	mPIO_PPUSR
;

382 
AT91_REG
 
	mRe£rved4
[1];

383 
AT91_REG
 
	mPIO_ASR
;

384 
AT91_REG
 
	mPIO_BSR
;

385 
AT91_REG
 
	mPIO_ABSR
;

386 
AT91_REG
 
	mRe£rved5
[9];

387 
AT91_REG
 
	mPIO_OWER
;

388 
AT91_REG
 
	mPIO_OWDR
;

389 
AT91_REG
 
	mPIO_OWSR
;

390 } 
	tAT91S_PIO
, *
	tAT91PS_PIO
;

396 
	s_AT91S_CKGR
 {

397 
AT91_REG
 
	mCKGR_MOR
;

398 
AT91_REG
 
	mCKGR_MCFR
;

399 
AT91_REG
 
	mRe£rved0
[1];

400 
AT91_REG
 
	mCKGR_PLLR
;

401 } 
	tAT91S_CKGR
, *
	tAT91PS_CKGR
;

404 
	#AT91C_CKGR_MOSCEN
 (() 0x1 << 0)

405 
	#AT91C_CKGR_OSCBYPASS
 (() 0x1 << 1)

406 
	#AT91C_CKGR_OSCOUNT
 (() 0xFF << 8)

408 
	#AT91C_CKGR_MAINF
 (() 0xFFFF << 0)

409 
	#AT91C_CKGR_MAINRDY
 (() 0x1 << 16)

411 
	#AT91C_CKGR_DIV
 (() 0xFF << 0)

412 
	#AT91C_CKGR_DIV_0
 (() 0x0)

413 
	#AT91C_CKGR_DIV_BYPASS
 (() 0x1)

414 
	#AT91C_CKGR_PLLCOUNT
 (() 0x3F << 8)

415 
	#AT91C_CKGR_OUT
 (() 0x3 << 14)

416 
	#AT91C_CKGR_OUT_0
 (() 0x0 << 14)

417 
	#AT91C_CKGR_OUT_1
 (() 0x1 << 14)

418 
	#AT91C_CKGR_OUT_2
 (() 0x2 << 14)

419 
	#AT91C_CKGR_OUT_3
 (() 0x3 << 14)

420 
	#AT91C_CKGR_MUL
 (() 0x7FF << 16)

421 
	#AT91C_CKGR_USBDIV
 (() 0x3 << 28)

422 
	#AT91C_CKGR_USBDIV_0
 (() 0x0 << 28)

423 
	#AT91C_CKGR_USBDIV_1
 (() 0x1 << 28)

424 
	#AT91C_CKGR_USBDIV_2
 (() 0x2 << 28)

425 

	)

429 
	s_AT91S_PMC
 {

430 
AT91_REG
 
	mPMC_SCER
;

431 
AT91_REG
 
	mPMC_SCDR
;

432 
AT91_REG
 
	mPMC_SCSR
;

433 
AT91_REG
 
	mRe£rved0
[1];

434 
AT91_REG
 
	mPMC_PCER
;

435 
AT91_REG
 
	mPMC_PCDR
;

436 
AT91_REG
 
	mPMC_PCSR
;

437 
AT91_REG
 
	mRe£rved1
[1];

438 
AT91_REG
 
	mPMC_MOR
;

439 
AT91_REG
 
	mPMC_MCFR
;

440 
AT91_REG
 
	mRe£rved2
[1];

441 
AT91_REG
 
	mPMC_PLLR
;

442 
AT91_REG
 
	mPMC_MCKR
;

443 
AT91_REG
 
	mRe£rved3
[3];

444 
AT91_REG
 
	mPMC_PCKR
[4];

445 
AT91_REG
 
	mRe£rved4
[4];

446 
AT91_REG
 
	mPMC_IER
;

447 
AT91_REG
 
	mPMC_IDR
;

448 
AT91_REG
 
	mPMC_SR
;

449 
AT91_REG
 
	mPMC_IMR
;

450 } 
	tAT91S_PMC
, *
	tAT91PS_PMC
;

453 
	#AT91C_PMC_PCK
 (() 0x1 << 0)

454 
	#AT91C_PMC_UDP
 (() 0x1 << 7)

455 
	#AT91C_PMC_PCK0
 (() 0x1 << 8)

456 
	#AT91C_PMC_PCK1
 (() 0x1 << 9)

457 
	#AT91C_PMC_PCK2
 (() 0x1 << 10)

458 
	#AT91C_PMC_PCK3
 (() 0x1 << 11)

465 
	#AT91C_PMC_CSS
 (() 0x3 << 0)

466 
	#AT91C_PMC_CSS_SLOW_CLK
 (() 0x0)

467 
	#AT91C_PMC_CSS_MAIN_CLK
 (() 0x1)

468 
	#AT91C_PMC_CSS_PLL_CLK
 (() 0x3)

469 
	#AT91C_PMC_PRES
 (() 0x7 << 2)

470 
	#AT91C_PMC_PRES_CLK
 (() 0x0 << 2)

471 
	#AT91C_PMC_PRES_CLK_2
 (() 0x1 << 2)

472 
	#AT91C_PMC_PRES_CLK_4
 (() 0x2 << 2)

473 
	#AT91C_PMC_PRES_CLK_8
 (() 0x3 << 2)

474 
	#AT91C_PMC_PRES_CLK_16
 (() 0x4 << 2)

475 
	#AT91C_PMC_PRES_CLK_32
 (() 0x5 << 2)

476 
	#AT91C_PMC_PRES_CLK_64
 (() 0x6 << 2)

479 
	#AT91C_PMC_MOSCS
 (() 0x1 << 0)

480 
	#AT91C_PMC_LOCK
 (() 0x1 << 2)

481 
	#AT91C_PMC_MCKRDY
 (() 0x1 << 3)

482 
	#AT91C_PMC_PCK0RDY
 (() 0x1 << 8)

483 
	#AT91C_PMC_PCK1RDY
 (() 0x1 << 9)

484 
	#AT91C_PMC_PCK2RDY
 (() 0x1 << 10)

485 
	#AT91C_PMC_PCK3RDY
 (() 0x1 << 11)

489 

	)

493 
	s_AT91S_RSTC
 {

494 
AT91_REG
 
	mRSTC_RCR
;

495 
AT91_REG
 
	mRSTC_RSR
;

496 
AT91_REG
 
	mRSTC_RMR
;

497 } 
	tAT91S_RSTC
, *
	tAT91PS_RSTC
;

500 
	#AT91C_RSTC_PROCRST
 (() 0x1 << 0)

501 
	#AT91C_RSTC_PERRST
 (() 0x1 << 2)

502 
	#AT91C_RSTC_EXTRST
 (() 0x1 << 3)

503 
	#AT91C_RSTC_KEY
 (() 0xFF << 24)

505 
	#AT91C_RSTC_URSTS
 (() 0x1 << 0)

506 
	#AT91C_RSTC_BODSTS
 (() 0x1 << 1)

507 
	#AT91C_RSTC_RSTTYP
 (() 0x7 << 8)

508 
	#AT91C_RSTC_RSTTYP_POWERUP
 (() 0x0 << 8)

509 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (() 0x1 << 8)

510 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (() 0x2 << 8)

511 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (() 0x3 << 8)

512 
	#AT91C_RSTC_RSTTYP_USER
 (() 0x4 << 8)

513 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (() 0x5 << 8)

514 
	#AT91C_RSTC_NRSTL
 (() 0x1 << 16)

515 
	#AT91C_RSTC_SRCMP
 (() 0x1 << 17)

517 
	#AT91C_RSTC_URSTEN
 (() 0x1 << 0)

518 
	#AT91C_RSTC_URSTIEN
 (() 0x1 << 4)

519 
	#AT91C_RSTC_ERSTL
 (() 0xF << 8)

520 
	#AT91C_RSTC_BODIEN
 (() 0x1 << 16)

521 

	)

525 
	s_AT91S_RTTC
 {

526 
AT91_REG
 
	mRTTC_RTMR
;

527 
AT91_REG
 
	mRTTC_RTAR
;

528 
AT91_REG
 
	mRTTC_RTVR
;

529 
AT91_REG
 
	mRTTC_RTSR
;

530 } 
	tAT91S_RTTC
, *
	tAT91PS_RTTC
;

533 
	#AT91C_RTTC_RTPRES
 (() 0xFFFF << 0)

534 
	#AT91C_RTTC_ALMIEN
 (() 0x1 << 16)

535 
	#AT91C_RTTC_RTTINCIEN
 (() 0x1 << 17)

536 
	#AT91C_RTTC_RTTRST
 (() 0x1 << 18)

538 
	#AT91C_RTTC_ALMV
 (() 0x0 << 0)

540 
	#AT91C_RTTC_CRTV
 (() 0x0 << 0)

542 
	#AT91C_RTTC_ALMS
 (() 0x1 << 0)

543 
	#AT91C_RTTC_RTTINC
 (() 0x1 << 1)

544 

	)

548 
	s_AT91S_PITC
 {

549 
AT91_REG
 
	mPITC_PIMR
;

550 
AT91_REG
 
	mPITC_PISR
;

551 
AT91_REG
 
	mPITC_PIVR
;

552 
AT91_REG
 
	mPITC_PIIR
;

553 } 
	tAT91S_PITC
, *
	tAT91PS_PITC
;

556 
	#AT91C_PITC_PIV
 (() 0xFFFFF << 0)

557 
	#AT91C_PITC_PITEN
 (() 0x1 << 24)

558 
	#AT91C_PITC_PITIEN
 (() 0x1 << 25)

560 
	#AT91C_PITC_PITS
 (() 0x1 << 0)

562 
	#AT91C_PITC_CPIV
 (() 0xFFFFF << 0)

563 
	#AT91C_PITC_PICNT
 (() 0xFFF << 20)

565 

	)

569 
	s_AT91S_WDTC
 {

570 
AT91_REG
 
	mWDTC_WDCR
;

571 
AT91_REG
 
	mWDTC_WDMR
;

572 
AT91_REG
 
	mWDTC_WDSR
;

573 } 
	tAT91S_WDTC
, *
	tAT91PS_WDTC
;

576 
	#AT91C_WDTC_WDRSTT
 (() 0x1 << 0)

577 
	#AT91C_WDTC_KEY
 (() 0xFF << 24)

579 
	#AT91C_WDTC_WDV
 (() 0xFFF << 0)

580 
	#AT91C_WDTC_WDFIEN
 (() 0x1 << 12)

581 
	#AT91C_WDTC_WDRSTEN
 (() 0x1 << 13)

582 
	#AT91C_WDTC_WDRPROC
 (() 0x1 << 14)

583 
	#AT91C_WDTC_WDDIS
 (() 0x1 << 15)

584 
	#AT91C_WDTC_WDD
 (() 0xFFF << 16)

585 
	#AT91C_WDTC_WDDBGHLT
 (() 0x1 << 28)

586 
	#AT91C_WDTC_WDIDLEHLT
 (() 0x1 << 29)

588 
	#AT91C_WDTC_WDUNF
 (() 0x1 << 0)

589 
	#AT91C_WDTC_WDERR
 (() 0x1 << 1)

590 

	)

594 
	s_AT91S_VREG
 {

595 
AT91_REG
 
	mVREG_MR
;

596 } 
	tAT91S_VREG
, *
	tAT91PS_VREG
;

599 
	#AT91C_VREG_PSTDBY
 (() 0x1 << 0)

600 

	)

604 
	s_AT91S_MC
 {

605 
AT91_REG
 
	mMC_RCR
;

606 
AT91_REG
 
	mMC_ASR
;

607 
AT91_REG
 
	mMC_AASR
;

608 
AT91_REG
 
	mRe£rved0
[21];

609 
AT91_REG
 
	mMC_FMR
;

610 
AT91_REG
 
	mMC_FCR
;

611 
AT91_REG
 
	mMC_FSR
;

612 } 
	tAT91S_MC
, *
	tAT91PS_MC
;

615 
	#AT91C_MC_RCB
 (() 0x1 << 0)

617 
	#AT91C_MC_UNDADD
 (() 0x1 << 0)

618 
	#AT91C_MC_MISADD
 (() 0x1 << 1)

619 
	#AT91C_MC_ABTSZ
 (() 0x3 << 8)

620 
	#AT91C_MC_ABTSZ_BYTE
 (() 0x0 << 8)

621 
	#AT91C_MC_ABTSZ_HWORD
 (() 0x1 << 8)

622 
	#AT91C_MC_ABTSZ_WORD
 (() 0x2 << 8)

623 
	#AT91C_MC_ABTTYP
 (() 0x3 << 10)

624 
	#AT91C_MC_ABTTYP_DATAR
 (() 0x0 << 10)

625 
	#AT91C_MC_ABTTYP_DATAW
 (() 0x1 << 10)

626 
	#AT91C_MC_ABTTYP_FETCH
 (() 0x2 << 10)

627 
	#AT91C_MC_MST0
 (() 0x1 << 16)

628 
	#AT91C_MC_MST1
 (() 0x1 << 17)

629 
	#AT91C_MC_SVMST0
 (() 0x1 << 24)

630 
	#AT91C_MC_SVMST1
 (() 0x1 << 25)

632 
	#AT91C_MC_FRDY
 (() 0x1 << 0)

633 
	#AT91C_MC_LOCKE
 (() 0x1 << 2)

634 
	#AT91C_MC_PROGE
 (() 0x1 << 3)

635 
	#AT91C_MC_NEBP
 (() 0x1 << 7)

636 
	#AT91C_MC_FWS
 (() 0x3 << 8)

637 
	#AT91C_MC_FWS_0FWS
 (() 0x0 << 8)

638 
	#AT91C_MC_FWS_1FWS
 (() 0x1 << 8)

639 
	#AT91C_MC_FWS_2FWS
 (() 0x2 << 8)

640 
	#AT91C_MC_FWS_3FWS
 (() 0x3 << 8)

641 
	#AT91C_MC_FMCN
 (() 0xFF << 16)

643 
	#AT91C_MC_FCMD
 (() 0xF << 0)

644 
	#AT91C_MC_FCMD_START_PROG
 (() 0x1)

645 
	#AT91C_MC_FCMD_LOCK
 (() 0x2)

646 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (() 0x3)

647 
	#AT91C_MC_FCMD_UNLOCK
 (() 0x4)

648 
	#AT91C_MC_FCMD_ERASE_ALL
 (() 0x8)

649 
	#AT91C_MC_FCMD_SET_GP_NVM
 (() 0xB)

650 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (() 0xD)

651 
	#AT91C_MC_FCMD_SET_SECURITY
 (() 0xF)

652 
	#AT91C_MC_PAGEN
 (() 0x3FF << 8)

653 
	#AT91C_MC_KEY
 (() 0xFF << 24)

655 
	#AT91C_MC_SECURITY
 (() 0x1 << 4)

656 
	#AT91C_MC_GPNVM0
 (() 0x1 << 8)

657 
	#AT91C_MC_GPNVM1
 (() 0x1 << 9)

658 
	#AT91C_MC_GPNVM2
 (() 0x1 << 10)

659 
	#AT91C_MC_GPNVM3
 (() 0x1 << 11)

660 
	#AT91C_MC_GPNVM4
 (() 0x1 << 12)

661 
	#AT91C_MC_GPNVM5
 (() 0x1 << 13)

662 
	#AT91C_MC_GPNVM6
 (() 0x1 << 14)

663 
	#AT91C_MC_GPNVM7
 (() 0x1 << 15)

664 
	#AT91C_MC_LOCKS0
 (() 0x1 << 16)

665 
	#AT91C_MC_LOCKS1
 (() 0x1 << 17)

666 
	#AT91C_MC_LOCKS2
 (() 0x1 << 18)

667 
	#AT91C_MC_LOCKS3
 (() 0x1 << 19)

668 
	#AT91C_MC_LOCKS4
 (() 0x1 << 20)

669 
	#AT91C_MC_LOCKS5
 (() 0x1 << 21)

670 
	#AT91C_MC_LOCKS6
 (() 0x1 << 22)

671 
	#AT91C_MC_LOCKS7
 (() 0x1 << 23)

672 
	#AT91C_MC_LOCKS8
 (() 0x1 << 24)

673 
	#AT91C_MC_LOCKS9
 (() 0x1 << 25)

674 
	#AT91C_MC_LOCKS10
 (() 0x1 << 26)

675 
	#AT91C_MC_LOCKS11
 (() 0x1 << 27)

676 
	#AT91C_MC_LOCKS12
 (() 0x1 << 28)

677 
	#AT91C_MC_LOCKS13
 (() 0x1 << 29)

678 
	#AT91C_MC_LOCKS14
 (() 0x1 << 30)

679 
	#AT91C_MC_LOCKS15
 (() 0x1 << 31)

680 

	)

684 
	s_AT91S_SPI
 {

685 
AT91_REG
 
	mSPI_CR
;

686 
AT91_REG
 
	mSPI_MR
;

687 
AT91_REG
 
	mSPI_RDR
;

688 
AT91_REG
 
	mSPI_TDR
;

689 
AT91_REG
 
	mSPI_SR
;

690 
AT91_REG
 
	mSPI_IER
;

691 
AT91_REG
 
	mSPI_IDR
;

692 
AT91_REG
 
	mSPI_IMR
;

693 
AT91_REG
 
	mRe£rved0
[4];

694 
AT91_REG
 
	mSPI_CSR
[4];

695 
AT91_REG
 
	mRe£rved1
[48];

696 
AT91_REG
 
	mSPI_RPR
;

697 
AT91_REG
 
	mSPI_RCR
;

698 
AT91_REG
 
	mSPI_TPR
;

699 
AT91_REG
 
	mSPI_TCR
;

700 
AT91_REG
 
	mSPI_RNPR
;

701 
AT91_REG
 
	mSPI_RNCR
;

702 
AT91_REG
 
	mSPI_TNPR
;

703 
AT91_REG
 
	mSPI_TNCR
;

704 
AT91_REG
 
	mSPI_PTCR
;

705 
AT91_REG
 
	mSPI_PTSR
;

706 } 
	tAT91S_SPI
, *
	tAT91PS_SPI
;

709 
	#AT91C_SPI_SPIEN
 (() 0x1 << 0)

710 
	#AT91C_SPI_SPIDIS
 (() 0x1 << 1)

711 
	#AT91C_SPI_SWRST
 (() 0x1 << 7)

712 
	#AT91C_SPI_LASTXFER
 (() 0x1 << 24)

714 
	#AT91C_SPI_MSTR
 (() 0x1 << 0)

715 
	#AT91C_SPI_PS
 (() 0x1 << 1)

716 
	#AT91C_SPI_PS_FIXED
 (() 0x0 << 1)

717 
	#AT91C_SPI_PS_VARIABLE
 (() 0x1 << 1)

718 
	#AT91C_SPI_PCSDEC
 (() 0x1 << 2)

719 
	#AT91C_SPI_FDIV
 (() 0x1 << 3)

720 
	#AT91C_SPI_MODFDIS
 (() 0x1 << 4)

721 
	#AT91C_SPI_LLB
 (() 0x1 << 7)

722 
	#AT91C_SPI_PCS
 (() 0xF << 16)

723 
	#AT91C_SPI_DLYBCS
 (() 0xFF << 24)

725 
	#AT91C_SPI_RD
 (() 0xFFFF << 0)

726 
	#AT91C_SPI_RPCS
 (() 0xF << 16)

728 
	#AT91C_SPI_TD
 (() 0xFFFF << 0)

729 
	#AT91C_SPI_TPCS
 (() 0xF << 16)

731 
	#AT91C_SPI_RDRF
 (() 0x1 << 0)

732 
	#AT91C_SPI_TDRE
 (() 0x1 << 1)

733 
	#AT91C_SPI_MODF
 (() 0x1 << 2)

734 
	#AT91C_SPI_OVRES
 (() 0x1 << 3)

735 
	#AT91C_SPI_ENDRX
 (() 0x1 << 4)

736 
	#AT91C_SPI_ENDTX
 (() 0x1 << 5)

737 
	#AT91C_SPI_RXBUFF
 (() 0x1 << 6)

738 
	#AT91C_SPI_TXBUFE
 (() 0x1 << 7)

739 
	#AT91C_SPI_NSSR
 (() 0x1 << 8)

740 
	#AT91C_SPI_TXEMPTY
 (() 0x1 << 9)

741 
	#AT91C_SPI_SPIENS
 (() 0x1 << 16)

746 
	#AT91C_SPI_CPOL
 (() 0x1 << 0)

747 
	#AT91C_SPI_NCPHA
 (() 0x1 << 1)

748 
	#AT91C_SPI_CSAAT
 (() 0x1 << 3)

749 
	#AT91C_SPI_BITS
 (() 0xF << 4)

750 
	#AT91C_SPI_BITS_8
 (() 0x0 << 4)

751 
	#AT91C_SPI_BITS_9
 (() 0x1 << 4)

752 
	#AT91C_SPI_BITS_10
 (() 0x2 << 4)

753 
	#AT91C_SPI_BITS_11
 (() 0x3 << 4)

754 
	#AT91C_SPI_BITS_12
 (() 0x4 << 4)

755 
	#AT91C_SPI_BITS_13
 (() 0x5 << 4)

756 
	#AT91C_SPI_BITS_14
 (() 0x6 << 4)

757 
	#AT91C_SPI_BITS_15
 (() 0x7 << 4)

758 
	#AT91C_SPI_BITS_16
 (() 0x8 << 4)

759 
	#AT91C_SPI_SCBR
 (() 0xFF << 8)

760 
	#AT91C_SPI_DLYBS
 (() 0xFF << 16)

761 
	#AT91C_SPI_DLYBCT
 (() 0xFF << 24)

762 

	)

766 
	s_AT91S_USART
 {

767 
AT91_REG
 
	mUS_CR
;

768 
AT91_REG
 
	mUS_MR
;

769 
AT91_REG
 
	mUS_IER
;

770 
AT91_REG
 
	mUS_IDR
;

771 
AT91_REG
 
	mUS_IMR
;

772 
AT91_REG
 
	mUS_CSR
;

773 
AT91_REG
 
	mUS_RHR
;

774 
AT91_REG
 
	mUS_THR
;

775 
AT91_REG
 
	mUS_BRGR
;

776 
AT91_REG
 
	mUS_RTOR
;

777 
AT91_REG
 
	mUS_TTGR
;

778 
AT91_REG
 
	mRe£rved0
[5];

779 
AT91_REG
 
	mUS_FIDI
;

780 
AT91_REG
 
	mUS_NER
;

781 
AT91_REG
 
	mRe£rved1
[1];

782 
AT91_REG
 
	mUS_IF
;

783 
AT91_REG
 
	mRe£rved2
[44];

784 
AT91_REG
 
	mUS_RPR
;

785 
AT91_REG
 
	mUS_RCR
;

786 
AT91_REG
 
	mUS_TPR
;

787 
AT91_REG
 
	mUS_TCR
;

788 
AT91_REG
 
	mUS_RNPR
;

789 
AT91_REG
 
	mUS_RNCR
;

790 
AT91_REG
 
	mUS_TNPR
;

791 
AT91_REG
 
	mUS_TNCR
;

792 
AT91_REG
 
	mUS_PTCR
;

793 
AT91_REG
 
	mUS_PTSR
;

794 } 
	tAT91S_USART
, *
	tAT91PS_USART
;

797 
	#AT91C_US_STTBRK
 (() 0x1 << 9)

798 
	#AT91C_US_STPBRK
 (() 0x1 << 10)

799 
	#AT91C_US_STTTO
 (() 0x1 << 11)

800 
	#AT91C_US_SENDA
 (() 0x1 << 12)

801 
	#AT91C_US_RSTIT
 (() 0x1 << 13)

802 
	#AT91C_US_RSTNACK
 (() 0x1 << 14)

803 
	#AT91C_US_RETTO
 (() 0x1 << 15)

804 
	#AT91C_US_DTREN
 (() 0x1 << 16)

805 
	#AT91C_US_DTRDIS
 (() 0x1 << 17)

806 
	#AT91C_US_RTSEN
 (() 0x1 << 18)

807 
	#AT91C_US_RTSDIS
 (() 0x1 << 19)

809 
	#AT91C_US_USMODE
 (() 0xF << 0)

810 
	#AT91C_US_USMODE_NORMAL
 (() 0x0)

811 
	#AT91C_US_USMODE_RS485
 (() 0x1)

812 
	#AT91C_US_USMODE_HWHSH
 (() 0x2)

813 
	#AT91C_US_USMODE_MODEM
 (() 0x3)

814 
	#AT91C_US_USMODE_ISO7816_0
 (() 0x4)

815 
	#AT91C_US_USMODE_ISO7816_1
 (() 0x6)

816 
	#AT91C_US_USMODE_IRDA
 (() 0x8)

817 
	#AT91C_US_USMODE_SWHSH
 (() 0xC)

818 
	#AT91C_US_CLKS
 (() 0x3 << 4)

819 
	#AT91C_US_CLKS_CLOCK
 (() 0x0 << 4)

820 
	#AT91C_US_CLKS_FDIV1
 (() 0x1 << 4)

821 
	#AT91C_US_CLKS_SLOW
 (() 0x2 << 4)

822 
	#AT91C_US_CLKS_EXT
 (() 0x3 << 4)

823 
	#AT91C_US_CHRL
 (() 0x3 << 6)

824 
	#AT91C_US_CHRL_5_BITS
 (() 0x0 << 6)

825 
	#AT91C_US_CHRL_6_BITS
 (() 0x1 << 6)

826 
	#AT91C_US_CHRL_7_BITS
 (() 0x2 << 6)

827 
	#AT91C_US_CHRL_8_BITS
 (() 0x3 << 6)

828 
	#AT91C_US_SYNC
 (() 0x1 << 8)

829 
	#AT91C_US_NBSTOP
 (() 0x3 << 12)

830 
	#AT91C_US_NBSTOP_1_BIT
 (() 0x0 << 12)

831 
	#AT91C_US_NBSTOP_15_BIT
 (() 0x1 << 12)

832 
	#AT91C_US_NBSTOP_2_BIT
 (() 0x2 << 12)

833 
	#AT91C_US_MSBF
 (() 0x1 << 16)

834 
	#AT91C_US_MODE9
 (() 0x1 << 17)

835 
	#AT91C_US_CKLO
 (() 0x1 << 18)

836 
	#AT91C_US_OVER
 (() 0x1 << 19)

837 
	#AT91C_US_INACK
 (() 0x1 << 20)

838 
	#AT91C_US_DSNACK
 (() 0x1 << 21)

839 
	#AT91C_US_MAX_ITER
 (() 0x1 << 24)

840 
	#AT91C_US_FILTER
 (() 0x1 << 28)

842 
	#AT91C_US_RXBRK
 (() 0x1 << 2)

843 
	#AT91C_US_TIMEOUT
 (() 0x1 << 8)

844 
	#AT91C_US_ITERATION
 (() 0x1 << 10)

845 
	#AT91C_US_NACK
 (() 0x1 << 13)

846 
	#AT91C_US_RIIC
 (() 0x1 << 16)

847 
	#AT91C_US_DSRIC
 (() 0x1 << 17)

848 
	#AT91C_US_DCDIC
 (() 0x1 << 18)

849 
	#AT91C_US_CTSIC
 (() 0x1 << 19)

853 
	#AT91C_US_RI
 (() 0x1 << 20)

854 
	#AT91C_US_DSR
 (() 0x1 << 21)

855 
	#AT91C_US_DCD
 (() 0x1 << 22)

856 
	#AT91C_US_CTS
 (() 0x1 << 23)

857 

	)

861 
	s_AT91S_SSC
 {

862 
AT91_REG
 
	mSSC_CR
;

863 
AT91_REG
 
	mSSC_CMR
;

864 
AT91_REG
 
	mRe£rved0
[2];

865 
AT91_REG
 
	mSSC_RCMR
;

866 
AT91_REG
 
	mSSC_RFMR
;

867 
AT91_REG
 
	mSSC_TCMR
;

868 
AT91_REG
 
	mSSC_TFMR
;

869 
AT91_REG
 
	mSSC_RHR
;

870 
AT91_REG
 
	mSSC_THR
;

871 
AT91_REG
 
	mRe£rved1
[2];

872 
AT91_REG
 
	mSSC_RSHR
;

873 
AT91_REG
 
	mSSC_TSHR
;

874 
AT91_REG
 
	mRe£rved2
[2];

875 
AT91_REG
 
	mSSC_SR
;

876 
AT91_REG
 
	mSSC_IER
;

877 
AT91_REG
 
	mSSC_IDR
;

878 
AT91_REG
 
	mSSC_IMR
;

879 
AT91_REG
 
	mRe£rved3
[44];

880 
AT91_REG
 
	mSSC_RPR
;

881 
AT91_REG
 
	mSSC_RCR
;

882 
AT91_REG
 
	mSSC_TPR
;

883 
AT91_REG
 
	mSSC_TCR
;

884 
AT91_REG
 
	mSSC_RNPR
;

885 
AT91_REG
 
	mSSC_RNCR
;

886 
AT91_REG
 
	mSSC_TNPR
;

887 
AT91_REG
 
	mSSC_TNCR
;

888 
AT91_REG
 
	mSSC_PTCR
;

889 
AT91_REG
 
	mSSC_PTSR
;

890 } 
	tAT91S_SSC
, *
	tAT91PS_SSC
;

893 
	#AT91C_SSC_RXEN
 (() 0x1 << 0)

894 
	#AT91C_SSC_RXDIS
 (() 0x1 << 1)

895 
	#AT91C_SSC_TXEN
 (() 0x1 << 8)

896 
	#AT91C_SSC_TXDIS
 (() 0x1 << 9)

897 
	#AT91C_SSC_SWRST
 (() 0x1 << 15)

899 
	#AT91C_SSC_CKS
 (() 0x3 << 0)

900 
	#AT91C_SSC_CKS_DIV
 (() 0x0)

901 
	#AT91C_SSC_CKS_TK
 (() 0x1)

902 
	#AT91C_SSC_CKS_RK
 (() 0x2)

903 
	#AT91C_SSC_CKO
 (() 0x7 << 2)

904 
	#AT91C_SSC_CKO_NONE
 (() 0x0 << 2)

905 
	#AT91C_SSC_CKO_CONTINOUS
 (() 0x1 << 2)

906 
	#AT91C_SSC_CKO_DATA_TX
 (() 0x2 << 2)

907 
	#AT91C_SSC_CKI
 (() 0x1 << 5)

908 
	#AT91C_SSC_START
 (() 0xF << 8)

909 
	#AT91C_SSC_START_CONTINOUS
 (() 0x0 << 8)

910 
	#AT91C_SSC_START_TX
 (() 0x1 << 8)

911 
	#AT91C_SSC_START_LOW_RF
 (() 0x2 << 8)

912 
	#AT91C_SSC_START_HIGH_RF
 (() 0x3 << 8)

913 
	#AT91C_SSC_START_FALL_RF
 (() 0x4 << 8)

914 
	#AT91C_SSC_START_RISE_RF
 (() 0x5 << 8)

915 
	#AT91C_SSC_START_LEVEL_RF
 (() 0x6 << 8)

916 
	#AT91C_SSC_START_EDGE_RF
 (() 0x7 << 8)

917 
	#AT91C_SSC_START_0
 (() 0x8 << 8)

918 
	#AT91C_SSC_STTDLY
 (() 0xFF << 16)

919 
	#AT91C_SSC_PERIOD
 (() 0xFF << 24)

921 
	#AT91C_SSC_DATLEN
 (() 0x1F << 0)

922 
	#AT91C_SSC_LOOP
 (() 0x1 << 5)

923 
	#AT91C_SSC_MSBF
 (() 0x1 << 7)

924 
	#AT91C_SSC_DATNB
 (() 0xF << 8)

925 
	#AT91C_SSC_FSLEN
 (() 0xF << 16)

926 
	#AT91C_SSC_FSOS
 (() 0x7 << 20)

927 
	#AT91C_SSC_FSOS_NONE
 (() 0x0 << 20)

928 
	#AT91C_SSC_FSOS_NEGATIVE
 (() 0x1 << 20)

929 
	#AT91C_SSC_FSOS_POSITIVE
 (() 0x2 << 20)

930 
	#AT91C_SSC_FSOS_LOW
 (() 0x3 << 20)

931 
	#AT91C_SSC_FSOS_HIGH
 (() 0x4 << 20)

932 
	#AT91C_SSC_FSOS_TOGGLE
 (() 0x5 << 20)

933 
	#AT91C_SSC_FSEDGE
 (() 0x1 << 24)

936 
	#AT91C_SSC_DATDEF
 (() 0x1 << 5)

937 
	#AT91C_SSC_FSDEN
 (() 0x1 << 23)

939 
	#AT91C_SSC_TXRDY
 (() 0x1 << 0)

940 
	#AT91C_SSC_TXEMPTY
 (() 0x1 << 1)

941 
	#AT91C_SSC_ENDTX
 (() 0x1 << 2)

942 
	#AT91C_SSC_TXBUFE
 (() 0x1 << 3)

943 
	#AT91C_SSC_RXRDY
 (() 0x1 << 4)

944 
	#AT91C_SSC_OVRUN
 (() 0x1 << 5)

945 
	#AT91C_SSC_ENDRX
 (() 0x1 << 6)

946 
	#AT91C_SSC_RXBUFF
 (() 0x1 << 7)

947 
	#AT91C_SSC_TXSYN
 (() 0x1 << 10)

948 
	#AT91C_SSC_RXSYN
 (() 0x1 << 11)

949 
	#AT91C_SSC_TXENA
 (() 0x1 << 16)

950 
	#AT91C_SSC_RXENA
 (() 0x1 << 17)

954 

	)

958 
	s_AT91S_TWI
 {

959 
AT91_REG
 
	mTWI_CR
;

960 
AT91_REG
 
	mTWI_MMR
;

961 
AT91_REG
 
	mRe£rved0
[1];

962 
AT91_REG
 
	mTWI_IADR
;

963 
AT91_REG
 
	mTWI_CWGR
;

964 
AT91_REG
 
	mRe£rved1
[3];

965 
AT91_REG
 
	mTWI_SR
;

966 
AT91_REG
 
	mTWI_IER
;

967 
AT91_REG
 
	mTWI_IDR
;

968 
AT91_REG
 
	mTWI_IMR
;

969 
AT91_REG
 
	mTWI_RHR
;

970 
AT91_REG
 
	mTWI_THR
;

971 } 
	tAT91S_TWI
, *
	tAT91PS_TWI
;

974 
	#AT91C_TWI_START
 (() 0x1 << 0)

975 
	#AT91C_TWI_STOP
 (() 0x1 << 1)

976 
	#AT91C_TWI_MSEN
 (() 0x1 << 2)

977 
	#AT91C_TWI_MSDIS
 (() 0x1 << 3)

978 
	#AT91C_TWI_SWRST
 (() 0x1 << 7)

980 
	#AT91C_TWI_IADRSZ
 (() 0x3 << 8)

981 
	#AT91C_TWI_IADRSZ_NO
 (() 0x0 << 8)

982 
	#AT91C_TWI_IADRSZ_1_BYTE
 (() 0x1 << 8)

983 
	#AT91C_TWI_IADRSZ_2_BYTE
 (() 0x2 << 8)

984 
	#AT91C_TWI_IADRSZ_3_BYTE
 (() 0x3 << 8)

985 
	#AT91C_TWI_MREAD
 (() 0x1 << 12)

986 
	#AT91C_TWI_DADR
 (() 0x7F << 16)

988 
	#AT91C_TWI_CLDIV
 (() 0xFF << 0)

989 
	#AT91C_TWI_CHDIV
 (() 0xFF << 8)

990 
	#AT91C_TWI_CKDIV
 (() 0x7 << 16)

992 
	#AT91C_TWI_TXCOMP
 (() 0x1 << 0)

993 
	#AT91C_TWI_RXRDY
 (() 0x1 << 1)

994 
	#AT91C_TWI_TXRDY
 (() 0x1 << 2)

995 
	#AT91C_TWI_OVRE
 (() 0x1 << 6)

996 
	#AT91C_TWI_UNRE
 (() 0x1 << 7)

997 
	#AT91C_TWI_NACK
 (() 0x1 << 8)

1001 

	)

1005 
	s_AT91S_PWMC_CH
 {

1006 
AT91_REG
 
	mPWMC_CMR
;

1007 
AT91_REG
 
	mPWMC_CDTYR
;

1008 
AT91_REG
 
	mPWMC_CPRDR
;

1009 
AT91_REG
 
	mPWMC_CCNTR
;

1010 
AT91_REG
 
	mPWMC_CUPDR
;

1011 
AT91_REG
 
	mPWMC_Re£rved
[3];

1012 } 
	tAT91S_PWMC_CH
, *
	tAT91PS_PWMC_CH
;

1015 
	#AT91C_PWMC_CPRE
 (() 0xF << 0)

1016 
	#AT91C_PWMC_CPRE_MCK
 (() 0x0)

1017 
	#AT91C_PWMC_CPRE_MCKA
 (() 0xB)

1018 
	#AT91C_PWMC_CPRE_MCKB
 (() 0xC)

1019 
	#AT91C_PWMC_CALG
 (() 0x1 << 8)

1020 
	#AT91C_PWMC_CPOL
 (() 0x1 << 9)

1021 
	#AT91C_PWMC_CPD
 (() 0x1 << 10)

1023 
	#AT91C_PWMC_CDTY
 (() 0x0 << 0)

1025 
	#AT91C_PWMC_CPRD
 (() 0x0 << 0)

1027 
	#AT91C_PWMC_CCNT
 (() 0x0 << 0)

1029 
	#AT91C_PWMC_CUPD
 (() 0x0 << 0)

1030 

	)

1034 
	s_AT91S_PWMC
 {

1035 
AT91_REG
 
	mPWMC_MR
;

1036 
AT91_REG
 
	mPWMC_ENA
;

1037 
AT91_REG
 
	mPWMC_DIS
;

1038 
AT91_REG
 
	mPWMC_SR
;

1039 
AT91_REG
 
	mPWMC_IER
;

1040 
AT91_REG
 
	mPWMC_IDR
;

1041 
AT91_REG
 
	mPWMC_IMR
;

1042 
AT91_REG
 
	mPWMC_ISR
;

1043 
AT91_REG
 
	mRe£rved0
[55];

1044 
AT91_REG
 
	mPWMC_VR
;

1045 
AT91_REG
 
	mRe£rved1
[64];

1046 
AT91S_PWMC_CH
 
	mPWMC_CH
[4];

1047 } 
	tAT91S_PWMC
, *
	tAT91PS_PWMC
;

1050 
	#AT91C_PWMC_DIVA
 (() 0xFF << 0)

1051 
	#AT91C_PWMC_PREA
 (() 0xF << 8)

1052 
	#AT91C_PWMC_PREA_MCK
 (() 0x0 << 8)

1053 
	#AT91C_PWMC_DIVB
 (() 0xFF << 16)

1054 
	#AT91C_PWMC_PREB
 (() 0xF << 24)

1055 
	#AT91C_PWMC_PREB_MCK
 (() 0x0 << 24)

1057 
	#AT91C_PWMC_CHID0
 (() 0x1 << 0)

1058 
	#AT91C_PWMC_CHID1
 (() 0x1 << 1)

1059 
	#AT91C_PWMC_CHID2
 (() 0x1 << 2)

1060 
	#AT91C_PWMC_CHID3
 (() 0x1 << 3)

1067 

	)

1071 
	s_AT91S_UDP
 {

1072 
AT91_REG
 
	mUDP_NUM
;

1073 
AT91_REG
 
	mUDP_GLBSTATE
;

1074 
AT91_REG
 
	mUDP_FADDR
;

1075 
AT91_REG
 
	mRe£rved0
[1];

1076 
AT91_REG
 
	mUDP_IER
;

1077 
AT91_REG
 
	mUDP_IDR
;

1078 
AT91_REG
 
	mUDP_IMR
;

1079 
AT91_REG
 
	mUDP_ISR
;

1080 
AT91_REG
 
	mUDP_ICR
;

1081 
AT91_REG
 
	mRe£rved1
[1];

1082 
AT91_REG
 
	mUDP_RSTEP
;

1083 
AT91_REG
 
	mRe£rved2
[1];

1084 
AT91_REG
 
	mUDP_CSR
[6];

1085 
AT91_REG
 
	mRe£rved3
[2];

1086 
AT91_REG
 
	mUDP_FDR
[6];

1087 
AT91_REG
 
	mRe£rved4
[3];

1088 
AT91_REG
 
	mUDP_TXVC
;

1089 } 
	tAT91S_UDP
, *
	tAT91PS_UDP
;

1092 
	#AT91C_UDP_FRM_NUM
 (() 0x7FF << 0)

1093 
	#AT91C_UDP_FRM_ERR
 (() 0x1 << 16)

1094 
	#AT91C_UDP_FRM_OK
 (() 0x1 << 17)

1096 
	#AT91C_UDP_FADDEN
 (() 0x1 << 0)

1097 
	#AT91C_UDP_CONFG
 (() 0x1 << 1)

1098 
	#AT91C_UDP_ESR
 (() 0x1 << 2)

1099 
	#AT91C_UDP_RSMINPR
 (() 0x1 << 3)

1100 
	#AT91C_UDP_RMWUPE
 (() 0x1 << 4)

1102 
	#AT91C_UDP_FADD
 (() 0xFF << 0)

1103 
	#AT91C_UDP_FEN
 (() 0x1 << 8)

1105 
	#AT91C_UDP_EPINT0
 (() 0x1 << 0)

1106 
	#AT91C_UDP_EPINT1
 (() 0x1 << 1)

1107 
	#AT91C_UDP_EPINT2
 (() 0x1 << 2)

1108 
	#AT91C_UDP_EPINT3
 (() 0x1 << 3)

1109 
	#AT91C_UDP_EPINT4
 (() 0x1 << 4)

1110 
	#AT91C_UDP_EPINT5
 (() 0x1 << 5)

1111 
	#AT91C_UDP_RXSUSP
 (() 0x1 << 8)

1112 
	#AT91C_UDP_RXRSM
 (() 0x1 << 9)

1113 
	#AT91C_UDP_EXTRSM
 (() 0x1 << 10)

1114 
	#AT91C_UDP_SOFINT
 (() 0x1 << 11)

1115 
	#AT91C_UDP_WAKEUP
 (() 0x1 << 13)

1119 
	#AT91C_UDP_ENDBUSRES
 (() 0x1 << 12)

1122 
	#AT91C_UDP_EP0
 (() 0x1 << 0)

1123 
	#AT91C_UDP_EP1
 (() 0x1 << 1)

1124 
	#AT91C_UDP_EP2
 (() 0x1 << 2)

1125 
	#AT91C_UDP_EP3
 (() 0x1 << 3)

1126 
	#AT91C_UDP_EP4
 (() 0x1 << 4)

1127 
	#AT91C_UDP_EP5
 (() 0x1 << 5)

1129 
	#AT91C_UDP_TXCOMP
 (() 0x1 << 0)

1130 
	#AT91C_UDP_RX_DATA_BK0
 (() 0x1 << 1)

1131 
	#AT91C_UDP_RXSETUP
 (() 0x1 << 2)

1132 
	#AT91C_UDP_ISOERROR
 (() 0x1 << 3)

1133 
	#AT91C_UDP_TXPKTRDY
 (() 0x1 << 4)

1134 
	#AT91C_UDP_FORCESTALL
 (() 0x1 << 5)

1135 
	#AT91C_UDP_RX_DATA_BK1
 (() 0x1 << 6)

1136 
	#AT91C_UDP_DIR
 (() 0x1 << 7)

1137 
	#AT91C_UDP_EPTYPE
 (() 0x7 << 8)

1138 
	#AT91C_UDP_EPTYPE_CTRL
 (() 0x0 << 8)

1139 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (() 0x1 << 8)

1140 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (() 0x2 << 8)

1141 
	#AT91C_UDP_EPTYPE_INT_OUT
 (() 0x3 << 8)

1142 
	#AT91C_UDP_EPTYPE_ISO_IN
 (() 0x5 << 8)

1143 
	#AT91C_UDP_EPTYPE_BULK_IN
 (() 0x6 << 8)

1144 
	#AT91C_UDP_EPTYPE_INT_IN
 (() 0x7 << 8)

1145 
	#AT91C_UDP_DTGLE
 (() 0x1 << 11)

1146 
	#AT91C_UDP_EPEDS
 (() 0x1 << 15)

1147 
	#AT91C_UDP_RXBYTECNT
 (() 0x7FF << 16)

1149 
	#AT91C_UDP_TXVDIS
 (() 0x1 << 8)

1150 
	#AT91C_UDP_PUON
 (() 0x1 << 9)

1151 

	)

1155 
	s_AT91S_TC
 {

1156 
AT91_REG
 
	mTC_CCR
;

1157 
AT91_REG
 
	mTC_CMR
;

1158 
AT91_REG
 
	mRe£rved0
[2];

1159 
AT91_REG
 
	mTC_CV
;

1160 
AT91_REG
 
	mTC_RA
;

1161 
AT91_REG
 
	mTC_RB
;

1162 
AT91_REG
 
	mTC_RC
;

1163 
AT91_REG
 
	mTC_SR
;

1164 
AT91_REG
 
	mTC_IER
;

1165 
AT91_REG
 
	mTC_IDR
;

1166 
AT91_REG
 
	mTC_IMR
;

1167 } 
	tAT91S_TC
, *
	tAT91PS_TC
;

1170 
	#AT91C_TC_CLKEN
 (() 0x1 << 0)

1171 
	#AT91C_TC_CLKDIS
 (() 0x1 << 1)

1172 
	#AT91C_TC_SWTRG
 (() 0x1 << 2)

1174 
	#AT91C_TC_CLKS
 (() 0x7 << 0)

1175 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (() 0x0)

1176 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (() 0x1)

1177 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (() 0x2)

1178 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (() 0x3)

1179 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (() 0x4)

1180 
	#AT91C_TC_CLKS_XC0
 (() 0x5)

1181 
	#AT91C_TC_CLKS_XC1
 (() 0x6)

1182 
	#AT91C_TC_CLKS_XC2
 (() 0x7)

1183 
	#AT91C_TC_CLKI
 (() 0x1 << 3)

1184 
	#AT91C_TC_BURST
 (() 0x3 << 4)

1185 
	#AT91C_TC_BURST_NONE
 (() 0x0 << 4)

1186 
	#AT91C_TC_BURST_XC0
 (() 0x1 << 4)

1187 
	#AT91C_TC_BURST_XC1
 (() 0x2 << 4)

1188 
	#AT91C_TC_BURST_XC2
 (() 0x3 << 4)

1189 
	#AT91C_TC_CPCSTOP
 (() 0x1 << 6)

1190 
	#AT91C_TC_LDBSTOP
 (() 0x1 << 6)

1191 
	#AT91C_TC_CPCDIS
 (() 0x1 << 7)

1192 
	#AT91C_TC_LDBDIS
 (() 0x1 << 7)

1193 
	#AT91C_TC_ETRGEDG
 (() 0x3 << 8)

1194 
	#AT91C_TC_ETRGEDG_NONE
 (() 0x0 << 8)

1195 
	#AT91C_TC_ETRGEDG_RISING
 (() 0x1 << 8)

1196 
	#AT91C_TC_ETRGEDG_FALLING
 (() 0x2 << 8)

1197 
	#AT91C_TC_ETRGEDG_BOTH
 (() 0x3 << 8)

1198 
	#AT91C_TC_EEVTEDG
 (() 0x3 << 8)

1199 
	#AT91C_TC_EEVTEDG_NONE
 (() 0x0 << 8)

1200 
	#AT91C_TC_EEVTEDG_RISING
 (() 0x1 << 8)

1201 
	#AT91C_TC_EEVTEDG_FALLING
 (() 0x2 << 8)

1202 
	#AT91C_TC_EEVTEDG_BOTH
 (() 0x3 << 8)

1203 
	#AT91C_TC_EEVT
 (() 0x3 << 10)

1204 
	#AT91C_TC_EEVT_TIOB
 (() 0x0 << 10)

1205 
	#AT91C_TC_EEVT_XC0
 (() 0x1 << 10)

1206 
	#AT91C_TC_EEVT_XC1
 (() 0x2 << 10)

1207 
	#AT91C_TC_EEVT_XC2
 (() 0x3 << 10)

1208 
	#AT91C_TC_ABETRG
 (() 0x1 << 10)

1209 
	#AT91C_TC_ENETRG
 (() 0x1 << 12)

1210 
	#AT91C_TC_WAVESEL
 (() 0x3 << 13)

1211 
	#AT91C_TC_WAVESEL_UP
 (() 0x0 << 13)

1212 
	#AT91C_TC_WAVESEL_UPDOWN
 (() 0x1 << 13)

1213 
	#AT91C_TC_WAVESEL_UP_AUTO
 (() 0x2 << 13)

1214 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (() 0x3 << 13)

1215 
	#AT91C_TC_CPCTRG
 (() 0x1 << 14)

1216 
	#AT91C_TC_WAVE
 (() 0x1 << 15)

1217 
	#AT91C_TC_ACPA
 (() 0x3 << 16)

1218 
	#AT91C_TC_ACPA_NONE
 (() 0x0 << 16)

1219 
	#AT91C_TC_ACPA_SET
 (() 0x1 << 16)

1220 
	#AT91C_TC_ACPA_CLEAR
 (() 0x2 << 16)

1221 
	#AT91C_TC_ACPA_TOGGLE
 (() 0x3 << 16)

1222 
	#AT91C_TC_LDRA
 (() 0x3 << 16)

1223 
	#AT91C_TC_LDRA_NONE
 (() 0x0 << 16)

1224 
	#AT91C_TC_LDRA_RISING
 (() 0x1 << 16)

1225 
	#AT91C_TC_LDRA_FALLING
 (() 0x2 << 16)

1226 
	#AT91C_TC_LDRA_BOTH
 (() 0x3 << 16)

1227 
	#AT91C_TC_ACPC
 (() 0x3 << 18)

1228 
	#AT91C_TC_ACPC_NONE
 (() 0x0 << 18)

1229 
	#AT91C_TC_ACPC_SET
 (() 0x1 << 18)

1230 
	#AT91C_TC_ACPC_CLEAR
 (() 0x2 << 18)

1231 
	#AT91C_TC_ACPC_TOGGLE
 (() 0x3 << 18)

1232 
	#AT91C_TC_LDRB
 (() 0x3 << 18)

1233 
	#AT91C_TC_LDRB_NONE
 (() 0x0 << 18)

1234 
	#AT91C_TC_LDRB_RISING
 (() 0x1 << 18)

1235 
	#AT91C_TC_LDRB_FALLING
 (() 0x2 << 18)

1236 
	#AT91C_TC_LDRB_BOTH
 (() 0x3 << 18)

1237 
	#AT91C_TC_AEEVT
 (() 0x3 << 20)

1238 
	#AT91C_TC_AEEVT_NONE
 (() 0x0 << 20)

1239 
	#AT91C_TC_AEEVT_SET
 (() 0x1 << 20)

1240 
	#AT91C_TC_AEEVT_CLEAR
 (() 0x2 << 20)

1241 
	#AT91C_TC_AEEVT_TOGGLE
 (() 0x3 << 20)

1242 
	#AT91C_TC_ASWTRG
 (() 0x3 << 22)

1243 
	#AT91C_TC_ASWTRG_NONE
 (() 0x0 << 22)

1244 
	#AT91C_TC_ASWTRG_SET
 (() 0x1 << 22)

1245 
	#AT91C_TC_ASWTRG_CLEAR
 (() 0x2 << 22)

1246 
	#AT91C_TC_ASWTRG_TOGGLE
 (() 0x3 << 22)

1247 
	#AT91C_TC_BCPB
 (() 0x3 << 24)

1248 
	#AT91C_TC_BCPB_NONE
 (() 0x0 << 24)

1249 
	#AT91C_TC_BCPB_SET
 (() 0x1 << 24)

1250 
	#AT91C_TC_BCPB_CLEAR
 (() 0x2 << 24)

1251 
	#AT91C_TC_BCPB_TOGGLE
 (() 0x3 << 24)

1252 
	#AT91C_TC_BCPC
 (() 0x3 << 26)

1253 
	#AT91C_TC_BCPC_NONE
 (() 0x0 << 26)

1254 
	#AT91C_TC_BCPC_SET
 (() 0x1 << 26)

1255 
	#AT91C_TC_BCPC_CLEAR
 (() 0x2 << 26)

1256 
	#AT91C_TC_BCPC_TOGGLE
 (() 0x3 << 26)

1257 
	#AT91C_TC_BEEVT
 (() 0x3 << 28)

1258 
	#AT91C_TC_BEEVT_NONE
 (() 0x0 << 28)

1259 
	#AT91C_TC_BEEVT_SET
 (() 0x1 << 28)

1260 
	#AT91C_TC_BEEVT_CLEAR
 (() 0x2 << 28)

1261 
	#AT91C_TC_BEEVT_TOGGLE
 (() 0x3 << 28)

1262 
	#AT91C_TC_BSWTRG
 (() 0x3 << 30)

1263 
	#AT91C_TC_BSWTRG_NONE
 (() 0x0 << 30)

1264 
	#AT91C_TC_BSWTRG_SET
 (() 0x1 << 30)

1265 
	#AT91C_TC_BSWTRG_CLEAR
 (() 0x2 << 30)

1266 
	#AT91C_TC_BSWTRG_TOGGLE
 (() 0x3 << 30)

1268 
	#AT91C_TC_COVFS
 (() 0x1 << 0)

1269 
	#AT91C_TC_LOVRS
 (() 0x1 << 1)

1270 
	#AT91C_TC_CPAS
 (() 0x1 << 2)

1271 
	#AT91C_TC_CPBS
 (() 0x1 << 3)

1272 
	#AT91C_TC_CPCS
 (() 0x1 << 4)

1273 
	#AT91C_TC_LDRAS
 (() 0x1 << 5)

1274 
	#AT91C_TC_LDRBS
 (() 0x1 << 6)

1275 
	#AT91C_TC_ETRGS
 (() 0x1 << 7)

1276 
	#AT91C_TC_CLKSTA
 (() 0x1 << 16)

1277 
	#AT91C_TC_MTIOA
 (() 0x1 << 17)

1278 
	#AT91C_TC_MTIOB
 (() 0x1 << 18)

1282 

	)

1286 
	s_AT91S_TCB
 {

1287 
AT91S_TC
 
	mTCB_TC0
;

1288 
AT91_REG
 
	mRe£rved0
[4];

1289 
AT91S_TC
 
	mTCB_TC1
;

1290 
AT91_REG
 
	mRe£rved1
[4];

1291 
AT91S_TC
 
	mTCB_TC2
;

1292 
AT91_REG
 
	mRe£rved2
[4];

1293 
AT91_REG
 
	mTCB_BCR
;

1294 
AT91_REG
 
	mTCB_BMR
;

1295 } 
	tAT91S_TCB
, *
	tAT91PS_TCB
;

1298 
	#AT91C_TCB_SYNC
 (() 0x1 << 0)

1300 
	#AT91C_TCB_TC0XC0S
 (() 0x3 << 0)

1301 
	#AT91C_TCB_TC0XC0S_TCLK0
 (() 0x0)

1302 
	#AT91C_TCB_TC0XC0S_NONE
 (() 0x1)

1303 
	#AT91C_TCB_TC0XC0S_TIOA1
 (() 0x2)

1304 
	#AT91C_TCB_TC0XC0S_TIOA2
 (() 0x3)

1305 
	#AT91C_TCB_TC1XC1S
 (() 0x3 << 2)

1306 
	#AT91C_TCB_TC1XC1S_TCLK1
 (() 0x0 << 2)

1307 
	#AT91C_TCB_TC1XC1S_NONE
 (() 0x1 << 2)

1308 
	#AT91C_TCB_TC1XC1S_TIOA0
 (() 0x2 << 2)

1309 
	#AT91C_TCB_TC1XC1S_TIOA2
 (() 0x3 << 2)

1310 
	#AT91C_TCB_TC2XC2S
 (() 0x3 << 4)

1311 
	#AT91C_TCB_TC2XC2S_TCLK2
 (() 0x0 << 4)

1312 
	#AT91C_TCB_TC2XC2S_NONE
 (() 0x1 << 4)

1313 
	#AT91C_TCB_TC2XC2S_TIOA0
 (() 0x2 << 4)

1314 
	#AT91C_TCB_TC2XC2S_TIOA1
 (() 0x3 << 4)

1315 

	)

1319 
	s_AT91S_CAN_MB
 {

1320 
AT91_REG
 
	mCAN_MB_MMR
;

1321 
AT91_REG
 
	mCAN_MB_MAM
;

1322 
AT91_REG
 
	mCAN_MB_MID
;

1323 
AT91_REG
 
	mCAN_MB_MFID
;

1324 
AT91_REG
 
	mCAN_MB_MSR
;

1325 
AT91_REG
 
	mCAN_MB_MDL
;

1326 
AT91_REG
 
	mCAN_MB_MDH
;

1327 
AT91_REG
 
	mCAN_MB_MCR
;

1328 } 
	tAT91S_CAN_MB
, *
	tAT91PS_CAN_MB
;

1331 
	#AT91C_CAN_MTIMEMARK
 (() 0xFFFF << 0)

1332 
	#AT91C_CAN_PRIOR
 (() 0xF << 16)

1333 
	#AT91C_CAN_MOT
 (() 0x7 << 24)

1334 
	#AT91C_CAN_MOT_DIS
 (() 0x0 << 24)

1335 
	#AT91C_CAN_MOT_RX
 (() 0x1 << 24)

1336 
	#AT91C_CAN_MOT_RXOVERWRITE
 (() 0x2 << 24)

1337 
	#AT91C_CAN_MOT_TX
 (() 0x3 << 24)

1338 
	#AT91C_CAN_MOT_CONSUMER
 (() 0x4 << 24)

1339 
	#AT91C_CAN_MOT_PRODUCER
 (() 0x5 << 24)

1341 
	#AT91C_CAN_MIDvB
 (() 0x3FFFF << 0)

1342 
	#AT91C_CAN_MIDvA
 (() 0x7FF << 18)

1343 
	#AT91C_CAN_MIDE
 (() 0x1 << 29)

1347 
	#AT91C_CAN_MTIMESTAMP
 (() 0xFFFF << 0)

1348 
	#AT91C_CAN_MDLC
 (() 0xF << 16)

1349 
	#AT91C_CAN_MRTR
 (() 0x1 << 20)

1350 
	#AT91C_CAN_MABT
 (() 0x1 << 22)

1351 
	#AT91C_CAN_MRDY
 (() 0x1 << 23)

1352 
	#AT91C_CAN_MMI
 (() 0x1 << 24)

1356 
	#AT91C_CAN_MACR
 (() 0x1 << 22)

1357 
	#AT91C_CAN_MTCR
 (() 0x1 << 23)

1358 

	)

1362 
	s_AT91S_CAN
 {

1363 
AT91_REG
 
	mCAN_MR
;

1364 
AT91_REG
 
	mCAN_IER
;

1365 
AT91_REG
 
	mCAN_IDR
;

1366 
AT91_REG
 
	mCAN_IMR
;

1367 
AT91_REG
 
	mCAN_SR
;

1368 
AT91_REG
 
	mCAN_BR
;

1369 
AT91_REG
 
	mCAN_TIM
;

1370 
AT91_REG
 
	mCAN_TIMESTP
;

1371 
AT91_REG
 
	mCAN_ECR
;

1372 
AT91_REG
 
	mCAN_TCR
;

1373 
AT91_REG
 
	mCAN_ACR
;

1374 
AT91_REG
 
	mRe£rved0
[52];

1375 
AT91_REG
 
	mCAN_VR
;

1376 
AT91_REG
 
	mRe£rved1
[64];

1377 
AT91S_CAN_MB
 
	mCAN_MB0
;

1378 
AT91S_CAN_MB
 
	mCAN_MB1
;

1379 
AT91S_CAN_MB
 
	mCAN_MB2
;

1380 
AT91S_CAN_MB
 
	mCAN_MB3
;

1381 
AT91S_CAN_MB
 
	mCAN_MB4
;

1382 
AT91S_CAN_MB
 
	mCAN_MB5
;

1383 
AT91S_CAN_MB
 
	mCAN_MB6
;

1384 
AT91S_CAN_MB
 
	mCAN_MB7
;

1385 
AT91S_CAN_MB
 
	mCAN_MB8
;

1386 
AT91S_CAN_MB
 
	mCAN_MB9
;

1387 
AT91S_CAN_MB
 
	mCAN_MB10
;

1388 
AT91S_CAN_MB
 
	mCAN_MB11
;

1389 
AT91S_CAN_MB
 
	mCAN_MB12
;

1390 
AT91S_CAN_MB
 
	mCAN_MB13
;

1391 
AT91S_CAN_MB
 
	mCAN_MB14
;

1392 
AT91S_CAN_MB
 
	mCAN_MB15
;

1393 } 
	tAT91S_CAN
, *
	tAT91PS_CAN
;

1396 
	#AT91C_CAN_CANEN
 (() 0x1 << 0)

1397 
	#AT91C_CAN_LPM
 (() 0x1 << 1)

1398 
	#AT91C_CAN_ABM
 (() 0x1 << 2)

1399 
	#AT91C_CAN_OVL
 (() 0x1 << 3)

1400 
	#AT91C_CAN_TEOF
 (() 0x1 << 4)

1401 
	#AT91C_CAN_TTM
 (() 0x1 << 5)

1402 
	#AT91C_CAN_TIMFRZ
 (() 0x1 << 6)

1403 
	#AT91C_CAN_DRPT
 (() 0x1 << 7)

1405 
	#AT91C_CAN_MB0
 (() 0x1 << 0)

1406 
	#AT91C_CAN_MB1
 (() 0x1 << 1)

1407 
	#AT91C_CAN_MB2
 (() 0x1 << 2)

1408 
	#AT91C_CAN_MB3
 (() 0x1 << 3)

1409 
	#AT91C_CAN_MB4
 (() 0x1 << 4)

1410 
	#AT91C_CAN_MB5
 (() 0x1 << 5)

1411 
	#AT91C_CAN_MB6
 (() 0x1 << 6)

1412 
	#AT91C_CAN_MB7
 (() 0x1 << 7)

1413 
	#AT91C_CAN_MB8
 (() 0x1 << 8)

1414 
	#AT91C_CAN_MB9
 (() 0x1 << 9)

1415 
	#AT91C_CAN_MB10
 (() 0x1 << 10)

1416 
	#AT91C_CAN_MB11
 (() 0x1 << 11)

1417 
	#AT91C_CAN_MB12
 (() 0x1 << 12)

1418 
	#AT91C_CAN_MB13
 (() 0x1 << 13)

1419 
	#AT91C_CAN_MB14
 (() 0x1 << 14)

1420 
	#AT91C_CAN_MB15
 (() 0x1 << 15)

1421 
	#AT91C_CAN_ERRA
 (() 0x1 << 16)

1422 
	#AT91C_CAN_WARN
 (() 0x1 << 17)

1423 
	#AT91C_CAN_ERRP
 (() 0x1 << 18)

1424 
	#AT91C_CAN_BOFF
 (() 0x1 << 19)

1425 
	#AT91C_CAN_SLEEP
 (() 0x1 << 20)

1426 
	#AT91C_CAN_WAKEUP
 (() 0x1 << 21)

1427 
	#AT91C_CAN_TOVF
 (() 0x1 << 22)

1428 
	#AT91C_CAN_TSTP
 (() 0x1 << 23)

1429 
	#AT91C_CAN_CERR
 (() 0x1 << 24)

1430 
	#AT91C_CAN_SERR
 (() 0x1 << 25)

1431 
	#AT91C_CAN_AERR
 (() 0x1 << 26)

1432 
	#AT91C_CAN_FERR
 (() 0x1 << 27)

1433 
	#AT91C_CAN_BERR
 (() 0x1 << 28)

1437 
	#AT91C_CAN_RBSY
 (() 0x1 << 29)

1438 
	#AT91C_CAN_TBSY
 (() 0x1 << 30)

1439 
	#AT91C_CAN_OVLY
 (() 0x1 << 31)

1441 
	#AT91C_CAN_PHASE2
 (() 0x7 << 0)

1442 
	#AT91C_CAN_PHASE1
 (() 0x7 << 4)

1443 
	#AT91C_CAN_PROPAG
 (() 0x7 << 8)

1444 
	#AT91C_CAN_SYNC
 (() 0x3 << 12)

1445 
	#AT91C_CAN_BRP
 (() 0x7F << 16)

1446 
	#AT91C_CAN_SMP
 (() 0x1 << 24)

1448 
	#AT91C_CAN_TIMER
 (() 0xFFFF << 0)

1451 
	#AT91C_CAN_REC
 (() 0xFF << 0)

1452 
	#AT91C_CAN_TEC
 (() 0xFF << 16)

1454 
	#AT91C_CAN_TIMRST
 (() 0x1 << 31)

1456 

	)

1460 
	s_AT91S_EMAC
 {

1461 
AT91_REG
 
	mEMAC_NCR
;

1462 
AT91_REG
 
	mEMAC_NCFGR
;

1463 
AT91_REG
 
	mEMAC_NSR
;

1464 
AT91_REG
 
	mRe£rved0
[2];

1465 
AT91_REG
 
	mEMAC_TSR
;

1466 
AT91_REG
 
	mEMAC_RBQP
;

1467 
AT91_REG
 
	mEMAC_TBQP
;

1468 
AT91_REG
 
	mEMAC_RSR
;

1469 
AT91_REG
 
	mEMAC_ISR
;

1470 
AT91_REG
 
	mEMAC_IER
;

1471 
AT91_REG
 
	mEMAC_IDR
;

1472 
AT91_REG
 
	mEMAC_IMR
;

1473 
AT91_REG
 
	mEMAC_MAN
;

1474 
AT91_REG
 
	mEMAC_PTR
;

1475 
AT91_REG
 
	mEMAC_PFR
;

1476 
AT91_REG
 
	mEMAC_FTO
;

1477 
AT91_REG
 
	mEMAC_SCF
;

1478 
AT91_REG
 
	mEMAC_MCF
;

1479 
AT91_REG
 
	mEMAC_FRO
;

1480 
AT91_REG
 
	mEMAC_FCSE
;

1481 
AT91_REG
 
	mEMAC_ALE
;

1482 
AT91_REG
 
	mEMAC_DTF
;

1483 
AT91_REG
 
	mEMAC_LCOL
;

1484 
AT91_REG
 
	mEMAC_ECOL
;

1485 
AT91_REG
 
	mEMAC_TUND
;

1486 
AT91_REG
 
	mEMAC_CSE
;

1487 
AT91_REG
 
	mEMAC_RRE
;

1488 
AT91_REG
 
	mEMAC_ROV
;

1489 
AT91_REG
 
	mEMAC_RSE
;

1490 
AT91_REG
 
	mEMAC_ELE
;

1491 
AT91_REG
 
	mEMAC_RJA
;

1492 
AT91_REG
 
	mEMAC_USF
;

1493 
AT91_REG
 
	mEMAC_STE
;

1494 
AT91_REG
 
	mEMAC_RLE
;

1495 
AT91_REG
 
	mEMAC_TPF
;

1496 
AT91_REG
 
	mEMAC_HRB
;

1497 
AT91_REG
 
	mEMAC_HRT
;

1498 
AT91_REG
 
	mEMAC_SA1L
;

1499 
AT91_REG
 
	mEMAC_SA1H
;

1500 
AT91_REG
 
	mEMAC_SA2L
;

1501 
AT91_REG
 
	mEMAC_SA2H
;

1502 
AT91_REG
 
	mEMAC_SA3L
;

1503 
AT91_REG
 
	mEMAC_SA3H
;

1504 
AT91_REG
 
	mEMAC_SA4L
;

1505 
AT91_REG
 
	mEMAC_SA4H
;

1506 
AT91_REG
 
	mEMAC_TID
;

1507 
AT91_REG
 
	mEMAC_TPQ
;

1508 
AT91_REG
 
	mEMAC_USRIO
;

1509 
AT91_REG
 
	mEMAC_WOL
;

1510 
AT91_REG
 
	mRe£rved1
[13];

1511 
AT91_REG
 
	mEMAC_REV
;

1512 } 
	tAT91S_EMAC
, *
	tAT91PS_EMAC
;

1515 
	#AT91C_EMAC_LB
 (() 0x1 << 0)

1516 
	#AT91C_EMAC_LLB
 (() 0x1 << 1)

1517 
	#AT91C_EMAC_RE
 (() 0x1 << 2)

1518 
	#AT91C_EMAC_TE
 (() 0x1 << 3)

1519 
	#AT91C_EMAC_MPE
 (() 0x1 << 4)

1520 
	#AT91C_EMAC_CLRSTAT
 (() 0x1 << 5)

1521 
	#AT91C_EMAC_INCSTAT
 (() 0x1 << 6)

1522 
	#AT91C_EMAC_WESTAT
 (() 0x1 << 7)

1523 
	#AT91C_EMAC_BP
 (() 0x1 << 8)

1524 
	#AT91C_EMAC_TSTART
 (() 0x1 << 9)

1525 
	#AT91C_EMAC_THALT
 (() 0x1 << 10)

1526 
	#AT91C_EMAC_TPFR
 (() 0x1 << 11)

1527 
	#AT91C_EMAC_TZQ
 (() 0x1 << 12)

1529 
	#AT91C_EMAC_SPD
 (() 0x1 << 0)

1530 
	#AT91C_EMAC_FD
 (() 0x1 << 1)

1531 
	#AT91C_EMAC_JFRAME
 (() 0x1 << 3)

1532 
	#AT91C_EMAC_CAF
 (() 0x1 << 4)

1533 
	#AT91C_EMAC_NBC
 (() 0x1 << 5)

1534 
	#AT91C_EMAC_MTI
 (() 0x1 << 6)

1535 
	#AT91C_EMAC_UNI
 (() 0x1 << 7)

1536 
	#AT91C_EMAC_BIG
 (() 0x1 << 8)

1537 
	#AT91C_EMAC_EAE
 (() 0x1 << 9)

1538 
	#AT91C_EMAC_CLK
 (() 0x3 << 10)

1539 
	#AT91C_EMAC_CLK_HCLK_8
 (() 0x0 << 10)

1540 
	#AT91C_EMAC_CLK_HCLK_16
 (() 0x1 << 10)

1541 
	#AT91C_EMAC_CLK_HCLK_32
 (() 0x2 << 10)

1542 
	#AT91C_EMAC_CLK_HCLK_64
 (() 0x3 << 10)

1543 
	#AT91C_EMAC_RTY
 (() 0x1 << 12)

1544 
	#AT91C_EMAC_PAE
 (() 0x1 << 13)

1545 
	#AT91C_EMAC_RBOF
 (() 0x3 << 14)

1546 
	#AT91C_EMAC_RBOF_OFFSET_0
 (() 0x0 << 14)

1547 
	#AT91C_EMAC_RBOF_OFFSET_1
 (() 0x1 << 14)

1548 
	#AT91C_EMAC_RBOF_OFFSET_2
 (() 0x2 << 14)

1549 
	#AT91C_EMAC_RBOF_OFFSET_3
 (() 0x3 << 14)

1550 
	#AT91C_EMAC_RLCE
 (() 0x1 << 16)

1551 
	#AT91C_EMAC_DRFCS
 (() 0x1 << 17)

1552 
	#AT91C_EMAC_EFRHD
 (() 0x1 << 18)

1553 
	#AT91C_EMAC_IRXFCS
 (() 0x1 << 19)

1555 
	#AT91C_EMAC_LINKR
 (() 0x1 << 0)

1556 
	#AT91C_EMAC_MDIO
 (() 0x1 << 1)

1557 
	#AT91C_EMAC_IDLE
 (() 0x1 << 2)

1559 
	#AT91C_EMAC_UBR
 (() 0x1 << 0)

1560 
	#AT91C_EMAC_COL
 (() 0x1 << 1)

1561 
	#AT91C_EMAC_RLES
 (() 0x1 << 2)

1562 
	#AT91C_EMAC_TGO
 (() 0x1 << 3)

1563 
	#AT91C_EMAC_BEX
 (() 0x1 << 4)

1564 
	#AT91C_EMAC_COMP
 (() 0x1 << 5)

1565 
	#AT91C_EMAC_UND
 (() 0x1 << 6)

1567 
	#AT91C_EMAC_BNA
 (() 0x1 << 0)

1568 
	#AT91C_EMAC_REC
 (() 0x1 << 1)

1569 
	#AT91C_EMAC_OVR
 (() 0x1 << 2)

1571 
	#AT91C_EMAC_MFD
 (() 0x1 << 0)

1572 
	#AT91C_EMAC_RCOMP
 (() 0x1 << 1)

1573 
	#AT91C_EMAC_RXUBR
 (() 0x1 << 2)

1574 
	#AT91C_EMAC_TXUBR
 (() 0x1 << 3)

1575 
	#AT91C_EMAC_TUNDR
 (() 0x1 << 4)

1576 
	#AT91C_EMAC_RLEX
 (() 0x1 << 5)

1577 
	#AT91C_EMAC_TXERR
 (() 0x1 << 6)

1578 
	#AT91C_EMAC_TCOMP
 (() 0x1 << 7)

1579 
	#AT91C_EMAC_LINK
 (() 0x1 << 9)

1580 
	#AT91C_EMAC_ROVR
 (() 0x1 << 10)

1581 
	#AT91C_EMAC_HRESP
 (() 0x1 << 11)

1582 
	#AT91C_EMAC_PFRE
 (() 0x1 << 12)

1583 
	#AT91C_EMAC_PTZ
 (() 0x1 << 13)

1588 
	#AT91C_EMAC_DATA
 (() 0xFFFF << 0)

1589 
	#AT91C_EMAC_CODE
 (() 0x3 << 16)

1590 
	#AT91C_EMAC_REGA
 (() 0x1F << 18)

1591 
	#AT91C_EMAC_PHYA
 (() 0x1F << 23)

1592 
	#AT91C_EMAC_RW
 (() 0x3 << 28)

1593 
	#AT91C_EMAC_SOF
 (() 0x3 << 30)

1595 
	#AT91C_EMAC_RMII
 (() 0x1 << 0)

1597 
	#AT91C_EMAC_IP
 (() 0xFFFF << 0)

1598 
	#AT91C_EMAC_MAG
 (() 0x1 << 16)

1599 
	#AT91C_EMAC_ARP
 (() 0x1 << 17)

1600 
	#AT91C_EMAC_SA1
 (() 0x1 << 18)

1602 
	#AT91C_EMAC_REVREF
 (() 0xFFFF << 0)

1603 
	#AT91C_EMAC_PARTREF
 (() 0xFFFF << 16)

1604 

	)

1608 
	s_AT91S_ADC
 {

1609 
AT91_REG
 
	mADC_CR
;

1610 
AT91_REG
 
	mADC_MR
;

1611 
AT91_REG
 
	mRe£rved0
[2];

1612 
AT91_REG
 
	mADC_CHER
;

1613 
AT91_REG
 
	mADC_CHDR
;

1614 
AT91_REG
 
	mADC_CHSR
;

1615 
AT91_REG
 
	mADC_SR
;

1616 
AT91_REG
 
	mADC_LCDR
;

1617 
AT91_REG
 
	mADC_IER
;

1618 
AT91_REG
 
	mADC_IDR
;

1619 
AT91_REG
 
	mADC_IMR
;

1620 
AT91_REG
 
	mADC_CDR0
;

1621 
AT91_REG
 
	mADC_CDR1
;

1622 
AT91_REG
 
	mADC_CDR2
;

1623 
AT91_REG
 
	mADC_CDR3
;

1624 
AT91_REG
 
	mADC_CDR4
;

1625 
AT91_REG
 
	mADC_CDR5
;

1626 
AT91_REG
 
	mADC_CDR6
;

1627 
AT91_REG
 
	mADC_CDR7
;

1628 
AT91_REG
 
	mRe£rved1
[44];

1629 
AT91_REG
 
	mADC_RPR
;

1630 
AT91_REG
 
	mADC_RCR
;

1631 
AT91_REG
 
	mADC_TPR
;

1632 
AT91_REG
 
	mADC_TCR
;

1633 
AT91_REG
 
	mADC_RNPR
;

1634 
AT91_REG
 
	mADC_RNCR
;

1635 
AT91_REG
 
	mADC_TNPR
;

1636 
AT91_REG
 
	mADC_TNCR
;

1637 
AT91_REG
 
	mADC_PTCR
;

1638 
AT91_REG
 
	mADC_PTSR
;

1639 } 
	tAT91S_ADC
, *
	tAT91PS_ADC
;

1642 
	#AT91C_ADC_SWRST
 (() 0x1 << 0)

1643 
	#AT91C_ADC_START
 (() 0x1 << 1)

1645 
	#AT91C_ADC_TRGEN
 (() 0x1 << 0)

1646 
	#AT91C_ADC_TRGEN_DIS
 (() 0x0)

1647 
	#AT91C_ADC_TRGEN_EN
 (() 0x1)

1648 
	#AT91C_ADC_TRGSEL
 (() 0x7 << 1)

1649 
	#AT91C_ADC_TRGSEL_TIOA0
 (() 0x0 << 1)

1650 
	#AT91C_ADC_TRGSEL_TIOA1
 (() 0x1 << 1)

1651 
	#AT91C_ADC_TRGSEL_TIOA2
 (() 0x2 << 1)

1652 
	#AT91C_ADC_TRGSEL_TIOA3
 (() 0x3 << 1)

1653 
	#AT91C_ADC_TRGSEL_TIOA4
 (() 0x4 << 1)

1654 
	#AT91C_ADC_TRGSEL_TIOA5
 (() 0x5 << 1)

1655 
	#AT91C_ADC_TRGSEL_EXT
 (() 0x6 << 1)

1656 
	#AT91C_ADC_LOWRES
 (() 0x1 << 4)

1657 
	#AT91C_ADC_LOWRES_10_BIT
 (() 0x0 << 4)

1658 
	#AT91C_ADC_LOWRES_8_BIT
 (() 0x1 << 4)

1659 
	#AT91C_ADC_SLEEP
 (() 0x1 << 5)

1660 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (() 0x0 << 5)

1661 
	#AT91C_ADC_SLEEP_MODE
 (() 0x1 << 5)

1662 
	#AT91C_ADC_PRESCAL
 (() 0x3F << 8)

1663 
	#AT91C_ADC_STARTUP
 (() 0x1F << 16)

1664 
	#AT91C_ADC_SHTIM
 (() 0xF << 24)

1666 
	#AT91C_ADC_CH0
 (() 0x1 << 0)

1667 
	#AT91C_ADC_CH1
 (() 0x1 << 1)

1668 
	#AT91C_ADC_CH2
 (() 0x1 << 2)

1669 
	#AT91C_ADC_CH3
 (() 0x1 << 3)

1670 
	#AT91C_ADC_CH4
 (() 0x1 << 4)

1671 
	#AT91C_ADC_CH5
 (() 0x1 << 5)

1672 
	#AT91C_ADC_CH6
 (() 0x1 << 6)

1673 
	#AT91C_ADC_CH7
 (() 0x1 << 7)

1677 
	#AT91C_ADC_EOC0
 (() 0x1 << 0)

1678 
	#AT91C_ADC_EOC1
 (() 0x1 << 1)

1679 
	#AT91C_ADC_EOC2
 (() 0x1 << 2)

1680 
	#AT91C_ADC_EOC3
 (() 0x1 << 3)

1681 
	#AT91C_ADC_EOC4
 (() 0x1 << 4)

1682 
	#AT91C_ADC_EOC5
 (() 0x1 << 5)

1683 
	#AT91C_ADC_EOC6
 (() 0x1 << 6)

1684 
	#AT91C_ADC_EOC7
 (() 0x1 << 7)

1685 
	#AT91C_ADC_OVRE0
 (() 0x1 << 8)

1686 
	#AT91C_ADC_OVRE1
 (() 0x1 << 9)

1687 
	#AT91C_ADC_OVRE2
 (() 0x1 << 10)

1688 
	#AT91C_ADC_OVRE3
 (() 0x1 << 11)

1689 
	#AT91C_ADC_OVRE4
 (() 0x1 << 12)

1690 
	#AT91C_ADC_OVRE5
 (() 0x1 << 13)

1691 
	#AT91C_ADC_OVRE6
 (() 0x1 << 14)

1692 
	#AT91C_ADC_OVRE7
 (() 0x1 << 15)

1693 
	#AT91C_ADC_DRDY
 (() 0x1 << 16)

1694 
	#AT91C_ADC_GOVRE
 (() 0x1 << 17)

1695 
	#AT91C_ADC_ENDRX
 (() 0x1 << 18)

1696 
	#AT91C_ADC_RXBUFF
 (() 0x1 << 19)

1698 
	#AT91C_ADC_LDATA
 (() 0x3FF << 0)

1703 
	#AT91C_ADC_DATA
 (() 0x3FF << 0)

1711 

	)

1715 
	s_AT91S_AES
 {

1716 
AT91_REG
 
	mAES_CR
;

1717 
AT91_REG
 
	mAES_MR
;

1718 
AT91_REG
 
	mRe£rved0
[2];

1719 
AT91_REG
 
	mAES_IER
;

1720 
AT91_REG
 
	mAES_IDR
;

1721 
AT91_REG
 
	mAES_IMR
;

1722 
AT91_REG
 
	mAES_ISR
;

1723 
AT91_REG
 
	mAES_KEYWxR
[4];

1724 
AT91_REG
 
	mRe£rved1
[4];

1725 
AT91_REG
 
	mAES_IDATAxR
[4];

1726 
AT91_REG
 
	mAES_ODATAxR
[4];

1727 
AT91_REG
 
	mAES_IVxR
[4];

1728 
AT91_REG
 
	mRe£rved2
[35];

1729 
AT91_REG
 
	mAES_VR
;

1730 
AT91_REG
 
	mAES_RPR
;

1731 
AT91_REG
 
	mAES_RCR
;

1732 
AT91_REG
 
	mAES_TPR
;

1733 
AT91_REG
 
	mAES_TCR
;

1734 
AT91_REG
 
	mAES_RNPR
;

1735 
AT91_REG
 
	mAES_RNCR
;

1736 
AT91_REG
 
	mAES_TNPR
;

1737 
AT91_REG
 
	mAES_TNCR
;

1738 
AT91_REG
 
	mAES_PTCR
;

1739 
AT91_REG
 
	mAES_PTSR
;

1740 } 
	tAT91S_AES
, *
	tAT91PS_AES
;

1743 
	#AT91C_AES_START
 (() 0x1 << 0)

1744 
	#AT91C_AES_SWRST
 (() 0x1 << 8)

1745 
	#AT91C_AES_LOADSEED
 (() 0x1 << 16)

1747 
	#AT91C_AES_CIPHER
 (() 0x1 << 0)

1748 
	#AT91C_AES_PROCDLY
 (() 0xF << 4)

1749 
	#AT91C_AES_SMOD
 (() 0x3 << 8)

1750 
	#AT91C_AES_SMOD_MANUAL
 (() 0x0 << 8)

1751 
	#AT91C_AES_SMOD_AUTO
 (() 0x1 << 8)

1752 
	#AT91C_AES_SMOD_PDC
 (() 0x2 << 8)

1753 
	#AT91C_AES_OPMOD
 (() 0x7 << 12)

1754 
	#AT91C_AES_OPMOD_ECB
 (() 0x0 << 12)

1755 
	#AT91C_AES_OPMOD_CBC
 (() 0x1 << 12)

1756 
	#AT91C_AES_OPMOD_OFB
 (() 0x2 << 12)

1757 
	#AT91C_AES_OPMOD_CFB
 (() 0x3 << 12)

1758 
	#AT91C_AES_OPMOD_CTR
 (() 0x4 << 12)

1759 
	#AT91C_AES_LOD
 (() 0x1 << 15)

1760 
	#AT91C_AES_CFBS
 (() 0x7 << 16)

1761 
	#AT91C_AES_CFBS_128_BIT
 (() 0x0 << 16)

1762 
	#AT91C_AES_CFBS_64_BIT
 (() 0x1 << 16)

1763 
	#AT91C_AES_CFBS_32_BIT
 (() 0x2 << 16)

1764 
	#AT91C_AES_CFBS_16_BIT
 (() 0x3 << 16)

1765 
	#AT91C_AES_CFBS_8_BIT
 (() 0x4 << 16)

1766 
	#AT91C_AES_CKEY
 (() 0xF << 20)

1767 
	#AT91C_AES_CTYPE
 (() 0x1F << 24)

1768 
	#AT91C_AES_CTYPE_TYPE1_EN
 (() 0x1 << 24)

1769 
	#AT91C_AES_CTYPE_TYPE2_EN
 (() 0x2 << 24)

1770 
	#AT91C_AES_CTYPE_TYPE3_EN
 (() 0x4 << 24)

1771 
	#AT91C_AES_CTYPE_TYPE4_EN
 (() 0x8 << 24)

1772 
	#AT91C_AES_CTYPE_TYPE5_EN
 (() 0x10 << 24)

1774 
	#AT91C_AES_DATRDY
 (() 0x1 << 0)

1775 
	#AT91C_AES_ENDRX
 (() 0x1 << 1)

1776 
	#AT91C_AES_ENDTX
 (() 0x1 << 2)

1777 
	#AT91C_AES_RXBUFF
 (() 0x1 << 3)

1778 
	#AT91C_AES_TXBUFE
 (() 0x1 << 4)

1779 
	#AT91C_AES_URAD
 (() 0x1 << 8)

1783 
	#AT91C_AES_URAT
 (() 0x7 << 12)

1784 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1785 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1786 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1787 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (() 0x3 << 12)

1788 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (() 0x4 << 12)

1789 
	#AT91C_AES_URAT_WO_REG_READ
 (() 0x5 << 12)

1790 

	)

1794 
	s_AT91S_TDES
 {

1795 
AT91_REG
 
	mTDES_CR
;

1796 
AT91_REG
 
	mTDES_MR
;

1797 
AT91_REG
 
	mRe£rved0
[2];

1798 
AT91_REG
 
	mTDES_IER
;

1799 
AT91_REG
 
	mTDES_IDR
;

1800 
AT91_REG
 
	mTDES_IMR
;

1801 
AT91_REG
 
	mTDES_ISR
;

1802 
AT91_REG
 
	mTDES_KEY1WxR
[2];

1803 
AT91_REG
 
	mTDES_KEY2WxR
[2];

1804 
AT91_REG
 
	mTDES_KEY3WxR
[2];

1805 
AT91_REG
 
	mRe£rved1
[2];

1806 
AT91_REG
 
	mTDES_IDATAxR
[2];

1807 
AT91_REG
 
	mRe£rved2
[2];

1808 
AT91_REG
 
	mTDES_ODATAxR
[2];

1809 
AT91_REG
 
	mRe£rved3
[2];

1810 
AT91_REG
 
	mTDES_IVxR
[2];

1811 
AT91_REG
 
	mRe£rved4
[37];

1812 
AT91_REG
 
	mTDES_VR
;

1813 
AT91_REG
 
	mTDES_RPR
;

1814 
AT91_REG
 
	mTDES_RCR
;

1815 
AT91_REG
 
	mTDES_TPR
;

1816 
AT91_REG
 
	mTDES_TCR
;

1817 
AT91_REG
 
	mTDES_RNPR
;

1818 
AT91_REG
 
	mTDES_RNCR
;

1819 
AT91_REG
 
	mTDES_TNPR
;

1820 
AT91_REG
 
	mTDES_TNCR
;

1821 
AT91_REG
 
	mTDES_PTCR
;

1822 
AT91_REG
 
	mTDES_PTSR
;

1823 } 
	tAT91S_TDES
, *
	tAT91PS_TDES
;

1826 
	#AT91C_TDES_START
 (() 0x1 << 0)

1827 
	#AT91C_TDES_SWRST
 (() 0x1 << 8)

1829 
	#AT91C_TDES_CIPHER
 (() 0x1 << 0)

1830 
	#AT91C_TDES_TDESMOD
 (() 0x1 << 1)

1831 
	#AT91C_TDES_KEYMOD
 (() 0x1 << 4)

1832 
	#AT91C_TDES_SMOD
 (() 0x3 << 8)

1833 
	#AT91C_TDES_SMOD_MANUAL
 (() 0x0 << 8)

1834 
	#AT91C_TDES_SMOD_AUTO
 (() 0x1 << 8)

1835 
	#AT91C_TDES_SMOD_PDC
 (() 0x2 << 8)

1836 
	#AT91C_TDES_OPMOD
 (() 0x3 << 12)

1837 
	#AT91C_TDES_OPMOD_ECB
 (() 0x0 << 12)

1838 
	#AT91C_TDES_OPMOD_CBC
 (() 0x1 << 12)

1839 
	#AT91C_TDES_OPMOD_OFB
 (() 0x2 << 12)

1840 
	#AT91C_TDES_OPMOD_CFB
 (() 0x3 << 12)

1841 
	#AT91C_TDES_LOD
 (() 0x1 << 15)

1842 
	#AT91C_TDES_CFBS
 (() 0x3 << 16)

1843 
	#AT91C_TDES_CFBS_64_BIT
 (() 0x0 << 16)

1844 
	#AT91C_TDES_CFBS_32_BIT
 (() 0x1 << 16)

1845 
	#AT91C_TDES_CFBS_16_BIT
 (() 0x2 << 16)

1846 
	#AT91C_TDES_CFBS_8_BIT
 (() 0x3 << 16)

1848 
	#AT91C_TDES_DATRDY
 (() 0x1 << 0)

1849 
	#AT91C_TDES_ENDRX
 (() 0x1 << 1)

1850 
	#AT91C_TDES_ENDTX
 (() 0x1 << 2)

1851 
	#AT91C_TDES_RXBUFF
 (() 0x1 << 3)

1852 
	#AT91C_TDES_TXBUFE
 (() 0x1 << 4)

1853 
	#AT91C_TDES_URAD
 (() 0x1 << 8)

1857 
	#AT91C_TDES_URAT
 (() 0x3 << 12)

1858 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1859 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1860 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1861 
	#AT91C_TDES_URAT_WO_REG_READ
 (() 0x3 << 12)

1862 

	)

1868 
	#AT91C_AIC_IVR
 ((
AT91_REG
 *) 0xFFFFF100)

1869 
	#AT91C_AIC_SMR
 ((
AT91_REG
 *) 0xFFFFF000)

1870 
	#AT91C_AIC_FVR
 ((
AT91_REG
 *) 0xFFFFF104)

1871 
	#AT91C_AIC_DCR
 ((
AT91_REG
 *) 0xFFFFF138)

1872 
	#AT91C_AIC_EOICR
 ((
AT91_REG
 *) 0xFFFFF130)

1873 
	#AT91C_AIC_SVR
 ((
AT91_REG
 *) 0xFFFFF080)

1874 
	#AT91C_AIC_FFSR
 ((
AT91_REG
 *) 0xFFFFF148)

1875 
	#AT91C_AIC_ICCR
 ((
AT91_REG
 *) 0xFFFFF128)

1876 
	#AT91C_AIC_ISR
 ((
AT91_REG
 *) 0xFFFFF108)

1877 
	#AT91C_AIC_IMR
 ((
AT91_REG
 *) 0xFFFFF110)

1878 
	#AT91C_AIC_IPR
 ((
AT91_REG
 *) 0xFFFFF10C)

1879 
	#AT91C_AIC_FFER
 ((
AT91_REG
 *) 0xFFFFF140)

1880 
	#AT91C_AIC_IECR
 ((
AT91_REG
 *) 0xFFFFF120)

1881 
	#AT91C_AIC_ISCR
 ((
AT91_REG
 *) 0xFFFFF12C)

1882 
	#AT91C_AIC_FFDR
 ((
AT91_REG
 *) 0xFFFFF144)

1883 
	#AT91C_AIC_CISR
 ((
AT91_REG
 *) 0xFFFFF114)

1884 
	#AT91C_AIC_IDCR
 ((
AT91_REG
 *) 0xFFFFF124)

1885 
	#AT91C_AIC_SPU
 ((
AT91_REG
 *) 0xFFFFF134)

1887 
	#AT91C_DBGU_TCR
 ((
AT91_REG
 *) 0xFFFFF30C)

1888 
	#AT91C_DBGU_RNPR
 ((
AT91_REG
 *) 0xFFFFF310)

1889 
	#AT91C_DBGU_TNPR
 ((
AT91_REG
 *) 0xFFFFF318)

1890 
	#AT91C_DBGU_TPR
 ((
AT91_REG
 *) 0xFFFFF308)

1891 
	#AT91C_DBGU_RPR
 ((
AT91_REG
 *) 0xFFFFF300)

1892 
	#AT91C_DBGU_RCR
 ((
AT91_REG
 *) 0xFFFFF304)

1893 
	#AT91C_DBGU_RNCR
 ((
AT91_REG
 *) 0xFFFFF314)

1894 
	#AT91C_DBGU_PTCR
 ((
AT91_REG
 *) 0xFFFFF320)

1895 
	#AT91C_DBGU_PTSR
 ((
AT91_REG
 *) 0xFFFFF324)

1896 
	#AT91C_DBGU_TNCR
 ((
AT91_REG
 *) 0xFFFFF31C)

1898 
	#AT91C_DBGU_EXID
 ((
AT91_REG
 *) 0xFFFFF244)

1899 
	#AT91C_DBGU_BRGR
 ((
AT91_REG
 *) 0xFFFFF220)

1900 
	#AT91C_DBGU_IDR
 ((
AT91_REG
 *) 0xFFFFF20C)

1901 
	#AT91C_DBGU_CSR
 ((
AT91_REG
 *) 0xFFFFF214)

1902 
	#AT91C_DBGU_CIDR
 ((
AT91_REG
 *) 0xFFFFF240)

1903 
	#AT91C_DBGU_MR
 ((
AT91_REG
 *) 0xFFFFF204)

1904 
	#AT91C_DBGU_IMR
 ((
AT91_REG
 *) 0xFFFFF210)

1905 
	#AT91C_DBGU_CR
 ((
AT91_REG
 *) 0xFFFFF200)

1906 
	#AT91C_DBGU_FNTR
 ((
AT91_REG
 *) 0xFFFFF248)

1907 
	#AT91C_DBGU_THR
 ((
AT91_REG
 *) 0xFFFFF21C)

1908 
	#AT91C_DBGU_RHR
 ((
AT91_REG
 *) 0xFFFFF218)

1909 
	#AT91C_DBGU_IER
 ((
AT91_REG
 *) 0xFFFFF208)

1911 
	#AT91C_PIOA_ODR
 ((
AT91_REG
 *) 0xFFFFF414)

1912 
	#AT91C_PIOA_SODR
 ((
AT91_REG
 *) 0xFFFFF430)

1913 
	#AT91C_PIOA_ISR
 ((
AT91_REG
 *) 0xFFFFF44C)

1914 
	#AT91C_PIOA_ABSR
 ((
AT91_REG
 *) 0xFFFFF478)

1915 
	#AT91C_PIOA_IER
 ((
AT91_REG
 *) 0xFFFFF440)

1916 
	#AT91C_PIOA_PPUDR
 ((
AT91_REG
 *) 0xFFFFF460)

1917 
	#AT91C_PIOA_IMR
 ((
AT91_REG
 *) 0xFFFFF448)

1918 
	#AT91C_PIOA_PER
 ((
AT91_REG
 *) 0xFFFFF400)

1919 
	#AT91C_PIOA_IFDR
 ((
AT91_REG
 *) 0xFFFFF424)

1920 
	#AT91C_PIOA_OWDR
 ((
AT91_REG
 *) 0xFFFFF4A4)

1921 
	#AT91C_PIOA_MDSR
 ((
AT91_REG
 *) 0xFFFFF458)

1922 
	#AT91C_PIOA_IDR
 ((
AT91_REG
 *) 0xFFFFF444)

1923 
	#AT91C_PIOA_ODSR
 ((
AT91_REG
 *) 0xFFFFF438)

1924 
	#AT91C_PIOA_PPUSR
 ((
AT91_REG
 *) 0xFFFFF468)

1925 
	#AT91C_PIOA_OWSR
 ((
AT91_REG
 *) 0xFFFFF4A8)

1926 
	#AT91C_PIOA_BSR
 ((
AT91_REG
 *) 0xFFFFF474)

1927 
	#AT91C_PIOA_OWER
 ((
AT91_REG
 *) 0xFFFFF4A0)

1928 
	#AT91C_PIOA_IFER
 ((
AT91_REG
 *) 0xFFFFF420)

1929 
	#AT91C_PIOA_PDSR
 ((
AT91_REG
 *) 0xFFFFF43C)

1930 
	#AT91C_PIOA_PPUER
 ((
AT91_REG
 *) 0xFFFFF464)

1931 
	#AT91C_PIOA_OSR
 ((
AT91_REG
 *) 0xFFFFF418)

1932 
	#AT91C_PIOA_ASR
 ((
AT91_REG
 *) 0xFFFFF470)

1933 
	#AT91C_PIOA_MDDR
 ((
AT91_REG
 *) 0xFFFFF454)

1934 
	#AT91C_PIOA_CODR
 ((
AT91_REG
 *) 0xFFFFF434)

1935 
	#AT91C_PIOA_MDER
 ((
AT91_REG
 *) 0xFFFFF450)

1936 
	#AT91C_PIOA_PDR
 ((
AT91_REG
 *) 0xFFFFF404)

1937 
	#AT91C_PIOA_IFSR
 ((
AT91_REG
 *) 0xFFFFF428)

1938 
	#AT91C_PIOA_OER
 ((
AT91_REG
 *) 0xFFFFF410)

1939 
	#AT91C_PIOA_PSR
 ((
AT91_REG
 *) 0xFFFFF408)

1941 
	#AT91C_PIOB_OWDR
 ((
AT91_REG
 *) 0xFFFFF6A4)

1942 
	#AT91C_PIOB_MDER
 ((
AT91_REG
 *) 0xFFFFF650)

1943 
	#AT91C_PIOB_PPUSR
 ((
AT91_REG
 *) 0xFFFFF668)

1944 
	#AT91C_PIOB_IMR
 ((
AT91_REG
 *) 0xFFFFF648)

1945 
	#AT91C_PIOB_ASR
 ((
AT91_REG
 *) 0xFFFFF670)

1946 
	#AT91C_PIOB_PPUDR
 ((
AT91_REG
 *) 0xFFFFF660)

1947 
	#AT91C_PIOB_PSR
 ((
AT91_REG
 *) 0xFFFFF608)

1948 
	#AT91C_PIOB_IER
 ((
AT91_REG
 *) 0xFFFFF640)

1949 
	#AT91C_PIOB_CODR
 ((
AT91_REG
 *) 0xFFFFF634)

1950 
	#AT91C_PIOB_OWER
 ((
AT91_REG
 *) 0xFFFFF6A0)

1951 
	#AT91C_PIOB_ABSR
 ((
AT91_REG
 *) 0xFFFFF678)

1952 
	#AT91C_PIOB_IFDR
 ((
AT91_REG
 *) 0xFFFFF624)

1953 
	#AT91C_PIOB_PDSR
 ((
AT91_REG
 *) 0xFFFFF63C)

1954 
	#AT91C_PIOB_IDR
 ((
AT91_REG
 *) 0xFFFFF644)

1955 
	#AT91C_PIOB_OWSR
 ((
AT91_REG
 *) 0xFFFFF6A8)

1956 
	#AT91C_PIOB_PDR
 ((
AT91_REG
 *) 0xFFFFF604)

1957 
	#AT91C_PIOB_ODR
 ((
AT91_REG
 *) 0xFFFFF614)

1958 
	#AT91C_PIOB_IFSR
 ((
AT91_REG
 *) 0xFFFFF628)

1959 
	#AT91C_PIOB_PPUER
 ((
AT91_REG
 *) 0xFFFFF664)

1960 
	#AT91C_PIOB_SODR
 ((
AT91_REG
 *) 0xFFFFF630)

1961 
	#AT91C_PIOB_ISR
 ((
AT91_REG
 *) 0xFFFFF64C)

1962 
	#AT91C_PIOB_ODSR
 ((
AT91_REG
 *) 0xFFFFF638)

1963 
	#AT91C_PIOB_OSR
 ((
AT91_REG
 *) 0xFFFFF618)

1964 
	#AT91C_PIOB_MDSR
 ((
AT91_REG
 *) 0xFFFFF658)

1965 
	#AT91C_PIOB_IFER
 ((
AT91_REG
 *) 0xFFFFF620)

1966 
	#AT91C_PIOB_BSR
 ((
AT91_REG
 *) 0xFFFFF674)

1967 
	#AT91C_PIOB_MDDR
 ((
AT91_REG
 *) 0xFFFFF654)

1968 
	#AT91C_PIOB_OER
 ((
AT91_REG
 *) 0xFFFFF610)

1969 
	#AT91C_PIOB_PER
 ((
AT91_REG
 *) 0xFFFFF600)

1971 
	#AT91C_CKGR_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1972 
	#AT91C_CKGR_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1973 
	#AT91C_CKGR_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1975 
	#AT91C_PMC_IDR
 ((
AT91_REG
 *) 0xFFFFFC64)

1976 
	#AT91C_PMC_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1977 
	#AT91C_PMC_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1978 
	#AT91C_PMC_PCER
 ((
AT91_REG
 *) 0xFFFFFC10)

1979 
	#AT91C_PMC_PCKR
 ((
AT91_REG
 *) 0xFFFFFC40)

1980 
	#AT91C_PMC_MCKR
 ((
AT91_REG
 *) 0xFFFFFC30)

1981 
	#AT91C_PMC_SCDR
 ((
AT91_REG
 *) 0xFFFFFC04)

1982 
	#AT91C_PMC_PCDR
 ((
AT91_REG
 *) 0xFFFFFC14)

1983 
	#AT91C_PMC_SCSR
 ((
AT91_REG
 *) 0xFFFFFC08)

1984 
	#AT91C_PMC_PCSR
 ((
AT91_REG
 *) 0xFFFFFC18)

1985 
	#AT91C_PMC_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1986 
	#AT91C_PMC_SCER
 ((
AT91_REG
 *) 0xFFFFFC00)

1987 
	#AT91C_PMC_IMR
 ((
AT91_REG
 *) 0xFFFFFC6C)

1988 
	#AT91C_PMC_IER
 ((
AT91_REG
 *) 0xFFFFFC60)

1989 
	#AT91C_PMC_SR
 ((
AT91_REG
 *) 0xFFFFFC68)

1991 
	#AT91C_RSTC_RCR
 ((
AT91_REG
 *) 0xFFFFFD00)

1992 
	#AT91C_RSTC_RMR
 ((
AT91_REG
 *) 0xFFFFFD08)

1993 
	#AT91C_RSTC_RSR
 ((
AT91_REG
 *) 0xFFFFFD04)

1995 
	#AT91C_RTTC_RTSR
 ((
AT91_REG
 *) 0xFFFFFD2C)

1996 
	#AT91C_RTTC_RTMR
 ((
AT91_REG
 *) 0xFFFFFD20)

1997 
	#AT91C_RTTC_RTVR
 ((
AT91_REG
 *) 0xFFFFFD28)

1998 
	#AT91C_RTTC_RTAR
 ((
AT91_REG
 *) 0xFFFFFD24)

2000 
	#AT91C_PITC_PIVR
 ((
AT91_REG
 *) 0xFFFFFD38)

2001 
	#AT91C_PITC_PISR
 ((
AT91_REG
 *) 0xFFFFFD34)

2002 
	#AT91C_PITC_PIIR
 ((
AT91_REG
 *) 0xFFFFFD3C)

2003 
	#AT91C_PITC_PIMR
 ((
AT91_REG
 *) 0xFFFFFD30)

2005 
	#AT91C_WDTC_WDCR
 ((
AT91_REG
 *) 0xFFFFFD40)

2006 
	#AT91C_WDTC_WDSR
 ((
AT91_REG
 *) 0xFFFFFD48)

2007 
	#AT91C_WDTC_WDMR
 ((
AT91_REG
 *) 0xFFFFFD44)

2009 
	#AT91C_VREG_MR
 ((
AT91_REG
 *) 0xFFFFFD60)

2011 
	#AT91C_MC_ASR
 ((
AT91_REG
 *) 0xFFFFFF04)

2012 
	#AT91C_MC_RCR
 ((
AT91_REG
 *) 0xFFFFFF00)

2013 
	#AT91C_MC_FCR
 ((
AT91_REG
 *) 0xFFFFFF64)

2014 
	#AT91C_MC_AASR
 ((
AT91_REG
 *) 0xFFFFFF08)

2015 
	#AT91C_MC_FSR
 ((
AT91_REG
 *) 0xFFFFFF68)

2016 
	#AT91C_MC_FMR
 ((
AT91_REG
 *) 0xFFFFFF60)

2018 
	#AT91C_SPI1_PTCR
 ((
AT91_REG
 *) 0xFFFE4120)

2019 
	#AT91C_SPI1_RPR
 ((
AT91_REG
 *) 0xFFFE4100)

2020 
	#AT91C_SPI1_TNCR
 ((
AT91_REG
 *) 0xFFFE411C)

2021 
	#AT91C_SPI1_TPR
 ((
AT91_REG
 *) 0xFFFE4108)

2022 
	#AT91C_SPI1_TNPR
 ((
AT91_REG
 *) 0xFFFE4118)

2023 
	#AT91C_SPI1_TCR
 ((
AT91_REG
 *) 0xFFFE410C)

2024 
	#AT91C_SPI1_RCR
 ((
AT91_REG
 *) 0xFFFE4104)

2025 
	#AT91C_SPI1_RNPR
 ((
AT91_REG
 *) 0xFFFE4110)

2026 
	#AT91C_SPI1_RNCR
 ((
AT91_REG
 *) 0xFFFE4114)

2027 
	#AT91C_SPI1_PTSR
 ((
AT91_REG
 *) 0xFFFE4124)

2029 
	#AT91C_SPI1_IMR
 ((
AT91_REG
 *) 0xFFFE401C)

2030 
	#AT91C_SPI1_IER
 ((
AT91_REG
 *) 0xFFFE4014)

2031 
	#AT91C_SPI1_MR
 ((
AT91_REG
 *) 0xFFFE4004)

2032 
	#AT91C_SPI1_RDR
 ((
AT91_REG
 *) 0xFFFE4008)

2033 
	#AT91C_SPI1_IDR
 ((
AT91_REG
 *) 0xFFFE4018)

2034 
	#AT91C_SPI1_SR
 ((
AT91_REG
 *) 0xFFFE4010)

2035 
	#AT91C_SPI1_TDR
 ((
AT91_REG
 *) 0xFFFE400C)

2036 
	#AT91C_SPI1_CR
 ((
AT91_REG
 *) 0xFFFE4000)

2037 
	#AT91C_SPI1_CSR
 ((
AT91_REG
 *) 0xFFFE4030)

2039 
	#AT91C_SPI0_PTCR
 ((
AT91_REG
 *) 0xFFFE0120)

2040 
	#AT91C_SPI0_TPR
 ((
AT91_REG
 *) 0xFFFE0108)

2041 
	#AT91C_SPI0_TCR
 ((
AT91_REG
 *) 0xFFFE010C)

2042 
	#AT91C_SPI0_RCR
 ((
AT91_REG
 *) 0xFFFE0104)

2043 
	#AT91C_SPI0_PTSR
 ((
AT91_REG
 *) 0xFFFE0124)

2044 
	#AT91C_SPI0_RNPR
 ((
AT91_REG
 *) 0xFFFE0110)

2045 
	#AT91C_SPI0_RPR
 ((
AT91_REG
 *) 0xFFFE0100)

2046 
	#AT91C_SPI0_TNCR
 ((
AT91_REG
 *) 0xFFFE011C)

2047 
	#AT91C_SPI0_RNCR
 ((
AT91_REG
 *) 0xFFFE0114)

2048 
	#AT91C_SPI0_TNPR
 ((
AT91_REG
 *) 0xFFFE0118)

2050 
	#AT91C_SPI0_IER
 ((
AT91_REG
 *) 0xFFFE0014)

2051 
	#AT91C_SPI0_SR
 ((
AT91_REG
 *) 0xFFFE0010)

2052 
	#AT91C_SPI0_IDR
 ((
AT91_REG
 *) 0xFFFE0018)

2053 
	#AT91C_SPI0_CR
 ((
AT91_REG
 *) 0xFFFE0000)

2054 
	#AT91C_SPI0_MR
 ((
AT91_REG
 *) 0xFFFE0004)

2055 
	#AT91C_SPI0_IMR
 ((
AT91_REG
 *) 0xFFFE001C)

2056 
	#AT91C_SPI0_TDR
 ((
AT91_REG
 *) 0xFFFE000C)

2057 
	#AT91C_SPI0_RDR
 ((
AT91_REG
 *) 0xFFFE0008)

2058 
	#AT91C_SPI0_CSR
 ((
AT91_REG
 *) 0xFFFE0030)

2060 
	#AT91C_US1_RNCR
 ((
AT91_REG
 *) 0xFFFC4114)

2061 
	#AT91C_US1_PTCR
 ((
AT91_REG
 *) 0xFFFC4120)

2062 
	#AT91C_US1_TCR
 ((
AT91_REG
 *) 0xFFFC410C)

2063 
	#AT91C_US1_PTSR
 ((
AT91_REG
 *) 0xFFFC4124)

2064 
	#AT91C_US1_TNPR
 ((
AT91_REG
 *) 0xFFFC4118)

2065 
	#AT91C_US1_RCR
 ((
AT91_REG
 *) 0xFFFC4104)

2066 
	#AT91C_US1_RNPR
 ((
AT91_REG
 *) 0xFFFC4110)

2067 
	#AT91C_US1_RPR
 ((
AT91_REG
 *) 0xFFFC4100)

2068 
	#AT91C_US1_TNCR
 ((
AT91_REG
 *) 0xFFFC411C)

2069 
	#AT91C_US1_TPR
 ((
AT91_REG
 *) 0xFFFC4108)

2071 
	#AT91C_US1_IF
 ((
AT91_REG
 *) 0xFFFC404C)

2072 
	#AT91C_US1_NER
 ((
AT91_REG
 *) 0xFFFC4044)

2073 
	#AT91C_US1_RTOR
 ((
AT91_REG
 *) 0xFFFC4024)

2074 
	#AT91C_US1_CSR
 ((
AT91_REG
 *) 0xFFFC4014)

2075 
	#AT91C_US1_IDR
 ((
AT91_REG
 *) 0xFFFC400C)

2076 
	#AT91C_US1_IER
 ((
AT91_REG
 *) 0xFFFC4008)

2077 
	#AT91C_US1_THR
 ((
AT91_REG
 *) 0xFFFC401C)

2078 
	#AT91C_US1_TTGR
 ((
AT91_REG
 *) 0xFFFC4028)

2079 
	#AT91C_US1_RHR
 ((
AT91_REG
 *) 0xFFFC4018)

2080 
	#AT91C_US1_BRGR
 ((
AT91_REG
 *) 0xFFFC4020)

2081 
	#AT91C_US1_IMR
 ((
AT91_REG
 *) 0xFFFC4010)

2082 
	#AT91C_US1_FIDI
 ((
AT91_REG
 *) 0xFFFC4040)

2083 
	#AT91C_US1_CR
 ((
AT91_REG
 *) 0xFFFC4000)

2084 
	#AT91C_US1_MR
 ((
AT91_REG
 *) 0xFFFC4004)

2086 
	#AT91C_US0_TNPR
 ((
AT91_REG
 *) 0xFFFC0118)

2087 
	#AT91C_US0_RNPR
 ((
AT91_REG
 *) 0xFFFC0110)

2088 
	#AT91C_US0_TCR
 ((
AT91_REG
 *) 0xFFFC010C)

2089 
	#AT91C_US0_PTCR
 ((
AT91_REG
 *) 0xFFFC0120)

2090 
	#AT91C_US0_PTSR
 ((
AT91_REG
 *) 0xFFFC0124)

2091 
	#AT91C_US0_TNCR
 ((
AT91_REG
 *) 0xFFFC011C)

2092 
	#AT91C_US0_TPR
 ((
AT91_REG
 *) 0xFFFC0108)

2093 
	#AT91C_US0_RCR
 ((
AT91_REG
 *) 0xFFFC0104)

2094 
	#AT91C_US0_RPR
 ((
AT91_REG
 *) 0xFFFC0100)

2095 
	#AT91C_US0_RNCR
 ((
AT91_REG
 *) 0xFFFC0114)

2097 
	#AT91C_US0_BRGR
 ((
AT91_REG
 *) 0xFFFC0020)

2098 
	#AT91C_US0_NER
 ((
AT91_REG
 *) 0xFFFC0044)

2099 
	#AT91C_US0_CR
 ((
AT91_REG
 *) 0xFFFC0000)

2100 
	#AT91C_US0_IMR
 ((
AT91_REG
 *) 0xFFFC0010)

2101 
	#AT91C_US0_FIDI
 ((
AT91_REG
 *) 0xFFFC0040)

2102 
	#AT91C_US0_TTGR
 ((
AT91_REG
 *) 0xFFFC0028)

2103 
	#AT91C_US0_MR
 ((
AT91_REG
 *) 0xFFFC0004)

2104 
	#AT91C_US0_RTOR
 ((
AT91_REG
 *) 0xFFFC0024)

2105 
	#AT91C_US0_CSR
 ((
AT91_REG
 *) 0xFFFC0014)

2106 
	#AT91C_US0_RHR
 ((
AT91_REG
 *) 0xFFFC0018)

2107 
	#AT91C_US0_IDR
 ((
AT91_REG
 *) 0xFFFC000C)

2108 
	#AT91C_US0_THR
 ((
AT91_REG
 *) 0xFFFC001C)

2109 
	#AT91C_US0_IF
 ((
AT91_REG
 *) 0xFFFC004C)

2110 
	#AT91C_US0_IER
 ((
AT91_REG
 *) 0xFFFC0008)

2112 
	#AT91C_SSC_TNCR
 ((
AT91_REG
 *) 0xFFFD411C)

2113 
	#AT91C_SSC_RPR
 ((
AT91_REG
 *) 0xFFFD4100)

2114 
	#AT91C_SSC_RNCR
 ((
AT91_REG
 *) 0xFFFD4114)

2115 
	#AT91C_SSC_TPR
 ((
AT91_REG
 *) 0xFFFD4108)

2116 
	#AT91C_SSC_PTCR
 ((
AT91_REG
 *) 0xFFFD4120)

2117 
	#AT91C_SSC_TCR
 ((
AT91_REG
 *) 0xFFFD410C)

2118 
	#AT91C_SSC_RCR
 ((
AT91_REG
 *) 0xFFFD4104)

2119 
	#AT91C_SSC_RNPR
 ((
AT91_REG
 *) 0xFFFD4110)

2120 
	#AT91C_SSC_TNPR
 ((
AT91_REG
 *) 0xFFFD4118)

2121 
	#AT91C_SSC_PTSR
 ((
AT91_REG
 *) 0xFFFD4124)

2123 
	#AT91C_SSC_RHR
 ((
AT91_REG
 *) 0xFFFD4020)

2124 
	#AT91C_SSC_RSHR
 ((
AT91_REG
 *) 0xFFFD4030)

2125 
	#AT91C_SSC_TFMR
 ((
AT91_REG
 *) 0xFFFD401C)

2126 
	#AT91C_SSC_IDR
 ((
AT91_REG
 *) 0xFFFD4048)

2127 
	#AT91C_SSC_THR
 ((
AT91_REG
 *) 0xFFFD4024)

2128 
	#AT91C_SSC_RCMR
 ((
AT91_REG
 *) 0xFFFD4010)

2129 
	#AT91C_SSC_IER
 ((
AT91_REG
 *) 0xFFFD4044)

2130 
	#AT91C_SSC_TSHR
 ((
AT91_REG
 *) 0xFFFD4034)

2131 
	#AT91C_SSC_SR
 ((
AT91_REG
 *) 0xFFFD4040)

2132 
	#AT91C_SSC_CMR
 ((
AT91_REG
 *) 0xFFFD4004)

2133 
	#AT91C_SSC_TCMR
 ((
AT91_REG
 *) 0xFFFD4018)

2134 
	#AT91C_SSC_CR
 ((
AT91_REG
 *) 0xFFFD4000)

2135 
	#AT91C_SSC_IMR
 ((
AT91_REG
 *) 0xFFFD404C)

2136 
	#AT91C_SSC_RFMR
 ((
AT91_REG
 *) 0xFFFD4014)

2138 
	#AT91C_TWI_IER
 ((
AT91_REG
 *) 0xFFFB8024)

2139 
	#AT91C_TWI_CR
 ((
AT91_REG
 *) 0xFFFB8000)

2140 
	#AT91C_TWI_SR
 ((
AT91_REG
 *) 0xFFFB8020)

2141 
	#AT91C_TWI_IMR
 ((
AT91_REG
 *) 0xFFFB802C)

2142 
	#AT91C_TWI_THR
 ((
AT91_REG
 *) 0xFFFB8034)

2143 
	#AT91C_TWI_IDR
 ((
AT91_REG
 *) 0xFFFB8028)

2144 
	#AT91C_TWI_IADR
 ((
AT91_REG
 *) 0xFFFB800C)

2145 
	#AT91C_TWI_MMR
 ((
AT91_REG
 *) 0xFFFB8004)

2146 
	#AT91C_TWI_CWGR
 ((
AT91_REG
 *) 0xFFFB8010)

2147 
	#AT91C_TWI_RHR
 ((
AT91_REG
 *) 0xFFFB8030)

2149 
	#AT91C_PWMC_CH3_CUPDR
 ((
AT91_REG
 *) 0xFFFCC270)

2150 
	#AT91C_PWMC_CH3_Re£rved
 ((
AT91_REG
 *) 0xFFFCC274)

2151 
	#AT91C_PWMC_CH3_CPRDR
 ((
AT91_REG
 *) 0xFFFCC268)

2152 
	#AT91C_PWMC_CH3_CDTYR
 ((
AT91_REG
 *) 0xFFFCC264)

2153 
	#AT91C_PWMC_CH3_CCNTR
 ((
AT91_REG
 *) 0xFFFCC26C)

2154 
	#AT91C_PWMC_CH3_CMR
 ((
AT91_REG
 *) 0xFFFCC260)

2156 
	#AT91C_PWMC_CH2_Re£rved
 ((
AT91_REG
 *) 0xFFFCC254)

2157 
	#AT91C_PWMC_CH2_CMR
 ((
AT91_REG
 *) 0xFFFCC240)

2158 
	#AT91C_PWMC_CH2_CCNTR
 ((
AT91_REG
 *) 0xFFFCC24C)

2159 
	#AT91C_PWMC_CH2_CPRDR
 ((
AT91_REG
 *) 0xFFFCC248)

2160 
	#AT91C_PWMC_CH2_CUPDR
 ((
AT91_REG
 *) 0xFFFCC250)

2161 
	#AT91C_PWMC_CH2_CDTYR
 ((
AT91_REG
 *) 0xFFFCC244)

2163 
	#AT91C_PWMC_CH1_Re£rved
 ((
AT91_REG
 *) 0xFFFCC234)

2164 
	#AT91C_PWMC_CH1_CUPDR
 ((
AT91_REG
 *) 0xFFFCC230)

2165 
	#AT91C_PWMC_CH1_CPRDR
 ((
AT91_REG
 *) 0xFFFCC228)

2166 
	#AT91C_PWMC_CH1_CCNTR
 ((
AT91_REG
 *) 0xFFFCC22C)

2167 
	#AT91C_PWMC_CH1_CDTYR
 ((
AT91_REG
 *) 0xFFFCC224)

2168 
	#AT91C_PWMC_CH1_CMR
 ((
AT91_REG
 *) 0xFFFCC220)

2170 
	#AT91C_PWMC_CH0_Re£rved
 ((
AT91_REG
 *) 0xFFFCC214)

2171 
	#AT91C_PWMC_CH0_CPRDR
 ((
AT91_REG
 *) 0xFFFCC208)

2172 
	#AT91C_PWMC_CH0_CDTYR
 ((
AT91_REG
 *) 0xFFFCC204)

2173 
	#AT91C_PWMC_CH0_CMR
 ((
AT91_REG
 *) 0xFFFCC200)

2174 
	#AT91C_PWMC_CH0_CUPDR
 ((
AT91_REG
 *) 0xFFFCC210)

2175 
	#AT91C_PWMC_CH0_CCNTR
 ((
AT91_REG
 *) 0xFFFCC20C)

2177 
	#AT91C_PWMC_IDR
 ((
AT91_REG
 *) 0xFFFCC014)

2178 
	#AT91C_PWMC_DIS
 ((
AT91_REG
 *) 0xFFFCC008)

2179 
	#AT91C_PWMC_IER
 ((
AT91_REG
 *) 0xFFFCC010)

2180 
	#AT91C_PWMC_VR
 ((
AT91_REG
 *) 0xFFFCC0FC)

2181 
	#AT91C_PWMC_ISR
 ((
AT91_REG
 *) 0xFFFCC01C)

2182 
	#AT91C_PWMC_SR
 ((
AT91_REG
 *) 0xFFFCC00C)

2183 
	#AT91C_PWMC_IMR
 ((
AT91_REG
 *) 0xFFFCC018)

2184 
	#AT91C_PWMC_MR
 ((
AT91_REG
 *) 0xFFFCC000)

2185 
	#AT91C_PWMC_ENA
 ((
AT91_REG
 *) 0xFFFCC004)

2187 
	#AT91C_UDP_IMR
 ((
AT91_REG
 *) 0xFFFB0018)

2188 
	#AT91C_UDP_FADDR
 ((
AT91_REG
 *) 0xFFFB0008)

2189 
	#AT91C_UDP_NUM
 ((
AT91_REG
 *) 0xFFFB0000)

2190 
	#AT91C_UDP_FDR
 ((
AT91_REG
 *) 0xFFFB0050)

2191 
	#AT91C_UDP_ISR
 ((
AT91_REG
 *) 0xFFFB001C)

2192 
	#AT91C_UDP_CSR
 ((
AT91_REG
 *) 0xFFFB0030)

2193 
	#AT91C_UDP_IDR
 ((
AT91_REG
 *) 0xFFFB0014)

2194 
	#AT91C_UDP_ICR
 ((
AT91_REG
 *) 0xFFFB0020)

2195 
	#AT91C_UDP_RSTEP
 ((
AT91_REG
 *) 0xFFFB0028)

2196 
	#AT91C_UDP_TXVC
 ((
AT91_REG
 *) 0xFFFB0074)

2197 
	#AT91C_UDP_GLBSTATE
 ((
AT91_REG
 *) 0xFFFB0004)

2198 
	#AT91C_UDP_IER
 ((
AT91_REG
 *) 0xFFFB0010)

2200 
	#AT91C_TC0_SR
 ((
AT91_REG
 *) 0xFFFA0020)

2201 
	#AT91C_TC0_RC
 ((
AT91_REG
 *) 0xFFFA001C)

2202 
	#AT91C_TC0_RB
 ((
AT91_REG
 *) 0xFFFA0018)

2203 
	#AT91C_TC0_CCR
 ((
AT91_REG
 *) 0xFFFA0000)

2204 
	#AT91C_TC0_CMR
 ((
AT91_REG
 *) 0xFFFA0004)

2205 
	#AT91C_TC0_IER
 ((
AT91_REG
 *) 0xFFFA0024)

2206 
	#AT91C_TC0_RA
 ((
AT91_REG
 *) 0xFFFA0014)

2207 
	#AT91C_TC0_IDR
 ((
AT91_REG
 *) 0xFFFA0028)

2208 
	#AT91C_TC0_CV
 ((
AT91_REG
 *) 0xFFFA0010)

2209 
	#AT91C_TC0_IMR
 ((
AT91_REG
 *) 0xFFFA002C)

2211 
	#AT91C_TC1_RB
 ((
AT91_REG
 *) 0xFFFA0058)

2212 
	#AT91C_TC1_CCR
 ((
AT91_REG
 *) 0xFFFA0040)

2213 
	#AT91C_TC1_IER
 ((
AT91_REG
 *) 0xFFFA0064)

2214 
	#AT91C_TC1_IDR
 ((
AT91_REG
 *) 0xFFFA0068)

2215 
	#AT91C_TC1_SR
 ((
AT91_REG
 *) 0xFFFA0060)

2216 
	#AT91C_TC1_CMR
 ((
AT91_REG
 *) 0xFFFA0044)

2217 
	#AT91C_TC1_RA
 ((
AT91_REG
 *) 0xFFFA0054)

2218 
	#AT91C_TC1_RC
 ((
AT91_REG
 *) 0xFFFA005C)

2219 
	#AT91C_TC1_IMR
 ((
AT91_REG
 *) 0xFFFA006C)

2220 
	#AT91C_TC1_CV
 ((
AT91_REG
 *) 0xFFFA0050)

2222 
	#AT91C_TC2_CMR
 ((
AT91_REG
 *) 0xFFFA0084)

2223 
	#AT91C_TC2_CCR
 ((
AT91_REG
 *) 0xFFFA0080)

2224 
	#AT91C_TC2_CV
 ((
AT91_REG
 *) 0xFFFA0090)

2225 
	#AT91C_TC2_RA
 ((
AT91_REG
 *) 0xFFFA0094)

2226 
	#AT91C_TC2_RB
 ((
AT91_REG
 *) 0xFFFA0098)

2227 
	#AT91C_TC2_IDR
 ((
AT91_REG
 *) 0xFFFA00A8)

2228 
	#AT91C_TC2_IMR
 ((
AT91_REG
 *) 0xFFFA00AC)

2229 
	#AT91C_TC2_RC
 ((
AT91_REG
 *) 0xFFFA009C)

2230 
	#AT91C_TC2_IER
 ((
AT91_REG
 *) 0xFFFA00A4)

2231 
	#AT91C_TC2_SR
 ((
AT91_REG
 *) 0xFFFA00A0)

2233 
	#AT91C_TCB_BMR
 ((
AT91_REG
 *) 0xFFFA00C4)

2234 
	#AT91C_TCB_BCR
 ((
AT91_REG
 *) 0xFFFA00C0)

2236 
	#AT91C_CAN_MB0_MDL
 ((
AT91_REG
 *) 0xFFFD0214)

2237 
	#AT91C_CAN_MB0_MAM
 ((
AT91_REG
 *) 0xFFFD0204)

2238 
	#AT91C_CAN_MB0_MCR
 ((
AT91_REG
 *) 0xFFFD021C)

2239 
	#AT91C_CAN_MB0_MID
 ((
AT91_REG
 *) 0xFFFD0208)

2240 
	#AT91C_CAN_MB0_MSR
 ((
AT91_REG
 *) 0xFFFD0210)

2241 
	#AT91C_CAN_MB0_MFID
 ((
AT91_REG
 *) 0xFFFD020C)

2242 
	#AT91C_CAN_MB0_MDH
 ((
AT91_REG
 *) 0xFFFD0218)

2243 
	#AT91C_CAN_MB0_MMR
 ((
AT91_REG
 *) 0xFFFD0200)

2245 
	#AT91C_CAN_MB1_MDL
 ((
AT91_REG
 *) 0xFFFD0234)

2246 
	#AT91C_CAN_MB1_MID
 ((
AT91_REG
 *) 0xFFFD0228)

2247 
	#AT91C_CAN_MB1_MMR
 ((
AT91_REG
 *) 0xFFFD0220)

2248 
	#AT91C_CAN_MB1_MSR
 ((
AT91_REG
 *) 0xFFFD0230)

2249 
	#AT91C_CAN_MB1_MAM
 ((
AT91_REG
 *) 0xFFFD0224)

2250 
	#AT91C_CAN_MB1_MDH
 ((
AT91_REG
 *) 0xFFFD0238)

2251 
	#AT91C_CAN_MB1_MCR
 ((
AT91_REG
 *) 0xFFFD023C)

2252 
	#AT91C_CAN_MB1_MFID
 ((
AT91_REG
 *) 0xFFFD022C)

2254 
	#AT91C_CAN_MB2_MCR
 ((
AT91_REG
 *) 0xFFFD025C)

2255 
	#AT91C_CAN_MB2_MDH
 ((
AT91_REG
 *) 0xFFFD0258)

2256 
	#AT91C_CAN_MB2_MID
 ((
AT91_REG
 *) 0xFFFD0248)

2257 
	#AT91C_CAN_MB2_MDL
 ((
AT91_REG
 *) 0xFFFD0254)

2258 
	#AT91C_CAN_MB2_MMR
 ((
AT91_REG
 *) 0xFFFD0240)

2259 
	#AT91C_CAN_MB2_MAM
 ((
AT91_REG
 *) 0xFFFD0244)

2260 
	#AT91C_CAN_MB2_MFID
 ((
AT91_REG
 *) 0xFFFD024C)

2261 
	#AT91C_CAN_MB2_MSR
 ((
AT91_REG
 *) 0xFFFD0250)

2263 
	#AT91C_CAN_MB3_MFID
 ((
AT91_REG
 *) 0xFFFD026C)

2264 
	#AT91C_CAN_MB3_MAM
 ((
AT91_REG
 *) 0xFFFD0264)

2265 
	#AT91C_CAN_MB3_MID
 ((
AT91_REG
 *) 0xFFFD0268)

2266 
	#AT91C_CAN_MB3_MCR
 ((
AT91_REG
 *) 0xFFFD027C)

2267 
	#AT91C_CAN_MB3_MMR
 ((
AT91_REG
 *) 0xFFFD0260)

2268 
	#AT91C_CAN_MB3_MSR
 ((
AT91_REG
 *) 0xFFFD0270)

2269 
	#AT91C_CAN_MB3_MDL
 ((
AT91_REG
 *) 0xFFFD0274)

2270 
	#AT91C_CAN_MB3_MDH
 ((
AT91_REG
 *) 0xFFFD0278)

2272 
	#AT91C_CAN_MB4_MID
 ((
AT91_REG
 *) 0xFFFD0288)

2273 
	#AT91C_CAN_MB4_MMR
 ((
AT91_REG
 *) 0xFFFD0280)

2274 
	#AT91C_CAN_MB4_MDH
 ((
AT91_REG
 *) 0xFFFD0298)

2275 
	#AT91C_CAN_MB4_MFID
 ((
AT91_REG
 *) 0xFFFD028C)

2276 
	#AT91C_CAN_MB4_MSR
 ((
AT91_REG
 *) 0xFFFD0290)

2277 
	#AT91C_CAN_MB4_MCR
 ((
AT91_REG
 *) 0xFFFD029C)

2278 
	#AT91C_CAN_MB4_MDL
 ((
AT91_REG
 *) 0xFFFD0294)

2279 
	#AT91C_CAN_MB4_MAM
 ((
AT91_REG
 *) 0xFFFD0284)

2281 
	#AT91C_CAN_MB5_MSR
 ((
AT91_REG
 *) 0xFFFD02B0)

2282 
	#AT91C_CAN_MB5_MCR
 ((
AT91_REG
 *) 0xFFFD02BC)

2283 
	#AT91C_CAN_MB5_MFID
 ((
AT91_REG
 *) 0xFFFD02AC)

2284 
	#AT91C_CAN_MB5_MDH
 ((
AT91_REG
 *) 0xFFFD02B8)

2285 
	#AT91C_CAN_MB5_MID
 ((
AT91_REG
 *) 0xFFFD02A8)

2286 
	#AT91C_CAN_MB5_MMR
 ((
AT91_REG
 *) 0xFFFD02A0)

2287 
	#AT91C_CAN_MB5_MDL
 ((
AT91_REG
 *) 0xFFFD02B4)

2288 
	#AT91C_CAN_MB5_MAM
 ((
AT91_REG
 *) 0xFFFD02A4)

2290 
	#AT91C_CAN_MB6_MFID
 ((
AT91_REG
 *) 0xFFFD02CC)

2291 
	#AT91C_CAN_MB6_MID
 ((
AT91_REG
 *) 0xFFFD02C8)

2292 
	#AT91C_CAN_MB6_MAM
 ((
AT91_REG
 *) 0xFFFD02C4)

2293 
	#AT91C_CAN_MB6_MSR
 ((
AT91_REG
 *) 0xFFFD02D0)

2294 
	#AT91C_CAN_MB6_MDL
 ((
AT91_REG
 *) 0xFFFD02D4)

2295 
	#AT91C_CAN_MB6_MCR
 ((
AT91_REG
 *) 0xFFFD02DC)

2296 
	#AT91C_CAN_MB6_MDH
 ((
AT91_REG
 *) 0xFFFD02D8)

2297 
	#AT91C_CAN_MB6_MMR
 ((
AT91_REG
 *) 0xFFFD02C0)

2299 
	#AT91C_CAN_MB7_MCR
 ((
AT91_REG
 *) 0xFFFD02FC)

2300 
	#AT91C_CAN_MB7_MDH
 ((
AT91_REG
 *) 0xFFFD02F8)

2301 
	#AT91C_CAN_MB7_MFID
 ((
AT91_REG
 *) 0xFFFD02EC)

2302 
	#AT91C_CAN_MB7_MDL
 ((
AT91_REG
 *) 0xFFFD02F4)

2303 
	#AT91C_CAN_MB7_MID
 ((
AT91_REG
 *) 0xFFFD02E8)

2304 
	#AT91C_CAN_MB7_MMR
 ((
AT91_REG
 *) 0xFFFD02E0)

2305 
	#AT91C_CAN_MB7_MAM
 ((
AT91_REG
 *) 0xFFFD02E4)

2306 
	#AT91C_CAN_MB7_MSR
 ((
AT91_REG
 *) 0xFFFD02F0)

2308 
	#AT91C_CAN_TCR
 ((
AT91_REG
 *) 0xFFFD0024)

2309 
	#AT91C_CAN_IMR
 ((
AT91_REG
 *) 0xFFFD000C)

2310 
	#AT91C_CAN_IER
 ((
AT91_REG
 *) 0xFFFD0004)

2311 
	#AT91C_CAN_ECR
 ((
AT91_REG
 *) 0xFFFD0020)

2312 
	#AT91C_CAN_TIMESTP
 ((
AT91_REG
 *) 0xFFFD001C)

2313 
	#AT91C_CAN_MR
 ((
AT91_REG
 *) 0xFFFD0000)

2314 
	#AT91C_CAN_IDR
 ((
AT91_REG
 *) 0xFFFD0008)

2315 
	#AT91C_CAN_ACR
 ((
AT91_REG
 *) 0xFFFD0028)

2316 
	#AT91C_CAN_TIM
 ((
AT91_REG
 *) 0xFFFD0018)

2317 
	#AT91C_CAN_SR
 ((
AT91_REG
 *) 0xFFFD0010)

2318 
	#AT91C_CAN_BR
 ((
AT91_REG
 *) 0xFFFD0014)

2319 
	#AT91C_CAN_VR
 ((
AT91_REG
 *) 0xFFFD00FC)

2321 
	#AT91C_EMAC_ISR
 ((
AT91_REG
 *) 0xFFFDC024)

2322 
	#AT91C_EMAC_SA4H
 ((
AT91_REG
 *) 0xFFFDC0B4)

2323 
	#AT91C_EMAC_SA1L
 ((
AT91_REG
 *) 0xFFFDC098)

2324 
	#AT91C_EMAC_ELE
 ((
AT91_REG
 *) 0xFFFDC078)

2325 
	#AT91C_EMAC_LCOL
 ((
AT91_REG
 *) 0xFFFDC05C)

2326 
	#AT91C_EMAC_RLE
 ((
AT91_REG
 *) 0xFFFDC088)

2327 
	#AT91C_EMAC_WOL
 ((
AT91_REG
 *) 0xFFFDC0C4)

2328 
	#AT91C_EMAC_DTF
 ((
AT91_REG
 *) 0xFFFDC058)

2329 
	#AT91C_EMAC_TUND
 ((
AT91_REG
 *) 0xFFFDC064)

2330 
	#AT91C_EMAC_NCR
 ((
AT91_REG
 *) 0xFFFDC000)

2331 
	#AT91C_EMAC_SA4L
 ((
AT91_REG
 *) 0xFFFDC0B0)

2332 
	#AT91C_EMAC_RSR
 ((
AT91_REG
 *) 0xFFFDC020)

2333 
	#AT91C_EMAC_SA3L
 ((
AT91_REG
 *) 0xFFFDC0A8)

2334 
	#AT91C_EMAC_TSR
 ((
AT91_REG
 *) 0xFFFDC014)

2335 
	#AT91C_EMAC_IDR
 ((
AT91_REG
 *) 0xFFFDC02C)

2336 
	#AT91C_EMAC_RSE
 ((
AT91_REG
 *) 0xFFFDC074)

2337 
	#AT91C_EMAC_ECOL
 ((
AT91_REG
 *) 0xFFFDC060)

2338 
	#AT91C_EMAC_TID
 ((
AT91_REG
 *) 0xFFFDC0B8)

2339 
	#AT91C_EMAC_HRB
 ((
AT91_REG
 *) 0xFFFDC090)

2340 
	#AT91C_EMAC_TBQP
 ((
AT91_REG
 *) 0xFFFDC01C)

2341 
	#AT91C_EMAC_USRIO
 ((
AT91_REG
 *) 0xFFFDC0C0)

2342 
	#AT91C_EMAC_PTR
 ((
AT91_REG
 *) 0xFFFDC038)

2343 
	#AT91C_EMAC_SA2H
 ((
AT91_REG
 *) 0xFFFDC0A4)

2344 
	#AT91C_EMAC_ROV
 ((
AT91_REG
 *) 0xFFFDC070)

2345 
	#AT91C_EMAC_ALE
 ((
AT91_REG
 *) 0xFFFDC054)

2346 
	#AT91C_EMAC_RJA
 ((
AT91_REG
 *) 0xFFFDC07C)

2347 
	#AT91C_EMAC_RBQP
 ((
AT91_REG
 *) 0xFFFDC018)

2348 
	#AT91C_EMAC_TPF
 ((
AT91_REG
 *) 0xFFFDC08C)

2349 
	#AT91C_EMAC_NCFGR
 ((
AT91_REG
 *) 0xFFFDC004)

2350 
	#AT91C_EMAC_HRT
 ((
AT91_REG
 *) 0xFFFDC094)

2351 
	#AT91C_EMAC_USF
 ((
AT91_REG
 *) 0xFFFDC080)

2352 
	#AT91C_EMAC_FCSE
 ((
AT91_REG
 *) 0xFFFDC050)

2353 
	#AT91C_EMAC_TPQ
 ((
AT91_REG
 *) 0xFFFDC0BC)

2354 
	#AT91C_EMAC_MAN
 ((
AT91_REG
 *) 0xFFFDC034)

2355 
	#AT91C_EMAC_FTO
 ((
AT91_REG
 *) 0xFFFDC040)

2356 
	#AT91C_EMAC_REV
 ((
AT91_REG
 *) 0xFFFDC0FC)

2357 
	#AT91C_EMAC_IMR
 ((
AT91_REG
 *) 0xFFFDC030)

2358 
	#AT91C_EMAC_SCF
 ((
AT91_REG
 *) 0xFFFDC044)

2359 
	#AT91C_EMAC_PFR
 ((
AT91_REG
 *) 0xFFFDC03C)

2360 
	#AT91C_EMAC_MCF
 ((
AT91_REG
 *) 0xFFFDC048)

2361 
	#AT91C_EMAC_NSR
 ((
AT91_REG
 *) 0xFFFDC008)

2362 
	#AT91C_EMAC_SA2L
 ((
AT91_REG
 *) 0xFFFDC0A0)

2363 
	#AT91C_EMAC_FRO
 ((
AT91_REG
 *) 0xFFFDC04C)

2364 
	#AT91C_EMAC_IER
 ((
AT91_REG
 *) 0xFFFDC028)

2365 
	#AT91C_EMAC_SA1H
 ((
AT91_REG
 *) 0xFFFDC09C)

2366 
	#AT91C_EMAC_CSE
 ((
AT91_REG
 *) 0xFFFDC068)

2367 
	#AT91C_EMAC_SA3H
 ((
AT91_REG
 *) 0xFFFDC0AC)

2368 
	#AT91C_EMAC_RRE
 ((
AT91_REG
 *) 0xFFFDC06C)

2369 
	#AT91C_EMAC_STE
 ((
AT91_REG
 *) 0xFFFDC084)

2371 
	#AT91C_ADC_PTSR
 ((
AT91_REG
 *) 0xFFFD8124)

2372 
	#AT91C_ADC_PTCR
 ((
AT91_REG
 *) 0xFFFD8120)

2373 
	#AT91C_ADC_TNPR
 ((
AT91_REG
 *) 0xFFFD8118)

2374 
	#AT91C_ADC_TNCR
 ((
AT91_REG
 *) 0xFFFD811C)

2375 
	#AT91C_ADC_RNPR
 ((
AT91_REG
 *) 0xFFFD8110)

2376 
	#AT91C_ADC_RNCR
 ((
AT91_REG
 *) 0xFFFD8114)

2377 
	#AT91C_ADC_RPR
 ((
AT91_REG
 *) 0xFFFD8100)

2378 
	#AT91C_ADC_TCR
 ((
AT91_REG
 *) 0xFFFD810C)

2379 
	#AT91C_ADC_TPR
 ((
AT91_REG
 *) 0xFFFD8108)

2380 
	#AT91C_ADC_RCR
 ((
AT91_REG
 *) 0xFFFD8104)

2382 
	#AT91C_ADC_CDR2
 ((
AT91_REG
 *) 0xFFFD8038)

2383 
	#AT91C_ADC_CDR3
 ((
AT91_REG
 *) 0xFFFD803C)

2384 
	#AT91C_ADC_CDR0
 ((
AT91_REG
 *) 0xFFFD8030)

2385 
	#AT91C_ADC_CDR5
 ((
AT91_REG
 *) 0xFFFD8044)

2386 
	#AT91C_ADC_CHDR
 ((
AT91_REG
 *) 0xFFFD8014)

2387 
	#AT91C_ADC_SR
 ((
AT91_REG
 *) 0xFFFD801C)

2388 
	#AT91C_ADC_CDR4
 ((
AT91_REG
 *) 0xFFFD8040)

2389 
	#AT91C_ADC_CDR1
 ((
AT91_REG
 *) 0xFFFD8034)

2390 
	#AT91C_ADC_LCDR
 ((
AT91_REG
 *) 0xFFFD8020)

2391 
	#AT91C_ADC_IDR
 ((
AT91_REG
 *) 0xFFFD8028)

2392 
	#AT91C_ADC_CR
 ((
AT91_REG
 *) 0xFFFD8000)

2393 
	#AT91C_ADC_CDR7
 ((
AT91_REG
 *) 0xFFFD804C)

2394 
	#AT91C_ADC_CDR6
 ((
AT91_REG
 *) 0xFFFD8048)

2395 
	#AT91C_ADC_IER
 ((
AT91_REG
 *) 0xFFFD8024)

2396 
	#AT91C_ADC_CHER
 ((
AT91_REG
 *) 0xFFFD8010)

2397 
	#AT91C_ADC_CHSR
 ((
AT91_REG
 *) 0xFFFD8018)

2398 
	#AT91C_ADC_MR
 ((
AT91_REG
 *) 0xFFFD8004)

2399 
	#AT91C_ADC_IMR
 ((
AT91_REG
 *) 0xFFFD802C)

2401 
	#AT91C_AES_TPR
 ((
AT91_REG
 *) 0xFFFA4108)

2402 
	#AT91C_AES_PTCR
 ((
AT91_REG
 *) 0xFFFA4120)

2403 
	#AT91C_AES_RNPR
 ((
AT91_REG
 *) 0xFFFA4110)

2404 
	#AT91C_AES_TNCR
 ((
AT91_REG
 *) 0xFFFA411C)

2405 
	#AT91C_AES_TCR
 ((
AT91_REG
 *) 0xFFFA410C)

2406 
	#AT91C_AES_RCR
 ((
AT91_REG
 *) 0xFFFA4104)

2407 
	#AT91C_AES_RNCR
 ((
AT91_REG
 *) 0xFFFA4114)

2408 
	#AT91C_AES_TNPR
 ((
AT91_REG
 *) 0xFFFA4118)

2409 
	#AT91C_AES_RPR
 ((
AT91_REG
 *) 0xFFFA4100)

2410 
	#AT91C_AES_PTSR
 ((
AT91_REG
 *) 0xFFFA4124)

2412 
	#AT91C_AES_IVxR
 ((
AT91_REG
 *) 0xFFFA4060)

2413 
	#AT91C_AES_MR
 ((
AT91_REG
 *) 0xFFFA4004)

2414 
	#AT91C_AES_VR
 ((
AT91_REG
 *) 0xFFFA40FC)

2415 
	#AT91C_AES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA4050)

2416 
	#AT91C_AES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA4040)

2417 
	#AT91C_AES_CR
 ((
AT91_REG
 *) 0xFFFA4000)

2418 
	#AT91C_AES_IDR
 ((
AT91_REG
 *) 0xFFFA4014)

2419 
	#AT91C_AES_IMR
 ((
AT91_REG
 *) 0xFFFA4018)

2420 
	#AT91C_AES_IER
 ((
AT91_REG
 *) 0xFFFA4010)

2421 
	#AT91C_AES_KEYWxR
 ((
AT91_REG
 *) 0xFFFA4020)

2422 
	#AT91C_AES_ISR
 ((
AT91_REG
 *) 0xFFFA401C)

2424 
	#AT91C_TDES_RNCR
 ((
AT91_REG
 *) 0xFFFA8114)

2425 
	#AT91C_TDES_TCR
 ((
AT91_REG
 *) 0xFFFA810C)

2426 
	#AT91C_TDES_RCR
 ((
AT91_REG
 *) 0xFFFA8104)

2427 
	#AT91C_TDES_TNPR
 ((
AT91_REG
 *) 0xFFFA8118)

2428 
	#AT91C_TDES_RNPR
 ((
AT91_REG
 *) 0xFFFA8110)

2429 
	#AT91C_TDES_RPR
 ((
AT91_REG
 *) 0xFFFA8100)

2430 
	#AT91C_TDES_TNCR
 ((
AT91_REG
 *) 0xFFFA811C)

2431 
	#AT91C_TDES_TPR
 ((
AT91_REG
 *) 0xFFFA8108)

2432 
	#AT91C_TDES_PTSR
 ((
AT91_REG
 *) 0xFFFA8124)

2433 
	#AT91C_TDES_PTCR
 ((
AT91_REG
 *) 0xFFFA8120)

2435 
	#AT91C_TDES_KEY2WxR
 ((
AT91_REG
 *) 0xFFFA8028)

2436 
	#AT91C_TDES_KEY3WxR
 ((
AT91_REG
 *) 0xFFFA8030)

2437 
	#AT91C_TDES_IDR
 ((
AT91_REG
 *) 0xFFFA8014)

2438 
	#AT91C_TDES_VR
 ((
AT91_REG
 *) 0xFFFA80FC)

2439 
	#AT91C_TDES_IVxR
 ((
AT91_REG
 *) 0xFFFA8060)

2440 
	#AT91C_TDES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA8050)

2441 
	#AT91C_TDES_IMR
 ((
AT91_REG
 *) 0xFFFA8018)

2442 
	#AT91C_TDES_MR
 ((
AT91_REG
 *) 0xFFFA8004)

2443 
	#AT91C_TDES_CR
 ((
AT91_REG
 *) 0xFFFA8000)

2444 
	#AT91C_TDES_IER
 ((
AT91_REG
 *) 0xFFFA8010)

2445 
	#AT91C_TDES_ISR
 ((
AT91_REG
 *) 0xFFFA801C)

2446 
	#AT91C_TDES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA8040)

2447 
	#AT91C_TDES_KEY1WxR
 ((
AT91_REG
 *) 0xFFFA8020)

2448 

	)

2452 
	#AT91C_PIO_PA0
 (() 1 << 0)

2453 
	#AT91C_PA0_RXD0
 ((Ë
AT91C_PIO_PA0
)

2454 
	#AT91C_PIO_PA1
 (() 1 << 1)

2455 
	#AT91C_PA1_TXD0
 ((Ë
AT91C_PIO_PA1
)

2456 
	#AT91C_PIO_PA10
 (() 1 << 10)

2457 
	#AT91C_PA10_TWD
 ((Ë
AT91C_PIO_PA10
)

2458 
	#AT91C_PIO_PA11
 (() 1 << 11)

2459 
	#AT91C_PA11_TWCK
 ((Ë
AT91C_PIO_PA11
)

2460 
	#AT91C_PIO_PA12
 (() 1 << 12)

2461 
	#AT91C_PA12_NPCS00
 ((Ë
AT91C_PIO_PA12
)

2462 
	#AT91C_PIO_PA13
 (() 1 << 13)

2463 
	#AT91C_PA13_NPCS01
 ((Ë
AT91C_PIO_PA13
)

2464 
	#AT91C_PA13_PCK1
 ((Ë
AT91C_PIO_PA13
)

2465 
	#AT91C_PIO_PA14
 (() 1 << 14)

2466 
	#AT91C_PA14_NPCS02
 ((Ë
AT91C_PIO_PA14
)

2467 
	#AT91C_PA14_IRQ1
 ((Ë
AT91C_PIO_PA14
)

2468 
	#AT91C_PIO_PA15
 (() 1 << 15)

2469 
	#AT91C_PA15_NPCS03
 ((Ë
AT91C_PIO_PA15
)

2470 
	#AT91C_PA15_TCLK2
 ((Ë
AT91C_PIO_PA15
)

2471 
	#AT91C_PIO_PA16
 (() 1 << 16)

2472 
	#AT91C_PA16_MISO0
 ((Ë
AT91C_PIO_PA16
)

2473 
	#AT91C_PIO_PA17
 (() 1 << 17)

2474 
	#AT91C_PA17_MOSI0
 ((Ë
AT91C_PIO_PA17
)

2475 
	#AT91C_PIO_PA18
 (() 1 << 18)

2476 
	#AT91C_PA18_SPCK0
 ((Ë
AT91C_PIO_PA18
)

2477 
	#AT91C_PIO_PA19
 (() 1 << 19)

2478 
	#AT91C_PA19_CANRX
 ((Ë
AT91C_PIO_PA19
)

2479 
	#AT91C_PIO_PA2
 (() 1 << 2)

2480 
	#AT91C_PA2_SCK0
 ((Ë
AT91C_PIO_PA2
)

2481 
	#AT91C_PA2_NPCS11
 ((Ë
AT91C_PIO_PA2
)

2482 
	#AT91C_PIO_PA20
 (() 1 << 20)

2483 
	#AT91C_PA20_CANTX
 ((Ë
AT91C_PIO_PA20
)

2484 
	#AT91C_PIO_PA21
 (() 1 << 21)

2485 
	#AT91C_PA21_TF
 ((Ë
AT91C_PIO_PA21
)

2486 
	#AT91C_PA21_NPCS10
 ((Ë
AT91C_PIO_PA21
)

2487 
	#AT91C_PIO_PA22
 (() 1 << 22)

2488 
	#AT91C_PA22_TK
 ((Ë
AT91C_PIO_PA22
)

2489 
	#AT91C_PA22_SPCK1
 ((Ë
AT91C_PIO_PA22
)

2490 
	#AT91C_PIO_PA23
 (() 1 << 23)

2491 
	#AT91C_PA23_TD
 ((Ë
AT91C_PIO_PA23
)

2492 
	#AT91C_PA23_MOSI1
 ((Ë
AT91C_PIO_PA23
)

2493 
	#AT91C_PIO_PA24
 (() 1 << 24)

2494 
	#AT91C_PA24_RD
 ((Ë
AT91C_PIO_PA24
)

2495 
	#AT91C_PA24_MISO1
 ((Ë
AT91C_PIO_PA24
)

2496 
	#AT91C_PIO_PA25
 (() 1 << 25)

2497 
	#AT91C_PA25_RK
 ((Ë
AT91C_PIO_PA25
)

2498 
	#AT91C_PA25_NPCS11
 ((Ë
AT91C_PIO_PA25
)

2499 
	#AT91C_PIO_PA26
 (() 1 << 26)

2500 
	#AT91C_PA26_RF
 ((Ë
AT91C_PIO_PA26
)

2501 
	#AT91C_PA26_NPCS12
 ((Ë
AT91C_PIO_PA26
)

2502 
	#AT91C_PIO_PA27
 (() 1 << 27)

2503 
	#AT91C_PA27_DRXD
 ((Ë
AT91C_PIO_PA27
)

2504 
	#AT91C_PA27_PCK3
 ((Ë
AT91C_PIO_PA27
)

2505 
	#AT91C_PIO_PA28
 (() 1 << 28)

2506 
	#AT91C_PA28_DTXD
 ((Ë
AT91C_PIO_PA28
)

2507 
	#AT91C_PIO_PA29
 (() 1 << 29)

2508 
	#AT91C_PA29_FIQ
 ((Ë
AT91C_PIO_PA29
)

2509 
	#AT91C_PA29_NPCS13
 ((Ë
AT91C_PIO_PA29
)

2510 
	#AT91C_PIO_PA3
 (() 1 << 3)

2511 
	#AT91C_PA3_RTS0
 ((Ë
AT91C_PIO_PA3
)

2512 
	#AT91C_PA3_NPCS12
 ((Ë
AT91C_PIO_PA3
)

2513 
	#AT91C_PIO_PA30
 (() 1 << 30)

2514 
	#AT91C_PA30_IRQ0
 ((Ë
AT91C_PIO_PA30
)

2515 
	#AT91C_PA30_PCK2
 ((Ë
AT91C_PIO_PA30
)

2516 
	#AT91C_PIO_PA4
 (() 1 << 4)

2517 
	#AT91C_PA4_CTS0
 ((Ë
AT91C_PIO_PA4
)

2518 
	#AT91C_PA4_NPCS13
 ((Ë
AT91C_PIO_PA4
)

2519 
	#AT91C_PIO_PA5
 (() 1 << 5)

2520 
	#AT91C_PA5_RXD1
 ((Ë
AT91C_PIO_PA5
)

2521 
	#AT91C_PIO_PA6
 (() 1 << 6)

2522 
	#AT91C_PA6_TXD1
 ((Ë
AT91C_PIO_PA6
)

2523 
	#AT91C_PIO_PA7
 (() 1 << 7)

2524 
	#AT91C_PA7_SCK1
 ((Ë
AT91C_PIO_PA7
)

2525 
	#AT91C_PA7_NPCS01
 ((Ë
AT91C_PIO_PA7
)

2526 
	#AT91C_PIO_PA8
 (() 1 << 8)

2527 
	#AT91C_PA8_RTS1
 ((Ë
AT91C_PIO_PA8
)

2528 
	#AT91C_PA8_NPCS02
 ((Ë
AT91C_PIO_PA8
)

2529 
	#AT91C_PIO_PA9
 (() 1 << 9)

2530 
	#AT91C_PA9_CTS1
 ((Ë
AT91C_PIO_PA9
)

2531 
	#AT91C_PA9_NPCS03
 ((Ë
AT91C_PIO_PA9
)

2532 
	#AT91C_PIO_PB0
 (() 1 << 0)

2533 
	#AT91C_PB0_ETXCK_EREFCK
 ((Ë
AT91C_PIO_PB0
)

2534 
	#AT91C_PB0_PCK0
 ((Ë
AT91C_PIO_PB0
)

2535 
	#AT91C_PIO_PB1
 (() 1 << 1)

2536 
	#AT91C_PB1_ETXEN
 ((Ë
AT91C_PIO_PB1
)

2537 
	#AT91C_PIO_PB10
 (() 1 << 10)

2538 
	#AT91C_PB10_ETX2
 ((Ë
AT91C_PIO_PB10
)

2539 
	#AT91C_PB10_NPCS11
 ((Ë
AT91C_PIO_PB10
)

2540 
	#AT91C_PIO_PB11
 (() 1 << 11)

2541 
	#AT91C_PB11_ETX3
 ((Ë
AT91C_PIO_PB11
)

2542 
	#AT91C_PB11_NPCS12
 ((Ë
AT91C_PIO_PB11
)

2543 
	#AT91C_PIO_PB12
 (() 1 << 12)

2544 
	#AT91C_PB12_ETXER
 ((Ë
AT91C_PIO_PB12
)

2545 
	#AT91C_PB12_TCLK0
 ((Ë
AT91C_PIO_PB12
)

2546 
	#AT91C_PIO_PB13
 (() 1 << 13)

2547 
	#AT91C_PB13_ERX2
 ((Ë
AT91C_PIO_PB13
)

2548 
	#AT91C_PB13_NPCS01
 ((Ë
AT91C_PIO_PB13
)

2549 
	#AT91C_PIO_PB14
 (() 1 << 14)

2550 
	#AT91C_PB14_ERX3
 ((Ë
AT91C_PIO_PB14
)

2551 
	#AT91C_PB14_NPCS02
 ((Ë
AT91C_PIO_PB14
)

2552 
	#AT91C_PIO_PB15
 (() 1 << 15)

2553 
	#AT91C_PB15_ERXDV
 ((Ë
AT91C_PIO_PB15
)

2554 
	#AT91C_PIO_PB16
 (() 1 << 16)

2555 
	#AT91C_PB16_ECOL
 ((Ë
AT91C_PIO_PB16
)

2556 
	#AT91C_PB16_NPCS13
 ((Ë
AT91C_PIO_PB16
)

2557 
	#AT91C_PIO_PB17
 (() 1 << 17)

2558 
	#AT91C_PB17_ERXCK
 ((Ë
AT91C_PIO_PB17
)

2559 
	#AT91C_PB17_NPCS03
 ((Ë
AT91C_PIO_PB17
)

2560 
	#AT91C_PIO_PB18
 (() 1 << 18)

2561 
	#AT91C_PB18_EF100
 ((Ë
AT91C_PIO_PB18
)

2562 
	#AT91C_PB18_ADTRG
 ((Ë
AT91C_PIO_PB18
)

2563 
	#AT91C_PIO_PB19
 (() 1 << 19)

2564 
	#AT91C_PB19_PWM0
 ((Ë
AT91C_PIO_PB19
)

2565 
	#AT91C_PB19_TCLK1
 ((Ë
AT91C_PIO_PB19
)

2566 
	#AT91C_PIO_PB2
 (() 1 << 2)

2567 
	#AT91C_PB2_ETX0
 ((Ë
AT91C_PIO_PB2
)

2568 
	#AT91C_PIO_PB20
 (() 1 << 20)

2569 
	#AT91C_PB20_PWM1
 ((Ë
AT91C_PIO_PB20
)

2570 
	#AT91C_PB20_PCK0
 ((Ë
AT91C_PIO_PB20
)

2571 
	#AT91C_PIO_PB21
 (() 1 << 21)

2572 
	#AT91C_PB21_PWM2
 ((Ë
AT91C_PIO_PB21
)

2573 
	#AT91C_PB21_PCK1
 ((Ë
AT91C_PIO_PB21
)

2574 
	#AT91C_PIO_PB22
 (() 1 << 22)

2575 
	#AT91C_PB22_PWM3
 ((Ë
AT91C_PIO_PB22
)

2576 
	#AT91C_PB22_PCK2
 ((Ë
AT91C_PIO_PB22
)

2577 
	#AT91C_PIO_PB23
 (() 1 << 23)

2578 
	#AT91C_PB23_TIOA0
 ((Ë
AT91C_PIO_PB23
)

2579 
	#AT91C_PB23_DCD1
 ((Ë
AT91C_PIO_PB23
)

2580 
	#AT91C_PIO_PB24
 (() 1 << 24)

2581 
	#AT91C_PB24_TIOB0
 ((Ë
AT91C_PIO_PB24
)

2582 
	#AT91C_PB24_DSR1
 ((Ë
AT91C_PIO_PB24
)

2583 
	#AT91C_PIO_PB25
 (() 1 << 25)

2584 
	#AT91C_PB25_TIOA1
 ((Ë
AT91C_PIO_PB25
)

2585 
	#AT91C_PB25_DTR1
 ((Ë
AT91C_PIO_PB25
)

2586 
	#AT91C_PIO_PB26
 (() 1 << 26)

2587 
	#AT91C_PB26_TIOB1
 ((Ë
AT91C_PIO_PB26
)

2588 
	#AT91C_PB26_RI1
 ((Ë
AT91C_PIO_PB26
)

2589 
	#AT91C_PIO_PB27
 (() 1 << 27)

2590 
	#AT91C_PB27_TIOA2
 ((Ë
AT91C_PIO_PB27
)

2591 
	#AT91C_PB27_PWM0
 ((Ë
AT91C_PIO_PB27
)

2592 
	#AT91C_PIO_PB28
 (() 1 << 28)

2593 
	#AT91C_PB28_TIOB2
 ((Ë
AT91C_PIO_PB28
)

2594 
	#AT91C_PB28_PWM1
 ((Ë
AT91C_PIO_PB28
)

2595 
	#AT91C_PIO_PB29
 (() 1 << 29)

2596 
	#AT91C_PB29_PCK1
 ((Ë
AT91C_PIO_PB29
)

2597 
	#AT91C_PB29_PWM2
 ((Ë
AT91C_PIO_PB29
)

2598 
	#AT91C_PIO_PB3
 (() 1 << 3)

2599 
	#AT91C_PB3_ETX1
 ((Ë
AT91C_PIO_PB3
)

2600 
	#AT91C_PIO_PB30
 (() 1 << 30)

2601 
	#AT91C_PB30_PCK2
 ((Ë
AT91C_PIO_PB30
)

2602 
	#AT91C_PB30_PWM3
 ((Ë
AT91C_PIO_PB30
)

2603 
	#AT91C_PIO_PB4
 (() 1 << 4)

2604 
	#AT91C_PB4_ECRS_ECRSDV
 ((Ë
AT91C_PIO_PB4
)

2605 
	#AT91C_PIO_PB5
 (() 1 << 5)

2606 
	#AT91C_PB5_ERX0
 ((Ë
AT91C_PIO_PB5
)

2607 
	#AT91C_PIO_PB6
 (() 1 << 6)

2608 
	#AT91C_PB6_ERX1
 ((Ë
AT91C_PIO_PB6
)

2609 
	#AT91C_PIO_PB7
 (() 1 << 7)

2610 
	#AT91C_PB7_ERXER
 ((Ë
AT91C_PIO_PB7
)

2611 
	#AT91C_PIO_PB8
 (() 1 << 8)

2612 
	#AT91C_PB8_EMDC
 ((Ë
AT91C_PIO_PB8
)

2613 
	#AT91C_PIO_PB9
 (() 1 << 9)

2614 
	#AT91C_PB9_EMDIO
 ((Ë
AT91C_PIO_PB9
)

2615 

	)

2619 
	#AT91C_ID_FIQ
 (() 0)

2620 
	#AT91C_ID_SYS
 (() 1)

2621 
	#AT91C_ID_PIOA
 (() 2)

2622 
	#AT91C_ID_PIOB
 (() 3)

2623 
	#AT91C_ID_SPI0
 (() 4)

2624 
	#AT91C_ID_SPI1
 (() 5)

2625 
	#AT91C_ID_US0
 (() 6)

2626 
	#AT91C_ID_US1
 (() 7)

2627 
	#AT91C_ID_SSC
 (() 8)

2628 
	#AT91C_ID_TWI
 (() 9)

2629 
	#AT91C_ID_PWMC
 (() 10)

2630 
	#AT91C_ID_UDP
 (() 11)

2631 
	#AT91C_ID_TC0
 (() 12)

2632 
	#AT91C_ID_TC1
 (() 13)

2633 
	#AT91C_ID_TC2
 (() 14)

2634 
	#AT91C_ID_CAN
 (() 15)

2635 
	#AT91C_ID_EMAC
 (() 16)

2636 
	#AT91C_ID_ADC
 (() 17)

2637 
	#AT91C_ID_AES
 (() 18)

2638 
	#AT91C_ID_TDES
 (() 19)

2639 
	#AT91C_ID_20_Re£rved
 (() 20)

2640 
	#AT91C_ID_21_Re£rved
 (() 21)

2641 
	#AT91C_ID_22_Re£rved
 (() 22)

2642 
	#AT91C_ID_23_Re£rved
 (() 23)

2643 
	#AT91C_ID_24_Re£rved
 (() 24)

2644 
	#AT91C_ID_25_Re£rved
 (() 25)

2645 
	#AT91C_ID_26_Re£rved
 (() 26)

2646 
	#AT91C_ID_27_Re£rved
 (() 27)

2647 
	#AT91C_ID_28_Re£rved
 (() 28)

2648 
	#AT91C_ID_29_Re£rved
 (() 29)

2649 
	#AT91C_ID_IRQ0
 (() 30)

2650 
	#AT91C_ID_IRQ1
 (() 31)

2651 

	)

2655 
	#AT91C_BASE_SYS
 ((
AT91PS_SYS
) 0xFFFFF000)

2656 
	#AT91C_BASE_AIC
 ((
AT91PS_AIC
) 0xFFFFF000)

2657 
	#AT91C_BASE_PDC_DBGU
 ((
AT91PS_PDC
) 0xFFFFF300)

2658 
	#AT91C_BASE_DBGU
 ((
AT91PS_DBGU
) 0xFFFFF200)

2659 
	#AT91C_BASE_PIOA
 ((
AT91PS_PIO
) 0xFFFFF400)

2660 
	#AT91C_BASE_PIOB
 ((
AT91PS_PIO
) 0xFFFFF600)

2661 
	#AT91C_BASE_CKGR
 ((
AT91PS_CKGR
) 0xFFFFFC20)

2662 
	#AT91C_BASE_PMC
 ((
AT91PS_PMC
) 0xFFFFFC00)

2663 
	#AT91C_BASE_RSTC
 ((
AT91PS_RSTC
) 0xFFFFFD00)

2664 
	#AT91C_BASE_RTTC
 ((
AT91PS_RTTC
) 0xFFFFFD20)

2665 
	#AT91C_BASE_PITC
 ((
AT91PS_PITC
) 0xFFFFFD30)

2666 
	#AT91C_BASE_WDTC
 ((
AT91PS_WDTC
) 0xFFFFFD40)

2667 
	#AT91C_BASE_VREG
 ((
AT91PS_VREG
) 0xFFFFFD60)

2668 
	#AT91C_BASE_MC
 ((
AT91PS_MC
) 0xFFFFFF00)

2669 
	#AT91C_BASE_PDC_SPI1
 ((
AT91PS_PDC
) 0xFFFE4100)

2670 
	#AT91C_BASE_SPI1
 ((
AT91PS_SPI
) 0xFFFE4000)

2671 
	#AT91C_BASE_PDC_SPI0
 ((
AT91PS_PDC
) 0xFFFE0100)

2672 
	#AT91C_BASE_SPI0
 ((
AT91PS_SPI
) 0xFFFE0000)

2673 
	#AT91C_BASE_PDC_US1
 ((
AT91PS_PDC
) 0xFFFC4100)

2674 
	#AT91C_BASE_US1
 ((
AT91PS_USART
) 0xFFFC4000)

2675 
	#AT91C_BASE_PDC_US0
 ((
AT91PS_PDC
) 0xFFFC0100)

2676 
	#AT91C_BASE_US0
 ((
AT91PS_USART
) 0xFFFC0000)

2677 
	#AT91C_BASE_PDC_SSC
 ((
AT91PS_PDC
) 0xFFFD4100)

2678 
	#AT91C_BASE_SSC
 ((
AT91PS_SSC
) 0xFFFD4000)

2679 
	#AT91C_BASE_TWI
 ((
AT91PS_TWI
) 0xFFFB8000)

2680 
	#AT91C_BASE_PWMC_CH3
 ((
AT91PS_PWMC_CH
) 0xFFFCC260)

2681 
	#AT91C_BASE_PWMC_CH2
 ((
AT91PS_PWMC_CH
) 0xFFFCC240)

2682 
	#AT91C_BASE_PWMC_CH1
 ((
AT91PS_PWMC_CH
) 0xFFFCC220)

2683 
	#AT91C_BASE_PWMC_CH0
 ((
AT91PS_PWMC_CH
) 0xFFFCC200)

2684 
	#AT91C_BASE_PWMC
 ((
AT91PS_PWMC
) 0xFFFCC000)

2685 
	#AT91C_BASE_UDP
 ((
AT91PS_UDP
) 0xFFFB0000)

2686 
	#AT91C_BASE_TC0
 ((
AT91PS_TC
) 0xFFFA0000)

2687 
	#AT91C_BASE_TC1
 ((
AT91PS_TC
) 0xFFFA0040)

2688 
	#AT91C_BASE_TC2
 ((
AT91PS_TC
) 0xFFFA0080)

2689 
	#AT91C_BASE_TCB
 ((
AT91PS_TCB
) 0xFFFA0000)

2690 
	#AT91C_BASE_CAN_MB0
 ((
AT91PS_CAN_MB
) 0xFFFD0200)

2691 
	#AT91C_BASE_CAN_MB1
 ((
AT91PS_CAN_MB
) 0xFFFD0220)

2692 
	#AT91C_BASE_CAN_MB2
 ((
AT91PS_CAN_MB
) 0xFFFD0240)

2693 
	#AT91C_BASE_CAN_MB3
 ((
AT91PS_CAN_MB
) 0xFFFD0260)

2694 
	#AT91C_BASE_CAN_MB4
 ((
AT91PS_CAN_MB
) 0xFFFD0280)

2695 
	#AT91C_BASE_CAN_MB5
 ((
AT91PS_CAN_MB
) 0xFFFD02A0)

2696 
	#AT91C_BASE_CAN_MB6
 ((
AT91PS_CAN_MB
) 0xFFFD02C0)

2697 
	#AT91C_BASE_CAN_MB7
 ((
AT91PS_CAN_MB
) 0xFFFD02E0)

2698 
	#AT91C_BASE_CAN
 ((
AT91PS_CAN
) 0xFFFD0000)

2699 
	#AT91C_BASE_EMAC
 ((
AT91PS_EMAC
) 0xFFFDC000)

2700 
	#AT91C_BASE_PDC_ADC
 ((
AT91PS_PDC
) 0xFFFD8100)

2701 
	#AT91C_BASE_ADC
 ((
AT91PS_ADC
) 0xFFFD8000)

2702 
	#AT91C_BASE_PDC_AES
 ((
AT91PS_PDC
) 0xFFFA4100)

2703 
	#AT91C_BASE_AES
 ((
AT91PS_AES
) 0xFFFA4000)

2704 
	#AT91C_BASE_PDC_TDES
 ((
AT91PS_PDC
) 0xFFFA8100)

2705 
	#AT91C_BASE_TDES
 ((
AT91PS_TDES
) 0xFFFA8000)

2706 

	)

2710 
	#AT91C_ISRAM
 ((*) 0x00200000)

2711 
	#AT91C_ISRAM_SIZE
 (() 0x00010000)

2712 
	#AT91C_IFLASH
 ((*) 0x00100000)

2713 
	#AT91C_IFLASH_SIZE
 (() 0x00040000)

2714 

	)

2728 
AT91C_AIC_PRIOR
 
EQU
 (0x7 << 0Ë;- (
	gAIC
Ë
Pri‹ôy
 
Levñ


2729 
AT91C_AIC_PRIOR_LOWEST
 
EQU
 (0x0Ë;- (
	gAIC
Ë
Lowe°
 
¥i‹ôy
 
Àvñ


2730 
AT91C_AIC_PRIOR_HIGHEST
 
EQU
 (0x7Ë;- (
	gAIC
Ë
Highe°
 
¥i‹ôy
 
Àvñ


2731 
AT91C_AIC_SRCTYPE
 
EQU
 (0x3 << 5Ë;- (
	gAIC
Ë
I¡îru±
 
Sour˚
 
Ty≥


2732 
AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 
EQU
 (0x0 << 5Ë;- (
	gAIC
Ë
I¡î«l
 
Sour˚s
 
Code
 
Labñ
 
	gHigh
-
Àvñ
 
Sísôive


2733 
AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 
EQU
 (0x0 << 5Ë;- (
	gAIC
Ë
Exã∫Æ
 
Sour˚s
 
Code
 
Labñ
 
	gLow
-
Àvñ
 
Sísôive


2734 
AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 
EQU
 (0x1 << 5Ë;- (
	gAIC
Ë
I¡î«l
 
Sour˚s
 
Code
 
Labñ
 
Posôive
 
Edge
 
åiggîed


2735 
AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 
EQU
 (0x1 << 5Ë;- (
	gAIC
Ë
Exã∫Æ
 
Sour˚s
 
Code
 
Labñ
 
Neg©ive
 
Edge
 
åiggîed


2736 
AT91C_AIC_SRCTYPE_HIGH_LEVEL
 
EQU
 (0x2 << 5Ë;- (
	gAIC
Ë
I¡î«l
 
Or
 
Exã∫Æ
 
Sour˚s
 
Code
 
Labñ
 
	gHigh
-
Àvñ
 
Sísôive


2737 
AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 
EQU
 (0x3 << 5Ë;- (
	gAIC
Ë
I¡î«l
 
Or
 
Exã∫Æ
 
Sour˚s
 
Code
 
Labñ
 
Posôive
 
Edge
 
åiggîed


2739 
AT91C_AIC_NFIQ
 
EQU
 (0x1 << 0Ë;- (
	gAIC
Ë
NFIQ
 
Sètus


2740 
AT91C_AIC_NIRQ
 
EQU
 (0x1 << 1Ë;- (
	gAIC
Ë
NIRQ
 
Sètus


2742 
AT91C_AIC_DCR_PROT
 
EQU
 (0x1 << 0Ë;- (
	gAIC
Ë
PrŸe˘i⁄
 
Mode


2743 
AT91C_AIC_DCR_GMSK
 
EQU
 (0x1 << 1Ë;- (
	gAIC
Ë
GíîÆ
 
	gMask


2749 
AT91C_PDC_RXTEN
 
EQU
 (0x1 << 0Ë;- (
	gPDC
Ë
Re˚ivî
 
Tøns„r
 
E«bÀ


2750 
AT91C_PDC_RXTDIS
 
EQU
 (0x1 << 1Ë;- (
	gPDC
Ë
Re˚ivî
 
Tøns„r
 
DißbÀ


2751 
AT91C_PDC_TXTEN
 
EQU
 (0x1 << 8Ë;- (
	gPDC
Ë
Tønsmôãr
 
Tøns„r
 
E«bÀ


2752 
AT91C_PDC_TXTDIS
 
EQU
 (0x1 << 9Ë;- (
	gPDC
Ë
Tønsmôãr
 
Tøns„r
 
DißbÀ


2759 
AT91C_US_RSTRX
 
EQU
 (0x1 << 2Ë;- (
	gDBGU
Ë
Re£t
 
Re˚ivî


2760 
AT91C_US_RSTTX
 
EQU
 (0x1 << 3Ë;- (
	gDBGU
Ë
Re£t
 
Tønsmôãr


2761 
AT91C_US_RXEN
 
EQU
 (0x1 << 4Ë;- (
	gDBGU
Ë
Re˚ivî
 
E«bÀ


2762 
AT91C_US_RXDIS
 
EQU
 (0x1 << 5Ë;- (
	gDBGU
Ë
Re˚ivî
 
DißbÀ


2763 
AT91C_US_TXEN
 
EQU
 (0x1 << 6Ë;- (
	gDBGU
Ë
Tønsmôãr
 
E«bÀ


2764 
AT91C_US_TXDIS
 
EQU
 (0x1 << 7Ë;- (
	gDBGU
Ë
Tønsmôãr
 
DißbÀ


2765 
AT91C_US_RSTSTA
 
EQU
 (0x1 << 8Ë;- (
	gDBGU
Ë
Re£t
 
Sètus
 
Bôs


2767 
AT91C_US_PAR
 
EQU
 (0x7 << 9Ë;- (
	gDBGU
Ë
P¨ôy
 
ty≥


2768 
AT91C_US_PAR_EVEN
 
EQU
 (0x0 << 9Ë;- (
	gDBGU
Ë
Eví
 
P¨ôy


2769 
AT91C_US_PAR_ODD
 
EQU
 (0x1 << 9Ë;- (
	gDBGU
Ë
Odd
 
P¨ôy


2770 
AT91C_US_PAR_SPACE
 
EQU
 (0x2 << 9Ë;- (
	gDBGU
Ë
P¨ôy
 
f‹˚d
 
	gto
 0 (
	gS∑˚
)

2771 
AT91C_US_PAR_MARK
 
EQU
 (0x3 << 9Ë;- (
	gDBGU
Ë
P¨ôy
 
f‹˚d
 
	gto
 1 (
	gM¨k
)

2772 
AT91C_US_PAR_NONE
 
EQU
 (0x4 << 9Ë;- (
	gDBGU
Ë
No
 
P¨ôy


2773 
AT91C_US_PAR_MULTI_DROP
 
EQU
 (0x6 << 9Ë;- (
	gDBGU
Ë
	gMu…i
-
dr›
 
mode


2774 
AT91C_US_CHMODE
 
EQU
 (0x3 << 14Ë;- (
	gDBGU
Ë
Ch™√l
 
Mode


2775 
AT91C_US_CHMODE_NORMAL
 
EQU
 (0x0 << 14Ë;- (
	gDBGU
Ë
N‹mÆ
 
	gMode
: 
The
 
USART
 
ch™√l
 
›î©es
 
as
 
™
 
RX
/
TX
 USART.

2776 
AT91C_US_CHMODE_AUTO
 
EQU
 (0x1 << 14Ë;- (
	gDBGU
Ë
Autom©ic
 
	gEcho
: 
Re˚ivî
 
D©a
 
I≈ut
 
is
 
c⁄√˘ed
 
to
 
the
 
TXD
 
pö
.

2777 
AT91C_US_CHMODE_LOCAL
 
EQU
 (0x2 << 14Ë;- (
	gDBGU
Ë
Loˇl
 
	gLo›back
: 
Tønsmôãr
 
Ouçut
 
Sig«l
 
is
 
c⁄√˘ed
 
to
 
Re˚ivî
 
I≈ut
 Signal.

2778 
AT91C_US_CHMODE_REMOTE
 
EQU
 (0x3 << 14Ë;- (
	gDBGU
Ë
RemŸe
 
	gLo›back
: 
RXD
 
pö
 
is
 
öã∫Æly
 
c⁄√˘ed
 
to
 
TXD
Öin.

2780 
AT91C_US_RXRDY
 
EQU
 (0x1 << 0Ë;- (
	gDBGU
Ë
RXRDY
 
I¡îru±


2781 
AT91C_US_TXRDY
 
EQU
 (0x1 << 1Ë;- (
	gDBGU
Ë
TXRDY
 
I¡îru±


2782 
AT91C_US_ENDRX
 
EQU
 (0x1 << 3Ë;- (
	gDBGU
Ë
End
 
of
 
Re˚ive
 
Tøns„r
 
I¡îru±


2783 
AT91C_US_ENDTX
 
EQU
 (0x1 << 4Ë;- (
	gDBGU
Ë
End
 
of
 
Tønsmô
 
I¡îru±


2784 
AT91C_US_OVRE
 
EQU
 (0x1 << 5Ë;- (
	gDBGU
Ë
Ovîrun
 
I¡îru±


2785 
AT91C_US_FRAME
 
EQU
 (0x1 << 6Ë;- (
	gDBGU
Ë
Fømög
 
Eº‹
 
I¡îru±


2786 
AT91C_US_PARE
 
EQU
 (0x1 << 7Ë;- (
	gDBGU
Ë
P¨ôy
 
Eº‹
 
I¡îru±


2787 
AT91C_US_TXEMPTY
 
EQU
 (0x1 << 9Ë;- (
	gDBGU
Ë
TXEMPTY
 
I¡îru±


2788 
AT91C_US_TXBUFE
 
EQU
 (0x1 << 11Ë;- (
	gDBGU
Ë
TXBUFE
 
I¡îru±


2789 
AT91C_US_RXBUFF
 
EQU
 (0x1 << 12Ë;- (
	gDBGU
Ë
RXBUFF
 
I¡îru±


2790 
AT91C_US_COMM_TX
 
EQU
 (0x1 << 30Ë;- (
	gDBGU
Ë
COMM_TX
 
I¡îru±


2791 
AT91C_US_COMM_RX
 
EQU
 (0x1 << 31Ë;- (
	gDBGU
Ë
COMM_RX
 
I¡îru±


2796 
AT91C_US_FORCE_NTRST
 
EQU
 (0x1 << 0Ë;- (
	gDBGU
Ë
F‹˚
 
NTRST
 
ö
 
JTAG


2806 
AT91C_CKGR_MOSCEN
 
EQU
 (0x1 << 0Ë;- (
	gCKGR
Ë
Maö
 
Oscûœt‹
 
E«bÀ


2807 
AT91C_CKGR_OSCBYPASS
 
EQU
 (0x1 << 1Ë;- (
	gCKGR
Ë
Maö
 
Oscûœt‹
 
By∑ss


2808 
AT91C_CKGR_OSCOUNT
 
EQU
 (0xFF << 8Ë;- (
	gCKGR
Ë
Maö
 
Oscûœt‹
 
	gSèπ
-
up
 
Time


2810 
AT91C_CKGR_MAINF
 
EQU
 (0xFFFF << 0Ë;- (
	gCKGR
Ë
Maö
 
Clock
 
Fªquícy


2811 
AT91C_CKGR_MAINRDY
 
EQU
 (0x1 << 16Ë;- (
	gCKGR
Ë
Maö
 
Clock
 
Ródy


2813 
AT91C_CKGR_DIV
 
EQU
 (0xFF << 0Ë;- (
	gCKGR
Ë
Dividî
 
Sñe˘ed


2814 
AT91C_CKGR_DIV_0
 
EQU
 (0x0Ë;- (
	gCKGR
Ë
Dividî
 
ouçut
 
	gis
 0

2815 
AT91C_CKGR_DIV_BYPASS
 
EQU
 (0x1Ë;- (
	gCKGR
Ë
Dividî
 
is
 
by∑s£d


2816 
AT91C_CKGR_PLLCOUNT
 
EQU
 (0x3F << 8Ë;- (
	gCKGR
Ë
PLL
 
Cou¡î


2817 
AT91C_CKGR_OUT
 
EQU
 (0x3 << 14Ë;- (
	gCKGR
Ë
PLL
 
Ouçut
 
Fªquícy
 
R™ge


2818 
AT91C_CKGR_OUT_0
 
EQU
 (0x0 << 14Ë;- (
	gCKGR
Ë
PÀa£
 
ª„r
 
to
 
the
 
PLL
 
d©ashìt


2819 
AT91C_CKGR_OUT_1
 
EQU
 (0x1 << 14Ë;- (
	gCKGR
Ë
PÀa£
 
ª„r
 
to
 
the
 
PLL
 
d©ashìt


2820 
AT91C_CKGR_OUT_2
 
EQU
 (0x2 << 14Ë;- (
	gCKGR
Ë
PÀa£
 
ª„r
 
to
 
the
 
PLL
 
d©ashìt


2821 
AT91C_CKGR_OUT_3
 
EQU
 (0x3 << 14Ë;- (
	gCKGR
Ë
PÀa£
 
ª„r
 
to
 
the
 
PLL
 
d©ashìt


2822 
AT91C_CKGR_MUL
 
EQU
 (0x7FF << 16Ë;- (
	gCKGR
Ë
PLL
 
Mu…ùlõr


2823 
AT91C_CKGR_USBDIV
 
EQU
 (0x3 << 28Ë;- (
	gCKGR
Ë
Dividî
 
USB
 
Clocks


2824 
AT91C_CKGR_USBDIV_0
 
EQU
 (0x0 << 28Ë;- (
	gCKGR
Ë
Dividî
 
ouçut
 
is
 
PLL
 
˛ock
 output

2825 
AT91C_CKGR_USBDIV_1
 
EQU
 (0x1 << 28Ë;- (
	gCKGR
Ë
Dividî
 
ouçut
 
is
 
PLL
 
˛ock
 ouçuà
divided
 
	gby
 2

2826 
AT91C_CKGR_USBDIV_2
 
EQU
 (0x2 << 28Ë;- (
	gCKGR
Ë
Dividî
 
ouçut
 
is
 
PLL
 
˛ock
 ouçuà
divided
 
	gby
 4

2832 
AT91C_PMC_PCK
 
EQU
 (0x1 << 0Ë;- (
	gPMC
Ë
Pro˚ss‹
 
Clock


2833 
AT91C_PMC_UDP
 
EQU
 (0x1 << 7Ë;- (
	gPMC
Ë
USB
 
Devi˚
 
P‹t
 
Clock


2834 
AT91C_PMC_PCK0
 
EQU
 (0x1 << 8Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
Ouçut


2835 
AT91C_PMC_PCK1
 
EQU
 (0x1 << 9Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
Ouçut


2836 
AT91C_PMC_PCK2
 
EQU
 (0x1 << 10Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
Ouçut


2837 
AT91C_PMC_PCK3
 
EQU
 (0x1 << 11Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
Ouçut


2844 
AT91C_PMC_CSS
 
EQU
 (0x3 << 0Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
Sñe˘i⁄


2845 
AT91C_PMC_CSS_SLOW_CLK
 
EQU
 (0x0Ë;- (
	gPMC
Ë
Slow
 
Clock
 
is
 
£À˘ed


2846 
AT91C_PMC_CSS_MAIN_CLK
 
EQU
 (0x1Ë;- (
	gPMC
Ë
Maö
 
Clock
 
is
 
£À˘ed


2847 
AT91C_PMC_CSS_PLL_CLK
 
EQU
 (0x3Ë;- (
	gPMC
Ë
Clock
 
‰om
 
PLL
 
is
 
£À˘ed


2848 
AT91C_PMC_PRES
 
EQU
 (0x7 << 2Ë;- (
	gPMC
Ë
ProgømmabÀ
 
Clock
 
PªsˇÀr


2849 
AT91C_PMC_PRES_CLK
 
EQU
 (0x0 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock


2850 
AT91C_PMC_PRES_CLK_2
 
EQU
 (0x1 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 2

2851 
AT91C_PMC_PRES_CLK_4
 
EQU
 (0x2 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 4

2852 
AT91C_PMC_PRES_CLK_8
 
EQU
 (0x3 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 8

2853 
AT91C_PMC_PRES_CLK_16
 
EQU
 (0x4 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 16

2854 
AT91C_PMC_PRES_CLK_32
 
EQU
 (0x5 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 32

2855 
AT91C_PMC_PRES_CLK_64
 
EQU
 (0x6 << 2Ë;- (
	gPMC
Ë
Sñe˘ed
 
˛ock
 
divided
 
	gby
 64

2858 
AT91C_PMC_MOSCS
 
EQU
 (0x1 << 0Ë;- (
	gPMC
Ë
MOSC
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2859 
AT91C_PMC_LOCK
 
EQU
 (0x1 << 2Ë;- (
	gPMC
Ë
PLL
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2860 
AT91C_PMC_MCKRDY
 
EQU
 (0x1 << 3Ë;- (
	gPMC
Ë
MCK_RDY
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2861 
AT91C_PMC_PCK0RDY
 
EQU
 (0x1 << 8Ë;- (
	gPMC
Ë
PCK0_RDY
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2862 
AT91C_PMC_PCK1RDY
 
EQU
 (0x1 << 9Ë;- (
	gPMC
Ë
PCK1_RDY
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2863 
AT91C_PMC_PCK2RDY
 
EQU
 (0x1 << 10Ë;- (
	gPMC
Ë
PCK2_RDY
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2864 
AT91C_PMC_PCK3RDY
 
EQU
 (0x1 << 11Ë;- (
	gPMC
Ë
PCK3_RDY
 
	gSètus
/
	gE«bÀ
/
	gDißbÀ
/
Mask


2873 
AT91C_RSTC_PROCRST
 
EQU
 (0x1 << 0Ë;- (
	gRSTC
Ë
Pro˚ss‹
 
Re£t


2874 
AT91C_RSTC_PERRST
 
EQU
 (0x1 << 2Ë;- (
	gRSTC
Ë
PîùhîÆ
 
Re£t


2875 
AT91C_RSTC_EXTRST
 
EQU
 (0x1 << 3Ë;- (
	gRSTC
Ë
Exã∫Æ
 
Re£t


2876 
AT91C_RSTC_KEY
 
EQU
 (0xFF << 24Ë;- (
	gRSTC
Ë
Passw‹d


2878 
AT91C_RSTC_URSTS
 
EQU
 (0x1 << 0Ë;- (
	gRSTC
Ë
U£r
 
Re£t
 
Sètus


2879 
AT91C_RSTC_BODSTS
 
EQU
 (0x1 << 1Ë;- (
	gRSTC
Ë
Brownout
 
Dëe˘i⁄
 
Sètus


2880 
AT91C_RSTC_RSTTYP
 
EQU
 (0x7 << 8Ë;- (
	gRSTC
Ë
Re£t
 
Ty≥


2881 
AT91C_RSTC_RSTTYP_POWERUP
 
EQU
 (0x0 << 8Ë;- (
	gRSTC
Ë
	gPowî
-
up
 
	gRe£t
. 
VDDCORE
 
	grisög
.

2882 
AT91C_RSTC_RSTTYP_WAKEUP
 
EQU
 (0x1 << 8Ë;- (
	gRSTC
Ë
WakeUp
 
	gRe£t
. 
VDDCORE
 
	grisög
.

2883 
AT91C_RSTC_RSTTYP_WATCHDOG
 
EQU
 (0x2 << 8Ë;- (
	gRSTC
Ë
W©chdog
 
	gRe£t
. W©chdog 
ovîÊow
 
	goccuªd
.

2884 
AT91C_RSTC_RSTTYP_SOFTWARE
 
EQU
 (0x3 << 8Ë;- (
	gRSTC
Ë
So·w¨e
 
	gRe£t
. 
Pro˚ss‹
 
ª£t
 
ªquúed
 
by
 
the
 
	gso·w¨e
.

2885 
AT91C_RSTC_RSTTYP_USER
 
EQU
 (0x4 << 8Ë;- (
	gRSTC
Ë
U£r
 
	gRe£t
. 
NRST
 
pö
 
dëe˘ed
 
	glow
.

2886 
AT91C_RSTC_RSTTYP_BROWNOUT
 
EQU
 (0x5 << 8Ë;- (
	gRSTC
Ë
Brownout
 
Re£t
 
	goccuªd
.

2887 
AT91C_RSTC_NRSTL
 
EQU
 (0x1 << 16Ë;- (
	gRSTC
Ë
NRST
 
pö
 
Àvñ


2888 
AT91C_RSTC_SRCMP
 
EQU
 (0x1 << 17Ë;- (
	gRSTC
Ë
So·w¨e
 
Re£t
 
Comm™d
 
ö
 
	gProgªss
.

2890 
AT91C_RSTC_URSTEN
 
EQU
 (0x1 << 0Ë;- (
	gRSTC
Ë
U£r
 
Re£t
 
E«bÀ


2891 
AT91C_RSTC_URSTIEN
 
EQU
 (0x1 << 4Ë;- (
	gRSTC
Ë
U£r
 
Re£t
 
I¡îru±
 
E«bÀ


2892 
AT91C_RSTC_ERSTL
 
EQU
 (0xF << 8Ë;- (
	gRSTC
Ë
U£r
 
Re£t
 
E«bÀ


2893 
AT91C_RSTC_BODIEN
 
EQU
 (0x1 << 16Ë;- (
	gRSTC
Ë
Brownout
 
Dëe˘i⁄
 
I¡îru±
 
E«bÀ


2899 
AT91C_RTTC_RTPRES
 
EQU
 (0xFFFF << 0Ë;- (
	gRTTC
Ë
	gRól
-
time
 
Timî
 
PªsˇÀr
 
VÆue


2900 
AT91C_RTTC_ALMIEN
 
EQU
 (0x1 << 16Ë;- (
	gRTTC
Ë
Aœrm
 
I¡îru±
 
E«bÀ


2901 
AT91C_RTTC_RTTINCIEN
 
EQU
 (0x1 << 17Ë;- (
	gRTTC
Ë
Ról
 
Time
 
Timî
 
In¸emít
 
I¡îru±
 
E«bÀ


2902 
AT91C_RTTC_RTTRST
 
EQU
 (0x1 << 18Ë;- (
	gRTTC
Ë
Ról
 
Time
 
Timî
 
Re°¨t


2904 
AT91C_RTTC_ALMV
 
EQU
 (0x0 << 0Ë;- (
	gRTTC
Ë
Aœrm
 
VÆue


2906 
AT91C_RTTC_CRTV
 
EQU
 (0x0 << 0Ë;- (
	gRTTC
Ë
Cuºít
 
	gRól
-
time
 
VÆue


2908 
AT91C_RTTC_ALMS
 
EQU
 (0x1 << 0Ë;- (
	gRTTC
Ë
	gRól
-
time
 
Aœrm
 
Sètus


2909 
AT91C_RTTC_RTTINC
 
EQU
 (0x1 << 1Ë;- (
	gRTTC
Ë
	gRól
-
time
 
Timî
 
In¸emít


2915 
AT91C_PITC_PIV
 
EQU
 (0xFFFFF << 0Ë;- (
	gPITC
Ë
Pîiodic
 
I¡îvÆ
 
VÆue


2916 
AT91C_PITC_PITEN
 
EQU
 (0x1 << 24Ë;- (
	gPITC
Ë
Pîiodic
 
I¡îvÆ
 
Timî
 
E«bÀd


2917 
AT91C_PITC_PITIEN
 
EQU
 (0x1 << 25Ë;- (
	gPITC
Ë
Pîiodic
 
I¡îvÆ
 
Timî
 
I¡îru±
 
E«bÀ


2919 
AT91C_PITC_PITS
 
EQU
 (0x1 << 0Ë;- (
	gPITC
Ë
Pîiodic
 
I¡îvÆ
 
Timî
 
Sètus


2921 
AT91C_PITC_CPIV
 
EQU
 (0xFFFFF << 0Ë;- (
	gPITC
Ë
Cuºít
 
Pîiodic
 
I¡îvÆ
 
VÆue


2922 
AT91C_PITC_PICNT
 
EQU
 (0xFFF << 20Ë;- (
	gPITC
Ë
Pîiodic
 
I¡îvÆ
 
Cou¡î


2929 
AT91C_WDTC_WDRSTT
 
EQU
 (0x1 << 0Ë;- (
	gWDTC
Ë
W©chdog
 
Re°¨t


2930 
AT91C_WDTC_KEY
 
EQU
 (0xFF << 24Ë;- (
	gWDTC
Ë
W©chdog
 
KEY
 
Passw‹d


2932 
AT91C_WDTC_WDV
 
EQU
 (0xFFF << 0Ë;- (
	gWDTC
Ë
W©chdog
 
Timî
 
Re°¨t


2933 
AT91C_WDTC_WDFIEN
 
EQU
 (0x1 << 12Ë;- (
	gWDTC
Ë
W©chdog
 
Fau…
 
I¡îru±
 
E«bÀ


2934 
AT91C_WDTC_WDRSTEN
 
EQU
 (0x1 << 13Ë;- (
	gWDTC
Ë
W©chdog
 
Re£t
 
E«bÀ


2935 
AT91C_WDTC_WDRPROC
 
EQU
 (0x1 << 14Ë;- (
	gWDTC
Ë
W©chdog
 
Timî
 
Re°¨t


2936 
AT91C_WDTC_WDDIS
 
EQU
 (0x1 << 15Ë;- (
	gWDTC
Ë
W©chdog
 
DißbÀ


2937 
AT91C_WDTC_WDD
 
EQU
 (0xFFF << 16Ë;- (
	gWDTC
Ë
W©chdog
 
Dñè
 
VÆue


2938 
AT91C_WDTC_WDDBGHLT
 
EQU
 (0x1 << 28Ë;- (
	gWDTC
Ë
W©chdog
 
Debug
 
HÆt


2939 
AT91C_WDTC_WDIDLEHLT
 
EQU
 (0x1 << 29Ë;- (
	gWDTC
Ë
W©chdog
 
IdÀ
 
HÆt


2941 
AT91C_WDTC_WDUNF
 
EQU
 (0x1 << 0Ë;- (
	gWDTC
Ë
W©chdog
 
UndîÊow


2942 
AT91C_WDTC_WDERR
 
EQU
 (0x1 << 1Ë;- (
	gWDTC
Ë
W©chdog
 
Eº‹


2948 
AT91C_VREG_PSTDBY
 
EQU
 (0x1 << 0Ë;- (
	gVREG
Ë
Vﬁège
 
Reguœt‹
 
Powî
 
Sèndby
 
Mode


2954 
AT91C_MC_RCB
 
EQU
 (0x1 << 0Ë;- (
	gMC
Ë
Rem≠
 
Comm™d
 
Bô


2956 
AT91C_MC_UNDADD
 
EQU
 (0x1 << 0Ë;- (
	gMC
Ë
Undeföed
 
Addess
 
Ab‹t
 
Sètus


2957 
AT91C_MC_MISADD
 
EQU
 (0x1 << 1Ë;- (
	gMC
Ë
Mißlig√d
 
Addess
 
Ab‹t
 
Sètus


2958 
AT91C_MC_ABTSZ
 
EQU
 (0x3 << 8Ë;- (
	gMC
Ë
Ab‹t
 
Size
 
Sètus


2959 
AT91C_MC_ABTSZ_BYTE
 
EQU
 (0x0 << 8Ë;- (
	gMC
Ë
Byã


2960 
AT91C_MC_ABTSZ_HWORD
 
EQU
 (0x1 << 8Ë;- (
	gMC
Ë
	gHÆf
-
w‹d


2961 
AT91C_MC_ABTSZ_WORD
 
EQU
 (0x2 << 8Ë;- (
	gMC
Ë
W‹d


2962 
AT91C_MC_ABTTYP
 
EQU
 (0x3 << 10Ë;- (
	gMC
Ë
Ab‹t
 
Ty≥
 
Sètus


2963 
AT91C_MC_ABTTYP_DATAR
 
EQU
 (0x0 << 10Ë;- (
	gMC
Ë
D©a
 
Ród


2964 
AT91C_MC_ABTTYP_DATAW
 
EQU
 (0x1 << 10Ë;- (
	gMC
Ë
D©a
 
Wrôe


2965 
AT91C_MC_ABTTYP_FETCH
 
EQU
 (0x2 << 10Ë;- (
	gMC
Ë
Code
 
Fëch


2966 
AT91C_MC_MST0
 
EQU
 (0x1 << 16Ë;- (
	gMC
Ë
	gMa°î
 0 
Ab‹t
 
Sour˚


2967 
AT91C_MC_MST1
 
EQU
 (0x1 << 17Ë;- (
	gMC
Ë
	gMa°î
 1 
Ab‹t
 
Sour˚


2968 
AT91C_MC_SVMST0
 
EQU
 (0x1 << 24Ë;- (
	gMC
Ë
Saved
 
	gMa°î
 0 
Ab‹t
 
Sour˚


2969 
AT91C_MC_SVMST1
 
EQU
 (0x1 << 25Ë;- (
	gMC
Ë
Saved
 
	gMa°î
 1 
Ab‹t
 
Sour˚


2971 
AT91C_MC_FRDY
 
EQU
 (0x1 << 0Ë;- (
	gMC
Ë
Fœsh
 
Ródy


2972 
AT91C_MC_LOCKE
 
EQU
 (0x1 << 2Ë;- (
	gMC
Ë
Lock
 
Eº‹


2973 
AT91C_MC_PROGE
 
EQU
 (0x1 << 3Ë;- (
	gMC
Ë
Progømmög
 
Eº‹


2974 
AT91C_MC_NEBP
 
EQU
 (0x1 << 7Ë;- (
	gMC
Ë
No
 
Eø£
 
Bef‹e
 
Progømmög


2975 
AT91C_MC_FWS
 
EQU
 (0x3 << 8Ë;- (
	gMC
Ë
Fœsh
 
Waô
 
Sèã


2976 
AT91C_MC_FWS_0FWS
 
EQU
 (0x0 << 8Ë;- (
	gMC
Ë1 
cy˛e
 
	gRód
, 2 
Wrôe
 
›î©i⁄s


2977 
AT91C_MC_FWS_1FWS
 
EQU
 (0x1 << 8Ë;- (
	gMC
Ë2 
cy˛es
 
	gRód
, 3 
Wrôe
 
›î©i⁄s


2978 
AT91C_MC_FWS_2FWS
 
EQU
 (0x2 << 8Ë;- (
	gMC
Ë3 
cy˛es
 
	gRód
, 4 
Wrôe
 
›î©i⁄s


2979 
AT91C_MC_FWS_3FWS
 
EQU
 (0x3 << 8Ë;- (
	gMC
Ë4 
cy˛es
 
	gRód
, 4 
Wrôe
 
›î©i⁄s


2980 
AT91C_MC_FMCN
 
EQU
 (0xFF << 16Ë;- (
	gMC
Ë
Fœsh
 
Mi¸o£c⁄d
 
Cy˛e
 
Numbî


2982 
AT91C_MC_FCMD
 
EQU
 (0xF << 0Ë;- (
	gMC
Ë
Fœsh
 
Comm™d


2983 
AT91C_MC_FCMD_START_PROG
 
EQU
 (0x1Ë;- (
	gMC
Ë
Sèπs
 
the
 
¥ogømmög
 
of
 
th
 
ïage
 
•ecifõd
 
by
 
	gPAGEN
.

2984 
AT91C_MC_FCMD_LOCK
 
EQU
 (0x2Ë;- (
	gMC
Ë
Sèπs
 
a
 
lock
 
£quí˚
 
of
 
the
 
£˘‹
 
deföed
 
by
Åhê
	gbôs
 4 
	gto
 7 o‡thê
fõld
 
	gPAGEN
.

2985 
AT91C_MC_FCMD_PROG_AND_LOCK
 
EQU
 (0x3Ë;- (
	gMC
Ë
The
 
lock
 
£quí˚
 
autom©iˇŒy
 
h≠≥ns
 
a·î
 
the
 
¥ogømmög
 sequí˚ 
is
 
	gcom∂ëed
.

2986 
AT91C_MC_FCMD_UNLOCK
 
EQU
 (0x4Ë;- (
	gMC
Ë
Sèπs
 
™
 
u∆ock
 
£quí˚
 
of
 
the
 
£˘‹
 
deföed
 
by
Åhê
	gbôs
 4 
	gto
 7 o‡thê
fõld
 
	gPAGEN
.

2987 
AT91C_MC_FCMD_ERASE_ALL
 
EQU
 (0x8Ë;- (
	gMC
Ë
Sèπs
 
the
 
îa£
 
of
Åhê
ítúe
 
	gÊash
.
If
 
©
 
Àa°
 
a
 
∑ge
 
is
 
	glocked
,Åhê
comm™d
 i†
	gˇn˚Œed
.

2988 
AT91C_MC_FCMD_SET_GP_NVM
 
EQU
 (0xBË;- (
	gMC
Ë
Së
 
GíîÆ
 
PuΩo£
 
NVM
 
	gbôs
.

2989 
AT91C_MC_FCMD_CLR_GP_NVM
 
EQU
 (0xDË;- (
	gMC
Ë
CÀ¨
 
GíîÆ
 
PuΩo£
 
NVM
 
	gbôs
.

2990 
AT91C_MC_FCMD_SET_SECURITY
 
EQU
 (0xFË;- (
	gMC
Ë
Së
 
Securôy
 
	gBô
.

2991 
AT91C_MC_PAGEN
 
EQU
 (0x3FF << 8Ë;- (
	gMC
Ë
Page
 
Numbî


2992 
AT91C_MC_KEY
 
EQU
 (0xFF << 24Ë;- (
	gMC
Ë
Wrôög
 
PrŸe˘
 
Key


2994 
AT91C_MC_SECURITY
 
EQU
 (0x1 << 4Ë;- (
	gMC
Ë
Securôy
 
Bô
 
Sètus


2995 
AT91C_MC_GPNVM0
 
EQU
 (0x1 << 8Ë;- (
	gMC
Ë
	gSe˘‹
 0 
Lock
 
Sètus


2996 
AT91C_MC_GPNVM1
 
EQU
 (0x1 << 9Ë;- (
	gMC
Ë
	gSe˘‹
 1 
Lock
 
Sètus


2997 
AT91C_MC_GPNVM2
 
EQU
 (0x1 << 10Ë;- (
	gMC
Ë
	gSe˘‹
 2 
Lock
 
Sètus


2998 
AT91C_MC_GPNVM3
 
EQU
 (0x1 << 11Ë;- (
	gMC
Ë
	gSe˘‹
 3 
Lock
 
Sètus


2999 
AT91C_MC_GPNVM4
 
EQU
 (0x1 << 12Ë;- (
	gMC
Ë
	gSe˘‹
 4 
Lock
 
Sètus


3000 
AT91C_MC_GPNVM5
 
EQU
 (0x1 << 13Ë;- (
	gMC
Ë
	gSe˘‹
 5 
Lock
 
Sètus


3001 
AT91C_MC_GPNVM6
 
EQU
 (0x1 << 14Ë;- (
	gMC
Ë
	gSe˘‹
 6 
Lock
 
Sètus


3002 
AT91C_MC_GPNVM7
 
EQU
 (0x1 << 15Ë;- (
	gMC
Ë
	gSe˘‹
 7 
Lock
 
Sètus


3003 
AT91C_MC_LOCKS0
 
EQU
 (0x1 << 16Ë;- (
	gMC
Ë
	gSe˘‹
 0 
Lock
 
Sètus


3004 
AT91C_MC_LOCKS1
 
EQU
 (0x1 << 17Ë;- (
	gMC
Ë
	gSe˘‹
 1 
Lock
 
Sètus


3005 
AT91C_MC_LOCKS2
 
EQU
 (0x1 << 18Ë;- (
	gMC
Ë
	gSe˘‹
 2 
Lock
 
Sètus


3006 
AT91C_MC_LOCKS3
 
EQU
 (0x1 << 19Ë;- (
	gMC
Ë
	gSe˘‹
 3 
Lock
 
Sètus


3007 
AT91C_MC_LOCKS4
 
EQU
 (0x1 << 20Ë;- (
	gMC
Ë
	gSe˘‹
 4 
Lock
 
Sètus


3008 
AT91C_MC_LOCKS5
 
EQU
 (0x1 << 21Ë;- (
	gMC
Ë
	gSe˘‹
 5 
Lock
 
Sètus


3009 
AT91C_MC_LOCKS6
 
EQU
 (0x1 << 22Ë;- (
	gMC
Ë
	gSe˘‹
 6 
Lock
 
Sètus


3010 
AT91C_MC_LOCKS7
 
EQU
 (0x1 << 23Ë;- (
	gMC
Ë
	gSe˘‹
 7 
Lock
 
Sètus


3011 
AT91C_MC_LOCKS8
 
EQU
 (0x1 << 24Ë;- (
	gMC
Ë
	gSe˘‹
 8 
Lock
 
Sètus


3012 
AT91C_MC_LOCKS9
 
EQU
 (0x1 << 25Ë;- (
	gMC
Ë
	gSe˘‹
 9 
Lock
 
Sètus


3013 
AT91C_MC_LOCKS10
 
EQU
 (0x1 << 26Ë;- (
	gMC
Ë
	gSe˘‹
 10 
Lock
 
Sètus


3014 
AT91C_MC_LOCKS11
 
EQU
 (0x1 << 27Ë;- (
	gMC
Ë
	gSe˘‹
 11 
Lock
 
Sètus


3015 
AT91C_MC_LOCKS12
 
EQU
 (0x1 << 28Ë;- (
	gMC
Ë
	gSe˘‹
 12 
Lock
 
Sètus


3016 
AT91C_MC_LOCKS13
 
EQU
 (0x1 << 29Ë;- (
	gMC
Ë
	gSe˘‹
 13 
Lock
 
Sètus


3017 
AT91C_MC_LOCKS14
 
EQU
 (0x1 << 30Ë;- (
	gMC
Ë
	gSe˘‹
 14 
Lock
 
Sètus


3018 
AT91C_MC_LOCKS15
 
EQU
 (0x1 << 31Ë;- (
	gMC
Ë
	gSe˘‹
 15 
Lock
 
Sètus


3024 
AT91C_SPI_SPIEN
 
EQU
 (0x1 << 0Ë;- (
	gSPI
Ë
SPI
 
E«bÀ


3025 
AT91C_SPI_SPIDIS
 
EQU
 (0x1 << 1Ë;- (
	gSPI
Ë
SPI
 
DißbÀ


3026 
AT91C_SPI_SWRST
 
EQU
 (0x1 << 7Ë;- (
	gSPI
Ë
SPI
 
So·w¨e
 
ª£t


3027 
AT91C_SPI_LASTXFER
 
EQU
 (0x1 << 24Ë;- (
	gSPI
Ë
SPI
 
La°
 
Tøns„r


3029 
AT91C_SPI_MSTR
 
EQU
 (0x1 << 0Ë;- (
	gSPI
Ë
	gMa°î
/
Sœve
 
Mode


3030 
AT91C_SPI_PS
 
EQU
 (0x1 << 1Ë;- (
	gSPI
Ë
PîùhîÆ
 
Sñe˘


3031 
AT91C_SPI_PS_FIXED
 
EQU
 (0x0 << 1Ë;- (
	gSPI
Ë
Fixed
 
PîùhîÆ
 
Sñe˘


3032 
AT91C_SPI_PS_VARIABLE
 
EQU
 (0x1 << 1Ë;- (
	gSPI
Ë
V¨übÀ
 
PîùhîÆ
 
Sñe˘


3033 
AT91C_SPI_PCSDEC
 
EQU
 (0x1 << 2Ë;- (
	gSPI
Ë
Chù
 
Sñe˘
 
Decode


3034 
AT91C_SPI_FDIV
 
EQU
 (0x1 << 3Ë;- (
	gSPI
Ë
Clock
 
Sñe˘i⁄


3035 
AT91C_SPI_MODFDIS
 
EQU
 (0x1 << 4Ë;- (
	gSPI
Ë
Mode
 
Fau…
 
Dëe˘i⁄


3036 
AT91C_SPI_LLB
 
EQU
 (0x1 << 7Ë;- (
	gSPI
Ë
Clock
 
Sñe˘i⁄


3037 
AT91C_SPI_PCS
 
EQU
 (0xF << 16Ë;- (
	gSPI
Ë
PîùhîÆ
 
Chù
 
Sñe˘


3038 
AT91C_SPI_DLYBCS
 
EQU
 (0xFF << 24Ë;- (
	gSPI
Ë
Dñay
 
Bëwìn
 
Chù
 
Sñe˘s


3040 
AT91C_SPI_RD
 
EQU
 (0xFFFF << 0Ë;- (
	gSPI
Ë
Re˚ive
 
D©a


3041 
AT91C_SPI_RPCS
 
EQU
 (0xF << 16Ë;- (
	gSPI
Ë
PîùhîÆ
 
Chù
 
Sñe˘
 
Sètus


3043 
AT91C_SPI_TD
 
EQU
 (0xFFFF << 0Ë;- (
	gSPI
Ë
Tønsmô
 
D©a


3044 
AT91C_SPI_TPCS
 
EQU
 (0xF << 16Ë;- (
	gSPI
Ë
PîùhîÆ
 
Chù
 
Sñe˘
 
Sètus


3046 
AT91C_SPI_RDRF
 
EQU
 (0x1 << 0Ë;- (
	gSPI
Ë
Re˚ive
 
D©a
 
Regi°î
 
FuŒ


3047 
AT91C_SPI_TDRE
 
EQU
 (0x1 << 1Ë;- (
	gSPI
Ë
Tønsmô
 
D©a
 
Regi°î
 
Em±y


3048 
AT91C_SPI_MODF
 
EQU
 (0x1 << 2Ë;- (
	gSPI
Ë
Mode
 
Fau…
 
Eº‹


3049 
AT91C_SPI_OVRES
 
EQU
 (0x1 << 3Ë;- (
	gSPI
Ë
Ovîrun
 
Eº‹
 
Sètus


3050 
AT91C_SPI_ENDRX
 
EQU
 (0x1 << 4Ë;- (
	gSPI
Ë
End
 
of
 
Re˚ivî
 
Tøns„r


3051 
AT91C_SPI_ENDTX
 
EQU
 (0x1 << 5Ë;- (
	gSPI
Ë
End
 
of
 
Re˚ivî
 
Tøns„r


3052 
AT91C_SPI_RXBUFF
 
EQU
 (0x1 << 6Ë;- (
	gSPI
Ë
RXBUFF
 
I¡îru±


3053 
AT91C_SPI_TXBUFE
 
EQU
 (0x1 << 7Ë;- (
	gSPI
Ë
TXBUFE
 
I¡îru±


3054 
AT91C_SPI_NSSR
 
EQU
 (0x1 << 8Ë;- (
	gSPI
Ë
NSSR
 
I¡îru±


3055 
AT91C_SPI_TXEMPTY
 
EQU
 (0x1 << 9Ë;- (
	gSPI
Ë
TXEMPTY
 
I¡îru±


3056 
AT91C_SPI_SPIENS
 
EQU
 (0x1 << 16Ë;- (
	gSPI
Ë
E«bÀ
 
Sètus


3061 
AT91C_SPI_CPOL
 
EQU
 (0x1 << 0Ë;- (
	gSPI
Ë
Clock
 
Pﬁ¨ôy


3062 
AT91C_SPI_NCPHA
 
EQU
 (0x1 << 1Ë;- (
	gSPI
Ë
Clock
 
Pha£


3063 
AT91C_SPI_CSAAT
 
EQU
 (0x1 << 3Ë;- (
	gSPI
Ë
Chù
 
Sñe˘
 
A˘ive
 
A·î
 
Tøns„r


3064 
AT91C_SPI_BITS
 
EQU
 (0xF << 4Ë;- (
	gSPI
Ë
Bôs
 
Pî
 
Tøns„r


3065 
AT91C_SPI_BITS_8
 
EQU
 (0x0 << 4Ë;- (
	gSPI
Ë8 
Bôs
 
Pî
 
å™s„r


3066 
AT91C_SPI_BITS_9
 
EQU
 (0x1 << 4Ë;- (
	gSPI
Ë9 
Bôs
 
Pî
 
å™s„r


3067 
AT91C_SPI_BITS_10
 
EQU
 (0x2 << 4Ë;- (
	gSPI
Ë10 
Bôs
 
Pî
 
å™s„r


3068 
AT91C_SPI_BITS_11
 
EQU
 (0x3 << 4Ë;- (
	gSPI
Ë11 
Bôs
 
Pî
 
å™s„r


3069 
AT91C_SPI_BITS_12
 
EQU
 (0x4 << 4Ë;- (
	gSPI
Ë12 
Bôs
 
Pî
 
å™s„r


3070 
AT91C_SPI_BITS_13
 
EQU
 (0x5 << 4Ë;- (
	gSPI
Ë13 
Bôs
 
Pî
 
å™s„r


3071 
AT91C_SPI_BITS_14
 
EQU
 (0x6 << 4Ë;- (
	gSPI
Ë14 
Bôs
 
Pî
 
å™s„r


3072 
AT91C_SPI_BITS_15
 
EQU
 (0x7 << 4Ë;- (
	gSPI
Ë15 
Bôs
 
Pî
 
å™s„r


3073 
AT91C_SPI_BITS_16
 
EQU
 (0x8 << 4Ë;- (
	gSPI
Ë16 
Bôs
 
Pî
 
å™s„r


3074 
AT91C_SPI_SCBR
 
EQU
 (0xFF << 8Ë;- (
	gSPI
Ë
Sîül
 
Clock
 
Baud
 
R©e


3075 
AT91C_SPI_DLYBS
 
EQU
 (0xFF << 16Ë;- (
	gSPI
Ë
Dñay
 
Bef‹e
 
SPCK


3076 
AT91C_SPI_DLYBCT
 
EQU
 (0xFF << 24Ë;- (
	gSPI
Ë
Dñay
 
Bëwìn
 
C⁄£cutive
 
Tøns„rs


3082 
AT91C_US_STTBRK
 
EQU
 (0x1 << 9Ë;- (
	gUSART
Ë
Sèπ
 
Bªak


3083 
AT91C_US_STPBRK
 
EQU
 (0x1 << 10Ë;- (
	gUSART
Ë
St›
 
Bªak


3084 
AT91C_US_STTTO
 
EQU
 (0x1 << 11Ë;- (
	gUSART
Ë
Sèπ
 
	gTime
-
out


3085 
AT91C_US_SENDA
 
EQU
 (0x1 << 12Ë;- (
	gUSART
Ë
Síd
 
Addªss


3086 
AT91C_US_RSTIT
 
EQU
 (0x1 << 13Ë;- (
	gUSART
Ë
Re£t
 
Iãøti⁄s


3087 
AT91C_US_RSTNACK
 
EQU
 (0x1 << 14Ë;- (
	gUSART
Ë
Re£t
 
N⁄
 
AcknowÀdge


3088 
AT91C_US_RETTO
 
EQU
 (0x1 << 15Ë;- (
	gUSART
Ë
Rórm
 
	gTime
-
out


3089 
AT91C_US_DTREN
 
EQU
 (0x1 << 16Ë;- (
	gUSART
Ë
D©a
 
TîmöÆ
 
ªady
 
E«bÀ


3090 
AT91C_US_DTRDIS
 
EQU
 (0x1 << 17Ë;- (
	gUSART
Ë
D©a
 
TîmöÆ
 
ªady
 
DißbÀ


3091 
AT91C_US_RTSEN
 
EQU
 (0x1 << 18Ë;- (
	gUSART
Ë
Reque°
 
to
 
Síd
 
íabÀ


3092 
AT91C_US_RTSDIS
 
EQU
 (0x1 << 19Ë;- (
	gUSART
Ë
Reque°
 
to
 
Síd
 
DißbÀ


3094 
AT91C_US_USMODE
 
EQU
 (0xF << 0Ë;- (
	gUSART
Ë
Ußπ
 
mode


3095 
AT91C_US_USMODE_NORMAL
 
EQU
 (0x0Ë;- (
	gUSART
Ë
N‹mÆ


3096 
AT91C_US_USMODE_RS485
 
EQU
 (0x1Ë;- (
	gUSART
Ë
RS485


3097 
AT91C_US_USMODE_HWHSH
 
EQU
 (0x2Ë;- (
	gUSART
Ë
H¨dw¨e
 
H™dshakög


3098 
AT91C_US_USMODE_MODEM
 
EQU
 (0x3Ë;- (
	gUSART
Ë
Modem


3099 
AT91C_US_USMODE_ISO7816_0
 
EQU
 (0x4Ë;- (
	gUSART
Ë
ISO7816
 
	g¥Ÿocﬁ
: 
T
 = 0

3100 
AT91C_US_USMODE_ISO7816_1
 
EQU
 (0x6Ë;- (
	gUSART
Ë
ISO7816
 
	g¥Ÿocﬁ
: 
T
 = 1

3101 
AT91C_US_USMODE_IRDA
 
EQU
 (0x8Ë;- (
	gUSART
Ë
IrDA


3102 
AT91C_US_USMODE_SWHSH
 
EQU
 (0xCË;- (
	gUSART
Ë
So·w¨e
 
H™dshakög


3103 
AT91C_US_CLKS
 
EQU
 (0x3 << 4Ë;- (
	gUSART
Ë
Clock
 
Sñe˘i⁄
 (
Baud
 
R©e
 
gíî©‹
 
I≈ut
 Clock

3104 
AT91C_US_CLKS_CLOCK
 
EQU
 (0x0 << 4Ë;- (
USART
Ë
Clock


3105 
AT91C_US_CLKS_FDIV1
 
EQU
 (0x1 << 4Ë;- (
USART
Ë
fdiv1


3106 
AT91C_US_CLKS_SLOW
 
EQU
 (0x2 << 4Ë;- (
USART
Ë
	$¶ow_˛ock
 (
ARM
)

3107 
AT91C_US_CLKS_EXT
 
	`EQU
 (0x3 << 4Ë;- (
USART
Ë
	$Exã∫Æ
 (
SCK
)

3108 
AT91C_US_CHRL
 
	`EQU
 (0x3 << 6Ë;- (
USART
Ë
Clock
 
	`Sñe˘i⁄
 (
Baud
 
R©e
 
gíî©‹
 
I≈ut
 Clock

3109 
AT91C_US_CHRL_5_BITS
 
	`EQU
 (0x0 << 6Ë;- (
USART
Ë
Ch¨a˘î
 
Lígth
: 5 
bôs


3110 
AT91C_US_CHRL_6_BITS
 
	`EQU
 (0x1 << 6Ë;- (
USART
Ë
Ch¨a˘î
 
Lígth
: 6 
bôs


3111 
AT91C_US_CHRL_7_BITS
 
	`EQU
 (0x2 << 6Ë;- (
USART
Ë
Ch¨a˘î
 
Lígth
: 7 
bôs


3112 
AT91C_US_CHRL_8_BITS
 
	`EQU
 (0x3 << 6Ë;- (
USART
Ë
Ch¨a˘î
 
Lígth
: 8 
bôs


3113 
AT91C_US_SYNC
 
	`EQU
 (0x1 << 8Ë;- (
USART
Ë
Synchr⁄ous
 
Mode
 
Sñe˘


3114 
AT91C_US_NBSTOP
 
	`EQU
 (0x3 << 12Ë;- (
USART
Ë
Numbî
 
of
 
St›
 
bôs


3115 
AT91C_US_NBSTOP_1_BIT
 
	`EQU
 (0x0 << 12Ë;- (
USART
Ë1 
°›
 
bô


3116 
AT91C_US_NBSTOP_15_BIT
 
	`EQU
 (0x1 << 12Ë;- (
USART
Ë
	`Asynchr⁄ous
 (
SYNC
=0Ë2 
°›
 
bôs
 
	`Synchr⁄ous
 (SYNC=1) 2 stop bits

3117 
AT91C_US_NBSTOP_2_BIT
 
	`EQU
 (0x2 << 12Ë;- (
USART
Ë2 
°›
 
bôs


3118 
AT91C_US_MSBF
 
	`EQU
 (0x1 << 16Ë;- (
USART
Ë
Bô
 
Ordî


3119 
AT91C_US_MODE9
 
	`EQU
 (0x1 << 17Ë;- (
USART
Ë9-
bô
 
Ch¨a˘î
 
Àngth


3120 
AT91C_US_CKLO
 
	`EQU
 (0x1 << 18Ë;- (
USART
Ë
Clock
 
Ouçut
 
Sñe˘


3121 
AT91C_US_OVER
 
	`EQU
 (0x1 << 19Ë;- (
USART
Ë
Ovî
 
Sam∂ög
 
Mode


3122 
AT91C_US_INACK
 
	`EQU
 (0x1 << 20Ë;- (
USART
Ë
Inhibô
 
N⁄
 
AcknowÀdge


3123 
AT91C_US_DSNACK
 
	`EQU
 (0x1 << 21Ë;- (
USART
Ë
DißbÀ
 
Suc˚ssive
 
NACK


3124 
AT91C_US_MAX_ITER
 
	`EQU
 (0x1 << 24Ë;- (
USART
Ë
Numbî
 
of
 
Rïëôi⁄s


3125 
AT91C_US_FILTER
 
	`EQU
 (0x1 << 28Ë;- (
USART
Ë
Re˚ive
 
Löe
 
Fûãr


3127 
AT91C_US_RXBRK
 
	`EQU
 (0x1 << 2Ë;- (
USART
Ë
Bªak
 
Re˚ived
/
End
 
of
 Break

3128 
AT91C_US_TIMEOUT
 
	`EQU
 (0x1 << 8Ë;- (
USART
Ë
Re˚ivî
 
Time
-
out


3129 
AT91C_US_ITERATION
 
	`EQU
 (0x1 << 10Ë;- (
USART
Ë
Max
 
numbî
 
of
 
Rïëôi⁄s
 
Róched


3130 
AT91C_US_NACK
 
	`EQU
 (0x1 << 13Ë;- (
USART
Ë
N⁄
 
AcknowÀdge


3131 
AT91C_US_RIIC
 
	`EQU
 (0x1 << 16Ë;- (
USART
Ë
Rög
 
INdiˇt‹
 
I≈ut
 
Ch™ge
 
Fœg


3132 
AT91C_US_DSRIC
 
	`EQU
 (0x1 << 17Ë;- (
USART
Ë
D©a
 
Së
 
Ródy
 
I≈ut
 
Ch™ge
 
Fœg


3133 
AT91C_US_DCDIC
 
	`EQU
 (0x1 << 18Ë;- (
USART
Ë
D©a
 
C¨rõr
 
Fœg


3134 
AT91C_US_CTSIC
 
	`EQU
 (0x1 << 19Ë;- (
USART
Ë
CÀ¨
 
To
 
Síd
 
I≈ut
 
Ch™ge
 
Fœg


3138 
AT91C_US_RI
 
	`EQU
 (0x1 << 20Ë;- (
USART
Ë
Image
 
of
 
RI
 
I≈ut


3139 
AT91C_US_DSR
 
	`EQU
 (0x1 << 21Ë;- (
USART
Ë
Image
 
of
 
DSR
 
I≈ut


3140 
AT91C_US_DCD
 
	`EQU
 (0x1 << 22Ë;- (
USART
Ë
Image
 
of
 
DCD
 
I≈ut


3141 
AT91C_US_CTS
 
	`EQU
 (0x1 << 23Ë;- (
USART
Ë
Image
 
of
 
CTS
 
I≈ut


3147 
AT91C_SSC_RXEN
 
	`EQU
 (0x1 << 0Ë;- (
SSC
Ë
Re˚ive
 
E«bÀ


3148 
AT91C_SSC_RXDIS
 
	`EQU
 (0x1 << 1Ë;- (
SSC
Ë
Re˚ive
 
DißbÀ


3149 
AT91C_SSC_TXEN
 
	`EQU
 (0x1 << 8Ë;- (
SSC
Ë
Tønsmô
 
E«bÀ


3150 
AT91C_SSC_TXDIS
 
	`EQU
 (0x1 << 9Ë;- (
SSC
Ë
Tønsmô
 
DißbÀ


3151 
AT91C_SSC_SWRST
 
	`EQU
 (0x1 << 15Ë;- (
SSC
Ë
So·w¨e
 
Re£t


3153 
AT91C_SSC_CKS
 
	`EQU
 (0x3 << 0Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Clock
 
Sñe˘i⁄


3154 
AT91C_SSC_CKS_DIV
 
	`EQU
 (0x0Ë;- (
SSC
Ë
Divided
 
Clock


3155 
AT91C_SSC_CKS_TK
 
	`EQU
 (0x1Ë;- (
SSC
Ë
TK
 
Clock
 
sig«l


3156 
AT91C_SSC_CKS_RK
 
	`EQU
 (0x2Ë;- (
SSC
Ë
RK
 
pö


3157 
AT91C_SSC_CKO
 
	`EQU
 (0x7 << 2Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Clock
 
Ouçut
 
Mode
 
Sñe˘i⁄


3158 
AT91C_SSC_CKO_NONE
 
	`EQU
 (0x0 << 2Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Clock
 
Ouçut
 
Mode
: 
N⁄e
 
RK
 
pö
: 
I≈ut
-
⁄ly


3159 
AT91C_SSC_CKO_CONTINOUS
 
	`EQU
 (0x1 << 2Ë;- (
SSC
Ë
C⁄töuous
 
Re˚ive
/
Tønsmô
 
Clock
 
RK
 
pö
: 
Ouçut


3160 
AT91C_SSC_CKO_DATA_TX
 
	`EQU
 (0x2 << 2Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Clock
 
⁄ly
 
durög
 
d©a
 
å™s„rs
 
RK
 
pö
: 
Ouçut


3161 
AT91C_SSC_CKI
 
	`EQU
 (0x1 << 5Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Clock
 
Invîsi⁄


3162 
AT91C_SSC_START
 
	`EQU
 (0xF << 8Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Sèπ
 
Sñe˘i⁄


3163 
AT91C_SSC_START_CONTINOUS
 
	`EQU
 (0x0 << 8Ë;- (
SSC
Ë
C⁄töuous
, 
as
 
so⁄
á†
the
 
ª˚ivî
 
is
 
íabÀd
, 
™d
 
immedüãly
 
a·î
Åhê
íd
 
of
 
å™s„r
 o‡thê
¥evious
 
d©a
.

3164 
AT91C_SSC_START_TX
 
	`EQU
 (0x1 << 8Ë;- (
SSC
Ë
Tønsmô
/
Re˚ive
 
°¨t


3165 
AT91C_SSC_START_LOW_RF
 
	`EQU
 (0x2 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
a
 
low
 
Àvñ
 
⁄
 
RF
 
öput


3166 
AT91C_SSC_START_HIGH_RF
 
	`EQU
 (0x3 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
a
 
high
 
Àvñ
 
⁄
 
RF
 
öput


3167 
AT91C_SSC_START_FALL_RF
 
	`EQU
 (0x4 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
a
 
ÁŒög
 
edge
 
⁄
 
RF
 
öput


3168 
AT91C_SSC_START_RISE_RF
 
	`EQU
 (0x5 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
a
 
risög
 
edge
 
⁄
 
RF
 
öput


3169 
AT91C_SSC_START_LEVEL_RF
 
	`EQU
 (0x6 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
™y
 
Àvñ
 
ch™ge
 
⁄
 
RF
 
öput


3170 
AT91C_SSC_START_EDGE_RF
 
	`EQU
 (0x7 << 8Ë;- (
SSC
Ë
Dëe˘i⁄
 
of
 
™y
 
edge
 
⁄
 
RF
 
öput


3171 
AT91C_SSC_START_0
 
	`EQU
 (0x8 << 8Ë;- (
SSC
Ë
Com∑ª
 0

3172 
AT91C_SSC_STTDLY
 
	`EQU
 (0xFF << 16Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Sèπ
 
Dñay


3173 
AT91C_SSC_PERIOD
 
	`EQU
 (0xFF << 24Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Pîiod
 
Dividî
 
Sñe˘i⁄


3175 
AT91C_SSC_DATLEN
 
	`EQU
 (0x1F << 0Ë;- (
SSC
Ë
D©a
 
Lígth


3176 
AT91C_SSC_LOOP
 
	`EQU
 (0x1 << 5Ë;- (
SSC
Ë
Lo›
 
Mode


3177 
AT91C_SSC_MSBF
 
	`EQU
 (0x1 << 7Ë;- (
SSC
Ë
Mo°
 
Signifiˇ¡
 
Bô
 
Fú°


3178 
AT91C_SSC_DATNB
 
	`EQU
 (0xF << 8Ë;- (
SSC
Ë
D©a
 
Numbî
 
≥r
 
Føme


3179 
AT91C_SSC_FSLEN
 
	`EQU
 (0xF << 16Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Àngth


3180 
AT91C_SSC_FSOS
 
	`EQU
 (0x7 << 20Ë;- (
SSC
Ë
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Ouçut
 
Sñe˘i⁄


3181 
AT91C_SSC_FSOS_NONE
 
	`EQU
 (0x0 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
N⁄e
 
RK
 
pö
 
I≈ut
-
⁄ly


3182 
AT91C_SSC_FSOS_NEGATIVE
 
	`EQU
 (0x1 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
Neg©ive
 
Pul£


3183 
AT91C_SSC_FSOS_POSITIVE
 
	`EQU
 (0x2 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
Posôive
 
Pul£


3184 
AT91C_SSC_FSOS_LOW
 
	`EQU
 (0x3 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
Drivî
 
Low
 
durög
 
d©a
 
å™s„r


3185 
AT91C_SSC_FSOS_HIGH
 
	`EQU
 (0x4 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
Drivî
 
High
 
durög
 
d©a
 
å™s„r


3186 
AT91C_SSC_FSOS_TOGGLE
 
	`EQU
 (0x5 << 20Ë;- (
SSC
Ë
Sñe˘ed
 
Re˚ive
/
Tønsmô
 
Føme
 
Sync
 
Sig«l
: 
Togglög
 
©
 
óch
 
°¨t
 
of
 
d©a
 
å™s„r


3187 
AT91C_SSC_FSEDGE
 
	`EQU
 (0x1 << 24Ë;- (
SSC
Ë
Føme
 
Sync
 
Edge
 
Dëe˘i⁄


3190 
AT91C_SSC_DATDEF
 
	`EQU
 (0x1 << 5Ë;- (
SSC
Ë
D©a
 
DeÁu…
 
VÆue


3191 
AT91C_SSC_FSDEN
 
	`EQU
 (0x1 << 23Ë;- (
SSC
Ë
Føme
 
Sync
 
D©a
 
E«bÀ


3193 
AT91C_SSC_TXRDY
 
	`EQU
 (0x1 << 0Ë;- (
SSC
Ë
Tønsmô
 
Ródy


3194 
AT91C_SSC_TXEMPTY
 
	`EQU
 (0x1 << 1Ë;- (
SSC
Ë
Tønsmô
 
Em±y


3195 
AT91C_SSC_ENDTX
 
	`EQU
 (0x1 << 2Ë;- (
SSC
Ë
End
 
Of
 
Tønsmissi⁄


3196 
AT91C_SSC_TXBUFE
 
	`EQU
 (0x1 << 3Ë;- (
SSC
Ë
Tønsmô
 
Buf„r
 
Em±y


3197 
AT91C_SSC_RXRDY
 
	`EQU
 (0x1 << 4Ë;- (
SSC
Ë
Re˚ive
 
Ródy


3198 
AT91C_SSC_OVRUN
 
	`EQU
 (0x1 << 5Ë;- (
SSC
Ë
Re˚ive
 
Ovîrun


3199 
AT91C_SSC_ENDRX
 
	`EQU
 (0x1 << 6Ë;- (
SSC
Ë
End
 
of
 
Re˚±i⁄


3200 
AT91C_SSC_RXBUFF
 
	`EQU
 (0x1 << 7Ë;- (
SSC
Ë
Re˚ive
 
Buf„r
 
FuŒ


3201 
AT91C_SSC_TXSYN
 
	`EQU
 (0x1 << 10Ë;- (
SSC
Ë
Tønsmô
 
Sync


3202 
AT91C_SSC_RXSYN
 
	`EQU
 (0x1 << 11Ë;- (
SSC
Ë
Re˚ive
 
Sync


3203 
AT91C_SSC_TXENA
 
	`EQU
 (0x1 << 16Ë;- (
SSC
Ë
Tønsmô
 
E«bÀ


3204 
AT91C_SSC_RXENA
 
	`EQU
 (0x1 << 17Ë;- (
SSC
Ë
Re˚ive
 
E«bÀ


3213 
AT91C_TWI_START
 
	`EQU
 (0x1 << 0Ë;- (
TWI
Ë
Síd
 
a
 
START
 
C⁄dôi⁄


3214 
AT91C_TWI_STOP
 
	`EQU
 (0x1 << 1Ë;- (
TWI
Ë
Síd
 
a
 
STOP
 
C⁄dôi⁄


3215 
AT91C_TWI_MSEN
 
	`EQU
 (0x1 << 2Ë;- (
TWI
ËTWI 
Ma°î
 
Tøns„r
 
E«bÀd


3216 
AT91C_TWI_MSDIS
 
	`EQU
 (0x1 << 3Ë;- (
TWI
ËTWI 
Ma°î
 
Tøns„r
 
DißbÀd


3217 
AT91C_TWI_SWRST
 
	`EQU
 (0x1 << 7Ë;- (
TWI
Ë
So·w¨e
 
Re£t


3219 
AT91C_TWI_IADRSZ
 
	`EQU
 (0x3 << 8Ë;- (
TWI
Ë
I¡î«l
 
Devi˚
 
Addªss
 
Size


3220 
AT91C_TWI_IADRSZ_NO
 
	`EQU
 (0x0 << 8Ë;- (
TWI
Ë
No
 
öã∫Æ
 
devi˚
 
addªss


3221 
AT91C_TWI_IADRSZ_1_BYTE
 
	`EQU
 (0x1 << 8Ë;- (
TWI
Ë
O√
-
byã
 
öã∫Æ
 
devi˚
 
addªss


3222 
AT91C_TWI_IADRSZ_2_BYTE
 
	`EQU
 (0x2 << 8Ë;- (
TWI
Ë
Two
-
byã
 
öã∫Æ
 
devi˚
 
addªss


3223 
AT91C_TWI_IADRSZ_3_BYTE
 
	`EQU
 (0x3 << 8Ë;- (
TWI
Ë
Thªe
-
byã
 
öã∫Æ
 
devi˚
 
addªss


3224 
AT91C_TWI_MREAD
 
	`EQU
 (0x1 << 12Ë;- (
TWI
Ë
Ma°î
 
Ród
 
Dúe˘i⁄


3225 
AT91C_TWI_DADR
 
	`EQU
 (0x7F << 16Ë;- (
TWI
Ë
Devi˚
 
Addªss


3227 
AT91C_TWI_CLDIV
 
	`EQU
 (0xFF << 0Ë;- (
TWI
Ë
Clock
 
Low
 
Dividî


3228 
AT91C_TWI_CHDIV
 
	`EQU
 (0xFF << 8Ë;- (
TWI
Ë
Clock
 
High
 
Dividî


3229 
AT91C_TWI_CKDIV
 
	`EQU
 (0x7 << 16Ë;- (
TWI
Ë
Clock
 
Dividî


3231 
AT91C_TWI_TXCOMP
 
	`EQU
 (0x1 << 0Ë;- (
TWI
Ë
Tønsmissi⁄
 
Com∂ëed


3232 
AT91C_TWI_RXRDY
 
	`EQU
 (0x1 << 1Ë;- (
TWI
Ë
Re˚ive
 
hﬁdög
 
RóDY


3233 
AT91C_TWI_TXRDY
 
	`EQU
 (0x1 << 2Ë;- (
TWI
Ë
Tønsmô
 
hﬁdög
 
RóDY


3234 
AT91C_TWI_OVRE
 
	`EQU
 (0x1 << 6Ë;- (
TWI
Ë
Ovîrun
 
Eº‹


3235 
AT91C_TWI_UNRE
 
	`EQU
 (0x1 << 7Ë;- (
TWI
Ë
Undîrun
 
Eº‹


3236 
AT91C_TWI_NACK
 
	`EQU
 (0x1 << 8Ë;- (
TWI
Ë
NŸ
 
AcknowÀdged


3245 
AT91C_PWMC_CPRE
 
	`EQU
 (0xF << 0Ë;- (
PWMC_CH
Ë
Ch™√l
 
Pª
-
sˇÀr
 : 
PWMC_CLKx


3246 
AT91C_PWMC_CPRE_MCK
 
	`EQU
 (0x0Ë;- (
PWMC_CH
)

3247 
AT91C_PWMC_CPRE_MCKA
 
	`EQU
 (0xBË;- (
PWMC_CH
)

3248 
AT91C_PWMC_CPRE_MCKB
 
	`EQU
 (0xCË;- (
PWMC_CH
)

3249 
AT91C_PWMC_CALG
 
	`EQU
 (0x1 << 8Ë;- (
PWMC_CH
Ë
Ch™√l
 
Alignmít


3250 
AT91C_PWMC_CPOL
 
	`EQU
 (0x1 << 9Ë;- (
PWMC_CH
Ë
Ch™√l
 
Pﬁ¨ôy


3251 
AT91C_PWMC_CPD
 
	`EQU
 (0x1 << 10Ë;- (
PWMC_CH
Ë
Ch™√l
 
Upd©e
 
Pîiod


3253 
AT91C_PWMC_CDTY
 
	`EQU
 (0x0 << 0Ë;- (
PWMC_CH
Ë
Ch™√l
 
Duty
 
Cy˛e


3255 
AT91C_PWMC_CPRD
 
	`EQU
 (0x0 << 0Ë;- (
PWMC_CH
Ë
Ch™√l
 
Pîiod


3257 
AT91C_PWMC_CCNT
 
	`EQU
 (0x0 << 0Ë;- (
PWMC_CH
Ë
Ch™√l
 
Cou¡î


3259 
AT91C_PWMC_CUPD
 
	`EQU
 (0x0 << 0Ë;- (
PWMC_CH
Ë
Ch™√l
 
Upd©e


3265 
AT91C_PWMC_DIVA
 
	`EQU
 (0xFF << 0Ë;- (
PWMC
Ë
CLKA
 
divide
 
Á˘‹
.

3266 
AT91C_PWMC_PREA
 
	`EQU
 (0xF << 8Ë;- (
PWMC
Ë
Dividî
 
I≈ut
 
Clock
 
PªsˇÀr
 
A


3267 
AT91C_PWMC_PREA_MCK
 
	`EQU
 (0x0 << 8Ë;- (
PWMC
)

3268 
AT91C_PWMC_DIVB
 
	`EQU
 (0xFF << 16Ë;- (
PWMC
Ë
CLKB
 
divide
 
Á˘‹
.

3269 
AT91C_PWMC_PREB
 
	`EQU
 (0xF << 24Ë;- (
PWMC
Ë
Dividî
 
I≈ut
 
Clock
 
PªsˇÀr
 
B


3270 
AT91C_PWMC_PREB_MCK
 
	`EQU
 (0x0 << 24Ë;- (
PWMC
)

3272 
AT91C_PWMC_CHID0
 
	`EQU
 (0x1 << 0Ë;- (
PWMC
Ë
Ch™√l
 
ID
 0

3273 
AT91C_PWMC_CHID1
 
	`EQU
 (0x1 << 1Ë;- (
PWMC
Ë
Ch™√l
 
ID
 1

3274 
AT91C_PWMC_CHID2
 
	`EQU
 (0x1 << 2Ë;- (
PWMC
Ë
Ch™√l
 
ID
 2

3275 
AT91C_PWMC_CHID3
 
	`EQU
 (0x1 << 3Ë;- (
PWMC
Ë
Ch™√l
 
ID
 3

3287 
AT91C_UDP_FRM_NUM
 
	`EQU
 (0x7FF << 0Ë;- (
UDP
Ë
Føme
 
Numbî
 
as
 
Deföed
 
ö
 
the
 
Packë
 
Fõld
 
F‹m©s


3288 
AT91C_UDP_FRM_ERR
 
	`EQU
 (0x1 << 16Ë;- (
UDP
Ë
Føme
 
Eº‹


3289 
AT91C_UDP_FRM_OK
 
	`EQU
 (0x1 << 17Ë;- (
UDP
Ë
Føme
 
OK


3291 
AT91C_UDP_FADDEN
 
	`EQU
 (0x1 << 0Ë;- (
UDP
Ë
Fun˘i⁄
 
Addªss
 
E«bÀ


3292 
AT91C_UDP_CONFG
 
	`EQU
 (0x1 << 1Ë;- (
UDP
Ë
C⁄figuªd


3293 
AT91C_UDP_ESR
 
	`EQU
 (0x1 << 2Ë;- (
UDP
Ë
E«bÀ
 
Síd
 
Resume


3294 
AT91C_UDP_RSMINPR
 
	`EQU
 (0x1 << 3Ë;- (
UDP
Ë
A
 
Resume
 
Has
 
Bìn
 
Sít
 
to
 
the
 
Ho°


3295 
AT91C_UDP_RMWUPE
 
	`EQU
 (0x1 << 4Ë;- (
UDP
Ë
RemŸe
 
Wake
 
Up
 
E«bÀ


3297 
AT91C_UDP_FADD
 
	`EQU
 (0xFF << 0Ë;- (
UDP
Ë
Fun˘i⁄
 
Addªss
 
VÆue


3298 
AT91C_UDP_FEN
 
	`EQU
 (0x1 << 8Ë;- (
UDP
Ë
Fun˘i⁄
 
E«bÀ


3300 
AT91C_UDP_EPINT0
 
	`EQU
 (0x1 << 0Ë;- (
UDP
Ë
Endpoöt
 0 
I¡îru±


3301 
AT91C_UDP_EPINT1
 
	`EQU
 (0x1 << 1Ë;- (
UDP
Ë
Endpoöt
 0 
I¡îru±


3302 
AT91C_UDP_EPINT2
 
	`EQU
 (0x1 << 2Ë;- (
UDP
Ë
Endpoöt
 2 
I¡îru±


3303 
AT91C_UDP_EPINT3
 
	`EQU
 (0x1 << 3Ë;- (
UDP
Ë
Endpoöt
 3 
I¡îru±


3304 
AT91C_UDP_EPINT4
 
	`EQU
 (0x1 << 4Ë;- (
UDP
Ë
Endpoöt
 4 
I¡îru±


3305 
AT91C_UDP_EPINT5
 
	`EQU
 (0x1 << 5Ë;- (
UDP
Ë
Endpoöt
 5 
I¡îru±


3306 
AT91C_UDP_RXSUSP
 
	`EQU
 (0x1 << 8Ë;- (
UDP
Ë
USB
 
Su•íd
 
I¡îru±


3307 
AT91C_UDP_RXRSM
 
	`EQU
 (0x1 << 9Ë;- (
UDP
Ë
USB
 
Resume
 
I¡îru±


3308 
AT91C_UDP_EXTRSM
 
	`EQU
 (0x1 << 10Ë;- (
UDP
Ë
USB
 
Exã∫Æ
 
Resume
 
I¡îru±


3309 
AT91C_UDP_SOFINT
 
	`EQU
 (0x1 << 11Ë;- (
UDP
Ë
USB
 
Sèπ
 
Of
 
‰ame
 
I¡îru±


3310 
AT91C_UDP_WAKEUP
 
	`EQU
 (0x1 << 13Ë;- (
UDP
Ë
USB
 
Resume
 
I¡îru±


3314 
AT91C_UDP_ENDBUSRES
 
	`EQU
 (0x1 << 12Ë;- (
UDP
Ë
USB
 
End
 
Of
 
Bus
 
Re£t
 
I¡îru±


3317 
AT91C_UDP_EP0
 
	`EQU
 (0x1 << 0Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 0

3318 
AT91C_UDP_EP1
 
	`EQU
 (0x1 << 1Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 1

3319 
AT91C_UDP_EP2
 
	`EQU
 (0x1 << 2Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 2

3320 
AT91C_UDP_EP3
 
	`EQU
 (0x1 << 3Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 3

3321 
AT91C_UDP_EP4
 
	`EQU
 (0x1 << 4Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 4

3322 
AT91C_UDP_EP5
 
	`EQU
 (0x1 << 5Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 5

3324 
AT91C_UDP_TXCOMP
 
	`EQU
 (0x1 << 0Ë;- (
UDP
Ë
Gíî©es
 
™
 
IN
 
∑ckë
 
wôh
 
d©a
 
¥eviou¶y
 
wrôãn
 
ö
 
the
 
DPR


3325 
AT91C_UDP_RX_DATA_BK0
 
	`EQU
 (0x1 << 1Ë;- (
UDP
Ë
Re˚ive
 
D©a
 
B™k
 0

3326 
AT91C_UDP_RXSETUP
 
	`EQU
 (0x1 << 2Ë;- (
UDP
Ë
Síds
 
STALL
 
to
 
the
 
	$Ho°
 (
C⁄åﬁ
 
ídpoöts
)

3327 
AT91C_UDP_ISOERROR
 
	`EQU
 (0x1 << 3Ë;- (
UDP
Ë
Isochr⁄ous
 
	$îr‹
 (
Isochr⁄ous
 
ídpoöts
)

3328 
AT91C_UDP_TXPKTRDY
 
	`EQU
 (0x1 << 4Ë;- (
UDP
Ë
Tønsmô
 
Packë
 
Ródy


3329 
AT91C_UDP_FORCESTALL
 
	`EQU
 (0x1 << 5Ë;- (
UDP
Ë
F‹˚
 
	`SèŒ
 (
u£d
 
by
 
C⁄åﬁ
, 
Bulk
 
™d
 
Isochr⁄ous
 
ídpoöts
).

3330 
AT91C_UDP_RX_DATA_BK1
 
	`EQU
 (0x1 << 6Ë;- (
UDP
Ë
Re˚ive
 
D©a
 
B™k
 1 (
⁄ly
 
u£d
 
by
 
ídpoöts
 
wôh
 
pög
-
p⁄g
 
©åibuãs
).

3331 
AT91C_UDP_DIR
 
	`EQU
 (0x1 << 7Ë;- (
UDP
Ë
Tøns„r
 
Dúe˘i⁄


3332 
AT91C_UDP_EPTYPE
 
	`EQU
 (0x7 << 8Ë;- (
UDP
Ë
Endpoöt
 
ty≥


3333 
AT91C_UDP_EPTYPE_CTRL
 
	`EQU
 (0x0 << 8Ë;- (
UDP
Ë
C⁄åﬁ


3334 
AT91C_UDP_EPTYPE_ISO_OUT
 
	`EQU
 (0x1 << 8Ë;- (
UDP
Ë
Isochr⁄ous
 
OUT


3335 
AT91C_UDP_EPTYPE_BULK_OUT
 
	`EQU
 (0x2 << 8Ë;- (
UDP
Ë
Bulk
 
OUT


3336 
AT91C_UDP_EPTYPE_INT_OUT
 
	`EQU
 (0x3 << 8Ë;- (
UDP
Ë
I¡îru±
 
OUT


3337 
AT91C_UDP_EPTYPE_ISO_IN
 
	`EQU
 (0x5 << 8Ë;- (
UDP
Ë
Isochr⁄ous
 
IN


3338 
AT91C_UDP_EPTYPE_BULK_IN
 
	`EQU
 (0x6 << 8Ë;- (
UDP
Ë
Bulk
 
IN


3339 
AT91C_UDP_EPTYPE_INT_IN
 
	`EQU
 (0x7 << 8Ë;- (
UDP
Ë
I¡îru±
 
IN


3340 
AT91C_UDP_DTGLE
 
	`EQU
 (0x1 << 11Ë;- (
UDP
Ë
D©a
 
ToggÀ


3341 
AT91C_UDP_EPEDS
 
	`EQU
 (0x1 << 15Ë;- (
UDP
Ë
Endpoöt
 
E«bÀ
 
DißbÀ


3342 
AT91C_UDP_RXBYTECNT
 
	`EQU
 (0x7FF << 16Ë;- (
UDP
Ë
Numbî
 
Of
 
Byãs
 
AvaûabÀ
 
ö
 
the
 
FIFO


3344 
AT91C_UDP_TXVDIS
 
	`EQU
 (0x1 << 8Ë;- (
UDP
)

3345 
AT91C_UDP_PUON
 
	`EQU
 (0x1 << 9Ë;- (
UDP
Ë
PuŒ
-
up
 
ON


3351 
AT91C_TC_CLKEN
 
	`EQU
 (0x1 << 0Ë;- (
TC
Ë
Cou¡î
 
Clock
 
E«bÀ
 
Comm™d


3352 
AT91C_TC_CLKDIS
 
	`EQU
 (0x1 << 1Ë;- (
TC
Ë
Cou¡î
 
Clock
 
DißbÀ
 
Comm™d


3353 
AT91C_TC_SWTRG
 
	`EQU
 (0x1 << 2Ë;- (
TC
Ë
So·w¨e
 
Triggî
 
Comm™d


3355 
AT91C_TC_CLKS
 
	`EQU
 (0x7 << 0Ë;- (
TC
Ë
Clock
 
Sñe˘i⁄


3356 
AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 
	`EQU
 (0x0Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
TIMER_DIV1_CLOCK


3357 
AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 
	`EQU
 (0x1Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
TIMER_DIV2_CLOCK


3358 
AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 
	`EQU
 (0x2Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
TIMER_DIV3_CLOCK


3359 
AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 
	`EQU
 (0x3Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
TIMER_DIV4_CLOCK


3360 
AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 
	`EQU
 (0x4Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
TIMER_DIV5_CLOCK


3361 
AT91C_TC_CLKS_XC0
 
	`EQU
 (0x5Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
XC0


3362 
AT91C_TC_CLKS_XC1
 
	`EQU
 (0x6Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
XC1


3363 
AT91C_TC_CLKS_XC2
 
	`EQU
 (0x7Ë;- (
TC
Ë
Clock
 
£À˘ed
: 
XC2


3364 
AT91C_TC_CLKI
 
	`EQU
 (0x1 << 3Ë;- (
TC
Ë
Clock
 
Invît


3365 
AT91C_TC_BURST
 
	`EQU
 (0x3 << 4Ë;- (
TC
Ë
Bur°
 
Sig«l
 
Sñe˘i⁄


3366 
AT91C_TC_BURST_NONE
 
	`EQU
 (0x0 << 4Ë;- (
TC
Ë
The
 
˛ock
 
is
 
nŸ
 
g©ed
 
by
 
™
 
exã∫Æ
 
sig«l


3367 
AT91C_TC_BURST_XC0
 
	`EQU
 (0x1 << 4Ë;- (
TC
Ë
XC0
 
is
 
ANDed
 
wôh
 
the
 
£À˘ed
 
˛ock


3368 
AT91C_TC_BURST_XC1
 
	`EQU
 (0x2 << 4Ë;- (
TC
Ë
XC1
 
is
 
ANDed
 
wôh
 
the
 
£À˘ed
 
˛ock


3369 
AT91C_TC_BURST_XC2
 
	`EQU
 (0x3 << 4Ë;- (
TC
Ë
XC2
 
is
 
ANDed
 
wôh
 
the
 
£À˘ed
 
˛ock


3370 
AT91C_TC_CPCSTOP
 
	`EQU
 (0x1 << 6Ë;- (
TC
Ë
Cou¡î
 
Clock
 
St›≥d
 
wôh
 
RC
 
Com∑ª


3371 
AT91C_TC_LDBSTOP
 
	`EQU
 (0x1 << 6Ë;- (
TC
Ë
Cou¡î
 
Clock
 
St›≥d
 
wôh
 
RB
 
Lﬂdög


3372 
AT91C_TC_CPCDIS
 
	`EQU
 (0x1 << 7Ë;- (
TC
Ë
Cou¡î
 
Clock
 
DißbÀ
 
wôh
 
RC
 
Com∑ª


3373 
AT91C_TC_LDBDIS
 
	`EQU
 (0x1 << 7Ë;- (
TC
Ë
Cou¡î
 
Clock
 
DißbÀd
 
wôh
 
RB
 
Lﬂdög


3374 
AT91C_TC_ETRGEDG
 
	`EQU
 (0x3 << 8Ë;- (
TC
Ë
Exã∫Æ
 
Triggî
 
Edge
 
Sñe˘i⁄


3375 
AT91C_TC_ETRGEDG_NONE
 
	`EQU
 (0x0 << 8Ë;- (
TC
Ë
Edge
: 
N⁄e


3376 
AT91C_TC_ETRGEDG_RISING
 
	`EQU
 (0x1 << 8Ë;- (
TC
Ë
Edge
: 
risög
 
edge


3377 
AT91C_TC_ETRGEDG_FALLING
 
	`EQU
 (0x2 << 8Ë;- (
TC
Ë
Edge
: 
ÁŒög
 
edge


3378 
AT91C_TC_ETRGEDG_BOTH
 
	`EQU
 (0x3 << 8Ë;- (
TC
Ë
Edge
: 
óch
 
edge


3379 
AT91C_TC_EEVTEDG
 
	`EQU
 (0x3 << 8Ë;- (
TC
Ë
Exã∫Æ
 
Evít
 
Edge
 
Sñe˘i⁄


3380 
AT91C_TC_EEVTEDG_NONE
 
	`EQU
 (0x0 << 8Ë;- (
TC
Ë
Edge
: 
N⁄e


3381 
AT91C_TC_EEVTEDG_RISING
 
	`EQU
 (0x1 << 8Ë;- (
TC
Ë
Edge
: 
risög
 
edge


3382 
AT91C_TC_EEVTEDG_FALLING
 
	`EQU
 (0x2 << 8Ë;- (
TC
Ë
Edge
: 
ÁŒög
 
edge


3383 
AT91C_TC_EEVTEDG_BOTH
 
	`EQU
 (0x3 << 8Ë;- (
TC
Ë
Edge
: 
óch
 
edge


3384 
AT91C_TC_EEVT
 
	`EQU
 (0x3 << 10Ë;- (
TC
Ë
Exã∫Æ
 
Evít
 
Sñe˘i⁄


3385 
AT91C_TC_EEVT_TIOB
 
	`EQU
 (0x0 << 10Ë;- (
TC
Ë
Sig«l
 
£À˘ed
 
as
 
exã∫Æ
 
evít
: 
TIOB
 TIOB 
dúe˘i⁄
: 
öput


3386 
AT91C_TC_EEVT_XC0
 
	`EQU
 (0x1 << 10Ë;- (
TC
Ë
Sig«l
 
£À˘ed
 
as
 
exã∫Æ
 
evít
: 
XC0
 
TIOB
 
dúe˘i⁄
: 
ouçut


3387 
AT91C_TC_EEVT_XC1
 
	`EQU
 (0x2 << 10Ë;- (
TC
Ë
Sig«l
 
£À˘ed
 
as
 
exã∫Æ
 
evít
: 
XC1
 
TIOB
 
dúe˘i⁄
: 
ouçut


3388 
AT91C_TC_EEVT_XC2
 
	`EQU
 (0x3 << 10Ë;- (
TC
Ë
Sig«l
 
£À˘ed
 
as
 
exã∫Æ
 
evít
: 
XC2
 
TIOB
 
dúe˘i⁄
: 
ouçut


3389 
AT91C_TC_ABETRG
 
	`EQU
 (0x1 << 10Ë;- (
TC
Ë
TIOA
 
‹
 
TIOB
 
Exã∫Æ
 
Triggî
 
Sñe˘i⁄


3390 
AT91C_TC_ENETRG
 
	`EQU
 (0x1 << 12Ë;- (
TC
Ë
Exã∫Æ
 
Evít
 
Triggî
 
íabÀ


3391 
AT91C_TC_WAVESEL
 
	`EQU
 (0x3 << 13Ë;- (
TC
Ë
Wavef‹m
 
Sñe˘i⁄


3392 
AT91C_TC_WAVESEL_UP
 
	`EQU
 (0x0 << 13Ë;- (
TC
Ë
UP
 
mode
 
wôhout
 
©om©ic
 
åiggî
 
⁄
 
RC
 
Com∑ª


3393 
AT91C_TC_WAVESEL_UPDOWN
 
	`EQU
 (0x1 << 13Ë;- (
TC
Ë
UPDOWN
 
mode
 
wôhout
 
autom©ic
 
åiggî
 
⁄
 
RC
 
Com∑ª


3394 
AT91C_TC_WAVESEL_UP_AUTO
 
	`EQU
 (0x2 << 13Ë;- (
TC
Ë
UP
 
mode
 
wôh
 
autom©ic
 
åiggî
 
⁄
 
RC
 
Com∑ª


3395 
AT91C_TC_WAVESEL_UPDOWN_AUTO
 
	`EQU
 (0x3 << 13Ë;- (
TC
Ë
UPDOWN
 
mode
 
wôh
 
autom©ic
 
åiggî
 
⁄
 
RC
 
Com∑ª


3396 
AT91C_TC_CPCTRG
 
	`EQU
 (0x1 << 14Ë;- (
TC
Ë
RC
 
Com∑ª
 
Triggî
 
E«bÀ


3397 
AT91C_TC_WAVE
 
	`EQU
 (0x1 << 15Ë;- (
TC
)

3398 
AT91C_TC_ACPA
 
	`EQU
 (0x3 << 16Ë;- (
TC
Ë
RA
 
Com∑ª
 
Ef„˘
 
⁄
 
TIOA


3399 
AT91C_TC_ACPA_NONE
 
	`EQU
 (0x0 << 16Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3400 
AT91C_TC_ACPA_SET
 
	`EQU
 (0x1 << 16Ë;- (
TC
Ë
Ef„˘
: 
£t


3401 
AT91C_TC_ACPA_CLEAR
 
	`EQU
 (0x2 << 16Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3402 
AT91C_TC_ACPA_TOGGLE
 
	`EQU
 (0x3 << 16Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3403 
AT91C_TC_LDRA
 
	`EQU
 (0x3 << 16Ë;- (
TC
Ë
RA
 
Lﬂdög
 
Sñe˘i⁄


3404 
AT91C_TC_LDRA_NONE
 
	`EQU
 (0x0 << 16Ë;- (
TC
Ë
Edge
: 
N⁄e


3405 
AT91C_TC_LDRA_RISING
 
	`EQU
 (0x1 << 16Ë;- (
TC
Ë
Edge
: 
risög
 
edge
 
of
 
TIOA


3406 
AT91C_TC_LDRA_FALLING
 
	`EQU
 (0x2 << 16Ë;- (
TC
Ë
Edge
: 
ÁŒög
 
edge
 
of
 
TIOA


3407 
AT91C_TC_LDRA_BOTH
 
	`EQU
 (0x3 << 16Ë;- (
TC
Ë
Edge
: 
óch
 
edge
 
of
 
TIOA


3408 
AT91C_TC_ACPC
 
	`EQU
 (0x3 << 18Ë;- (
TC
Ë
RC
 
Com∑ª
 
Ef„˘
 
⁄
 
TIOA


3409 
AT91C_TC_ACPC_NONE
 
	`EQU
 (0x0 << 18Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3410 
AT91C_TC_ACPC_SET
 
	`EQU
 (0x1 << 18Ë;- (
TC
Ë
Ef„˘
: 
£t


3411 
AT91C_TC_ACPC_CLEAR
 
	`EQU
 (0x2 << 18Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3412 
AT91C_TC_ACPC_TOGGLE
 
	`EQU
 (0x3 << 18Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3413 
AT91C_TC_LDRB
 
	`EQU
 (0x3 << 18Ë;- (
TC
Ë
RB
 
Lﬂdög
 
Sñe˘i⁄


3414 
AT91C_TC_LDRB_NONE
 
	`EQU
 (0x0 << 18Ë;- (
TC
Ë
Edge
: 
N⁄e


3415 
AT91C_TC_LDRB_RISING
 
	`EQU
 (0x1 << 18Ë;- (
TC
Ë
Edge
: 
risög
 
edge
 
of
 
TIOA


3416 
AT91C_TC_LDRB_FALLING
 
	`EQU
 (0x2 << 18Ë;- (
TC
Ë
Edge
: 
ÁŒög
 
edge
 
of
 
TIOA


3417 
AT91C_TC_LDRB_BOTH
 
	`EQU
 (0x3 << 18Ë;- (
TC
Ë
Edge
: 
óch
 
edge
 
of
 
TIOA


3418 
AT91C_TC_AEEVT
 
	`EQU
 (0x3 << 20Ë;- (
TC
Ë
Exã∫Æ
 
Evít
 
Ef„˘
 
⁄
 
TIOA


3419 
AT91C_TC_AEEVT_NONE
 
	`EQU
 (0x0 << 20Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3420 
AT91C_TC_AEEVT_SET
 
	`EQU
 (0x1 << 20Ë;- (
TC
Ë
Ef„˘
: 
£t


3421 
AT91C_TC_AEEVT_CLEAR
 
	`EQU
 (0x2 << 20Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3422 
AT91C_TC_AEEVT_TOGGLE
 
	`EQU
 (0x3 << 20Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3423 
AT91C_TC_ASWTRG
 
	`EQU
 (0x3 << 22Ë;- (
TC
Ë
So·w¨e
 
Triggî
 
Ef„˘
 
⁄
 
TIOA


3424 
AT91C_TC_ASWTRG_NONE
 
	`EQU
 (0x0 << 22Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3425 
AT91C_TC_ASWTRG_SET
 
	`EQU
 (0x1 << 22Ë;- (
TC
Ë
Ef„˘
: 
£t


3426 
AT91C_TC_ASWTRG_CLEAR
 
	`EQU
 (0x2 << 22Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3427 
AT91C_TC_ASWTRG_TOGGLE
 
	`EQU
 (0x3 << 22Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3428 
AT91C_TC_BCPB
 
	`EQU
 (0x3 << 24Ë;- (
TC
Ë
RB
 
Com∑ª
 
Ef„˘
 
⁄
 
TIOB


3429 
AT91C_TC_BCPB_NONE
 
	`EQU
 (0x0 << 24Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3430 
AT91C_TC_BCPB_SET
 
	`EQU
 (0x1 << 24Ë;- (
TC
Ë
Ef„˘
: 
£t


3431 
AT91C_TC_BCPB_CLEAR
 
	`EQU
 (0x2 << 24Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3432 
AT91C_TC_BCPB_TOGGLE
 
	`EQU
 (0x3 << 24Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3433 
AT91C_TC_BCPC
 
	`EQU
 (0x3 << 26Ë;- (
TC
Ë
RC
 
Com∑ª
 
Ef„˘
 
⁄
 
TIOB


3434 
AT91C_TC_BCPC_NONE
 
	`EQU
 (0x0 << 26Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3435 
AT91C_TC_BCPC_SET
 
	`EQU
 (0x1 << 26Ë;- (
TC
Ë
Ef„˘
: 
£t


3436 
AT91C_TC_BCPC_CLEAR
 
	`EQU
 (0x2 << 26Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3437 
AT91C_TC_BCPC_TOGGLE
 
	`EQU
 (0x3 << 26Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3438 
AT91C_TC_BEEVT
 
	`EQU
 (0x3 << 28Ë;- (
TC
Ë
Exã∫Æ
 
Evít
 
Ef„˘
 
⁄
 
TIOB


3439 
AT91C_TC_BEEVT_NONE
 
	`EQU
 (0x0 << 28Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3440 
AT91C_TC_BEEVT_SET
 
	`EQU
 (0x1 << 28Ë;- (
TC
Ë
Ef„˘
: 
£t


3441 
AT91C_TC_BEEVT_CLEAR
 
	`EQU
 (0x2 << 28Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3442 
AT91C_TC_BEEVT_TOGGLE
 
	`EQU
 (0x3 << 28Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3443 
AT91C_TC_BSWTRG
 
	`EQU
 (0x3 << 30Ë;- (
TC
Ë
So·w¨e
 
Triggî
 
Ef„˘
 
⁄
 
TIOB


3444 
AT91C_TC_BSWTRG_NONE
 
	`EQU
 (0x0 << 30Ë;- (
TC
Ë
Ef„˘
: 
n⁄e


3445 
AT91C_TC_BSWTRG_SET
 
	`EQU
 (0x1 << 30Ë;- (
TC
Ë
Ef„˘
: 
£t


3446 
AT91C_TC_BSWTRG_CLEAR
 
	`EQU
 (0x2 << 30Ë;- (
TC
Ë
Ef„˘
: 
˛ór


3447 
AT91C_TC_BSWTRG_TOGGLE
 
	`EQU
 (0x3 << 30Ë;- (
TC
Ë
Ef„˘
: 
toggÀ


3449 
AT91C_TC_COVFS
 
	`EQU
 (0x1 << 0Ë;- (
TC
Ë
Cou¡î
 
OvîÊow


3450 
AT91C_TC_LOVRS
 
	`EQU
 (0x1 << 1Ë;- (
TC
Ë
Lﬂd
 
Ovîrun


3451 
AT91C_TC_CPAS
 
	`EQU
 (0x1 << 2Ë;- (
TC
Ë
RA
 
Com∑ª


3452 
AT91C_TC_CPBS
 
	`EQU
 (0x1 << 3Ë;- (
TC
Ë
RB
 
Com∑ª


3453 
AT91C_TC_CPCS
 
	`EQU
 (0x1 << 4Ë;- (
TC
Ë
RC
 
Com∑ª


3454 
AT91C_TC_LDRAS
 
	`EQU
 (0x1 << 5Ë;- (
TC
Ë
RA
 
Lﬂdög


3455 
AT91C_TC_LDRBS
 
	`EQU
 (0x1 << 6Ë;- (
TC
Ë
RB
 
Lﬂdög


3456 
AT91C_TC_ETRGS
 
	`EQU
 (0x1 << 7Ë;- (
TC
Ë
Exã∫Æ
 
Triggî


3457 
AT91C_TC_CLKSTA
 
	`EQU
 (0x1 << 16Ë;- (
TC
Ë
Clock
 
E«blög


3458 
AT91C_TC_MTIOA
 
	`EQU
 (0x1 << 17Ë;- (
TC
Ë
TIOA
 
Múr‹


3459 
AT91C_TC_MTIOB
 
	`EQU
 (0x1 << 18Ë;- (
TC
Ë
TIOA
 
Múr‹


3468 
AT91C_TCB_SYNC
 
	`EQU
 (0x1 << 0Ë;- (
TCB
Ë
Synchro
 
Comm™d


3470 
AT91C_TCB_TC0XC0S
 
	`EQU
 (0x3 << 0Ë;- (
TCB
Ë
Exã∫Æ
 
Clock
 
Sig«l
 0 
Sñe˘i⁄


3471 
AT91C_TCB_TC0XC0S_TCLK0
 
	`EQU
 (0x0Ë;- (
TCB
Ë
TCLK0
 
c⁄√˘ed
 
to
 
XC0


3472 
AT91C_TCB_TC0XC0S_NONE
 
	`EQU
 (0x1Ë;- (
TCB
Ë
N⁄e
 
sig«l
 
c⁄√˘ed
 
to
 
XC0


3473 
AT91C_TCB_TC0XC0S_TIOA1
 
	`EQU
 (0x2Ë;- (
TCB
Ë
TIOA1
 
c⁄√˘ed
 
to
 
XC0


3474 
AT91C_TCB_TC0XC0S_TIOA2
 
	`EQU
 (0x3Ë;- (
TCB
Ë
TIOA2
 
c⁄√˘ed
 
to
 
XC0


3475 
AT91C_TCB_TC1XC1S
 
	`EQU
 (0x3 << 2Ë;- (
TCB
Ë
Exã∫Æ
 
Clock
 
Sig«l
 1 
Sñe˘i⁄


3476 
AT91C_TCB_TC1XC1S_TCLK1
 
	`EQU
 (0x0 << 2Ë;- (
TCB
Ë
TCLK1
 
c⁄√˘ed
 
to
 
XC1


3477 
AT91C_TCB_TC1XC1S_NONE
 
	`EQU
 (0x1 << 2Ë;- (
TCB
Ë
N⁄e
 
sig«l
 
c⁄√˘ed
 
to
 
XC1


3478 
AT91C_TCB_TC1XC1S_TIOA0
 
	`EQU
 (0x2 << 2Ë;- (
TCB
Ë
TIOA0
 
c⁄√˘ed
 
to
 
XC1


3479 
AT91C_TCB_TC1XC1S_TIOA2
 
	`EQU
 (0x3 << 2Ë;- (
TCB
Ë
TIOA2
 
c⁄√˘ed
 
to
 
XC1


3480 
AT91C_TCB_TC2XC2S
 
	`EQU
 (0x3 << 4Ë;- (
TCB
Ë
Exã∫Æ
 
Clock
 
Sig«l
 2 
Sñe˘i⁄


3481 
AT91C_TCB_TC2XC2S_TCLK2
 
	`EQU
 (0x0 << 4Ë;- (
TCB
Ë
TCLK2
 
c⁄√˘ed
 
to
 
XC2


3482 
AT91C_TCB_TC2XC2S_NONE
 
	`EQU
 (0x1 << 4Ë;- (
TCB
Ë
N⁄e
 
sig«l
 
c⁄√˘ed
 
to
 
XC2


3483 
AT91C_TCB_TC2XC2S_TIOA0
 
	`EQU
 (0x2 << 4Ë;- (
TCB
Ë
TIOA0
 
c⁄√˘ed
 
to
 
XC2


3484 
AT91C_TCB_TC2XC2S_TIOA1
 
	`EQU
 (0x3 << 4Ë;- (
TCB
Ë
TIOA2
 
c⁄√˘ed
 
to
 
XC2


3490 
AT91C_CAN_MTIMEMARK
 
	`EQU
 (0xFFFF << 0Ë;- (
CAN_MB
Ë
Maûbox
 
Timem¨k


3491 
AT91C_CAN_PRIOR
 
	`EQU
 (0xF << 16Ë;- (
CAN_MB
Ë
Maûbox
 
Pri‹ôy


3492 
AT91C_CAN_MOT
 
	`EQU
 (0x7 << 24Ë;- (
CAN_MB
Ë
Maûbox
 
Obje˘
 
Ty≥


3493 
AT91C_CAN_MOT_DIS
 
	`EQU
 (0x0 << 24Ë;- (
CAN_MB
)

3494 
AT91C_CAN_MOT_RX
 
	`EQU
 (0x1 << 24Ë;- (
CAN_MB
)

3495 
AT91C_CAN_MOT_RXOVERWRITE
 
	`EQU
 (0x2 << 24Ë;- (
CAN_MB
)

3496 
AT91C_CAN_MOT_TX
 
	`EQU
 (0x3 << 24Ë;- (
CAN_MB
)

3497 
AT91C_CAN_MOT_CONSUMER
 
	`EQU
 (0x4 << 24Ë;- (
CAN_MB
)

3498 
AT91C_CAN_MOT_PRODUCER
 
	`EQU
 (0x5 << 24Ë;- (
CAN_MB
)

3500 
AT91C_CAN_MIDvB
 
	`EQU
 (0x3FFFF << 0Ë;- (
CAN_MB
Ë
Com∂emíèry
 
bôs
 
idítifõr
 
ö
 
exãnded
 
mode


3501 
AT91C_CAN_MIDvA
 
	`EQU
 (0x7FF << 18Ë;- (
CAN_MB
Ë
Idítifõr
 
°™d¨d
 
‰ame
 
mode


3502 
AT91C_CAN_MIDE
 
	`EQU
 (0x1 << 29Ë;- (
CAN_MB
Ë
Idítifõr
 
Vîsi⁄


3506 
AT91C_CAN_MTIMESTAMP
 
	`EQU
 (0xFFFF << 0Ë;- (
CAN_MB
Ë
Timî
 
VÆue


3507 
AT91C_CAN_MDLC
 
	`EQU
 (0xF << 16Ë;- (
CAN_MB
Ë
Maûbox
 
D©a
 
Lígth
 
Code


3508 
AT91C_CAN_MRTR
 
	`EQU
 (0x1 << 20Ë;- (
CAN_MB
Ë
Maûbox
 
RemŸe
 
Tønsmissi⁄
 
Reque°


3509 
AT91C_CAN_MABT
 
	`EQU
 (0x1 << 22Ë;- (
CAN_MB
Ë
Maûbox
 
Mesßge
 
Ab‹t


3510 
AT91C_CAN_MRDY
 
	`EQU
 (0x1 << 23Ë;- (
CAN_MB
Ë
Maûbox
 
Ródy


3511 
AT91C_CAN_MMI
 
	`EQU
 (0x1 << 24Ë;- (
CAN_MB
Ë
Maûbox
 
Mesßge
 
Ign‹ed


3515 
AT91C_CAN_MACR
 
	`EQU
 (0x1 << 22Ë;- (
CAN_MB
Ë
Ab‹t
 
Reque°
 
Maûbox


3516 
AT91C_CAN_MTCR
 
	`EQU
 (0x1 << 23Ë;- (
CAN_MB
Ë
Maûbox
 
Tøns„r
 
Comm™d


3522 
AT91C_CAN_CANEN
 
	`EQU
 (0x1 << 0Ë;- (
CAN
ËCAN 
C⁄åﬁÀr
 
E«bÀ


3523 
AT91C_CAN_LPM
 
	`EQU
 (0x1 << 1Ë;- (
CAN
Ë
DißbÀ
/
E«bÀ
 
Low
 
Powî
 
Mode


3524 
AT91C_CAN_ABM
 
	`EQU
 (0x1 << 2Ë;- (
CAN
Ë
DißbÀ
/
E«bÀ
 
Autobaud
/
Li°í
 
Mode


3525 
AT91C_CAN_OVL
 
	`EQU
 (0x1 << 3Ë;- (
CAN
Ë
DißbÀ
/
E«bÀ
 
Ovîlﬂd
 
Føme


3526 
AT91C_CAN_TEOF
 
	`EQU
 (0x1 << 4Ë;- (
CAN
Ë
Time
 
Sèmp
 
mesßges
 
©
 
óch
 
íd
 
of
 
Føme


3527 
AT91C_CAN_TTM
 
	`EQU
 (0x1 << 5Ë;- (
CAN
Ë
DißbÀ
/
E«bÀ
 
Time
 
Triggî
 
Mode


3528 
AT91C_CAN_TIMFRZ
 
	`EQU
 (0x1 << 6Ë;- (
CAN
Ë
E«bÀ
 
Timî
 
Fªeze


3529 
AT91C_CAN_DRPT
 
	`EQU
 (0x1 << 7Ë;- (
CAN
Ë
DißbÀ
 
Rïót


3531 
AT91C_CAN_MB0
 
	`EQU
 (0x1 << 0Ë;- (
CAN
Ë
Maûbox
 0 
Fœg


3532 
AT91C_CAN_MB1
 
	`EQU
 (0x1 << 1Ë;- (
CAN
Ë
Maûbox
 1 
Fœg


3533 
AT91C_CAN_MB2
 
	`EQU
 (0x1 << 2Ë;- (
CAN
Ë
Maûbox
 2 
Fœg


3534 
AT91C_CAN_MB3
 
	`EQU
 (0x1 << 3Ë;- (
CAN
Ë
Maûbox
 3 
Fœg


3535 
AT91C_CAN_MB4
 
	`EQU
 (0x1 << 4Ë;- (
CAN
Ë
Maûbox
 4 
Fœg


3536 
AT91C_CAN_MB5
 
	`EQU
 (0x1 << 5Ë;- (
CAN
Ë
Maûbox
 5 
Fœg


3537 
AT91C_CAN_MB6
 
	`EQU
 (0x1 << 6Ë;- (
CAN
Ë
Maûbox
 6 
Fœg


3538 
AT91C_CAN_MB7
 
	`EQU
 (0x1 << 7Ë;- (
CAN
Ë
Maûbox
 7 
Fœg


3539 
AT91C_CAN_MB8
 
	`EQU
 (0x1 << 8Ë;- (
CAN
Ë
Maûbox
 8 
Fœg


3540 
AT91C_CAN_MB9
 
	`EQU
 (0x1 << 9Ë;- (
CAN
Ë
Maûbox
 9 
Fœg


3541 
AT91C_CAN_MB10
 
	`EQU
 (0x1 << 10Ë;- (
CAN
Ë
Maûbox
 10 
Fœg


3542 
AT91C_CAN_MB11
 
	`EQU
 (0x1 << 11Ë;- (
CAN
Ë
Maûbox
 11 
Fœg


3543 
AT91C_CAN_MB12
 
	`EQU
 (0x1 << 12Ë;- (
CAN
Ë
Maûbox
 12 
Fœg


3544 
AT91C_CAN_MB13
 
	`EQU
 (0x1 << 13Ë;- (
CAN
Ë
Maûbox
 13 
Fœg


3545 
AT91C_CAN_MB14
 
	`EQU
 (0x1 << 14Ë;- (
CAN
Ë
Maûbox
 14 
Fœg


3546 
AT91C_CAN_MB15
 
	`EQU
 (0x1 << 15Ë;- (
CAN
Ë
Maûbox
 15 
Fœg


3547 
AT91C_CAN_ERRA
 
	`EQU
 (0x1 << 16Ë;- (
CAN
Ë
Eº‹
 
A˘ive
 
Mode
 
Fœg


3548 
AT91C_CAN_WARN
 
	`EQU
 (0x1 << 17Ë;- (
CAN
Ë
W¨nög
 
Limô
 
Fœg


3549 
AT91C_CAN_ERRP
 
	`EQU
 (0x1 << 18Ë;- (
CAN
Ë
Eº‹
 
Passive
 
Mode
 
Fœg


3550 
AT91C_CAN_BOFF
 
	`EQU
 (0x1 << 19Ë;- (
CAN
Ë
Bus
 
Off
 
Mode
 
Fœg


3551 
AT91C_CAN_SLEEP
 
	`EQU
 (0x1 << 20Ë;- (
CAN
Ë
SÀï
 
Fœg


3552 
AT91C_CAN_WAKEUP
 
	`EQU
 (0x1 << 21Ë;- (
CAN
Ë
Wakeup
 
Fœg


3553 
AT91C_CAN_TOVF
 
	`EQU
 (0x1 << 22Ë;- (
CAN
Ë
Timî
 
OvîÊow
 
Fœg


3554 
AT91C_CAN_TSTP
 
	`EQU
 (0x1 << 23Ë;- (
CAN
Ë
Time°amp
 
Fœg


3555 
AT91C_CAN_CERR
 
	`EQU
 (0x1 << 24Ë;- (
CAN
Ë
CRC
 
Eº‹


3556 
AT91C_CAN_SERR
 
	`EQU
 (0x1 << 25Ë;- (
CAN
Ë
Stuffög
 
Eº‹


3557 
AT91C_CAN_AERR
 
	`EQU
 (0x1 << 26Ë;- (
CAN
Ë
AcknowÀdgmít
 
Eº‹


3558 
AT91C_CAN_FERR
 
	`EQU
 (0x1 << 27Ë;- (
CAN
Ë
F‹m
 
Eº‹


3559 
AT91C_CAN_BERR
 
	`EQU
 (0x1 << 28Ë;- (
CAN
Ë
Bô
 
Eº‹


3563 
AT91C_CAN_RBSY
 
	`EQU
 (0x1 << 29Ë;- (
CAN
Ë
Re˚ivî
 
Busy


3564 
AT91C_CAN_TBSY
 
	`EQU
 (0x1 << 30Ë;- (
CAN
Ë
Tønsmôãr
 
Busy


3565 
AT91C_CAN_OVLY
 
	`EQU
 (0x1 << 31Ë;- (
CAN
Ë
Ovîlﬂd
 
Busy


3567 
AT91C_CAN_PHASE2
 
	`EQU
 (0x7 << 0Ë;- (
CAN
Ë
Pha£
 2 
£gmít


3568 
AT91C_CAN_PHASE1
 
	`EQU
 (0x7 << 4Ë;- (
CAN
Ë
Pha£
 1 
£gmít


3569 
AT91C_CAN_PROPAG
 
	`EQU
 (0x7 << 8Ë;- (
CAN
Ë
Progømm©i⁄
 
time
 
£gmít


3570 
AT91C_CAN_SYNC
 
	`EQU
 (0x3 << 12Ë;- (
CAN
Ë
Re
-
synchr⁄iz©i⁄
 
jump
 
width
 
£gmít


3571 
AT91C_CAN_BRP
 
	`EQU
 (0x7F << 16Ë;- (
CAN
Ë
Baudøã
 
PªsˇÀr


3572 
AT91C_CAN_SMP
 
	`EQU
 (0x1 << 24Ë;- (
CAN
Ë
Sam∂ög
 
mode


3574 
AT91C_CAN_TIMER
 
	`EQU
 (0xFFFF << 0Ë;- (
CAN
Ë
Timî
 
fõld


3577 
AT91C_CAN_REC
 
	`EQU
 (0xFF << 0Ë;- (
CAN
Ë
Re˚ive
 
Eº‹
 
Cou¡î


3578 
AT91C_CAN_TEC
 
	`EQU
 (0xFF << 16Ë;- (
CAN
Ë
Tønsmô
 
Eº‹
 
Cou¡î


3580 
AT91C_CAN_TIMRST
 
	`EQU
 (0x1 << 31Ë;- (
CAN
Ë
Timî
 
Re£t
 
Fõld


3587 
AT91C_EMAC_LB
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
Ë
Lo›back
. 
O±i⁄Æ
. 
Whí
 
£t
, 
lo›back
 
sig«l
 
is
 
©
 
high
 
Àvñ
.

3588 
AT91C_EMAC_LLB
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
Ë
Lo›back
 
loˇl
.

3589 
AT91C_EMAC_RE
 
	`EQU
 (0x1 << 2Ë;- (
EMAC
Ë
Re˚ive
 
íabÀ
.

3590 
AT91C_EMAC_TE
 
	`EQU
 (0x1 << 3Ë;- (
EMAC
Ë
Tønsmô
 
íabÀ
.

3591 
AT91C_EMAC_MPE
 
	`EQU
 (0x1 << 4Ë;- (
EMAC
Ë
M™agemít
 
p‹t
 
íabÀ
.

3592 
AT91C_EMAC_CLRSTAT
 
	`EQU
 (0x1 << 5Ë;- (
EMAC
Ë
CÀ¨
 
°©i°ics
 
ªgi°îs
.

3593 
AT91C_EMAC_INCSTAT
 
	`EQU
 (0x1 << 6Ë;- (
EMAC
Ë
In¸emít
 
°©i°ics
 
ªgi°îs
.

3594 
AT91C_EMAC_WESTAT
 
	`EQU
 (0x1 << 7Ë;- (
EMAC
Ë
Wrôe
 
íabÀ
 
°©i°ics
 
ªgi°îs
.

3595 
AT91C_EMAC_BP
 
	`EQU
 (0x1 << 8Ë;- (
EMAC
Ë
Back
 
¥essuª
.

3596 
AT91C_EMAC_TSTART
 
	`EQU
 (0x1 << 9Ë;- (
EMAC
Ë
Sèπ
 
Tønsmissi⁄
.

3597 
AT91C_EMAC_THALT
 
	`EQU
 (0x1 << 10Ë;- (
EMAC
Ë
Tønsmissi⁄
 
HÆt
.

3598 
AT91C_EMAC_TPFR
 
	`EQU
 (0x1 << 11Ë;- (
EMAC
Ë
Tønsmô
 
∑u£
 
‰ame


3599 
AT91C_EMAC_TZQ
 
	`EQU
 (0x1 << 12Ë;- (
EMAC
Ë
Tønsmô
 
zîo
 
qu™tum
 
∑u£
 
‰ame


3601 
AT91C_EMAC_SPD
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
Ë
S≥ed
.

3602 
AT91C_EMAC_FD
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
Ë
FuŒ
 
du∂ex
.

3603 
AT91C_EMAC_JFRAME
 
	`EQU
 (0x1 << 3Ë;- (
EMAC
Ë
Jumbo
 
Fømes
.

3604 
AT91C_EMAC_CAF
 
	`EQU
 (0x1 << 4Ë;- (
EMAC
Ë
C›y
 
Æl
 
‰ames
.

3605 
AT91C_EMAC_NBC
 
	`EQU
 (0x1 << 5Ë;- (
EMAC
Ë
No
 
brﬂdˇ°
.

3606 
AT91C_EMAC_MTI
 
	`EQU
 (0x1 << 6Ë;- (
EMAC
Ë
Mu…iˇ°
 
hash
 
evít
 
íabÀ


3607 
AT91C_EMAC_UNI
 
	`EQU
 (0x1 << 7Ë;- (
EMAC
Ë
Uniˇ°
 
hash
 
íabÀ
.

3608 
AT91C_EMAC_BIG
 
	`EQU
 (0x1 << 8Ë;- (
EMAC
Ë
Re˚ive
 1522 
byãs
.

3609 
AT91C_EMAC_EAE
 
	`EQU
 (0x1 << 9Ë;- (
EMAC
Ë
Exã∫Æ
 
addªss
 
m©ch
 
íabÀ
.

3610 
AT91C_EMAC_CLK
 
	`EQU
 (0x3 << 10Ë;- (
EMAC
)

3611 
AT91C_EMAC_CLK_HCLK_8
 
	`EQU
 (0x0 << 10Ë;- (
EMAC
Ë
HCLK
 
divided
 
by
 8

3612 
AT91C_EMAC_CLK_HCLK_16
 
	`EQU
 (0x1 << 10Ë;- (
EMAC
Ë
HCLK
 
divided
 
by
 16

3613 
AT91C_EMAC_CLK_HCLK_32
 
	`EQU
 (0x2 << 10Ë;- (
EMAC
Ë
HCLK
 
divided
 
by
 32

3614 
AT91C_EMAC_CLK_HCLK_64
 
	`EQU
 (0x3 << 10Ë;- (
EMAC
Ë
HCLK
 
divided
 
by
 64

3615 
AT91C_EMAC_RTY
 
	`EQU
 (0x1 << 12Ë;- (
EMAC
)

3616 
AT91C_EMAC_PAE
 
	`EQU
 (0x1 << 13Ë;- (
EMAC
)

3617 
AT91C_EMAC_RBOF
 
	`EQU
 (0x3 << 14Ë;- (
EMAC
)

3618 
AT91C_EMAC_RBOF_OFFSET_0
 
	`EQU
 (0x0 << 14Ë;- (
EMAC
Ë
no
 
off£t
 
‰om
 
°¨t
 
of
 
ª˚ive
 
buf„r


3619 
AT91C_EMAC_RBOF_OFFSET_1
 
	`EQU
 (0x1 << 14Ë;- (
EMAC
Ë
⁄e
 
byã
 
off£t
 
‰om
 
°¨t
 
of
 
ª˚ive
 
buf„r


3620 
AT91C_EMAC_RBOF_OFFSET_2
 
	`EQU
 (0x2 << 14Ë;- (
EMAC
Ë
two
 
byãs
 
off£t
 
‰om
 
°¨t
 
of
 
ª˚ive
 
buf„r


3621 
AT91C_EMAC_RBOF_OFFSET_3
 
	`EQU
 (0x3 << 14Ë;- (
EMAC
Ë
thªe
 
byãs
 
off£t
 
‰om
 
°¨t
 
of
 
ª˚ive
 
buf„r


3622 
AT91C_EMAC_RLCE
 
	`EQU
 (0x1 << 16Ë;- (
EMAC
Ë
Re˚ive
 
Lígth
 
fõld
 
Checkög
 
E«bÀ


3623 
AT91C_EMAC_DRFCS
 
	`EQU
 (0x1 << 17Ë;- (
EMAC
Ë
Disˇrd
 
Re˚ive
 
FCS


3624 
AT91C_EMAC_EFRHD
 
	`EQU
 (0x1 << 18Ë;- (
EMAC
)

3625 
AT91C_EMAC_IRXFCS
 
	`EQU
 (0x1 << 19Ë;- (
EMAC
Ë
Ign‹e
 
RX
 
FCS


3627 
AT91C_EMAC_LINKR
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
)

3628 
AT91C_EMAC_MDIO
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
)

3629 
AT91C_EMAC_IDLE
 
	`EQU
 (0x1 << 2Ë;- (
EMAC
)

3631 
AT91C_EMAC_UBR
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
)

3632 
AT91C_EMAC_COL
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
)

3633 
AT91C_EMAC_RLES
 
	`EQU
 (0x1 << 2Ë;- (
EMAC
)

3634 
AT91C_EMAC_TGO
 
	`EQU
 (0x1 << 3Ë;- (
EMAC
Ë
Tønsmô
 
Go


3635 
AT91C_EMAC_BEX
 
	`EQU
 (0x1 << 4Ë;- (
EMAC
Ë
Buf„rs
 
exhau°ed
 
mid
 
‰ame


3636 
AT91C_EMAC_COMP
 
	`EQU
 (0x1 << 5Ë;- (
EMAC
)

3637 
AT91C_EMAC_UND
 
	`EQU
 (0x1 << 6Ë;- (
EMAC
)

3639 
AT91C_EMAC_BNA
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
)

3640 
AT91C_EMAC_REC
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
)

3641 
AT91C_EMAC_OVR
 
	`EQU
 (0x1 << 2Ë;- (
EMAC
)

3643 
AT91C_EMAC_MFD
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
)

3644 
AT91C_EMAC_RCOMP
 
	`EQU
 (0x1 << 1Ë;- (
EMAC
)

3645 
AT91C_EMAC_RXUBR
 
	`EQU
 (0x1 << 2Ë;- (
EMAC
)

3646 
AT91C_EMAC_TXUBR
 
	`EQU
 (0x1 << 3Ë;- (
EMAC
)

3647 
AT91C_EMAC_TUNDR
 
	`EQU
 (0x1 << 4Ë;- (
EMAC
)

3648 
AT91C_EMAC_RLEX
 
	`EQU
 (0x1 << 5Ë;- (
EMAC
)

3649 
AT91C_EMAC_TXERR
 
	`EQU
 (0x1 << 6Ë;- (
EMAC
)

3650 
AT91C_EMAC_TCOMP
 
	`EQU
 (0x1 << 7Ë;- (
EMAC
)

3651 
AT91C_EMAC_LINK
 
	`EQU
 (0x1 << 9Ë;- (
EMAC
)

3652 
AT91C_EMAC_ROVR
 
	`EQU
 (0x1 << 10Ë;- (
EMAC
)

3653 
AT91C_EMAC_HRESP
 
	`EQU
 (0x1 << 11Ë;- (
EMAC
)

3654 
AT91C_EMAC_PFRE
 
	`EQU
 (0x1 << 12Ë;- (
EMAC
)

3655 
AT91C_EMAC_PTZ
 
	`EQU
 (0x1 << 13Ë;- (
EMAC
)

3660 
AT91C_EMAC_DATA
 
	`EQU
 (0xFFFF << 0Ë;- (
EMAC
)

3661 
AT91C_EMAC_CODE
 
	`EQU
 (0x3 << 16Ë;- (
EMAC
)

3662 
AT91C_EMAC_REGA
 
	`EQU
 (0x1F << 18Ë;- (
EMAC
)

3663 
AT91C_EMAC_PHYA
 
	`EQU
 (0x1F << 23Ë;- (
EMAC
)

3664 
AT91C_EMAC_RW
 
	`EQU
 (0x3 << 28Ë;- (
EMAC
)

3665 
AT91C_EMAC_SOF
 
	`EQU
 (0x3 << 30Ë;- (
EMAC
)

3667 
AT91C_EMAC_RMII
 
	`EQU
 (0x1 << 0Ë;- (
EMAC
Ë
Redu˚
 
MII


3669 
AT91C_EMAC_IP
 
	`EQU
 (0xFFFF << 0Ë;- (
EMAC
Ë
ARP
 
ªque°
 
IP
 
addªss


3670 
AT91C_EMAC_MAG
 
	`EQU
 (0x1 << 16Ë;- (
EMAC
Ë
Magic
 
∑ckë
 
evít
 
íabÀ


3671 
AT91C_EMAC_ARP
 
	`EQU
 (0x1 << 17Ë;- (
EMAC
Ë
ARP
 
ªque°
 
evít
 
íabÀ


3672 
AT91C_EMAC_SA1
 
	`EQU
 (0x1 << 18Ë;- (
EMAC
Ë
S≥cific
 
addªss
 1 
evít
 
íabÀ


3674 
AT91C_EMAC_REVREF
 
	`EQU
 (0xFFFF << 0Ë;- (
EMAC
)

3675 
AT91C_EMAC_PARTREF
 
	`EQU
 (0xFFFF << 16Ë;- (
EMAC
)

3681 
AT91C_ADC_SWRST
 
	`EQU
 (0x1 << 0Ë;- (
ADC
Ë
So·w¨e
 
Re£t


3682 
AT91C_ADC_START
 
	`EQU
 (0x1 << 1Ë;- (
ADC
Ë
Sèπ
 
C⁄vîsi⁄


3684 
AT91C_ADC_TRGEN
 
	`EQU
 (0x1 << 0Ë;- (
ADC
Ë
Triggî
 
E«bÀ


3685 
AT91C_ADC_TRGEN_DIS
 
	`EQU
 (0x0Ë;- (
ADC
Ë
Hødw¨e
 
åiggîs
 
¨e
 
dißbÀd
. 
Sèπög
 
a
 
c⁄vîsi⁄
 
is
 
⁄ly
 
possibÀ
 
by
 
so·w¨e


3686 
AT91C_ADC_TRGEN_EN
 
	`EQU
 (0x1Ë;- (
ADC
Ë
H¨dw¨e
 
åiggî
 
£À˘ed
 
by
 
TRGSEL
 
fõld
 
is
 
íabÀd
.

3687 
AT91C_ADC_TRGSEL
 
	`EQU
 (0x7 << 1Ë;- (
ADC
Ë
Triggî
 
Sñe˘i⁄


3688 
AT91C_ADC_TRGSEL_TIOA0
 
	`EQU
 (0x0 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO0


3689 
AT91C_ADC_TRGSEL_TIOA1
 
	`EQU
 (0x1 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO1


3690 
AT91C_ADC_TRGSEL_TIOA2
 
	`EQU
 (0x2 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO2


3691 
AT91C_ADC_TRGSEL_TIOA3
 
	`EQU
 (0x3 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO3


3692 
AT91C_ADC_TRGSEL_TIOA4
 
	`EQU
 (0x4 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO4


3693 
AT91C_ADC_TRGSEL_TIOA5
 
	`EQU
 (0x5 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
TIAO5


3694 
AT91C_ADC_TRGSEL_EXT
 
	`EQU
 (0x6 << 1Ë;- (
ADC
Ë
Sñe˘ed
 
TRGSEL
 = 
Exã∫Æ
 
Triggî


3695 
AT91C_ADC_LOWRES
 
	`EQU
 (0x1 << 4Ë;- (
ADC
Ë
Resﬁuti⁄
.

3696 
AT91C_ADC_LOWRES_10_BIT
 
	`EQU
 (0x0 << 4Ë;- (
ADC
Ë10-
bô
 
ªsﬁuti⁄


3697 
AT91C_ADC_LOWRES_8_BIT
 
	`EQU
 (0x1 << 4Ë;- (
ADC
Ë8-
bô
 
ªsﬁuti⁄


3698 
AT91C_ADC_SLEEP
 
	`EQU
 (0x1 << 5Ë;- (
ADC
Ë
SÀï
 
Mode


3699 
AT91C_ADC_SLEEP_NORMAL_MODE
 
	`EQU
 (0x0 << 5Ë;- (
ADC
Ë
N‹mÆ
 
Mode


3700 
AT91C_ADC_SLEEP_MODE
 
	`EQU
 (0x1 << 5Ë;- (
ADC
Ë
SÀï
 
Mode


3701 
AT91C_ADC_PRESCAL
 
	`EQU
 (0x3F << 8Ë;- (
ADC
Ë
PªsˇÀr
 
øã
 
£À˘i⁄


3702 
AT91C_ADC_STARTUP
 
	`EQU
 (0x1F << 16Ë;- (
ADC
Ë
Sèπup
 
Time


3703 
AT91C_ADC_SHTIM
 
	`EQU
 (0xF << 24Ë;- (
ADC
Ë
Sam∂e
 & 
Hﬁd
 
Time


3705 
AT91C_ADC_CH0
 
	`EQU
 (0x1 << 0Ë;- (
ADC
Ë
Ch™√l
 0

3706 
AT91C_ADC_CH1
 
	`EQU
 (0x1 << 1Ë;- (
ADC
Ë
Ch™√l
 1

3707 
AT91C_ADC_CH2
 
	`EQU
 (0x1 << 2Ë;- (
ADC
Ë
Ch™√l
 2

3708 
AT91C_ADC_CH3
 
	`EQU
 (0x1 << 3Ë;- (
ADC
Ë
Ch™√l
 3

3709 
AT91C_ADC_CH4
 
	`EQU
 (0x1 << 4Ë;- (
ADC
Ë
Ch™√l
 4

3710 
AT91C_ADC_CH5
 
	`EQU
 (0x1 << 5Ë;- (
ADC
Ë
Ch™√l
 5

3711 
AT91C_ADC_CH6
 
	`EQU
 (0x1 << 6Ë;- (
ADC
Ë
Ch™√l
 6

3712 
AT91C_ADC_CH7
 
	`EQU
 (0x1 << 7Ë;- (
ADC
Ë
Ch™√l
 7

3716 
AT91C_ADC_EOC0
 
	`EQU
 (0x1 << 0Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3717 
AT91C_ADC_EOC1
 
	`EQU
 (0x1 << 1Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3718 
AT91C_ADC_EOC2
 
	`EQU
 (0x1 << 2Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3719 
AT91C_ADC_EOC3
 
	`EQU
 (0x1 << 3Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3720 
AT91C_ADC_EOC4
 
	`EQU
 (0x1 << 4Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3721 
AT91C_ADC_EOC5
 
	`EQU
 (0x1 << 5Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3722 
AT91C_ADC_EOC6
 
	`EQU
 (0x1 << 6Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3723 
AT91C_ADC_EOC7
 
	`EQU
 (0x1 << 7Ë;- (
ADC
Ë
End
 
of
 
C⁄vîsi⁄


3724 
AT91C_ADC_OVRE0
 
	`EQU
 (0x1 << 8Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3725 
AT91C_ADC_OVRE1
 
	`EQU
 (0x1 << 9Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3726 
AT91C_ADC_OVRE2
 
	`EQU
 (0x1 << 10Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3727 
AT91C_ADC_OVRE3
 
	`EQU
 (0x1 << 11Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3728 
AT91C_ADC_OVRE4
 
	`EQU
 (0x1 << 12Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3729 
AT91C_ADC_OVRE5
 
	`EQU
 (0x1 << 13Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3730 
AT91C_ADC_OVRE6
 
	`EQU
 (0x1 << 14Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3731 
AT91C_ADC_OVRE7
 
	`EQU
 (0x1 << 15Ë;- (
ADC
Ë
Ovîrun
 
Eº‹


3732 
AT91C_ADC_DRDY
 
	`EQU
 (0x1 << 16Ë;- (
ADC
Ë
D©a
 
Ródy


3733 
AT91C_ADC_GOVRE
 
	`EQU
 (0x1 << 17Ë;- (
ADC
Ë
GíîÆ
 
Ovîrun


3734 
AT91C_ADC_ENDRX
 
	`EQU
 (0x1 << 18Ë;- (
ADC
Ë
End
 
of
 
Re˚ivî
 
Tøns„r


3735 
AT91C_ADC_RXBUFF
 
	`EQU
 (0x1 << 19Ë;- (
ADC
Ë
RXBUFF
 
I¡îru±


3737 
AT91C_ADC_LDATA
 
	`EQU
 (0x3FF << 0Ë;- (
ADC
Ë
La°
 
D©a
 
C⁄vîãd


3742 
AT91C_ADC_DATA
 
	`EQU
 (0x3FF << 0Ë;- (
ADC
Ë
C⁄vîãd
 
D©a


3755 
AT91C_AES_START
 
	`EQU
 (0x1 << 0Ë;- (
AES
Ë
Sèπs
 
Pro˚ssög


3756 
AT91C_AES_SWRST
 
	`EQU
 (0x1 << 8Ë;- (
AES
Ë
So·w¨e
 
Re£t


3757 
AT91C_AES_LOADSEED
 
	`EQU
 (0x1 << 16Ë;- (
AES
Ë
R™dom
 
Numbî
 
Gíî©‹
 
Sìd
 
Lﬂdög


3759 
AT91C_AES_CIPHER
 
	`EQU
 (0x1 << 0Ë;- (
AES
Ë
Pro˚ssög
 
Mode


3760 
AT91C_AES_PROCDLY
 
	`EQU
 (0xF << 4Ë;- (
AES
Ë
Pro˚ssög
 
Dñay


3761 
AT91C_AES_SMOD
 
	`EQU
 (0x3 << 8Ë;- (
AES
Ë
Sèπ
 
Mode


3762 
AT91C_AES_SMOD_MANUAL
 
	`EQU
 (0x0 << 8Ë;- (
AES
Ë
M™uÆ
 
Mode
: 
The
 
START
 
bô
 
ö
 
AES_CR
 
mu°
 
be
 
£t
 
to
 
begö
 
í¸y±i⁄
 
‹
 
de¸y±i⁄
.

3763 
AT91C_AES_SMOD_AUTO
 
	`EQU
 (0x1 << 8Ë;- (
AES
Ë
Auto
 
Mode
: 
no
 
a˘i⁄
 
ö
 
AES_CR
 
is
 
	`√˚sßry
 (
cf
 
d©ashìt
).

3764 
AT91C_AES_SMOD_PDC
 
	`EQU
 (0x2 << 8Ë;- (
AES
Ë
PDC
 
	`Mode
 (
cf
 
d©ashìt
).

3765 
AT91C_AES_OPMOD
 
	`EQU
 (0x7 << 12Ë;- (
AES
Ë
O≥øti⁄
 
Mode


3766 
AT91C_AES_OPMOD_ECB
 
	`EQU
 (0x0 << 12Ë;- (
AES
Ë
ECB
 
EÀ˘r⁄ic
 
CodeBook
 
mode
.

3767 
AT91C_AES_OPMOD_CBC
 
	`EQU
 (0x1 << 12Ë;- (
AES
Ë
CBC
 
Cùhî
 
Block
 
Chaöög
 
mode
.

3768 
AT91C_AES_OPMOD_OFB
 
	`EQU
 (0x2 << 12Ë;- (
AES
Ë
OFB
 
Ouçut
 
Fìdback
 
mode
.

3769 
AT91C_AES_OPMOD_CFB
 
	`EQU
 (0x3 << 12Ë;- (
AES
Ë
CFB
 
Cùhî
 
Fìdback
 
mode
.

3770 
AT91C_AES_OPMOD_CTR
 
	`EQU
 (0x4 << 12Ë;- (
AES
Ë
CTR
 
Cou¡î
 
mode
.

3771 
AT91C_AES_LOD
 
	`EQU
 (0x1 << 15Ë;- (
AES
Ë
La°
 
Ouçut
 
D©a
 
Mode


3772 
AT91C_AES_CFBS
 
	`EQU
 (0x7 << 16Ë;- (
AES
Ë
Cùhî
 
Fìdback
 
D©a
 
Size


3773 
AT91C_AES_CFBS_128_BIT
 
	`EQU
 (0x0 << 16Ë;- (
AES
Ë128-
bô
.

3774 
AT91C_AES_CFBS_64_BIT
 
	`EQU
 (0x1 << 16Ë;- (
AES
Ë64-
bô
.

3775 
AT91C_AES_CFBS_32_BIT
 
	`EQU
 (0x2 << 16Ë;- (
AES
Ë32-
bô
.

3776 
AT91C_AES_CFBS_16_BIT
 
	`EQU
 (0x3 << 16Ë;- (
AES
Ë16-
bô
.

3777 
AT91C_AES_CFBS_8_BIT
 
	`EQU
 (0x4 << 16Ë;- (
AES
Ë8-
bô
.

3778 
AT91C_AES_CKEY
 
	`EQU
 (0xF << 20Ë;- (
AES
Ë
Cou¡îmósuª
 
Key


3779 
AT91C_AES_CTYPE
 
	`EQU
 (0x1F << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
Ty≥


3780 
AT91C_AES_CTYPE_TYPE1_EN
 
	`EQU
 (0x1 << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
ty≥
 1 
is
 
íabÀd
.

3781 
AT91C_AES_CTYPE_TYPE2_EN
 
	`EQU
 (0x2 << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
ty≥
 2 
is
 
íabÀd
.

3782 
AT91C_AES_CTYPE_TYPE3_EN
 
	`EQU
 (0x4 << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
ty≥
 3 
is
 
íabÀd
.

3783 
AT91C_AES_CTYPE_TYPE4_EN
 
	`EQU
 (0x8 << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
ty≥
 4 
is
 
íabÀd
.

3784 
AT91C_AES_CTYPE_TYPE5_EN
 
	`EQU
 (0x10 << 24Ë;- (
AES
Ë
Cou¡îmósuª
 
ty≥
 5 
is
 
íabÀd
.

3786 
AT91C_AES_DATRDY
 
	`EQU
 (0x1 << 0Ë;- (
AES
Ë
DATRDY


3787 
AT91C_AES_ENDRX
 
	`EQU
 (0x1 << 1Ë;- (
AES
Ë
PDC
 
Ród
 
Buf„r
 
End


3788 
AT91C_AES_ENDTX
 
	`EQU
 (0x1 << 2Ë;- (
AES
Ë
PDC
 
Wrôe
 
Buf„r
 
End


3789 
AT91C_AES_RXBUFF
 
	`EQU
 (0x1 << 3Ë;- (
AES
Ë
PDC
 
Ród
 
Buf„r
 
FuŒ


3790 
AT91C_AES_TXBUFE
 
	`EQU
 (0x1 << 4Ë;- (
AES
Ë
PDC
 
Wrôe
 
Buf„r
 
Em±y


3791 
AT91C_AES_URAD
 
	`EQU
 (0x1 << 8Ë;- (
AES
Ë
Un•ecifõd
 
Regi°î
 
Ac˚ss
 
Dëe˘i⁄


3795 
AT91C_AES_URAT
 
	`EQU
 (0x7 << 12Ë;- (
AES
Ë
Un•ecifõd
 
Regi°î
 
Ac˚ss
 
Ty≥
 
Sètus


3796 
AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 
	`EQU
 (0x0 << 12Ë;- (
AES
Ë
I≈ut
 
d©a
 
wrôãn
 
durög
 
the
 d©®
¥o˚ssög
 
ö
 
PDC
 
mode
.

3797 
AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 
	`EQU
 (0x1 << 12Ë;- (
AES
Ë
Ouçut
 
d©a
 
ªad
 
durög
 
the
 d©®
¥o˚ssög
.

3798 
AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 
	`EQU
 (0x2 << 12Ë;- (
AES
Ë
Mode
 
wrôãn
 
durög
 
the
 
d©a
 
¥o˚ssög
.

3799 
AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 
	`EQU
 (0x3 << 12Ë;- (
AES
Ë
Ouçut
 
d©a
 
ªad
 
durög
 
the
 
sub
-
keys
 
gíî©i⁄
.

3800 
AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 
	`EQU
 (0x4 << 12Ë;- (
AES
Ë
Mode
 
wrôãn
 
durög
 
the
 
sub
-
keys
 
gíî©i⁄
.

3801 
AT91C_AES_URAT_WO_REG_READ
 
	`EQU
 (0x5 << 12Ë;- (
AES
Ë
Wrôe
-
⁄ly
 
ªad
 
ac˚ss
.

3807 
AT91C_TDES_START
 
	`EQU
 (0x1 << 0Ë;- (
TDES
Ë
Sèπs
 
Pro˚ssög


3808 
AT91C_TDES_SWRST
 
	`EQU
 (0x1 << 8Ë;- (
TDES
Ë
So·w¨e
 
Re£t


3810 
AT91C_TDES_CIPHER
 
	`EQU
 (0x1 << 0Ë;- (
TDES
Ë
Pro˚ssög
 
Mode


3811 
AT91C_TDES_TDESMOD
 
	`EQU
 (0x1 << 1Ë;- (
TDES
Ë
SögÀ
 
‹
 
TrùÀ
 
DES
 
Mode


3812 
AT91C_TDES_KEYMOD
 
	`EQU
 (0x1 << 4Ë;- (
TDES
Ë
Key
 
Mode


3813 
AT91C_TDES_SMOD
 
	`EQU
 (0x3 << 8Ë;- (
TDES
Ë
Sèπ
 
Mode


3814 
AT91C_TDES_SMOD_MANUAL
 
	`EQU
 (0x0 << 8Ë;- (
TDES
Ë
M™uÆ
 
Mode
: 
The
 
START
 
bô
 
ö
 
TDES_CR
 
mu°
 
be
 
£t
 
to
 
begö
 
í¸y±i⁄
 
‹
 
de¸y±i⁄
.

3815 
AT91C_TDES_SMOD_AUTO
 
	`EQU
 (0x1 << 8Ë;- (
TDES
Ë
Auto
 
Mode
: 
no
 
a˘i⁄
 
ö
 
TDES_CR
 
is
 
	`√˚sßry
 (
cf
 
d©ashìt
).

3816 
AT91C_TDES_SMOD_PDC
 
	`EQU
 (0x2 << 8Ë;- (
TDES
Ë
PDC
 
	`Mode
 (
cf
 
d©ashìt
).

3817 
AT91C_TDES_OPMOD
 
	`EQU
 (0x3 << 12Ë;- (
TDES
Ë
O≥øti⁄
 
Mode


3818 
AT91C_TDES_OPMOD_ECB
 
	`EQU
 (0x0 << 12Ë;- (
TDES
Ë
ECB
 
EÀ˘r⁄ic
 
CodeBook
 
mode
.

3819 
AT91C_TDES_OPMOD_CBC
 
	`EQU
 (0x1 << 12Ë;- (
TDES
Ë
CBC
 
Cùhî
 
Block
 
Chaöög
 
mode
.

3820 
AT91C_TDES_OPMOD_OFB
 
	`EQU
 (0x2 << 12Ë;- (
TDES
Ë
OFB
 
Ouçut
 
Fìdback
 
mode
.

3821 
AT91C_TDES_OPMOD_CFB
 
	`EQU
 (0x3 << 12Ë;- (
TDES
Ë
CFB
 
Cùhî
 
Fìdback
 
mode
.

3822 
AT91C_TDES_LOD
 
	`EQU
 (0x1 << 15Ë;- (
TDES
Ë
La°
 
Ouçut
 
D©a
 
Mode


3823 
AT91C_TDES_CFBS
 
	`EQU
 (0x3 << 16Ë;- (
TDES
Ë
Cùhî
 
Fìdback
 
D©a
 
Size


3824 
AT91C_TDES_CFBS_64_BIT
 
	`EQU
 (0x0 << 16Ë;- (
TDES
Ë64-
bô
.

3825 
AT91C_TDES_CFBS_32_BIT
 
	`EQU
 (0x1 << 16Ë;- (
TDES
Ë32-
bô
.

3826 
AT91C_TDES_CFBS_16_BIT
 
	`EQU
 (0x2 << 16Ë;- (
TDES
Ë16-
bô
.

3827 
AT91C_TDES_CFBS_8_BIT
 
	`EQU
 (0x3 << 16Ë;- (
TDES
Ë8-
bô
.

3829 
AT91C_TDES_DATRDY
 
	`EQU
 (0x1 << 0Ë;- (
TDES
Ë
DATRDY


3830 
AT91C_TDES_ENDRX
 
	`EQU
 (0x1 << 1Ë;- (
TDES
Ë
PDC
 
Ród
 
Buf„r
 
End


3831 
AT91C_TDES_ENDTX
 
	`EQU
 (0x1 << 2Ë;- (
TDES
Ë
PDC
 
Wrôe
 
Buf„r
 
End


3832 
AT91C_TDES_RXBUFF
 
	`EQU
 (0x1 << 3Ë;- (
TDES
Ë
PDC
 
Ród
 
Buf„r
 
FuŒ


3833 
AT91C_TDES_TXBUFE
 
	`EQU
 (0x1 << 4Ë;- (
TDES
Ë
PDC
 
Wrôe
 
Buf„r
 
Em±y


3834 
AT91C_TDES_URAD
 
	`EQU
 (0x1 << 8Ë;- (
TDES
Ë
Un•ecifõd
 
Regi°î
 
Ac˚ss
 
Dëe˘i⁄


3838 
AT91C_TDES_URAT
 
	`EQU
 (0x3 << 12Ë;- (
TDES
Ë
Un•ecifõd
 
Regi°î
 
Ac˚ss
 
Ty≥
 
Sètus


3839 
AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 
	`EQU
 (0x0 << 12Ë;- (
TDES
Ë
I≈ut
 
d©a
 
wrôãn
 
durög
 
the
 d©®
¥o˚ssög
 
ö
 
PDC
 
mode
.

3840 
AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 
	`EQU
 (0x1 << 12Ë;- (
TDES
Ë
Ouçut
 
d©a
 
ªad
 
durög
 
the
 d©®
¥o˚ssög
.

3841 
AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 
	`EQU
 (0x2 << 12Ë;- (
TDES
Ë
Mode
 
wrôãn
 
durög
 
the
 
d©a
 
¥o˚ssög
.

3842 
AT91C_TDES_URAT_WO_REG_READ
 
	`EQU
 (0x3 << 12Ë;- (
TDES
Ë
Wrôe
-
⁄ly
 
ªad
 
ac˚ss
.

3849 
AT91C_AIC_IVR
 
	`EQU
 (0xFFFFF100Ë;- (
AIC
Ë
IRQ
 
Ve˘‹
 
Regi°î


3850 
AT91C_AIC_SMR
 
	`EQU
 (0xFFFFF000Ë;- (
AIC
Ë
Sour˚
 
Mode
 
Regi°î


3851 
AT91C_AIC_FVR
 
	`EQU
 (0xFFFFF104Ë;- (
AIC
Ë
FIQ
 
Ve˘‹
 
Regi°î


3852 
AT91C_AIC_DCR
 
	`EQU
 (0xFFFFF138Ë;- (
AIC
Ë
Debug
 
C⁄åﬁ
 
	$Regi°î
 (
PrŸe˘
)

3853 
AT91C_AIC_EOICR
 
	`EQU
 (0xFFFFF130Ë;- (
AIC
Ë
End
 
of
 
I¡îru±
 
Comm™d
 
Regi°î


3854 
AT91C_AIC_SVR
 
	`EQU
 (0xFFFFF080Ë;- (
AIC
Ë
Sour˚
 
Ve˘‹
 
Regi°î


3855 
AT91C_AIC_FFSR
 
	`EQU
 (0xFFFFF148Ë;- (
AIC
Ë
Fa°
 
F‹cög
 
Sètus
 
Regi°î


3856 
AT91C_AIC_ICCR
 
	`EQU
 (0xFFFFF128Ë;- (
AIC
Ë
I¡îru±
 
CÀ¨
 
Comm™d
 
Regi°î


3857 
AT91C_AIC_ISR
 
	`EQU
 (0xFFFFF108Ë;- (
AIC
Ë
I¡îru±
 
Sètus
 
Regi°î


3858 
AT91C_AIC_IMR
 
	`EQU
 (0xFFFFF110Ë;- (
AIC
Ë
I¡îru±
 
Mask
 
Regi°î


3859 
AT91C_AIC_IPR
 
	`EQU
 (0xFFFFF10CË;- (
AIC
Ë
I¡îru±
 
Pídög
 
Regi°î


3860 
AT91C_AIC_FFER
 
	`EQU
 (0xFFFFF140Ë;- (
AIC
Ë
Fa°
 
F‹cög
 
E«bÀ
 
Regi°î


3861 
AT91C_AIC_IECR
 
	`EQU
 (0xFFFFF120Ë;- (
AIC
Ë
I¡îru±
 
E«bÀ
 
Comm™d
 
Regi°î


3862 
AT91C_AIC_ISCR
 
	`EQU
 (0xFFFFF12CË;- (
AIC
Ë
I¡îru±
 
Së
 
Comm™d
 
Regi°î


3863 
AT91C_AIC_FFDR
 
	`EQU
 (0xFFFFF144Ë;- (
AIC
Ë
Fa°
 
F‹cög
 
DißbÀ
 
Regi°î


3864 
AT91C_AIC_CISR
 
	`EQU
 (0xFFFFF114Ë;- (
AIC
Ë
C‹e
 
I¡îru±
 
Sètus
 
Regi°î


3865 
AT91C_AIC_IDCR
 
	`EQU
 (0xFFFFF124Ë;- (
AIC
Ë
I¡îru±
 
DißbÀ
 
Comm™d
 
Regi°î


3866 
AT91C_AIC_SPU
 
	`EQU
 (0xFFFFF134Ë;- (
AIC
Ë
Spurious
 
Ve˘‹
 
Regi°î


3868 
AT91C_DBGU_TCR
 
	`EQU
 (0xFFFFF30CË;- (
PDC_DBGU
Ë
Tønsmô
 
Cou¡î
 
Regi°î


3869 
AT91C_DBGU_RNPR
 
	`EQU
 (0xFFFFF310Ë;- (
PDC_DBGU
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


3870 
AT91C_DBGU_TNPR
 
	`EQU
 (0xFFFFF318Ë;- (
PDC_DBGU
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


3871 
AT91C_DBGU_TPR
 
	`EQU
 (0xFFFFF308Ë;- (
PDC_DBGU
Ë
Tønsmô
 
Poöãr
 
Regi°î


3872 
AT91C_DBGU_RPR
 
	`EQU
 (0xFFFFF300Ë;- (
PDC_DBGU
Ë
Re˚ive
 
Poöãr
 
Regi°î


3873 
AT91C_DBGU_RCR
 
	`EQU
 (0xFFFFF304Ë;- (
PDC_DBGU
Ë
Re˚ive
 
Cou¡î
 
Regi°î


3874 
AT91C_DBGU_RNCR
 
	`EQU
 (0xFFFFF314Ë;- (
PDC_DBGU
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


3875 
AT91C_DBGU_PTCR
 
	`EQU
 (0xFFFFF320Ë;- (
PDC_DBGU
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


3876 
AT91C_DBGU_PTSR
 
	`EQU
 (0xFFFFF324Ë;- (
PDC_DBGU
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


3877 
AT91C_DBGU_TNCR
 
	`EQU
 (0xFFFFF31CË;- (
PDC_DBGU
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


3879 
AT91C_DBGU_EXID
 
	`EQU
 (0xFFFFF244Ë;- (
DBGU
Ë
Chù
 
ID
 
Exãnsi⁄
 
Regi°î


3880 
AT91C_DBGU_BRGR
 
	`EQU
 (0xFFFFF220Ë;- (
DBGU
Ë
Baud
 
R©e
 
Gíî©‹
 
Regi°î


3881 
AT91C_DBGU_IDR
 
	`EQU
 (0xFFFFF20CË;- (
DBGU
Ë
I¡îru±
 
DißbÀ
 
Regi°î


3882 
AT91C_DBGU_CSR
 
	`EQU
 (0xFFFFF214Ë;- (
DBGU
Ë
Ch™√l
 
Sètus
 
Regi°î


3883 
AT91C_DBGU_CIDR
 
	`EQU
 (0xFFFFF240Ë;- (
DBGU
Ë
Chù
 
ID
 
Regi°î


3884 
AT91C_DBGU_MR
 
	`EQU
 (0xFFFFF204Ë;- (
DBGU
Ë
Mode
 
Regi°î


3885 
AT91C_DBGU_IMR
 
	`EQU
 (0xFFFFF210Ë;- (
DBGU
Ë
I¡îru±
 
Mask
 
Regi°î


3886 
AT91C_DBGU_CR
 
	`EQU
 (0xFFFFF200Ë;- (
DBGU
Ë
C⁄åﬁ
 
Regi°î


3887 
AT91C_DBGU_FNTR
 
	`EQU
 (0xFFFFF248Ë;- (
DBGU
Ë
F‹˚
 
NTRST
 
Regi°î


3888 
AT91C_DBGU_THR
 
	`EQU
 (0xFFFFF21CË;- (
DBGU
Ë
Tønsmôãr
 
Hﬁdög
 
Regi°î


3889 
AT91C_DBGU_RHR
 
	`EQU
 (0xFFFFF218Ë;- (
DBGU
Ë
Re˚ivî
 
Hﬁdög
 
Regi°î


3890 
AT91C_DBGU_IER
 
	`EQU
 (0xFFFFF208Ë;- (
DBGU
Ë
I¡îru±
 
E«bÀ
 
Regi°î


3892 
AT91C_PIOA_ODR
 
	`EQU
 (0xFFFFF414Ë;- (
PIOA
Ë
Ouçut
 
DißbÀ
 
Regi°îr


3893 
AT91C_PIOA_SODR
 
	`EQU
 (0xFFFFF430Ë;- (
PIOA
Ë
Së
 
Ouçut
 
D©a
 
Regi°î


3894 
AT91C_PIOA_ISR
 
	`EQU
 (0xFFFFF44CË;- (
PIOA
Ë
I¡îru±
 
Sètus
 
Regi°î


3895 
AT91C_PIOA_ABSR
 
	`EQU
 (0xFFFFF478Ë;- (
PIOA
Ë
AB
 
Sñe˘
 
Sètus
 
Regi°î


3896 
AT91C_PIOA_IER
 
	`EQU
 (0xFFFFF440Ë;- (
PIOA
Ë
I¡îru±
 
E«bÀ
 
Regi°î


3897 
AT91C_PIOA_PPUDR
 
	`EQU
 (0xFFFFF460Ë;- (
PIOA
Ë
PuŒ
-
up
 
DißbÀ
 
Regi°î


3898 
AT91C_PIOA_IMR
 
	`EQU
 (0xFFFFF448Ë;- (
PIOA
Ë
I¡îru±
 
Mask
 
Regi°î


3899 
AT91C_PIOA_PER
 
	`EQU
 (0xFFFFF400Ë;- (
PIOA
Ë
PIO
 
E«bÀ
 
Regi°î


3900 
AT91C_PIOA_IFDR
 
	`EQU
 (0xFFFFF424Ë;- (
PIOA
Ë
I≈ut
 
Fûãr
 
DißbÀ
 
Regi°î


3901 
AT91C_PIOA_OWDR
 
	`EQU
 (0xFFFFF4A4Ë;- (
PIOA
Ë
Ouçut
 
Wrôe
 
DißbÀ
 
Regi°î


3902 
AT91C_PIOA_MDSR
 
	`EQU
 (0xFFFFF458Ë;- (
PIOA
Ë
Mu…i
-
drivî
 
Sètus
 
Regi°î


3903 
AT91C_PIOA_IDR
 
	`EQU
 (0xFFFFF444Ë;- (
PIOA
Ë
I¡îru±
 
DißbÀ
 
Regi°î


3904 
AT91C_PIOA_ODSR
 
	`EQU
 (0xFFFFF438Ë;- (
PIOA
Ë
Ouçut
 
D©a
 
Sètus
 
Regi°î


3905 
AT91C_PIOA_PPUSR
 
	`EQU
 (0xFFFFF468Ë;- (
PIOA
Ë
PuŒ
-
up
 
Sètus
 
Regi°î


3906 
AT91C_PIOA_OWSR
 
	`EQU
 (0xFFFFF4A8Ë;- (
PIOA
Ë
Ouçut
 
Wrôe
 
Sètus
 
Regi°î


3907 
AT91C_PIOA_BSR
 
	`EQU
 (0xFFFFF474Ë;- (
PIOA
Ë
Sñe˘
 
B
 
Regi°î


3908 
AT91C_PIOA_OWER
 
	`EQU
 (0xFFFFF4A0Ë;- (
PIOA
Ë
Ouçut
 
Wrôe
 
E«bÀ
 
Regi°î


3909 
AT91C_PIOA_IFER
 
	`EQU
 (0xFFFFF420Ë;- (
PIOA
Ë
I≈ut
 
Fûãr
 
E«bÀ
 
Regi°î


3910 
AT91C_PIOA_PDSR
 
	`EQU
 (0xFFFFF43CË;- (
PIOA
Ë
Pö
 
D©a
 
Sètus
 
Regi°î


3911 
AT91C_PIOA_PPUER
 
	`EQU
 (0xFFFFF464Ë;- (
PIOA
Ë
PuŒ
-
up
 
E«bÀ
 
Regi°î


3912 
AT91C_PIOA_OSR
 
	`EQU
 (0xFFFFF418Ë;- (
PIOA
Ë
Ouçut
 
Sètus
 
Regi°î


3913 
AT91C_PIOA_ASR
 
	`EQU
 (0xFFFFF470Ë;- (
PIOA
Ë
Sñe˘
 
A
 
Regi°î


3914 
AT91C_PIOA_MDDR
 
	`EQU
 (0xFFFFF454Ë;- (
PIOA
Ë
Mu…i
-
drivî
 
DißbÀ
 
Regi°î


3915 
AT91C_PIOA_CODR
 
	`EQU
 (0xFFFFF434Ë;- (
PIOA
Ë
CÀ¨
 
Ouçut
 
D©a
 
Regi°î


3916 
AT91C_PIOA_MDER
 
	`EQU
 (0xFFFFF450Ë;- (
PIOA
Ë
Mu…i
-
drivî
 
E«bÀ
 
Regi°î


3917 
AT91C_PIOA_PDR
 
	`EQU
 (0xFFFFF404Ë;- (
PIOA
Ë
PIO
 
DißbÀ
 
Regi°î


3918 
AT91C_PIOA_IFSR
 
	`EQU
 (0xFFFFF428Ë;- (
PIOA
Ë
I≈ut
 
Fûãr
 
Sètus
 
Regi°î


3919 
AT91C_PIOA_OER
 
	`EQU
 (0xFFFFF410Ë;- (
PIOA
Ë
Ouçut
 
E«bÀ
 
Regi°î


3920 
AT91C_PIOA_PSR
 
	`EQU
 (0xFFFFF408Ë;- (
PIOA
Ë
PIO
 
Sètus
 
Regi°î


3922 
AT91C_PIOB_OWDR
 
	`EQU
 (0xFFFFF6A4Ë;- (
PIOB
Ë
Ouçut
 
Wrôe
 
DißbÀ
 
Regi°î


3923 
AT91C_PIOB_MDER
 
	`EQU
 (0xFFFFF650Ë;- (
PIOB
Ë
Mu…i
-
drivî
 
E«bÀ
 
Regi°î


3924 
AT91C_PIOB_PPUSR
 
	`EQU
 (0xFFFFF668Ë;- (
PIOB
Ë
PuŒ
-
up
 
Sètus
 
Regi°î


3925 
AT91C_PIOB_IMR
 
	`EQU
 (0xFFFFF648Ë;- (
PIOB
Ë
I¡îru±
 
Mask
 
Regi°î


3926 
AT91C_PIOB_ASR
 
	`EQU
 (0xFFFFF670Ë;- (
PIOB
Ë
Sñe˘
 
A
 
Regi°î


3927 
AT91C_PIOB_PPUDR
 
	`EQU
 (0xFFFFF660Ë;- (
PIOB
Ë
PuŒ
-
up
 
DißbÀ
 
Regi°î


3928 
AT91C_PIOB_PSR
 
	`EQU
 (0xFFFFF608Ë;- (
PIOB
Ë
PIO
 
Sètus
 
Regi°î


3929 
AT91C_PIOB_IER
 
	`EQU
 (0xFFFFF640Ë;- (
PIOB
Ë
I¡îru±
 
E«bÀ
 
Regi°î


3930 
AT91C_PIOB_CODR
 
	`EQU
 (0xFFFFF634Ë;- (
PIOB
Ë
CÀ¨
 
Ouçut
 
D©a
 
Regi°î


3931 
AT91C_PIOB_OWER
 
	`EQU
 (0xFFFFF6A0Ë;- (
PIOB
Ë
Ouçut
 
Wrôe
 
E«bÀ
 
Regi°î


3932 
AT91C_PIOB_ABSR
 
	`EQU
 (0xFFFFF678Ë;- (
PIOB
Ë
AB
 
Sñe˘
 
Sètus
 
Regi°î


3933 
AT91C_PIOB_IFDR
 
	`EQU
 (0xFFFFF624Ë;- (
PIOB
Ë
I≈ut
 
Fûãr
 
DißbÀ
 
Regi°î


3934 
AT91C_PIOB_PDSR
 
	`EQU
 (0xFFFFF63CË;- (
PIOB
Ë
Pö
 
D©a
 
Sètus
 
Regi°î


3935 
AT91C_PIOB_IDR
 
	`EQU
 (0xFFFFF644Ë;- (
PIOB
Ë
I¡îru±
 
DißbÀ
 
Regi°î


3936 
AT91C_PIOB_OWSR
 
	`EQU
 (0xFFFFF6A8Ë;- (
PIOB
Ë
Ouçut
 
Wrôe
 
Sètus
 
Regi°î


3937 
AT91C_PIOB_PDR
 
	`EQU
 (0xFFFFF604Ë;- (
PIOB
Ë
PIO
 
DißbÀ
 
Regi°î


3938 
AT91C_PIOB_ODR
 
	`EQU
 (0xFFFFF614Ë;- (
PIOB
Ë
Ouçut
 
DißbÀ
 
Regi°îr


3939 
AT91C_PIOB_IFSR
 
	`EQU
 (0xFFFFF628Ë;- (
PIOB
Ë
I≈ut
 
Fûãr
 
Sètus
 
Regi°î


3940 
AT91C_PIOB_PPUER
 
	`EQU
 (0xFFFFF664Ë;- (
PIOB
Ë
PuŒ
-
up
 
E«bÀ
 
Regi°î


3941 
AT91C_PIOB_SODR
 
	`EQU
 (0xFFFFF630Ë;- (
PIOB
Ë
Së
 
Ouçut
 
D©a
 
Regi°î


3942 
AT91C_PIOB_ISR
 
	`EQU
 (0xFFFFF64CË;- (
PIOB
Ë
I¡îru±
 
Sètus
 
Regi°î


3943 
AT91C_PIOB_ODSR
 
	`EQU
 (0xFFFFF638Ë;- (
PIOB
Ë
Ouçut
 
D©a
 
Sètus
 
Regi°î


3944 
AT91C_PIOB_OSR
 
	`EQU
 (0xFFFFF618Ë;- (
PIOB
Ë
Ouçut
 
Sètus
 
Regi°î


3945 
AT91C_PIOB_MDSR
 
	`EQU
 (0xFFFFF658Ë;- (
PIOB
Ë
Mu…i
-
drivî
 
Sètus
 
Regi°î


3946 
AT91C_PIOB_IFER
 
	`EQU
 (0xFFFFF620Ë;- (
PIOB
Ë
I≈ut
 
Fûãr
 
E«bÀ
 
Regi°î


3947 
AT91C_PIOB_BSR
 
	`EQU
 (0xFFFFF674Ë;- (
PIOB
Ë
Sñe˘
 
B
 
Regi°î


3948 
AT91C_PIOB_MDDR
 
	`EQU
 (0xFFFFF654Ë;- (
PIOB
Ë
Mu…i
-
drivî
 
DißbÀ
 
Regi°î


3949 
AT91C_PIOB_OER
 
	`EQU
 (0xFFFFF610Ë;- (
PIOB
Ë
Ouçut
 
E«bÀ
 
Regi°î


3950 
AT91C_PIOB_PER
 
	`EQU
 (0xFFFFF600Ë;- (
PIOB
Ë
PIO
 
E«bÀ
 
Regi°î


3952 
AT91C_CKGR_MOR
 
	`EQU
 (0xFFFFFC20Ë;- (
CKGR
Ë
Maö
 
Oscûœt‹
 
Regi°î


3953 
AT91C_CKGR_PLLR
 
	`EQU
 (0xFFFFFC2CË;- (
CKGR
Ë
PLL
 
Regi°î


3954 
AT91C_CKGR_MCFR
 
	`EQU
 (0xFFFFFC24Ë;- (
CKGR
Ë
Maö
 
Clock
 
Fªquícy
 
Regi°î


3956 
AT91C_PMC_IDR
 
	`EQU
 (0xFFFFFC64Ë;- (
PMC
Ë
I¡îru±
 
DißbÀ
 
Regi°î


3957 
AT91C_PMC_MOR
 
	`EQU
 (0xFFFFFC20Ë;- (
PMC
Ë
Maö
 
Oscûœt‹
 
Regi°î


3958 
AT91C_PMC_PLLR
 
	`EQU
 (0xFFFFFC2CË;- (
PMC
Ë
PLL
 
Regi°î


3959 
AT91C_PMC_PCER
 
	`EQU
 (0xFFFFFC10Ë;- (
PMC
Ë
PîùhîÆ
 
Clock
 
E«bÀ
 
Regi°î


3960 
AT91C_PMC_PCKR
 
	`EQU
 (0xFFFFFC40Ë;- (
PMC
Ë
ProgømmabÀ
 
Clock
 
Regi°î


3961 
AT91C_PMC_MCKR
 
	`EQU
 (0xFFFFFC30Ë;- (
PMC
Ë
Ma°î
 
Clock
 
Regi°î


3962 
AT91C_PMC_SCDR
 
	`EQU
 (0xFFFFFC04Ë;- (
PMC
Ë
Sy°em
 
Clock
 
DißbÀ
 
Regi°î


3963 
AT91C_PMC_PCDR
 
	`EQU
 (0xFFFFFC14Ë;- (
PMC
Ë
PîùhîÆ
 
Clock
 
DißbÀ
 
Regi°î


3964 
AT91C_PMC_SCSR
 
	`EQU
 (0xFFFFFC08Ë;- (
PMC
Ë
Sy°em
 
Clock
 
Sètus
 
Regi°î


3965 
AT91C_PMC_PCSR
 
	`EQU
 (0xFFFFFC18Ë;- (
PMC
Ë
PîùhîÆ
 
Clock
 
Sètus
 
Regi°î


3966 
AT91C_PMC_MCFR
 
	`EQU
 (0xFFFFFC24Ë;- (
PMC
Ë
Maö
 
Clock
 
Fªquícy
 
Regi°î


3967 
AT91C_PMC_SCER
 
	`EQU
 (0xFFFFFC00Ë;- (
PMC
Ë
Sy°em
 
Clock
 
E«bÀ
 
Regi°î


3968 
AT91C_PMC_IMR
 
	`EQU
 (0xFFFFFC6CË;- (
PMC
Ë
I¡îru±
 
Mask
 
Regi°î


3969 
AT91C_PMC_IER
 
	`EQU
 (0xFFFFFC60Ë;- (
PMC
Ë
I¡îru±
 
E«bÀ
 
Regi°î


3970 
AT91C_PMC_SR
 
	`EQU
 (0xFFFFFC68Ë;- (
PMC
Ë
Sètus
 
Regi°î


3972 
AT91C_RSTC_RCR
 
	`EQU
 (0xFFFFFD00Ë;- (
RSTC
Ë
Re£t
 
C⁄åﬁ
 
Regi°î


3973 
AT91C_RSTC_RMR
 
	`EQU
 (0xFFFFFD08Ë;- (
RSTC
Ë
Re£t
 
Mode
 
Regi°î


3974 
AT91C_RSTC_RSR
 
	`EQU
 (0xFFFFFD04Ë;- (
RSTC
Ë
Re£t
 
Sètus
 
Regi°î


3976 
AT91C_RTTC_RTSR
 
	`EQU
 (0xFFFFFD2CË;- (
RTTC
Ë
Ról
-
time
 
Sètus
 
Regi°î


3977 
AT91C_RTTC_RTMR
 
	`EQU
 (0xFFFFFD20Ë;- (
RTTC
Ë
Ról
-
time
 
Mode
 
Regi°î


3978 
AT91C_RTTC_RTVR
 
	`EQU
 (0xFFFFFD28Ë;- (
RTTC
Ë
Ról
-
time
 
VÆue
 
Regi°î


3979 
AT91C_RTTC_RTAR
 
	`EQU
 (0xFFFFFD24Ë;- (
RTTC
Ë
Ról
-
time
 
Aœrm
 
Regi°î


3981 
AT91C_PITC_PIVR
 
	`EQU
 (0xFFFFFD38Ë;- (
PITC
Ë
Pîiod
 
I¡îvÆ
 
VÆue
 
Regi°î


3982 
AT91C_PITC_PISR
 
	`EQU
 (0xFFFFFD34Ë;- (
PITC
Ë
Pîiod
 
I¡îvÆ
 
Sètus
 
Regi°î


3983 
AT91C_PITC_PIIR
 
	`EQU
 (0xFFFFFD3CË;- (
PITC
Ë
Pîiod
 
I¡îvÆ
 
Image
 
Regi°î


3984 
AT91C_PITC_PIMR
 
	`EQU
 (0xFFFFFD30Ë;- (
PITC
Ë
Pîiod
 
I¡îvÆ
 
Mode
 
Regi°î


3986 
AT91C_WDTC_WDCR
 
	`EQU
 (0xFFFFFD40Ë;- (
WDTC
Ë
W©chdog
 
C⁄åﬁ
 
Regi°î


3987 
AT91C_WDTC_WDSR
 
	`EQU
 (0xFFFFFD48Ë;- (
WDTC
Ë
W©chdog
 
Sètus
 
Regi°î


3988 
AT91C_WDTC_WDMR
 
	`EQU
 (0xFFFFFD44Ë;- (
WDTC
Ë
W©chdog
 
Mode
 
Regi°î


3990 
AT91C_VREG_MR
 
	`EQU
 (0xFFFFFD60Ë;- (
VREG
Ë
Vﬁège
 
Reguœt‹
 
Mode
 
Regi°î


3992 
AT91C_MC_ASR
 
	`EQU
 (0xFFFFFF04Ë;- (
MC
ËMC 
Ab‹t
 
Sètus
 
Regi°î


3993 
AT91C_MC_RCR
 
	`EQU
 (0xFFFFFF00Ë;- (
MC
ËMC 
Rem≠
 
C⁄åﬁ
 
Regi°î


3994 
AT91C_MC_FCR
 
	`EQU
 (0xFFFFFF64Ë;- (
MC
ËMC 
Fœsh
 
Comm™d
 
Regi°î


3995 
AT91C_MC_AASR
 
	`EQU
 (0xFFFFFF08Ë;- (
MC
ËMC 
Ab‹t
 
Addªss
 
Sètus
 
Regi°î


3996 
AT91C_MC_FSR
 
	`EQU
 (0xFFFFFF68Ë;- (
MC
ËMC 
Fœsh
 
Sètus
 
Regi°î


3997 
AT91C_MC_FMR
 
	`EQU
 (0xFFFFFF60Ë;- (
MC
ËMC 
Fœsh
 
Mode
 
Regi°î


3999 
AT91C_SPI1_PTCR
 
	`EQU
 (0xFFFE4120Ë;- (
PDC_SPI1
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4000 
AT91C_SPI1_RPR
 
	`EQU
 (0xFFFE4100Ë;- (
PDC_SPI1
Ë
Re˚ive
 
Poöãr
 
Regi°î


4001 
AT91C_SPI1_TNCR
 
	`EQU
 (0xFFFE411CË;- (
PDC_SPI1
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4002 
AT91C_SPI1_TPR
 
	`EQU
 (0xFFFE4108Ë;- (
PDC_SPI1
Ë
Tønsmô
 
Poöãr
 
Regi°î


4003 
AT91C_SPI1_TNPR
 
	`EQU
 (0xFFFE4118Ë;- (
PDC_SPI1
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4004 
AT91C_SPI1_TCR
 
	`EQU
 (0xFFFE410CË;- (
PDC_SPI1
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4005 
AT91C_SPI1_RCR
 
	`EQU
 (0xFFFE4104Ë;- (
PDC_SPI1
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4006 
AT91C_SPI1_RNPR
 
	`EQU
 (0xFFFE4110Ë;- (
PDC_SPI1
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4007 
AT91C_SPI1_RNCR
 
	`EQU
 (0xFFFE4114Ë;- (
PDC_SPI1
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4008 
AT91C_SPI1_PTSR
 
	`EQU
 (0xFFFE4124Ë;- (
PDC_SPI1
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4010 
AT91C_SPI1_IMR
 
	`EQU
 (0xFFFE401CË;- (
SPI1
Ë
I¡îru±
 
Mask
 
Regi°î


4011 
AT91C_SPI1_IER
 
	`EQU
 (0xFFFE4014Ë;- (
SPI1
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4012 
AT91C_SPI1_MR
 
	`EQU
 (0xFFFE4004Ë;- (
SPI1
Ë
Mode
 
Regi°î


4013 
AT91C_SPI1_RDR
 
	`EQU
 (0xFFFE4008Ë;- (
SPI1
Ë
Re˚ive
 
D©a
 
Regi°î


4014 
AT91C_SPI1_IDR
 
	`EQU
 (0xFFFE4018Ë;- (
SPI1
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4015 
AT91C_SPI1_SR
 
	`EQU
 (0xFFFE4010Ë;- (
SPI1
Ë
Sètus
 
Regi°î


4016 
AT91C_SPI1_TDR
 
	`EQU
 (0xFFFE400CË;- (
SPI1
Ë
Tønsmô
 
D©a
 
Regi°î


4017 
AT91C_SPI1_CR
 
	`EQU
 (0xFFFE4000Ë;- (
SPI1
Ë
C⁄åﬁ
 
Regi°î


4018 
AT91C_SPI1_CSR
 
	`EQU
 (0xFFFE4030Ë;- (
SPI1
Ë
Chù
 
Sñe˘
 
Regi°î


4020 
AT91C_SPI0_PTCR
 
	`EQU
 (0xFFFE0120Ë;- (
PDC_SPI0
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4021 
AT91C_SPI0_TPR
 
	`EQU
 (0xFFFE0108Ë;- (
PDC_SPI0
Ë
Tønsmô
 
Poöãr
 
Regi°î


4022 
AT91C_SPI0_TCR
 
	`EQU
 (0xFFFE010CË;- (
PDC_SPI0
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4023 
AT91C_SPI0_RCR
 
	`EQU
 (0xFFFE0104Ë;- (
PDC_SPI0
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4024 
AT91C_SPI0_PTSR
 
	`EQU
 (0xFFFE0124Ë;- (
PDC_SPI0
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4025 
AT91C_SPI0_RNPR
 
	`EQU
 (0xFFFE0110Ë;- (
PDC_SPI0
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4026 
AT91C_SPI0_RPR
 
	`EQU
 (0xFFFE0100Ë;- (
PDC_SPI0
Ë
Re˚ive
 
Poöãr
 
Regi°î


4027 
AT91C_SPI0_TNCR
 
	`EQU
 (0xFFFE011CË;- (
PDC_SPI0
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4028 
AT91C_SPI0_RNCR
 
	`EQU
 (0xFFFE0114Ë;- (
PDC_SPI0
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4029 
AT91C_SPI0_TNPR
 
	`EQU
 (0xFFFE0118Ë;- (
PDC_SPI0
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4031 
AT91C_SPI0_IER
 
	`EQU
 (0xFFFE0014Ë;- (
SPI0
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4032 
AT91C_SPI0_SR
 
	`EQU
 (0xFFFE0010Ë;- (
SPI0
Ë
Sètus
 
Regi°î


4033 
AT91C_SPI0_IDR
 
	`EQU
 (0xFFFE0018Ë;- (
SPI0
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4034 
AT91C_SPI0_CR
 
	`EQU
 (0xFFFE0000Ë;- (
SPI0
Ë
C⁄åﬁ
 
Regi°î


4035 
AT91C_SPI0_MR
 
	`EQU
 (0xFFFE0004Ë;- (
SPI0
Ë
Mode
 
Regi°î


4036 
AT91C_SPI0_IMR
 
	`EQU
 (0xFFFE001CË;- (
SPI0
Ë
I¡îru±
 
Mask
 
Regi°î


4037 
AT91C_SPI0_TDR
 
	`EQU
 (0xFFFE000CË;- (
SPI0
Ë
Tønsmô
 
D©a
 
Regi°î


4038 
AT91C_SPI0_RDR
 
	`EQU
 (0xFFFE0008Ë;- (
SPI0
Ë
Re˚ive
 
D©a
 
Regi°î


4039 
AT91C_SPI0_CSR
 
	`EQU
 (0xFFFE0030Ë;- (
SPI0
Ë
Chù
 
Sñe˘
 
Regi°î


4041 
AT91C_US1_RNCR
 
	`EQU
 (0xFFFC4114Ë;- (
PDC_US1
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4042 
AT91C_US1_PTCR
 
	`EQU
 (0xFFFC4120Ë;- (
PDC_US1
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4043 
AT91C_US1_TCR
 
	`EQU
 (0xFFFC410CË;- (
PDC_US1
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4044 
AT91C_US1_PTSR
 
	`EQU
 (0xFFFC4124Ë;- (
PDC_US1
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4045 
AT91C_US1_TNPR
 
	`EQU
 (0xFFFC4118Ë;- (
PDC_US1
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4046 
AT91C_US1_RCR
 
	`EQU
 (0xFFFC4104Ë;- (
PDC_US1
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4047 
AT91C_US1_RNPR
 
	`EQU
 (0xFFFC4110Ë;- (
PDC_US1
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4048 
AT91C_US1_RPR
 
	`EQU
 (0xFFFC4100Ë;- (
PDC_US1
Ë
Re˚ive
 
Poöãr
 
Regi°î


4049 
AT91C_US1_TNCR
 
	`EQU
 (0xFFFC411CË;- (
PDC_US1
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4050 
AT91C_US1_TPR
 
	`EQU
 (0xFFFC4108Ë;- (
PDC_US1
Ë
Tønsmô
 
Poöãr
 
Regi°î


4052 
AT91C_US1_IF
 
	`EQU
 (0xFFFC404CË;- (
US1
Ë
IRDA_FILTER
 
Regi°î


4053 
AT91C_US1_NER
 
	`EQU
 (0xFFFC4044Ë;- (
US1
Ë
Nb
 
Eº‹s
 
Regi°î


4054 
AT91C_US1_RTOR
 
	`EQU
 (0xFFFC4024Ë;- (
US1
Ë
Re˚ivî
 
Time
-
out
 
Regi°î


4055 
AT91C_US1_CSR
 
	`EQU
 (0xFFFC4014Ë;- (
US1
Ë
Ch™√l
 
Sètus
 
Regi°î


4056 
AT91C_US1_IDR
 
	`EQU
 (0xFFFC400CË;- (
US1
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4057 
AT91C_US1_IER
 
	`EQU
 (0xFFFC4008Ë;- (
US1
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4058 
AT91C_US1_THR
 
	`EQU
 (0xFFFC401CË;- (
US1
Ë
Tønsmôãr
 
Hﬁdög
 
Regi°î


4059 
AT91C_US1_TTGR
 
	`EQU
 (0xFFFC4028Ë;- (
US1
Ë
Tønsmôãr
 
Time
-
gu¨d
 
Regi°î


4060 
AT91C_US1_RHR
 
	`EQU
 (0xFFFC4018Ë;- (
US1
Ë
Re˚ivî
 
Hﬁdög
 
Regi°î


4061 
AT91C_US1_BRGR
 
	`EQU
 (0xFFFC4020Ë;- (
US1
Ë
Baud
 
R©e
 
Gíî©‹
 
Regi°î


4062 
AT91C_US1_IMR
 
	`EQU
 (0xFFFC4010Ë;- (
US1
Ë
I¡îru±
 
Mask
 
Regi°î


4063 
AT91C_US1_FIDI
 
	`EQU
 (0xFFFC4040Ë;- (
US1
Ë
FI_DI_R©io
 
Regi°î


4064 
AT91C_US1_CR
 
	`EQU
 (0xFFFC4000Ë;- (
US1
Ë
C⁄åﬁ
 
Regi°î


4065 
AT91C_US1_MR
 
	`EQU
 (0xFFFC4004Ë;- (
US1
Ë
Mode
 
Regi°î


4067 
AT91C_US0_TNPR
 
	`EQU
 (0xFFFC0118Ë;- (
PDC_US0
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4068 
AT91C_US0_RNPR
 
	`EQU
 (0xFFFC0110Ë;- (
PDC_US0
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4069 
AT91C_US0_TCR
 
	`EQU
 (0xFFFC010CË;- (
PDC_US0
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4070 
AT91C_US0_PTCR
 
	`EQU
 (0xFFFC0120Ë;- (
PDC_US0
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4071 
AT91C_US0_PTSR
 
	`EQU
 (0xFFFC0124Ë;- (
PDC_US0
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4072 
AT91C_US0_TNCR
 
	`EQU
 (0xFFFC011CË;- (
PDC_US0
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4073 
AT91C_US0_TPR
 
	`EQU
 (0xFFFC0108Ë;- (
PDC_US0
Ë
Tønsmô
 
Poöãr
 
Regi°î


4074 
AT91C_US0_RCR
 
	`EQU
 (0xFFFC0104Ë;- (
PDC_US0
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4075 
AT91C_US0_RPR
 
	`EQU
 (0xFFFC0100Ë;- (
PDC_US0
Ë
Re˚ive
 
Poöãr
 
Regi°î


4076 
AT91C_US0_RNCR
 
	`EQU
 (0xFFFC0114Ë;- (
PDC_US0
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4078 
AT91C_US0_BRGR
 
	`EQU
 (0xFFFC0020Ë;- (
US0
Ë
Baud
 
R©e
 
Gíî©‹
 
Regi°î


4079 
AT91C_US0_NER
 
	`EQU
 (0xFFFC0044Ë;- (
US0
Ë
Nb
 
Eº‹s
 
Regi°î


4080 
AT91C_US0_CR
 
	`EQU
 (0xFFFC0000Ë;- (
US0
Ë
C⁄åﬁ
 
Regi°î


4081 
AT91C_US0_IMR
 
	`EQU
 (0xFFFC0010Ë;- (
US0
Ë
I¡îru±
 
Mask
 
Regi°î


4082 
AT91C_US0_FIDI
 
	`EQU
 (0xFFFC0040Ë;- (
US0
Ë
FI_DI_R©io
 
Regi°î


4083 
AT91C_US0_TTGR
 
	`EQU
 (0xFFFC0028Ë;- (
US0
Ë
Tønsmôãr
 
Time
-
gu¨d
 
Regi°î


4084 
AT91C_US0_MR
 
	`EQU
 (0xFFFC0004Ë;- (
US0
Ë
Mode
 
Regi°î


4085 
AT91C_US0_RTOR
 
	`EQU
 (0xFFFC0024Ë;- (
US0
Ë
Re˚ivî
 
Time
-
out
 
Regi°î


4086 
AT91C_US0_CSR
 
	`EQU
 (0xFFFC0014Ë;- (
US0
Ë
Ch™√l
 
Sètus
 
Regi°î


4087 
AT91C_US0_RHR
 
	`EQU
 (0xFFFC0018Ë;- (
US0
Ë
Re˚ivî
 
Hﬁdög
 
Regi°î


4088 
AT91C_US0_IDR
 
	`EQU
 (0xFFFC000CË;- (
US0
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4089 
AT91C_US0_THR
 
	`EQU
 (0xFFFC001CË;- (
US0
Ë
Tønsmôãr
 
Hﬁdög
 
Regi°î


4090 
AT91C_US0_IF
 
	`EQU
 (0xFFFC004CË;- (
US0
Ë
IRDA_FILTER
 
Regi°î


4091 
AT91C_US0_IER
 
	`EQU
 (0xFFFC0008Ë;- (
US0
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4093 
AT91C_SSC_TNCR
 
	`EQU
 (0xFFFD411CË;- (
PDC_SSC
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4094 
AT91C_SSC_RPR
 
	`EQU
 (0xFFFD4100Ë;- (
PDC_SSC
Ë
Re˚ive
 
Poöãr
 
Regi°î


4095 
AT91C_SSC_RNCR
 
	`EQU
 (0xFFFD4114Ë;- (
PDC_SSC
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4096 
AT91C_SSC_TPR
 
	`EQU
 (0xFFFD4108Ë;- (
PDC_SSC
Ë
Tønsmô
 
Poöãr
 
Regi°î


4097 
AT91C_SSC_PTCR
 
	`EQU
 (0xFFFD4120Ë;- (
PDC_SSC
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4098 
AT91C_SSC_TCR
 
	`EQU
 (0xFFFD410CË;- (
PDC_SSC
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4099 
AT91C_SSC_RCR
 
	`EQU
 (0xFFFD4104Ë;- (
PDC_SSC
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4100 
AT91C_SSC_RNPR
 
	`EQU
 (0xFFFD4110Ë;- (
PDC_SSC
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4101 
AT91C_SSC_TNPR
 
	`EQU
 (0xFFFD4118Ë;- (
PDC_SSC
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4102 
AT91C_SSC_PTSR
 
	`EQU
 (0xFFFD4124Ë;- (
PDC_SSC
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4104 
AT91C_SSC_RHR
 
	`EQU
 (0xFFFD4020Ë;- (
SSC
Ë
Re˚ive
 
Hﬁdög
 
Regi°î


4105 
AT91C_SSC_RSHR
 
	`EQU
 (0xFFFD4030Ë;- (
SSC
Ë
Re˚ive
 
Sync
 
Hﬁdög
 
Regi°î


4106 
AT91C_SSC_TFMR
 
	`EQU
 (0xFFFD401CË;- (
SSC
Ë
Tønsmô
 
Føme
 
Mode
 
Regi°î


4107 
AT91C_SSC_IDR
 
	`EQU
 (0xFFFD4048Ë;- (
SSC
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4108 
AT91C_SSC_THR
 
	`EQU
 (0xFFFD4024Ë;- (
SSC
Ë
Tønsmô
 
Hﬁdög
 
Regi°î


4109 
AT91C_SSC_RCMR
 
	`EQU
 (0xFFFD4010Ë;- (
SSC
Ë
Re˚ive
 
Clock
 
ModeRegi°î


4110 
AT91C_SSC_IER
 
	`EQU
 (0xFFFD4044Ë;- (
SSC
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4111 
AT91C_SSC_TSHR
 
	`EQU
 (0xFFFD4034Ë;- (
SSC
Ë
Tønsmô
 
Sync
 
Hﬁdög
 
Regi°î


4112 
AT91C_SSC_SR
 
	`EQU
 (0xFFFD4040Ë;- (
SSC
Ë
Sètus
 
Regi°î


4113 
AT91C_SSC_CMR
 
	`EQU
 (0xFFFD4004Ë;- (
SSC
Ë
Clock
 
Mode
 
Regi°î


4114 
AT91C_SSC_TCMR
 
	`EQU
 (0xFFFD4018Ë;- (
SSC
Ë
Tønsmô
 
Clock
 
Mode
 
Regi°î


4115 
AT91C_SSC_CR
 
	`EQU
 (0xFFFD4000Ë;- (
SSC
Ë
C⁄åﬁ
 
Regi°î


4116 
AT91C_SSC_IMR
 
	`EQU
 (0xFFFD404CË;- (
SSC
Ë
I¡îru±
 
Mask
 
Regi°î


4117 
AT91C_SSC_RFMR
 
	`EQU
 (0xFFFD4014Ë;- (
SSC
Ë
Re˚ive
 
Føme
 
Mode
 
Regi°î


4119 
AT91C_TWI_IER
 
	`EQU
 (0xFFFB8024Ë;- (
TWI
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4120 
AT91C_TWI_CR
 
	`EQU
 (0xFFFB8000Ë;- (
TWI
Ë
C⁄åﬁ
 
Regi°î


4121 
AT91C_TWI_SR
 
	`EQU
 (0xFFFB8020Ë;- (
TWI
Ë
Sètus
 
Regi°î


4122 
AT91C_TWI_IMR
 
	`EQU
 (0xFFFB802CË;- (
TWI
Ë
I¡îru±
 
Mask
 
Regi°î


4123 
AT91C_TWI_THR
 
	`EQU
 (0xFFFB8034Ë;- (
TWI
Ë
Tønsmô
 
Hﬁdög
 
Regi°î


4124 
AT91C_TWI_IDR
 
	`EQU
 (0xFFFB8028Ë;- (
TWI
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4125 
AT91C_TWI_IADR
 
	`EQU
 (0xFFFB800CË;- (
TWI
Ë
I¡î«l
 
Addªss
 
Regi°î


4126 
AT91C_TWI_MMR
 
	`EQU
 (0xFFFB8004Ë;- (
TWI
Ë
Ma°î
 
Mode
 
Regi°î


4127 
AT91C_TWI_CWGR
 
	`EQU
 (0xFFFB8010Ë;- (
TWI
Ë
Clock
 
Wavef‹m
 
Gíî©‹
 
Regi°î


4128 
AT91C_TWI_RHR
 
	`EQU
 (0xFFFB8030Ë;- (
TWI
Ë
Re˚ive
 
Hﬁdög
 
Regi°î


4130 
AT91C_PWMC_CH3_CUPDR
 
	`EQU
 (0xFFFCC270Ë;- (
PWMC_CH3
Ë
Ch™√l
 
Upd©e
 
Regi°î


4131 
AT91C_PWMC_CH3_Re£rved
 
	`EQU
 (0xFFFCC274Ë;- (
PWMC_CH3
Ë
Re£rved


4132 
AT91C_PWMC_CH3_CPRDR
 
	`EQU
 (0xFFFCC268Ë;- (
PWMC_CH3
Ë
Ch™√l
 
Pîiod
 
Regi°î


4133 
AT91C_PWMC_CH3_CDTYR
 
	`EQU
 (0xFFFCC264Ë;- (
PWMC_CH3
Ë
Ch™√l
 
Duty
 
Cy˛e
 
Regi°î


4134 
AT91C_PWMC_CH3_CCNTR
 
	`EQU
 (0xFFFCC26CË;- (
PWMC_CH3
Ë
Ch™√l
 
Cou¡î
 
Regi°î


4135 
AT91C_PWMC_CH3_CMR
 
	`EQU
 (0xFFFCC260Ë;- (
PWMC_CH3
Ë
Ch™√l
 
Mode
 
Regi°î


4137 
AT91C_PWMC_CH2_Re£rved
 
	`EQU
 (0xFFFCC254Ë;- (
PWMC_CH2
Ë
Re£rved


4138 
AT91C_PWMC_CH2_CMR
 
	`EQU
 (0xFFFCC240Ë;- (
PWMC_CH2
Ë
Ch™√l
 
Mode
 
Regi°î


4139 
AT91C_PWMC_CH2_CCNTR
 
	`EQU
 (0xFFFCC24CË;- (
PWMC_CH2
Ë
Ch™√l
 
Cou¡î
 
Regi°î


4140 
AT91C_PWMC_CH2_CPRDR
 
	`EQU
 (0xFFFCC248Ë;- (
PWMC_CH2
Ë
Ch™√l
 
Pîiod
 
Regi°î


4141 
AT91C_PWMC_CH2_CUPDR
 
	`EQU
 (0xFFFCC250Ë;- (
PWMC_CH2
Ë
Ch™√l
 
Upd©e
 
Regi°î


4142 
AT91C_PWMC_CH2_CDTYR
 
	`EQU
 (0xFFFCC244Ë;- (
PWMC_CH2
Ë
Ch™√l
 
Duty
 
Cy˛e
 
Regi°î


4144 
AT91C_PWMC_CH1_Re£rved
 
	`EQU
 (0xFFFCC234Ë;- (
PWMC_CH1
Ë
Re£rved


4145 
AT91C_PWMC_CH1_CUPDR
 
	`EQU
 (0xFFFCC230Ë;- (
PWMC_CH1
Ë
Ch™√l
 
Upd©e
 
Regi°î


4146 
AT91C_PWMC_CH1_CPRDR
 
	`EQU
 (0xFFFCC228Ë;- (
PWMC_CH1
Ë
Ch™√l
 
Pîiod
 
Regi°î


4147 
AT91C_PWMC_CH1_CCNTR
 
	`EQU
 (0xFFFCC22CË;- (
PWMC_CH1
Ë
Ch™√l
 
Cou¡î
 
Regi°î


4148 
AT91C_PWMC_CH1_CDTYR
 
	`EQU
 (0xFFFCC224Ë;- (
PWMC_CH1
Ë
Ch™√l
 
Duty
 
Cy˛e
 
Regi°î


4149 
AT91C_PWMC_CH1_CMR
 
	`EQU
 (0xFFFCC220Ë;- (
PWMC_CH1
Ë
Ch™√l
 
Mode
 
Regi°î


4151 
AT91C_PWMC_CH0_Re£rved
 
	`EQU
 (0xFFFCC214Ë;- (
PWMC_CH0
Ë
Re£rved


4152 
AT91C_PWMC_CH0_CPRDR
 
	`EQU
 (0xFFFCC208Ë;- (
PWMC_CH0
Ë
Ch™√l
 
Pîiod
 
Regi°î


4153 
AT91C_PWMC_CH0_CDTYR
 
	`EQU
 (0xFFFCC204Ë;- (
PWMC_CH0
Ë
Ch™√l
 
Duty
 
Cy˛e
 
Regi°î


4154 
AT91C_PWMC_CH0_CMR
 
	`EQU
 (0xFFFCC200Ë;- (
PWMC_CH0
Ë
Ch™√l
 
Mode
 
Regi°î


4155 
AT91C_PWMC_CH0_CUPDR
 
	`EQU
 (0xFFFCC210Ë;- (
PWMC_CH0
Ë
Ch™√l
 
Upd©e
 
Regi°î


4156 
AT91C_PWMC_CH0_CCNTR
 
	`EQU
 (0xFFFCC20CË;- (
PWMC_CH0
Ë
Ch™√l
 
Cou¡î
 
Regi°î


4158 
AT91C_PWMC_IDR
 
	`EQU
 (0xFFFCC014Ë;- (
PWMC
ËPWMC 
I¡îru±
 
DißbÀ
 
Regi°î


4159 
AT91C_PWMC_DIS
 
	`EQU
 (0xFFFCC008Ë;- (
PWMC
ËPWMC 
DißbÀ
 
Regi°î


4160 
AT91C_PWMC_IER
 
	`EQU
 (0xFFFCC010Ë;- (
PWMC
ËPWMC 
I¡îru±
 
E«bÀ
 
Regi°î


4161 
AT91C_PWMC_VR
 
	`EQU
 (0xFFFCC0FCË;- (
PWMC
ËPWMC 
Vîsi⁄
 
Regi°î


4162 
AT91C_PWMC_ISR
 
	`EQU
 (0xFFFCC01CË;- (
PWMC
ËPWMC 
I¡îru±
 
Sètus
 
Regi°î


4163 
AT91C_PWMC_SR
 
	`EQU
 (0xFFFCC00CË;- (
PWMC
ËPWMC 
Sètus
 
Regi°î


4164 
AT91C_PWMC_IMR
 
	`EQU
 (0xFFFCC018Ë;- (
PWMC
ËPWMC 
I¡îru±
 
Mask
 
Regi°î


4165 
AT91C_PWMC_MR
 
	`EQU
 (0xFFFCC000Ë;- (
PWMC
ËPWMC 
Mode
 
Regi°î


4166 
AT91C_PWMC_ENA
 
	`EQU
 (0xFFFCC004Ë;- (
PWMC
ËPWMC 
E«bÀ
 
Regi°î


4168 
AT91C_UDP_IMR
 
	`EQU
 (0xFFFB0018Ë;- (
UDP
Ë
I¡îru±
 
Mask
 
Regi°î


4169 
AT91C_UDP_FADDR
 
	`EQU
 (0xFFFB0008Ë;- (
UDP
Ë
Fun˘i⁄
 
Addªss
 
Regi°î


4170 
AT91C_UDP_NUM
 
	`EQU
 (0xFFFB0000Ë;- (
UDP
Ë
Føme
 
Numbî
 
Regi°î


4171 
AT91C_UDP_FDR
 
	`EQU
 (0xFFFB0050Ë;- (
UDP
Ë
Endpoöt
 
FIFO
 
D©a
 
Regi°î


4172 
AT91C_UDP_ISR
 
	`EQU
 (0xFFFB001CË;- (
UDP
Ë
I¡îru±
 
Sètus
 
Regi°î


4173 
AT91C_UDP_CSR
 
	`EQU
 (0xFFFB0030Ë;- (
UDP
Ë
Endpoöt
 
C⁄åﬁ
 
™d
 
Sètus
 
Regi°î


4174 
AT91C_UDP_IDR
 
	`EQU
 (0xFFFB0014Ë;- (
UDP
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4175 
AT91C_UDP_ICR
 
	`EQU
 (0xFFFB0020Ë;- (
UDP
Ë
I¡îru±
 
CÀ¨
 
Regi°î


4176 
AT91C_UDP_RSTEP
 
	`EQU
 (0xFFFB0028Ë;- (
UDP
Ë
Re£t
 
Endpoöt
 
Regi°î


4177 
AT91C_UDP_TXVC
 
	`EQU
 (0xFFFB0074Ë;- (
UDP
Ë
Tøns˚ivî
 
C⁄åﬁ
 
Regi°î


4178 
AT91C_UDP_GLBSTATE
 
	`EQU
 (0xFFFB0004Ë;- (
UDP
Ë
GlobÆ
 
Sèã
 
Regi°î


4179 
AT91C_UDP_IER
 
	`EQU
 (0xFFFB0010Ë;- (
UDP
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4181 
AT91C_TC0_SR
 
	`EQU
 (0xFFFA0020Ë;- (
TC0
Ë
Sètus
 
Regi°î


4182 
AT91C_TC0_RC
 
	`EQU
 (0xFFFA001CË;- (
TC0
Ë
Regi°î
 
C


4183 
AT91C_TC0_RB
 
	`EQU
 (0xFFFA0018Ë;- (
TC0
Ë
Regi°î
 
B


4184 
AT91C_TC0_CCR
 
	`EQU
 (0xFFFA0000Ë;- (
TC0
Ë
Ch™√l
 
C⁄åﬁ
 
Regi°î


4185 
AT91C_TC0_CMR
 
	`EQU
 (0xFFFA0004Ë;- (
TC0
Ë
Ch™√l
 
Mode
 
	`Regi°î
 (
C≠tuª
 Modê/ 
Wavef‹m
 Mode)

4186 
AT91C_TC0_IER
 
	`EQU
 (0xFFFA0024Ë;- (
TC0
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4187 
AT91C_TC0_RA
 
	`EQU
 (0xFFFA0014Ë;- (
TC0
Ë
Regi°î
 
A


4188 
AT91C_TC0_IDR
 
	`EQU
 (0xFFFA0028Ë;- (
TC0
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4189 
AT91C_TC0_CV
 
	`EQU
 (0xFFFA0010Ë;- (
TC0
Ë
Cou¡î
 
VÆue


4190 
AT91C_TC0_IMR
 
	`EQU
 (0xFFFA002CË;- (
TC0
Ë
I¡îru±
 
Mask
 
Regi°î


4192 
AT91C_TC1_RB
 
	`EQU
 (0xFFFA0058Ë;- (
TC1
Ë
Regi°î
 
B


4193 
AT91C_TC1_CCR
 
	`EQU
 (0xFFFA0040Ë;- (
TC1
Ë
Ch™√l
 
C⁄åﬁ
 
Regi°î


4194 
AT91C_TC1_IER
 
	`EQU
 (0xFFFA0064Ë;- (
TC1
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4195 
AT91C_TC1_IDR
 
	`EQU
 (0xFFFA0068Ë;- (
TC1
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4196 
AT91C_TC1_SR
 
	`EQU
 (0xFFFA0060Ë;- (
TC1
Ë
Sètus
 
Regi°î


4197 
AT91C_TC1_CMR
 
	`EQU
 (0xFFFA0044Ë;- (
TC1
Ë
Ch™√l
 
Mode
 
	`Regi°î
 (
C≠tuª
 Modê/ 
Wavef‹m
 Mode)

4198 
AT91C_TC1_RA
 
	`EQU
 (0xFFFA0054Ë;- (
TC1
Ë
Regi°î
 
A


4199 
AT91C_TC1_RC
 
	`EQU
 (0xFFFA005CË;- (
TC1
Ë
Regi°î
 
C


4200 
AT91C_TC1_IMR
 
	`EQU
 (0xFFFA006CË;- (
TC1
Ë
I¡îru±
 
Mask
 
Regi°î


4201 
AT91C_TC1_CV
 
	`EQU
 (0xFFFA0050Ë;- (
TC1
Ë
Cou¡î
 
VÆue


4203 
AT91C_TC2_CMR
 
	`EQU
 (0xFFFA0084Ë;- (
TC2
Ë
Ch™√l
 
Mode
 
	`Regi°î
 (
C≠tuª
 Modê/ 
Wavef‹m
 Mode)

4204 
AT91C_TC2_CCR
 
	`EQU
 (0xFFFA0080Ë;- (
TC2
Ë
Ch™√l
 
C⁄åﬁ
 
Regi°î


4205 
AT91C_TC2_CV
 
	`EQU
 (0xFFFA0090Ë;- (
TC2
Ë
Cou¡î
 
VÆue


4206 
AT91C_TC2_RA
 
	`EQU
 (0xFFFA0094Ë;- (
TC2
Ë
Regi°î
 
A


4207 
AT91C_TC2_RB
 
	`EQU
 (0xFFFA0098Ë;- (
TC2
Ë
Regi°î
 
B


4208 
AT91C_TC2_IDR
 
	`EQU
 (0xFFFA00A8Ë;- (
TC2
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4209 
AT91C_TC2_IMR
 
	`EQU
 (0xFFFA00ACË;- (
TC2
Ë
I¡îru±
 
Mask
 
Regi°î


4210 
AT91C_TC2_RC
 
	`EQU
 (0xFFFA009CË;- (
TC2
Ë
Regi°î
 
C


4211 
AT91C_TC2_IER
 
	`EQU
 (0xFFFA00A4Ë;- (
TC2
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4212 
AT91C_TC2_SR
 
	`EQU
 (0xFFFA00A0Ë;- (
TC2
Ë
Sètus
 
Regi°î


4214 
AT91C_TCB_BMR
 
	`EQU
 (0xFFFA00C4Ë;- (
TCB
Ë
TC
 
Block
 
Mode
 
Regi°î


4215 
AT91C_TCB_BCR
 
	`EQU
 (0xFFFA00C0Ë;- (
TCB
Ë
TC
 
Block
 
C⁄åﬁ
 
Regi°î


4217 
AT91C_CAN_MB0_MDL
 
	`EQU
 (0xFFFD0214Ë;- (
CAN_MB0
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4218 
AT91C_CAN_MB0_MAM
 
	`EQU
 (0xFFFD0204Ë;- (
CAN_MB0
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4219 
AT91C_CAN_MB0_MCR
 
	`EQU
 (0xFFFD021CË;- (
CAN_MB0
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4220 
AT91C_CAN_MB0_MID
 
	`EQU
 (0xFFFD0208Ë;- (
CAN_MB0
Ë
MaûBox
 
ID
 
Regi°î


4221 
AT91C_CAN_MB0_MSR
 
	`EQU
 (0xFFFD0210Ë;- (
CAN_MB0
Ë
MaûBox
 
Sètus
 
Regi°î


4222 
AT91C_CAN_MB0_MFID
 
	`EQU
 (0xFFFD020CË;- (
CAN_MB0
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4223 
AT91C_CAN_MB0_MDH
 
	`EQU
 (0xFFFD0218Ë;- (
CAN_MB0
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4224 
AT91C_CAN_MB0_MMR
 
	`EQU
 (0xFFFD0200Ë;- (
CAN_MB0
Ë
MaûBox
 
Mode
 
Regi°î


4226 
AT91C_CAN_MB1_MDL
 
	`EQU
 (0xFFFD0234Ë;- (
CAN_MB1
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4227 
AT91C_CAN_MB1_MID
 
	`EQU
 (0xFFFD0228Ë;- (
CAN_MB1
Ë
MaûBox
 
ID
 
Regi°î


4228 
AT91C_CAN_MB1_MMR
 
	`EQU
 (0xFFFD0220Ë;- (
CAN_MB1
Ë
MaûBox
 
Mode
 
Regi°î


4229 
AT91C_CAN_MB1_MSR
 
	`EQU
 (0xFFFD0230Ë;- (
CAN_MB1
Ë
MaûBox
 
Sètus
 
Regi°î


4230 
AT91C_CAN_MB1_MAM
 
	`EQU
 (0xFFFD0224Ë;- (
CAN_MB1
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4231 
AT91C_CAN_MB1_MDH
 
	`EQU
 (0xFFFD0238Ë;- (
CAN_MB1
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4232 
AT91C_CAN_MB1_MCR
 
	`EQU
 (0xFFFD023CË;- (
CAN_MB1
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4233 
AT91C_CAN_MB1_MFID
 
	`EQU
 (0xFFFD022CË;- (
CAN_MB1
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4235 
AT91C_CAN_MB2_MCR
 
	`EQU
 (0xFFFD025CË;- (
CAN_MB2
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4236 
AT91C_CAN_MB2_MDH
 
	`EQU
 (0xFFFD0258Ë;- (
CAN_MB2
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4237 
AT91C_CAN_MB2_MID
 
	`EQU
 (0xFFFD0248Ë;- (
CAN_MB2
Ë
MaûBox
 
ID
 
Regi°î


4238 
AT91C_CAN_MB2_MDL
 
	`EQU
 (0xFFFD0254Ë;- (
CAN_MB2
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4239 
AT91C_CAN_MB2_MMR
 
	`EQU
 (0xFFFD0240Ë;- (
CAN_MB2
Ë
MaûBox
 
Mode
 
Regi°î


4240 
AT91C_CAN_MB2_MAM
 
	`EQU
 (0xFFFD0244Ë;- (
CAN_MB2
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4241 
AT91C_CAN_MB2_MFID
 
	`EQU
 (0xFFFD024CË;- (
CAN_MB2
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4242 
AT91C_CAN_MB2_MSR
 
	`EQU
 (0xFFFD0250Ë;- (
CAN_MB2
Ë
MaûBox
 
Sètus
 
Regi°î


4244 
AT91C_CAN_MB3_MFID
 
	`EQU
 (0xFFFD026CË;- (
CAN_MB3
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4245 
AT91C_CAN_MB3_MAM
 
	`EQU
 (0xFFFD0264Ë;- (
CAN_MB3
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4246 
AT91C_CAN_MB3_MID
 
	`EQU
 (0xFFFD0268Ë;- (
CAN_MB3
Ë
MaûBox
 
ID
 
Regi°î


4247 
AT91C_CAN_MB3_MCR
 
	`EQU
 (0xFFFD027CË;- (
CAN_MB3
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4248 
AT91C_CAN_MB3_MMR
 
	`EQU
 (0xFFFD0260Ë;- (
CAN_MB3
Ë
MaûBox
 
Mode
 
Regi°î


4249 
AT91C_CAN_MB3_MSR
 
	`EQU
 (0xFFFD0270Ë;- (
CAN_MB3
Ë
MaûBox
 
Sètus
 
Regi°î


4250 
AT91C_CAN_MB3_MDL
 
	`EQU
 (0xFFFD0274Ë;- (
CAN_MB3
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4251 
AT91C_CAN_MB3_MDH
 
	`EQU
 (0xFFFD0278Ë;- (
CAN_MB3
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4253 
AT91C_CAN_MB4_MID
 
	`EQU
 (0xFFFD0288Ë;- (
CAN_MB4
Ë
MaûBox
 
ID
 
Regi°î


4254 
AT91C_CAN_MB4_MMR
 
	`EQU
 (0xFFFD0280Ë;- (
CAN_MB4
Ë
MaûBox
 
Mode
 
Regi°î


4255 
AT91C_CAN_MB4_MDH
 
	`EQU
 (0xFFFD0298Ë;- (
CAN_MB4
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4256 
AT91C_CAN_MB4_MFID
 
	`EQU
 (0xFFFD028CË;- (
CAN_MB4
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4257 
AT91C_CAN_MB4_MSR
 
	`EQU
 (0xFFFD0290Ë;- (
CAN_MB4
Ë
MaûBox
 
Sètus
 
Regi°î


4258 
AT91C_CAN_MB4_MCR
 
	`EQU
 (0xFFFD029CË;- (
CAN_MB4
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4259 
AT91C_CAN_MB4_MDL
 
	`EQU
 (0xFFFD0294Ë;- (
CAN_MB4
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4260 
AT91C_CAN_MB4_MAM
 
	`EQU
 (0xFFFD0284Ë;- (
CAN_MB4
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4262 
AT91C_CAN_MB5_MSR
 
	`EQU
 (0xFFFD02B0Ë;- (
CAN_MB5
Ë
MaûBox
 
Sètus
 
Regi°î


4263 
AT91C_CAN_MB5_MCR
 
	`EQU
 (0xFFFD02BCË;- (
CAN_MB5
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4264 
AT91C_CAN_MB5_MFID
 
	`EQU
 (0xFFFD02ACË;- (
CAN_MB5
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4265 
AT91C_CAN_MB5_MDH
 
	`EQU
 (0xFFFD02B8Ë;- (
CAN_MB5
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4266 
AT91C_CAN_MB5_MID
 
	`EQU
 (0xFFFD02A8Ë;- (
CAN_MB5
Ë
MaûBox
 
ID
 
Regi°î


4267 
AT91C_CAN_MB5_MMR
 
	`EQU
 (0xFFFD02A0Ë;- (
CAN_MB5
Ë
MaûBox
 
Mode
 
Regi°î


4268 
AT91C_CAN_MB5_MDL
 
	`EQU
 (0xFFFD02B4Ë;- (
CAN_MB5
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4269 
AT91C_CAN_MB5_MAM
 
	`EQU
 (0xFFFD02A4Ë;- (
CAN_MB5
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4271 
AT91C_CAN_MB6_MFID
 
	`EQU
 (0xFFFD02CCË;- (
CAN_MB6
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4272 
AT91C_CAN_MB6_MID
 
	`EQU
 (0xFFFD02C8Ë;- (
CAN_MB6
Ë
MaûBox
 
ID
 
Regi°î


4273 
AT91C_CAN_MB6_MAM
 
	`EQU
 (0xFFFD02C4Ë;- (
CAN_MB6
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4274 
AT91C_CAN_MB6_MSR
 
	`EQU
 (0xFFFD02D0Ë;- (
CAN_MB6
Ë
MaûBox
 
Sètus
 
Regi°î


4275 
AT91C_CAN_MB6_MDL
 
	`EQU
 (0xFFFD02D4Ë;- (
CAN_MB6
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4276 
AT91C_CAN_MB6_MCR
 
	`EQU
 (0xFFFD02DCË;- (
CAN_MB6
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4277 
AT91C_CAN_MB6_MDH
 
	`EQU
 (0xFFFD02D8Ë;- (
CAN_MB6
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4278 
AT91C_CAN_MB6_MMR
 
	`EQU
 (0xFFFD02C0Ë;- (
CAN_MB6
Ë
MaûBox
 
Mode
 
Regi°î


4280 
AT91C_CAN_MB7_MCR
 
	`EQU
 (0xFFFD02FCË;- (
CAN_MB7
Ë
MaûBox
 
C⁄åﬁ
 
Regi°î


4281 
AT91C_CAN_MB7_MDH
 
	`EQU
 (0xFFFD02F8Ë;- (
CAN_MB7
Ë
MaûBox
 
D©a
 
High
 
Regi°î


4282 
AT91C_CAN_MB7_MFID
 
	`EQU
 (0xFFFD02ECË;- (
CAN_MB7
Ë
MaûBox
 
Famûy
 
ID
 
Regi°î


4283 
AT91C_CAN_MB7_MDL
 
	`EQU
 (0xFFFD02F4Ë;- (
CAN_MB7
Ë
MaûBox
 
D©a
 
Low
 
Regi°î


4284 
AT91C_CAN_MB7_MID
 
	`EQU
 (0xFFFD02E8Ë;- (
CAN_MB7
Ë
MaûBox
 
ID
 
Regi°î


4285 
AT91C_CAN_MB7_MMR
 
	`EQU
 (0xFFFD02E0Ë;- (
CAN_MB7
Ë
MaûBox
 
Mode
 
Regi°î


4286 
AT91C_CAN_MB7_MAM
 
	`EQU
 (0xFFFD02E4Ë;- (
CAN_MB7
Ë
MaûBox
 
Ac˚±™˚
 
Mask
 
Regi°î


4287 
AT91C_CAN_MB7_MSR
 
	`EQU
 (0xFFFD02F0Ë;- (
CAN_MB7
Ë
MaûBox
 
Sètus
 
Regi°î


4289 
AT91C_CAN_TCR
 
	`EQU
 (0xFFFD0024Ë;- (
CAN
Ë
Tøns„r
 
Comm™d
 
Regi°î


4290 
AT91C_CAN_IMR
 
	`EQU
 (0xFFFD000CË;- (
CAN
Ë
I¡îru±
 
Mask
 
Regi°î


4291 
AT91C_CAN_IER
 
	`EQU
 (0xFFFD0004Ë;- (
CAN
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4292 
AT91C_CAN_ECR
 
	`EQU
 (0xFFFD0020Ë;- (
CAN
Ë
Eº‹
 
Cou¡î
 
Regi°î


4293 
AT91C_CAN_TIMESTP
 
	`EQU
 (0xFFFD001CË;- (
CAN
Ë
Time
 
Sèmp
 
Regi°î


4294 
AT91C_CAN_MR
 
	`EQU
 (0xFFFD0000Ë;- (
CAN
Ë
Mode
 
Regi°î


4295 
AT91C_CAN_IDR
 
	`EQU
 (0xFFFD0008Ë;- (
CAN
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4296 
AT91C_CAN_ACR
 
	`EQU
 (0xFFFD0028Ë;- (
CAN
Ë
Ab‹t
 
Comm™d
 
Regi°î


4297 
AT91C_CAN_TIM
 
	`EQU
 (0xFFFD0018Ë;- (
CAN
Ë
Timî
 
Regi°î


4298 
AT91C_CAN_SR
 
	`EQU
 (0xFFFD0010Ë;- (
CAN
Ë
Sètus
 
Regi°î


4299 
AT91C_CAN_BR
 
	`EQU
 (0xFFFD0014Ë;- (
CAN
Ë
Baudøã
 
Regi°î


4300 
AT91C_CAN_VR
 
	`EQU
 (0xFFFD00FCË;- (
CAN
Ë
Vîsi⁄
 
Regi°î


4302 
AT91C_EMAC_ISR
 
	`EQU
 (0xFFFDC024Ë;- (
EMAC
Ë
I¡îru±
 
Sètus
 
Regi°î


4303 
AT91C_EMAC_SA4H
 
	`EQU
 (0xFFFDC0B4Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 4 
T›
, 
La°
 2 
byãs


4304 
AT91C_EMAC_SA1L
 
	`EQU
 (0xFFFDC098Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 1 
BŸtom
, 
Fú°
 4 
byãs


4305 
AT91C_EMAC_ELE
 
	`EQU
 (0xFFFDC078Ë;- (
EMAC
Ë
Ex˚ssive
 
Lígth
 
Eº‹s
 
Regi°î


4306 
AT91C_EMAC_LCOL
 
	`EQU
 (0xFFFDC05CË;- (
EMAC
Ë
L©e
 
Cﬁlisi⁄
 
Regi°î


4307 
AT91C_EMAC_RLE
 
	`EQU
 (0xFFFDC088Ë;- (
EMAC
Ë
Re˚ive
 
Lígth
 
Fõld
 
Mism©ch
 
Regi°î


4308 
AT91C_EMAC_WOL
 
	`EQU
 (0xFFFDC0C4Ë;- (
EMAC
Ë
Wake
 
On
 
LAN
 
Regi°î


4309 
AT91C_EMAC_DTF
 
	`EQU
 (0xFFFDC058Ë;- (
EMAC
Ë
De„ºed
 
Tønsmissi⁄
 
Føme
 
Regi°î


4310 
AT91C_EMAC_TUND
 
	`EQU
 (0xFFFDC064Ë;- (
EMAC
Ë
Tønsmô
 
Undîrun
 
Eº‹
 
Regi°î


4311 
AT91C_EMAC_NCR
 
	`EQU
 (0xFFFDC000Ë;- (
EMAC
Ë
Nëw‹k
 
C⁄åﬁ
 
Regi°î


4312 
AT91C_EMAC_SA4L
 
	`EQU
 (0xFFFDC0B0Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 4 
BŸtom
, 
Fú°
 4 
byãs


4313 
AT91C_EMAC_RSR
 
	`EQU
 (0xFFFDC020Ë;- (
EMAC
Ë
Re˚ive
 
Sètus
 
Regi°î


4314 
AT91C_EMAC_SA3L
 
	`EQU
 (0xFFFDC0A8Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 3 
BŸtom
, 
Fú°
 4 
byãs


4315 
AT91C_EMAC_TSR
 
	`EQU
 (0xFFFDC014Ë;- (
EMAC
Ë
Tønsmô
 
Sètus
 
Regi°î


4316 
AT91C_EMAC_IDR
 
	`EQU
 (0xFFFDC02CË;- (
EMAC
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4317 
AT91C_EMAC_RSE
 
	`EQU
 (0xFFFDC074Ë;- (
EMAC
Ë
Re˚ive
 
Symbﬁ
 
Eº‹s
 
Regi°î


4318 
AT91C_EMAC_ECOL
 
	`EQU
 (0xFFFDC060Ë;- (
EMAC
Ë
Ex˚ssive
 
Cﬁlisi⁄
 
Regi°î


4319 
AT91C_EMAC_TID
 
	`EQU
 (0xFFFDC0B8Ë;- (
EMAC
Ë
Ty≥
 
ID
 
Checkög
 
Regi°î


4320 
AT91C_EMAC_HRB
 
	`EQU
 (0xFFFDC090Ë;- (
EMAC
Ë
Hash
 
Addªss
 
BŸtom
[31:0]

4321 
AT91C_EMAC_TBQP
 
	`EQU
 (0xFFFDC01CË;- (
EMAC
Ë
Tønsmô
 
Buf„r
 
Queue
 
Poöãr


4322 
AT91C_EMAC_USRIO
 
	`EQU
 (0xFFFDC0C0Ë;- (
EMAC
Ë
USER
 
I≈ut
/
Ouçut
 
Regi°î


4323 
AT91C_EMAC_PTR
 
	`EQU
 (0xFFFDC038Ë;- (
EMAC
Ë
Pau£
 
Time
 
Regi°î


4324 
AT91C_EMAC_SA2H
 
	`EQU
 (0xFFFDC0A4Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 2 
T›
, 
La°
 2 
byãs


4325 
AT91C_EMAC_ROV
 
	`EQU
 (0xFFFDC070Ë;- (
EMAC
Ë
Re˚ive
 
Ovîrun
 
Eº‹s
 
Regi°î


4326 
AT91C_EMAC_ALE
 
	`EQU
 (0xFFFDC054Ë;- (
EMAC
Ë
Alignmít
 
Eº‹
 
Regi°î


4327 
AT91C_EMAC_RJA
 
	`EQU
 (0xFFFDC07CË;- (
EMAC
Ë
Re˚ive
 
Jabbîs
 
Regi°î


4328 
AT91C_EMAC_RBQP
 
	`EQU
 (0xFFFDC018Ë;- (
EMAC
Ë
Re˚ive
 
Buf„r
 
Queue
 
Poöãr


4329 
AT91C_EMAC_TPF
 
	`EQU
 (0xFFFDC08CË;- (
EMAC
Ë
Tønsmôãd
 
Pau£
 
Fømes
 
Regi°î


4330 
AT91C_EMAC_NCFGR
 
	`EQU
 (0xFFFDC004Ë;- (
EMAC
Ë
Nëw‹k
 
C⁄figuøti⁄
 
Regi°î


4331 
AT91C_EMAC_HRT
 
	`EQU
 (0xFFFDC094Ë;- (
EMAC
Ë
Hash
 
Addªss
 
T›
[63:32]

4332 
AT91C_EMAC_USF
 
	`EQU
 (0xFFFDC080Ë;- (
EMAC
Ë
Undîsize
 
Fømes
 
Regi°î


4333 
AT91C_EMAC_FCSE
 
	`EQU
 (0xFFFDC050Ë;- (
EMAC
Ë
Føme
 
Check
 
Sequí˚
 
Eº‹
 
Regi°î


4334 
AT91C_EMAC_TPQ
 
	`EQU
 (0xFFFDC0BCË;- (
EMAC
Ë
Tønsmô
 
Pau£
 
Qu™tum
 
Regi°î


4335 
AT91C_EMAC_MAN
 
	`EQU
 (0xFFFDC034Ë;- (
EMAC
Ë
PHY
 
Maöã«n˚
 
Regi°î


4336 
AT91C_EMAC_FTO
 
	`EQU
 (0xFFFDC040Ë;- (
EMAC
Ë
Fømes
 
Tønsmôãd
 
OK
 
Regi°î


4337 
AT91C_EMAC_REV
 
	`EQU
 (0xFFFDC0FCË;- (
EMAC
Ë
Revisi⁄
 
Regi°î


4338 
AT91C_EMAC_IMR
 
	`EQU
 (0xFFFDC030Ë;- (
EMAC
Ë
I¡îru±
 
Mask
 
Regi°î


4339 
AT91C_EMAC_SCF
 
	`EQU
 (0xFFFDC044Ë;- (
EMAC
Ë
SögÀ
 
Cﬁlisi⁄
 
Føme
 
Regi°î


4340 
AT91C_EMAC_PFR
 
	`EQU
 (0xFFFDC03CË;- (
EMAC
Ë
Pau£
 
Fømes
 
ª˚ived
 
Regi°î


4341 
AT91C_EMAC_MCF
 
	`EQU
 (0xFFFDC048Ë;- (
EMAC
Ë
Mu…ùÀ
 
Cﬁlisi⁄
 
Føme
 
Regi°î


4342 
AT91C_EMAC_NSR
 
	`EQU
 (0xFFFDC008Ë;- (
EMAC
Ë
Nëw‹k
 
Sètus
 
Regi°î


4343 
AT91C_EMAC_SA2L
 
	`EQU
 (0xFFFDC0A0Ë;- (
EMAC
Ë
S≥cific
 
Addªss
 2 
BŸtom
, 
Fú°
 4 
byãs


4344 
AT91C_EMAC_FRO
 
	`EQU
 (0xFFFDC04CË;- (
EMAC
Ë
Fømes
 
Re˚ived
 
OK
 
Regi°î


4345 
AT91C_EMAC_IER
 
	`EQU
 (0xFFFDC028Ë;- (
EMAC
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4346 
AT91C_EMAC_SA1H
 
	`EQU
 (0xFFFDC09CË;- (
EMAC
Ë
S≥cific
 
Addªss
 1 
T›
, 
La°
 2 
byãs


4347 
AT91C_EMAC_CSE
 
	`EQU
 (0xFFFDC068Ë;- (
EMAC
Ë
C¨rõr
 
Sí£
 
Eº‹
 
Regi°î


4348 
AT91C_EMAC_SA3H
 
	`EQU
 (0xFFFDC0ACË;- (
EMAC
Ë
S≥cific
 
Addªss
 3 
T›
, 
La°
 2 
byãs


4349 
AT91C_EMAC_RRE
 
	`EQU
 (0xFFFDC06CË;- (
EMAC
Ë
Re˚ive
 
Ressour˚
 
Eº‹
 
Regi°î


4350 
AT91C_EMAC_STE
 
	`EQU
 (0xFFFDC084Ë;- (
EMAC
Ë
SQE
 
Te°
 
Eº‹
 
Regi°î


4352 
AT91C_ADC_PTSR
 
	`EQU
 (0xFFFD8124Ë;- (
PDC_ADC
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4353 
AT91C_ADC_PTCR
 
	`EQU
 (0xFFFD8120Ë;- (
PDC_ADC
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4354 
AT91C_ADC_TNPR
 
	`EQU
 (0xFFFD8118Ë;- (
PDC_ADC
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4355 
AT91C_ADC_TNCR
 
	`EQU
 (0xFFFD811CË;- (
PDC_ADC
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4356 
AT91C_ADC_RNPR
 
	`EQU
 (0xFFFD8110Ë;- (
PDC_ADC
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4357 
AT91C_ADC_RNCR
 
	`EQU
 (0xFFFD8114Ë;- (
PDC_ADC
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4358 
AT91C_ADC_RPR
 
	`EQU
 (0xFFFD8100Ë;- (
PDC_ADC
Ë
Re˚ive
 
Poöãr
 
Regi°î


4359 
AT91C_ADC_TCR
 
	`EQU
 (0xFFFD810CË;- (
PDC_ADC
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4360 
AT91C_ADC_TPR
 
	`EQU
 (0xFFFD8108Ë;- (
PDC_ADC
Ë
Tønsmô
 
Poöãr
 
Regi°î


4361 
AT91C_ADC_RCR
 
	`EQU
 (0xFFFD8104Ë;- (
PDC_ADC
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4363 
AT91C_ADC_CDR2
 
	`EQU
 (0xFFFD8038Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 2

4364 
AT91C_ADC_CDR3
 
	`EQU
 (0xFFFD803CË;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 3

4365 
AT91C_ADC_CDR0
 
	`EQU
 (0xFFFD8030Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 0

4366 
AT91C_ADC_CDR5
 
	`EQU
 (0xFFFD8044Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 5

4367 
AT91C_ADC_CHDR
 
	`EQU
 (0xFFFD8014Ë;- (
ADC
ËADC 
Ch™√l
 
DißbÀ
 
Regi°î


4368 
AT91C_ADC_SR
 
	`EQU
 (0xFFFD801CË;- (
ADC
ËADC 
Sètus
 
Regi°î


4369 
AT91C_ADC_CDR4
 
	`EQU
 (0xFFFD8040Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 4

4370 
AT91C_ADC_CDR1
 
	`EQU
 (0xFFFD8034Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 1

4371 
AT91C_ADC_LCDR
 
	`EQU
 (0xFFFD8020Ë;- (
ADC
ËADC 
La°
 
C⁄vîãd
 
D©a
 
Regi°î


4372 
AT91C_ADC_IDR
 
	`EQU
 (0xFFFD8028Ë;- (
ADC
ËADC 
I¡îru±
 
DißbÀ
 
Regi°î


4373 
AT91C_ADC_CR
 
	`EQU
 (0xFFFD8000Ë;- (
ADC
ËADC 
C⁄åﬁ
 
Regi°î


4374 
AT91C_ADC_CDR7
 
	`EQU
 (0xFFFD804CË;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 7

4375 
AT91C_ADC_CDR6
 
	`EQU
 (0xFFFD8048Ë;- (
ADC
ËADC 
Ch™√l
 
D©a
 
Regi°î
 6

4376 
AT91C_ADC_IER
 
	`EQU
 (0xFFFD8024Ë;- (
ADC
ËADC 
I¡îru±
 
E«bÀ
 
Regi°î


4377 
AT91C_ADC_CHER
 
	`EQU
 (0xFFFD8010Ë;- (
ADC
ËADC 
Ch™√l
 
E«bÀ
 
Regi°î


4378 
AT91C_ADC_CHSR
 
	`EQU
 (0xFFFD8018Ë;- (
ADC
ËADC 
Ch™√l
 
Sètus
 
Regi°î


4379 
AT91C_ADC_MR
 
	`EQU
 (0xFFFD8004Ë;- (
ADC
ËADC 
Mode
 
Regi°î


4380 
AT91C_ADC_IMR
 
	`EQU
 (0xFFFD802CË;- (
ADC
ËADC 
I¡îru±
 
Mask
 
Regi°î


4382 
AT91C_AES_TPR
 
	`EQU
 (0xFFFA4108Ë;- (
PDC_AES
Ë
Tønsmô
 
Poöãr
 
Regi°î


4383 
AT91C_AES_PTCR
 
	`EQU
 (0xFFFA4120Ë;- (
PDC_AES
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4384 
AT91C_AES_RNPR
 
	`EQU
 (0xFFFA4110Ë;- (
PDC_AES
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4385 
AT91C_AES_TNCR
 
	`EQU
 (0xFFFA411CË;- (
PDC_AES
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4386 
AT91C_AES_TCR
 
	`EQU
 (0xFFFA410CË;- (
PDC_AES
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4387 
AT91C_AES_RCR
 
	`EQU
 (0xFFFA4104Ë;- (
PDC_AES
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4388 
AT91C_AES_RNCR
 
	`EQU
 (0xFFFA4114Ë;- (
PDC_AES
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4389 
AT91C_AES_TNPR
 
	`EQU
 (0xFFFA4118Ë;- (
PDC_AES
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4390 
AT91C_AES_RPR
 
	`EQU
 (0xFFFA4100Ë;- (
PDC_AES
Ë
Re˚ive
 
Poöãr
 
Regi°î


4391 
AT91C_AES_PTSR
 
	`EQU
 (0xFFFA4124Ë;- (
PDC_AES
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4393 
AT91C_AES_IVxR
 
	`EQU
 (0xFFFA4060Ë;- (
AES
Ë
Inôüliz©i⁄
 
Ve˘‹
 
x
 
Regi°î


4394 
AT91C_AES_MR
 
	`EQU
 (0xFFFA4004Ë;- (
AES
Ë
Mode
 
Regi°î


4395 
AT91C_AES_VR
 
	`EQU
 (0xFFFA40FCË;- (
AES
ËAES 
Vîsi⁄
 
Regi°î


4396 
AT91C_AES_ODATAxR
 
	`EQU
 (0xFFFA4050Ë;- (
AES
Ë
Ouçut
 
D©a
 
x
 
Regi°î


4397 
AT91C_AES_IDATAxR
 
	`EQU
 (0xFFFA4040Ë;- (
AES
Ë
I≈ut
 
D©a
 
x
 
Regi°î


4398 
AT91C_AES_CR
 
	`EQU
 (0xFFFA4000Ë;- (
AES
Ë
C⁄åﬁ
 
Regi°î


4399 
AT91C_AES_IDR
 
	`EQU
 (0xFFFA4014Ë;- (
AES
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4400 
AT91C_AES_IMR
 
	`EQU
 (0xFFFA4018Ë;- (
AES
Ë
I¡îru±
 
Mask
 
Regi°î


4401 
AT91C_AES_IER
 
	`EQU
 (0xFFFA4010Ë;- (
AES
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4402 
AT91C_AES_KEYWxR
 
	`EQU
 (0xFFFA4020Ë;- (
AES
Ë
Key
 
W‹d
 
x
 
Regi°î


4403 
AT91C_AES_ISR
 
	`EQU
 (0xFFFA401CË;- (
AES
Ë
I¡îru±
 
Sètus
 
Regi°î


4405 
AT91C_TDES_RNCR
 
	`EQU
 (0xFFFA8114Ë;- (
PDC_TDES
Ë
Re˚ive
 
Next
 
Cou¡î
 
Regi°î


4406 
AT91C_TDES_TCR
 
	`EQU
 (0xFFFA810CË;- (
PDC_TDES
Ë
Tønsmô
 
Cou¡î
 
Regi°î


4407 
AT91C_TDES_RCR
 
	`EQU
 (0xFFFA8104Ë;- (
PDC_TDES
Ë
Re˚ive
 
Cou¡î
 
Regi°î


4408 
AT91C_TDES_TNPR
 
	`EQU
 (0xFFFA8118Ë;- (
PDC_TDES
Ë
Tønsmô
 
Next
 
Poöãr
 
Regi°î


4409 
AT91C_TDES_RNPR
 
	`EQU
 (0xFFFA8110Ë;- (
PDC_TDES
Ë
Re˚ive
 
Next
 
Poöãr
 
Regi°î


4410 
AT91C_TDES_RPR
 
	`EQU
 (0xFFFA8100Ë;- (
PDC_TDES
Ë
Re˚ive
 
Poöãr
 
Regi°î


4411 
AT91C_TDES_TNCR
 
	`EQU
 (0xFFFA811CË;- (
PDC_TDES
Ë
Tønsmô
 
Next
 
Cou¡î
 
Regi°î


4412 
AT91C_TDES_TPR
 
	`EQU
 (0xFFFA8108Ë;- (
PDC_TDES
Ë
Tønsmô
 
Poöãr
 
Regi°î


4413 
AT91C_TDES_PTSR
 
	`EQU
 (0xFFFA8124Ë;- (
PDC_TDES
Ë
PDC
 
Tøns„r
 
Sètus
 
Regi°î


4414 
AT91C_TDES_PTCR
 
	`EQU
 (0xFFFA8120Ë;- (
PDC_TDES
Ë
PDC
 
Tøns„r
 
C⁄åﬁ
 
Regi°î


4416 
AT91C_TDES_KEY2WxR
 
	`EQU
 (0xFFFA8028Ë;- (
TDES
Ë
Key
 2 
W‹d
 
x
 
Regi°î


4417 
AT91C_TDES_KEY3WxR
 
	`EQU
 (0xFFFA8030Ë;- (
TDES
Ë
Key
 3 
W‹d
 
x
 
Regi°î


4418 
AT91C_TDES_IDR
 
	`EQU
 (0xFFFA8014Ë;- (
TDES
Ë
I¡îru±
 
DißbÀ
 
Regi°î


4419 
AT91C_TDES_VR
 
	`EQU
 (0xFFFA80FCË;- (
TDES
ËTDES 
Vîsi⁄
 
Regi°î


4420 
AT91C_TDES_IVxR
 
	`EQU
 (0xFFFA8060Ë;- (
TDES
Ë
Inôüliz©i⁄
 
Ve˘‹
 
x
 
Regi°î


4421 
AT91C_TDES_ODATAxR
 
	`EQU
 (0xFFFA8050Ë;- (
TDES
Ë
Ouçut
 
D©a
 
x
 
Regi°î


4422 
AT91C_TDES_IMR
 
	`EQU
 (0xFFFA8018Ë;- (
TDES
Ë
I¡îru±
 
Mask
 
Regi°î


4423 
AT91C_TDES_MR
 
	`EQU
 (0xFFFA8004Ë;- (
TDES
Ë
Mode
 
Regi°î


4424 
AT91C_TDES_CR
 
	`EQU
 (0xFFFA8000Ë;- (
TDES
Ë
C⁄åﬁ
 
Regi°î


4425 
AT91C_TDES_IER
 
	`EQU
 (0xFFFA8010Ë;- (
TDES
Ë
I¡îru±
 
E«bÀ
 
Regi°î


4426 
AT91C_TDES_ISR
 
	`EQU
 (0xFFFA801CË;- (
TDES
Ë
I¡îru±
 
Sètus
 
Regi°î


4427 
AT91C_TDES_IDATAxR
 
	`EQU
 (0xFFFA8040Ë;- (
TDES
Ë
I≈ut
 
D©a
 
x
 
Regi°î


4428 
AT91C_TDES_KEY1WxR
 
	`EQU
 (0xFFFA8020Ë;- (
TDES
Ë
Key
 1 
W‹d
 
x
 
Regi°î


4433 
AT91C_PIO_PA0
 
	`EQU
 (1 << 0Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA0


4434 
AT91C_PA0_RXD0
 
	`EQU
 (
AT91C_PIO_PA0
Ë;- 
USART
 0 
Re˚ive
 
D©a


4435 
AT91C_PIO_PA1
 
	`EQU
 (1 << 1Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA1


4436 
AT91C_PA1_TXD0
 
	`EQU
 (
AT91C_PIO_PA1
Ë;- 
USART
 0 
Tønsmô
 
D©a


4437 
AT91C_PIO_PA10
 
	`EQU
 (1 << 10Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA10


4438 
AT91C_PA10_TWD
 
	`EQU
 (
AT91C_PIO_PA10
Ë;- 
TWI
 
Two
-
wúe
 
Sîül
 
D©a


4439 
AT91C_PIO_PA11
 
	`EQU
 (1 << 11Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA11


4440 
AT91C_PA11_TWCK
 
	`EQU
 (
AT91C_PIO_PA11
Ë;- 
TWI
 
Two
-
wúe
 
Sîül
 
Clock


4441 
AT91C_PIO_PA12
 
	`EQU
 (1 << 12Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA12


4442 
AT91C_PA12_NPCS00
 
	`EQU
 (
AT91C_PIO_PA12
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 0

4443 
AT91C_PIO_PA13
 
	`EQU
 (1 << 13Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA13


4444 
AT91C_PA13_NPCS01
 
	`EQU
 (
AT91C_PIO_PA13
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4445 
AT91C_PA13_PCK1
 
	`EQU
 (
AT91C_PIO_PA13
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 1

4446 
AT91C_PIO_PA14
 
	`EQU
 (1 << 14Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA14


4447 
AT91C_PA14_NPCS02
 
	`EQU
 (
AT91C_PIO_PA14
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4448 
AT91C_PA14_IRQ1
 
	`EQU
 (
AT91C_PIO_PA14
Ë;- 
Exã∫Æ
 
I¡îru±
 1

4449 
AT91C_PIO_PA15
 
	`EQU
 (1 << 15Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA15


4450 
AT91C_PA15_NPCS03
 
	`EQU
 (
AT91C_PIO_PA15
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4451 
AT91C_PA15_TCLK2
 
	`EQU
 (
AT91C_PIO_PA15
Ë;- 
Timî
 
Cou¡î
 2 
exã∫Æ
 
˛ock
 
öput


4452 
AT91C_PIO_PA16
 
	`EQU
 (1 << 16Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA16


4453 
AT91C_PA16_MISO0
 
	`EQU
 (
AT91C_PIO_PA16
Ë;- 
SPI
 0 
Ma°î
 
In
 
Sœve


4454 
AT91C_PIO_PA17
 
	`EQU
 (1 << 17Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA17


4455 
AT91C_PA17_MOSI0
 
	`EQU
 (
AT91C_PIO_PA17
Ë;- 
SPI
 0 
Ma°î
 
Out
 
Sœve


4456 
AT91C_PIO_PA18
 
	`EQU
 (1 << 18Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA18


4457 
AT91C_PA18_SPCK0
 
	`EQU
 (
AT91C_PIO_PA18
Ë;- 
SPI
 0 
Sîül
 
Clock


4458 
AT91C_PIO_PA19
 
	`EQU
 (1 << 19Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA19


4459 
AT91C_PA19_CANRX
 
	`EQU
 (
AT91C_PIO_PA19
Ë;- 
CAN
 
Re˚ive


4460 
AT91C_PIO_PA2
 
	`EQU
 (1 << 2Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA2


4461 
AT91C_PA2_SCK0
 
	`EQU
 (
AT91C_PIO_PA2
Ë;- 
USART
 0 
Sîül
 
Clock


4462 
AT91C_PA2_NPCS11
 
	`EQU
 (
AT91C_PIO_PA2
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4463 
AT91C_PIO_PA20
 
	`EQU
 (1 << 20Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA20


4464 
AT91C_PA20_CANTX
 
	`EQU
 (
AT91C_PIO_PA20
Ë;- 
CAN
 
Tønsmô


4465 
AT91C_PIO_PA21
 
	`EQU
 (1 << 21Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA21


4466 
AT91C_PA21_TF
 
	`EQU
 (
AT91C_PIO_PA21
Ë;- 
SSC
 
Tønsmô
 
Føme
 
Sync


4467 
AT91C_PA21_NPCS10
 
	`EQU
 (
AT91C_PIO_PA21
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 0

4468 
AT91C_PIO_PA22
 
	`EQU
 (1 << 22Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA22


4469 
AT91C_PA22_TK
 
	`EQU
 (
AT91C_PIO_PA22
Ë;- 
SSC
 
Tønsmô
 
Clock


4470 
AT91C_PA22_SPCK1
 
	`EQU
 (
AT91C_PIO_PA22
Ë;- 
SPI
 1 
Sîül
 
Clock


4471 
AT91C_PIO_PA23
 
	`EQU
 (1 << 23Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA23


4472 
AT91C_PA23_TD
 
	`EQU
 (
AT91C_PIO_PA23
Ë;- 
SSC
 
Tønsmô
 
d©a


4473 
AT91C_PA23_MOSI1
 
	`EQU
 (
AT91C_PIO_PA23
Ë;- 
SPI
 1 
Ma°î
 
Out
 
Sœve


4474 
AT91C_PIO_PA24
 
	`EQU
 (1 << 24Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA24


4475 
AT91C_PA24_RD
 
	`EQU
 (
AT91C_PIO_PA24
Ë;- 
SSC
 
Re˚ive
 
D©a


4476 
AT91C_PA24_MISO1
 
	`EQU
 (
AT91C_PIO_PA24
Ë;- 
SPI
 1 
Ma°î
 
In
 
Sœve


4477 
AT91C_PIO_PA25
 
	`EQU
 (1 << 25Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA25


4478 
AT91C_PA25_RK
 
	`EQU
 (
AT91C_PIO_PA25
Ë;- 
SSC
 
Re˚ive
 
Clock


4479 
AT91C_PA25_NPCS11
 
	`EQU
 (
AT91C_PIO_PA25
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4480 
AT91C_PIO_PA26
 
	`EQU
 (1 << 26Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA26


4481 
AT91C_PA26_RF
 
	`EQU
 (
AT91C_PIO_PA26
Ë;- 
SSC
 
Re˚ive
 
Føme
 
Sync


4482 
AT91C_PA26_NPCS12
 
	`EQU
 (
AT91C_PIO_PA26
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4483 
AT91C_PIO_PA27
 
	`EQU
 (1 << 27Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA27


4484 
AT91C_PA27_DRXD
 
	`EQU
 (
AT91C_PIO_PA27
Ë;- 
DBGU
 
Debug
 
Re˚ive
 
D©a


4485 
AT91C_PA27_PCK3
 
	`EQU
 (
AT91C_PIO_PA27
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 3

4486 
AT91C_PIO_PA28
 
	`EQU
 (1 << 28Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA28


4487 
AT91C_PA28_DTXD
 
	`EQU
 (
AT91C_PIO_PA28
Ë;- 
DBGU
 
Debug
 
Tønsmô
 
D©a


4488 
AT91C_PIO_PA29
 
	`EQU
 (1 << 29Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA29


4489 
AT91C_PA29_FIQ
 
	`EQU
 (
AT91C_PIO_PA29
Ë;- 
AIC
 
Fa°
 
I¡îru±
 
I≈ut


4490 
AT91C_PA29_NPCS13
 
	`EQU
 (
AT91C_PIO_PA29
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4491 
AT91C_PIO_PA3
 
	`EQU
 (1 << 3Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA3


4492 
AT91C_PA3_RTS0
 
	`EQU
 (
AT91C_PIO_PA3
Ë;- 
USART
 0 
Ródy
 
To
 
Síd


4493 
AT91C_PA3_NPCS12
 
	`EQU
 (
AT91C_PIO_PA3
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4494 
AT91C_PIO_PA30
 
	`EQU
 (1 << 30Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA30


4495 
AT91C_PA30_IRQ0
 
	`EQU
 (
AT91C_PIO_PA30
Ë;- 
Exã∫Æ
 
I¡îru±
 0

4496 
AT91C_PA30_PCK2
 
	`EQU
 (
AT91C_PIO_PA30
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 2

4497 
AT91C_PIO_PA4
 
	`EQU
 (1 << 4Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA4


4498 
AT91C_PA4_CTS0
 
	`EQU
 (
AT91C_PIO_PA4
Ë;- 
USART
 0 
CÀ¨
 
To
 
Síd


4499 
AT91C_PA4_NPCS13
 
	`EQU
 (
AT91C_PIO_PA4
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4500 
AT91C_PIO_PA5
 
	`EQU
 (1 << 5Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA5


4501 
AT91C_PA5_RXD1
 
	`EQU
 (
AT91C_PIO_PA5
Ë;- 
USART
 1 
Re˚ive
 
D©a


4502 
AT91C_PIO_PA6
 
	`EQU
 (1 << 6Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA6


4503 
AT91C_PA6_TXD1
 
	`EQU
 (
AT91C_PIO_PA6
Ë;- 
USART
 1 
Tønsmô
 
D©a


4504 
AT91C_PIO_PA7
 
	`EQU
 (1 << 7Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA7


4505 
AT91C_PA7_SCK1
 
	`EQU
 (
AT91C_PIO_PA7
Ë;- 
USART
 1 
Sîül
 
Clock


4506 
AT91C_PA7_NPCS01
 
	`EQU
 (
AT91C_PIO_PA7
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4507 
AT91C_PIO_PA8
 
	`EQU
 (1 << 8Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA8


4508 
AT91C_PA8_RTS1
 
	`EQU
 (
AT91C_PIO_PA8
Ë;- 
USART
 1 
Ródy
 
To
 
Síd


4509 
AT91C_PA8_NPCS02
 
	`EQU
 (
AT91C_PIO_PA8
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4510 
AT91C_PIO_PA9
 
	`EQU
 (1 << 9Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PA9


4511 
AT91C_PA9_CTS1
 
	`EQU
 (
AT91C_PIO_PA9
Ë;- 
USART
 1 
CÀ¨
 
To
 
Síd


4512 
AT91C_PA9_NPCS03
 
	`EQU
 (
AT91C_PIO_PA9
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4513 
AT91C_PIO_PB0
 
	`EQU
 (1 << 0Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB0


4514 
AT91C_PB0_ETXCK_EREFCK
 
	`EQU
 (
AT91C_PIO_PB0
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
Clock
/
Re„ªn˚
 Clock

4515 
AT91C_PB0_PCK0
 
	`EQU
 (
AT91C_PIO_PB0
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 0

4516 
AT91C_PIO_PB1
 
	`EQU
 (1 << 1Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB1


4517 
AT91C_PB1_ETXEN
 
	`EQU
 (
AT91C_PIO_PB1
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
E«bÀ


4518 
AT91C_PIO_PB10
 
	`EQU
 (1 << 10Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB10


4519 
AT91C_PB10_ETX2
 
	`EQU
 (
AT91C_PIO_PB10
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
D©a
 2

4520 
AT91C_PB10_NPCS11
 
	`EQU
 (
AT91C_PIO_PB10
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4521 
AT91C_PIO_PB11
 
	`EQU
 (1 << 11Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB11


4522 
AT91C_PB11_ETX3
 
	`EQU
 (
AT91C_PIO_PB11
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
D©a
 3

4523 
AT91C_PB11_NPCS12
 
	`EQU
 (
AT91C_PIO_PB11
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4524 
AT91C_PIO_PB12
 
	`EQU
 (1 << 12Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB12


4525 
AT91C_PB12_ETXER
 
	`EQU
 (
AT91C_PIO_PB12
Ë;- 
Ethî√t
 
MAC
 
Tønsmikt
 
Codög
 
Eº‹


4526 
AT91C_PB12_TCLK0
 
	`EQU
 (
AT91C_PIO_PB12
Ë;- 
Timî
 
Cou¡î
 0 
exã∫Æ
 
˛ock
 
öput


4527 
AT91C_PIO_PB13
 
	`EQU
 (1 << 13Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB13


4528 
AT91C_PB13_ERX2
 
	`EQU
 (
AT91C_PIO_PB13
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
D©a
 2

4529 
AT91C_PB13_NPCS01
 
	`EQU
 (
AT91C_PIO_PB13
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 1

4530 
AT91C_PIO_PB14
 
	`EQU
 (1 << 14Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB14


4531 
AT91C_PB14_ERX3
 
	`EQU
 (
AT91C_PIO_PB14
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
D©a
 3

4532 
AT91C_PB14_NPCS02
 
	`EQU
 (
AT91C_PIO_PB14
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 2

4533 
AT91C_PIO_PB15
 
	`EQU
 (1 << 15Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB15


4534 
AT91C_PB15_ERXDV
 
	`EQU
 (
AT91C_PIO_PB15
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
D©a
 
VÆid


4535 
AT91C_PIO_PB16
 
	`EQU
 (1 << 16Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB16


4536 
AT91C_PB16_ECOL
 
	`EQU
 (
AT91C_PIO_PB16
Ë;- 
Ethî√t
 
MAC
 
Cﬁlisi⁄
 
Dëe˘ed


4537 
AT91C_PB16_NPCS13
 
	`EQU
 (
AT91C_PIO_PB16
Ë;- 
SPI
 1 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4538 
AT91C_PIO_PB17
 
	`EQU
 (1 << 17Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB17


4539 
AT91C_PB17_ERXCK
 
	`EQU
 (
AT91C_PIO_PB17
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
Clock


4540 
AT91C_PB17_NPCS03
 
	`EQU
 (
AT91C_PIO_PB17
Ë;- 
SPI
 0 
PîùhîÆ
 
Chù
 
Sñe˘
 3

4541 
AT91C_PIO_PB18
 
	`EQU
 (1 << 18Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB18


4542 
AT91C_PB18_EF100
 
	`EQU
 (
AT91C_PIO_PB18
Ë;- 
Ethî√t
 
MAC
 
F‹˚
 100 
Mbôs
/
£c


4543 
AT91C_PB18_ADTRG
 
	`EQU
 (
AT91C_PIO_PB18
Ë;- 
ADC
 
Exã∫Æ
 
Triggî


4544 
AT91C_PIO_PB19
 
	`EQU
 (1 << 19Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB19


4545 
AT91C_PB19_PWM0
 
	`EQU
 (
AT91C_PIO_PB19
Ë;- 
PWM
 
Ch™√l
 0

4546 
AT91C_PB19_TCLK1
 
	`EQU
 (
AT91C_PIO_PB19
Ë;- 
Timî
 
Cou¡î
 1 
exã∫Æ
 
˛ock
 
öput


4547 
AT91C_PIO_PB2
 
	`EQU
 (1 << 2Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB2


4548 
AT91C_PB2_ETX0
 
	`EQU
 (
AT91C_PIO_PB2
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
D©a
 0

4549 
AT91C_PIO_PB20
 
	`EQU
 (1 << 20Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB20


4550 
AT91C_PB20_PWM1
 
	`EQU
 (
AT91C_PIO_PB20
Ë;- 
PWM
 
Ch™√l
 1

4551 
AT91C_PB20_PCK0
 
	`EQU
 (
AT91C_PIO_PB20
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 0

4552 
AT91C_PIO_PB21
 
	`EQU
 (1 << 21Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB21


4553 
AT91C_PB21_PWM2
 
	`EQU
 (
AT91C_PIO_PB21
Ë;- 
PWM
 
Ch™√l
 2

4554 
AT91C_PB21_PCK1
 
	`EQU
 (
AT91C_PIO_PB21
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 1

4555 
AT91C_PIO_PB22
 
	`EQU
 (1 << 22Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB22


4556 
AT91C_PB22_PWM3
 
	`EQU
 (
AT91C_PIO_PB22
Ë;- 
PWM
 
Ch™√l
 3

4557 
AT91C_PB22_PCK2
 
	`EQU
 (
AT91C_PIO_PB22
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 2

4558 
AT91C_PIO_PB23
 
	`EQU
 (1 << 23Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB23


4559 
AT91C_PB23_TIOA0
 
	`EQU
 (
AT91C_PIO_PB23
Ë;- 
Timî
 
Cou¡î
 0 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
A


4560 
AT91C_PB23_DCD1
 
	`EQU
 (
AT91C_PIO_PB23
Ë;- 
USART
 1 
D©a
 
C¨rõr
 
Dëe˘


4561 
AT91C_PIO_PB24
 
	`EQU
 (1 << 24Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB24


4562 
AT91C_PB24_TIOB0
 
	`EQU
 (
AT91C_PIO_PB24
Ë;- 
Timî
 
Cou¡î
 0 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
B


4563 
AT91C_PB24_DSR1
 
	`EQU
 (
AT91C_PIO_PB24
Ë;- 
USART
 1 
D©a
 
Së
 
ªady


4564 
AT91C_PIO_PB25
 
	`EQU
 (1 << 25Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB25


4565 
AT91C_PB25_TIOA1
 
	`EQU
 (
AT91C_PIO_PB25
Ë;- 
Timî
 
Cou¡î
 1 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
A


4566 
AT91C_PB25_DTR1
 
	`EQU
 (
AT91C_PIO_PB25
Ë;- 
USART
 1 
D©a
 
TîmöÆ
 
ªady


4567 
AT91C_PIO_PB26
 
	`EQU
 (1 << 26Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB26


4568 
AT91C_PB26_TIOB1
 
	`EQU
 (
AT91C_PIO_PB26
Ë;- 
Timî
 
Cou¡î
 1 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
B


4569 
AT91C_PB26_RI1
 
	`EQU
 (
AT91C_PIO_PB26
Ë;- 
USART
 1 
Rög
 
Indiˇt‹


4570 
AT91C_PIO_PB27
 
	`EQU
 (1 << 27Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB27


4571 
AT91C_PB27_TIOA2
 
	`EQU
 (
AT91C_PIO_PB27
Ë;- 
Timî
 
Cou¡î
 2 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
A


4572 
AT91C_PB27_PWM0
 
	`EQU
 (
AT91C_PIO_PB27
Ë;- 
PWM
 
Ch™√l
 0

4573 
AT91C_PIO_PB28
 
	`EQU
 (1 << 28Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB28


4574 
AT91C_PB28_TIOB2
 
	`EQU
 (
AT91C_PIO_PB28
Ë;- 
Timî
 
Cou¡î
 2 
Mu…ùuΩo£
 Timî 
I
/
O
 
Pö
 
B


4575 
AT91C_PB28_PWM1
 
	`EQU
 (
AT91C_PIO_PB28
Ë;- 
PWM
 
Ch™√l
 1

4576 
AT91C_PIO_PB29
 
	`EQU
 (1 << 29Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB29


4577 
AT91C_PB29_PCK1
 
	`EQU
 (
AT91C_PIO_PB29
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 1

4578 
AT91C_PB29_PWM2
 
	`EQU
 (
AT91C_PIO_PB29
Ë;- 
PWM
 
Ch™√l
 2

4579 
AT91C_PIO_PB3
 
	`EQU
 (1 << 3Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB3


4580 
AT91C_PB3_ETX1
 
	`EQU
 (
AT91C_PIO_PB3
Ë;- 
Ethî√t
 
MAC
 
Tønsmô
 
D©a
 1

4581 
AT91C_PIO_PB30
 
	`EQU
 (1 << 30Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB30


4582 
AT91C_PB30_PCK2
 
	`EQU
 (
AT91C_PIO_PB30
Ë;- 
PMC
 
ProgømmabÀ
 
Clock
 
Ouçut
 2

4583 
AT91C_PB30_PWM3
 
	`EQU
 (
AT91C_PIO_PB30
Ë;- 
PWM
 
Ch™√l
 3

4584 
AT91C_PIO_PB4
 
	`EQU
 (1 << 4Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB4


4585 
AT91C_PB4_ECRS_ECRSDV
 
	`EQU
 (
AT91C_PIO_PB4
Ë;- 
Ethî√t
 
MAC
 
C¨rõr
 
Sí£
/C¨rõ∏Sí£ 
™d
 
D©a
 
VÆid


4586 
AT91C_PIO_PB5
 
	`EQU
 (1 << 5Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB5


4587 
AT91C_PB5_ERX0
 
	`EQU
 (
AT91C_PIO_PB5
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
D©a
 0

4588 
AT91C_PIO_PB6
 
	`EQU
 (1 << 6Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB6


4589 
AT91C_PB6_ERX1
 
	`EQU
 (
AT91C_PIO_PB6
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
D©a
 1

4590 
AT91C_PIO_PB7
 
	`EQU
 (1 << 7Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB7


4591 
AT91C_PB7_ERXER
 
	`EQU
 (
AT91C_PIO_PB7
Ë;- 
Ethî√t
 
MAC
 
Re˚ive
 
Eº‹


4592 
AT91C_PIO_PB8
 
	`EQU
 (1 << 8Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB8


4593 
AT91C_PB8_EMDC
 
	`EQU
 (
AT91C_PIO_PB8
Ë;- 
Ethî√t
 
MAC
 
M™agemít
 
D©a
 
Clock


4594 
AT91C_PIO_PB9
 
	`EQU
 (1 << 9Ë;- 
Pö
 
C⁄åﬁÀd
 
by
 
PB9


4595 
AT91C_PB9_EMDIO
 
	`EQU
 (
AT91C_PIO_PB9
Ë;- 
Ethî√t
 
MAC
 
M™agemít
 
D©a
 
I≈ut
/
Ouçut


4600 
AT91C_ID_FIQ
 
	`EQU
 ( 0Ë;- 
Adv™˚d
 
I¡îru±
 
	$C⁄åﬁÀr
 (
FIQ
)

4601 
AT91C_ID_SYS
 
	`EQU
 ( 1Ë;- 
Sy°em
 
PîùhîÆ


4602 
AT91C_ID_PIOA
 
	`EQU
 ( 2Ë;- 
P¨ÆÀl
 
IO
 
C⁄åﬁÀr
 
A


4603 
AT91C_ID_PIOB
 
	`EQU
 ( 3Ë;- 
P¨ÆÀl
 
IO
 
C⁄åﬁÀr
 
B


4604 
AT91C_ID_SPI0
 
	`EQU
 ( 4Ë;- 
Sîül
 
PîùhîÆ
 
I¡îÁ˚
 0

4605 
AT91C_ID_SPI1
 
	`EQU
 ( 5Ë;- 
Sîül
 
PîùhîÆ
 
I¡îÁ˚
 1

4606 
AT91C_ID_US0
 
	`EQU
 ( 6Ë;- 
USART
 0

4607 
AT91C_ID_US1
 
	`EQU
 ( 7Ë;- 
USART
 1

4608 
AT91C_ID_SSC
 
	`EQU
 ( 8Ë;- 
Sîül
 
Synchr⁄ous
 
C⁄åﬁÀr


4609 
AT91C_ID_TWI
 
	`EQU
 ( 9Ë;- 
Two
-
Wúe
 
I¡îÁ˚


4610 
AT91C_ID_PWMC
 
	`EQU
 (10Ë;- 
PWM
 
C⁄åﬁÀr


4611 
AT91C_ID_UDP
 
	`EQU
 (11Ë;- 
USB
 
Devi˚
 
P‹t


4612 
AT91C_ID_TC0
 
	`EQU
 (12Ë;- 
Timî
 
Cou¡î
 0

4613 
AT91C_ID_TC1
 
	`EQU
 (13Ë;- 
Timî
 
Cou¡î
 1

4614 
AT91C_ID_TC2
 
	`EQU
 (14Ë;- 
Timî
 
Cou¡î
 2

4615 
AT91C_ID_CAN
 
	`EQU
 (15Ë;- 
C⁄åﬁ
 
Aªa
 
Nëw‹k
 
C⁄åﬁÀr


4616 
AT91C_ID_EMAC
 
	`EQU
 (16Ë;- 
Ethî√t
 
MAC


4617 
AT91C_ID_ADC
 
	`EQU
 (17Ë;- 
A«log
-
to
-
DigôÆ
 
C⁄vîãr


4618 
AT91C_ID_AES
 
	`EQU
 (18Ë;- 
Adv™˚d
 
En¸y±i⁄
 
Sènd¨d
 128-
bô


4619 
AT91C_ID_TDES
 
	`EQU
 (19Ë;- 
TrùÀ
 
D©a
 
En¸y±i⁄
 
Sènd¨d


4620 
AT91C_ID_20_Re£rved
 
	`EQU
 (20Ë;- 
Re£rved


4621 
AT91C_ID_21_Re£rved
 
	`EQU
 (21Ë;- 
Re£rved


4622 
AT91C_ID_22_Re£rved
 
	`EQU
 (22Ë;- 
Re£rved


4623 
AT91C_ID_23_Re£rved
 
	`EQU
 (23Ë;- 
Re£rved


4624 
AT91C_ID_24_Re£rved
 
	`EQU
 (24Ë;- 
Re£rved


4625 
AT91C_ID_25_Re£rved
 
	`EQU
 (25Ë;- 
Re£rved


4626 
AT91C_ID_26_Re£rved
 
	`EQU
 (26Ë;- 
Re£rved


4627 
AT91C_ID_27_Re£rved
 
	`EQU
 (27Ë;- 
Re£rved


4628 
AT91C_ID_28_Re£rved
 
	`EQU
 (28Ë;- 
Re£rved


4629 
AT91C_ID_29_Re£rved
 
	`EQU
 (29Ë;- 
Re£rved


4630 
AT91C_ID_IRQ0
 
	`EQU
 (30Ë;- 
Adv™˚d
 
I¡îru±
 
	$C⁄åﬁÀr
 (
IRQ0
)

4631 
AT91C_ID_IRQ1
 
	`EQU
 (31Ë;- 
Adv™˚d
 
I¡îru±
 
	$C⁄åﬁÀr
 (
IRQ1
)

4636 
AT91C_BASE_SYS
 
	`EQU
 (0xFFFFF000Ë;- (
SYS
Ë
Ba£
 
Addªss


4637 
AT91C_BASE_AIC
 
	`EQU
 (0xFFFFF000Ë;- (
AIC
Ë
Ba£
 
Addªss


4638 
AT91C_BASE_PDC_DBGU
 
	`EQU
 (0xFFFFF300Ë;- (
PDC_DBGU
Ë
Ba£
 
Addªss


4639 
AT91C_BASE_DBGU
 
	`EQU
 (0xFFFFF200Ë;- (
DBGU
Ë
Ba£
 
Addªss


4640 
AT91C_BASE_PIOA
 
	`EQU
 (0xFFFFF400Ë;- (
PIOA
Ë
Ba£
 
Addªss


4641 
AT91C_BASE_PIOB
 
	`EQU
 (0xFFFFF600Ë;- (
PIOB
Ë
Ba£
 
Addªss


4642 
AT91C_BASE_CKGR
 
	`EQU
 (0xFFFFFC20Ë;- (
CKGR
Ë
Ba£
 
Addªss


4643 
AT91C_BASE_PMC
 
	`EQU
 (0xFFFFFC00Ë;- (
PMC
Ë
Ba£
 
Addªss


4644 
AT91C_BASE_RSTC
 
	`EQU
 (0xFFFFFD00Ë;- (
RSTC
Ë
Ba£
 
Addªss


4645 
AT91C_BASE_RTTC
 
	`EQU
 (0xFFFFFD20Ë;- (
RTTC
Ë
Ba£
 
Addªss


4646 
AT91C_BASE_PITC
 
	`EQU
 (0xFFFFFD30Ë;- (
PITC
Ë
Ba£
 
Addªss


4647 
AT91C_BASE_WDTC
 
	`EQU
 (0xFFFFFD40Ë;- (
WDTC
Ë
Ba£
 
Addªss


4648 
AT91C_BASE_VREG
 
	`EQU
 (0xFFFFFD60Ë;- (
VREG
Ë
Ba£
 
Addªss


4649 
AT91C_BASE_MC
 
	`EQU
 (0xFFFFFF00Ë;- (
MC
Ë
Ba£
 
Addªss


4650 
AT91C_BASE_PDC_SPI1
 
	`EQU
 (0xFFFE4100Ë;- (
PDC_SPI1
Ë
Ba£
 
Addªss


4651 
AT91C_BASE_SPI1
 
	`EQU
 (0xFFFE4000Ë;- (
SPI1
Ë
Ba£
 
Addªss


4652 
AT91C_BASE_PDC_SPI0
 
	`EQU
 (0xFFFE0100Ë;- (
PDC_SPI0
Ë
Ba£
 
Addªss


4653 
AT91C_BASE_SPI0
 
	`EQU
 (0xFFFE0000Ë;- (
SPI0
Ë
Ba£
 
Addªss


4654 
AT91C_BASE_PDC_US1
 
	`EQU
 (0xFFFC4100Ë;- (
PDC_US1
Ë
Ba£
 
Addªss


4655 
AT91C_BASE_US1
 
	`EQU
 (0xFFFC4000Ë;- (
US1
Ë
Ba£
 
Addªss


4656 
AT91C_BASE_PDC_US0
 
	`EQU
 (0xFFFC0100Ë;- (
PDC_US0
Ë
Ba£
 
Addªss


4657 
AT91C_BASE_US0
 
	`EQU
 (0xFFFC0000Ë;- (
US0
Ë
Ba£
 
Addªss


4658 
AT91C_BASE_PDC_SSC
 
	`EQU
 (0xFFFD4100Ë;- (
PDC_SSC
Ë
Ba£
 
Addªss


4659 
AT91C_BASE_SSC
 
	`EQU
 (0xFFFD4000Ë;- (
SSC
Ë
Ba£
 
Addªss


4660 
AT91C_BASE_TWI
 
	`EQU
 (0xFFFB8000Ë;- (
TWI
Ë
Ba£
 
Addªss


4661 
AT91C_BASE_PWMC_CH3
 
	`EQU
 (0xFFFCC260Ë;- (
PWMC_CH3
Ë
Ba£
 
Addªss


4662 
AT91C_BASE_PWMC_CH2
 
	`EQU
 (0xFFFCC240Ë;- (
PWMC_CH2
Ë
Ba£
 
Addªss


4663 
AT91C_BASE_PWMC_CH1
 
	`EQU
 (0xFFFCC220Ë;- (
PWMC_CH1
Ë
Ba£
 
Addªss


4664 
AT91C_BASE_PWMC_CH0
 
	`EQU
 (0xFFFCC200Ë;- (
PWMC_CH0
Ë
Ba£
 
Addªss


4665 
AT91C_BASE_PWMC
 
	`EQU
 (0xFFFCC000Ë;- (
PWMC
Ë
Ba£
 
Addªss


4666 
AT91C_BASE_UDP
 
	`EQU
 (0xFFFB0000Ë;- (
UDP
Ë
Ba£
 
Addªss


4667 
AT91C_BASE_TC0
 
	`EQU
 (0xFFFA0000Ë;- (
TC0
Ë
Ba£
 
Addªss


4668 
AT91C_BASE_TC1
 
	`EQU
 (0xFFFA0040Ë;- (
TC1
Ë
Ba£
 
Addªss


4669 
AT91C_BASE_TC2
 
	`EQU
 (0xFFFA0080Ë;- (
TC2
Ë
Ba£
 
Addªss


4670 
AT91C_BASE_TCB
 
	`EQU
 (0xFFFA0000Ë;- (
TCB
Ë
Ba£
 
Addªss


4671 
AT91C_BASE_CAN_MB0
 
	`EQU
 (0xFFFD0200Ë;- (
CAN_MB0
Ë
Ba£
 
Addªss


4672 
AT91C_BASE_CAN_MB1
 
	`EQU
 (0xFFFD0220Ë;- (
CAN_MB1
Ë
Ba£
 
Addªss


4673 
AT91C_BASE_CAN_MB2
 
	`EQU
 (0xFFFD0240Ë;- (
CAN_MB2
Ë
Ba£
 
Addªss


4674 
AT91C_BASE_CAN_MB3
 
	`EQU
 (0xFFFD0260Ë;- (
CAN_MB3
Ë
Ba£
 
Addªss


4675 
AT91C_BASE_CAN_MB4
 
	`EQU
 (0xFFFD0280Ë;- (
CAN_MB4
Ë
Ba£
 
Addªss


4676 
AT91C_BASE_CAN_MB5
 
	`EQU
 (0xFFFD02A0Ë;- (
CAN_MB5
Ë
Ba£
 
Addªss


4677 
AT91C_BASE_CAN_MB6
 
	`EQU
 (0xFFFD02C0Ë;- (
CAN_MB6
Ë
Ba£
 
Addªss


4678 
AT91C_BASE_CAN_MB7
 
	`EQU
 (0xFFFD02E0Ë;- (
CAN_MB7
Ë
Ba£
 
Addªss


4679 
AT91C_BASE_CAN
 
	`EQU
 (0xFFFD0000Ë;- (
CAN
Ë
Ba£
 
Addªss


4680 
AT91C_BASE_EMAC
 
	`EQU
 (0xFFFDC000Ë;- (
EMAC
Ë
Ba£
 
Addªss


4681 
AT91C_BASE_PDC_ADC
 
	`EQU
 (0xFFFD8100Ë;- (
PDC_ADC
Ë
Ba£
 
Addªss


4682 
AT91C_BASE_ADC
 
	`EQU
 (0xFFFD8000Ë;- (
ADC
Ë
Ba£
 
Addªss


4683 
AT91C_BASE_PDC_AES
 
	`EQU
 (0xFFFA4100Ë;- (
PDC_AES
Ë
Ba£
 
Addªss


4684 
AT91C_BASE_AES
 
	`EQU
 (0xFFFA4000Ë;- (
AES
Ë
Ba£
 
Addªss


4685 
AT91C_BASE_PDC_TDES
 
	`EQU
 (0xFFFA8100Ë;- (
PDC_TDES
Ë
Ba£
 
Addªss


4686 
AT91C_BASE_TDES
 
	`EQU
 (0xFFFA8000Ë;- (
TDES
Ë
Ba£
 
Addªss


4691 
AT91C_ISRAM
 
	`EQU
 (0x00200000Ë;- 
I¡î«l
 
SRAM
 
ba£
 
addªss


4692 
AT91C_ISRAM_SIZE
 
	`EQU
 (0x00010000Ë;- 
I¡î«l
 
SRAM
 
size
 
ö
 
	$byã
 (64 
Kbyã
)

4693 
AT91C_IFLASH
 
	`EQU
 (0x00100000Ë;- 
I¡î«l
 
ROM
 
ba£
 
addªss


4694 
AT91C_IFLASH_SIZE
 
	`EQU
 (0x00040000Ë;- 
I¡î«l
 
ROM
 
size
 
ö
 
	$byã
 (256 
Kbyã
)

	@portable/GCC/ARM7_AT91SAM7S/lib_AT91SAM7X256.c

44 
	~"AT91SAM7X256.h
"

	@portable/GCC/ARM7_AT91SAM7S/lib_AT91SAM7X256.h

43 #i‚de‡
lib_AT91SAM7X256_H


44 
	#lib_AT91SAM7X256_H


	)

49 
	#AT91C_AIC_BRANCH_OPCODE
 (((*) ()) 0xE51FFF20)

50 

	)

55 
__ölöe
 
AT91F_AIC_C⁄figuªIt
 (

56 
AT91PS_AIC
 
pAic
,

57 
úq_id
,

58 
¥i‹ôy
,

59 
§c_ty≥
,

60 (*
√wH™dÀr
) () )

62 
ﬁdH™dÀr
;

63 
mask
 ;

65 
ﬁdH™dÀr
 = 
pAic
->
AIC_SVR
[
úq_id
];

67 
mask
 = 0x1 << 
úq_id
 ;

69 
pAic
->
AIC_IDCR
 = 
mask
 ;

71 
pAic
->
AIC_SVR
[
úq_id
] = (Ë
√wH™dÀr
 ;

73 
pAic
->
AIC_SMR
[
úq_id
] = 
§c_ty≥
 | 
¥i‹ôy
 ;

75 
pAic
->
AIC_ICCR
 = 
mask
 ;

77  
ﬁdH™dÀr
;

78 
	}
}

84 
__ölöe
 
	$AT91F_AIC_E«bÀIt
 (

85 
AT91PS_AIC
 
pAic
,

86 
úq_id
 )

89 
pAic
->
AIC_IECR
 = 0x1 << 
úq_id
 ;

90 
	}
}

96 
__ölöe
 
	$AT91F_AIC_DißbÀIt
 (

97 
AT91PS_AIC
 
pAic
,

98 
úq_id
 )

100 
mask
 = 0x1 << 
úq_id
;

102 
pAic
->
AIC_IDCR
 = 
mask
 ;

104 
pAic
->
AIC_ICCR
 = 
mask
 ;

105 
	}
}

111 
__ölöe
 
	$AT91F_AIC_CÀ¨It
 (

112 
AT91PS_AIC
 
pAic
,

113 
úq_id
)

116 
pAic
->
AIC_ICCR
 = (0x1 << 
úq_id
);

117 
	}
}

123 
__ölöe
 
	$AT91F_AIC_AcknowÀdgeIt
 (

124 
AT91PS_AIC
 
pAic
)

126 
pAic
->
AIC_EOICR
 =ÖAic->AIC_EOICR;

127 
	}
}

133 
__ölöe
 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
 (

134 *
pVe˘‹
,

135 (*
H™dÀr
) () )

137 
ﬁdVe˘‹
 = *
pVe˘‹
;

139 i‡((Ë
H™dÀr
 =(Ë
AT91C_AIC_BRANCH_OPCODE
)

140 *
pVe˘‹
 = (Ë
AT91C_AIC_BRANCH_OPCODE
;

142 *
pVe˘‹
 = (((((Ë
H™dÀr
) - (()ÖVector) - 0x8) >> 2) & 0x00FFFFFF) | 0xEA000000;

144  
ﬁdVe˘‹
;

145 
	}
}

151 
__ölöe
 
	$AT91F_AIC_Trig
 (

152 
AT91PS_AIC
 
pAic
,

153 
úq_id
)

155 
pAic
->
AIC_ISCR
 = (0x1 << 
úq_id
) ;

156 
	}
}

162 
__ölöe
 
	$AT91F_AIC_IsA˘ive
 (

163 
AT91PS_AIC
 
pAic
,

164 
úq_id
)

166  (
pAic
->
AIC_ISR
 & (0x1 << 
úq_id
));

167 
	}
}

173 
__ölöe
 
	$AT91F_AIC_IsPídög
 (

174 
AT91PS_AIC
 
pAic
,

175 
úq_id
)

177  (
pAic
->
AIC_IPR
 & (0x1 << 
úq_id
));

178 
	}
}

184 
__ölöe
 
AT91F_AIC_O≥n
(

185 
AT91PS_AIC
 
pAic
,

186 (*
IrqH™dÀr
) (),

187 (*
FiqH™dÀr
) (),

188 (*
DeÁu…H™dÀr
) (),

189 (*
SpuriousH™dÀr
) (),

190 
¥Ÿe˘Mode
)

192 
	gi
;

195 
	gi
 = 0; i < 32; ++i) {

196 
AT91F_AIC_DißbÀIt
(
pAic
, 
i
);

197 
AT91F_AIC_C⁄figuªIt
(
pAic
, 
i
, 
AT91C_AIC_PRIOR_LOWEST
, 
AT91C_AIC_SRCTYPE_HIGH_LEVEL
, 
DeÁu…H™dÀr
);

201 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x18, 
IrqH™dÀr
);

203 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x1C, 
FiqH™dÀr
);

205 
	gpAic
->
	gAIC_SPU
 = (Ë
SpuriousH™dÀr
;

206 
	gpAic
->
	gAIC_DCR
 = 
¥Ÿe˘Mode
;

215 
__ölöe
 
	$AT91F_PDC_SëNextRx
 (

216 
AT91PS_PDC
 
pPDC
,

217 *
addªss
,

218 
byãs
)

220 
pPDC
->
PDC_RNPR
 = (Ë
addªss
;

221 
pPDC
->
PDC_RNCR
 = 
byãs
;

222 
	}
}

228 
__ölöe
 
	$AT91F_PDC_SëNextTx
 (

229 
AT91PS_PDC
 
pPDC
,

230 *
addªss
,

231 
byãs
)

233 
pPDC
->
PDC_TNPR
 = (Ë
addªss
;

234 
pPDC
->
PDC_TNCR
 = 
byãs
;

235 
	}
}

241 
__ölöe
 
	$AT91F_PDC_SëRx
 (

242 
AT91PS_PDC
 
pPDC
,

243 *
addªss
,

244 
byãs
)

246 
pPDC
->
PDC_RPR
 = (Ë
addªss
;

247 
pPDC
->
PDC_RCR
 = 
byãs
;

248 
	}
}

254 
__ölöe
 
	$AT91F_PDC_SëTx
 (

255 
AT91PS_PDC
 
pPDC
,

256 *
addªss
,

257 
byãs
)

259 
pPDC
->
PDC_TPR
 = (Ë
addªss
;

260 
pPDC
->
PDC_TCR
 = 
byãs
;

261 
	}
}

267 
__ölöe
 
	$AT91F_PDC_E«bÀTx
 (

268 
AT91PS_PDC
 
pPDC
 )

270 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTEN
;

271 
	}
}

277 
__ölöe
 
	$AT91F_PDC_E«bÀRx
 (

278 
AT91PS_PDC
 
pPDC
 )

280 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTEN
;

281 
	}
}

287 
__ölöe
 
	$AT91F_PDC_DißbÀTx
 (

288 
AT91PS_PDC
 
pPDC
 )

290 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTDIS
;

291 
	}
}

297 
__ölöe
 
	$AT91F_PDC_DißbÀRx
 (

298 
AT91PS_PDC
 
pPDC
 )

300 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTDIS
;

301 
	}
}

307 
__ölöe
 
	$AT91F_PDC_IsTxEm±y
 (

308 
AT91PS_PDC
 
pPDC
 )

310  !(
pPDC
->
PDC_TCR
);

311 
	}
}

317 
__ölöe
 
	$AT91F_PDC_IsNextTxEm±y
 (

318 
AT91PS_PDC
 
pPDC
 )

320  !(
pPDC
->
PDC_TNCR
);

321 
	}
}

327 
__ölöe
 
	$AT91F_PDC_IsRxEm±y
 (

328 
AT91PS_PDC
 
pPDC
 )

330  !(
pPDC
->
PDC_RCR
);

331 
	}
}

337 
__ölöe
 
	$AT91F_PDC_IsNextRxEm±y
 (

338 
AT91PS_PDC
 
pPDC
 )

340  !(
pPDC
->
PDC_RNCR
);

341 
	}
}

347 
__ölöe
 
	$AT91F_PDC_O≥n
 (

348 
AT91PS_PDC
 
pPDC
)

351 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

352 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

355 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

356 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

357 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

358 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

361 
	`AT91F_PDC_E«bÀRx
(
pPDC
);

362 
	`AT91F_PDC_E«bÀTx
(
pPDC
);

363 
	}
}

369 
__ölöe
 
	$AT91F_PDC_Clo£
 (

370 
AT91PS_PDC
 
pPDC
)

373 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

374 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

377 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

378 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

379 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

380 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

382 
	}
}

388 
__ölöe
 
	$AT91F_PDC_SídFøme
(

389 
AT91PS_PDC
 
pPDC
,

390 *
pBuf„r
,

391 
szBuf„r
,

392 *
pNextBuf„r
,

393 
szNextBuf„r
 )

395 i‡(
	`AT91F_PDC_IsTxEm±y
(
pPDC
)) {

397 
	`AT91F_PDC_SëTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

398 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

401 i‡(
	`AT91F_PDC_IsNextTxEm±y
(
pPDC
)) {

403 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

410 
	}
}

416 
__ölöe
 
	$AT91F_PDC_Re˚iveFøme
 (

417 
AT91PS_PDC
 
pPDC
,

418 *
pBuf„r
,

419 
szBuf„r
,

420 *
pNextBuf„r
,

421 
szNextBuf„r
 )

423 i‡(
	`AT91F_PDC_IsRxEm±y
(
pPDC
)) {

425 
	`AT91F_PDC_SëRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

426 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

429 i‡(
	`AT91F_PDC_IsNextRxEm±y
(
pPDC
)) {

431 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

438 
	}
}

446 
__ölöe
 
	$AT91F_DBGU_I¡îru±E«bÀ
(

447 
AT91PS_DBGU
 
pDbgu
,

448 
Êag
)

450 
pDbgu
->
DBGU_IER
 = 
Êag
;

451 
	}
}

457 
__ölöe
 
	$AT91F_DBGU_I¡îru±DißbÀ
(

458 
AT91PS_DBGU
 
pDbgu
,

459 
Êag
)

461 
pDbgu
->
DBGU_IDR
 = 
Êag
;

462 
	}
}

468 
__ölöe
 
	$AT91F_DBGU_GëI¡îru±MaskSètus
(

469 
AT91PS_DBGU
 
pDbgu
)

471  
pDbgu
->
DBGU_IMR
;

472 
	}
}

478 
__ölöe
 
	$AT91F_DBGU_IsI¡îru±Masked
(

479 
AT91PS_DBGU
 
pDbgu
,

480 
Êag
)

482  (
	`AT91F_DBGU_GëI¡îru±MaskSètus
(
pDbgu
Ë& 
Êag
);

483 
	}
}

492 
__ölöe
 
	$AT91F_PIO_CfgPîùh
(

493 
AT91PS_PIO
 
pPio
,

494 
≥rùhAE«bÀ
,

495 
≥rùhBE«bÀ
)

498 
pPio
->
PIO_ASR
 = 
≥rùhAE«bÀ
;

499 
pPio
->
PIO_BSR
 = 
≥rùhBE«bÀ
;

500 
pPio
->
PIO_PDR
 = (
≥rùhAE«bÀ
 | 
≥rùhBE«bÀ
);

501 
	}
}

507 
__ölöe
 
	$AT91F_PIO_CfgOuçut
(

508 
AT91PS_PIO
 
pPio
,

509 
pioE«bÀ
)

511 
pPio
->
PIO_PER
 = 
pioE«bÀ
;

512 
pPio
->
PIO_OER
 = 
pioE«bÀ
;

513 
	}
}

519 
__ölöe
 
	$AT91F_PIO_CfgI≈ut
(

520 
AT91PS_PIO
 
pPio
,

521 
öputE«bÀ
)

524 
pPio
->
PIO_ODR
 = 
öputE«bÀ
;

525 
pPio
->
PIO_PER
 = 
öputE«bÀ
;

526 
	}
}

532 
__ölöe
 
	$AT91F_PIO_CfgO≥ndøö
(

533 
AT91PS_PIO
 
pPio
,

534 
mu…iDrvE«bÀ
)

537 
pPio
->
PIO_MDDR
 = ~
mu…iDrvE«bÀ
;

538 
pPio
->
PIO_MDER
 = 
mu…iDrvE«bÀ
;

539 
	}
}

545 
__ölöe
 
	$AT91F_PIO_CfgPuŒup
(

546 
AT91PS_PIO
 
pPio
,

547 
puŒupE«bÀ
)

550 
pPio
->
PIO_PPUDR
 = ~
puŒupE«bÀ
;

551 
pPio
->
PIO_PPUER
 = 
puŒupE«bÀ
;

552 
	}
}

558 
__ölöe
 
	$AT91F_PIO_CfgDúe˘Drive
(

559 
AT91PS_PIO
 
pPio
,

560 
dúe˘Drive
)

564 
pPio
->
PIO_OWDR
 = ~
dúe˘Drive
;

565 
pPio
->
PIO_OWER
 = 
dúe˘Drive
;

566 
	}
}

572 
__ölöe
 
	$AT91F_PIO_CfgI≈utFûãr
(

573 
AT91PS_PIO
 
pPio
,

574 
öputFûãr
)

578 
pPio
->
PIO_IFDR
 = ~
öputFûãr
;

579 
pPio
->
PIO_IFER
 = 
öputFûãr
;

580 
	}
}

586 
__ölöe
 
	$AT91F_PIO_GëI≈ut
(

587 
AT91PS_PIO
 
pPio
)

589  
pPio
->
PIO_PDSR
;

590 
	}
}

596 
__ölöe
 
	$AT91F_PIO_IsI≈utSë
(

597 
AT91PS_PIO
 
pPio
,

598 
Êag
)

600  (
	`AT91F_PIO_GëI≈ut
(
pPio
Ë& 
Êag
);

601 
	}
}

608 
__ölöe
 
	$AT91F_PIO_SëOuçut
(

609 
AT91PS_PIO
 
pPio
,

610 
Êag
)

612 
pPio
->
PIO_SODR
 = 
Êag
;

613 
	}
}

619 
__ölöe
 
	$AT91F_PIO_CÀ¨Ouçut
(

620 
AT91PS_PIO
 
pPio
,

621 
Êag
)

623 
pPio
->
PIO_CODR
 = 
Êag
;

624 
	}
}

630 
__ölöe
 
	$AT91F_PIO_F‹˚Ouçut
(

631 
AT91PS_PIO
 
pPio
,

632 
Êag
)

634 
pPio
->
PIO_ODSR
 = 
Êag
;

635 
	}
}

641 
__ölöe
 
	$AT91F_PIO_E«bÀ
(

642 
AT91PS_PIO
 
pPio
,

643 
Êag
)

645 
pPio
->
PIO_PER
 = 
Êag
;

646 
	}
}

652 
__ölöe
 
	$AT91F_PIO_DißbÀ
(

653 
AT91PS_PIO
 
pPio
,

654 
Êag
)

656 
pPio
->
PIO_PDR
 = 
Êag
;

657 
	}
}

663 
__ölöe
 
	$AT91F_PIO_GëSètus
(

664 
AT91PS_PIO
 
pPio
)

666  
pPio
->
PIO_PSR
;

667 
	}
}

673 
__ölöe
 
	$AT91F_PIO_IsSë
(

674 
AT91PS_PIO
 
pPio
,

675 
Êag
)

677  (
	`AT91F_PIO_GëSètus
(
pPio
Ë& 
Êag
);

678 
	}
}

684 
__ölöe
 
	$AT91F_PIO_OuçutE«bÀ
(

685 
AT91PS_PIO
 
pPio
,

686 
Êag
)

688 
pPio
->
PIO_OER
 = 
Êag
;

689 
	}
}

695 
__ölöe
 
	$AT91F_PIO_OuçutDißbÀ
(

696 
AT91PS_PIO
 
pPio
,

697 
Êag
)

699 
pPio
->
PIO_ODR
 = 
Êag
;

700 
	}
}

706 
__ölöe
 
	$AT91F_PIO_GëOuçutSètus
(

707 
AT91PS_PIO
 
pPio
)

709  
pPio
->
PIO_OSR
;

710 
	}
}

716 
__ölöe
 
	$AT91F_PIO_IsOuçutSë
(

717 
AT91PS_PIO
 
pPio
,

718 
Êag
)

720  (
	`AT91F_PIO_GëOuçutSètus
(
pPio
Ë& 
Êag
);

721 
	}
}

727 
__ölöe
 
	$AT91F_PIO_I≈utFûãrE«bÀ
(

728 
AT91PS_PIO
 
pPio
,

729 
Êag
)

731 
pPio
->
PIO_IFER
 = 
Êag
;

732 
	}
}

738 
__ölöe
 
	$AT91F_PIO_I≈utFûãrDißbÀ
(

739 
AT91PS_PIO
 
pPio
,

740 
Êag
)

742 
pPio
->
PIO_IFDR
 = 
Êag
;

743 
	}
}

749 
__ölöe
 
	$AT91F_PIO_GëI≈utFûãrSètus
(

750 
AT91PS_PIO
 
pPio
)

752  
pPio
->
PIO_IFSR
;

753 
	}
}

759 
__ölöe
 
	$AT91F_PIO_IsI≈utFûãrSë
(

760 
AT91PS_PIO
 
pPio
,

761 
Êag
)

763  (
	`AT91F_PIO_GëI≈utFûãrSètus
(
pPio
Ë& 
Êag
);

764 
	}
}

770 
__ölöe
 
	$AT91F_PIO_GëOuçutD©aSètus
(

771 
AT91PS_PIO
 
pPio
)

773  
pPio
->
PIO_ODSR
;

774 
	}
}

780 
__ölöe
 
	$AT91F_PIO_I¡îru±E«bÀ
(

781 
AT91PS_PIO
 
pPio
,

782 
Êag
)

784 
pPio
->
PIO_IER
 = 
Êag
;

785 
	}
}

791 
__ölöe
 
	$AT91F_PIO_I¡îru±DißbÀ
(

792 
AT91PS_PIO
 
pPio
,

793 
Êag
)

795 
pPio
->
PIO_IDR
 = 
Êag
;

796 
	}
}

802 
__ölöe
 
	$AT91F_PIO_GëI¡îru±MaskSètus
(

803 
AT91PS_PIO
 
pPio
)

805  
pPio
->
PIO_IMR
;

806 
	}
}

812 
__ölöe
 
	$AT91F_PIO_GëI¡îru±Sètus
(

813 
AT91PS_PIO
 
pPio
)

815  
pPio
->
PIO_ISR
;

816 
	}
}

822 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Masked
(

823 
AT91PS_PIO
 
pPio
,

824 
Êag
)

826  (
	`AT91F_PIO_GëI¡îru±MaskSètus
(
pPio
Ë& 
Êag
);

827 
	}
}

833 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Së
(

834 
AT91PS_PIO
 
pPio
,

835 
Êag
)

837  (
	`AT91F_PIO_GëI¡îru±Sètus
(
pPio
Ë& 
Êag
);

838 
	}
}

844 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîE«bÀ
(

845 
AT91PS_PIO
 
pPio
,

846 
Êag
)

848 
pPio
->
PIO_MDER
 = 
Êag
;

849 
	}
}

855 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîDißbÀ
(

856 
AT91PS_PIO
 
pPio
,

857 
Êag
)

859 
pPio
->
PIO_MDDR
 = 
Êag
;

860 
	}
}

866 
__ölöe
 
	$AT91F_PIO_GëMu…iDrivîSètus
(

867 
AT91PS_PIO
 
pPio
)

869  
pPio
->
PIO_MDSR
;

870 
	}
}

876 
__ölöe
 
	$AT91F_PIO_IsMu…iDrivîSë
(

877 
AT91PS_PIO
 
pPio
,

878 
Êag
)

880  (
	`AT91F_PIO_GëMu…iDrivîSètus
(
pPio
Ë& 
Êag
);

881 
	}
}

887 
__ölöe
 
	$AT91F_PIO_A_Regi°îSñe˘i⁄
(

888 
AT91PS_PIO
 
pPio
,

889 
Êag
)

891 
pPio
->
PIO_ASR
 = 
Êag
;

892 
	}
}

898 
__ölöe
 
	$AT91F_PIO_B_Regi°îSñe˘i⁄
(

899 
AT91PS_PIO
 
pPio
,

900 
Êag
)

902 
pPio
->
PIO_BSR
 = 
Êag
;

903 
	}
}

909 
__ölöe
 
	$AT91F_PIO_Gë_AB_Regi°îSètus
(

910 
AT91PS_PIO
 
pPio
)

912  
pPio
->
PIO_ABSR
;

913 
	}
}

919 
__ölöe
 
	$AT91F_PIO_IsAB_Regi°îSë
(

920 
AT91PS_PIO
 
pPio
,

921 
Êag
)

923  (
	`AT91F_PIO_Gë_AB_Regi°îSètus
(
pPio
Ë& 
Êag
);

924 
	}
}

930 
__ölöe
 
	$AT91F_PIO_OuçutWrôeE«bÀ
(

931 
AT91PS_PIO
 
pPio
,

932 
Êag
)

934 
pPio
->
PIO_OWER
 = 
Êag
;

935 
	}
}

941 
__ölöe
 
	$AT91F_PIO_OuçutWrôeDißbÀ
(

942 
AT91PS_PIO
 
pPio
,

943 
Êag
)

945 
pPio
->
PIO_OWDR
 = 
Êag
;

946 
	}
}

952 
__ölöe
 
	$AT91F_PIO_GëOuçutWrôeSètus
(

953 
AT91PS_PIO
 
pPio
)

955  
pPio
->
PIO_OWSR
;

956 
	}
}

962 
__ölöe
 
	$AT91F_PIO_IsOuçutWrôeSë
(

963 
AT91PS_PIO
 
pPio
,

964 
Êag
)

966  (
	`AT91F_PIO_GëOuçutWrôeSètus
(
pPio
Ë& 
Êag
);

967 
	}
}

973 
__ölöe
 
	$AT91F_PIO_GëCfgPuŒup
(

974 
AT91PS_PIO
 
pPio
)

976  
pPio
->
PIO_PPUSR
;

977 
	}
}

983 
__ölöe
 
	$AT91F_PIO_IsOuçutD©aSètusSë
(

984 
AT91PS_PIO
 
pPio
,

985 
Êag
)

987  (
	`AT91F_PIO_GëOuçutD©aSètus
(
pPio
Ë& 
Êag
);

988 
	}
}

994 
__ölöe
 
	$AT91F_PIO_IsCfgPuŒupSètusSë
(

995 
AT91PS_PIO
 
pPio
,

996 
Êag
)

998  (~
	`AT91F_PIO_GëCfgPuŒup
(
pPio
Ë& 
Êag
);

999 
	}
}

1008 
__ölöe
 
	$AT91F_PMC_CfgSysClkE«bÀReg
 (

1009 
AT91PS_PMC
 
pPMC
,

1010 
mode
)

1013 
pPMC
->
PMC_SCER
 = 
mode
;

1014 
	}
}

1020 
__ölöe
 
	$AT91F_PMC_CfgSysClkDißbÀReg
 (

1021 
AT91PS_PMC
 
pPMC
,

1022 
mode
)

1025 
pPMC
->
PMC_SCDR
 = 
mode
;

1026 
	}
}

1032 
__ölöe
 
	$AT91F_PMC_GëSysClkSètusReg
 (

1033 
AT91PS_PMC
 
pPMC


1036  
pPMC
->
PMC_SCSR
;

1037 
	}
}

1043 
__ölöe
 
	$AT91F_PMC_E«bÀPîùhClock
 (

1044 
AT91PS_PMC
 
pPMC
,

1045 
≥rùhIds
)

1047 
pPMC
->
PMC_PCER
 = 
≥rùhIds
;

1048 
	}
}

1054 
__ölöe
 
	$AT91F_PMC_DißbÀPîùhClock
 (

1055 
AT91PS_PMC
 
pPMC
,

1056 
≥rùhIds
)

1058 
pPMC
->
PMC_PCDR
 = 
≥rùhIds
;

1059 
	}
}

1065 
__ölöe
 
	$AT91F_PMC_GëPîùhClock
 (

1066 
AT91PS_PMC
 
pPMC
)

1068  
pPMC
->
PMC_PCSR
;

1069 
	}
}

1075 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscûœt‹Reg
 (

1076 
AT91PS_CKGR
 
pCKGR
,

1077 
mode
)

1079 
pCKGR
->
CKGR_MOR
 = 
mode
;

1080 
	}
}

1086 
__ölöe
 
	$AT91F_CKGR_GëMaöOscûœt‹Reg
 (

1087 
AT91PS_CKGR
 
pCKGR
)

1089  
pCKGR
->
CKGR_MOR
;

1090 
	}
}

1096 
__ölöe
 
	$AT91F_CKGR_E«bÀMaöOscûœt‹
(

1097 
AT91PS_CKGR
 
pCKGR
)

1099 
pCKGR
->
CKGR_MOR
 |
AT91C_CKGR_MOSCEN
;

1100 
	}
}

1106 
__ölöe
 
	$AT91F_CKGR_DißbÀMaöOscûœt‹
 (

1107 
AT91PS_CKGR
 
pCKGR
)

1109 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_MOSCEN
;

1110 
	}
}

1116 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscSèπUpTime
 (

1117 
AT91PS_CKGR
 
pCKGR
,

1118 
°¨tup_time
,

1119 
¶owClock
)

1121 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_OSCOUNT
;

1122 
pCKGR
->
CKGR_MOR
 |((
¶owClock
 * 
°¨tup_time
)/(8*1000000)) << 8;

1123 
	}
}

1129 
__ölöe
 
	$AT91F_CKGR_GëMaöClockFªqReg
 (

1130 
AT91PS_CKGR
 
pCKGR
)

1132  
pCKGR
->
CKGR_MCFR
;

1133 
	}
}

1139 
__ölöe
 
	$AT91F_CKGR_GëMaöClock
 (

1140 
AT91PS_CKGR
 
pCKGR
,

1141 
¶owClock
)

1143  ((
pCKGR
->
CKGR_MCFR
 & 
AT91C_CKGR_MAINF
Ë* 
¶owClock
) >> 4;

1144 
	}
}

1150 
__ölöe
 
	$AT91F_PMC_CfgMCKReg
 (

1151 
AT91PS_PMC
 
pPMC
,

1152 
mode
)

1154 
pPMC
->
PMC_MCKR
 = 
mode
;

1155 
	}
}

1161 
__ölöe
 
	$AT91F_PMC_GëMCKReg
(

1162 
AT91PS_PMC
 
pPMC
)

1164  
pPMC
->
PMC_MCKR
;

1165 
	}
}

1171 
__ölöe
 
	$AT91F_PMC_GëMa°îClock
 (

1172 
AT91PS_PMC
 
pPMC
,

1173 
AT91PS_CKGR
 
pCKGR
,

1174 
¶owClock
)

1176 
ªg
 = 
pPMC
->
PMC_MCKR
;

1177 
¥esˇÀr
 = (1 << ((
ªg
 & 
AT91C_PMC_PRES
) >> 2));

1178 
∂lDividî
, 
∂lMu…ùlõr
;

1180 
ªg
 & 
AT91C_PMC_CSS
) {

1181 
AT91C_PMC_CSS_SLOW_CLK
:

1182  
¶owClock
 / 
¥esˇÀr
;

1183 
AT91C_PMC_CSS_MAIN_CLK
:

1184  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
¥esˇÀr
;

1185 
AT91C_PMC_CSS_PLL_CLK
:

1186 
ªg
 = 
pCKGR
->
CKGR_PLLR
;

1187 
∂lDividî
 = (
ªg
 & 
AT91C_CKGR_DIV
);

1188 
∂lMu…ùlõr
 = ((
ªg
 & 
AT91C_CKGR_MUL
) >> 16) + 1;

1189  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
∂lDividî
 * 
∂lMu…ùlõr
 / 
¥esˇÀr
;

1192 
	}
}

1198 
__ölöe
 
	$AT91F_PMC_E«bÀPCK
 (

1199 
AT91PS_PMC
 
pPMC
,

1200 
pck
,

1201 
mode
)

1203 
pPMC
->
PMC_PCKR
[
pck
] = 
mode
;

1204 
pPMC
->
PMC_SCER
 = (1 << 
pck
) << 8;

1205 
	}
}

1211 
__ölöe
 
	$AT91F_PMC_DißbÀPCK
 (

1212 
AT91PS_PMC
 
pPMC
,

1213 
pck
)

1215 
pPMC
->
PMC_SCDR
 = (1 << 
pck
) << 8;

1216 
	}
}

1222 
__ölöe
 
	$AT91F_PMC_E«bÀIt
 (

1223 
AT91PS_PMC
 
pPMC
,

1224 
Êag
)

1227 
pPMC
->
PMC_IER
 = 
Êag
;

1228 
	}
}

1234 
__ölöe
 
	$AT91F_PMC_DißbÀIt
 (

1235 
AT91PS_PMC
 
pPMC
,

1236 
Êag
)

1239 
pPMC
->
PMC_IDR
 = 
Êag
;

1240 
	}
}

1246 
__ölöe
 
	$AT91F_PMC_GëSètus
(

1247 
AT91PS_PMC
 
pPMC
)

1249  
pPMC
->
PMC_SR
;

1250 
	}
}

1256 
__ölöe
 
	$AT91F_PMC_GëI¡îru±MaskSètus
(

1257 
AT91PS_PMC
 
pPMC
)

1259  
pPMC
->
PMC_IMR
;

1260 
	}
}

1266 
__ölöe
 
	$AT91F_PMC_IsI¡îru±Masked
(

1267 
AT91PS_PMC
 
pPMC
,

1268 
Êag
)

1270  (
	`AT91F_PMC_GëI¡îru±MaskSètus
(
pPMC
Ë& 
Êag
);

1271 
	}
}

1277 
__ölöe
 
	$AT91F_PMC_IsSètusSë
(

1278 
AT91PS_PMC
 
pPMC
,

1279 
Êag
)

1281  (
	`AT91F_PMC_GëSètus
(
pPMC
Ë& 
Êag
);

1282 
	}
}

1289 
__ölöe
 
	$AT91F_RSTSo·Re£t
(

1290 
AT91PS_RSTC
 
pRSTC
,

1291 
ª£t
)

1293 
pRSTC
->
RSTC_RCR
 = (0xA5000000 | 
ª£t
);

1294 
	}
}

1300 
__ölöe
 
	$AT91F_RSTSëMode
(

1301 
AT91PS_RSTC
 
pRSTC
,

1302 
mode
)

1304 
pRSTC
->
RSTC_RMR
 = (0xA5000000 | 
mode
);

1305 
	}
}

1311 
__ölöe
 
	$AT91F_RSTGëMode
(

1312 
AT91PS_RSTC
 
pRSTC
)

1314  (
pRSTC
->
RSTC_RMR
);

1315 
	}
}

1321 
__ölöe
 
	$AT91F_RSTGëSètus
(

1322 
AT91PS_RSTC
 
pRSTC
)

1324  (
pRSTC
->
RSTC_RSR
);

1325 
	}
}

1331 
__ölöe
 
	$AT91F_RSTIsSo·R°A˘ive
(

1332 
AT91PS_RSTC
 
pRSTC
)

1334  ((
pRSTC
->
RSTC_RSR
Ë& 
AT91C_RSTC_SRCMP
);

1335 
	}
}

1343 
__ölöe
 
	$AT91F_RTTSëTimeBa£
(

1344 
AT91PS_RTTC
 
pRTTC
,

1345 
ms
)

1347 i‡(
ms
 > 2000)

1349 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1350 
pRTTC
->
RTTC_RTMR
 |(((
ms
 << 15) /1000) & 0xFFFF);

1352 
	}
}

1358 
__ölöe
 
	$AT91F_RTTSëPªsˇÀr
(

1359 
AT91PS_RTTC
 
pRTTC
,

1360 
π¥es
)

1362 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1363 
pRTTC
->
RTTC_RTMR
 |(
π¥es
 & 0xFFFF);

1364  (
pRTTC
->
RTTC_RTMR
);

1365 
	}
}

1371 
__ölöe
 
	$AT91F_RTTRe°¨t
(

1372 
AT91PS_RTTC
 
pRTTC
)

1374 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTRST
;

1375 
	}
}

1382 
__ölöe
 
	$AT91F_RTTSëAœrmINT
(

1383 
AT91PS_RTTC
 
pRTTC
)

1385 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_ALMIEN
;

1386 
	}
}

1392 
__ölöe
 
	$AT91F_RTTCÀ¨AœrmINT
(

1393 
AT91PS_RTTC
 
pRTTC
)

1395 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_ALMIEN
;

1396 
	}
}

1402 
__ölöe
 
	$AT91F_RTTSëRâIncINT
(

1403 
AT91PS_RTTC
 
pRTTC
)

1405 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTINCIEN
;

1406 
	}
}

1412 
__ölöe
 
	$AT91F_RTTCÀ¨RâIncINT
(

1413 
AT91PS_RTTC
 
pRTTC
)

1415 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_RTTINCIEN
;

1416 
	}
}

1422 
__ölöe
 
	$AT91F_RTTSëAœrmVÆue
(

1423 
AT91PS_RTTC
 
pRTTC
, 
Æ¨m
)

1425 
pRTTC
->
RTTC_RTAR
 = 
Æ¨m
;

1426 
	}
}

1432 
__ölöe
 
	$AT91F_RTTGëAœrmVÆue
(

1433 
AT91PS_RTTC
 
pRTTC
)

1435 (
pRTTC
->
RTTC_RTAR
);

1436 
	}
}

1442 
__ölöe
 
	$AT91F_RTTGëSètus
(

1443 
AT91PS_RTTC
 
pRTTC
)

1445 (
pRTTC
->
RTTC_RTSR
);

1446 
	}
}

1452 
__ölöe
 
	$AT91F_RTTRódVÆue
(

1453 
AT91PS_RTTC
 
pRTTC
)

1455 vﬁ©ûê
vÆ1
,
vÆ2
;

1458 
vÆ1
 = 
pRTTC
->
RTTC_RTVR
;

1459 
vÆ2
 = 
pRTTC
->
RTTC_RTVR
;

1461 
vÆ1
 !
vÆ2
);

1462 (
vÆ1
);

1463 
	}
}

1471 
__ölöe
 
	$AT91F_PITInô
(

1472 
AT91PS_PITC
 
pPITC
,

1473 
≥riod
,

1474 
pô_‰equícy
)

1476 
pPITC
->
PITC_PIMR
 = 
≥riod
? (≥riod * 
pô_‰equícy
 + 8) >> 4 : 0;

1477 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITEN
;

1478 
	}
}

1484 
__ölöe
 
	$AT91F_PITSëPIV
(

1485 
AT91PS_PITC
 
pPITC
,

1486 
piv
)

1488 
pPITC
->
PITC_PIMR
 = 
piv
 | (pPITC->PITC_PIMR & (
AT91C_PITC_PITEN
 | 
AT91C_PITC_PITIEN
));

1489 
	}
}

1495 
__ölöe
 
	$AT91F_PITE«bÀI¡
(

1496 
AT91PS_PITC
 
pPITC
)

1498 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITIEN
;

1499 
	}
}

1505 
__ölöe
 
	$AT91F_PITDißbÀI¡
(

1506 
AT91PS_PITC
 
pPITC
)

1508 
pPITC
->
PITC_PIMR
 &~
AT91C_PITC_PITIEN
;

1509 
	}
}

1515 
__ölöe
 
	$AT91F_PITGëMode
(

1516 
AT91PS_PITC
 
pPITC
)

1518 (
pPITC
->
PITC_PIMR
);

1519 
	}
}

1525 
__ölöe
 
	$AT91F_PITGëSètus
(

1526 
AT91PS_PITC
 
pPITC
)

1528 (
pPITC
->
PITC_PISR
);

1529 
	}
}

1535 
__ölöe
 
	$AT91F_PITGëPIIR
(

1536 
AT91PS_PITC
 
pPITC
)

1538 (
pPITC
->
PITC_PIIR
);

1539 
	}
}

1545 
__ölöe
 
	$AT91F_PITGëPIVR
(

1546 
AT91PS_PITC
 
pPITC
)

1548 (
pPITC
->
PITC_PIVR
);

1549 
	}
}

1557 
__ölöe
 
	$AT91F_WDTSëMode
(

1558 
AT91PS_WDTC
 
pWDTC
,

1559 
Mode
)

1561 
pWDTC
->
WDTC_WDMR
 = 
Mode
;

1562 
	}
}

1568 
__ölöe
 
	$AT91F_WDTRe°¨t
(

1569 
AT91PS_WDTC
 
pWDTC
)

1571 
pWDTC
->
WDTC_WDCR
 = 0xA5000001;

1572 
	}
}

1578 
__ölöe
 
	$AT91F_WDTSGëètus
(

1579 
AT91PS_WDTC
 
pWDTC
)

1581 (
pWDTC
->
WDTC_WDSR
 & 0x3);

1582 
	}
}

1588 
__ölöe
 
	$AT91F_WDTGëPîiod
(
ms
)

1590 i‡((
ms
 < 4) || (ms > 16000))

1592 ((
ms
 << 8) / 1000);

1593 
	}
}

1601 
__ölöe
 
	$AT91F_VREG_E«bÀ_LowPowîMode
(

1602 
AT91PS_VREG
 
pVREG
)

1604 
pVREG
->
VREG_MR
 |
AT91C_VREG_PSTDBY
;

1605 
	}
}

1611 
__ölöe
 
	$AT91F_VREG_DißbÀ_LowPowîMode
(

1612 
AT91PS_VREG
 
pVREG
)

1614 
pVREG
->
VREG_MR
 &~
AT91C_VREG_PSTDBY
;

1615 
	}
}

1619 
	#AT91C_MC_CORRECT_KEY
 (() 0x5A << 24)

1620 

	)

1625 
__ölöe
 
	$AT91F_MC_Rem≠
 ()

1627 
AT91PS_MC
 
pMC
 = (AT91PS_MCË
AT91C_BASE_MC
;

1629 
pMC
->
MC_RCR
 = 
AT91C_MC_RCB
;

1630 
	}
}

1636 
__ölöe
 
	$AT91F_MC_EFC_CfgModeReg
 (

1637 
AT91PS_MC
 
pMC
,

1638 
mode
)

1641 
pMC
->
MC_FMR
 = 
mode
;

1642 
	}
}

1648 
__ölöe
 
	$AT91F_MC_EFC_GëModeReg
(

1649 
AT91PS_MC
 
pMC
)

1651  
pMC
->
MC_FMR
;

1652 
	}
}

1658 
__ölöe
 
	$AT91F_MC_EFC_CompuãFMCN
(

1659 
ma°î_˛ock
)

1661  (
ma°î_˛ock
/1000000 +2);

1662 
	}
}

1668 
__ölöe
 
	$AT91F_MC_EFC_Pîf‹mCmd
 (

1669 
AT91PS_MC
 
pMC
,

1670 
å™s„r_cmd
)

1672 
pMC
->
MC_FCR
 = 
å™s„r_cmd
;

1673 
	}
}

1679 
__ölöe
 
	$AT91F_MC_EFC_GëSètus
(

1680 
AT91PS_MC
 
pMC
)

1682  
pMC
->
MC_FSR
;

1683 
	}
}

1689 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Masked
(

1690 
AT91PS_MC
 
pMC
,

1691 
Êag
)

1693  (
	`AT91F_MC_EFC_GëModeReg
(
pMC
Ë& 
Êag
);

1694 
	}
}

1700 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Së
(

1701 
AT91PS_MC
 
pMC
,

1702 
Êag
)

1704  (
	`AT91F_MC_EFC_GëSètus
(
pMC
Ë& 
Êag
);

1705 
	}
}

1714 
__ölöe
 
	$AT91F_SPI_O≥n
 (

1715 c⁄° 
nuŒ
)

1719 
	}
}

1725 
__ölöe
 
	$AT91F_SPI_CfgCs
 (

1726 
AT91PS_SPI
 
pSPI
,

1727 
cs
,

1728 
vÆ
)

1731 *(
pSPI
->
SPI_CSR
 + 
cs
Ë
vÆ
;

1732 
	}
}

1738 
__ölöe
 
	$AT91F_SPI_E«bÀIt
 (

1739 
AT91PS_SPI
 
pSPI
,

1740 
Êag
)

1743 
pSPI
->
SPI_IER
 = 
Êag
;

1744 
	}
}

1750 
__ölöe
 
	$AT91F_SPI_DißbÀIt
 (

1751 
AT91PS_SPI
 
pSPI
,

1752 
Êag
)

1755 
pSPI
->
SPI_IDR
 = 
Êag
;

1756 
	}
}

1762 
__ölöe
 
	$AT91F_SPI_Re£t
 (

1763 
AT91PS_SPI
 
pSPI


1767 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SWRST
;

1768 
	}
}

1774 
__ölöe
 
	$AT91F_SPI_E«bÀ
 (

1775 
AT91PS_SPI
 
pSPI


1779 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIEN
;

1780 
	}
}

1786 
__ölöe
 
	$AT91F_SPI_DißbÀ
 (

1787 
AT91PS_SPI
 
pSPI


1791 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1792 
	}
}

1798 
__ölöe
 
	$AT91F_SPI_CfgMode
 (

1799 
AT91PS_SPI
 
pSPI
,

1800 
mode
)

1803 
pSPI
->
SPI_MR
 = 
mode
;

1804 
	}
}

1810 
__ölöe
 
	$AT91F_SPI_CfgPCS
 (

1811 
AT91PS_SPI
 
pSPI
,

1812 
PCS_Devi˚
)

1815 
pSPI
->
SPI_MR
 &= 0xFFF0FFFF;

1816 
pSPI
->
SPI_MR
 |–(
PCS_Devi˚
<<16Ë& 
AT91C_SPI_PCS
 );

1817 
	}
}

1823 
__ölöe
 
	$AT91F_SPI_Re˚iveFøme
 (

1824 
AT91PS_SPI
 
pSPI
,

1825 *
pBuf„r
,

1826 
szBuf„r
,

1827 *
pNextBuf„r
,

1828 
szNextBuf„r
 )

1830  
	`AT91F_PDC_Re˚iveFøme
(

1831 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1832 
pBuf„r
,

1833 
szBuf„r
,

1834 
pNextBuf„r
,

1835 
szNextBuf„r
);

1836 
	}
}

1842 
__ölöe
 
	$AT91F_SPI_SídFøme
(

1843 
AT91PS_SPI
 
pSPI
,

1844 *
pBuf„r
,

1845 
szBuf„r
,

1846 *
pNextBuf„r
,

1847 
szNextBuf„r
 )

1849  
	`AT91F_PDC_SídFøme
(

1850 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1851 
pBuf„r
,

1852 
szBuf„r
,

1853 
pNextBuf„r
,

1854 
szNextBuf„r
);

1855 
	}
}

1861 
__ölöe
 
	$AT91F_SPI_Clo£
 (

1862 
AT91PS_SPI
 
pSPI
)

1865 
pSPI
->
SPI_CSR
[0] = 0 ;

1866 
pSPI
->
SPI_CSR
[1] = 0 ;

1867 
pSPI
->
SPI_CSR
[2] = 0 ;

1868 
pSPI
->
SPI_CSR
[3] = 0 ;

1871 
pSPI
->
SPI_MR
 = 0 ;

1874 
pSPI
->
SPI_IDR
 = 0xFFFFFFFF ;

1877 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
));

1880 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1881 
	}
}

1887 
__ölöe
 
	$AT91F_SPI_PutCh¨
 (

1888 
AT91PS_SPI
 
pSPI
,

1889 
ch¨a˘î
,

1890 
cs_numbî
 )

1892 
vÆue_f‹_cs
;

1893 
vÆue_f‹_cs
 = (~(1 << 
cs_numbî
)) & 0xF;

1894 
pSPI
->
SPI_TDR
 = (
ch¨a˘î
 & 0xFFFFË| (
vÆue_f‹_cs
 << 16);

1895 
	}
}

1901 
__ölöe
 
	$AT91F_SPI_GëCh¨
 (

1902 c⁄° 
AT91PS_SPI
 
pSPI
)

1904 ((
pSPI
->
SPI_RDR
) & 0xFFFF);

1905 
	}
}

1911 
__ölöe
 
	$AT91F_SPI_GëI¡îru±MaskSètus
(

1912 
AT91PS_SPI
 
pSpi
)

1914  
pSpi
->
SPI_IMR
;

1915 
	}
}

1921 
__ölöe
 
	$AT91F_SPI_IsI¡îru±Masked
(

1922 
AT91PS_SPI
 
pSpi
,

1923 
Êag
)

1925  (
	`AT91F_SPI_GëI¡îru±MaskSètus
(
pSpi
Ë& 
Êag
);

1926 
	}
}

1935 
	#AT91C_US_ASYNC_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

	)

1936 
	gAT91C_US_NBSTOP_1_BIT
 + \

1937 
	gAT91C_US_PAR_NONE
 + \

1938 
	gAT91C_US_CHRL_8_BITS
 + \

1939 
	gAT91C_US_CLKS_CLOCK
 )

1942 
	#AT91C_US_ASYNC_SCK_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

	)

1943 
	gAT91C_US_NBSTOP_1_BIT
 + \

1944 
	gAT91C_US_PAR_NONE
 + \

1945 
	gAT91C_US_CHRL_8_BITS
 + \

1946 
	gAT91C_US_CLKS_EXT
 )

1949 
	#AT91C_US_SYNC_MODE
 ( 
AT91C_US_SYNC
 + \

	)

1950 
	gAT91C_US_USMODE_NORMAL
 + \

1951 
	gAT91C_US_NBSTOP_1_BIT
 + \

1952 
	gAT91C_US_PAR_NONE
 + \

1953 
	gAT91C_US_CHRL_8_BITS
 + \

1954 
	gAT91C_US_CLKS_CLOCK
 )

1957 
	#AT91C_US_SCK_USED
 (
AT91C_US_CKLO
 | 
AT91C_US_CLKS_EXT
)

	)

1960 
	#AT91C_US_ISO_READER_MODE
 ( 
AT91C_US_USMODE_ISO7816_0
 + \

	)

1961 
	gAT91C_US_CLKS_CLOCK
 +\

1962 
	gAT91C_US_NBSTOP_1_BIT
 + \

1963 
	gAT91C_US_PAR_EVEN
 + \

1964 
	gAT91C_US_CHRL_8_BITS
 + \

1965 
	gAT91C_US_CKLO
 +\

1966 
	gAT91C_US_OVER
)

1969 
	#AT91C_US_ASYNC_IRDA_MODE
 ( 
AT91C_US_USMODE_IRDA
 + \

	)

1970 
	gAT91C_US_NBSTOP_1_BIT
 + \

1971 
	gAT91C_US_PAR_NONE
 + \

1972 
	gAT91C_US_CHRL_8_BITS
 + \

1973 
	gAT91C_US_CLKS_CLOCK
 )

1979 
__ölöe
 
	$AT91F_US_Baudøã
 (

1980 c⁄° 
maö_˛ock
,

1981 c⁄° 
baud_øã
)

1983 
baud_vÆue
 = ((
maö_˛ock
*10)/(
baud_øã
 * 16));

1984 i‡((
baud_vÆue
 % 10) >= 5)

1985 
baud_vÆue
 = (baud_value / 10) + 1;

1987 
baud_vÆue
 /= 10;

1988  
baud_vÆue
;

1989 
	}
}

1995 
__ölöe
 
	$AT91F_US_SëBaudøã
 (

1996 
AT91PS_USART
 
pUSART
,

1997 
maöClock
,

1998 
•ìd
)

2001 
pUSART
->
US_BRGR
 = 
	`AT91F_US_Baudøã
(
maöClock
, 
•ìd
);

2002 
	}
}

2008 
__ölöe
 
	$AT91F_US_SëTimegu¨d
 (

2009 
AT91PS_USART
 
pUSART
,

2010 
timegu¨d
)

2013 
pUSART
->
US_TTGR
 = 
timegu¨d
 ;

2014 
	}
}

2020 
__ölöe
 
	$AT91F_US_E«bÀIt
 (

2021 
AT91PS_USART
 
pUSART
,

2022 
Êag
)

2025 
pUSART
->
US_IER
 = 
Êag
;

2026 
	}
}

2032 
__ölöe
 
	$AT91F_US_DißbÀIt
 (

2033 
AT91PS_USART
 
pUSART
,

2034 
Êag
)

2037 
pUSART
->
US_IDR
 = 
Êag
;

2038 
	}
}

2044 
__ölöe
 
	$AT91F_US_C⁄figuª
 (

2045 
AT91PS_USART
 
pUSART
,

2046 
maöClock
,

2047 
mode
 ,

2048 
baudR©e
 ,

2049 
timegu¨d
 )

2052 
pUSART
->
US_IDR
 = () -1;

2055 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RXDIS
 | 
AT91C_US_TXDIS
 ;

2058 
	`AT91F_US_SëBaudøã
(
pUSART
, 
maöClock
, 
baudR©e
);

2061 
	`AT91F_US_SëTimegu¨d
(
pUSART
, 
timegu¨d
);

2064 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2067 
pUSART
->
US_MR
 = 
mode
 ;

2069 
	}
}

2075 
__ölöe
 
	$AT91F_US_E«bÀRx
 (

2076 
AT91PS_USART
 
pUSART
)

2079 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2080 
	}
}

2086 
__ölöe
 
	$AT91F_US_E«bÀTx
 (

2087 
AT91PS_USART
 
pUSART
)

2090 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2091 
	}
}

2097 
__ölöe
 
	$AT91F_US_Re£tRx
 (

2098 
AT91PS_USART
 
pUSART
)

2101 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
;

2103 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2104 
	}
}

2110 
__ölöe
 
	$AT91F_US_Re£tTx
 (

2111 
AT91PS_USART
 
pUSART
)

2114 
pUSART
->
US_CR
 = 
AT91C_US_RSTTX
;

2116 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2117 
	}
}

2123 
__ölöe
 
	$AT91F_US_DißbÀRx
 (

2124 
AT91PS_USART
 
pUSART
)

2127 
pUSART
->
US_CR
 = 
AT91C_US_RXDIS
;

2128 
	}
}

2134 
__ölöe
 
	$AT91F_US_DißbÀTx
 (

2135 
AT91PS_USART
 
pUSART
)

2138 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
;

2139 
	}
}

2145 
__ölöe
 
	$AT91F_US_Clo£
 (

2146 
AT91PS_USART
 
pUSART
)

2149 
pUSART
->
US_BRGR
 = 0 ;

2152 
pUSART
->
US_MR
 = 0 ;

2155 
pUSART
->
US_TTGR
 = 0;

2158 
pUSART
->
US_IDR
 = 0xFFFFFFFF ;

2161 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2164 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
 | 
AT91C_US_RXDIS
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RSTRX
 ;

2165 
	}
}

2171 
__ölöe
 
	$AT91F_US_TxRódy
 (

2172 
AT91PS_USART
 
pUSART
 )

2174  (
pUSART
->
US_CSR
 & 
AT91C_US_TXRDY
);

2175 
	}
}

2181 
__ölöe
 
	$AT91F_US_RxRódy
 (

2182 
AT91PS_USART
 
pUSART
 )

2184  (
pUSART
->
US_CSR
 & 
AT91C_US_RXRDY
);

2185 
	}
}

2191 
__ölöe
 
	$AT91F_US_Eº‹
 (

2192 
AT91PS_USART
 
pUSART
 )

2194  (
pUSART
->
US_CSR
 &

2195 (
AT91C_US_OVRE
 |

2196 
AT91C_US_FRAME
 |

2197 
AT91C_US_PARE
));

2198 
	}
}

2204 
__ölöe
 
	$AT91F_US_PutCh¨
 (

2205 
AT91PS_USART
 
pUSART
,

2206 
ch¨a˘î
 )

2208 
pUSART
->
US_THR
 = (
ch¨a˘î
 & 0x1FF);

2209 
	}
}

2215 
__ölöe
 
	$AT91F_US_GëCh¨
 (

2216 c⁄° 
AT91PS_USART
 
pUSART
)

2218 ((
pUSART
->
US_RHR
) & 0x1FF);

2219 
	}
}

2225 
__ölöe
 
	$AT91F_US_SídFøme
(

2226 
AT91PS_USART
 
pUSART
,

2227 *
pBuf„r
,

2228 
szBuf„r
,

2229 *
pNextBuf„r
,

2230 
szNextBuf„r
 )

2232  
	`AT91F_PDC_SídFøme
(

2233 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2234 
pBuf„r
,

2235 
szBuf„r
,

2236 
pNextBuf„r
,

2237 
szNextBuf„r
);

2238 
	}
}

2244 
__ölöe
 
	$AT91F_US_Re˚iveFøme
 (

2245 
AT91PS_USART
 
pUSART
,

2246 *
pBuf„r
,

2247 
szBuf„r
,

2248 *
pNextBuf„r
,

2249 
szNextBuf„r
 )

2251  
	`AT91F_PDC_Re˚iveFøme
(

2252 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2253 
pBuf„r
,

2254 
szBuf„r
,

2255 
pNextBuf„r
,

2256 
szNextBuf„r
);

2257 
	}
}

2263 
__ölöe
 
	$AT91F_US_SëIrdaFûãr
 (

2264 
AT91PS_USART
 
pUSART
,

2265 
vÆue


2268 
pUSART
->
US_IF
 = 
vÆue
;

2269 
	}
}

2279 
	#AT91C_I2S_ASY_MASTER_TX_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)–+\

	)

2280 
	gAT91C_SSC_CKS_DIV
 +\

2281 
	gAT91C_SSC_CKO_CONTINOUS
 +\

2282 
	gAT91C_SSC_CKG_NONE
 +\

2283 
	gAT91C_SSC_START_FALL_RF
 +\

2284 
	gAT91C_SSC_STTOUT
 +\

2285 ((1<<16Ë& 
	gAT91C_SSC_STTDLY
) +\

2286 ((((
nb_bô_by_¶Ÿ
*
	gnb_¶Ÿ_by_‰ame
)/2)-1) <<24))

2292 
	#AT91C_I2S_ASY_TX_FRAME_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)–+\

	)

2293 (
	gnb_bô_by_¶Ÿ
-1) +\

2294 
	gAT91C_SSC_MSBF
 +\

2295 (((
	gnb_¶Ÿ_by_‰ame
-1)<<8Ë& 
	gAT91C_SSC_DATNB
) +\

2296 (((
	gnb_bô_by_¶Ÿ
-1)<<16Ë& 
	gAT91C_SSC_FSLEN
) +\

2297 
	gAT91C_SSC_FSOS_NEGATIVE
)

2304 
__ölöe
 
	$AT91F_SSC_SëBaudøã
 (

2305 
AT91PS_SSC
 
pSSC
,

2306 
maöClock
,

2307 
•ìd
)

2309 
baud_vÆue
;

2311 i‡(
•ìd
 == 0)

2312 
baud_vÆue
 = 0;

2315 
baud_vÆue
 = (Ë(
maöClock
 * 10)/(2*
•ìd
);

2316 i‡((
baud_vÆue
 % 10) >= 5)

2317 
baud_vÆue
 = (baud_value / 10) + 1;

2319 
baud_vÆue
 /= 10;

2322 
pSSC
->
SSC_CMR
 = 
baud_vÆue
;

2323 
	}
}

2329 
__ölöe
 
	$AT91F_SSC_C⁄figuª
 (

2330 
AT91PS_SSC
 
pSSC
,

2331 
sy°_˛ock
,

2332 
baud_øã
,

2333 
˛ock_rx
,

2334 
mode_rx
,

2335 
˛ock_tx
,

2336 
mode_tx
)

2339 
pSSC
->
SSC_IDR
 = () -1;

2342 
pSSC
->
SSC_CR
 = 
AT91C_SSC_SWRST
 | 
AT91C_SSC_RXDIS
 | 
AT91C_SSC_TXDIS
 ;

2345 
	`AT91F_SSC_SëBaudøã
(
pSSC
, 
sy°_˛ock
, 
baud_øã
);

2348 
pSSC
->
SSC_RCMR
 = 
˛ock_rx
;

2351 
pSSC
->
SSC_TCMR
 = 
˛ock_tx
;

2354 
pSSC
->
SSC_RFMR
 = 
mode_rx
;

2357 
pSSC
->
SSC_TFMR
 = 
mode_tx
;

2360 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
));

2363 
	}
}

2369 
__ölöe
 
	$AT91F_SSC_E«bÀRx
 (

2370 
AT91PS_SSC
 
pSSC
)

2373 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXEN
;

2374 
	}
}

2380 
__ölöe
 
	$AT91F_SSC_DißbÀRx
 (

2381 
AT91PS_SSC
 
pSSC
)

2384 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXDIS
;

2385 
	}
}

2391 
__ölöe
 
	$AT91F_SSC_E«bÀTx
 (

2392 
AT91PS_SSC
 
pSSC
)

2395 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXEN
;

2396 
	}
}

2402 
__ölöe
 
	$AT91F_SSC_DißbÀTx
 (

2403 
AT91PS_SSC
 
pSSC
)

2406 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXDIS
;

2407 
	}
}

2413 
__ölöe
 
	$AT91F_SSC_E«bÀIt
 (

2414 
AT91PS_SSC
 
pSSC
,

2415 
Êag
)

2418 
pSSC
->
SSC_IER
 = 
Êag
;

2419 
	}
}

2425 
__ölöe
 
	$AT91F_SSC_DißbÀIt
 (

2426 
AT91PS_SSC
 
pSSC
,

2427 
Êag
)

2430 
pSSC
->
SSC_IDR
 = 
Êag
;

2431 
	}
}

2437 
__ölöe
 
	$AT91F_SSC_Re˚iveFøme
 (

2438 
AT91PS_SSC
 
pSSC
,

2439 *
pBuf„r
,

2440 
szBuf„r
,

2441 *
pNextBuf„r
,

2442 
szNextBuf„r
 )

2444  
	`AT91F_PDC_Re˚iveFøme
(

2445 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2446 
pBuf„r
,

2447 
szBuf„r
,

2448 
pNextBuf„r
,

2449 
szNextBuf„r
);

2450 
	}
}

2456 
__ölöe
 
	$AT91F_SSC_SídFøme
(

2457 
AT91PS_SSC
 
pSSC
,

2458 *
pBuf„r
,

2459 
szBuf„r
,

2460 *
pNextBuf„r
,

2461 
szNextBuf„r
 )

2463  
	`AT91F_PDC_SídFøme
(

2464 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2465 
pBuf„r
,

2466 
szBuf„r
,

2467 
pNextBuf„r
,

2468 
szNextBuf„r
);

2469 
	}
}

2475 
__ölöe
 
	$AT91F_SSC_GëI¡îru±MaskSètus
(

2476 
AT91PS_SSC
 
pSsc
)

2478  
pSsc
->
SSC_IMR
;

2479 
	}
}

2485 
__ölöe
 
	$AT91F_SSC_IsI¡îru±Masked
(

2486 
AT91PS_SSC
 
pSsc
,

2487 
Êag
)

2489  (
	`AT91F_SSC_GëI¡îru±MaskSètus
(
pSsc
Ë& 
Êag
);

2490 
	}
}

2499 
__ölöe
 
	$AT91F_TWI_E«bÀIt
 (

2500 
AT91PS_TWI
 
pTWI
,

2501 
Êag
)

2504 
pTWI
->
TWI_IER
 = 
Êag
;

2505 
	}
}

2511 
__ölöe
 
	$AT91F_TWI_DißbÀIt
 (

2512 
AT91PS_TWI
 
pTWI
,

2513 
Êag
)

2516 
pTWI
->
TWI_IDR
 = 
Êag
;

2517 
	}
}

2523 
__ölöe
 
	$AT91F_TWI_C⁄figuª
 ( 
AT91PS_TWI
 
pTWI
 )

2526 
pTWI
->
TWI_IDR
 = () -1;

2529 
pTWI
->
TWI_CR
 = 
AT91C_TWI_SWRST
;

2532 
pTWI
->
TWI_CR
 = 
AT91C_TWI_MSEN
;

2534 
	}
}

2540 
__ölöe
 
	$AT91F_TWI_GëI¡îru±MaskSètus
(

2541 
AT91PS_TWI
 
pTwi
)

2543  
pTwi
->
TWI_IMR
;

2544 
	}
}

2550 
__ölöe
 
	$AT91F_TWI_IsI¡îru±Masked
(

2551 
AT91PS_TWI
 
pTwi
,

2552 
Êag
)

2554  (
	`AT91F_TWI_GëI¡îru±MaskSètus
(
pTwi
Ë& 
Êag
);

2555 
	}
}

2564 
__ölöe
 
	$AT91F_PWMC_GëSètus
(

2565 
AT91PS_PWMC
 
pPWM
)

2567  
pPWM
->
PWMC_SR
;

2568 
	}
}

2574 
__ölöe
 
	$AT91F_PWMC_I¡îru±E«bÀ
(

2575 
AT91PS_PWMC
 
pPwm
,

2576 
Êag
)

2578 
pPwm
->
PWMC_IER
 = 
Êag
;

2579 
	}
}

2585 
__ölöe
 
	$AT91F_PWMC_I¡îru±DißbÀ
(

2586 
AT91PS_PWMC
 
pPwm
,

2587 
Êag
)

2589 
pPwm
->
PWMC_IDR
 = 
Êag
;

2590 
	}
}

2596 
__ölöe
 
	$AT91F_PWMC_GëI¡îru±MaskSètus
(

2597 
AT91PS_PWMC
 
pPwm
)

2599  
pPwm
->
PWMC_IMR
;

2600 
	}
}

2606 
__ölöe
 
	$AT91F_PWMC_IsI¡îru±Masked
(

2607 
AT91PS_PWMC
 
pPWM
,

2608 
Êag
)

2610  (
	`AT91F_PWMC_GëI¡îru±MaskSètus
(
pPWM
Ë& 
Êag
);

2611 
	}
}

2617 
__ölöe
 
	$AT91F_PWMC_IsSètusSë
(

2618 
AT91PS_PWMC
 
pPWM
,

2619 
Êag
)

2621  (
	`AT91F_PWMC_GëSètus
(
pPWM
Ë& 
Êag
);

2622 
	}
}

2628 
__ölöe
 
	$AT91F_PWMC_CfgCh™√l
(

2629 
AT91PS_PWMC
 
pPWM
,

2630 
ch™√lId
,

2631 
mode
,

2632 
≥riod
,

2633 
duty
)

2635 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CMR
 = 
mode
;

2636 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CDTYR
 = 
duty
;

2637 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CPRDR
 = 
≥riod
;

2638 
	}
}

2644 
__ölöe
 
	$AT91F_PWMC_SèπCh™√l
(

2645 
AT91PS_PWMC
 
pPWM
,

2646 
Êag
)

2648 
pPWM
->
PWMC_ENA
 = 
Êag
;

2649 
	}
}

2655 
__ölöe
 
	$AT91F_PWMC_St›Ch™√l
(

2656 
AT91PS_PWMC
 
pPWM
,

2657 
Êag
)

2659 
pPWM
->
PWMC_DIS
 = 
Êag
;

2660 
	}
}

2666 
__ölöe
 
	$AT91F_PWMC_Upd©eCh™√l
(

2667 
AT91PS_PWMC
 
pPWM
,

2668 
ch™√lId
,

2669 
upd©e
)

2671 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CUPDR
 = 
upd©e
;

2672 
	}
}

2681 
__ölöe
 
	$AT91F_UDP_E«bÀIt
 (

2682 
AT91PS_UDP
 
pUDP
,

2683 
Êag
)

2686 
pUDP
->
UDP_IER
 = 
Êag
;

2687 
	}
}

2693 
__ölöe
 
	$AT91F_UDP_DißbÀIt
 (

2694 
AT91PS_UDP
 
pUDP
,

2695 
Êag
)

2698 
pUDP
->
UDP_IDR
 = 
Êag
;

2699 
	}
}

2705 
__ölöe
 
	$AT91F_UDP_SëAddªss
 (

2706 
AT91PS_UDP
 
pUDP
,

2707 
addªss
)

2709 
pUDP
->
UDP_FADDR
 = (
AT91C_UDP_FEN
 | 
addªss
);

2710 
	}
}

2716 
__ölöe
 
	$AT91F_UDP_E«bÀEp
 (

2717 
AT91PS_UDP
 
pUDP
,

2718 
ídpoöt
)

2720 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_EPEDS
;

2721 
	}
}

2727 
__ölöe
 
	$AT91F_UDP_DißbÀEp
 (

2728 
AT91PS_UDP
 
pUDP
,

2729 
ídpoöt
)

2731 
pUDP
->
UDP_CSR
[
ídpoöt
] &~
AT91C_UDP_EPEDS
;

2732 
	}
}

2738 
__ölöe
 
	$AT91F_UDP_SëSèã
 (

2739 
AT91PS_UDP
 
pUDP
,

2740 
Êag
)

2742 
pUDP
->
UDP_GLBSTATE
 &~(
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
);

2743 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2744 
	}
}

2750 
__ölöe
 
	$AT91F_UDP_GëSèã
 (

2751 
AT91PS_UDP
 
pUDP
)

2753  (
pUDP
->
UDP_GLBSTATE
 & (
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
));

2754 
	}
}

2760 
__ölöe
 
	$AT91F_UDP_Re£tEp
 (

2761 
AT91PS_UDP
 
pUDP
,

2762 
Êag
)

2764 
pUDP
->
UDP_RSTEP
 = 
Êag
;

2765 
pUDP
->
UDP_RSTEP
 = 0;

2766 
	}
}

2772 
__ölöe
 
	$AT91F_UDP_EpSèŒ
(

2773 
AT91PS_UDP
 
pUDP
,

2774 
ídpoöt
)

2776 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_FORCESTALL
;

2777 
	}
}

2783 
__ölöe
 
	$AT91F_UDP_EpWrôe
(

2784 
AT91PS_UDP
 
pUDP
,

2785 
ídpoöt
,

2786 
vÆue
)

2788 
pUDP
->
UDP_FDR
[
ídpoöt
] = 
vÆue
;

2789 
	}
}

2795 
__ölöe
 
	$AT91F_UDP_EpRód
(

2796 
AT91PS_UDP
 
pUDP
,

2797 
ídpoöt
)

2799  
pUDP
->
UDP_FDR
[
ídpoöt
];

2800 
	}
}

2806 
__ölöe
 
	$AT91F_UDP_EpEndOfWr
(

2807 
AT91PS_UDP
 
pUDP
,

2808 
ídpoöt
)

2810 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_TXPKTRDY
;

2811 
	}
}

2817 
__ölöe
 
	$AT91F_UDP_EpCÀ¨
(

2818 
AT91PS_UDP
 
pUDP
,

2819 
ídpoöt
,

2820 
Êag
)

2822 
pUDP
->
UDP_CSR
[
ídpoöt
] &~(
Êag
);

2823 
	}
}

2829 
__ölöe
 
	$AT91F_UDP_EpSë
(

2830 
AT91PS_UDP
 
pUDP
,

2831 
ídpoöt
,

2832 
Êag
)

2834 
pUDP
->
UDP_CSR
[
ídpoöt
] |
Êag
;

2835 
	}
}

2841 
__ölöe
 
	$AT91F_UDP_EpSètus
(

2842 
AT91PS_UDP
 
pUDP
,

2843 
ídpoöt
)

2845  
pUDP
->
UDP_CSR
[
ídpoöt
];

2846 
	}
}

2852 
__ölöe
 
	$AT91F_UDP_GëI¡îru±MaskSètus
(

2853 
AT91PS_UDP
 
pUdp
)

2855  
pUdp
->
UDP_IMR
;

2856 
	}
}

2862 
__ölöe
 
	$AT91F_UDP_IsI¡îru±Masked
(

2863 
AT91PS_UDP
 
pUdp
,

2864 
Êag
)

2866  (
	`AT91F_UDP_GëI¡îru±MaskSètus
(
pUdp
Ë& 
Êag
);

2867 
	}
}

2876 
__ölöe
 
	$AT91F_TC_I¡îru±E«bÀ
(

2877 
AT91PS_TC
 
pTc
,

2878 
Êag
)

2880 
pTc
->
TC_IER
 = 
Êag
;

2881 
	}
}

2887 
__ölöe
 
	$AT91F_TC_I¡îru±DißbÀ
(

2888 
AT91PS_TC
 
pTc
,

2889 
Êag
)

2891 
pTc
->
TC_IDR
 = 
Êag
;

2892 
	}
}

2898 
__ölöe
 
	$AT91F_TC_GëI¡îru±MaskSètus
(

2899 
AT91PS_TC
 
pTc
)

2901  
pTc
->
TC_IMR
;

2902 
	}
}

2908 
__ölöe
 
	$AT91F_TC_IsI¡îru±Masked
(

2909 
AT91PS_TC
 
pTc
,

2910 
Êag
)

2912  (
	`AT91F_TC_GëI¡îru±MaskSètus
(
pTc
Ë& 
Êag
);

2913 
	}
}

2918 
	#STANDARD_FORMAT
 0

	)

2919 
	#EXTENDED_FORMAT
 1

	)

2925 
__ölöe
 
	$AT91F_InôMaûboxRegi°îs
(
AT91PS_CAN_MB
 
CAN_Maûbox
,

2926 
mode_ªg
,

2927 
ac˚±™˚_mask_ªg
,

2928 
id_ªg
,

2929 
d©a_low_ªg
,

2930 
d©a_high_ªg
,

2931 
c⁄åﬁ_ªg
)

2933 
CAN_Maûbox
->
CAN_MB_MCR
 = 0x0;

2934 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode_ªg
;

2935 
CAN_Maûbox
->
CAN_MB_MAM
 = 
ac˚±™˚_mask_ªg
;

2936 
CAN_Maûbox
->
CAN_MB_MID
 = 
id_ªg
;

2937 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a_low_ªg
;

2938 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a_high_ªg
;

2939 
CAN_Maûbox
->
CAN_MB_MCR
 = 
c⁄åﬁ_ªg
;

2940 
	}
}

2946 
__ölöe
 
	$AT91F_E«bÀCAN
(

2947 
AT91PS_CAN
 
pCAN
)

2949 
pCAN
->
CAN_MR
 |
AT91C_CAN_CANEN
;

2952  (
pCAN
->
CAN_SR
 & 
AT91C_CAN_WAKEUP
) != AT91C_CAN_WAKEUP );

2953 
	}
}

2959 
__ölöe
 
	$AT91F_DißbÀCAN
(

2960 
AT91PS_CAN
 
pCAN
)

2962 
pCAN
->
CAN_MR
 &~
AT91C_CAN_CANEN
;

2963 
	}
}

2969 
__ölöe
 
	$AT91F_CAN_E«bÀIt
 (

2970 
AT91PS_CAN
 
pCAN
,

2971 
Êag
)

2974 
pCAN
->
CAN_IER
 = 
Êag
;

2975 
	}
}

2981 
__ölöe
 
	$AT91F_CAN_DißbÀIt
 (

2982 
AT91PS_CAN
 
pCAN
,

2983 
Êag
)

2986 
pCAN
->
CAN_IDR
 = 
Êag
;

2987 
	}
}

2993 
__ölöe
 
	$AT91F_CAN_GëSètus
(

2994 
AT91PS_CAN
 
pCAN
)

2996  
pCAN
->
CAN_SR
;

2997 
	}
}

3003 
__ölöe
 
	$AT91F_CAN_GëI¡îru±MaskSètus
(

3004 
AT91PS_CAN
 
pCAN
)

3006  
pCAN
->
CAN_IMR
;

3007 
	}
}

3013 
__ölöe
 
	$AT91F_CAN_IsI¡îru±Masked
(

3014 
AT91PS_CAN
 
pCAN
,

3015 
Êag
)

3017  (
	`AT91F_CAN_GëI¡îru±MaskSètus
(
pCAN
Ë& 
Êag
);

3018 
	}
}

3024 
__ölöe
 
	$AT91F_CAN_IsSètusSë
(

3025 
AT91PS_CAN
 
pCAN
,

3026 
Êag
)

3028  (
	`AT91F_CAN_GëSètus
(
pCAN
Ë& 
Êag
);

3029 
	}
}

3035 
__ölöe
 
	$AT91F_CAN_CfgModeReg
 (

3036 
AT91PS_CAN
 
pCAN
,

3037 
mode
)

3040 
pCAN
->
CAN_MR
 = 
mode
;

3041 
	}
}

3047 
__ölöe
 
	$AT91F_CAN_GëModeReg
 (

3048 
AT91PS_CAN
 
pCAN


3051  
pCAN
->
CAN_MR
;

3052 
	}
}

3058 
__ölöe
 
	$AT91F_CAN_CfgBaudøãReg
 (

3059 
AT91PS_CAN
 
pCAN
,

3060 
baudøã_cfg
)

3063 
pCAN
->
CAN_BR
 = 
baudøã_cfg
;

3064 
	}
}

3070 
__ölöe
 
	$AT91F_CAN_GëBaudøã
 (

3071 
AT91PS_CAN
 
pCAN


3074  
pCAN
->
CAN_BR
;

3075 
	}
}

3081 
__ölöe
 
	$AT91F_CAN_GëI¡î«lCou¡î
 (

3082 
AT91PS_CAN
 
pCAN


3085  
pCAN
->
CAN_TIM
;

3086 
	}
}

3092 
__ölöe
 
	$AT91F_CAN_GëTime°amp
 (

3093 
AT91PS_CAN
 
pCAN


3096  
pCAN
->
CAN_TIMESTP
;

3097 
	}
}

3103 
__ölöe
 
	$AT91F_CAN_GëEº‹Cou¡î
 (

3104 
AT91PS_CAN
 
pCAN


3107  
pCAN
->
CAN_ECR
;

3108 
	}
}

3114 
__ölöe
 
	$AT91F_CAN_InôTøns„rReque°
 (

3115 
AT91PS_CAN
 
pCAN
,

3116 
å™s„r_cmd
)

3118 
pCAN
->
CAN_TCR
 = 
å™s„r_cmd
;

3119 
	}
}

3125 
__ölöe
 
	$AT91F_CAN_InôAb‹tReque°
 (

3126 
AT91PS_CAN
 
pCAN
,

3127 
ab‹t_cmd
)

3129 
pCAN
->
CAN_ACR
 = 
ab‹t_cmd
;

3130 
	}
}

3136 
__ölöe
 
	$AT91F_CAN_CfgMesßgeModeReg
 (

3137 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3138 
mode
)

3140 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode
;

3141 
	}
}

3147 
__ölöe
 
	$AT91F_CAN_GëMesßgeModeReg
 (

3148 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3150  
CAN_Maûbox
->
CAN_MB_MMR
;

3151 
	}
}

3158 
__ölöe
 
	$AT91F_CAN_CfgMesßgeIDReg
 (

3159 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3160 
id
,

3161 
vîsi⁄
)

3163 if(
vîsi⁄
==0)

3164 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
<<18;

3166 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
 | (1<<29);

3167 
	}
}

3173 
__ölöe
 
	$AT91F_CAN_GëMesßgeIDReg
 (

3174 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3176  
CAN_Maûbox
->
CAN_MB_MID
;

3177 
	}
}

3183 
__ölöe
 
	$AT91F_CAN_CfgMesßgeAc˚±™˚MaskReg
 (

3184 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3185 
mask
)

3187 
CAN_Maûbox
->
CAN_MB_MAM
 = 
mask
;

3188 
	}
}

3194 
__ölöe
 
	$AT91F_CAN_GëMesßgeAc˚±™˚MaskReg
 (

3195 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3197  
CAN_Maûbox
->
CAN_MB_MAM
;

3198 
	}
}

3204 
__ölöe
 
	$AT91F_CAN_GëFamûyID
 (

3205 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3207  
CAN_Maûbox
->
CAN_MB_MFID
;

3208 
	}
}

3214 
__ölöe
 
	$AT91F_CAN_CfgMesßgeCålReg
 (

3215 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3216 
mesßge_˘æ_cmd
)

3218 
CAN_Maûbox
->
CAN_MB_MCR
 = 
mesßge_˘æ_cmd
;

3219 
	}
}

3225 
__ölöe
 
	$AT91F_CAN_GëMesßgeSètus
 (

3226 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3228  
CAN_Maûbox
->
CAN_MB_MSR
;

3229 
	}
}

3235 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aLow
 (

3236 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3237 
d©a
)

3239 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a
;

3240 
	}
}

3246 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aLow
 (

3247 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3249  
CAN_Maûbox
->
CAN_MB_MDL
;

3250 
	}
}

3256 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aHigh
 (

3257 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3258 
d©a
)

3260 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a
;

3261 
	}
}

3267 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aHigh
 (

3268 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3270  
CAN_Maûbox
->
CAN_MB_MDH
;

3271 
	}
}

3277 
__ölöe
 
	$AT91F_CAN_O≥n
 (

3278 c⁄° 
nuŒ
)

3282 
	}
}

3290 
__ölöe
 
	$AT91F_ADC_E«bÀIt
 (

3291 
AT91PS_ADC
 
pADC
,

3292 
Êag
)

3295 
pADC
->
ADC_IER
 = 
Êag
;

3296 
	}
}

3302 
__ölöe
 
	$AT91F_ADC_DißbÀIt
 (

3303 
AT91PS_ADC
 
pADC
,

3304 
Êag
)

3307 
pADC
->
ADC_IDR
 = 
Êag
;

3308 
	}
}

3314 
__ölöe
 
	$AT91F_ADC_GëSètus
(

3315 
AT91PS_ADC
 
pADC
)

3317  
pADC
->
ADC_SR
;

3318 
	}
}

3324 
__ölöe
 
	$AT91F_ADC_GëI¡îru±MaskSètus
(

3325 
AT91PS_ADC
 
pADC
)

3327  
pADC
->
ADC_IMR
;

3328 
	}
}

3334 
__ölöe
 
	$AT91F_ADC_IsI¡îru±Masked
(

3335 
AT91PS_ADC
 
pADC
,

3336 
Êag
)

3338  (
	`AT91F_ADC_GëI¡îru±MaskSètus
(
pADC
Ë& 
Êag
);

3339 
	}
}

3345 
__ölöe
 
	$AT91F_ADC_IsSètusSë
(

3346 
AT91PS_ADC
 
pADC
,

3347 
Êag
)

3349  (
	`AT91F_ADC_GëSètus
(
pADC
Ë& 
Êag
);

3350 
	}
}

3356 
__ölöe
 
	$AT91F_ADC_CfgModeReg
 (

3357 
AT91PS_ADC
 
pADC
,

3358 
mode
)

3361 
pADC
->
ADC_MR
 = 
mode
;

3362 
	}
}

3368 
__ölöe
 
	$AT91F_ADC_GëModeReg
 (

3369 
AT91PS_ADC
 
pADC


3372  
pADC
->
ADC_MR
;

3373 
	}
}

3379 
__ölöe
 
	$AT91F_ADC_CfgTimögs
 (

3380 
AT91PS_ADC
 
pADC
,

3381 
mck_˛ock
,

3382 
adc_˛ock
,

3383 
°¨tup_time
,

3384 
ßm∂e_™d_hﬁd_time
)

3386 
¥esˇl
,
°¨tup
,
shtim
;

3388 
¥esˇl
 = 
mck_˛ock
/(2*
adc_˛ock
) - 1;

3389 
°¨tup
 = 
adc_˛ock
*
°¨tup_time
/8 - 1;

3390 
shtim
 = 
adc_˛ock
*
ßm∂e_™d_hﬁd_time
/1000 - 1;

3393 
pADC
->
ADC_MR
 = ( (
¥esˇl
<<8Ë& 
AT91C_ADC_PRESCAL
Ë| ( (
°¨tup
<<16Ë& 
AT91C_ADC_STARTUP
Ë| ( (
shtim
<<24Ë& 
AT91C_ADC_SHTIM
);

3394 
	}
}

3400 
__ölöe
 
	$AT91F_ADC_E«bÀCh™√l
 (

3401 
AT91PS_ADC
 
pADC
,

3402 
ch™√l
)

3405 
pADC
->
ADC_CHER
 = 
ch™√l
;

3406 
	}
}

3412 
__ölöe
 
	$AT91F_ADC_DißbÀCh™√l
 (

3413 
AT91PS_ADC
 
pADC
,

3414 
ch™√l
)

3417 
pADC
->
ADC_CHDR
 = 
ch™√l
;

3418 
	}
}

3424 
__ölöe
 
	$AT91F_ADC_GëCh™√lSètus
 (

3425 
AT91PS_ADC
 
pADC


3428  
pADC
->
ADC_CHSR
;

3429 
	}
}

3435 
__ölöe
 
	$AT91F_ADC_SèπC⁄vîsi⁄
 (

3436 
AT91PS_ADC
 
pADC


3439 
pADC
->
ADC_CR
 = 
AT91C_ADC_START
;

3440 
	}
}

3446 
__ölöe
 
	$AT91F_ADC_So·Re£t
 (

3447 
AT91PS_ADC
 
pADC


3450 
pADC
->
ADC_CR
 = 
AT91C_ADC_SWRST
;

3451 
	}
}

3457 
__ölöe
 
	$AT91F_ADC_GëLa°C⁄vîãdD©a
 (

3458 
AT91PS_ADC
 
pADC


3461  
pADC
->
ADC_LCDR
;

3462 
	}
}

3468 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH0
 (

3469 
AT91PS_ADC
 
pADC


3472  
pADC
->
ADC_CDR0
;

3473 
	}
}

3479 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH1
 (

3480 
AT91PS_ADC
 
pADC


3483  
pADC
->
ADC_CDR1
;

3484 
	}
}

3490 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH2
 (

3491 
AT91PS_ADC
 
pADC


3494  
pADC
->
ADC_CDR2
;

3495 
	}
}

3501 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH3
 (

3502 
AT91PS_ADC
 
pADC


3505  
pADC
->
ADC_CDR3
;

3506 
	}
}

3512 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH4
 (

3513 
AT91PS_ADC
 
pADC


3516  
pADC
->
ADC_CDR4
;

3517 
	}
}

3523 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH5
 (

3524 
AT91PS_ADC
 
pADC


3527  
pADC
->
ADC_CDR5
;

3528 
	}
}

3534 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH6
 (

3535 
AT91PS_ADC
 
pADC


3538  
pADC
->
ADC_CDR6
;

3539 
	}
}

3545 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH7
 (

3546 
AT91PS_ADC
 
pADC


3549  
pADC
->
ADC_CDR7
;

3550 
	}
}

3559 
__ölöe
 
	$AT91F_AES_E«bÀIt
 (

3560 
AT91PS_AES
 
pAES
,

3561 
Êag
)

3564 
pAES
->
AES_IER
 = 
Êag
;

3565 
	}
}

3571 
__ölöe
 
	$AT91F_AES_DißbÀIt
 (

3572 
AT91PS_AES
 
pAES
,

3573 
Êag
)

3576 
pAES
->
AES_IDR
 = 
Êag
;

3577 
	}
}

3583 
__ölöe
 
	$AT91F_AES_GëSètus
(

3584 
AT91PS_AES
 
pAES
)

3586  
pAES
->
AES_ISR
;

3587 
	}
}

3593 
__ölöe
 
	$AT91F_AES_GëI¡îru±MaskSètus
(

3594 
AT91PS_AES
 
pAES
)

3596  
pAES
->
AES_IMR
;

3597 
	}
}

3603 
__ölöe
 
	$AT91F_AES_IsI¡îru±Masked
(

3604 
AT91PS_AES
 
pAES
,

3605 
Êag
)

3607  (
	`AT91F_AES_GëI¡îru±MaskSètus
(
pAES
Ë& 
Êag
);

3608 
	}
}

3614 
__ölöe
 
	$AT91F_AES_IsSètusSë
(

3615 
AT91PS_AES
 
pAES
,

3616 
Êag
)

3618  (
	`AT91F_AES_GëSètus
(
pAES
Ë& 
Êag
);

3619 
	}
}

3625 
__ölöe
 
	$AT91F_AES_CfgModeReg
 (

3626 
AT91PS_AES
 
pAES
,

3627 
mode
)

3630 
pAES
->
AES_MR
 = 
mode
;

3631 
	}
}

3637 
__ölöe
 
	$AT91F_AES_GëModeReg
 (

3638 
AT91PS_AES
 
pAES


3641  
pAES
->
AES_MR
;

3642 
	}
}

3648 
__ölöe
 
	$AT91F_AES_SèπPro˚ssög
 (

3649 
AT91PS_AES
 
pAES


3652 
pAES
->
AES_CR
 = 
AT91C_AES_START
;

3653 
	}
}

3659 
__ölöe
 
	$AT91F_AES_So·Re£t
 (

3660 
AT91PS_AES
 
pAES


3663 
pAES
->
AES_CR
 = 
AT91C_AES_SWRST
;

3664 
	}
}

3670 
__ölöe
 
	$AT91F_AES_LﬂdNewSìd
 (

3671 
AT91PS_AES
 
pAES


3674 
pAES
->
AES_CR
 = 
AT91C_AES_LOADSEED
;

3675 
	}
}

3681 
__ölöe
 
	$AT91F_AES_SëCry±oKey
 (

3682 
AT91PS_AES
 
pAES
,

3683 
ödex
,

3684 
keyw‹d


3687 
pAES
->
AES_KEYWxR
[
ödex
] = 
keyw‹d
;

3688 
	}
}

3694 
__ölöe
 
	$AT91F_AES_I≈utD©a
 (

3695 
AT91PS_AES
 
pAES
,

3696 
ödex
,

3697 
öd©a


3700 
pAES
->
AES_IDATAxR
[
ödex
] = 
öd©a
;

3701 
	}
}

3707 
__ölöe
 
	$AT91F_AES_GëOuçutD©a
 (

3708 
AT91PS_AES
 
pAES
,

3709 
ödex


3712  
pAES
->
AES_ODATAxR
[
ödex
];

3713 
	}
}

3719 
__ölöe
 
	$AT91F_AES_SëInôüliz©i⁄Ve˘‹
 (

3720 
AT91PS_AES
 
pAES
,

3721 
ödex
,

3722 
öôve˘‹


3725 
pAES
->
AES_IVxR
[
ödex
] = 
öôve˘‹
;

3726 
	}
}

3735 
__ölöe
 
	$AT91F_TDES_E«bÀIt
 (

3736 
AT91PS_TDES
 
pTDES
,

3737 
Êag
)

3740 
pTDES
->
TDES_IER
 = 
Êag
;

3741 
	}
}

3747 
__ölöe
 
	$AT91F_TDES_DißbÀIt
 (

3748 
AT91PS_TDES
 
pTDES
,

3749 
Êag
)

3752 
pTDES
->
TDES_IDR
 = 
Êag
;

3753 
	}
}

3759 
__ölöe
 
	$AT91F_TDES_GëSètus
(

3760 
AT91PS_TDES
 
pTDES
)

3762  
pTDES
->
TDES_ISR
;

3763 
	}
}

3769 
__ölöe
 
	$AT91F_TDES_GëI¡îru±MaskSètus
(

3770 
AT91PS_TDES
 
pTDES
)

3772  
pTDES
->
TDES_IMR
;

3773 
	}
}

3779 
__ölöe
 
	$AT91F_TDES_IsI¡îru±Masked
(

3780 
AT91PS_TDES
 
pTDES
,

3781 
Êag
)

3783  (
	`AT91F_TDES_GëI¡îru±MaskSètus
(
pTDES
Ë& 
Êag
);

3784 
	}
}

3790 
__ölöe
 
	$AT91F_TDES_IsSètusSë
(

3791 
AT91PS_TDES
 
pTDES
,

3792 
Êag
)

3794  (
	`AT91F_TDES_GëSètus
(
pTDES
Ë& 
Êag
);

3795 
	}
}

3801 
__ölöe
 
	$AT91F_TDES_CfgModeReg
 (

3802 
AT91PS_TDES
 
pTDES
,

3803 
mode
)

3806 
pTDES
->
TDES_MR
 = 
mode
;

3807 
	}
}

3813 
__ölöe
 
	$AT91F_TDES_GëModeReg
 (

3814 
AT91PS_TDES
 
pTDES


3817  
pTDES
->
TDES_MR
;

3818 
	}
}

3824 
__ölöe
 
	$AT91F_TDES_SèπPro˚ssög
 (

3825 
AT91PS_TDES
 
pTDES


3828 
pTDES
->
TDES_CR
 = 
AT91C_TDES_START
;

3829 
	}
}

3835 
__ölöe
 
	$AT91F_TDES_So·Re£t
 (

3836 
AT91PS_TDES
 
pTDES


3839 
pTDES
->
TDES_CR
 = 
AT91C_TDES_SWRST
;

3840 
	}
}

3846 
__ölöe
 
	$AT91F_TDES_SëCry±oKey1
 (

3847 
AT91PS_TDES
 
pTDES
,

3848 
ödex
,

3849 
keyw‹d


3852 
pTDES
->
TDES_KEY1WxR
[
ödex
] = 
keyw‹d
;

3853 
	}
}

3859 
__ölöe
 
	$AT91F_TDES_SëCry±oKey2
 (

3860 
AT91PS_TDES
 
pTDES
,

3861 
ödex
,

3862 
keyw‹d


3865 
pTDES
->
TDES_KEY2WxR
[
ödex
] = 
keyw‹d
;

3866 
	}
}

3872 
__ölöe
 
	$AT91F_TDES_SëCry±oKey3
 (

3873 
AT91PS_TDES
 
pTDES
,

3874 
ödex
,

3875 
keyw‹d


3878 
pTDES
->
TDES_KEY3WxR
[
ödex
] = 
keyw‹d
;

3879 
	}
}

3885 
__ölöe
 
	$AT91F_TDES_I≈utD©a
 (

3886 
AT91PS_TDES
 
pTDES
,

3887 
ödex
,

3888 
öd©a


3891 
pTDES
->
TDES_IDATAxR
[
ödex
] = 
öd©a
;

3892 
	}
}

3898 
__ölöe
 
	$AT91F_TDES_GëOuçutD©a
 (

3899 
AT91PS_TDES
 
pTDES
,

3900 
ödex


3903  
pTDES
->
TDES_ODATAxR
[
ödex
];

3904 
	}
}

3910 
__ölöe
 
	$AT91F_TDES_SëInôüliz©i⁄Ve˘‹
 (

3911 
AT91PS_TDES
 
pTDES
,

3912 
ödex
,

3913 
öôve˘‹


3916 
pTDES
->
TDES_IVxR
[
ödex
] = 
öôve˘‹
;

3917 
	}
}

3923 
__ölöe
 
	$AT91F_DBGU_CfgPMC
 ()

3925 
	`AT91F_PMC_E«bÀPîùhClock
(

3926 
AT91C_BASE_PMC
,

3927 ((Ë1 << 
AT91C_ID_SYS
));

3928 
	}
}

3934 
__ölöe
 
	$AT91F_DBGU_CfgPIO
 ()

3937 
	`AT91F_PIO_CfgPîùh
(

3938 
AT91C_BASE_PIOA
,

3939 ((Ë
AT91C_PA27_DRXD
 ) |

3940 ((Ë
AT91C_PA28_DTXD
 ),

3942 
	}
}

3948 
__ölöe
 
	$AT91F_PMC_CfgPMC
 ()

3950 
	`AT91F_PMC_E«bÀPîùhClock
(

3951 
AT91C_BASE_PMC
,

3952 ((Ë1 << 
AT91C_ID_SYS
));

3953 
	}
}

3959 
__ölöe
 
	$AT91F_PMC_CfgPIO
 ()

3962 
	`AT91F_PIO_CfgPîùh
(

3963 
AT91C_BASE_PIOB
,

3964 ((Ë
AT91C_PB30_PCK2
 ) |

3965 ((Ë
AT91C_PB29_PCK1
 ),

3966 ((Ë
AT91C_PB20_PCK0
 ) |

3967 ((Ë
AT91C_PB0_PCK0
 ) |

3968 ((Ë
AT91C_PB22_PCK2
 ) |

3969 ((Ë
AT91C_PB21_PCK1
 ));

3971 
	`AT91F_PIO_CfgPîùh
(

3972 
AT91C_BASE_PIOA
,

3974 ((Ë
AT91C_PA30_PCK2
 ) |

3975 ((Ë
AT91C_PA13_PCK1
 ) |

3976 ((Ë
AT91C_PA27_PCK3
 ));

3977 
	}
}

3983 
__ölöe
 
	$AT91F_VREG_CfgPMC
 ()

3985 
	`AT91F_PMC_E«bÀPîùhClock
(

3986 
AT91C_BASE_PMC
,

3987 ((Ë1 << 
AT91C_ID_SYS
));

3988 
	}
}

3994 
__ölöe
 
	$AT91F_RSTC_CfgPMC
 ()

3996 
	`AT91F_PMC_E«bÀPîùhClock
(

3997 
AT91C_BASE_PMC
,

3998 ((Ë1 << 
AT91C_ID_SYS
));

3999 
	}
}

4005 
__ölöe
 
	$AT91F_SSC_CfgPMC
 ()

4007 
	`AT91F_PMC_E«bÀPîùhClock
(

4008 
AT91C_BASE_PMC
,

4009 ((Ë1 << 
AT91C_ID_SSC
));

4010 
	}
}

4016 
__ölöe
 
	$AT91F_SSC_CfgPIO
 ()

4019 
	`AT91F_PIO_CfgPîùh
(

4020 
AT91C_BASE_PIOA
,

4021 ((Ë
AT91C_PA25_RK
 ) |

4022 ((Ë
AT91C_PA22_TK
 ) |

4023 ((Ë
AT91C_PA21_TF
 ) |

4024 ((Ë
AT91C_PA24_RD
 ) |

4025 ((Ë
AT91C_PA26_RF
 ) |

4026 ((Ë
AT91C_PA23_TD
 ),

4028 
	}
}

4034 
__ölöe
 
	$AT91F_WDTC_CfgPMC
 ()

4036 
	`AT91F_PMC_E«bÀPîùhClock
(

4037 
AT91C_BASE_PMC
,

4038 ((Ë1 << 
AT91C_ID_SYS
));

4039 
	}
}

4045 
__ölöe
 
	$AT91F_US1_CfgPMC
 ()

4047 
	`AT91F_PMC_E«bÀPîùhClock
(

4048 
AT91C_BASE_PMC
,

4049 ((Ë1 << 
AT91C_ID_US1
));

4050 
	}
}

4056 
__ölöe
 
	$AT91F_US1_CfgPIO
 ()

4059 
	`AT91F_PIO_CfgPîùh
(

4060 
AT91C_BASE_PIOB
,

4062 ((Ë
AT91C_PB26_RI1
 ) |

4063 ((Ë
AT91C_PB24_DSR1
 ) |

4064 ((Ë
AT91C_PB23_DCD1
 ) |

4065 ((Ë
AT91C_PB25_DTR1
 ));

4067 
	`AT91F_PIO_CfgPîùh
(

4068 
AT91C_BASE_PIOA
,

4069 ((Ë
AT91C_PA7_SCK1
 ) |

4070 ((Ë
AT91C_PA8_RTS1
 ) |

4071 ((Ë
AT91C_PA6_TXD1
 ) |

4072 ((Ë
AT91C_PA5_RXD1
 ) |

4073 ((Ë
AT91C_PA9_CTS1
 ),

4075 
	}
}

4081 
__ölöe
 
	$AT91F_US0_CfgPMC
 ()

4083 
	`AT91F_PMC_E«bÀPîùhClock
(

4084 
AT91C_BASE_PMC
,

4085 ((Ë1 << 
AT91C_ID_US0
));

4086 
	}
}

4092 
__ölöe
 
	$AT91F_US0_CfgPIO
 ()

4095 
	`AT91F_PIO_CfgPîùh
(

4096 
AT91C_BASE_PIOA
,

4097 ((Ë
AT91C_PA0_RXD0
 ) |

4098 ((Ë
AT91C_PA4_CTS0
 ) |

4099 ((Ë
AT91C_PA3_RTS0
 ) |

4100 ((Ë
AT91C_PA2_SCK0
 ) |

4101 ((Ë
AT91C_PA1_TXD0
 ),

4103 
	}
}

4109 
__ölöe
 
	$AT91F_SPI1_CfgPMC
 ()

4111 
	`AT91F_PMC_E«bÀPîùhClock
(

4112 
AT91C_BASE_PMC
,

4113 ((Ë1 << 
AT91C_ID_SPI1
));

4114 
	}
}

4120 
__ölöe
 
	$AT91F_SPI1_CfgPIO
 ()

4123 
	`AT91F_PIO_CfgPîùh
(

4124 
AT91C_BASE_PIOB
,

4126 ((Ë
AT91C_PB16_NPCS13
 ) |

4127 ((Ë
AT91C_PB10_NPCS11
 ) |

4128 ((Ë
AT91C_PB11_NPCS12
 ));

4130 
	`AT91F_PIO_CfgPîùh
(

4131 
AT91C_BASE_PIOA
,

4133 ((Ë
AT91C_PA4_NPCS13
 ) |

4134 ((Ë
AT91C_PA29_NPCS13
 ) |

4135 ((Ë
AT91C_PA21_NPCS10
 ) |

4136 ((Ë
AT91C_PA22_SPCK1
 ) |

4137 ((Ë
AT91C_PA25_NPCS11
 ) |

4138 ((Ë
AT91C_PA2_NPCS11
 ) |

4139 ((Ë
AT91C_PA24_MISO1
 ) |

4140 ((Ë
AT91C_PA3_NPCS12
 ) |

4141 ((Ë
AT91C_PA26_NPCS12
 ) |

4142 ((Ë
AT91C_PA23_MOSI1
 ));

4143 
	}
}

4149 
__ölöe
 
	$AT91F_SPI0_CfgPMC
 ()

4151 
	`AT91F_PMC_E«bÀPîùhClock
(

4152 
AT91C_BASE_PMC
,

4153 ((Ë1 << 
AT91C_ID_SPI0
));

4154 
	}
}

4160 
__ölöe
 
	$AT91F_SPI0_CfgPIO
 ()

4163 
	`AT91F_PIO_CfgPîùh
(

4164 
AT91C_BASE_PIOB
,

4166 ((Ë
AT91C_PB13_NPCS01
 ) |

4167 ((Ë
AT91C_PB17_NPCS03
 ) |

4168 ((Ë
AT91C_PB14_NPCS02
 ));

4170 
	`AT91F_PIO_CfgPîùh
(

4171 
AT91C_BASE_PIOA
,

4172 ((Ë
AT91C_PA16_MISO0
 ) |

4173 ((Ë
AT91C_PA13_NPCS01
 ) |

4174 ((Ë
AT91C_PA15_NPCS03
 ) |

4175 ((Ë
AT91C_PA17_MOSI0
 ) |

4176 ((Ë
AT91C_PA18_SPCK0
 ) |

4177 ((Ë
AT91C_PA14_NPCS02
 ) |

4178 ((Ë
AT91C_PA12_NPCS00
 ),

4179 ((Ë
AT91C_PA7_NPCS01
 ) |

4180 ((Ë
AT91C_PA9_NPCS03
 ) |

4181 ((Ë
AT91C_PA8_NPCS02
 ));

4182 
	}
}

4188 
__ölöe
 
	$AT91F_PITC_CfgPMC
 ()

4190 
	`AT91F_PMC_E«bÀPîùhClock
(

4191 
AT91C_BASE_PMC
,

4192 ((Ë1 << 
AT91C_ID_SYS
));

4193 
	}
}

4199 
__ölöe
 
	$AT91F_AIC_CfgPMC
 ()

4201 
	`AT91F_PMC_E«bÀPîùhClock
(

4202 
AT91C_BASE_PMC
,

4203 ((Ë1 << 
AT91C_ID_FIQ
) |

4204 ((Ë1 << 
AT91C_ID_IRQ0
) |

4205 ((Ë1 << 
AT91C_ID_IRQ1
));

4206 
	}
}

4212 
__ölöe
 
	$AT91F_AIC_CfgPIO
 ()

4215 
	`AT91F_PIO_CfgPîùh
(

4216 
AT91C_BASE_PIOA
,

4217 ((Ë
AT91C_PA30_IRQ0
 ) |

4218 ((Ë
AT91C_PA29_FIQ
 ),

4219 ((Ë
AT91C_PA14_IRQ1
 ));

4220 
	}
}

4226 
__ölöe
 
	$AT91F_AES_CfgPMC
 ()

4228 
	`AT91F_PMC_E«bÀPîùhClock
(

4229 
AT91C_BASE_PMC
,

4230 ((Ë1 << 
AT91C_ID_AES
));

4231 
	}
}

4237 
__ölöe
 
	$AT91F_TWI_CfgPMC
 ()

4239 
	`AT91F_PMC_E«bÀPîùhClock
(

4240 
AT91C_BASE_PMC
,

4241 ((Ë1 << 
AT91C_ID_TWI
));

4242 
	}
}

4248 
__ölöe
 
	$AT91F_TWI_CfgPIO
 ()

4251 
	`AT91F_PIO_CfgPîùh
(

4252 
AT91C_BASE_PIOA
,

4253 ((Ë
AT91C_PA11_TWCK
 ) |

4254 ((Ë
AT91C_PA10_TWD
 ),

4256 
	}
}

4262 
__ölöe
 
	$AT91F_ADC_CfgPMC
 ()

4264 
	`AT91F_PMC_E«bÀPîùhClock
(

4265 
AT91C_BASE_PMC
,

4266 ((Ë1 << 
AT91C_ID_ADC
));

4267 
	}
}

4273 
__ölöe
 
	$AT91F_ADC_CfgPIO
 ()

4276 
	`AT91F_PIO_CfgPîùh
(

4277 
AT91C_BASE_PIOB
,

4279 ((Ë
AT91C_PB18_ADTRG
 ));

4280 
	}
}

4286 
__ölöe
 
	$AT91F_PWMC_CH3_CfgPIO
 ()

4289 
	`AT91F_PIO_CfgPîùh
(

4290 
AT91C_BASE_PIOB
,

4291 ((Ë
AT91C_PB22_PWM3
 ),

4292 ((Ë
AT91C_PB30_PWM3
 ));

4293 
	}
}

4299 
__ölöe
 
	$AT91F_PWMC_CH2_CfgPIO
 ()

4302 
	`AT91F_PIO_CfgPîùh
(

4303 
AT91C_BASE_PIOB
,

4304 ((Ë
AT91C_PB21_PWM2
 ),

4305 ((Ë
AT91C_PB29_PWM2
 ));

4306 
	}
}

4312 
__ölöe
 
	$AT91F_PWMC_CH1_CfgPIO
 ()

4315 
	`AT91F_PIO_CfgPîùh
(

4316 
AT91C_BASE_PIOB
,

4317 ((Ë
AT91C_PB20_PWM1
 ),

4318 ((Ë
AT91C_PB28_PWM1
 ));

4319 
	}
}

4325 
__ölöe
 
	$AT91F_PWMC_CH0_CfgPIO
 ()

4328 
	`AT91F_PIO_CfgPîùh
(

4329 
AT91C_BASE_PIOB
,

4330 ((Ë
AT91C_PB19_PWM0
 ),

4331 ((Ë
AT91C_PB27_PWM0
 ));

4332 
	}
}

4338 
__ölöe
 
	$AT91F_RTTC_CfgPMC
 ()

4340 
	`AT91F_PMC_E«bÀPîùhClock
(

4341 
AT91C_BASE_PMC
,

4342 ((Ë1 << 
AT91C_ID_SYS
));

4343 
	}
}

4349 
__ölöe
 
	$AT91F_UDP_CfgPMC
 ()

4351 
	`AT91F_PMC_E«bÀPîùhClock
(

4352 
AT91C_BASE_PMC
,

4353 ((Ë1 << 
AT91C_ID_UDP
));

4354 
	}
}

4360 
__ölöe
 
	$AT91F_TDES_CfgPMC
 ()

4362 
	`AT91F_PMC_E«bÀPîùhClock
(

4363 
AT91C_BASE_PMC
,

4364 ((Ë1 << 
AT91C_ID_TDES
));

4365 
	}
}

4371 
__ölöe
 
	$AT91F_EMAC_CfgPMC
 ()

4373 
	`AT91F_PMC_E«bÀPîùhClock
(

4374 
AT91C_BASE_PMC
,

4375 ((Ë1 << 
AT91C_ID_EMAC
));

4376 
	}
}

4382 
__ölöe
 
	$AT91F_EMAC_CfgPIO
 ()

4385 
	`AT91F_PIO_CfgPîùh
(

4386 
AT91C_BASE_PIOB
,

4387 ((Ë
AT91C_PB2_ETX0
 ) |

4388 ((Ë
AT91C_PB12_ETXER
 ) |

4389 ((Ë
AT91C_PB16_ECOL
 ) |

4390 ((Ë
AT91C_PB11_ETX3
 ) |

4391 ((Ë
AT91C_PB6_ERX1
 ) |

4392 ((Ë
AT91C_PB15_ERXDV
 ) |

4393 ((Ë
AT91C_PB13_ERX2
 ) |

4394 ((Ë
AT91C_PB3_ETX1
 ) |

4395 ((Ë
AT91C_PB8_EMDC
 ) |

4396 ((Ë
AT91C_PB5_ERX0
 ) |

4398 ((Ë
AT91C_PB14_ERX3
 ) |

4399 ((Ë
AT91C_PB4_ECRS_ECRSDV
) |

4400 ((Ë
AT91C_PB1_ETXEN
 ) |

4401 ((Ë
AT91C_PB10_ETX2
 ) |

4402 ((Ë
AT91C_PB0_ETXCK_EREFCK
) |

4403 ((Ë
AT91C_PB9_EMDIO
 ) |

4404 ((Ë
AT91C_PB7_ERXER
 ) |

4405 ((Ë
AT91C_PB17_ERXCK
 ),

4407 
	}
}

4413 
__ölöe
 
	$AT91F_TC0_CfgPMC
 ()

4415 
	`AT91F_PMC_E«bÀPîùhClock
(

4416 
AT91C_BASE_PMC
,

4417 ((Ë1 << 
AT91C_ID_TC0
));

4418 
	}
}

4424 
__ölöe
 
	$AT91F_TC0_CfgPIO
 ()

4427 
	`AT91F_PIO_CfgPîùh
(

4428 
AT91C_BASE_PIOB
,

4429 ((Ë
AT91C_PB23_TIOA0
 ) |

4430 ((Ë
AT91C_PB24_TIOB0
 ),

4431 ((Ë
AT91C_PB12_TCLK0
 ));

4432 
	}
}

4438 
__ölöe
 
	$AT91F_TC1_CfgPMC
 ()

4440 
	`AT91F_PMC_E«bÀPîùhClock
(

4441 
AT91C_BASE_PMC
,

4442 ((Ë1 << 
AT91C_ID_TC1
));

4443 
	}
}

4449 
__ölöe
 
	$AT91F_TC1_CfgPIO
 ()

4452 
	`AT91F_PIO_CfgPîùh
(

4453 
AT91C_BASE_PIOB
,

4454 ((Ë
AT91C_PB25_TIOA1
 ) |

4455 ((Ë
AT91C_PB26_TIOB1
 ),

4456 ((Ë
AT91C_PB19_TCLK1
 ));

4457 
	}
}

4463 
__ölöe
 
	$AT91F_TC2_CfgPMC
 ()

4465 
	`AT91F_PMC_E«bÀPîùhClock
(

4466 
AT91C_BASE_PMC
,

4467 ((Ë1 << 
AT91C_ID_TC2
));

4468 
	}
}

4474 
__ölöe
 
	$AT91F_TC2_CfgPIO
 ()

4477 
	`AT91F_PIO_CfgPîùh
(

4478 
AT91C_BASE_PIOB
,

4479 ((Ë
AT91C_PB28_TIOB2
 ) |

4480 ((Ë
AT91C_PB27_TIOA2
 ),

4483 
	`AT91F_PIO_CfgPîùh
(

4484 
AT91C_BASE_PIOA
,

4486 ((Ë
AT91C_PA15_TCLK2
 ));

4487 
	}
}

4493 
__ölöe
 
	$AT91F_MC_CfgPMC
 ()

4495 
	`AT91F_PMC_E«bÀPîùhClock
(

4496 
AT91C_BASE_PMC
,

4497 ((Ë1 << 
AT91C_ID_SYS
));

4498 
	}
}

4504 
__ölöe
 
	$AT91F_PIOA_CfgPMC
 ()

4506 
	`AT91F_PMC_E«bÀPîùhClock
(

4507 
AT91C_BASE_PMC
,

4508 ((Ë1 << 
AT91C_ID_PIOA
));

4509 
	}
}

4515 
__ölöe
 
	$AT91F_PIOB_CfgPMC
 ()

4517 
	`AT91F_PMC_E«bÀPîùhClock
(

4518 
AT91C_BASE_PMC
,

4519 ((Ë1 << 
AT91C_ID_PIOB
));

4520 
	}
}

4526 
__ölöe
 
	$AT91F_CAN_CfgPMC
 ()

4528 
	`AT91F_PMC_E«bÀPîùhClock
(

4529 
AT91C_BASE_PMC
,

4530 ((Ë1 << 
AT91C_ID_CAN
));

4531 
	}
}

4537 
__ölöe
 
	$AT91F_CAN_CfgPIO
 ()

4540 
	`AT91F_PIO_CfgPîùh
(

4541 
AT91C_BASE_PIOA
,

4542 ((Ë
AT91C_PA20_CANTX
 ) |

4543 ((Ë
AT91C_PA19_CANRX
 ),

4545 
	}
}

4551 
__ölöe
 
	$AT91F_PWMC_CfgPMC
 ()

4553 
	`AT91F_PMC_E«bÀPîùhClock
(

4554 
AT91C_BASE_PMC
,

4555 ((Ë1 << 
AT91C_ID_PWMC
));

4556 
	}
}

	@portable/GCC/ARM7_AT91SAM7S/port.c

76 
	~<°dlib.h
>

79 
	~"FªeRTOS.h
"

80 
	~"èsk.h
"

83 
	~"AT91SAM7X256.h
"

86 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

87 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

88 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

89 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
SèckTy≥_t
 ) 0 )

	)

92 
	#p‹tENABLE_TIMER
 ( ( 
uöt8_t
 ) 0x01 )

	)

93 
	#p‹tPRESCALE_VALUE
 0x00

	)

94 
	#p‹tINTERRUPT_ON_MATCH
 ( ( 
uöt32_t
 ) 0x01 )

	)

95 
	#p‹tRESET_COUNT_ON_MATCH
 ( ( 
uöt32_t
 ) 0x02 )

	)

98 
	#p‹tPIT_CLOCK_DIVISOR
 ( ( 
uöt32_t
 ) 16 )

	)

99 
	#p‹tPIT_COUNTER_VALUE
 ( ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tPIT_CLOCK_DIVISOR
 ) / 1000UL ) * 
p‹tTICK_PERIOD_MS
 )

	)

101 
	#p‹tINT_LEVEL_SENSITIVE
 0

	)

102 
	#p‹tPIT_ENABLE
 ( ( 
uöt16_t
 ) 0x1 << 24 )

	)

103 
	#p‹tPIT_INT_ENABLE
 ( ( 
uöt16_t
 ) 0x1 << 25 )

	)

107 
¥vSëupTimîI¡îru±
( );

113 
vP‹tISRSèπFú°Task
( );

123 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

125 
SèckTy≥_t
 *
pxOrigöÆTOS
;

127 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

131 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

140 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00000000;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

169 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

174 
pxT›OfSèck
--;

178 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

180 #ifde‡
THUMB_INTERWORK


183 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

187 
pxT›OfSèck
--;

193 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_SECTION_NESTING
;

195  
pxT›OfSèck
;

196 
	}
}

199 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

203 
	`¥vSëupTimîI¡îru±
();

206 
	`vP‹tISRSèπFú°Task
();

210 
	}
}

213 
	$vP‹tEndScheduÀr
( )

217 
	}
}

223 
	$¥vSëupTimîI¡îru±
( )

225 
AT91PS_PITC
 
pxPIT
 = 
AT91C_BASE_PITC
;

229 #i‡
c⁄figUSE_PREEMPTION
 == 0

231 –
vN⁄Pªem±iveTick
 ) ( );

232 
	`AT91F_AIC_C⁄figuªIt
–
AT91C_ID_SYS
, 
AT91C_AIC_PRIOR_HIGHEST
, 
p‹tINT_LEVEL_SENSITIVE
, ( (*)(ËË
vN⁄Pªem±iveTick
 );

236 –
vPªem±iveTick
 )( );

237 
	`AT91F_AIC_C⁄figuªIt
–
AT91C_ID_SYS
, 
AT91C_AIC_PRIOR_HIGHEST
, 
p‹tINT_LEVEL_SENSITIVE
, ( (*)(ËË
vPªem±iveTick
 );

242 
pxPIT
->
PITC_PIMR
 = 
p‹tPIT_ENABLE
 | 
p‹tPIT_INT_ENABLE
 | 
p‹tPIT_COUNTER_VALUE
;

246 
AT91C_BASE_AIC
->
AIC_IECR
 = 0x1 << 
AT91C_ID_SYS
;

247 
	}
}

	@portable/GCC/ARM7_AT91SAM7S/portISR.c

81 
	~"FªeRTOS.h
"

82 
	~"èsk.h
"

84 
	~"AT91SAM7X256.h
"

87 
	#p‹tTIMER_MATCH_ISR_BIT
 ( ( 
uöt8_t
 ) 0x01 )

	)

88 
	#p‹tCLEAR_VIC_INTERRUPT
 ( ( 
uöt32_t
 ) 0 )

	)

91 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

92 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

97 
	$vP‹tYõldPro˚ss‹
–Ë
	`__©åibuã__
((
	`öãºu±
("SWI"), 
«ked
));

103 
	`vP‹tISRSèπFú°Task
( );

106 
	$vP‹tISRSèπFú°Task
( )

110 
	`p‹tRESTORE_CONTEXT
();

111 
	}
}

122 
	$vP‹tYõldPro˚ss‹
( )

127 
__asm
 volatile ( "ADD LR, LR, #4" );

130 
	`p‹tSAVE_CONTEXT
();

133 
	`vTaskSwôchC⁄ãxt
();

136 
	`p‹tRESTORE_CONTEXT
();

137 
	}
}

145 #i‡
c⁄figUSE_PREEMPTION
 == 0

149 
	$vN⁄Pªem±iveTick
–Ë
	`__©åibuã__
 ((
	`öãºu±
 ("IRQ")));

150 
	$vN⁄Pªem±iveTick
( )

152 
uöt32_t
 
ulDummy
;

157 
	`xTaskIn¸emítTick
();

160 
ulDummy
 = 
AT91C_BASE_PITC
->
PITC_PIVR
;

163 
AT91C_BASE_AIC
->
AIC_EOICR
 = 
ulDummy
;

164 
	}
}

170 
	$vPªem±iveTick
–Ë
	`__©åibuã__
((
«ked
));

171 
	$vPªem±iveTick
( )

174 
	`p‹tSAVE_CONTEXT
();

177 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

180 
	`vTaskSwôchC⁄ãxt
();

184 
AT91C_BASE_AIC
->
AIC_EOICR
 = 
AT91C_BASE_PITC
->
PITC_PIVR
;

186 
	`p‹tRESTORE_CONTEXT
();

187 
	}
}

198 
	$vP‹tDißbÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

199 
	$vP‹tE«bÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

201 
	$vP‹tDißbÀI¡îru±sFromThumb
( )

203 
__asm
 volatile (

210 
	}
}

212 
	$vP‹tE«bÀI¡îru±sFromThumb
( )

214 
__asm
 volatile (

221 
	}
}

228 
	$vP‹tE¡îCrôiˇl
( )

231 
__asm
 volatile (

241 
ulCrôiˇlNe°ög
++;

242 
	}
}

244 
	$vP‹tExôCrôiˇl
( )

246 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

249 
ulCrôiˇlNe°ög
--;

253 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

256 
__asm
 volatile (

264 
	}
}

	@portable/GCC/ARM7_AT91SAM7S/portmacro.h

89 #i‚de‡
PORTMACRO_H


90 
	#PORTMACRO_H


	)

92 #ifde‡
__˝lu•lus


107 
	#p‹tCHAR
 

	)

108 
	#p‹tFLOAT
 

	)

109 
	#p‹tDOUBLE
 

	)

110 
	#p‹tLONG
 

	)

111 
	#p‹tSHORT
 

	)

112 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

113 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

115 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

116 
	tBa£Ty≥_t
;

117 
	tUBa£Ty≥_t
;

119 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

120 
uöt16_t
 
	tTickTy≥_t
;

121 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

123 
uöt32_t
 
	tTickTy≥_t
;

124 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

129 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

130 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

131 
	#p‹tBYTE_ALIGNMENT
 8

	)

132 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûê–"NOP" );

	)

145 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

147 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

148 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

151 
__asm
 volatile ( \

177 –Ë
	gulCrôiˇlNe°ög
; \

178 –Ë
	gpxCuºítTCB
; \

182 
	#p‹tSAVE_CONTEXT
(Ë\

	)

184 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

185 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

188 
__asm
 volatile ( \

224 –Ë
	gulCrôiˇlNe°ög
; \

225 –Ë
	gpxCuºítTCB
; \

229 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

230 
	#p‹tYIELD
(Ë
__asm
 vﬁ©ûê–"SWI 0" )

	)

243 #ifde‡
THUMB_INTERWORK


245 
vP‹tDißbÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

246 
vP‹tE«bÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

248 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tDißbÀI¡îru±sFromThumb
()

	)

249 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tE«bÀI¡îru±sFromThumb
()

	)

253 
	#p‹tDISABLE_INTERRUPTS
(Ë\

	)

254 
__asm
 volatile ( \

261 
	#p‹tENABLE_INTERRUPTS
(Ë\

	)

262 
__asm
 volatile ( \

271 
vP‹tE¡îCrôiˇl
( );

272 
vP‹tExôCrôiˇl
( );

274 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

275 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

279 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

280 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

282 #ifde‡
__˝lu•lus


	@portable/GCC/ARM7_LPC2000/port.c

77 
	~<°dlib.h
>

80 
	~"FªeRTOS.h
"

81 
	~"èsk.h
"

84 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

85 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

86 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

87 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
SèckTy≥_t
 ) 0 )

	)

90 
	#p‹tENABLE_TIMER
 ( ( 
uöt8_t
 ) 0x01 )

	)

91 
	#p‹tPRESCALE_VALUE
 0x00

	)

92 
	#p‹tINTERRUPT_ON_MATCH
 ( ( 
uöt32_t
 ) 0x01 )

	)

93 
	#p‹tRESET_COUNT_ON_MATCH
 ( ( 
uöt32_t
 ) 0x02 )

	)

96 
	#p‹tTIMER_VIC_CHANNEL
 ( ( 
uöt32_t
 ) 0x0004 )

	)

97 
	#p‹tTIMER_VIC_CHANNEL_BIT
 ( ( 
uöt32_t
 ) 0x0010 )

	)

98 
	#p‹tTIMER_VIC_ENABLE
 ( ( 
uöt32_t
 ) 0x0020 )

	)

103 
¥vSëupTimîI¡îru±
( );

109 
vP‹tISRSèπFú°Task
( );

119 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

121 
SèckTy≥_t
 *
pxOrigöÆTOS
;

123 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

127 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

136 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaaaaaa;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

165 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

170 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

176 if–––
uöt32_t
 ) 
pxCode
 & 0x01UL ) != 0x00 )

179 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

182 
pxT›OfSèck
--;

188 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_SECTION_NESTING
;

190  
pxT›OfSèck
;

191 
	}
}

194 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

198 
	`¥vSëupTimîI¡îru±
();

201 
	`vP‹tISRSèπFú°Task
();

205 
	}
}

208 
	$vP‹tEndScheduÀr
( )

212 
	}
}

218 
	$¥vSëupTimîI¡îru±
( )

220 
uöt32_t
 
ulCom∑ªM©ch
;

221 –
vTickISR
 )( );

225 
T0_PR
 = 
p‹tPRESCALE_VALUE
;

228 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

232 #i‡
p‹tPRESCALE_VALUE
 != 0

234 
ulCom∑ªM©ch
 /–
p‹tPRESCALE_VALUE
 + 1 );

237 
T0_MR0
 = 
ulCom∑ªM©ch
;

240 
T0_MCR
 = 
p‹tRESET_COUNT_ON_MATCH
 | 
p‹tINTERRUPT_ON_MATCH
;

243 
VICI¡Sñe˘
 &~–
p‹tTIMER_VIC_CHANNEL_BIT
 );

244 
VICI¡E«bÀ
 |
p‹tTIMER_VIC_CHANNEL_BIT
;

249 
VICVe˘Addr0
 = ( 
öt32_t
 ) 
vTickISR
;

250 
VICVe˘C¡l0
 = 
p‹tTIMER_VIC_CHANNEL
 | 
p‹tTIMER_VIC_ENABLE
;

254 
T0_TCR
 = 
p‹tENABLE_TIMER
;

255 
	}
}

	@portable/GCC/ARM7_LPC2000/portISR.c

93 
	~"FªeRTOS.h
"

96 
	#p‹tTIMER_MATCH_ISR_BIT
 ( ( 
uöt8_t
 ) 0x01 )

	)

97 
	#p‹tCLEAR_VIC_INTERRUPT
 ( ( 
uöt32_t
 ) 0 )

	)

100 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

101 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

106 
	$vP‹tYõldPro˚ss‹
–Ë
	`__©åibuã__
((
	`öãºu±
("SWI"), 
«ked
));

112 
	`vP‹tISRSèπFú°Task
( );

115 
	$vP‹tISRSèπFú°Task
( )

119 
	`p‹tRESTORE_CONTEXT
();

120 
	}
}

131 
	$vP‹tYõldPro˚ss‹
( )

136 
__asm
 volatile ( "ADD LR, LR, #4" );

139 
	`p‹tSAVE_CONTEXT
();

142 
__asm
 volatile ( "bl vTaskSwitchContext" );

145 
	`p‹tRESTORE_CONTEXT
();

146 
	}
}

152 
	$vTickISR
–Ë
	`__©åibuã__
((
«ked
));

153 
	$vTickISR
( )

156 
	`p‹tSAVE_CONTEXT
();

160 
__asm
 volatile

170 
T0_IR
 = 
p‹tTIMER_MATCH_ISR_BIT
;

171 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

174 
	`p‹tRESTORE_CONTEXT
();

175 
	}
}

184 #ifde‡
THUMB_INTERWORK


186 
	$vP‹tDißbÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

187 
	$vP‹tE«bÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

189 
	$vP‹tDißbÀI¡îru±sFromThumb
( )

191 
__asm
 volatile (

198 
	}
}

200 
	$vP‹tE«bÀI¡îru±sFromThumb
( )

202 
__asm
 volatile (

209 
	}
}

217 
	$vP‹tE¡îCrôiˇl
( )

220 
__asm
 volatile (

230 
ulCrôiˇlNe°ög
++;

231 
	}
}

233 
	$vP‹tExôCrôiˇl
( )

235 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

238 
ulCrôiˇlNe°ög
--;

242 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

245 
__asm
 volatile (

253 
	}
}

	@portable/GCC/ARM7_LPC2000/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

90 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

96 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

97 
uöt16_t
 
	tTickTy≥_t
;

98 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

100 
uöt32_t
 
	tTickTy≥_t
;

101 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

106 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

107 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

108 
	#p‹tBYTE_ALIGNMENT
 8

	)

109 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûê–"NOP" );

	)

122 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

124 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

125 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

128 
__asm
 volatile ( \

154 –Ë
	gulCrôiˇlNe°ög
; \

155 –Ë
	gpxCuºítTCB
; \

159 
	#p‹tSAVE_CONTEXT
(Ë\

	)

161 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

162 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

165 
__asm
 volatile ( \

201 –Ë
	gulCrôiˇlNe°ög
; \

202 –Ë
	gpxCuºítTCB
; \

205 
vTaskSwôchC⁄ãxt
( );

206 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

207 
	#p‹tYIELD
(Ë
__asm
 vﬁ©ûê–"SWI 0" )

	)

220 #ifde‡
THUMB_INTERWORK


222 
vP‹tDißbÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

223 
vP‹tE«bÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

225 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tDißbÀI¡îru±sFromThumb
()

	)

226 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tE«bÀI¡îru±sFromThumb
()

	)

230 
	#p‹tDISABLE_INTERRUPTS
(Ë\

	)

231 
__asm
 volatile ( \

238 
	#p‹tENABLE_INTERRUPTS
(Ë\

	)

239 
__asm
 volatile ( \

248 
vP‹tE¡îCrôiˇl
( );

249 
vP‹tExôCrôiˇl
( );

251 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

252 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

256 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

257 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

259 #ifde‡
__˝lu•lus


	@portable/GCC/ARM7_LPC23xx/port.c

77 
	~<°dlib.h
>

80 
	~"FªeRTOS.h
"

81 
	~"èsk.h
"

84 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

85 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

86 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

87 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
SèckTy≥_t
 ) 0 )

	)

90 
	#p‹tENABLE_TIMER
 ( ( 
uöt8_t
 ) 0x01 )

	)

91 
	#p‹tPRESCALE_VALUE
 0x00

	)

92 
	#p‹tINTERRUPT_ON_MATCH
 ( ( 
uöt32_t
 ) 0x01 )

	)

93 
	#p‹tRESET_COUNT_ON_MATCH
 ( ( 
uöt32_t
 ) 0x02 )

	)

96 
	#p‹tTIMER_VIC_CHANNEL
 ( ( 
uöt32_t
 ) 0x0004 )

	)

97 
	#p‹tTIMER_VIC_CHANNEL_BIT
 ( ( 
uöt32_t
 ) 0x0010 )

	)

98 
	#p‹tTIMER_VIC_ENABLE
 ( ( 
uöt32_t
 ) 0x0020 )

	)

103 
¥vSëupTimîI¡îru±
( );

109 
vP‹tISRSèπFú°Task
( );

119 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

121 
SèckTy≥_t
 *
pxOrigöÆTOS
;

123 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

127 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

136 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00000000;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

165 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

170 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

176 if–––
uöt32_t
 ) 
pxCode
 & 0x01UL ) != 0x00 )

179 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

182 
pxT›OfSèck
--;

188 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_SECTION_NESTING
;

190  
pxT›OfSèck
;

191 
	}
}

194 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

198 
	`¥vSëupTimîI¡îru±
();

201 
	`vP‹tISRSèπFú°Task
();

205 
	}
}

208 
	$vP‹tEndScheduÀr
( )

212 
	}
}

218 
	$¥vSëupTimîI¡îru±
( )

220 
uöt32_t
 
ulCom∑ªM©ch
;

222 
PCLKSEL0
 = (PCLKSEL0 & (~(0x3<<2))) | (0x01 << 2);

223 
T0TCR
 = 2;

224 
T0CTCR
 = 0;

228 
T0PR
 = 
p‹tPRESCALE_VALUE
;

231 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

235 #i‡
p‹tPRESCALE_VALUE
 != 0

237 
ulCom∑ªM©ch
 /–
p‹tPRESCALE_VALUE
 + 1 );

240 
T0MR1
 = 
ulCom∑ªM©ch
;

243 
T0MCR
 = (3 << 3);

246 
VICI¡E«bÀ
 = 0x00000010;

250 #i‡
c⁄figUSE_PREEMPTION
 == 1

252 –
vPªem±iveTick
 )( );

253 
VICVe˘Addr4
 = ( 
öt32_t
 ) 
vPªem±iveTick
;

257 –
vN⁄Pªem±iveTick
 )( );

258 
VICVe˘Addr4
 = ( 
öt32_t
 ) 
vN⁄Pªem±iveTick
;

262 
VICVe˘C¡l4
 = 1;

266 
T0TCR
 = 
p‹tENABLE_TIMER
;

267 
	}
}

	@portable/GCC/ARM7_LPC23xx/portISR.c

74 
	~"FªeRTOS.h
"

75 
	~"èsk.h
"

78 
	#p‹tTIMER_MATCH_ISR_BIT
 ( ( 
uöt8_t
 ) 0x01 )

	)

79 
	#p‹tCLEAR_VIC_INTERRUPT
 ( ( 
uöt32_t
 ) 0 )

	)

82 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

83 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

88 
	$vP‹tYõldPro˚ss‹
–Ë
	`__©åibuã__
((
	`öãºu±
("SWI"), 
«ked
));

94 
	`vP‹tISRSèπFú°Task
( );

97 
	$vP‹tISRSèπFú°Task
( )

101 
	`p‹tRESTORE_CONTEXT
();

102 
	}
}

113 
	$vP‹tYõldPro˚ss‹
( )

118 
__asm
 volatile ( "ADD LR, LR, #4" );

121 
	`p‹tSAVE_CONTEXT
();

124 
__asm
 volatile( "bl vTaskSwitchContext" );

127 
	`p‹tRESTORE_CONTEXT
();

128 
	}
}

137 #i‡
c⁄figUSE_PREEMPTION
 == 0

141 
	$vN⁄Pªem±iveTick
–Ë
	`__©åibuã__
 ((
	`öãºu±
 ("IRQ")));

142 
	$vN⁄Pªem±iveTick
( )

144 
	`xTaskIn¸emítTick
();

145 
T0IR
 = 2;

146 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

147 
	}
}

153 
	$vPªem±iveTick
–Ë
	`__©åibuã__
((
«ked
));

154 
	$vPªem±iveTick
( )

157 
	`p‹tSAVE_CONTEXT
();

161 
__asm
 volatile

171 
T0IR
 = 2;

172 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

175 
	`p‹tRESTORE_CONTEXT
();

176 
	}
}

187 #ifde‡
THUMB_INTERWORK


189 
	$vP‹tDißbÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

190 
	$vP‹tE«bÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

192 
	$vP‹tDißbÀI¡îru±sFromThumb
( )

194 
__asm
 volatile (

201 
	}
}

203 
	$vP‹tE«bÀI¡îru±sFromThumb
( )

205 
__asm
 volatile (

212 
	}
}

220 
	$vP‹tE¡îCrôiˇl
( )

223 
__asm
 volatile (

233 
ulCrôiˇlNe°ög
++;

234 
	}
}

236 
	$vP‹tExôCrôiˇl
( )

238 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

241 
ulCrôiˇlNe°ög
--;

245 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

248 
__asm
 volatile (

256 
	}
}

	@portable/GCC/ARM7_LPC23xx/portmacro.h

89 #i‚de‡
PORTMACRO_H


90 
	#PORTMACRO_H


	)

92 #ifde‡
__˝lu•lus


107 
	#p‹tCHAR
 

	)

108 
	#p‹tFLOAT
 

	)

109 
	#p‹tDOUBLE
 

	)

110 
	#p‹tLONG
 

	)

111 
	#p‹tSHORT
 

	)

112 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

113 
	#p‹tBASE_TYPE
 
p‹tLONG


	)

115 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

116 
	tBa£Ty≥_t
;

117 
	tUBa£Ty≥_t
;

119 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

120 
uöt16_t
 
	tTickTy≥_t
;

121 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

123 
uöt32_t
 
	tTickTy≥_t
;

124 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

129 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

130 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

131 
	#p‹tBYTE_ALIGNMENT
 8

	)

132 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûê–"NOP" );

	)

145 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

147 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

148 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

151 
__asm
 volatile ( \

177 –Ë
	gulCrôiˇlNe°ög
; \

178 –Ë
	gpxCuºítTCB
; \

182 
	#p‹tSAVE_CONTEXT
(Ë\

	)

184 vﬁ©ûê* vﬁ©ûê
pxCuºítTCB
; \

185 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

188 
__asm
 volatile ( \

224 –Ë
	gulCrôiˇlNe°ög
; \

225 –Ë
	gpxCuºítTCB
; \

229 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

230 
	#p‹tYIELD
(Ë
__asm
 vﬁ©ûê–"SWI 0" )

	)

243 #ifde‡
THUMB_INTERWORK


245 
vP‹tDißbÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

246 
vP‹tE«bÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

248 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tDißbÀI¡îru±sFromThumb
()

	)

249 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tE«bÀI¡îru±sFromThumb
()

	)

253 
	#p‹tDISABLE_INTERRUPTS
(Ë\

	)

254 
__asm
 volatile ( \

261 
	#p‹tENABLE_INTERRUPTS
(Ë\

	)

262 
__asm
 volatile ( \

271 
vP‹tE¡îCrôiˇl
( );

272 
vP‹tExôCrôiˇl
( );

274 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

275 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

279 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

280 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

282 #ifde‡
__˝lu•lus


	@portable/GCC/ARM_CA9/port.c

67 
	~<°dlib.h
>

70 
	~"FªeRTOS.h
"

71 
	~"èsk.h
"

73 #i‚de‡
c⁄figINTERRUPT_CONTROLLER_BASE_ADDRESS


74 #îr‹ 
c⁄figINTERRUPT_CONTROLLER_BASE_ADDRESS
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

77 #i‚de‡
c⁄figINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET


78 #îr‹ 
c⁄figINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

81 #i‚de‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES


82 #îr‹ 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

85 #i‚de‡
c⁄figSETUP_TICK_INTERRUPT


86 #îr‹ 
c⁄figSETUP_TICK_INTERRUPT
(Ë
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

89 #i‚de‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY


90 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

93 #i‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 == 0

94 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
nŸ
 
be
 
£t
 
to
 0

97 #i‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 > 
c⁄figUNIQUE_INTERRUPT_PRIORITIES


98 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
be
 
Àss
 
th™
 
‹
 
equÆ
 
to
 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 
as
 
the
 
lowî
Åhê
numîic
 
¥i‹ôy
 
vÆue
Åhê
highî
Åhê
logiˇl
 
öãºu±
Öriority

101 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

103 #if–
c⁄figMAX_PRIORITIES
 > 32 )

104 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

109 #i‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 <–
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 / 2 )

110 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
be
 
gª©î
 
th™
 ( 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 / 2 )

113 #i‚de‡
c⁄figCLEAR_TICK_INTERRUPT


114 
	#c⁄figCLEAR_TICK_INTERRUPT
()

	)

119 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

123 
	#p‹tUNMASK_VALUE
 ( 0xFF )

	)

130 
	#p‹tNO_FLOATING_POINT_CONTEXT
 ( ( 
SèckTy≥_t
 ) 0 )

	)

133 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

134 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

135 
	#p‹tINTERRUPT_ENABLE_BIT
 ( 0x80UL )

	)

136 
	#p‹tTHUMB_MODE_ADDRESS
 ( 0x01UL )

	)

140 
	#p‹tBINARY_POINT_BITS
 ( ( 
uöt8_t
 ) 0x03 )

	)

143 
	#p‹tAPSR_MODE_BITS_MASK
 ( 0x1F )

	)

147 
	#p‹tAPSR_USER_MODE
 ( 0x10 )

	)

152 
	#p‹tCPU_IRQ_DISABLE
(Ë\

	)

153 
__asm
 volatile ( "CPSID i" ); \

154 
__asm
 volatile ( "DSB" ); \

155 
__asm
 volatile ( "ISB" );

157 
	#p‹tCPU_IRQ_ENABLE
(Ë\

	)

158 
__asm
 volatile ( "CPSIE i" ); \

159 
__asm
 volatile ( "DSB" ); \

160 
__asm
 volatile ( "ISB" );

164 
	#p‹tCLEAR_INTERRUPT_MASK
(Ë\

	)

166 
p‹tCPU_IRQ_DISABLE
(); \

167 
	gp‹tICCPMR_PRIORITY_MASK_REGISTER
 = 
p‹tUNMASK_VALUE
; \

168 
__asm
( "DSB \n" \

170 
p‹tCPU_IRQ_ENABLE
(); \

173 
	#p‹tINTERRUPT_PRIORITY_REGISTER_OFFSET
 0x400UL

	)

174 
	#p‹tMAX_8_BIT_VALUE
 ( ( 
uöt8_t
 ) 0xf‡)

	)

175 
	#p‹tBIT_0_SET
 ( ( 
uöt8_t
 ) 0x01 )

	)

183 
vP‹tRe°‹eTaskC⁄ãxt
( );

192 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

196 
uöt32_t
 
	gulP‹tTaskHasFPUC⁄ãxt
 = 
pdFALSE
;

199 
uöt32_t
 
	gulP‹tYõldRequúed
 = 
pdFALSE
;

203 
uöt32_t
 
	gulP‹tI¡îru±Ne°ög
 = 0UL;

205 
__©åibuã__
(–
u£d
 )Ëc⁄° 
uöt32_t
 
	gulICCIAR
 = 
p‹tICCIAR_INTERRUPT_ACKNOWLEDGE_REGISTER_ADDRESS
;

206 
__©åibuã__
(–
u£d
 )Ëc⁄° 
uöt32_t
 
	gulICCEOIR
 = 
p‹tICCEOIR_END_OF_INTERRUPT_REGISTER_ADDRESS
;

207 
__©åibuã__
(–
u£d
 )Ëc⁄° 
uöt32_t
 
	gulICCPMR
 = 
p‹tICCPMR_PRIORITY_MASK_REGISTER_ADDRESS
;

208 
__©åibuã__
(–
u£d
 )Ëc⁄° 
uöt32_t
 
	gulMaxAPIPri‹ôyMask
 = ( 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 );

215 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

223 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
NULL
;

224 
pxT›OfSèck
--;

225 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
NULL
;

226 
pxT›OfSèck
--;

227 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
NULL
;

228 
pxT›OfSèck
--;

229 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

231 if–––
uöt32_t
 ) 
pxCode
 & 
p‹tTHUMB_MODE_ADDRESS
 ) != 0x00UL )

234 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

237 
pxT›OfSèck
--;

240 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

241 
pxT›OfSèck
--;

244 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00000000;

245 
pxT›OfSèck
--;

246 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

247 
pxT›OfSèck
--;

248 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

249 
pxT›OfSèck
--;

250 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

251 
pxT›OfSèck
--;

252 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

253 
pxT›OfSèck
--;

254 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

255 
pxT›OfSèck
--;

256 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

257 
pxT›OfSèck
--;

258 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

259 
pxT›OfSèck
--;

260 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

261 
pxT›OfSèck
--;

262 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

263 
pxT›OfSèck
--;

264 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

265 
pxT›OfSèck
--;

266 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

267 
pxT›OfSèck
--;

268 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

269 
pxT›OfSèck
--;

270 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

271 
pxT›OfSèck
--;

275 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

276 
pxT›OfSèck
--;

281 *
pxT›OfSèck
 = 
p‹tNO_FLOATING_POINT_CONTEXT
;

283  
pxT›OfSèck
;

284 
	}
}

287 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

289 
uöt32_t
 
ulAPSR
;

291 #if–
c⁄figASSERT_DEFINED
 == 1 )

293 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

294 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( vﬁ©ûêuöt8_à* c⁄° ) ( 
c⁄figINTERRUPT_CONTROLLER_BASE_ADDRESS
 + 
p‹tINTERRUPT_PRIORITY_REGISTER_OFFSET
 );

295 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

300 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

304 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

307 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

310  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tBIT_0_SET
 ) !=ÖortBIT_0_SET )

312 
ucMaxPri‹ôyVÆue
 >>–
uöt8_t
 ) 0x01;

317 
	`c⁄figASSERT
–
ucMaxPri‹ôyVÆue
 =
p‹tLOWEST_INTERRUPT_PRIORITY
 );

321 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

328 
__asm
 vﬁ©ûê–"MRS %0, APSR" : "Ù" ( 
ulAPSR
 ) );

329 
ulAPSR
 &
p‹tAPSR_MODE_BITS_MASK
;

330 
	`c⁄figASSERT
–
ulAPSR
 !
p‹tAPSR_USER_MODE
 );

332 if–
ulAPSR
 !
p‹tAPSR_USER_MODE
 )

337 
	`c⁄figASSERT
––
p‹tICCBPR_BINARY_POINT_REGISTER
 & 
p‹tBINARY_POINT_BITS
 ) <
p‹tMAX_BINARY_POINT_VALUE
 );

339 if––
p‹tICCBPR_BINARY_POINT_REGISTER
 & 
p‹tBINARY_POINT_BITS
 ) <
p‹tMAX_BINARY_POINT_VALUE
 )

345 
	`p‹tCPU_IRQ_DISABLE
();

348 
	`c⁄figSETUP_TICK_INTERRUPT
();

351 
	`vP‹tRe°‹eTaskC⁄ãxt
();

359 
	}
}

362 
	$vP‹tEndScheduÀr
( )

366 
	`c⁄figASSERT
–
ulCrôiˇlNe°ög
 == 1000UL );

367 
	}
}

370 
	$vP‹tE¡îCrôiˇl
( )

373 
	`ulP‹tSëI¡îru±Mask
();

378 
ulCrôiˇlNe°ög
++;

379 
	}
}

382 
	$vP‹tExôCrôiˇl
( )

384 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

388 
ulCrôiˇlNe°ög
--;

392 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

396 
	`p‹tCLEAR_INTERRUPT_MASK
();

399 
	}
}

402 
	$FªeRTOS_Tick_H™dÀr
( )

409 
	`p‹tCPU_IRQ_DISABLE
();

410 
p‹tICCPMR_PRIORITY_MASK_REGISTER
 = ( 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 );

411 
	`__asm
( "dsb \n"

413 
	`p‹tCPU_IRQ_ENABLE
();

416 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

418 
ulP‹tYõldRequúed
 = 
pdTRUE
;

422 
	`p‹tCLEAR_INTERRUPT_MASK
();

423 
	`c⁄figCLEAR_TICK_INTERRUPT
();

424 
	}
}

427 
	$vP‹tTaskU£sFPU
( )

429 
uöt32_t
 
ulInôülFPSCR
 = 0;

433 
ulP‹tTaskHasFPUC⁄ãxt
 = 
pdTRUE
;

436 
	`__asm
–"FMXR FPSCR, %0" :: "r" (
ulInôülFPSCR
) );

437 
	}
}

440 
	$vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 )

442 if–
ulNewMaskVÆue
 =
pdFALSE
 )

444 
	`p‹tCLEAR_INTERRUPT_MASK
();

446 
	}
}

449 
uöt32_t
 
	$ulP‹tSëI¡îru±Mask
( )

451 
uöt32_t
 
ulRëu∫
;

455 
	`p‹tCPU_IRQ_DISABLE
();

456 if–
p‹tICCPMR_PRIORITY_MASK_REGISTER
 =–
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 ) )

459 
ulRëu∫
 = 
pdTRUE
;

463 
ulRëu∫
 = 
pdFALSE
;

464 
p‹tICCPMR_PRIORITY_MASK_REGISTER
 = ( 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 );

465 
	`__asm
( "dsb \n"

468 
	`p‹tCPU_IRQ_ENABLE
();

470  
ulRëu∫
;

471 
	}
}

474 #if–
c⁄figASSERT_DEFINED
 == 1 )

476 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

496 
	`c⁄figASSERT
–
p‹tICCRPR_RUNNING_PRIORITY_REGISTER
 >–
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 ) );

508 
	`c⁄figASSERT
––
p‹tICCBPR_BINARY_POINT_REGISTER
 & 
p‹tBINARY_POINT_BITS
 ) <
p‹tMAX_BINARY_POINT_VALUE
 );

509 
	}
}

	@portable/GCC/ARM_CA9/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

96 
uöt32_t
 
	tTickTy≥_t
;

97 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

102 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

103 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

104 
	#p‹tBYTE_ALIGNMENT
 8

	)

111 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 )\

	)

113 
uöt32_t
 
ulP‹tYõldRequúed
; \

115 if–
	gxSwôchRequúed
 !
pdFALSE
 ) \

117 
ulP‹tYõldRequúed
 = 
pdTRUE
; \

121 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

122 
	#p‹tYIELD
(Ë
	`__asm
–"SWI 0" );

	)

129 
vP‹tE¡îCrôiˇl
( );

130 
vP‹tExôCrôiˇl
( );

131 
uöt32_t
 
ulP‹tSëI¡îru±Mask
( );

132 
vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 );

136 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

137 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

138 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

139 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
–0 )

	)

140 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

141 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
(x)

	)

148 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

149 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

153 
FªeRTOS_Tick_H™dÀr
( );

157 
vP‹tTaskU£sFPU
( );

158 
	#p‹tTASK_USES_FLOATING_POINT
(Ë
	`vP‹tTaskU£sFPU
()

	)

160 
	#p‹tLOWEST_INTERRUPT_PRIORITY
 ( ( ( 
uöt32_t
 ) 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 ) - 1UL )

	)

161 
	#p‹tLOWEST_USABLE_INTERRUPT_PRIORITY
 ( 
p‹tLOWEST_INTERRUPT_PRIORITY
 - 1UL )

	)

164 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

167 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

168 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

172 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`__buûtö_˛z
–uxRódyPri‹ôõ†Ë)

	)

176 #ifde‡
c⁄figASSERT


177 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

178 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

181 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûe–"NOP" )

	)

184 #ifde‡
__˝lu•lus


191 #i‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 16

192 
	#p‹tPRIORITY_SHIFT
 4

	)

193 
	#p‹tMAX_BINARY_POINT_VALUE
 3

	)

194 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 32

195 
	#p‹tPRIORITY_SHIFT
 3

	)

196 
	#p‹tMAX_BINARY_POINT_VALUE
 2

	)

197 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 64

198 
	#p‹tPRIORITY_SHIFT
 2

	)

199 
	#p‹tMAX_BINARY_POINT_VALUE
 1

	)

200 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 128

201 
	#p‹tPRIORITY_SHIFT
 1

	)

202 
	#p‹tMAX_BINARY_POINT_VALUE
 0

	)

203 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 256

204 
	#p‹tPRIORITY_SHIFT
 0

	)

205 
	#p‹tMAX_BINARY_POINT_VALUE
 0

	)

207 #îr‹ 
InvÆid
 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 
£âög
. c⁄figUNIQUE_INTERRUPT_PRIORITIES 
mu°
 
be
 
£t
 
to
 
the
 
numbî
 
of
 
unique
 
¥i‹ôõs
 
im∂emíãd
 
by
Åhê
èrgë
 
h¨dw¨e


211 
	#p‹tICCPMR_PRIORITY_MASK_OFFSET
 ( 0x04 )

	)

212 
	#p‹tICCIAR_INTERRUPT_ACKNOWLEDGE_OFFSET
 ( 0x0C )

	)

213 
	#p‹tICCEOIR_END_OF_INTERRUPT_OFFSET
 ( 0x10 )

	)

214 
	#p‹tICCBPR_BINARY_POINT_OFFSET
 ( 0x08 )

	)

215 
	#p‹tICCRPR_RUNNING_PRIORITY_OFFSET
 ( 0x14 )

	)

217 
	#p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 ( 
c⁄figINTERRUPT_CONTROLLER_BASE_ADDRESS
 + 
c⁄figINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET
 )

	)

218 
	#p‹tICCPMR_PRIORITY_MASK_REGISTER
 ( *––vﬁ©ûê
uöt8_t
 * ) ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCPMR_PRIORITY_MASK_OFFSET
 ) ) )

	)

219 
	#p‹tICCIAR_INTERRUPT_ACKNOWLEDGE_REGISTER_ADDRESS
 ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCIAR_INTERRUPT_ACKNOWLEDGE_OFFSET
 )

	)

220 
	#p‹tICCEOIR_END_OF_INTERRUPT_REGISTER_ADDRESS
 ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCEOIR_END_OF_INTERRUPT_OFFSET
 )

	)

221 
	#p‹tICCPMR_PRIORITY_MASK_REGISTER_ADDRESS
 ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCPMR_PRIORITY_MASK_OFFSET
 )

	)

222 
	#p‹tICCBPR_BINARY_POINT_REGISTER
 ( *––c⁄° vﬁ©ûê
uöt32_t
 * ) ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCBPR_BINARY_POINT_OFFSET
 ) ) )

	)

223 
	#p‹tICCRPR_RUNNING_PRIORITY_REGISTER
 ( *––c⁄° vﬁ©ûê
uöt8_t
 * ) ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCRPR_RUNNING_PRIORITY_OFFSET
 ) ) )

	)

	@portable/GCC/ARM_CM0/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000e010 )

	)

76 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000e014 )

	)

77 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000ed04 )

	)

78 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000ed20 )

	)

79 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

80 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

81 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

82 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

83 
	#p‹tMIN_INTERRUPT_PRIORITY
 ( 255UL )

	)

84 
	#p‹tNVIC_PENDSV_PRI
 ( 
p‹tMIN_INTERRUPT_PRIORITY
 << 16UL )

	)

85 
	#p‹tNVIC_SYSTICK_PRI
 ( 
p‹tMIN_INTERRUPT_PRIORITY
 << 24UL )

	)

88 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

93 #ifde‡
c⁄figTASK_RETURN_ADDRESS


94 
	#p‹tTASK_RETURN_ADDRESS
 
c⁄figTASK_RETURN_ADDRESS


	)

96 
	#p‹tTASK_RETURN_ADDRESS
 
¥vTaskExôEº‹


	)

101 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

106 
¥vSëupTimîI¡îru±
( );

111 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

112 
	`xP‹tSysTickH™dÀr
( );

113 
	`vP‹tSVCH™dÀr
( );

118 
	$vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

123 
	`¥vTaskExôEº‹
( );

130 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

134 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tTASK_RETURN_ADDRESS
;

140 
pxT›OfSèck
 -= 5;

141 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

142 
pxT›OfSèck
 -= 8;

144  
pxT›OfSèck
;

145 
	}
}

148 
	$¥vTaskExôEº‹
( )

156 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

157 
	`p‹tDISABLE_INTERRUPTS
();

159 
	}
}

162 
	$vP‹tSVCH™dÀr
( )

166 
	}
}

169 
	$vP‹tSèπFú°Task
( )

174 
__asm
 volatile(

190 
	}
}

196 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

199 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

200 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

204 
	`¥vSëupTimîI¡îru±
();

207 
uxCrôiˇlNe°ög
 = 0;

210 
	`vP‹tSèπFú°Task
();

216 
	`¥vTaskExôEº‹
();

220 
	}
}

223 
	$vP‹tEndScheduÀr
( )

227 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

228 
	}
}

231 
	$vP‹tYõld
( )

234 *–
p‹tNVIC_INT_CTRL
 ) = 
p‹tNVIC_PENDSVSET
;

238 
__asm
 volatile( "dsb" );

239 
__asm
 volatile( "isb" );

240 
	}
}

243 
	$vP‹tE¡îCrôiˇl
( )

245 
	`p‹tDISABLE_INTERRUPTS
();

246 
uxCrôiˇlNe°ög
++;

247 
__asm
 volatile( "dsb" );

248 
__asm
 volatile( "isb" );

249 
	}
}

252 
	$vP‹tExôCrôiˇl
( )

254 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

255 
uxCrôiˇlNe°ög
--;

256 if–
uxCrôiˇlNe°ög
 == 0 )

258 
	`p‹tENABLE_INTERRUPTS
();

260 
	}
}

263 
uöt32_t
 
	$ulSëI¡îru±MaskFromISR
( )

265 
__asm
 volatile(

273 
	}
}

276 
	$vCÀ¨I¡îru±MaskFromISR
–
uöt32_t
 
ulMask
 )

278 
__asm
 volatile(

284 –Ë
ulMask
;

285 
	}
}

288 
	$xP‹tPídSVH™dÀr
( )

292 
__asm
 volatile

333 
	}
}

336 
	$xP‹tSysTickH™dÀr
( )

338 
uöt32_t
 
ulPªviousMask
;

340 
ulPªviousMask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

343 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

346 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

349 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulPªviousMask
 );

350 
	}
}

357 
	$¥vSëupTimîI¡îru±
( )

360 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

361 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

362 
	}
}

	@portable/GCC/ARM_CM0/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

114 
vP‹tYõld
( );

115 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

116 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

117 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

118 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT


	)

119 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

124 
vP‹tE¡îCrôiˇl
( );

125 
vP‹tExôCrôiˇl
( );

126 
uöt32_t
 
ulSëI¡îru±MaskFromISR
–Ë
__©åibuã__
((
«ked
));

127 
vCÀ¨I¡îru±MaskFromISR
–
uöt32_t
 
ulMask
 ) 
__©åibuã__
((
«ked
));

129 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulSëI¡îru±MaskFromISR
()

	)

130 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vCÀ¨I¡îru±MaskFromISR
–x )

	)

131 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûê–" cpsid i " )

	)

132 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûê–" cpsõ i " )

	)

133 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

134 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

139 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

140 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

142 
	#p‹tNOP
()

	)

144 #ifde‡
__˝lu•lus


	@portable/GCC/ARM_CM3/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

77 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


78 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

81 #i‚de‡
c⁄figSYSTICK_CLOCK_HZ


82 
	#c⁄figSYSTICK_CLOCK_HZ
 
c⁄figCPU_CLOCK_HZ


	)

84 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 1UL << 2UL )

	)

88 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 0 )

	)

92 
	#p‹tNVIC_SYSTICK_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 ) )

	)

93 
	#p‹tNVIC_SYSTICK_LOAD_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 ) )

	)

94 
	#p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e018 ) )

	)

95 
	#p‹tNVIC_SYSPRI2_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 ) )

	)

97 
	#p‹tNVIC_SYSTICK_INT_BIT
 ( 1UL << 1UL )

	)

98 
	#p‹tNVIC_SYSTICK_ENABLE_BIT
 ( 1UL << 0UL )

	)

99 
	#p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ( 1UL << 16UL )

	)

100 
	#p‹tNVIC_PENDSVCLEAR_BIT
 ( 1UL << 27UL )

	)

101 
	#p‹tNVIC_PEND_SYSTICK_CLEAR_BIT
 ( 1UL << 25UL )

	)

103 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

104 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

107 
	#p‹tFIRST_USER_INTERRUPT_NUMBER
 ( 16 )

	)

108 
	#p‹tNVIC_IP_REGISTERS_OFFSET_16
 ( 0xE000E3F0 )

	)

109 
	#p‹tAIRCR_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xE000ED0C ) )

	)

110 
	#p‹tMAX_8_BIT_VALUE
 ( ( 
uöt8_t
 ) 0xf‡)

	)

111 
	#p‹tTOP_BIT_OF_BYTE
 ( ( 
uöt8_t
 ) 0x80 )

	)

112 
	#p‹tMAX_PRIGROUP_BITS
 ( ( 
uöt8_t
 ) 7 )

	)

113 
	#p‹tPRIORITY_GROUP_MASK
 ( 0x07UL << 8UL )

	)

114 
	#p‹tPRIGROUP_SHIFT
 ( 8UL )

	)

117 
	#p‹tINITIAL_XPSR
 ( 0x01000000UL )

	)

120 
	#p‹tMAX_24_BIT_NUMBER
 ( 0xffffffUL )

	)

125 
	#p‹tMISSED_COUNTS_FACTOR
 ( 45UL )

	)

130 #ifde‡
c⁄figTASK_RETURN_ADDRESS


131 
	#p‹tTASK_RETURN_ADDRESS
 
c⁄figTASK_RETURN_ADDRESS


	)

133 
	#p‹tTASK_RETURN_ADDRESS
 
¥vTaskExôEº‹


	)

138 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

145 
vP‹tSëupTimîI¡îru±
( );

150 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

151 
	`xP‹tSysTickH™dÀr
( );

152 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

157 
	$¥vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

162 
	`¥vTaskExôEº‹
( );

169 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

170 
uöt32_t
 
ulTimîCou¡sF‹O√Tick
 = 0;

177 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

178 
uöt32_t
 
xMaximumPossibÀSuµªs£dTicks
 = 0;

185 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

186 
uöt32_t
 
ulSt›≥dTimîCom≥nßti⁄
 = 0;

194 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

195 
uöt8_t
 
ucMaxSysCÆlPri‹ôy
 = 0;

196 
uöt32_t
 
ulMaxPRIGROUPVÆue
 = 0;

197 c⁄° vﬁ©ûê
uöt8_t
 * c⁄° 
pcI¡îru±Pri‹ôyRegi°îs
 = ( c⁄° vﬁ©ûêuöt8_à* c⁄° ) 
p‹tNVIC_IP_REGISTERS_OFFSET_16
;

205 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

209 
pxT›OfSèck
--;

210 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

211 
pxT›OfSèck
--;

212 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

213 
pxT›OfSèck
--;

214 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tTASK_RETURN_ADDRESS
;

215 
pxT›OfSèck
 -= 5;

216 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

217 
pxT›OfSèck
 -= 8;

219  
pxT›OfSèck
;

220 
	}
}

223 
	$¥vTaskExôEº‹
( )

231 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

232 
	`p‹tDISABLE_INTERRUPTS
();

234 
	}
}

237 
	$vP‹tSVCH™dÀr
( )

239 
__asm
 volatile (

254 
	}
}

257 
	$¥vP‹tSèπFú°Task
( )

259 
__asm
 volatile(

270 
	}
}

276 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

280 
	`c⁄figASSERT
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

282 #if–
c⁄figASSERT_DEFINED
 == 1 )

284 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

285 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( vﬁ©ûêuöt8_à* c⁄° ) ( 
p‹tNVIC_IP_REGISTERS_OFFSET_16
 + 
p‹tFIRST_USER_INTERRUPT_NUMBER
 );

286 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

294 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

298 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

301 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

304 
ucMaxSysCÆlPri‹ôy
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 & 
ucMaxPri‹ôyVÆue
;

308 
ulMaxPRIGROUPVÆue
 = 
p‹tMAX_PRIGROUP_BITS
;

309  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tTOP_BIT_OF_BYTE
 ) ==ÖortTOP_BIT_OF_BYTE )

311 
ulMaxPRIGROUPVÆue
--;

312 
ucMaxPri‹ôyVÆue
 <<–
uöt8_t
 ) 0x01;

317 
ulMaxPRIGROUPVÆue
 <<
p‹tPRIGROUP_SHIFT
;

318 
ulMaxPRIGROUPVÆue
 &
p‹tPRIORITY_GROUP_MASK
;

322 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

327 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_PENDSV_PRI
;

328 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_SYSTICK_PRI
;

332 
	`vP‹tSëupTimîI¡îru±
();

335 
uxCrôiˇlNe°ög
 = 0;

338 
	`¥vP‹tSèπFú°Task
();

344 
	`¥vTaskExôEº‹
();

348 
	}
}

351 
	$vP‹tEndScheduÀr
( )

355 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

356 
	}
}

359 
	$vP‹tYõld
( )

362 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

366 
__asm
 volatile( "dsb" );

367 
__asm
 volatile( "isb" );

368 
	}
}

371 
	$vP‹tE¡îCrôiˇl
( )

373 
	`p‹tDISABLE_INTERRUPTS
();

374 
uxCrôiˇlNe°ög
++;

375 
__asm
 volatile( "dsb" );

376 
__asm
 volatile( "isb" );

377 
	}
}

380 
	$vP‹tExôCrôiˇl
( )

382 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

383 
uxCrôiˇlNe°ög
--;

384 if–
uxCrôiˇlNe°ög
 == 0 )

386 
	`p‹tENABLE_INTERRUPTS
();

388 
	}
}

391 
__©åibuã__
(–
«ked
 )Ë
uöt32_t
 
	$ulP‹tSëI¡îru±Mask
( )

393 
__asm
 volatile \

399 :: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) : "r0", "r1" \

405 
	}
}

408 
__©åibuã__
(–
«ked
 )Ë
	$vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 )

410 
__asm
 volatile \

418 –Ë
ulNewMaskVÆue
;

419 
	}
}

422 
	$xP‹tPídSVH™dÀr
( )

426 
__asm
 volatile

454 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
)

456 
	}
}

459 
	$xP‹tSysTickH™dÀr
( )

465 –Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

468 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

472 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

475 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
( 0 );

476 
	}
}

479 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

481 
__©åibuã__
((
wók
)Ë
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

483 
uöt32_t
 
ulRñﬂdVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCom∂ëedSysTickDe¸emíts
, 
ulSysTickCTRL
;

484 
TickTy≥_t
 
xModifübÀIdÀTime
;

487 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

489 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

496 
p‹tNVIC_SYSTICK_CTRL_REG
 &~
p‹tNVIC_SYSTICK_ENABLE_BIT
;

501 
ulRñﬂdVÆue
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 + ( 
ulTimîCou¡sF‹O√Tick
 * ( 
xEx≥˘edIdÀTime
 - 1UL ) );

502 if–
ulRñﬂdVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

504 
ulRñﬂdVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

509 
__asm
 volatile( "cpsid i" );

513 if–
	`eTaskC⁄fúmSÀïModeSètus
(Ë=
eAb‹tSÀï
 )

517 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

520 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

524 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

528 
__asm
 volatile( "cpsie i" );

533 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulRñﬂdVÆue
;

537 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

540 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

547 
xModifübÀIdÀTime
 = 
xEx≥˘edIdÀTime
;

548 
	`c⁄figPRE_SLEEP_PROCESSING
–
xModifübÀIdÀTime
 );

549 if–
xModifübÀIdÀTime
 > 0 )

551 
__asm
 volatile( "dsb" );

552 
__asm
 volatile( "wfi" );

553 
__asm
 volatile( "isb" );

555 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

561 
ulSysTickCTRL
 = 
p‹tNVIC_SYSTICK_CTRL_REG
;

562 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
ulSysTickCTRL
 & ~
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

566 
__asm
 volatile( "cpsie i" );

568 if––
ulSysTickCTRL
 & 
p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ) != 0 )

570 
uöt32_t
 
ulCÆcuœãdLﬂdVÆue
;

576 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL ) - ( 
ulRñﬂdVÆue
 - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 );

581 if––
ulCÆcuœãdLﬂdVÆue
 < 
ulSt›≥dTimîCom≥nßti⁄
 ) || ( ulCÆcuœãdLﬂdVÆuê> 
ulTimîCou¡sF‹O√Tick
 ) )

583 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL );

586 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulCÆcuœãdLﬂdVÆue
;

593 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

601 
ulCom∂ëedSysTickDe¸emíts
 = ( 
xEx≥˘edIdÀTime
 * 
ulTimîCou¡sF‹O√Tick
 ) - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

605 
ulCom∂ëeTickPîiods
 = 
ulCom∂ëedSysTickDe¸emíts
 / 
ulTimîCou¡sF‹O√Tick
;

609 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( ( 
ulCom∂ëeTickPîiods
 + 1 ) * 
ulTimîCou¡sF‹O√Tick
 ) - 
ulCom∂ëedSysTickDe¸emíts
;

617 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

618 
	`p‹tENTER_CRITICAL
();

620 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

621 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

622 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

624 
	`p‹tEXIT_CRITICAL
();

626 
	}
}

635 
__©åibuã__
(–
wók
 )Ë
	$vP‹tSëupTimîI¡îru±
( )

638 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

640 
ulTimîCou¡sF‹O√Tick
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

641 
xMaximumPossibÀSuµªs£dTicks
 = 
p‹tMAX_24_BIT_NUMBER
 / 
ulTimîCou¡sF‹O√Tick
;

642 
ulSt›≥dTimîCom≥nßti⁄
 = 
p‹tMISSED_COUNTS_FACTOR
 / ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figSYSTICK_CLOCK_HZ
 );

647 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

648 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 | 
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

649 
	}
}

652 #if–
c⁄figASSERT_DEFINED
 == 1 )

654 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

656 
uöt32_t
 
ulCuºítI¡îru±
;

657 
uöt8_t
 
ucCuºítPri‹ôy
;

660 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) );

663 if–
ulCuºítI¡îru±
 >
p‹tFIRST_USER_INTERRUPT_NUMBER
 )

666 
ucCuºítPri‹ôy
 = 
pcI¡îru±Pri‹ôyRegi°îs
[ 
ulCuºítI¡îru±
 ];

691 
	`c⁄figASSERT
–
ucCuºítPri‹ôy
 >
ucMaxSysCÆlPri‹ôy
 );

707 
	`c⁄figASSERT
––
p‹tAIRCR_REG
 & 
p‹tPRIORITY_GROUP_MASK
 ) <
ulMaxPRIGROUPVÆue
 );

708 
	}
}

	@portable/GCC/ARM_CM3/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

114 
vP‹tYõld
( );

115 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

116 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

117 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

118 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT


	)

119 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

123 
vP‹tE¡îCrôiˇl
( );

124 
vP‹tExôCrôiˇl
( );

125 
uöt32_t
 
ulP‹tSëI¡îru±Mask
( );

126 
vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 );

127 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

128 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
(x)

	)

129 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

130 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
(0)

	)

131 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

132 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

138 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

139 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

143 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


144 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

145 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

150 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

153 
__©åibuã__
––
Æways_ölöe
 ) ) 
ölöe
 
uöt8_t
 
ucP‹tCou¡LódögZîos
–
uöt32_t
 
ulBôm≠
 )

155 
uöt8_t
 
	gucRëu∫
;

157 
__asm
 vﬁ©ûê–"˛z %0, %1" : "Ù" ( 
ucRëu∫
 ) : "r" ( 
ulBôm≠
 ) );

158  
	gucRëu∫
;

162 #if–
c⁄figMAX_PRIORITIES
 > 32 )

163 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

167 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

168 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

172 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`ucP‹tCou¡LódögZîos
––uxRódyPri‹ôõ†ËË)

	)

178 #ifde‡
c⁄figASSERT


179 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

180 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

184 
	#p‹tNOP
()

	)

186 #ifde‡
__˝lu•lus


	@portable/GCC/ARM_CM3_MPU/port.c

73 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

76 
	~"FªeRTOS.h
"

77 
	~"èsk.h
"

78 
	~"queue.h
"

80 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


83 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 )

	)

84 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 )

	)

85 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 )

	)

86 
	#p‹tNVIC_SYSPRI1
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed1¯)

	)

87 
	#p‹tNVIC_SYS_CTRL_STATE
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed24 )

	)

88 
	#p‹tNVIC_MEM_FAULT_ENABLE
 ( 1UL << 16UL )

	)

91 
	#p‹tMPU_TYPE
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed90 )

	)

92 
	#p‹tMPU_REGION_BASE_ADDRESS
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed9C )

	)

93 
	#p‹tMPU_REGION_ATTRIBUTE
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000edA0 )

	)

94 
	#p‹tMPU_CTRL
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed94 )

	)

95 
	#p‹tEXPECTED_MPU_TYPE_VALUE
 ( 8UL << 8UL )

	)

96 
	#p‹tMPU_ENABLE
 ( 0x01UL )

	)

97 
	#p‹tMPU_BACKGROUND_ENABLE
 ( 1UL << 2UL )

	)

98 
	#p‹tPRIVILEGED_EXECUTION_START_ADDRESS
 ( 0UL )

	)

99 
	#p‹tMPU_REGION_VALID
 ( 0x10UL )

	)

100 
	#p‹tMPU_REGION_ENABLE
 ( 0x01UL )

	)

101 
	#p‹tPERIPHERALS_START_ADDRESS
 0x40000000UL

	)

102 
	#p‹tPERIPHERALS_END_ADDRESS
 0x5FFFFFFFUL

	)

105 
	#p‹tNVIC_SYSTICK_CLK
 ( 0x00000004UL )

	)

106 
	#p‹tNVIC_SYSTICK_INT
 ( 0x00000002UL )

	)

107 
	#p‹tNVIC_SYSTICK_ENABLE
 ( 0x00000001UL )

	)

108 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

109 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

110 
	#p‹tNVIC_SVC_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

113 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

114 
	#p‹tINITIAL_CONTROL_IF_UNPRIVILEGED
 ( 0x03 )

	)

115 
	#p‹tINITIAL_CONTROL_IF_PRIVILEGED
 ( 0x02 )

	)

118 
	#p‹tOFFSET_TO_PC
 ( 6 )

	)

121 
	#p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 ) if–xRu¬ögPrivûeged !
pdTRUE
 ) 
__asm
 vﬁ©ûê–" mr†r0, c⁄åﬁ \¿‹∏r0, #1 \¿m§ c⁄åﬁ,Ñ0" :::"r0" )

	)

126 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

131 
	$¥vSëupTimîI¡îru±
–Ë
PRIVILEGED_FUNCTION
;

136 
	$¥vSëupMPU
–Ë
PRIVILEGED_FUNCTION
;

143 
uöt32_t
 
	$¥vGëMPURegi⁄SizeSëtög
–
uöt32_t
 
ulA˘uÆSizeInByãs
 ) 
PRIVILEGED_FUNCTION
;

150 
Ba£Ty≥_t
 
	$¥vRai£Privûege
–Ë
	`__©åibuã__
(–
«ked
 ));

155 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 )Ë
PRIVILEGED_FUNCTION
;

156 
	$xP‹tSysTickH™dÀr
–Ë
	`__©åibuã__
 ((
	`›timize
("3"))Ë
PRIVILEGED_FUNCTION
;

157 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 )Ë
PRIVILEGED_FUNCTION
;

162 
	$¥vRe°‹eC⁄ãxtOfFú°Task
–Ë
	`__©åibuã__
(–
«ked
 )Ë
PRIVILEGED_FUNCTION
;

168 
	$¥vSVCH™dÀr
–
uöt32_t
 *
pulRegi°îs
 ) 
	`__©åibuã__
(–
noölöe
 )Ë
PRIVILEGED_FUNCTION
;

173 
Ba£Ty≥_t
 
	`MPU_xTaskGíîicCª©e
–
TaskFun˘i⁄_t
 
pvTaskCode
, c⁄° * c⁄° 
pcName
, 
uöt16_t
 
usSèckDïth
, *
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
TaskH™dÀ_t
 *
pxCª©edTask
, 
SèckTy≥_t
 *
puxSèckBuf„r
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 );

174 
	`MPU_vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 );

175 
	`MPU_vTaskDñëe
–
TaskH™dÀ_t
 
pxTaskToDñëe
 );

176 
	`MPU_vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, TickTy≥_à
xTimeIn¸emít
 );

177 
	`MPU_vTaskDñay
–
TickTy≥_t
 
xTicksToDñay
 );

178 
UBa£Ty≥_t
 
	`MPU_uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
pxTask
 );

179 
	`MPU_vTaskPri‹ôySë
–
TaskH™dÀ_t
 
pxTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 );

180 
eTaskSèã
 
	`MPU_eTaskGëSèã
–
TaskH™dÀ_t
 
pxTask
 );

181 
	`MPU_vTaskSu•íd
–
TaskH™dÀ_t
 
pxTaskToSu•íd
 );

182 
	`MPU_vTaskResume
–
TaskH™dÀ_t
 
pxTaskToResume
 );

183 
	`MPU_vTaskSu•ídAŒ
( );

184 
Ba£Ty≥_t
 
	`MPU_xTaskResumeAŒ
( );

185 
TickTy≥_t
 
	`MPU_xTaskGëTickCou¡
( );

186 
UBa£Ty≥_t
 
	`MPU_uxTaskGëNumbîOfTasks
( );

187 
	`MPU_vTaskLi°
–*
pcWrôeBuf„r
 );

188 
	`MPU_vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 );

189 
	`MPU_vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxTagVÆue
 );

190 
TaskHookFun˘i⁄_t
 
	`MPU_xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 );

191 
Ba£Ty≥_t
 
	`MPU_xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 );

192 
UBa£Ty≥_t
 
	`MPU_uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 );

193 
TaskH™dÀ_t
 
	`MPU_xTaskGëCuºítTaskH™dÀ
( );

194 
Ba£Ty≥_t
 
	`MPU_xTaskGëScheduÀrSèã
( );

195 
TaskH™dÀ_t
 
	`MPU_xTaskGëIdÀTaskH™dÀ
( );

196 
UBa£Ty≥_t
 
	`MPU_uxTaskGëSy°emSèã
–
TaskSètus_t
 *
pxTaskSètusAºay
, UBa£Ty≥_à
uxAºaySize
, 
uöt32_t
 *
pulTŸÆRunTime
 );

197 
QueueH™dÀ_t
 
	`MPU_xQueueGíîicCª©e
–
UBa£Ty≥_t
 
uxQueueLígth
, UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 
ucQueueTy≥
 );

198 
Ba£Ty≥_t
 
	`MPU_xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, Ba£Ty≥_à
xC›yPosôi⁄
 );

199 
Ba£Ty≥_t
 
	`MPU_xQueueGíîicRe£t
–
QueueH™dÀ_t
 
pxQueue
, Ba£Ty≥_à
xNewQueue
 );

200 
UBa£Ty≥_t
 
	`MPU_uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
pxQueue
 );

201 
Ba£Ty≥_t
 
	`MPU_xQueueGíîicRe˚ive
–
QueueH™dÀ_t
 
pxQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, Ba£Ty≥_à
xJu°Pìkög
 );

202 
QueueH™dÀ_t
 
	`MPU_xQueueCª©eMuãx
( );

203 
QueueH™dÀ_t
 
	`MPU_xQueueCª©eCou¡ögSem≠h‹e
–
UBa£Ty≥_t
 
uxCou¡VÆue
, UBa£Ty≥_à
uxInôülCou¡
 );

204 
Ba£Ty≥_t
 
	`MPU_xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xBlockTime
 );

205 
Ba£Ty≥_t
 
	`MPU_xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
 );

206 
Ba£Ty≥_t
 
	`MPU_xQueueA…GíîicSíd
–
QueueH™dÀ_t
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, Ba£Ty≥_à
xC›yPosôi⁄
 );

207 
Ba£Ty≥_t
 
	`MPU_xQueueA…GíîicRe˚ive
–
QueueH™dÀ_t
 
pxQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, Ba£Ty≥_à
xJu°Pìkög
 );

208 
	`MPU_vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, *
pcName
 );

209 
	`MPU_vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 );

210 *
	`MPU_pvP‹tMÆloc
–
size_t
 
xSize
 );

211 
	`MPU_vP‹tFªe
–*
pv
 );

212 
	`MPU_vP‹tInôüli£Blocks
( );

213 
size_t
 
	`MPU_xP‹tGëFªeHópSize
( );

214 
QueueSëH™dÀ_t
 
	`MPU_xQueueCª©eSë
–
UBa£Ty≥_t
 
uxEvítQueueLígth
 );

215 
QueueSëMembîH™dÀ_t
 
	`MPU_xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, 
TickTy≥_t
 
xBlockTimeTicks
 );

216 
Ba£Ty≥_t
 
	`MPU_xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 );

217 
Ba£Ty≥_t
 
	`MPU_xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 );

218 
Ba£Ty≥_t
 
	`MPU_xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
 );

225 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
, 
Ba£Ty≥_t
 
xRunPrivûeged
 )

229 
pxT›OfSèck
--;

230 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

231 
pxT›OfSèck
--;

232 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

233 
pxT›OfSèck
--;

234 *
pxT›OfSèck
 = 0;

235 
pxT›OfSèck
 -= 5;

236 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

237 
pxT›OfSèck
 -= 9;

239 if–
xRunPrivûeged
 =
pdTRUE
 )

241 *
pxT›OfSèck
 = 
p‹tINITIAL_CONTROL_IF_PRIVILEGED
;

245 *
pxT›OfSèck
 = 
p‹tINITIAL_CONTROL_IF_UNPRIVILEGED
;

248  
pxT›OfSèck
;

249 
	}
}

252 
	$vP‹tSVCH™dÀr
( )

255 
__asm
 volatile

257 #i‚de‡
USE_PROCESS_STACK


266 ::"i"(
¥vSVCH™dÀr
):"r0"

268 
	}
}

271 
	$¥vSVCH™dÀr
–
uöt32_t
 *
pulP¨am
 )

273 
uöt8_t
 
ucSVCNumbî
;

277 
ucSVCNumbî
 = ( ( 
uöt8_t
 * ) 
pulP¨am
[ 
p‹tOFFSET_TO_PC
 ] )[ -2 ];

278  
ucSVCNumbî
 )

280 
p‹tSVC_START_SCHEDULER
 : *(
p‹tNVIC_SYSPRI1
Ë|
p‹tNVIC_SVC_PRI
;

281 
	`¥vRe°‹eC⁄ãxtOfFú°Task
();

284 
p‹tSVC_YIELD
 : *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

289 
__asm
 volatile( "dsb" );

290 
__asm
 volatile( "isb" );

294 
p‹tSVC_RAISE_PRIVILEGE
 : 
__asm
 volatile

306 
	}
}

309 
	$¥vRe°‹eC⁄ãxtOfFú°Task
( )

311 
__asm
 volatile

335 
	}
}

341 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

345 
	`c⁄figASSERT
––
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) );

348 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

349 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

352 
	`¥vSëupMPU
();

356 
	`¥vSëupTimîI¡îru±
();

359 
uxCrôiˇlNe°ög
 = 0;

362 
__asm
 volatile( " svc %0 \n"

363 :: "i" (
p‹tSVC_START_SCHEDULER
) );

367 
	}
}

370 
	$vP‹tEndScheduÀr
( )

374 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

375 
	}
}

378 
	$vP‹tE¡îCrôiˇl
( )

380 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

382 
	`p‹tDISABLE_INTERRUPTS
();

383 
uxCrôiˇlNe°ög
++;

385 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

386 
	}
}

389 
	$vP‹tExôCrôiˇl
( )

391 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

393 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

394 
uxCrôiˇlNe°ög
--;

395 if–
uxCrôiˇlNe°ög
 == 0 )

397 
	`p‹tENABLE_INTERRUPTS
();

399 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

400 
	}
}

403 
	$xP‹tPídSVH™dÀr
( )

407 
__asm
 volatile

440 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
)

442 
	}
}

445 
	$xP‹tSysTickH™dÀr
( )

447 
uöt32_t
 
ulDummy
;

449 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

452 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

455 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

458 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

459 
	}
}

466 
	$¥vSëupTimîI¡îru±
( )

469 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

470 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

471 
	}
}

474 
	$¥vSëupMPU
( )

476 
uöt32_t
 
__¥ivûeged_fun˘i⁄s_íd__
[];

477 
uöt32_t
 
__FLASH_£gmít_°¨t__
[];

478 
uöt32_t
 
__FLASH_£gmít_íd__
[];

479 
uöt32_t
 
__¥ivûeged_d©a_°¨t__
[];

480 
uöt32_t
 
__¥ivûeged_d©a_íd__
[];

483 if–*
p‹tMPU_TYPE
 =
p‹tEXPECTED_MPU_TYPE_VALUE
 )

486 *
p‹tMPU_REGION_BASE_ADDRESS
 = ( ( 
uöt32_t
 ) 
__FLASH_£gmít_°¨t__
 ) |

487 –
p‹tMPU_REGION_VALID
 ) |

488 –
p‹tUNPRIVILEGED_FLASH_REGION
 );

490 *
p‹tMPU_REGION_ATTRIBUTE
 = ( 
p‹tMPU_REGION_READ_ONLY
 ) |

491 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

492 –
	`¥vGëMPURegi⁄SizeSëtög
––
uöt32_t
 ) 
__FLASH_£gmít_íd__
 - ( uöt32_àË
__FLASH_£gmít_°¨t__
 ) ) |

493 –
p‹tMPU_REGION_ENABLE
 );

498 *
p‹tMPU_REGION_BASE_ADDRESS
 = ( ( 
uöt32_t
 ) 
__FLASH_£gmít_°¨t__
 ) |

499 –
p‹tMPU_REGION_VALID
 ) |

500 –
p‹tPRIVILEGED_FLASH_REGION
 );

502 *
p‹tMPU_REGION_ATTRIBUTE
 = ( 
p‹tMPU_REGION_PRIVILEGED_READ_ONLY
 ) |

503 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

504 –
	`¥vGëMPURegi⁄SizeSëtög
––
uöt32_t
 ) 
__¥ivûeged_fun˘i⁄s_íd__
 - ( uöt32_àË
__FLASH_£gmít_°¨t__
 ) ) |

505 –
p‹tMPU_REGION_ENABLE
 );

509 *
p‹tMPU_REGION_BASE_ADDRESS
 = ( ( 
uöt32_t
 ) 
__¥ivûeged_d©a_°¨t__
 ) |

510 –
p‹tMPU_REGION_VALID
 ) |

511 –
p‹tPRIVILEGED_RAM_REGION
 );

513 *
p‹tMPU_REGION_ATTRIBUTE
 = ( 
p‹tMPU_REGION_PRIVILEGED_READ_WRITE
 ) |

514 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

515 
	`¥vGëMPURegi⁄SizeSëtög
––
uöt32_t
 ) 
__¥ivûeged_d©a_íd__
 - ( uöt32_àË
__¥ivûeged_d©a_°¨t__
 ) |

516 –
p‹tMPU_REGION_ENABLE
 );

520 *
p‹tMPU_REGION_BASE_ADDRESS
 = ( 
p‹tPERIPHERALS_START_ADDRESS
 ) |

521 –
p‹tMPU_REGION_VALID
 ) |

522 –
p‹tGENERAL_PERIPHERALS_REGION
 );

524 *
p‹tMPU_REGION_ATTRIBUTE
 = ( 
p‹tMPU_REGION_READ_WRITE
 | 
p‹tMPU_REGION_EXECUTE_NEVER
 ) |

525 –
	`¥vGëMPURegi⁄SizeSëtög
–
p‹tPERIPHERALS_END_ADDRESS
 - 
p‹tPERIPHERALS_START_ADDRESS
 ) ) |

526 –
p‹tMPU_REGION_ENABLE
 );

529 *
p‹tNVIC_SYS_CTRL_STATE
 |
p‹tNVIC_MEM_FAULT_ENABLE
;

532 *
p‹tMPU_CTRL
 |–
p‹tMPU_ENABLE
 | 
p‹tMPU_BACKGROUND_ENABLE
 );

534 
	}
}

537 
uöt32_t
 
	$¥vGëMPURegi⁄SizeSëtög
–
uöt32_t
 
ulA˘uÆSizeInByãs
 )

539 
uöt32_t
 
ulRegi⁄Size
, 
ulRëu∫VÆue
 = 4;

543  
ulRegi⁄Size
 = 32UL; 
ulRëu∫VÆue
 < 31UL; ( ulRegionSize <<= 1UL ) )

545 if–
ulA˘uÆSizeInByãs
 <
ulRegi⁄Size
 )

551 
ulRëu∫VÆue
++;

557  ( 
ulRëu∫VÆue
 << 1UL );

558 
	}
}

561 
Ba£Ty≥_t
 
	$¥vRai£Privûege
( )

563 
__asm
 volatile

572 :: "i" (
p‹tSVC_RAISE_PRIVILEGE
) : "r0"

576 
	}
}

579 
	$vP‹tSt‹eTaskMPUSëtögs
–
xMPU_SETTINGS
 *
xMPUSëtögs
, c⁄° 
xMEMORY_REGION
 * c⁄° 
xRegi⁄s
, 
SèckTy≥_t
 *
pxBŸtomOfSèck
, 
uöt16_t
 
usSèckDïth
 )

581 
uöt32_t
 
__SRAM_£gmít_°¨t__
[];

582 
uöt32_t
 
__SRAM_£gmít_íd__
[];

583 
uöt32_t
 
__¥ivûeged_d©a_°¨t__
[];

584 
uöt32_t
 
__¥ivûeged_d©a_íd__
[];

585 
öt32_t
 
lIndex
;

586 
uöt32_t
 
ul
;

588 if–
xRegi⁄s
 =
NULL
 )

591 
xMPUSëtögs
->
xRegi⁄
[ 0 ].
ulRegi⁄Ba£Addªss
 =

592 ––
uöt32_t
 ) 
__SRAM_£gmít_°¨t__
 ) |

593 –
p‹tMPU_REGION_VALID
 ) |

594 –
p‹tSTACK_REGION
 );

596 
xMPUSëtögs
->
xRegi⁄
[ 0 ].
ulRegi⁄Aâribuã
 =

597 –
p‹tMPU_REGION_READ_WRITE
 ) |

598 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

599 –
	`¥vGëMPURegi⁄SizeSëtög
––
uöt32_t
 ) 
__SRAM_£gmít_íd__
 - ( uöt32_àË
__SRAM_£gmít_°¨t__
 ) ) |

600 –
p‹tMPU_REGION_ENABLE
 );

604 
xMPUSëtögs
->
xRegi⁄
[ 1 ].
ulRegi⁄Ba£Addªss
 =

605 ––
uöt32_t
 ) 
__¥ivûeged_d©a_°¨t__
 ) |

606 –
p‹tMPU_REGION_VALID
 ) |

607 –
p‹tSTACK_REGION
 + 1 );

609 
xMPUSëtögs
->
xRegi⁄
[ 1 ].
ulRegi⁄Aâribuã
 =

610 –
p‹tMPU_REGION_PRIVILEGED_READ_WRITE
 ) |

611 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

612 
	`¥vGëMPURegi⁄SizeSëtög
––
uöt32_t
 ) 
__¥ivûeged_d©a_íd__
 - ( uöt32_àË
__¥ivûeged_d©a_°¨t__
 ) |

613 –
p‹tMPU_REGION_ENABLE
 );

616  
ul
 = 2; u»<
p‹tNUM_CONFIGURABLE_REGIONS
; ul++ )

618 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Ba£Addªss
 = ( 
p‹tSTACK_REGION
 + u»Ë| 
p‹tMPU_REGION_VALID
;

619 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Aâribuã
 = 0UL;

628 if–
usSèckDïth
 > 0 )

631 
xMPUSëtögs
->
xRegi⁄
[ 0 ].
ulRegi⁄Ba£Addªss
 =

632 ––
uöt32_t
 ) 
pxBŸtomOfSèck
 ) |

633 –
p‹tMPU_REGION_VALID
 ) |

634 –
p‹tSTACK_REGION
 );

636 
xMPUSëtögs
->
xRegi⁄
[ 0 ].
ulRegi⁄Aâribuã
 =

637 –
p‹tMPU_REGION_READ_WRITE
 ) |

638 –
	`¥vGëMPURegi⁄SizeSëtög
––
uöt32_t
 ) 
usSèckDïth
 * ( uöt32_àË–
SèckTy≥_t
 ) ) ) |

639 –
p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ) |

640 –
p‹tMPU_REGION_ENABLE
 );

643 
lIndex
 = 0;

645  
ul
 = 1; u»<
p‹tNUM_CONFIGURABLE_REGIONS
; ul++ )

647 if––
xRegi⁄s
[ 
lIndex
 ] ).
ulLígthInByãs
 > 0UL )

652 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Ba£Addªss
 =

653 ––
uöt32_t
 ) 
xRegi⁄s
[ 
lIndex
 ].
pvBa£Addªss
 ) |

654 –
p‹tMPU_REGION_VALID
 ) |

655 –
p‹tSTACK_REGION
 + 
ul
 );

657 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Aâribuã
 =

658 –
	`¥vGëMPURegi⁄SizeSëtög
–
xRegi⁄s
[ 
lIndex
 ].
ulLígthInByãs
 ) ) |

659 –
xRegi⁄s
[ 
lIndex
 ].
ulP¨amëîs
 ) |

660 –
p‹tMPU_REGION_ENABLE
 );

665 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Ba£Addªss
 = ( 
p‹tSTACK_REGION
 + u»Ë| 
p‹tMPU_REGION_VALID
;

666 
xMPUSëtögs
->
xRegi⁄
[ 
ul
 ].
ulRegi⁄Aâribuã
 = 0UL;

669 
lIndex
++;

672 
	}
}

675 
Ba£Ty≥_t
 
	$MPU_xTaskGíîicCª©e
–
TaskFun˘i⁄_t
 
pvTaskCode
, c⁄° * c⁄° 
pcName
, 
uöt16_t
 
usSèckDïth
, *
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
TaskH™dÀ_t
 *
pxCª©edTask
, 
SèckTy≥_t
 *
puxSèckBuf„r
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

677 
Ba£Ty≥_t
 
xRëu∫
;

678 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

680 
xRëu∫
 = 
	`xTaskGíîicCª©e
–
pvTaskCode
, 
pcName
, 
usSèckDïth
, 
pvP¨amëîs
, 
uxPri‹ôy
, 
pxCª©edTask
, 
puxSèckBuf„r
, 
xRegi⁄s
 );

681 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

682  
xRëu∫
;

683 
	}
}

686 
	$MPU_vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTask
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

688 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

690 
	`vTaskAŒoˇãMPURegi⁄s
–
xTask
, 
xRegi⁄s
 );

691 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

692 
	}
}

695 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

696 
	$MPU_vTaskDñëe
–
TaskH™dÀ_t
 
pxTaskToDñëe
 )

698 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

700 
	`vTaskDñëe
–
pxTaskToDñëe
 );

701 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

702 
	}
}

706 #i‡–
INCLUDE_vTaskDñayU¡û
 == 1 )

707 
	$MPU_vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, TickTy≥_à
xTimeIn¸emít
 )

709 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

711 
	`vTaskDñayU¡û
–
pxPªviousWakeTime
, 
xTimeIn¸emít
 );

712 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

713 
	}
}

717 #i‡–
INCLUDE_vTaskDñay
 == 1 )

718 
	$MPU_vTaskDñay
–
TickTy≥_t
 
xTicksToDñay
 )

720 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

722 
	`vTaskDñay
–
xTicksToDñay
 );

723 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

724 
	}
}

728 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

729 
UBa£Ty≥_t
 
	$MPU_uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
pxTask
 )

731 
UBa£Ty≥_t
 
uxRëu∫
;

732 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

734 
uxRëu∫
 = 
	`uxTaskPri‹ôyGë
–
pxTask
 );

735 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

736  
uxRëu∫
;

737 
	}
}

741 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

742 
	$MPU_vTaskPri‹ôySë
–
TaskH™dÀ_t
 
pxTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 )

744 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

746 
	`vTaskPri‹ôySë
–
pxTask
, 
uxNewPri‹ôy
 );

747 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

748 
	}
}

752 #i‡–
INCLUDE_eTaskGëSèã
 == 1 )

753 
eTaskSèã
 
	$MPU_eTaskGëSèã
–
TaskH™dÀ_t
 
pxTask
 )

755 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

756 
eTaskSèã
 
eRëu∫
;

758 
eRëu∫
 = 
	`eTaskGëSèã
–
pxTask
 );

759 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

760  
eRëu∫
;

761 
	}
}

765 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

766 
TaskH™dÀ_t
 
	$MPU_xTaskGëIdÀTaskH™dÀ
( )

768 
TaskH™dÀ_t
 
xRëu∫
;

769 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

771 
xRëu∫
 = 
	`xTaskGëIdÀTaskH™dÀ
();

772 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

773  
eRëu∫
;

774 
	}
}

778 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

779 
	$MPU_vTaskSu•íd
–
TaskH™dÀ_t
 
pxTaskToSu•íd
 )

781 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

783 
	`vTaskSu•íd
–
pxTaskToSu•íd
 );

784 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

785 
	}
}

789 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

790 
	$MPU_vTaskResume
–
TaskH™dÀ_t
 
pxTaskToResume
 )

792 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

794 
	`vTaskResume
–
pxTaskToResume
 );

795 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

796 
	}
}

800 
	$MPU_vTaskSu•ídAŒ
( )

802 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

804 
	`vTaskSu•ídAŒ
();

805 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

806 
	}
}

809 
Ba£Ty≥_t
 
	$MPU_xTaskResumeAŒ
( )

811 
Ba£Ty≥_t
 
xRëu∫
;

812 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

814 
xRëu∫
 = 
	`xTaskResumeAŒ
();

815 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

816  
xRëu∫
;

817 
	}
}

820 
TickTy≥_t
 
	$MPU_xTaskGëTickCou¡
( )

822 
TickTy≥_t
 
xRëu∫
;

823 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

825 
xRëu∫
 = 
	`xTaskGëTickCou¡
();

826 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

827  
xRëu∫
;

828 
	}
}

831 
UBa£Ty≥_t
 
	$MPU_uxTaskGëNumbîOfTasks
( )

833 
UBa£Ty≥_t
 
uxRëu∫
;

834 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

836 
uxRëu∫
 = 
	`uxTaskGëNumbîOfTasks
();

837 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

838  
uxRëu∫
;

839 
	}
}

842 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

843 
	$MPU_vTaskLi°
–*
pcWrôeBuf„r
 )

845 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

847 
	`vTaskLi°
–
pcWrôeBuf„r
 );

848 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

849 
	}
}

853 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

854 
	$MPU_vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 )

856 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

858 
	`vTaskGëRunTimeSèts
–
pcWrôeBuf„r
 );

859 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

860 
	}
}

864 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

865 
	$MPU_vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxTagVÆue
 )

867 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

869 
	`vTaskSëAµliˇti⁄TaskTag
–
xTask
, 
pxTagVÆue
 );

870 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

871 
	}
}

875 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

876 
TaskHookFun˘i⁄_t
 
	$MPU_xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 )

878 
TaskHookFun˘i⁄_t
 
xRëu∫
;

879 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

881 
xRëu∫
 = 
	`xTaskGëAµliˇti⁄TaskTag
–
xTask
 );

882 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

883  
xRëu∫
;

884 
	}
}

888 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

889 
Ba£Ty≥_t
 
	$MPU_xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 )

891 
Ba£Ty≥_t
 
xRëu∫
;

892 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

894 
xRëu∫
 = 
	`xTaskCÆlAµliˇti⁄TaskHook
–
xTask
, 
pvP¨amëî
 );

895 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

896  
xRëu∫
;

897 
	}
}

901 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

902 
UBa£Ty≥_t
 
	$MPU_uxTaskGëSy°emSèã
–
TaskSètus_t
 *
pxTaskSètusAºay
, 
UBa£Ty≥_t
 
uxAºaySize
, 
uöt32_t
 *
pulTŸÆRunTime
 )

904 
UBa£Ty≥_t
 
uxRëu∫
;

905 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

907 
uxRëu∫
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, 
uxAºaySize
, 
pulTŸÆRunTime
 );

908 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

909  
xRëu∫
;

910 
	}
}

914 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

915 
UBa£Ty≥_t
 
	$MPU_uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 )

917 
UBa£Ty≥_t
 
uxRëu∫
;

918 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

920 
uxRëu∫
 = 
	`uxTaskGëSèckHighW©îM¨k
–
xTask
 );

921 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

922  
uxRëu∫
;

923 
	}
}

927 #i‡–
INCLUDE_xTaskGëCuºítTaskH™dÀ
 == 1 )

928 
TaskH™dÀ_t
 
	$MPU_xTaskGëCuºítTaskH™dÀ
( )

930 
TaskH™dÀ_t
 
xRëu∫
;

931 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

933 
xRëu∫
 = 
	`xTaskGëCuºítTaskH™dÀ
();

934 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

935  
xRëu∫
;

936 
	}
}

940 #i‡–
INCLUDE_xTaskGëScheduÀrSèã
 == 1 )

941 
Ba£Ty≥_t
 
	$MPU_xTaskGëScheduÀrSèã
( )

943 
Ba£Ty≥_t
 
xRëu∫
;

944 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

946 
xRëu∫
 = 
	`xTaskGëScheduÀrSèã
();

947 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

948  
xRëu∫
;

949 
	}
}

953 
QueueH™dÀ_t
 
	$MPU_xQueueGíîicCª©e
–
UBa£Ty≥_t
 
uxQueueLígth
, UBa£Ty≥_à
uxIãmSize
, 
uöt8_t
 
ucQueueTy≥
 )

955 
QueueH™dÀ_t
 
xRëu∫
;

956 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

958 
xRëu∫
 = 
	`xQueueGíîicCª©e
–
uxQueueLígth
, 
uxIãmSize
, 
ucQueueTy≥
 );

959 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

960  
xRëu∫
;

961 
	}
}

964 
Ba£Ty≥_t
 
	$MPU_xQueueGíîicRe£t
–
QueueH™dÀ_t
 
pxQueue
, 
Ba£Ty≥_t
 
xNewQueue
 )

966 
Ba£Ty≥_t
 
xRëu∫
;

967 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

969 
xRëu∫
 = 
	`xQueueGíîicRe£t
–
pxQueue
, 
xNewQueue
 );

970 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

971  
xRëu∫
;

972 
	}
}

975 
Ba£Ty≥_t
 
	$MPU_xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

977 
Ba£Ty≥_t
 
xRëu∫
;

978 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

980 
xRëu∫
 = 
	`xQueueGíîicSíd
–
xQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
xC›yPosôi⁄
 );

981 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

982  
xRëu∫
;

983 
	}
}

986 
UBa£Ty≥_t
 
	$MPU_uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
pxQueue
 )

988 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

989 
UBa£Ty≥_t
 
uxRëu∫
;

991 
uxRëu∫
 = 
	`uxQueueMesßgesWaôög
–
pxQueue
 );

992 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

993  
uxRëu∫
;

994 
	}
}

997 
Ba£Ty≥_t
 
	$MPU_xQueueGíîicRe˚ive
–
QueueH™dÀ_t
 
pxQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, 
Ba£Ty≥_t
 
xJu°Pìkög
 )

999 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1000 
Ba£Ty≥_t
 
xRëu∫
;

1002 
xRëu∫
 = 
	`xQueueGíîicRe˚ive
–
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
xJu°Pìkög
 );

1003 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1004  
xRëu∫
;

1005 
	}
}

1008 
Ba£Ty≥_t
 
	$MPU_xQueuePìkFromISR
–
QueueH™dÀ_t
 
pxQueue
, * c⁄° 
pvBuf„r
 )

1010 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1011 
Ba£Ty≥_t
 
xRëu∫
;

1013 
xRëu∫
 = 
	`xQueuePìkFromISR
–
pxQueue
, 
pvBuf„r
 );

1014 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1015  
xRëu∫
;

1016 
	}
}

1019 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1020 
QueueH™dÀ_t
 
	$MPU_xQueueCª©eMuãx
( )

1022 
QueueH™dÀ_t
 
xRëu∫
;

1023 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1025 
xRëu∫
 = 
	`xQueueCª©eMuãx
–
queueQUEUE_TYPE_MUTEX
 );

1026 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1027  
xRëu∫
;

1028 
	}
}

1032 #i‡
c⁄figUSE_COUNTING_SEMAPHORES
 == 1

1033 
QueueH™dÀ_t
 
	$MPU_xQueueCª©eCou¡ögSem≠h‹e
–
UBa£Ty≥_t
 
uxCou¡VÆue
, UBa£Ty≥_à
uxInôülCou¡
 )

1035 
QueueH™dÀ_t
 
xRëu∫
;

1036 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1038 
xRëu∫
 = 
	`xQueueCª©eCou¡ögSem≠h‹e
–
uxCou¡VÆue
, 
uxInôülCou¡
 );

1039 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1040  
xRëu∫
;

1041 
	}
}

1045 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1046 
Ba£Ty≥_t
 
	$MPU_xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xBlockTime
 )

1048 
Ba£Ty≥_t
 
xRëu∫
;

1049 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1051 
xRëu∫
 = 
	`xQueueTakeMuãxRecursive
–
xMuãx
, 
xBlockTime
 );

1052 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1053  
xRëu∫
;

1054 
	}
}

1058 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1059 
Ba£Ty≥_t
 
	$MPU_xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
 )

1061 
Ba£Ty≥_t
 
xRëu∫
;

1062 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1064 
xRëu∫
 = 
	`xQueueGiveMuãxRecursive
–
xMuãx
 );

1065 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1066  
xRëu∫
;

1067 
	}
}

1071 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1072 
QueueSëH™dÀ_t
 
	$MPU_xQueueCª©eSë
–
UBa£Ty≥_t
 
uxEvítQueueLígth
 )

1074 
QueueSëH™dÀ_t
 
xRëu∫
;

1075 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1077 
xRëu∫
 = 
	`xQueueCª©eSë
–
uxEvítQueueLígth
 );

1078 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1079  
xRëu∫
;

1080 
	}
}

1084 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1085 
QueueSëMembîH™dÀ_t
 
	$MPU_xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, 
TickTy≥_t
 
xBlockTimeTicks
 )

1087 
QueueSëMembîH™dÀ_t
 
xRëu∫
;

1088 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1090 
xRëu∫
 = 
	`xQueueSñe˘FromSë
–
xQueueSë
, 
xBlockTimeTicks
 );

1091 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1092  
xRëu∫
;

1093 
	}
}

1097 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1098 
Ba£Ty≥_t
 
	$MPU_xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

1100 
Ba£Ty≥_t
 
xRëu∫
;

1101 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1103 
xRëu∫
 = 
	`xQueueAddToSë
–
xQueueOrSem≠h‹e
, 
xQueueSë
 );

1104 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1105  
xRëu∫
;

1106 
	}
}

1110 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1111 
Ba£Ty≥_t
 
	$MPU_xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

1113 
Ba£Ty≥_t
 
xRëu∫
;

1114 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1116 
xRëu∫
 = 
	`xQueueRemoveFromSë
–
xQueueOrSem≠h‹e
, 
xQueueSë
 );

1117 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1118  
xRëu∫
;

1119 
	}
}

1123 #i‡
c⁄figUSE_ALTERNATIVE_API
 == 1

1124 
Ba£Ty≥_t
 
	$MPU_xQueueA…GíîicSíd
–
QueueH™dÀ_t
 
pxQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

1126 
Ba£Ty≥_t
 
xRëu∫
;

1127 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1129 
xRëu∫
 = 
Ba£Ty≥_t
 
	`xQueueA…GíîicSíd
–
pxQueue
, 
pvIãmToQueue
, 
xTicksToWaô
, 
xC›yPosôi⁄
 );

1130 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1131  
xRëu∫
;

1132 
	}
}

1136 #i‡
c⁄figUSE_ALTERNATIVE_API
 == 1

1137 
Ba£Ty≥_t
 
	$MPU_xQueueA…GíîicRe˚ive
–
QueueH™dÀ_t
 
pxQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, 
Ba£Ty≥_t
 
xJu°Pìkög
 )

1139 
Ba£Ty≥_t
 
xRëu∫
;

1140 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1142 
xRëu∫
 = 
	`xQueueA…GíîicRe˚ive
–
pxQueue
, 
pvBuf„r
, 
xTicksToWaô
, 
xJu°Pìkög
 );

1143 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1144  
xRëu∫
;

1145 
	}
}

1149 #i‡
c⁄figQUEUE_REGISTRY_SIZE
 > 0

1150 
	$MPU_vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, *
pcName
 )

1152 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1154 
	`vQueueAddToRegi°ry
–
xQueue
, 
pcName
 );

1156 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1157 
	}
}

1161 
	$MPU_vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 )

1163 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1165 
	`vQueueDñëe
–
xQueue
 );

1167 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1168 
	}
}

1171 *
	$MPU_pvP‹tMÆloc
–
size_t
 
xSize
 )

1173 *
pvRëu∫
;

1174 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1176 
pvRëu∫
 = 
	`pvP‹tMÆloc
–
xSize
 );

1178 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1180  
pvRëu∫
;

1181 
	}
}

1184 
	$MPU_vP‹tFªe
–*
pv
 )

1186 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1188 
	`vP‹tFªe
–
pv
 );

1190 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1191 
	}
}

1194 
	$MPU_vP‹tInôüli£Blocks
( )

1196 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1198 
	`vP‹tInôüli£Blocks
();

1200 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1201 
	}
}

1204 
size_t
 
	$MPU_xP‹tGëFªeHópSize
( )

1206 
size_t
 
xRëu∫
;

1207 
Ba£Ty≥_t
 
xRu¬ögPrivûeged
 = 
	`¥vRai£Privûege
();

1209 
xRëu∫
 = 
	`xP‹tGëFªeHópSize
();

1211 
	`p‹tRESET_PRIVILEGE
–
xRu¬ögPrivûeged
 );

1213  
xRëu∫
;

1214 
	}
}

1231 #i‡
c⁄figINCLUDE_APPLICATION_DEFINED_PRIVILEGED_FUNCTIONS
 == 1

1232 
	~"≠∂iˇti⁄_deföed_¥ivûeged_fun˘i⁄s.h
"

	@portable/GCC/ARM_CM3_MPU/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tUSING_MPU_WRAPPERS
 1

	)

108 
	#p‹tPRIVILEGE_BIT
 ( 0x80000000UL )

	)

110 
	#p‹tMPU_REGION_READ_WRITE
 ( 0x03UL << 24UL )

	)

111 
	#p‹tMPU_REGION_PRIVILEGED_READ_ONLY
 ( 0x05UL << 24UL )

	)

112 
	#p‹tMPU_REGION_READ_ONLY
 ( 0x06UL << 24UL )

	)

113 
	#p‹tMPU_REGION_PRIVILEGED_READ_WRITE
 ( 0x01UL << 24UL )

	)

114 
	#p‹tMPU_REGION_CACHEABLE_BUFFERABLE
 ( 0x07UL << 16UL )

	)

115 
	#p‹tMPU_REGION_EXECUTE_NEVER
 ( 0x01UL << 28UL )

	)

117 
	#p‹tUNPRIVILEGED_FLASH_REGION
 ( 0UL )

	)

118 
	#p‹tPRIVILEGED_FLASH_REGION
 ( 1UL )

	)

119 
	#p‹tPRIVILEGED_RAM_REGION
 ( 2UL )

	)

120 
	#p‹tGENERAL_PERIPHERALS_REGION
 ( 3UL )

	)

121 
	#p‹tSTACK_REGION
 ( 4UL )

	)

122 
	#p‹tFIRST_CONFIGURABLE_REGION
 ( 5UL )

	)

123 
	#p‹tLAST_CONFIGURABLE_REGION
 ( 7UL )

	)

124 
	#p‹tNUM_CONFIGURABLE_REGIONS
 ( ( 
p‹tLAST_CONFIGURABLE_REGION
 - 
p‹tFIRST_CONFIGURABLE_REGION
 ) + 1 )

	)

125 
	#p‹tTOTAL_NUM_REGIONS
 ( 
p‹tNUM_CONFIGURABLE_REGIONS
 + 1 )

	)

127 
	#p‹tSWITCH_TO_USER_MODE
(Ë
__asm
 vﬁ©ûê–" mr†r0, c⁄åﬁ \¿‹∏r0, #1 \¿m§ c⁄åﬁ,Ñ0 " :::"r0" )

	)

129 
	sMPU_REGION_REGISTERS


131 
uöt32_t
 
	gulRegi⁄Ba£Addªss
;

132 
uöt32_t
 
	gulRegi⁄Aâribuã
;

133 } 
	txMPU_REGION_REGISTERS
;

136 
	sMPU_SETTINGS


138 
xMPU_REGION_REGISTERS
 
	gxRegi⁄
[ 
p‹tTOTAL_NUM_REGIONS
 ];

139 } 
	txMPU_SETTINGS
;

142 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

143 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

144 
	#p‹tBYTE_ALIGNMENT
 8

	)

148 
	#p‹tSVC_START_SCHEDULER
 0

	)

149 
	#p‹tSVC_YIELD
 1

	)

150 
	#p‹tSVC_RAISE_PRIVILEGE
 2

	)

154 
	#p‹tYIELD
(Ë
__asm
 vﬁ©ûê–" SVC %0 \n" :: "i" (
p‹tSVC_YIELD
Ë)

	)

155 
	#p‹tYIELD_WITHIN_API
(Ë*(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET


	)

157 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000ed04 )

	)

158 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

159 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET


	)

160 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

170 
	#p‹tSET_INTERRUPT_MASK
(Ë\

	)

171 
__asm
 volatile \

175 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
):"r0" \

183 
	#p‹tCLEAR_INTERRUPT_MASK
(Ë\

	)

184 
__asm
 volatile \

193 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë0;
	`p‹tSET_INTERRUPT_MASK
()

	)

194 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`p‹tCLEAR_INTERRUPT_MASK
();()
	)
x

197 
vP‹tE¡îCrôiˇl
( );

198 
vP‹tExôCrôiˇl
( );

200 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`p‹tSET_INTERRUPT_MASK
()

	)

201 
	#p‹tENABLE_INTERRUPTS
(Ë
	`p‹tCLEAR_INTERRUPT_MASK
()

	)

202 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

203 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

207 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

208 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

210 
	#p‹tNOP
()

	)

213 #ifde‡
__˝lu•lus


	@portable/GCC/ARM_CM4F/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

74 #i‚de‡
__VFP_FP__


75 #îr‹ 
This
 
p‹t
 
ˇn
 
⁄ly
 
be
 
u£d
 
whí
 
the
 
¥oje˘
 
›ti⁄s
 
¨e
 
c⁄figuªd
 
to
 
íabÀ
 
h¨dw¨e
 
Êﬂtög
 
poöt
 
suµ‹t
.

78 #i‚de‡
c⁄figSYSTICK_CLOCK_HZ


79 
	#c⁄figSYSTICK_CLOCK_HZ
 
c⁄figCPU_CLOCK_HZ


	)

81 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 1UL << 2UL )

	)

85 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 0 )

	)

89 
	#p‹tNVIC_SYSTICK_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 ) )

	)

90 
	#p‹tNVIC_SYSTICK_LOAD_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 ) )

	)

91 
	#p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e018 ) )

	)

92 
	#p‹tNVIC_SYSPRI2_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 ) )

	)

94 
	#p‹tNVIC_SYSTICK_INT_BIT
 ( 1UL << 1UL )

	)

95 
	#p‹tNVIC_SYSTICK_ENABLE_BIT
 ( 1UL << 0UL )

	)

96 
	#p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ( 1UL << 16UL )

	)

97 
	#p‹tNVIC_PENDSVCLEAR_BIT
 ( 1UL << 27UL )

	)

98 
	#p‹tNVIC_PEND_SYSTICK_CLEAR_BIT
 ( 1UL << 25UL )

	)

100 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

101 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

104 
	#p‹tFIRST_USER_INTERRUPT_NUMBER
 ( 16 )

	)

105 
	#p‹tNVIC_IP_REGISTERS_OFFSET_16
 ( 0xE000E3F0 )

	)

106 
	#p‹tAIRCR_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xE000ED0C ) )

	)

107 
	#p‹tMAX_8_BIT_VALUE
 ( ( 
uöt8_t
 ) 0xf‡)

	)

108 
	#p‹tTOP_BIT_OF_BYTE
 ( ( 
uöt8_t
 ) 0x80 )

	)

109 
	#p‹tMAX_PRIGROUP_BITS
 ( ( 
uöt8_t
 ) 7 )

	)

110 
	#p‹tPRIORITY_GROUP_MASK
 ( 0x07UL << 8UL )

	)

111 
	#p‹tPRIGROUP_SHIFT
 ( 8UL )

	)

114 
	#p‹tFPCCR
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ef34 )

	)

115 
	#p‹tASPEN_AND_LSPEN_BITS
 ( 0x3UL << 30UL )

	)

118 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

119 
	#p‹tINITIAL_EXEC_RETURN
 ( 0xfffffffd )

	)

122 
	#p‹tMAX_24_BIT_NUMBER
 ( 0xffffffUL )

	)

127 
	#p‹tMISSED_COUNTS_FACTOR
 ( 45UL )

	)

132 #ifde‡
c⁄figTASK_RETURN_ADDRESS


133 
	#p‹tTASK_RETURN_ADDRESS
 
c⁄figTASK_RETURN_ADDRESS


	)

135 
	#p‹tTASK_RETURN_ADDRESS
 
¥vTaskExôEº‹


	)

140 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

147 
vP‹tSëupTimîI¡îru±
( );

152 
	$xP‹tPídSVH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

153 
	`xP‹tSysTickH™dÀr
( );

154 
	$vP‹tSVCH™dÀr
–Ë
	`__©åibuã__
 (–
«ked
 ));

159 
	$¥vP‹tSèπFú°Task
–Ë
	`__©åibuã__
 (–
«ked
 ));

164 
	$vP‹tE«bÀVFP
–Ë
	`__©åibuã__
 (–
«ked
 ));

169 
	`¥vTaskExôEº‹
( );

176 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

177 
uöt32_t
 
ulTimîCou¡sF‹O√Tick
 = 0;

184 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

185 
uöt32_t
 
xMaximumPossibÀSuµªs£dTicks
 = 0;

192 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

193 
uöt32_t
 
ulSt›≥dTimîCom≥nßti⁄
 = 0;

201 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

202 
uöt8_t
 
ucMaxSysCÆlPri‹ôy
 = 0;

203 
uöt32_t
 
ulMaxPRIGROUPVÆue
 = 0;

204 c⁄° vﬁ©ûê
uöt8_t
 * c⁄° 
pcI¡îru±Pri‹ôyRegi°îs
 = ( c⁄° vﬁ©ûêuöt8_à* c⁄° ) 
p‹tNVIC_IP_REGISTERS_OFFSET_16
;

212 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

219 
pxT›OfSèck
--;

221 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

222 
pxT›OfSèck
--;

223 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

224 
pxT›OfSèck
--;

225 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tTASK_RETURN_ADDRESS
;

228 
pxT›OfSèck
 -= 5;

229 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

233 
pxT›OfSèck
--;

234 *
pxT›OfSèck
 = 
p‹tINITIAL_EXEC_RETURN
;

236 
pxT›OfSèck
 -= 8;

238  
pxT›OfSèck
;

239 
	}
}

242 
	$¥vTaskExôEº‹
( )

250 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

251 
	`p‹tDISABLE_INTERRUPTS
();

253 
	}
}

256 
	$vP‹tSVCH™dÀr
( )

258 
__asm
 volatile (

272 
	}
}

275 
	$¥vP‹tSèπFú°Task
( )

277 
__asm
 volatile(

288 
	}
}

294 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

298 
	`c⁄figASSERT
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

300 #if–
c⁄figASSERT_DEFINED
 == 1 )

302 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

303 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( vﬁ©ûêuöt8_à* c⁄° ) ( 
p‹tNVIC_IP_REGISTERS_OFFSET_16
 + 
p‹tFIRST_USER_INTERRUPT_NUMBER
 );

304 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

312 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

316 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

319 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

322 
ucMaxSysCÆlPri‹ôy
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 & 
ucMaxPri‹ôyVÆue
;

326 
ulMaxPRIGROUPVÆue
 = 
p‹tMAX_PRIGROUP_BITS
;

327  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tTOP_BIT_OF_BYTE
 ) ==ÖortTOP_BIT_OF_BYTE )

329 
ulMaxPRIGROUPVÆue
--;

330 
ucMaxPri‹ôyVÆue
 <<–
uöt8_t
 ) 0x01;

335 
ulMaxPRIGROUPVÆue
 <<
p‹tPRIGROUP_SHIFT
;

336 
ulMaxPRIGROUPVÆue
 &
p‹tPRIORITY_GROUP_MASK
;

340 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

345 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_PENDSV_PRI
;

346 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_SYSTICK_PRI
;

350 
	`vP‹tSëupTimîI¡îru±
();

353 
uxCrôiˇlNe°ög
 = 0;

356 
	`vP‹tE«bÀVFP
();

359 *–
p‹tFPCCR
 ) |
p‹tASPEN_AND_LSPEN_BITS
;

362 
	`¥vP‹tSèπFú°Task
();

368 
	`¥vTaskExôEº‹
();

372 
	}
}

375 
	$vP‹tEndScheduÀr
( )

379 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

380 
	}
}

383 
	$vP‹tYõld
( )

386 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

390 
__asm
 volatile( "dsb" );

391 
__asm
 volatile( "isb" );

392 
	}
}

395 
	$vP‹tE¡îCrôiˇl
( )

397 
	`p‹tDISABLE_INTERRUPTS
();

398 
uxCrôiˇlNe°ög
++;

399 
__asm
 volatile( "dsb" );

400 
__asm
 volatile( "isb" );

401 
	}
}

404 
	$vP‹tExôCrôiˇl
( )

406 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

407 
uxCrôiˇlNe°ög
--;

408 if–
uxCrôiˇlNe°ög
 == 0 )

410 
	`p‹tENABLE_INTERRUPTS
();

412 
	}
}

415 
__©åibuã__
(–
«ked
 )Ë
uöt32_t
 
	$ulP‹tSëI¡îru±Mask
( )

417 
__asm
 volatile \

423 :: "i" ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) : "r0", "r1" \

429 
	}
}

432 
__©åibuã__
(–
«ked
 )Ë
	$vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 )

434 
__asm
 volatile \

442 –Ë
ulNewMaskVÆue
;

443 
	}
}

446 
	$xP‹tPídSVH™dÀr
( )

450 
__asm
 volatile

486 #ifde‡
WORKAROUND_PMU_CM001


487 #i‡
WORKAROUND_PMU_CM001
 == 1

497 ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
)

499 
	}
}

502 
	$xP‹tSysTickH™dÀr
( )

508 –Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

511 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

515 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

518 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
( 0 );

519 
	}
}

522 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

524 
__©åibuã__
((
wók
)Ë
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

526 
uöt32_t
 
ulRñﬂdVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCom∂ëedSysTickDe¸emíts
, 
ulSysTickCTRL
;

527 
TickTy≥_t
 
xModifübÀIdÀTime
;

530 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

532 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

539 
p‹tNVIC_SYSTICK_CTRL_REG
 &~
p‹tNVIC_SYSTICK_ENABLE_BIT
;

544 
ulRñﬂdVÆue
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 + ( 
ulTimîCou¡sF‹O√Tick
 * ( 
xEx≥˘edIdÀTime
 - 1UL ) );

545 if–
ulRñﬂdVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

547 
ulRñﬂdVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

552 
__asm
 volatile( "cpsid i" );

556 if–
	`eTaskC⁄fúmSÀïModeSètus
(Ë=
eAb‹tSÀï
 )

560 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

563 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

567 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

571 
__asm
 volatile( "cpsie i" );

576 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulRñﬂdVÆue
;

580 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

583 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

590 
xModifübÀIdÀTime
 = 
xEx≥˘edIdÀTime
;

591 
	`c⁄figPRE_SLEEP_PROCESSING
–
xModifübÀIdÀTime
 );

592 if–
xModifübÀIdÀTime
 > 0 )

594 
__asm
 volatile( "dsb" );

595 
__asm
 volatile( "wfi" );

596 
__asm
 volatile( "isb" );

598 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

604 
ulSysTickCTRL
 = 
p‹tNVIC_SYSTICK_CTRL_REG
;

605 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
ulSysTickCTRL
 & ~
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

609 
__asm
 volatile( "cpsie i" );

611 if––
ulSysTickCTRL
 & 
p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ) != 0 )

613 
uöt32_t
 
ulCÆcuœãdLﬂdVÆue
;

619 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL ) - ( 
ulRñﬂdVÆue
 - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 );

624 if––
ulCÆcuœãdLﬂdVÆue
 < 
ulSt›≥dTimîCom≥nßti⁄
 ) || ( ulCÆcuœãdLﬂdVÆuê> 
ulTimîCou¡sF‹O√Tick
 ) )

626 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL );

629 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulCÆcuœãdLﬂdVÆue
;

636 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

644 
ulCom∂ëedSysTickDe¸emíts
 = ( 
xEx≥˘edIdÀTime
 * 
ulTimîCou¡sF‹O√Tick
 ) - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

648 
ulCom∂ëeTickPîiods
 = 
ulCom∂ëedSysTickDe¸emíts
 / 
ulTimîCou¡sF‹O√Tick
;

652 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( ( 
ulCom∂ëeTickPîiods
 + 1 ) * 
ulTimîCou¡sF‹O√Tick
 ) - 
ulCom∂ëedSysTickDe¸emíts
;

660 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

661 
	`p‹tENTER_CRITICAL
();

663 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

664 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

665 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

667 
	`p‹tEXIT_CRITICAL
();

669 
	}
}

678 
__©åibuã__
(–
wók
 )Ë
	$vP‹tSëupTimîI¡îru±
( )

681 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

683 
ulTimîCou¡sF‹O√Tick
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

684 
xMaximumPossibÀSuµªs£dTicks
 = 
p‹tMAX_24_BIT_NUMBER
 / 
ulTimîCou¡sF‹O√Tick
;

685 
ulSt›≥dTimîCom≥nßti⁄
 = 
p‹tMISSED_COUNTS_FACTOR
 / ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figSYSTICK_CLOCK_HZ
 );

690 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

691 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 | 
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

692 
	}
}

696 
	$vP‹tE«bÀVFP
( )

698 
__asm
 volatile

707 
	}
}

710 #if–
c⁄figASSERT_DEFINED
 == 1 )

712 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

714 
uöt32_t
 
ulCuºítI¡îru±
;

715 
uöt8_t
 
ucCuºítPri‹ôy
;

718 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) );

721 if–
ulCuºítI¡îru±
 >
p‹tFIRST_USER_INTERRUPT_NUMBER
 )

724 
ucCuºítPri‹ôy
 = 
pcI¡îru±Pri‹ôyRegi°îs
[ 
ulCuºítI¡îru±
 ];

749 
	`c⁄figASSERT
–
ucCuºítPri‹ôy
 >
ucMaxSysCÆlPri‹ôy
 );

765 
	`c⁄figASSERT
––
p‹tAIRCR_REG
 & 
p‹tPRIORITY_GROUP_MASK
 ) <
ulMaxPRIGROUPVÆue
 );

766 
	}
}

	@portable/GCC/ARM_CM4F/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

114 
vP‹tYõld
( );

115 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

116 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

117 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

118 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT


	)

119 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

123 
vP‹tE¡îCrôiˇl
( );

124 
vP‹tExôCrôiˇl
( );

125 
uöt32_t
 
ulP‹tSëI¡îru±Mask
( );

126 
vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 );

127 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

128 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
(x)

	)

129 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

130 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
(0)

	)

131 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

132 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

139 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

140 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

144 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


145 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

146 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

151 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

154 
__©åibuã__
––
Æways_ölöe
 ) ) 
ölöe
 
uöt8_t
 
ucP‹tCou¡LódögZîos
–
uöt32_t
 
ulBôm≠
 )

156 
uöt8_t
 
	gucRëu∫
;

158 
__asm
 vﬁ©ûê–"˛z %0, %1" : "Ù" ( 
ucRëu∫
 ) : "r" ( 
ulBôm≠
 ) );

159  
	gucRëu∫
;

163 #if–
c⁄figMAX_PRIORITIES
 > 32 )

164 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

168 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

169 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

173 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`ucP‹tCou¡LódögZîos
––uxRódyPri‹ôõ†ËË)

	)

179 #ifde‡
c⁄figASSERT


180 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

181 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

185 
	#p‹tNOP
()

	)

187 #ifde‡
__˝lu•lus


	@portable/GCC/ATMega323/port.c

75 
	~<°dlib.h
>

76 
	~<avr/öãºu±.h
>

78 
	~"FªeRTOS.h
"

79 
	~"èsk.h
"

86 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
SèckTy≥_t
 ) 0x80 )

	)

89 
	#p‹tCLEAR_COUNTER_ON_MATCH
 ( ( 
uöt8_t
 ) 0x08 )

	)

90 
	#p‹tPRESCALE_64
 ( ( 
uöt8_t
 ) 0x03 )

	)

91 
	#p‹tCLOCK_PRESCALER
 ( ( 
uöt32_t
 ) 64 )

	)

92 
	#p‹tCOMPARE_MATCH_A_INTERRUPT_ENABLE
 ( ( 
uöt8_t
 ) 0x10 )

	)

98 
	tTCB_t
;

99 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

119 
	#p‹tSAVE_CONTEXT
(Ë\

	)

120 
asm
 volatile ( "pushÑ0 \n\t" \

169 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

170 
asm
 volatile ( "ldsÑ26,ÖxCurrentTCB \n\t" \

217 
¥vSëupTimîI¡îru±
( );

223 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

225 
uöt16_t
 
usAddªss
;

230 *
pxT›OfSèck
 = 0x11;

231 
pxT›OfSèck
--;

232 *
pxT›OfSèck
 = 0x22;

233 
pxT›OfSèck
--;

234 *
pxT›OfSèck
 = 0x33;

235 
pxT›OfSèck
--;

244 
usAddªss
 = ( 
uöt16_t
 ) 
pxCode
;

245 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
usAddªss
 & ( 
uöt16_t
 ) 0x00ff );

246 
pxT›OfSèck
--;

248 
usAddªss
 >>= 8;

249 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
usAddªss
 & ( 
uöt16_t
 ) 0x00ff );

250 
pxT›OfSèck
--;

256 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

257 
pxT›OfSèck
--;

258 *
pxT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

259 
pxT›OfSèck
--;

263 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

264 
pxT›OfSèck
--;

265 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02;

266 
pxT›OfSèck
--;

267 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03;

268 
pxT›OfSèck
--;

269 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04;

270 
pxT›OfSèck
--;

271 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05;

272 
pxT›OfSèck
--;

273 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06;

274 
pxT›OfSèck
--;

275 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07;

276 
pxT›OfSèck
--;

277 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08;

278 
pxT›OfSèck
--;

279 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09;

280 
pxT›OfSèck
--;

281 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10;

282 
pxT›OfSèck
--;

283 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11;

284 
pxT›OfSèck
--;

285 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12;

286 
pxT›OfSèck
--;

287 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x13;

288 
pxT›OfSèck
--;

289 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x14;

290 
pxT›OfSèck
--;

291 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x15;

292 
pxT›OfSèck
--;

293 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x16;

294 
pxT›OfSèck
--;

295 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x17;

296 
pxT›OfSèck
--;

297 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x18;

298 
pxT›OfSèck
--;

299 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x19;

300 
pxT›OfSèck
--;

301 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x20;

302 
pxT›OfSèck
--;

303 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x21;

304 
pxT›OfSèck
--;

305 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x22;

306 
pxT›OfSèck
--;

307 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x23;

308 
pxT›OfSèck
--;

311 
usAddªss
 = ( 
uöt16_t
 ) 
pvP¨amëîs
;

312 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
usAddªss
 & ( 
uöt16_t
 ) 0x00ff );

313 
pxT›OfSèck
--;

315 
usAddªss
 >>= 8;

316 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
usAddªss
 & ( 
uöt16_t
 ) 0x00ff );

317 
pxT›OfSèck
--;

319 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x26;

320 
pxT›OfSèck
--;

321 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x27;

322 
pxT›OfSèck
--;

323 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x28;

324 
pxT›OfSèck
--;

325 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x29;

326 
pxT›OfSèck
--;

327 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x30;

328 
pxT›OfSèck
--;

329 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x031;

330 
pxT›OfSèck
--;

334  
pxT›OfSèck
;

335 
	}
}

338 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

341 
	`¥vSëupTimîI¡îru±
();

344 
	`p‹tRESTORE_CONTEXT
();

348 
asm
 volatile ( "ret" );

351  
pdTRUE
;

352 
	}
}

355 
	$vP‹tEndScheduÀr
( )

359 
	}
}

366 
	$vP‹tYõld
–Ë
	`__©åibuã__
 ( ( 
«ked
 ) );

367 
	$vP‹tYõld
( )

369 
	`p‹tSAVE_CONTEXT
();

370 
	`vTaskSwôchC⁄ãxt
();

371 
	`p‹tRESTORE_CONTEXT
();

373 
asm
 volatile ( "ret" );

374 
	}
}

383 
	$vP‹tYõldFromTick
–Ë
	`__©åibuã__
 ( ( 
«ked
 ) );

384 
	$vP‹tYõldFromTick
( )

386 
	`p‹tSAVE_CONTEXT
();

387 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

389 
	`vTaskSwôchC⁄ãxt
();

391 
	`p‹tRESTORE_CONTEXT
();

393 
asm
 volatile ( "ret" );

394 
	}
}

400 
	$¥vSëupTimîI¡îru±
( )

402 
uöt32_t
 
ulCom∑ªM©ch
;

403 
uöt8_t
 
ucHighByã
, 
ucLowByã
;

408 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

411 
ulCom∑ªM©ch
 /
p‹tCLOCK_PRESCALER
;

414 
ulCom∑ªM©ch
 -–
uöt32_t
 ) 1;

418 
ucLowByã
 = ( 
uöt8_t
 ) ( 
ulCom∑ªM©ch
 & ( 
uöt32_t
 ) 0xff );

419 
ulCom∑ªM©ch
 >>= 8;

420 
ucHighByã
 = ( 
uöt8_t
 ) ( 
ulCom∑ªM©ch
 & ( 
uöt32_t
 ) 0xff );

421 
OCR1AH
 = 
ucHighByã
;

422 
OCR1AL
 = 
ucLowByã
;

425 
ucLowByã
 = 
p‹tCLEAR_COUNTER_ON_MATCH
 | 
p‹tPRESCALE_64
;

426 
TCCR1B
 = 
ucLowByã
;

430 
ucLowByã
 = 
TIMSK
;

431 
ucLowByã
 |
p‹tCOMPARE_MATCH_A_INTERRUPT_ENABLE
;

432 
TIMSK
 = 
ucLowByã
;

433 
	}
}

436 #i‡
c⁄figUSE_PREEMPTION
 == 1

443 
	$SIG_OUTPUT_COMPARE1A
–Ë
	`__©åibuã__
 ( ( 
sig«l
, 
«ked
 ) );

444 
	$SIG_OUTPUT_COMPARE1A
( )

446 
	`vP‹tYõldFromTick
();

447 
asm
 volatile ( "reti" );

448 
	}
}

456 
	$SIG_OUTPUT_COMPARE1A
–Ë
	`__©åibuã__
 ( ( 
sig«l
 ) );

457 
	$SIG_OUTPUT_COMPARE1A
( )

459 
	`xTaskIn¸emítTick
();

460 
	}
}

	@portable/GCC/ATMega323/portmacro.h

73 #i‚de‡
PORTMACRO_H


74 
	#PORTMACRO_H


	)

76 #ifde‡
__˝lu•lus


91 
	#p‹tCHAR
 

	)

92 
	#p‹tFLOAT
 

	)

93 
	#p‹tDOUBLE
 

	)

94 
	#p‹tLONG
 

	)

95 
	#p‹tSHORT
 

	)

96 
	#p‹tSTACK_TYPE
 
uöt8_t


	)

97 
	#p‹tBASE_TYPE
 

	)

99 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

100 sig√d 
	tBa£Ty≥_t
;

101 
	tUBa£Ty≥_t
;

103 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

104 
uöt16_t
 
	tTickTy≥_t
;

105 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

107 
uöt32_t
 
	tTickTy≥_t
;

108 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

113 
	#p‹tENTER_CRITICAL
(Ë
asm
 vﬁ©ûê–"ö __tmp_ªg__, __SREG__" :: ); \

	)

114 
asm
 volatile ( "cli" :: ); \

115 
asm
 volatile ( "push __tmp_reg__" :: )

117 
	#p‹tEXIT_CRITICAL
(Ë
asm
 vﬁ©ûê–"p› __tmp_ªg__" :: ); \

	)

118 
asm
 volatile ( "out __SREG__, __tmp_reg__" :: )

120 
	#p‹tDISABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûê–"˛i" :: );

	)

121 
	#p‹tENABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûê–"£i" :: );

	)

125 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

126 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

127 
	#p‹tBYTE_ALIGNMENT
 1

	)

128 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"n›" );

	)

132 
vP‹tYõld
–Ë
__©åibuã__
 ( ( 
«ked
 ) );

133 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

137 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

138 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

140 #ifde‡
__˝lu•lus


	@portable/GCC/AVR32_UC3/port.c

82 
	~<sys/˝u.h
>

83 
	~<sys/ußπ.h
>

84 
	~<mÆloc.h
>

87 
	~"FªeRTOS.h
"

88 
	~"èsk.h
"

91 
	~<avr32/io.h
>

92 
	~"gpio.h
"

93 #if–
c⁄figTICK_USE_TC
==1 )

94 
	~"tc.h
"

99 
	#p‹tINITIAL_SR
 ( ( 
SèckTy≥_t
 ) 0x00400000 )

	)

100 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 0 )

	)

103 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

104 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

106 #if–
c⁄figTICK_USE_TC
==0 )

107 
¥vScheduÀNextTick
( );

109 
¥vCÀ¨TcI¡
( );

113 
¥vSëupTimîI¡îru±
( );

125 
	$_öô_°¨tup
()

128 
_evba
;

130 #i‡
c⁄figHEAP_INIT


131 
__hóp_°¨t__
;

132 
__hóp_íd__
;

133 
Ba£Ty≥_t
 *
pxMem
;

137 
	`Së_sy°em_ªgi°î
–
AVR32_EVBA
, ( Ë&
_evba
 );

140 
	`ENABLE_ALL_EXCEPTIONS
();

143 
	`INTC_öô_öãºu±s
();

145 #i‡
c⁄figHEAP_INIT


148  
pxMem
 = &
__hóp_°¨t__
;ÖxMem < ( 
Ba£Ty≥_t
 * )&
__hóp_íd__
; )

150 *
pxMem
++ = 0xA5A5A5A5;

156 
	`£t_˝u_hz
–
c⁄figCPU_CLOCK_HZ
 );

159 #i‡
c⁄figDBG


161 c⁄° 
gpio_m≠_t
 
DBG_USART_GPIO_MAP
 =

163 { 
c⁄figDBG_USART_RX_PIN
, 
c⁄figDBG_USART_RX_FUNCTION
 },

164 { 
c⁄figDBG_USART_TX_PIN
, 
c⁄figDBG_USART_TX_FUNCTION
 }

168 
	`£t_ußπ_ba£
––* ) 
c⁄figDBG_USART
 );

169 
	`gpio_íabÀ_moduÀ
–
DBG_USART_GPIO_MAP
,

170 –
DBG_USART_GPIO_MAP
 ) / ( DBG_USART_GPIO_MAP[0] ) );

171 
	`ußπ_öô
–
c⁄figDBG_USART_BAUDRATE
 );

174 
	}
}

196 
	$__mÆloc_lock
(
_ªít
 *
±r
)

198 
	`vTaskSu•ídAŒ
();

199 
	}
}

206 
	$__mÆloc_u∆ock
(
_ªít
 *
±r
)

208 
	`xTaskResumeAŒ
();

209 
	}
}

213 *
	$pvP‹tRóŒoc
–*
pv
, 
size_t
 
xW™ãdSize
 )

215 *
pvRëu∫
;

217 
	`vTaskSu•ídAŒ
();

219 
pvRëu∫
 = 
	`ªÆloc
–
pv
, 
xW™ãdSize
 );

221 
	`xTaskResumeAŒ
();

223  
pvRëu∫
;

224 
	}
}

231 
__©åibuã__
((
__«ked__
)Ë
	$vTick
( )

234 
	`p‹tSAVE_CONTEXT_OS_INT
();

236 #if–
c⁄figTICK_USE_TC
==1 )

238 
	`¥vCÀ¨TcI¡
();

242 
	`¥vScheduÀNextTick
();

247 
	`p‹tENTER_CRITICAL
();

248 
	`xTaskIn¸emítTick
();

249 
	`p‹tEXIT_CRITICAL
();

252 
	`p‹tRESTORE_CONTEXT_OS_INT
();

253 
	}
}

256 
__©åibuã__
((
__«ked__
)Ë
	$SCALLYõld
( )

259 
	`p‹tSAVE_CONTEXT_SCALL
();

260 
	`vTaskSwôchC⁄ãxt
();

261 
	`p‹tRESTORE_CONTEXT_SCALL
();

262 
	}
}

269 
__©åibuã__
((
__noölöe__
)Ë
	$vP‹tE¡îCrôiˇl
( )

272 
	`p‹tDISABLE_INTERRUPTS
();

277 
ulCrôiˇlNe°ög
++;

278 
	}
}

281 
__©åibuã__
((
__noölöe__
)Ë
	$vP‹tExôCrôiˇl
( )

283 if(
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
)

285 
ulCrôiˇlNe°ög
--;

286 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

289 
	`p‹tENABLE_INTERRUPTS
();

292 
	}
}

301 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

307 
pxT›OfSèck
--;

308 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x08080808;

309 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x09090909;

310 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x0A0A0A0A;

311 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x0B0B0B0B;

312 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

313 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0xDEADBEEF;

314 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

315 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SR
;

316 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0xFF0000FF;

317 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x01010101;

318 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x02020202;

319 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x03030303;

320 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x04040404;

321 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x05050505;

322 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x06060606;

323 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x07070707;

324 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tNO_CRITICAL_NESTING
;

326  
pxT›OfSèck
;

327 
	}
}

330 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

334 
	`¥vSëupTimîI¡îru±
();

337 
	`p‹tRESTORE_CONTEXT
();

341 
	}
}

344 
	$vP‹tEndScheduÀr
( )

348 
	}
}

353 #if–
c⁄figTICK_USE_TC
==0 )

354 
	$¥vScheduÀFú°Tick
()

356 
uöt32_t
 
lCy˛es
;

358 
lCy˛es
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COUNT
);

359 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

362 if(0 =
lCy˛es
)

364 
lCy˛es
++;

366 
	`Së_sy°em_ªgi°î
(
AVR32_COMPARE
, 
lCy˛es
);

367 
	}
}

369 
__©åibuã__
((
__noölöe__
)Ë
	$¥vScheduÀNextTick
()

371 
uöt32_t
 
lCy˛es
, 
lCou¡
;

373 
lCy˛es
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COMPARE
);

374 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

377 if(0 =
lCy˛es
)

379 
lCy˛es
++;

381 
lCou¡
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COUNT
);

382 if–
lCy˛es
 < 
lCou¡
 )

384 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

386 
	`Së_sy°em_ªgi°î
(
AVR32_COMPARE
, 
lCy˛es
);

387 
	}
}

389 
__©åibuã__
((
__noölöe__
)Ë
	$¥vCÀ¨TcI¡
()

391 
AVR32_TC
.
ch™√l
[
c⁄figTICK_TC_CHANNEL
].
§
;

392 
	}
}

397 
	$¥vSëupTimîI¡îru±
()

399 #if–
c⁄figTICK_USE_TC
==1 )

401 vﬁ©ûê
avr32_tc_t
 *
tc
 = &
AVR32_TC
;

404 
tc_wavef‹m_›t_t
 
wavef‹m_›t
 =

406 .
ch™√l
 = 
c⁄figTICK_TC_CHANNEL
,

408 .
bswåg
 = 
TC_EVT_EFFECT_NOOP
,

409 .
bìvt
 = 
TC_EVT_EFFECT_NOOP
,

410 .
b˝c
 = 
TC_EVT_EFFECT_NOOP
,

411 .
b˝b
 = 
TC_EVT_EFFECT_NOOP
,

413 .
aswåg
 = 
TC_EVT_EFFECT_NOOP
,

414 .
´evt
 = 
TC_EVT_EFFECT_NOOP
,

415 .
a˝c
 = 
TC_EVT_EFFECT_NOOP
,

416 .
a˝a
 = 
TC_EVT_EFFECT_NOOP
,

418 .
wav£l
 = 
TC_WAVEFORM_SEL_UP_MODE_RC_TRIGGER
,

419 .
íërg
 = 
FALSE
,

420 .
ìvt
 = 0,

421 .
ìvãdg
 = 
TC_SEL_NO_EDGE
,

422 .
˝cdis
 = 
FALSE
,

423 .
˝c°›
 = 
FALSE
,

425 .
bur°
 = 
FALSE
,

426 .
˛ki
 = 
FALSE
,

427 .
tc˛ks
 = 
TC_CLOCK_SOURCE_TC2


430 
tc_öãºu±_t
 
tc_öãºu±
 =

432 .
ërgs
=0,

433 .
ldrbs
=0,

434 .
ldøs
=0,

435 .
˝cs
 =1,

436 .
˝bs
 =0,

437 .
˝as
 =0,

438 .
lovrs
=0,

439 .
covfs
=0,

445 
	`p‹tDISABLE_INTERRUPTS
();

450 #if–
c⁄figTICK_USE_TC
==1 )

452 
	`INTC_ªgi°î_öãºu±
(&
vTick
, 
c⁄figTICK_TC_IRQ
, 
INT0
);

455 
	`tc_öô_wavef‹m
(
tc
, &
wavef‹m_›t
);

460 
	`tc_wrôe_rc
–
tc
, 
c⁄figTICK_TC_CHANNEL
, ( 
c⁄figPBA_CLOCK_HZ
 / 4Ë/ 
c⁄figTICK_RATE_HZ
 );

462 
	`tc_c⁄figuª_öãºu±s
–
tc
, 
c⁄figTICK_TC_CHANNEL
, &
tc_öãºu±
 );

465 
	`tc_°¨t
(
tc
, 
c⁄figTICK_TC_CHANNEL
);

469 
	`INTC_ªgi°î_öãºu±
(&
vTick
, 
AVR32_CORE_COMPARE_IRQ
, 
INT0
);

470 
	`¥vScheduÀFú°Tick
();

473 
	}
}

	@portable/GCC/AVR32_UC3/portmacro.h

81 #i‚de‡
PORTMACRO_H


82 
	#PORTMACRO_H


	)

93 
	~<avr32/io.h
>

94 
	~"ötc.h
"

95 
	~"compûî.h
"

97 #ifde‡
__˝lu•lus


103 
	#p‹tCHAR
 

	)

104 
	#p‹tFLOAT
 

	)

105 
	#p‹tDOUBLE
 

	)

106 
	#p‹tLONG
 

	)

107 
	#p‹tSHORT
 

	)

108 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

109 
	#p‹tBASE_TYPE
 

	)

111 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

112 
	tBa£Ty≥_t
;

113 
	tUBa£Ty≥_t
;

115 
	#TASK_DELAY_MS
(
x
Ë–(xË/
p‹tTICK_PERIOD_MS
 )

	)

116 
	#TASK_DELAY_S
(
x
Ë–(x)*1000 /
p‹tTICK_PERIOD_MS
 )

	)

117 
	#TASK_DELAY_MIN
(
x
Ë–(x)*60*1000/
p‹tTICK_PERIOD_MS
 )

	)

119 
	#c⁄figTICK_TC_IRQ
 
	`ATPASTE2
(
AVR32_TC_IRQ
, 
c⁄figTICK_TC_CHANNEL
)

	)

121 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

122 
uöt16_t
 
	tTickTy≥_t
;

123 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

125 
uöt32_t
 
	tTickTy≥_t
;

126 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

131 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

132 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

133 
	#p‹tBYTE_ALIGNMENT
 4

	)

134 
	#p‹tNOP
(Ë{
__asm__
 
	`__vﬁ©ûe__
 ("n›");}

	)

141 
	#DISABLE_ALL_EXCEPTIONS
(Ë
	`DißbÀ_globÆ_ex˚±i⁄
()

	)

142 
	#ENABLE_ALL_EXCEPTIONS
(Ë
	`E«bÀ_globÆ_ex˚±i⁄
()

	)

144 
	#DISABLE_ALL_INTERRUPTS
(Ë
	`DißbÀ_globÆ_öãºu±
()

	)

145 
	#ENABLE_ALL_INTERRUPTS
(Ë
	`E«bÀ_globÆ_öãºu±
()

	)

147 
	#DISABLE_INT_LEVEL
(
öt_Àv
Ë
	`DißbÀ_öãºu±_Àvñ
(öt_Àv)

	)

148 
	#ENABLE_INT_LEVEL
(
öt_Àv
Ë
	`E«bÀ_öãºu±_Àvñ
(öt_Àv)

	)

164 #i‡
c⁄figDBG


165 
	#p‹tDBG_TRACE
(...Ë\

	)

167 
Âuts
(
__FILE__
 ":" 
ASTRINGZ
(
__LINE__
Ë": ", 
°dout
);\

168 
¥ötf
(
__VA_ARGS__
);\

169 
Âuts
("\r\n", 
°dout
);\

172 
	#p‹tDBG_TRACE
(...)

	)

177 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`DISABLE_ALL_INTERRUPTS
()

	)

178 
	#p‹tENABLE_INTERRUPTS
(Ë
	`ENABLE_ALL_INTERRUPTS
()

	)

181 
vP‹tE¡îCrôiˇl
( );

182 
vP‹tExôCrôiˇl
( );

184 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

185 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

189 *
pvP‹tRóŒoc
–*
pv
, 
size_t
 
xSize
 );

198 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

200 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

201 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

203 
__asm__
 
__vﬁ©ûe__
 ( \

231 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting), \

232 [
pxCuºítTCB
] "i" (&pxCurrentTCB), \

233 [
SR
] "i" (
AVR32_SR
) \

270 #i‡
c⁄figUSE_PREEMPTION
 == 0

275 
	#p‹tSAVE_CONTEXT_OS_INT
(Ë\

	)

278 
__asm__
 
__vﬁ©ûe__
 ("stm --sp,Ñ0-r7"); \

287 
	#p‹tRESTORE_CONTEXT_OS_INT
(Ë\

	)

289 
__asm__
 
__vﬁ©ûe__
 ( \

304 
	#p‹tSAVE_CONTEXT_OS_INT
(Ë\

	)

306 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

307 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

312 
__asm__
 
__vﬁ©ûe__
 ( \

347 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting), \

348 [
pxCuºítTCB
] "i" (&pxCurrentTCB), \

349 [
LINE
] "i" (
__LINE__
) \

356 
	#p‹tRESTORE_CONTEXT_OS_INT
(Ë\

	)

358 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

359 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

368 
__asm__
 
__vﬁ©ûe__
 ( \

374 : [
LINE
] "i" (
__LINE__
) \

380 
p‹tENTER_CRITICAL
(); \

381 
vTaskSwôchC⁄ãxt
(); \

382 
p‹tEXIT_CRITICAL
(); \

386 
__asm__
 
__vﬁ©ûe__
 ( \

407 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting), \

408 [
pxCuºítTCB
] "i" (&pxCurrentTCB), \

409 [
LINE
] "i" (
__LINE__
) \

422 
	#p‹tSAVE_CONTEXT_SCALL
(Ë\

	)

424 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

425 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

437 
__asm__
 
__vﬁ©ûe__
 ( \

466 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting) \

473 
p‹tENTER_CRITICAL
(); \

476 
__asm__
 
__vﬁ©ûe__
 ( \

482 : [
pxCuºítTCB
] "i" (&pxCurrentTCB) \

489 
	#p‹tRESTORE_CONTEXT_SCALL
(Ë\

	)

491 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

492 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

497 
__asm__
 
__vﬁ©ûe__
 ( \

503 : [
pxCuºítTCB
] "i" (&pxCurrentTCB) \

507 
p‹tEXIT_CRITICAL
(); \

509 
__asm__
 
__vﬁ©ûe__
 ( \

536 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting) \

545 #i‡
c⁄figUSE_PREEMPTION
 == 0

551 
	#p‹tENTER_SWITCHING_ISR
(Ë\

	)

554 
__asm__
 
__vﬁ©ûe__
 ("stm --sp,Ñ0-r7"); \

563 
	#p‹tEXIT_SWITCHING_ISR
(Ë\

	)

565 
__asm__
 
__vﬁ©ûe__
 ( \

581 
	#p‹tENTER_SWITCHING_ISR
(Ë\

	)

583 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

584 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

589 
__asm__
 
__vﬁ©ûe__
 ( \

620 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting), \

621 [
pxCuºítTCB
] "i" (&pxCurrentTCB), \

622 [
LINE
] "i" (
__LINE__
) \

629 
	#p‹tEXIT_SWITCHING_ISR
(Ë\

	)

631 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

632 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

634 
__asm__
 
__vﬁ©ûe__
 ( \

651 : [
LINE
] "i" (
__LINE__
) \

655 
p‹tENTER_CRITICAL
(); \

656 
vTaskSwôchC⁄ãxt
(); \

657 
p‹tEXIT_CRITICAL
(); \

659 
__asm__
 
__vﬁ©ûe__
 ( \

686 : [
ulCrôiˇlNe°ög
] "i" (&ulCriticalNesting), \

687 [
pxCuºítTCB
] "i" (&pxCurrentTCB), \

688 [
LINE
] "i" (
__LINE__
) \

695 
	#p‹tYIELD
(Ë{
__asm__
 
	`__vﬁ©ûe__
 ("sˇŒ");}

	)

698 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

699 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

701 #ifde‡
__˝lu•lus


	@portable/GCC/CORTUS_APS3/port.c

67 
	~<°dlib.h
>

70 
	~"FªeRTOS.h
"

71 
	~"èsk.h
"

74 
	~<machöe/cou¡î.h
>

75 
	~<machöe/ic.h
>

79 
	#p‹tINITIAL_PSR
 ( 0x00020000 )

	)

86 
¥vSëupTimîI¡îru±
( );

89 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 * 
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

93 
pxT›OfSèck
 -= 20;

96 
pxT›OfSèck
[ 16 ] = 0;

97 
pxT›OfSèck
[ 15 ] = 
p‹tINITIAL_PSR
;

98 
pxT›OfSèck
[ 14 ] = ( 
uöt32_t
 ) 
pxCode
;

99 
pxT›OfSèck
[ 13 ] = 0x00000000UL;

100 
pxT›OfSèck
[ 12 ] = 0x00000000UL;

101 
pxT›OfSèck
[ 11 ] = 0x0d0d0d0dUL;

102 
pxT›OfSèck
[ 10 ] = 0x0c0c0c0cUL;

103 
pxT›OfSèck
[ 9 ] = 0x0b0b0b0bUL;

104 
pxT›OfSèck
[ 8 ] = 0x0a0a0a0aUL;

105 
pxT›OfSèck
[ 7 ] = 0x09090909UL;

106 
pxT›OfSèck
[ 6 ] = 0x08080808UL;

107 
pxT›OfSèck
[ 5 ] = 0x07070707UL;

108 
pxT›OfSèck
[ 4 ] = 0x06060606UL;

109 
pxT›OfSèck
[ 3 ] = 0x05050505UL;

110 
pxT›OfSèck
[ 2 ] = 0x04040404UL;

111 
pxT›OfSèck
[ 1 ] = 0x03030303UL;

112 
pxT›OfSèck
[ 0 ] = ( 
uöt32_t
 ) 
pvP¨amëîs
;

114  
pxT›OfSèck
;

115 
	}
}

118 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

121 
	`¥vSëupTimîI¡îru±
();

124 
ic
->
õn
 = 1;

127 
	`p‹tRESTORE_CONTEXT
();

131 
	}
}

134 
	$¥vSëupTimîI¡îru±
( )

137 
cou¡î1
->
ªlﬂd
 = ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1;

138 
cou¡î1
->
vÆue
 = cou¡î1->
ªlﬂd
;

139 
cou¡î1
->
mask
 = 1;

142 
úq
[ 
IRQ_COUNTER1
 ].
õn
 = 1;

143 
	}
}

147 
	$öãºu±31_h™dÀr
–Ë
	`__©åibuã__
((
«ked
));

148 
	$öãºu±31_h™dÀr
( )

150 
	`p‹tSAVE_CONTEXT
();

151 
__asm
 volatile ( "call vTaskSwitchContext" );

152 
	`p‹tRESTORE_CONTEXT
();

153 
	}
}

156 
	$¥vPro˚ssTick
–Ë
	`__©åibuã__
((
noölöe
));

157 
	$¥vPro˚ssTick
( )

159 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

161 
	`vTaskSwôchC⁄ãxt
();

165 
cou¡î1
->
expúed
 = 0;

166 
	}
}

170 
	$öãºu±7_h™dÀr
–Ë
	`__©åibuã__
((
«ked
));

171 
	$öãºu±7_h™dÀr
( )

173 
	`p‹tSAVE_CONTEXT
();

174 
	`¥vPro˚ssTick
();

175 
	`p‹tRESTORE_CONTEXT
();

176 
	}
}

179 
	$vP‹tEndScheduÀr
( )

182 
	}
}

	@portable/GCC/CORTUS_APS3/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


73 
	~<machöe/˝u.h
>

86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

92 
	#p‹tBASE_TYPE
 

	)

94 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

95 
	tBa£Ty≥_t
;

96 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

108 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

109 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

110 
	#p‹tBYTE_ALIGNMENT
 4

	)

111 
	#p‹tNOP
(Ë
__asm__
 vﬁ©ûê–"movÑ0,Ñ0" )

	)

112 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

113 
	#p‹tIRQ_TRAP_YIELD
 31

	)

118 
vP‹tYõld
( );

122 
	#p‹tYIELD
(Ë
asm
 
	`__vﬁ©ûe__
–"Åø∞#%0 "::"i"(
p‹tIRQ_TRAP_YIELD
):"mem‹y")

	)

125 
vTaskE¡îCrôiˇl
( );

126 
vTaskExôCrôiˇl
( );

127 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

128 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

132 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`˝u_öt_dißbÀ
()

	)

133 
	#p‹tENABLE_INTERRUPTS
(Ë
	`˝u_öt_íabÀ
()

	)

137 
	#p‹tYIELD_FROM_ISR
–
xHighîPri‹ôyTaskWokí
 ) if–xHighîPri‹ôyTaskWokí !
pdFALSE
 ) 
	`vTaskSwôchC⁄ãxt
()

	)

141 
	#p‹tSAVE_CONTEXT
(Ë\

	)

142 
asm
 
	g__vﬁ©ûe__
 \

161 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

162 
asm
 
__vﬁ©ûe__
( \

182 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

183 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

186 #ifde‡
__˝lu•lus


	@portable/GCC/ColdFire_V2/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

70 
	#p‹tINITIAL_FORMAT_VECTOR
 ( ( 
SèckTy≥_t
 ) 0x4000 )

	)

73 
	#p‹tINITIAL_STATUS_REGISTER
 ( ( 
SèckTy≥_t
 ) 0x2000)

	)

77 
uöt32_t
 
	gulCrôiˇlNe°ög
 = 0x9999UL;

81 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 * 
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

83 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

84 
pxT›OfSèck
--;

86 *
pxT›OfSèck
 = (
SèckTy≥_t
) 0xDEADBEEF;

87 
pxT›OfSèck
--;

90 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

91 
pxT›OfSèck
--;

93 *
pxT›OfSèck
 = ( 
p‹tINITIAL_FORMAT_VECTOR
 << 16UL ) | ( 
p‹tINITIAL_STATUS_REGISTER
 );

94 
pxT›OfSèck
--;

96 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0;

97 
pxT›OfSèck
 -= 14;

99  
pxT›OfSèck
;

100 
	}
}

103 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

105 
	`vP‹tSèπFú°Task
( );

107 
ulCrôiˇlNe°ög
 = 0UL;

110 
	`vAµliˇti⁄SëupI¡îru±s
();

113 
	`vP‹tSèπFú°Task
();

115  
pdFALSE
;

116 
	}
}

119 
	$vP‹tEndScheduÀr
( )

122 
	}
}

125 
	$vP‹tE¡îCrôiˇl
( )

127 if–
ulCrôiˇlNe°ög
 == 0UL )

133 
	`p‹tDISABLE_INTERRUPTS
();

134 if–
MCF_INTC0_INTFRCL
 == 0UL )

139 
	`p‹tENABLE_INTERRUPTS
();

143 
ulCrôiˇlNe°ög
++;

144 
	}
}

147 
	$vP‹tExôCrôiˇl
( )

149 
ulCrôiˇlNe°ög
--;

150 if–
ulCrôiˇlNe°ög
 == 0 )

152 
	`p‹tENABLE_INTERRUPTS
();

154 
	}
}

157 
	$vP‹tYõldH™dÀr
( )

159 
uöt32_t
 
ulSavedI¡îru±Mask
;

161 
ulSavedI¡îru±Mask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

163 
MCF_INTC0_INTFRCL
 = 0;

164 
	`vTaskSwôchC⁄ãxt
();

165 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulSavedI¡îru±Mask
 );

166 
	}
}

	@portable/GCC/ColdFire_V2/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

96 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

97 
uöt16_t
 
	tTickTy≥_t
;

98 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

100 
uöt32_t
 
	tTickTy≥_t
;

101 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

106 
	#p‹tBYTE_ALIGNMENT
 4

	)

107 
	#p‹tSTACK_GROWTH
 -1

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

110 
uöt32_t
 
ulP‹tSëIPL
( uint32_t );

111 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

112 
	#p‹tENABLE_INTERRUPTS
(Ë
	`ulP‹tSëIPL
–0 )

	)

115 
vP‹tE¡îCrôiˇl
( );

116 
vP‹tExôCrôiˇl
( );

117 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

118 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

120 
UBa£Ty≥_t
 
uxP‹tSëI¡îru±MaskFromISR
( );

121 
vP‹tCÀ¨I¡îru±MaskFromISR
–
UBa£Ty≥_t
 );

122 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëIPL
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

123 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusRegi°î
 ) 
	`ulP‹tSëIPL
–uxSavedSètusRegi°î )

	)

129 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"n›" )

	)

132 
	#p‹tYIELD
(Ë
MCF_INTC0_INTFRCL
 = ( 1UL << 
c⁄figYIELD_INTERRUPT_VECTOR
 ); 
	`p‹tNOP
();Ö‹tNOP()

	)

137 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†Ë
	`__©åibuã__
((
n‹ëu∫
))

	)

138 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

141 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed !
pdFALSE
 ) \

	)

143 
p‹tYIELD
(); \

147 #ifde‡
__˝lu•lus


	@portable/GCC/H8S2329/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

79 
	#p‹tINITIAL_CCR
 ( ( 
SèckTy≥_t
 ) 0x00 )

	)

82 
	#p‹tCLEAR_ON_TGRA_COMPARE_MATCH
 ( ( 
uöt8_t
 ) 0x20 )

	)

83 
	#p‹tCLOCK_DIV_64
 ( ( 
uöt8_t
 ) 0x03 )

	)

84 
	#p‹tCLOCK_DIV
 ( ( 
uöt32_t
 ) 64 )

	)

85 
	#p‹tTGRA_INTERRUPT_ENABLE
 ( ( 
uöt8_t
 ) 0x01 )

	)

86 
	#p‹tTIMER_CHANNEL
 ( ( 
uöt8_t
 ) 0x02 )

	)

87 
	#p‹tMSTP13
 ( ( 
uöt16_t
 ) 0x2000 )

	)

92 
¥vSëupTimîI¡îru±
( );

97 
	$vP‹tYõld
–Ë
	`__©åibuã__
 ( ( 
ßvóŒ
, 
öãºu±_h™dÀr
 ) );

104 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

106 
uöt32_t
 
ulVÆue
;

109 
ulVÆue
 = ( 
uöt32_t
 ) 
pxT›OfSèck
;

110 if–
ulVÆue
 & 1UL )

112 
pxT›OfSèck
 =ÖxTopOfStack - 1;

117 
pxT›OfSèck
--;

118 *
pxT›OfSèck
 = 0xaa;

119 
pxT›OfSèck
--;

120 *
pxT›OfSèck
 = 0xbb;

121 
pxT›OfSèck
--;

122 *
pxT›OfSèck
 = 0xcc;

123 
pxT›OfSèck
--;

124 *
pxT›OfSèck
 = 0xdd;

128 
ulVÆue
 = ( 
uöt32_t
 ) 
pxCode
;

130 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulVÆue
 & 0xff );

132 
pxT›OfSèck
--;

133 
ulVÆue
 >>= 8UL;

134 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulVÆue
 & 0xff );

135 
pxT›OfSèck
--;

136 
ulVÆue
 >>= 8UL;

137 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulVÆue
 & 0xff );

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = 
p‹tINITIAL_CCR
;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = 0x66;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = 0x66;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = 0x66;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = 0x66;

158 
ulVÆue
 = ( 
uöt32_t
 ) 
pvP¨amëîs
;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulVÆue
 & 0xff );

162 
pxT›OfSèck
--;

163 
ulVÆue
 >>= 8UL;

164 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulVÆue
 & 0xff );

165 
pxT›OfSèck
--;

166 
ulVÆue
 >>= 8UL;

167 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulVÆue
 & 0xff );

168 
pxT›OfSèck
--;

169 
ulVÆue
 >>= 8UL;

170 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulVÆue
 & 0xff );

173 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = 0x11;

175 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = 0x11;

177 
pxT›OfSèck
--;

178 *
pxT›OfSèck
 = 0x11;

179 
pxT›OfSèck
--;

180 *
pxT›OfSèck
 = 0x11;

183 
pxT›OfSèck
--;

184 *
pxT›OfSèck
 = 0x22;

185 
pxT›OfSèck
--;

186 *
pxT›OfSèck
 = 0x22;

187 
pxT›OfSèck
--;

188 *
pxT›OfSèck
 = 0x22;

189 
pxT›OfSèck
--;

190 *
pxT›OfSèck
 = 0x22;

193 
pxT›OfSèck
--;

194 *
pxT›OfSèck
 = 0x33;

195 
pxT›OfSèck
--;

196 *
pxT›OfSèck
 = 0x33;

197 
pxT›OfSèck
--;

198 *
pxT›OfSèck
 = 0x33;

199 
pxT›OfSèck
--;

200 *
pxT›OfSèck
 = 0x33;

203 
pxT›OfSèck
--;

204 *
pxT›OfSèck
 = 0x44;

205 
pxT›OfSèck
--;

206 *
pxT›OfSèck
 = 0x44;

207 
pxT›OfSèck
--;

208 *
pxT›OfSèck
 = 0x44;

209 
pxT›OfSèck
--;

210 *
pxT›OfSèck
 = 0x44;

213 
pxT›OfSèck
--;

214 *
pxT›OfSèck
 = 0x55;

215 
pxT›OfSèck
--;

216 *
pxT›OfSèck
 = 0x55;

217 
pxT›OfSèck
--;

218 *
pxT›OfSèck
 = 0x55;

219 
pxT›OfSèck
--;

220 *
pxT›OfSèck
 = 0x55;

222  
pxT›OfSèck
;

223 
	}
}

226 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

228 * 
pxCuºítTCB
;

231 
	`¥vSëupTimîI¡îru±
();

236 
asm
 volatile (

245 –Ë
pxCuºítTCB
;

248  
pdTRUE
;

249 
	}
}

252 
	$vP‹tEndScheduÀr
( )

255 
	}
}

263 
	$vP‹tYõld
( )

265 
	`p‹tSAVE_STACK_POINTER
();

266 
	`vTaskSwôchC⁄ãxt
();

267 
	`p‹tRESTORE_STACK_POINTER
();

268 
	}
}

275 #if–
c⁄figUSE_PREEMPTION
 == 1 )

282 
	$vTickISR
–Ë
	`__©åibuã__
 ( ( 
ßvóŒ
, 
öãºu±_h™dÀr
 ) );

283 
	$vTickISR
( )

285 
	`p‹tSAVE_STACK_POINTER
();

287 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

289 
	`vTaskSwôchC⁄ãxt
();

293 
TSR1
 &= ~0x01;

295 
	`p‹tRESTORE_STACK_POINTER
();

296 
	}
}

305 
	$vTickISR
–Ë
	`__©åibuã__
 ( ( 
öãºu±_h™dÀr
 ) );

306 
	$vTickISR
( )

308 
	`xTaskIn¸emítTick
();

311 
TSR1
 &= ~0x01;

312 
	}
}

320 
	$¥vSëupTimîI¡îru±
( )

322 c⁄° 
uöt32_t
 
ulCom∑ªM©ch
 = ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) / 
p‹tCLOCK_DIV
;

325 
MSTPCR
 &~
p‹tMSTP13
;

328 
TCR1
 = 
p‹tCLEAR_ON_TGRA_COMPARE_MATCH
 | 
p‹tCLOCK_DIV_64
;

331 
TGR1A
 = 
ulCom∑ªM©ch
;

335 
TIER1
 |
p‹tTGRA_INTERRUPT_ENABLE
;

336 
TSTR
 |
p‹tTIMER_CHANNEL
;

337 
	}
}

	@portable/GCC/H8S2329/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt8_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 sig√d 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tBYTE_ALIGNMENT
 2

	)

108 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

109 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

110 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûe–"TRAPA #0" )

	)

111 
	#p‹tNOP
(Ë
asm
 vﬁ©ûe–"NOP" )

	)

115 
	#p‹tENABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûe–"ANDC #0x7F, CCR" );

	)

116 
	#p‹tDISABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûe–"ORC #0x80, CCR" );

	)

119 
	#p‹tENTER_CRITICAL
(Ë
asm
 vﬁ©ûe–"STC CCR, @-ER7" ); \

	)

120 
p‹tDISABLE_INTERRUPTS
();

123 
	#p‹tEXIT_CRITICAL
(Ë
asm
 vﬁ©ûe–"LDC @ER7+, CCR" );

	)

133 
	#p‹tSAVE_STACK_POINTER
(Ë\

	)

134 * 
pxCuºítTCB
; \

136 
asm
 volatile( \

140 –Ë
	gpxCuºítTCB
;

143 
	#p‹tRESTORE_STACK_POINTER
(Ë\

	)

144 * 
pxCuºítTCB
; \

146 
asm
 volatile( \

150 –Ë
	gpxCuºítTCB
;

156 
	#p‹tENTER_SWITCHING_ISR
(Ë
	`p‹tSAVE_STACK_POINTER
(); {

	)

158 
	#p‹tEXIT_SWITCHING_ISR
–
x
 ) \

	)

159 if–
	gx
 ) \

161 
vTaskSwôchC⁄ãxt
( ); \

162 
vTaskSwôchC⁄ãxt
(); \

164 } 
p‹tRESTORE_STACK_POINTER
();

168 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

169 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

171 #ifde‡
__˝lu•lus


	@portable/GCC/HCS12/port.c

69 
	~"FªeRTOS.h
"

70 
	~"èsk.h
"

73 
	~<sys/p‹ts_def.h
>

84 
¥vSëupTimîI¡îru±
( );

88 
	#ATTR_NEAR
 
	`__©åibuã__
((
√¨
))

	)

92 
ATTR_NEAR
 
vP‹tYõld
( );

96 
ATTR_NEAR
 
vP‹tTickI¡îru±
( );

99 
Ba£Ty≥_t
 
ATTR_NEAR
 
xSèπScheduÀrNór
( );

107 vﬁ©ûê
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0x80;

114 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

124 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) *–((SèckTy≥_à*Ë(&
pxCode
) ) + 1 );

125 *--
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) *–((SèckTy≥_à*Ë(&
pxCode
) ) + 0 );

130 *--
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xff;

131 *--
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xee;

134 *--
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xdd;

135 *--
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xcc;

138 *--
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) *–((SèckTy≥_à*Ë(&
pvP¨amëîs
) ) + 0 );

141 *--
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) *–((SèckTy≥_à*Ë(&
pvP¨amëîs
) ) + 1 );

145 *--
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x80;

148 
	`__asm
("\n\

149 
movw
 
_
.
‰ame
, 2,-%0 \
n
\

150 
movw
 
_
.
tmp
, 2,-%0 \
n
\

151 
movw
 
_
.
z
, 2,-%0 \
n
\

152 
movw
 
_
.
xy
, 2,-%0 \
n
\

153 ;
movw
 
_
.
d2
, 2,-%0 \
n
\

154 ;
movw
 
_
.
d1
, 2,-%0 \
n
\

155 ": "=
A
"(pxTopOfStack) : "0"(pxTopOfStack) );

157 #ifde‡
BANKED_MODEL


159 *--
pxT›OfSèck
 = 0x30;

164 *--
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

167  
pxT›OfSèck
;

168 
	}
}

171 
	$vP‹tEndScheduÀr
( )

174 
	}
}

177 
	$¥vSëupTimîI¡îru±
( )

181 
RTICTL
 = 0x50;

182 
CRGINT
 |= 0x80;

183 
	}
}

186 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

194 
öt16_t
 
d
;

195 
	`__asm
 ("jm∞ xSèπScheduÀrNór ; wû»√vîÑëu∫": "=d"(
d
));

196  
d
;

197 
	}
}

200 
Ba£Ty≥_t
 
	$xSèπScheduÀrNór
( )

204 
	`¥vSëupTimîI¡îru±
();

207 
	`p‹tRESTORE_CONTEXT
();

209 
	`p‹tISR_TAIL
();

212  
pdFALSE
;

213 
	}
}

224 
	$vP‹tYõld
( )

226 
	`p‹tISR_HEAD
();

231 
	`p‹tSAVE_CONTEXT
();

232 
	`vTaskSwôchC⁄ãxt
();

233 
	`p‹tRESTORE_CONTEXT
();

235 
	`p‹tISR_TAIL
();

236 
	}
}

244 
	$vP‹tTickI¡îru±
( )

246 
	`p‹tISR_HEAD
();

249 
CRGFLG
 = 0x80;

251 #i‡
c⁄figUSE_PREEMPTION
 == 1

254 
	`p‹tSAVE_CONTEXT
();

257 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

260 
	`vTaskSwôchC⁄ãxt
();

265 
	`p‹tRESTORE_CONTEXT
();

269 
	`xTaskIn¸emítTick
();

273 
	`p‹tISR_TAIL
();

274 
	}
}

	@portable/GCC/HCS12/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt8_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 sig√d 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

108 
	#p‹tBYTE_ALIGNMENT
 1

	)

109 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

110 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

111 
	#p‹tYIELD
(Ë
	`__asm
–"swi" );

	)

115 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
–"˛i" )

	)

116 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
–"£i" )

	)

124 
	#p‹tENTER_CRITICAL
(Ë\

	)

126 vﬁ©ûê
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

128 
p‹tDISABLE_INTERRUPTS
(); \

129 
	guxCrôiˇlNe°ög
++; \

137 
	#p‹tEXIT_CRITICAL
(Ë\

	)

139 vﬁ©ûê
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

141 
	guxCrôiˇlNe°ög
--; \

142 if–
	guxCrôiˇlNe°ög
 == 0 ) \

144 
p‹tENABLE_INTERRUPTS
(); \

161 #ifde‡
BANKED_MODEL


167 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

169 
__asm
( " \n\

170 .
globl
 
pxCuºítTCB
 ; * \
n
\

171 .
globl
 
uxCrôiˇlNe°ög
 ; \
n
\

172 \
n
\

173 
ldx
 
pxCuºítTCB
 \
n
\

174 
lds
 0,
x
 ; 
Sèck
 \
n
\

175 \
n
\

176 
movb
 1,
•
+,
uxCrôiˇlNe°ög
 \
n
\

177 
movb
 1,
•
+,0x30 ; 
PPAGE
 \
n
\

186 
	#p‹tSAVE_CONTEXT
(Ë\

	)

188 
__asm
( " \n\

189 .
globl
 
pxCuºítTCB
 ; * \
n
\

190 .
globl
 
uxCrôiˇlNe°ög
 ; \
n
\

191 \
n
\

192 
movb
 0x30, 1,-
•
 ; 
PPAGE
 \
n
\

193 
movb
 
uxCrôiˇlNe°ög
, 1,-
•
 \
n
\

194 \
n
\

195 
ldx
 
pxCuºítTCB
 \
n
\

196 
°s
 0,
x
 ; 
Sèck
 \
n
\

206 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

208 
__asm
( " \n\

209 .
globl
 
pxCuºítTCB
 ; * \
n
\

210 .
globl
 
uxCrôiˇlNe°ög
 ; \
n
\

211 \
n
\

212 
ldx
 
pxCuºítTCB
 \
n
\

213 
lds
 0,
x
 ; 
Sèck
 \
n
\

214 \
n
\

215 
movb
 1,
•
+,
uxCrôiˇlNe°ög
 \
n
\

219 
	#p‹tSAVE_CONTEXT
(Ë\

	)

221 
__asm
( " \n\

222 .
globl
 
pxCuºítTCB
 ; * \
n
\

223 .
globl
 
uxCrôiˇlNe°ög
 ; \
n
\

224 \
n
\

225 
movb
 
uxCrôiˇlNe°ög
, 1,-
•
 \
n
\

226 \
n
\

227 
ldx
 
pxCuºítTCB
 \
n
\

228 
°s
 0,
x
 ; 
Sèck
 \
n
\

237 
	#p‹tISR_HEAD
(Ë\

	)

239 
__asm
(" \n\

240 
movw
 
_
.
‰ame
, 2,-
•
 \
n
\

241 
movw
 
_
.
tmp
, 2,-
•
 \
n
\

242 
movw
 
_
.
z
, 2,-
•
 \
n
\

243 
movw
 
_
.
xy
, 2,-
•
 \
n
\

244 ;
movw
 
_
.
d2
, 2,-
•
 \
n
\

245 ;
movw
 
_
.
d1
, 2,-
•
 \
n
\

249 
	#p‹tISR_TAIL
(Ë\

	)

251 
__asm
(" \n\

252 
movw
 2,
•
+, 
_
.
xy
 \
n
\

253 
movw
 2,
•
+, 
_
.
z
 \
n
\

254 
movw
 2,
•
+, 
_
.
tmp
 \
n
\

255 
movw
 2,
•
+, 
_
.
‰ame
 \
n
\

256 ;
movw
 2,
•
+, 
_
.
d1
 \
n
\

257 ;
movw
 2,
•
+, 
_
.
d2
 \
n
\

258 
πi
 \
n
\

269 
	#p‹tTASK_SWITCH_FROM_ISR
(Ë\

	)

270 
p‹tSAVE_CONTEXT
(); \

271 
vTaskSwôchC⁄ãxt
(); \

272 
p‹tRESTORE_CONTEXT
();

276 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

277 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

279 #ifde‡
__˝lu•lus


	@portable/GCC/MCF5235/port.c

54 
	~<°dlib.h
>

56 
	~"FªeRTOS.h
"

57 
	~"FªeRTOSC⁄fig.h
"

58 
	~"èsk.h
"

61 vﬁ©ûê
	tuöt32_t
 
	tvuöt32
;

62 vﬁ©ûê
	tuöt16_t
 
	tvuöt16
;

63 vﬁ©ûê
	tuöt8_t
 
	tvuöt8
;

66 
	#p‹tVECTOR_TABLE
 
__RAMVEC


	)

67 
	#p‹tVECTOR_SYSCALL
 ( 32 + 
p‹tTRAP_YIELD
 )

	)

68 
	#p‹tVECTOR_TIMER
 ( 64 + 36 )

	)

70 
	#MCF_PIT_PRESCALER
 512UL

	)

71 
	#MCF_PIT_TIMER_TICKS
 ( 
FSYS_2
 / 
MCF_PIT_PRESCALER
 )

	)

72 
	#MCF_PIT_MODULUS_REGISTER
(
‰eq
Ë–
MCF_PIT_TIMER_TICKS
 / ( fªq ) - 1UL)

	)

74 
	#MCF_PIT_PMR0
 ( *–
vuöt16
 * )–* )–&
__IPSBAR
[ 0x150002 ] ) )

	)

75 
	#MCF_PIT_PCSR0
 ( *–
vuöt16
 * )–* )–&
__IPSBAR
[ 0x150000 ] ) )

	)

76 
	#MCF_PIT_PCSR_PRE
(
x
Ë–––x ) & 0x000F ) << 8 )

	)

77 
	#MCF_PIT_PCSR_EN
 ( 0x0001 )

	)

78 
	#MCF_PIT_PCSR_RLD
 ( 0x0002 )

	)

79 
	#MCF_PIT_PCSR_PIF
 ( 0x0004 )

	)

80 
	#MCF_PIT_PCSR_PIE
 ( 0x0008 )

	)

81 
	#MCF_PIT_PCSR_OVW
 ( 0x0010 )

	)

82 
	#MCF_INTC0_ICR36
 ( *–
vuöt8
 * )–* )–&
__IPSBAR
[ 0x000C64 ] ) )

	)

83 
	#MCF_INTC0_IMRH
 ( *–
vuöt32
 * )–* )–&
__IPSBAR
[ 0x000C08 ] ) )

	)

84 
	#MCF_INTC0_IMRH_INT_MASK36
 ( 0x00000010 )

	)

85 
	#MCF_INTC0_IMRH_MASKALL
 ( 0x00000001 )

	)

86 
	#MCF_INTC0_ICRn_IP
(
x
Ë–––x ) & 0x07 ) << 0 )

	)

87 
	#MCF_INTC0_ICRn_IL
(
x
Ë–––x ) & 0x07 ) << 3 )

	)

89 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

90 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 10 )

	)

93 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

96 #i‡
c⁄figUSE_PREEMPTION
 == 0

97 
	$¥vP‹tPªem±iveTick
 ( Ë
	`__©åibuã__
 ((
öãºu±_h™dÀr
));

99 
	`¥vP‹tPªem±iveTick
 ( );

104 
SèckTy≥_t
 *

105 
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 * 
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
,

106 *
pvP¨amëîs
 )

109 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

110 
pxT›OfSèck
--;

114 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0;

115 
pxT›OfSèck
--;

119 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

120 
pxT›OfSèck
--;

124 *
pxT›OfSèck
 = 0x40002000UL | ( 
p‹tVECTOR_SYSCALL
 + 32 ) << 18;

125 
pxT›OfSèck
--;

129 *
pxT›OfSèck
 = 0;

130 *
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xA6;

133 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xA5;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xA4;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xA3;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xA2;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xA1;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xA0;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xD7;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xD6;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xD5;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xD4;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xD3;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xD2;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xD1;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xD0;

162  
pxT›OfSèck
;

163 
	}
}

169 
	$¥vP‹tYõld
( )

171 
asm
 volatile ( "move.w #0x2700, %sr\n\t" );

172 #i‡
_GCC_USES_FP
 == 1

173 
asm
 volatile ( "unlk %fp\n\t" );

176 
	`p‹tSAVE_CONTEXT
( );

179 
	`vTaskSwôchC⁄ãxt
( );

182 
	`p‹tRESTORE_CONTEXT
( );

183 
	}
}

185 #i‡
c⁄figUSE_PREEMPTION
 == 0

191 
	$¥vP‹tPªem±iveTick
 ( )

197 
	`xTaskIn¸emítTick
();

198 
MCF_PIT_PCSR0
 |
MCF_PIT_PCSR_PIF
;

199 
	}
}

204 
	$¥vP‹tPªem±iveTick
( )

206 
asm
 volatile ( "move.w #0x2700, %sr\n\t" );

207 #i‡
_GCC_USES_FP
 == 1

208 
asm
 volatile ( "unlk %fp\n\t" );

210 
	`p‹tSAVE_CONTEXT
( );

211 
MCF_PIT_PCSR0
 |
MCF_PIT_PCSR_PIF
;

212 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

214 
	`vTaskSwôchC⁄ãxt
( );

216 
	`p‹tRESTORE_CONTEXT
( );

217 
	}
}

221 
	$vP‹tE¡îCrôiˇl
()

226 –)
	`p‹tSET_IPL
–
p‹tIPL_MAX
 );

231 
ulCrôiˇlNe°ög
++;

232 
	}
}

235 
	$vP‹tExôCrôiˇl
()

237 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

240 
ulCrôiˇlNe°ög
--;

244 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

246 –)
	`p‹tSET_IPL
( 0 );

249 
	}
}

251 
Ba£Ty≥_t


252 
	$xP‹tSèπScheduÀr
( )

254 –*
p‹tVECTOR_TABLE
[ ] ) ( );

257 
p‹tVECTOR_TABLE
[ 
p‹tVECTOR_SYSCALL
 ] = 
¥vP‹tYõld
;

259 
p‹tVECTOR_TABLE
[ 
p‹tVECTOR_TIMER
 ] = 
¥vP‹tPªem±iveTick
;

262 i‡–
c⁄figTICK_RATE_HZ
 > 0)

265 
MCF_PIT_PCSR0
 = 
	`MCF_PIT_PCSR_PRE
–0x9 ) | 
MCF_PIT_PCSR_RLD
 | 
MCF_PIT_PCSR_OVW
;

267 
MCF_PIT_PMR0
 = 
	`MCF_PIT_MODULUS_REGISTER
–
c⁄figTICK_RATE_HZ
 );

269 
MCF_INTC0_ICR36
 = 
	`MCF_INTC0_ICRn_IL
–0x1 ) | 
	`MCF_INTC0_ICRn_IP
( 0x1 );

270 
MCF_INTC0_IMRH
 &~–
MCF_INTC0_IMRH_INT_MASK36
 | 
MCF_INTC0_IMRH_MASKALL
 );

272 
MCF_PIT_PCSR0
 |
MCF_PIT_PCSR_PIE
 | 
MCF_PIT_PCSR_EN
 | 
MCF_PIT_PCSR_PIF
;

276 
	`p‹tRESTORE_CONTEXT
( );

279  
pdTRUE
;

280 
	}
}

283 
	$vP‹tEndScheduÀr
( )

285 
	}
}

	@portable/GCC/MCF5235/portmacro.h

54 #i‚de‡
PORTMACRO_H


55 
	#PORTMACRO_H


	)

57 #ifde‡
__˝lu•lus


62 
	#p‹tCHAR
 

	)

63 
	#p‹tFLOAT
 

	)

64 
	#p‹tDOUBLE
 

	)

65 
	#p‹tLONG
 

	)

66 
	#p‹tSHORT
 

	)

67 
	#p‹tSTACK_TYPE
 

	)

68 
	#p‹tBASE_TYPE
 

	)

70 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

71 
	tBa£Ty≥_t
;

72 
	tUBa£Ty≥_t
;

74 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

75 
uöt16_t
 
	tTickTy≥_t
;

76 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

78 
uöt32_t
 
	tTickTy≥_t
;

79 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

83 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

84 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

85 
	#p‹tBYTE_ALIGNMENT
 4

	)

87 
	#p‹tTRAP_YIELD
 0

	)

88 
	#p‹tIPL_MAX
 7

	)

100 
	#p‹tSAVE_CONTEXT
(Ë\

	)

101 
asm
 volatile ( \

118 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

119 
asm
 volatile ( "move.lÖxCurrentTCB, %sp\n\t" \

129 
	#p‹tENTER_CRITICAL
(Ë\

	)

130 
vP‹tE¡îCrôiˇl
();

132 
	#p‹tEXIT_CRITICAL
(Ë\

	)

133 
vP‹tExôCrôiˇl
();

135 
	#p‹tSET_IPL
–
xIPL
 ) \

	)

136 
asm_£t_ùl
–
xIPL
 )

138 
	#p‹tDISABLE_INTERRUPTS
(Ë\

	)

139 dÿ{ ( )
p‹tSET_IPL
–
p‹tIPL_MAX
 ); }  0 )

140 
	#p‹tENABLE_INTERRUPTS
(Ë\

	)

141 dÿ{ ( )
p‹tSET_IPL
( 0 ); }  0 )

143 
	#p‹tYIELD
(Ë\

	)

144 
asm
 vﬁ©ûê–"Åø∞ %0\n\t" : : "i"(
p‹tTRAP_YIELD
) )

146 
	#p‹tNOP
(Ë\

	)

147 
asm
 volatile ( "nop\n\t" )

149 
	#p‹tENTER_SWITCHING_ISR
(Ë\

	)

150 
asm
 volatile ( "move.w #0x2700, %sr" ); \

152 
p‹tSAVE_CONTEXT
( ); \

155 
	#p‹tEXIT_SWITCHING_ISR
–
SwôchRequúed
 ) \

	)

157 if–
	gSwôchRequúed
 ) \

159 
vTaskSwôchC⁄ãxt
( ); \

162 
p‹tRESTORE_CONTEXT
( );

165 
vP‹tE¡îCrôiˇl
( );

166 
vP‹tExôCrôiˇl
( );

167 
asm_£t_ùl
–
uöt32_t
 
uiNewIPL
 );

170 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) \

	)

171 
vFun˘i⁄
–*
pvP¨amëîs
 )

173 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) \

	)

174 
vFun˘i⁄
–*
pvP¨amëîs
 )

176 #ifde‡
__˝lu•lus


	@portable/GCC/MSP430F449/port.c

73 
	~<°dlib.h
>

74 
	~<sig«l.h
>

77 
	~"FªeRTOS.h
"

78 
	~"èsk.h
"

86 
	#p‹tACLK_FREQUENCY_HZ
 ( ( 
TickTy≥_t
 ) 32768 )

	)

87 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( 
uöt16_t
 ) 10 )

	)

88 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
SèckTy≥_t
 ) 0x08 )

	)

92 
	tTCB_t
;

93 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

107 vﬁ©ûê
uöt16_t
 
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

117 
	#p‹tSAVE_CONTEXT
(Ë\

	)

118 
asm
 volatile ( "pushÑ4 \n\t" \

146 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

147 
asm
 volatile ( "mov.wÖxCurrentTCB,Ñ12 \n\t" \

172 
¥vSëupTimîI¡îru±
( );

181 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

199 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

200 
pxT›OfSèck
--;

201 *
pxT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

202 
pxT›OfSèck
--;

205 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x4444;

206 
pxT›OfSèck
--;

207 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x5555;

208 
pxT›OfSèck
--;

209 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x6666;

210 
pxT›OfSèck
--;

211 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x7777;

212 
pxT›OfSèck
--;

213 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x8888;

214 
pxT›OfSèck
--;

215 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x9999;

216 
pxT›OfSèck
--;

217 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaa;

218 
pxT›OfSèck
--;

219 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xbbbb;

220 
pxT›OfSèck
--;

221 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xcccc;

222 
pxT›OfSèck
--;

223 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xdddd;

224 
pxT›OfSèck
--;

225 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xeeee;

226 
pxT›OfSèck
--;

230 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

231 
pxT›OfSèck
--;

238 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

242  
pxT›OfSèck
;

243 
	}
}

246 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

250 
	`¥vSëupTimîI¡îru±
();

253 
	`p‹tRESTORE_CONTEXT
();

256  
pdTRUE
;

257 
	}
}

260 
	$vP‹tEndScheduÀr
( )

264 
	}
}

272 
	$vP‹tYõld
–Ë
	`__©åibuã__
 ( ( 
«ked
 ) );

273 
	$vP‹tYõld
( )

279 
asm
 volatile ( "pushÑ2" );

280 
	`_DINT
();

283 
	`p‹tSAVE_CONTEXT
();

286 
	`vTaskSwôchC⁄ãxt
();

289 
	`p‹tRESTORE_CONTEXT
();

290 
	}
}

297 
	$¥vSëupTimîI¡îru±
( )

300 
TACTL
 = 0;

303 
TACTL
 = 
TASSEL_1
;

306 
TACTL
 |
TACLR
;

309 
TACCR0
 = 
p‹tACLK_FREQUENCY_HZ
 / 
c⁄figTICK_RATE_HZ
;

312 
TACCTL0
 = 
CCIE
;

315 
TACTL
 |
TACLR
;

318 
TACTL
 |
MC_1
;

319 
	}
}

327 #i‡
c⁄figUSE_PREEMPTION
 == 1

334 
	$öãºu±
 (
TIMERA0_VECTOR
Ë
	$¥vTickISR
–Ë
	`__©åibuã__
 ( ( 
«ked
 ) );

335 
	$öãºu±
 (
TIMERA0_VECTOR
Ë
	$¥vTickISR
( )

338 
	`p‹tSAVE_CONTEXT
();

342 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

344 
	`vTaskSwôchC⁄ãxt
();

348 
	`p‹tRESTORE_CONTEXT
();

349 
	}
}

358 
	$öãºu±
 (
TIMERA0_VECTOR
Ë
	`¥vTickISR
( );

359 
	$öãºu±
 (
TIMERA0_VECTOR
Ë
	$¥vTickISR
( )

361 
	`xTaskIn¸emítTick
();

362 
	}
}

	@portable/GCC/MSP430F449/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

96 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

97 
uöt16_t
 
	tTickTy≥_t
;

98 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

100 
uöt32_t
 
	tTickTy≥_t
;

101 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

106 
	#p‹tDISABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûê–"DINT" );ásm vﬁ©ûê–"NOP" )

	)

107 
	#p‹tENABLE_INTERRUPTS
(Ë
asm
 vﬁ©ûê–"EINT" );ásm vﬁ©ûê–"NOP" )

	)

111 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
uöt16_t
 ) 0 )

	)

113 
	#p‹tENTER_CRITICAL
(Ë\

	)

115 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

117 
p‹tDISABLE_INTERRUPTS
(); \

122 
	gusCrôiˇlNe°ög
++; \

125 
	#p‹tEXIT_CRITICAL
(Ë\

	)

127 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

129 if–
	gusCrôiˇlNe°ög
 > 
	gp‹tNO_CRITICAL_SECTION_NESTING
 ) \

132 
	gusCrôiˇlNe°ög
--; \

136 if–
	gusCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

138 
p‹tENABLE_INTERRUPTS
(); \

145 
vP‹tYõld
–Ë
__©åibuã__
 ( ( 
«ked
 ) );

146 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

147 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

151 
	#p‹tBYTE_ALIGNMENT
 2

	)

152 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

153 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

157 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

158 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

160 #ifde‡
__˝lu•lus


	@portable/GCC/MicroBlaze/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	~<°rög.h
>

79 
	~<xötc.h
>

80 
	~<xötc_i.h
>

81 
	~<xtmr˘r.h
>

84 
	#p‹tINITIAL_MSR_STATE
 ( ( 
SèckTy≥_t
 ) 0x02 )

	)

89 
	#p‹tINITIAL_NESTING_VALUE
 ( 0xf‡)

	)

92 
	#p‹tCOUNTER_0
 0

	)

96 
	#p‹tISR_STACK_FILL_VALUE
 0x55555555

	)

101 vﬁ©ûê
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 
p‹tINITIAL_NESTING_VALUE
;

105 
uöt32_t
 *
	gpulISRSèck
;

113 
¥vSëupTimîI¡îru±
( );

122 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

124 *
_SDA2_BASE_
, *
_SDA_BASE_
;

125 c⁄° 
uöt32_t
 
ulR2
 = ( uöt32_àË&
_SDA2_BASE_
;

126 c⁄° 
uöt32_t
 
ulR13
 = ( uöt32_àË&
_SDA_BASE_
;

132 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

133 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x22222222;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x33333333;

137 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
ulR2
;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0a;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0b;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0c;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
ulR13
;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0f;

172 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10;

174 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11;

176 
pxT›OfSèck
--;

177 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12;

178 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x13;

180 
pxT›OfSèck
--;

181 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x14;

182 
pxT›OfSèck
--;

183 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x15;

184 
pxT›OfSèck
--;

185 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x16;

186 
pxT›OfSèck
--;

187 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x17;

188 
pxT›OfSèck
--;

189 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x18;

190 
pxT›OfSèck
--;

191 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x19;

192 
pxT›OfSèck
--;

193 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1a;

194 
pxT›OfSèck
--;

195 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1b;

196 
pxT›OfSèck
--;

197 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1c;

198 
pxT›OfSèck
--;

199 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1d;

200 
pxT›OfSèck
--;

201 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1e;

202 
pxT›OfSèck
--;

205 *
pxT›OfSèck
 = 
p‹tINITIAL_MSR_STATE
;

206 
pxT›OfSèck
--;

208 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1f;

209 
pxT›OfSèck
--;

213  
pxT›OfSèck
;

214 
	}
}

217 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

219 –
__FªeRTOS_öãºu±_H™dÀr
 )( );

220 –
vSèπFú°Task
 )( );

224 
asm
 volatile ( "laÑ6,Ñ0, __FreeRTOS_interrupt_handler \n\t" \

232 
	`¥vSëupTimîI¡îru±
();

235 
pulISRSèck
 = ( 
uöt32_t
 * ) 
	`pvP‹tMÆloc
–
c⁄figMINIMAL_STACK_SIZE
 * –
SèckTy≥_t
 ) );

238 if–
pulISRSèck
 !
NULL
 )

241 
	`mem£t
–
pulISRSèck
, 
p‹tISR_STACK_FILL_VALUE
, 
c⁄figMINIMAL_STACK_SIZE
 * –
SèckTy≥_t
 ) );

242 
pulISRSèck
 +–
c⁄figMINIMAL_STACK_SIZE
 - 1 );

245 
	`vSèπFú°Task
();

249  
pdFALSE
;

250 
	}
}

253 
	$vP‹tEndScheduÀr
( )

256 
	}
}

262 
	$vP‹tYõld
( )

264 
	`VP‹tYõldASM
( );

269 
	`p‹tENTER_CRITICAL
();

272 
asm
 volatile ( "bralidÑ14, VPortYieldASM \n\t" \

274 
	`p‹tEXIT_CRITICAL
();

275 
	}
}

281 
	$¥vSëupTimîI¡îru±
( )

283 
XTmrCå
 
xTimî
;

284 c⁄° 
uöt32_t
 
ulCou¡îVÆue
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

285 
UBa£Ty≥_t
 
uxMask
;

289 
	`XTmrCå_mDißbÀ
–
XPAR_OPB_TIMER_1_BASEADDR
, 
XPAR_OPB_TIMER_1_DEVICE_ID
 );

290 
	`XTmrCå_Inôülize
–&
xTimî
, 
XPAR_OPB_TIMER_1_DEVICE_ID
 );

291 
	`XTmrCå_mSëLﬂdReg
–
XPAR_OPB_TIMER_1_BASEADDR
, 
p‹tCOUNTER_0
, 
ulCou¡îVÆue
 );

292 
	`XTmrCå_mSëC⁄åﬁSètusReg
–
XPAR_OPB_TIMER_1_BASEADDR
, 
p‹tCOUNTER_0
, 
XTC_CSR_LOAD_MASK
 | 
XTC_CSR_INT_OCCURED_MASK
 );

296 
uxMask
 = 
	`XI¡c_In32
––
XPAR_OPB_INTC_0_BASEADDR
 + 
XIN_IER_OFFSET
 ) );

297 
uxMask
 |
XPAR_OPB_TIMER_1_INTERRUPT_MASK
;

298 
	`XI¡c_Out32
––
XPAR_OPB_INTC_0_BASEADDR
 + 
XIN_IER_OFFSET
 ), ( 
uxMask
 ) );

300 
	`XTmrCå_Sèπ
–&
xTimî
, 
XPAR_OPB_TIMER_1_DEVICE_ID
 );

301 
	`XTmrCå_mSëC⁄åﬁSètusReg
(
XPAR_OPB_TIMER_1_BASEADDR
, 
p‹tCOUNTER_0
, 
XTC_CSR_ENABLE_TMR_MASK
 | 
XTC_CSR_ENABLE_INT_MASK
 | 
XTC_CSR_AUTO_RELOAD_MASK
 | 
XTC_CSR_DOWN_COUNT_MASK
 | 
XTC_CSR_INT_OCCURED_MASK
 );

302 
	`XI¡c_mAckI¡r
–
XPAR_INTC_SINGLE_BASEADDR
, 1 );

303 
	}
}

312 
	$vTaskISRH™dÀr
( )

314 
uöt32_t
 
ulPídög
;

317 
ulPídög
 = 
	`XI¡c_In32
––
XPAR_INTC_SINGLE_BASEADDR
 + 
XIN_IVR_OFFSET
 ) );

319 if–
ulPídög
 < 
XPAR_INTC_MAX_NUM_INTR_INPUTS
 )

321 
XI¡c_Ve˘‹TabÀE¡ry
 *
pxTabÀPå
;

322 
XI¡c_C⁄fig
 *
pxC⁄fig
;

323 
uöt32_t
 
ulI¡îru±Mask
;

325 
ulI¡îru±Mask
 = ( 
uöt32_t
 ) 1 << 
ulPídög
;

328 
pxC⁄fig
 = &
XI¡c_C⁄figTabÀ
[ ( 
uöt32_t
 ) 
XPAR_INTC_SINGLE_DEVICE_ID
 ];

330 
pxTabÀPå
 = &–
pxC⁄fig
->
H™dÀrTabÀ
[ 
ulPídög
 ] );

331 if–
pxC⁄fig
->
AckBef‹eSîvi˚
 & ( 
ulI¡îru±Mask
 ) )

333 
	`XI¡c_mAckI¡r
–
pxC⁄fig
->
Ba£Addªss
, 
ulI¡îru±Mask
 );

334 
pxTabÀPå
->
	`H™dÀr
–pxTabÀPå->
CÆlBackRef
 );

338 
pxTabÀPå
->
	`H™dÀr
–pxTabÀPå->
CÆlBackRef
 );

339 
	`XI¡c_mAckI¡r
–
pxC⁄fig
->
Ba£Addªss
, 
ulI¡îru±Mask
 );

342 
	}
}

348 
	$vTickISR
–*
pvBa£Addªss
 )

350 
uöt32_t
 
ulCSR
;

353 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

355 
	`vTaskSwôchC⁄ãxt
();

359 
ulCSR
 = 
	`XTmrCå_mGëC⁄åﬁSètusReg
(
XPAR_OPB_TIMER_1_BASEADDR
, 0);

360 
	`XTmrCå_mSëC⁄åﬁSètusReg
–
XPAR_OPB_TIMER_1_BASEADDR
, 
p‹tCOUNTER_0
, 
ulCSR
 );

361 
	}
}

	@portable/GCC/MicroBlaze/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

96 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

97 
uöt16_t
 
	tTickTy≥_t
;

98 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

100 
uöt32_t
 
	tTickTy≥_t
;

101 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

106 
mi¸obœze_dißbÀ_öãºu±s
( );

107 
mi¸obœze_íabÀ_öãºu±s
( );

108 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`mi¸obœze_dißbÀ_öãºu±s
()

	)

109 
	#p‹tENABLE_INTERRUPTS
(Ë
	`mi¸obœze_íabÀ_öãºu±s
()

	)

113 
vP‹tE¡îCrôiˇl
( );

114 
vP‹tExôCrôiˇl
( );

115 
	#p‹tENTER_CRITICAL
(Ë{ \

	)

116 
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

117 
mi¸obœze_dißbÀ_öãºu±s
(); \

118 
	guxCrôiˇlNe°ög
++; \

121 
	#p‹tEXIT_CRITICAL
(Ë{ \

	)

122 
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

125 
	guxCrôiˇlNe°ög
--; \

126 if–
	guxCrôiˇlNe°ög
 == 0 ) \

130 
p‹tENABLE_INTERRUPTS
(); \

137 
vP‹tYõld
( );

138 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

140 
vTaskSwôchC⁄ãxt
();

141 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

145 
	#p‹tBYTE_ALIGNMENT
 4

	)

146 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

147 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

148 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

152 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

153 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

155 #ifde‡
__˝lu•lus


	@portable/GCC/MicroBlazeV8/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	~<°rög.h
>

79 
	~<xötc_i.h
>

80 
	~<xû_ex˚±i⁄.h
>

81 
	~<mi¸obœze_ex˚±i⁄s_g.h
>

86 
	#p‹tINITIAL_NESTING_VALUE
 ( 0xf‡)

	)

89 
	#p‹tMSR_IE
 ( 0x02U )

	)

95 
	#p‹tINITIAL_FSR
 ( 0U )

	)

101 
öt32_t
 
¥vInôüli£I¡îru±C⁄åﬁÀr
( );

106 
öt32_t
 
¥vEnsuªI¡îru±C⁄åﬁÀrIsInôüli£d
( );

113 vﬁ©ûê
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 
p‹tINITIAL_NESTING_VALUE
;

118 
uöt32_t
 *
	gpulISRSèck
;

128 vﬁ©ûê
uöt32_t
 
	gulTaskSwôchReque°ed
 = 0UL;

132 
XI¡c
 
	gxI¡îru±C⁄åﬁÀrIn°™˚
;

142 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

144 *
_SDA2_BASE_
, *
_SDA_BASE_
;

145 c⁄° 
uöt32_t
 
ulR2
 = ( uöt32_àË&
_SDA2_BASE_
;

146 c⁄° 
uöt32_t
 
ulR13
 = ( uöt32_àË&
_SDA_BASE_
;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00000000;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00000000;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00000000;

156 
pxT›OfSèck
--;

158 #i‡
XPAR_MICROBLAZE_0_USE_FPU
 == 1

160 *
pxT›OfSèck
 = 
p‹tINITIAL_FSR
;

161 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = 
	`mfm§
(Ë& ~
p‹tMSR_IE
;

168 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

178 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
ulR2
;

180 
pxT›OfSèck
--;

181 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03;

182 
pxT›OfSèck
--;

183 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04;

184 
pxT›OfSèck
--;

185 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

187 #ifde‡
p‹tPRE_LOAD_STACK_FOR_DEBUGGING


188 
pxT›OfSèck
--;

189 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06;

190 
pxT›OfSèck
--;

191 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07;

192 
pxT›OfSèck
--;

193 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08;

194 
pxT›OfSèck
--;

195 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09;

196 
pxT›OfSèck
--;

197 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0a;

198 
pxT›OfSèck
--;

199 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0b;

200 
pxT›OfSèck
--;

201 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0c;

202 
pxT›OfSèck
--;

204 
pxT›OfSèck
-= 8;

207 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
ulR13
;

208 
pxT›OfSèck
--;

209 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

210 
pxT›OfSèck
--;

211 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
NULL
;

213 #ifde‡
p‹tPRE_LOAD_STACK_FOR_DEBUGGING


214 
pxT›OfSèck
--;

215 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10;

216 
pxT›OfSèck
--;

217 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11;

218 
pxT›OfSèck
--;

219 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12;

220 
pxT›OfSèck
--;

222 
pxT›OfSèck
 -= 4;

225 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

227 #ifde‡
p‹tPRE_LOAD_STACK_FOR_DEBUGGING


228 
pxT›OfSèck
--;

229 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x14;

230 
pxT›OfSèck
--;

231 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x15;

232 
pxT›OfSèck
--;

233 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x16;

234 
pxT›OfSèck
--;

235 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x17;

236 
pxT›OfSèck
--;

237 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x18;

238 
pxT›OfSèck
--;

239 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x19;

240 
pxT›OfSèck
--;

241 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1a;

242 
pxT›OfSèck
--;

243 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1b;

244 
pxT›OfSèck
--;

245 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1c;

246 
pxT›OfSèck
--;

247 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1d;

248 
pxT›OfSèck
--;

249 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1e;

250 
pxT›OfSèck
--;

251 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1f;

252 
pxT›OfSèck
--;

254 
pxT›OfSèck
 -= 13;

259  
pxT›OfSèck
;

260 
	}
}

263 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

265 –
vP‹tSèπFú°Task
 )( );

266 
uöt32_t
 
_°ack
[];

277 
	`vAµliˇti⁄SëupTimîI¡îru±
();

280 
pulISRSèck
 = ( 
uöt32_t
 * ) 
_°ack
;

284 
pulISRSèck
 -= 2;

288 
	`vP‹tSèπFú°Task
();

291  
pdFALSE
;

292 
	}
}

295 
	$vP‹tEndScheduÀr
( )

299 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

300 
	}
}

306 
	$vP‹tYõld
( )

308 
	`VP‹tYõldASM
( );

313 
	`p‹tENTER_CRITICAL
();

317 
asm
 volatile ( "bralidÑ14, VPortYieldASM \n\t" \

320 
	`p‹tEXIT_CRITICAL
();

321 
	}
}

324 
	$vP‹tE«bÀI¡îru±
–
uöt8_t
 
ucI¡îru±ID
 )

326 
öt32_t
 
lRëu∫
;

331 
lRëu∫
 = 
	`¥vEnsuªI¡îru±C⁄åﬁÀrIsInôüli£d
();

332 if–
lRëu∫
 =
pdPASS
 )

334 
	`XI¡c_E«bÀ
–&
xI¡îru±C⁄åﬁÀrIn°™˚
, 
ucI¡îru±ID
 );

337 
	`c⁄figASSERT
–
lRëu∫
 );

338 
	}
}

341 
	$vP‹tDißbÀI¡îru±
–
uöt8_t
 
ucI¡îru±ID
 )

343 
öt32_t
 
lRëu∫
;

348 
lRëu∫
 = 
	`¥vEnsuªI¡îru±C⁄åﬁÀrIsInôüli£d
();

350 if–
lRëu∫
 =
pdPASS
 )

352 
	`XI¡c_DißbÀ
–&
xI¡îru±C⁄åﬁÀrIn°™˚
, 
ucI¡îru±ID
 );

355 
	`c⁄figASSERT
–
lRëu∫
 );

356 
	}
}

359 
Ba£Ty≥_t
 
	$xP‹tIn°ÆlI¡îru±H™dÀr
–
uöt8_t
 
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 )

361 
öt32_t
 
lRëu∫
;

366 
lRëu∫
 = 
	`¥vEnsuªI¡îru±C⁄åﬁÀrIsInôüli£d
();

368 if–
lRëu∫
 =
pdPASS
 )

370 
lRëu∫
 = 
	`XI¡c_C⁄√˘
–&
xI¡îru±C⁄åﬁÀrIn°™˚
, 
ucI¡îru±ID
, 
pxH™dÀr
, 
pvCÆlBackRef
 );

373 if–
lRëu∫
 =
XST_SUCCESS
 )

375 
lRëu∫
 = 
pdPASS
;

378 
	`c⁄figASSERT
–
lRëu∫
 =
pdPASS
 );

380  
lRëu∫
;

381 
	}
}

384 
öt32_t
 
	$¥vEnsuªI¡îru±C⁄åﬁÀrIsInôüli£d
( )

386 
öt32_t
 
lI¡îru±C⁄åﬁÀrInôüli£d
 = 
pdFALSE
;

387 
öt32_t
 
lRëu∫
;

391 if–
lI¡îru±C⁄åﬁÀrInôüli£d
 !
pdTRUE
 )

393 
lRëu∫
 = 
	`¥vInôüli£I¡îru±C⁄åﬁÀr
();

395 if–
lRëu∫
 =
pdPASS
 )

397 
lI¡îru±C⁄åﬁÀrInôüli£d
 = 
pdTRUE
;

402 
lRëu∫
 = 
pdPASS
;

405  
lRëu∫
;

406 
	}
}

413 
	$vP‹tTickISR
–*
pvUnu£d
 )

415 
	`vAµliˇti⁄CÀ¨TimîI¡îru±
( );

418 –Ë
pvUnu£d
;

426 
	`vAµliˇti⁄CÀ¨TimîI¡îru±
();

429 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

432 
ulTaskSwôchReque°ed
 = 1;

434 
	}
}

437 
öt32_t
 
	$¥vInôüli£I¡îru±C⁄åﬁÀr
( )

439 
öt32_t
 
lSètus
;

441 
lSètus
 = 
	`XI¡c_Inôülize
–&
xI¡îru±C⁄åﬁÀrIn°™˚
, 
c⁄figINTERRUPT_CONTROLLER_TO_USE
 );

443 if–
lSètus
 =
XST_SUCCESS
 )

446 
	`Xû_Ex˚±i⁄Inô
();

449 
	`XI¡c_SëI¡rSvcO±i⁄
–
xI¡îru±C⁄åﬁÀrIn°™˚
.
Ba£Addªss
, 
XIN_SVC_ALL_ISRS_OPTION
 );

454 #i‡–
MICROBLAZE_EXCEPTIONS_ENABLED
 =1 ) && ( 
c⁄figINSTALL_EXCEPTION_HANDLERS
 == 1 )

456 
	`vP‹tEx˚±i⁄sIn°ÆlH™dÀrs
();

462 
lSètus
 = 
	`XI¡c_Sèπ
–&
xI¡îru±C⁄åﬁÀrIn°™˚
, 
XIN_REAL_MODE
 );

464 if–
lSètus
 =
XST_SUCCESS
 )

466 
lSètus
 = 
pdPASS
;

470 
lSètus
 = 
pdFAIL
;

474 
	`c⁄figASSERT
–
lSètus
 =
pdPASS
 );

476  
lSètus
;

477 
	}
}

	@portable/GCC/MicroBlazeV8/port_exceptions.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

71 
	~<mi¸obœze_ex˚±i⁄s_i.h
>

72 
	~<mi¸obœze_ex˚±i⁄s_g.h
>

77 
	#p‹ãxR3_STACK_OFFSET
 4

	)

78 
	#p‹ãxR4_STACK_OFFSET
 5

	)

79 
	#p‹ãxR5_STACK_OFFSET
 6

	)

80 
	#p‹ãxR6_STACK_OFFSET
 7

	)

81 
	#p‹ãxR7_STACK_OFFSET
 8

	)

82 
	#p‹ãxR8_STACK_OFFSET
 9

	)

83 
	#p‹ãxR9_STACK_OFFSET
 10

	)

84 
	#p‹ãxR10_STACK_OFFSET
 11

	)

85 
	#p‹ãxR11_STACK_OFFSET
 12

	)

86 
	#p‹ãxR12_STACK_OFFSET
 13

	)

87 
	#p‹ãxR15_STACK_OFFSET
 16

	)

88 
	#p‹ãxR18_STACK_OFFSET
 19

	)

89 
	#p‹ãxMSR_STACK_OFFSET
 20

	)

90 
	#p‹ãxR19_STACK_OFFSET
 -1

	)

95 
	#p‹ãxASM_HANDLER_STACK_FRAME_SIZE
 84UL

	)

98 
	#p‹ãxINSTRUCTION_SIZE
 4

	)

103 #i‡–
MICROBLAZE_EXCEPTIONS_ENABLED
 =1 ) && ( 
c⁄figINSTALL_EXCEPTION_HANDLERS
 == 1 )

107 
uöt32_t
 *
	gpulSèckPoöãrOnFun˘i⁄E¡ry
 = 
NULL
;

113 
xP‹tRegi°îDump
 
	gxRegi°îDump
;

118 
vP‹tEx˚±i⁄H™dÀr
–*
pvEx˚±i⁄ID
 );

119 
vP‹tEx˚±i⁄H™dÀrE¡ry
–*
pvEx˚±i⁄ID
 );

128 
	$vAµliˇti⁄Ex˚±i⁄Regi°îDump
–
xP‹tRegi°îDump
 *
xRegi°îDump
 ) 
	`__©åibuã__
((
wók
));

129 
	$vAµliˇti⁄Ex˚±i⁄Regi°îDump
–
xP‹tRegi°îDump
 *
xRegi°îDump
 )

131 –Ë
xRegi°îDump
;

135 
	`p‹tNOP
();

137 
	}
}

140 
	$vP‹tEx˚±i⁄H™dÀr
–*
pvEx˚±i⁄ID
 )

142 *
pxCuºítTCB
;

149 
xRegi°îDump
.
xCuºítTaskH™dÀ
 = 
pxCuºítTCB
;

150 
xRegi°îDump
.
pcCuºítTaskName
 = 
	`pcTaskGëTaskName
–
NULL
 );

152 
	`c⁄figASSERT
–
pulSèckPoöãrOnFun˘i⁄E¡ry
 );

156 
xRegi°îDump
.
ulR3
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR3_STACK_OFFSET
 ];

157 
xRegi°îDump
.
ulR4
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR4_STACK_OFFSET
 ];

158 
xRegi°îDump
.
ulR5
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR5_STACK_OFFSET
 ];

159 
xRegi°îDump
.
ulR6
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR6_STACK_OFFSET
 ];

160 
xRegi°îDump
.
ulR7
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR7_STACK_OFFSET
 ];

161 
xRegi°îDump
.
ulR8
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR8_STACK_OFFSET
 ];

162 
xRegi°îDump
.
ulR9
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR9_STACK_OFFSET
 ];

163 
xRegi°îDump
.
ulR10
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR10_STACK_OFFSET
 ];

164 
xRegi°îDump
.
ulR11
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR11_STACK_OFFSET
 ];

165 
xRegi°îDump
.
ulR12
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR12_STACK_OFFSET
 ];

166 
xRegi°îDump
.
ulR15_ªtu∫_addªss_‰om_subroutöe
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR15_STACK_OFFSET
 ];

167 
xRegi°îDump
.
ulR18
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR18_STACK_OFFSET
 ];

168 
xRegi°îDump
.
ulR19
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxR19_STACK_OFFSET
 ];

169 
xRegi°îDump
.
ulMSR
 = 
pulSèckPoöãrOnFun˘i⁄E¡ry
[ 
p‹ãxMSR_STACK_OFFSET
 ];

172 
xRegi°îDump
.
ulR2_smÆl_d©a_¨ó
 = 
	`mfg¥
–
R2
 );

173 
xRegi°îDump
.
ulR13_ªad_wrôe_smÆl_d©a_¨ó
 = 
	`mfg¥
–
R13
 );

174 
xRegi°îDump
.
ulR14_ªtu∫_addªss_‰om_öãºu±
 = 
	`mfg¥
–
R14
 );

175 
xRegi°îDump
.
ulR16_ªtu∫_addªss_‰om_å≠
 = 
	`mfg¥
–
R16
 );

176 
xRegi°îDump
.
ulR17_ªtu∫_addªss_‰om_ex˚±i⁄s
 = 
	`mfg¥
–
R17
 );

177 
xRegi°îDump
.
ulR20
 = 
	`mfg¥
–
R20
 );

178 
xRegi°îDump
.
ulR21
 = 
	`mfg¥
–
R21
 );

179 
xRegi°îDump
.
ulR22
 = 
	`mfg¥
–
R22
 );

180 
xRegi°îDump
.
ulR23
 = 
	`mfg¥
–
R23
 );

181 
xRegi°îDump
.
ulR24
 = 
	`mfg¥
–
R24
 );

182 
xRegi°îDump
.
ulR25
 = 
	`mfg¥
–
R25
 );

183 
xRegi°îDump
.
ulR26
 = 
	`mfg¥
–
R26
 );

184 
xRegi°îDump
.
ulR27
 = 
	`mfg¥
–
R27
 );

185 
xRegi°îDump
.
ulR28
 = 
	`mfg¥
–
R28
 );

186 
xRegi°îDump
.
ulR29
 = 
	`mfg¥
–
R29
 );

187 
xRegi°îDump
.
ulR30
 = 
	`mfg¥
–
R30
 );

188 
xRegi°îDump
.
ulR31
 = 
	`mfg¥
–
R31
 );

189 
xRegi°îDump
.
ulR1_SP
 = ( ( 
uöt32_t
 ) 
pulSèckPoöãrOnFun˘i⁄E¡ry
 ) + 
p‹ãxASM_HANDLER_STACK_FRAME_SIZE
;

190 
xRegi°îDump
.
ulEAR
 = 
	`m„¨
();

191 
xRegi°îDump
.
ulESR
 = 
	`m„§
();

192 
xRegi°îDump
.
ulEDR
 = 
	`m„dr
();

197 
xRegi°îDump
.
ulPC
 = xRegi°îDump.
ulR17_ªtu∫_addªss_‰om_ex˚±i⁄s
 - 
p‹ãxINSTRUCTION_SIZE
;

199 #i‡
XPAR_MICROBLAZE_0_USE_FPU
 == 1

201 
xRegi°îDump
.
ulFSR
 = 
	`mff§
();

205 
xRegi°îDump
.
ulFSR
 = 0UL;

212  ( 
uöt32_t
 ) 
pvEx˚±i⁄ID
 )

214 
XEXC_ID_FSL
 :

215 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( 
öt8_t
 * const ) "XEXC_ID_FSL";

218 
XEXC_ID_UNALIGNED_ACCESS
 :

219 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( 
öt8_t
 * const ) "XEXC_ID_UNALIGNED_ACCESS";

222 
XEXC_ID_ILLEGAL_OPCODE
 :

223 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( 
öt8_t
 * const ) "XEXC_ID_ILLEGAL_OPCODE";

226 
XEXC_ID_M_AXI_I_EXCEPTION
 :

227 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( 
öt8_t
 * const ) "XEXC_ID_M_AXI_I_EXCEPTION or XEXC_ID_IPLB_EXCEPTION";

230 
XEXC_ID_M_AXI_D_EXCEPTION
 :

231 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( 
öt8_t
 * const ) "XEXC_ID_M_AXI_D_EXCEPTION or XEXC_ID_DPLB_EXCEPTION";

234 
XEXC_ID_DIV_BY_ZERO
 :

235 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( 
öt8_t
 * const ) "XEXC_ID_DIV_BY_ZERO";

238 
XEXC_ID_STACK_VIOLATION
 :

239 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( 
öt8_t
 * const ) "XEXC_ID_STACK_VIOLATION or XEXC_ID_MMU";

242 #i‡
XPAR_MICROBLAZE_0_USE_FPU
 == 1

244 
XEXC_ID_FPU
 :

245 
xRegi°îDump
.
pcEx˚±i⁄Cau£
 = ( 
öt8_t
 * const ) "XEXC_ID_FPU see ulFSR value";

256 
	`vAµliˇti⁄Ex˚±i⁄Regi°îDump
–&
xRegi°îDump
 );

261 
	`p‹tNOP
();

263 
	}
}

266 
	$vP‹tEx˚±i⁄sIn°ÆlH™dÀrs
( )

268 
uöt32_t
 
ulH™dÀrsAÃódyIn°ÆÀd
 = 
pdFALSE
;

270 if–
ulH™dÀrsAÃódyIn°ÆÀd
 =
pdFALSE
 )

272 
ulH™dÀrsAÃódyIn°ÆÀd
 = 
pdTRUE
;

274 #i‡
XPAR_MICROBLAZE_0_UNALIGNED_EXCEPTIONS
 == 1

275 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_UNALIGNED_ACCESS
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_UNALIGNED_ACCESS );

278 #i‡
XPAR_MICROBLAZE_0_ILL_OPCODE_EXCEPTION
 == 1

279 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_ILLEGAL_OPCODE
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_ILLEGAL_OPCODE );

282 #i‡
XPAR_MICROBLAZE_0_M_AXI_I_BUS_EXCEPTION
 == 1

283 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_M_AXI_I_EXCEPTION
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_M_AXI_I_EXCEPTION );

286 #i‡
XPAR_MICROBLAZE_0_M_AXI_D_BUS_EXCEPTION
 == 1

287 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_M_AXI_D_EXCEPTION
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_M_AXI_D_EXCEPTION );

290 #i‡
XPAR_MICROBLAZE_0_IPLB_BUS_EXCEPTION
 == 1

291 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_IPLB_EXCEPTION
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_IPLB_EXCEPTION );

294 #i‡
XPAR_MICROBLAZE_0_DPLB_BUS_EXCEPTION
 == 1

295 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_DPLB_EXCEPTION
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_DPLB_EXCEPTION );

298 #i‡
XPAR_MICROBLAZE_0_DIV_ZERO_EXCEPTION
 == 1

299 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_DIV_BY_ZERO
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_DIV_BY_ZERO );

302 #i‡
XPAR_MICROBLAZE_0_FPU_EXCEPTION
 == 1

303 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_FPU
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_FPU );

306 #i‡
XPAR_MICROBLAZE_0_FSL_EXCEPTION
 == 1

307 
	`mi¸obœze_ªgi°î_ex˚±i⁄_h™dÀr
–
XEXC_ID_FSL
, 
vP‹tEx˚±i⁄H™dÀrE¡ry
, ( * ) XEXC_ID_FSL );

310 
	}
}

	@portable/GCC/MicroBlazeV8/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


74 
	~<mb_öãrÁ˚.h
>

75 
	~<x∑ømëîs.h
>

88 
	#p‹tCHAR
 

	)

89 
	#p‹tFLOAT
 

	)

90 
	#p‹tDOUBLE
 

	)

91 
	#p‹tLONG
 

	)

92 
	#p‹tSHORT
 

	)

93 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

94 
	#p‹tBASE_TYPE
 

	)

96 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

97 
	tBa£Ty≥_t
;

98 
	tUBa£Ty≥_t
;

100 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

101 
uöt16_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

104 
uöt32_t
 
	tTickTy≥_t
;

105 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

110 
mi¸obœze_dißbÀ_öãºu±s
( );

111 
mi¸obœze_íabÀ_öãºu±s
( );

112 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`mi¸obœze_dißbÀ_öãºu±s
()

	)

113 
	#p‹tENABLE_INTERRUPTS
(Ë
	`mi¸obœze_íabÀ_öãºu±s
()

	)

118 
vP‹tE¡îCrôiˇl
( );

119 
vP‹tExôCrôiˇl
( );

120 
	#p‹tENTER_CRITICAL
(Ë{ \

	)

121 vﬁ©ûê
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

122 
mi¸obœze_dißbÀ_öãºu±s
(); \

123 
	guxCrôiˇlNe°ög
++; \

126 
	#p‹tEXIT_CRITICAL
(Ë{ \

	)

127 vﬁ©ûê
UBa£Ty≥_t
 
uxCrôiˇlNe°ög
; \

130 
	guxCrôiˇlNe°ög
--; \

131 if–
	guxCrôiˇlNe°ög
 == 0 ) \

135 
p‹tENABLE_INTERRUPTS
(); \

142 
vP‹tYõld
( );

143 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

151 vﬁ©ûê
uöt32_t
 
ulTaskSwôchReque°ed
;

152 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) 
ulTaskSwôchReque°ed
 = 1

	)

156 
	#p‹tBYTE_ALIGNMENT
 4

	)

157 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

158 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

159 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

163 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

164 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

170 
	sPORT_REGISTER_DUMP


174 
uöt32_t
 
	gulR1_SP
;

175 
uöt32_t
 
	gulR2_smÆl_d©a_¨ó
;

176 
uöt32_t
 
	gulR3
;

177 
uöt32_t
 
	gulR4
;

178 
uöt32_t
 
	gulR5
;

179 
uöt32_t
 
	gulR6
;

180 
uöt32_t
 
	gulR7
;

181 
uöt32_t
 
	gulR8
;

182 
uöt32_t
 
	gulR9
;

183 
uöt32_t
 
	gulR10
;

184 
uöt32_t
 
	gulR11
;

185 
uöt32_t
 
	gulR12
;

186 
uöt32_t
 
	gulR13_ªad_wrôe_smÆl_d©a_¨ó
;

187 
uöt32_t
 
	gulR14_ªtu∫_addªss_‰om_öãºu±
;

188 
uöt32_t
 
	gulR15_ªtu∫_addªss_‰om_subroutöe
;

189 
uöt32_t
 
	gulR16_ªtu∫_addªss_‰om_å≠
;

190 
uöt32_t
 
	gulR17_ªtu∫_addªss_‰om_ex˚±i⁄s
;

191 
uöt32_t
 
	gulR18
;

192 
uöt32_t
 
	gulR19
;

193 
uöt32_t
 
	gulR20
;

194 
uöt32_t
 
	gulR21
;

195 
uöt32_t
 
	gulR22
;

196 
uöt32_t
 
	gulR23
;

197 
uöt32_t
 
	gulR24
;

198 
uöt32_t
 
	gulR25
;

199 
uöt32_t
 
	gulR26
;

200 
uöt32_t
 
	gulR27
;

201 
uöt32_t
 
	gulR28
;

202 
uöt32_t
 
	gulR29
;

203 
uöt32_t
 
	gulR30
;

204 
uöt32_t
 
	gulR31
;

205 
uöt32_t
 
	gulPC
;

206 
uöt32_t
 
	gulESR
;

207 
uöt32_t
 
	gulMSR
;

208 
uöt32_t
 
	gulEAR
;

209 
uöt32_t
 
	gulFSR
;

210 
uöt32_t
 
	gulEDR
;

215 
öt8_t
 *
	gpcEx˚±i⁄Cau£
;

220 
öt8_t
 *
	gpcCuºítTaskName
;

224 * 
	gxCuºítTaskH™dÀ
;

226 } 
	txP‹tRegi°îDump
;

264 
Ba£Ty≥_t
 
xP‹tIn°ÆlI¡îru±H™dÀr
–
uöt8_t
 
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 );

285 
vP‹tE«bÀI¡îru±
–
uöt8_t
 
ucI¡îru±ID
 );

305 
vP‹tDißbÀI¡îru±
–
uöt8_t
 
ucI¡îru±ID
 );

317 
vAµliˇti⁄SëupTimîI¡îru±
( );

330 
vAµliˇti⁄CÀ¨TimîI¡îru±
( );

353 
vP‹tEx˚±i⁄sIn°ÆlH™dÀrs
( );

369 
vAµliˇti⁄Ex˚±i⁄Regi°îDump
–
xP‹tRegi°îDump
 *
xRegi°îDump
 );

372 #ifde‡
__˝lu•lus


	@portable/GCC/NiosII/port.c

71 
	~<°rög.h
>

72 
	~<î∫o.h
>

75 
	~"sys/Æt_úq.h
"

76 
	~"Æãø_avÆ⁄_timî_ªgs.h
"

77 
	~"¥iv/Æt_úq_èbÀ.h
"

80 
	~"FªeRTOS.h
"

81 
	~"èsk.h
"

84 
	#p‹tINITIAL_ESTATUS
 ( 
SèckTy≥_t
 ) 0x01

	)

91 
¥vSëupTimîI¡îru±
( );

96 
vP‹tSysTickH™dÀr
–* 
c⁄ãxt
, 
Æt_u32
 
id
 );

100 
	$¥vRódGp
–
uöt32_t
 *
ulVÆue
 )

102 
	`asm
–"°w gp, (%0)" :: "r"(
ulVÆue
) );

103 
	}
}

109 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

111 
SèckTy≥_t
 *
pxFømePoöãr
 = 
pxT›OfSèck
 - 1;

112 
SèckTy≥_t
 
xGlobÆPoöãr
;

114 
	`¥vRódGp
–&
xGlobÆPoöãr
 );

117 *
pxT›OfSèck
 = 0xdeadbeef;

118 
pxT›OfSèck
--;

120 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxFømePoöãr
;

121 
pxT›OfSèck
--;

123 *
pxT›OfSèck
 = 
xGlobÆPoöãr
;

126 
pxT›OfSèck
 -= 9;

128 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

129 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = 
p‹tINITIAL_ESTATUS
;

134 
pxT›OfSèck
 -= 12;

136 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

139 
pxT›OfSèck
 -= 5;

141  
pxT›OfSèck
;

142 
	}
}

148 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

152 
	`¥vSëupTimîI¡îru±
();

155 
asm
 volatile ( " moviaÑ2,Ñestore_sp_from_pxCurrentTCB \n"

160 
	}
}

163 
	$vP‹tEndScheduÀr
( )

167 
	}
}

174 
	$¥vSëupTimîI¡îru±
( )

177 i‡–-
EINVAL
 =
	`Æt_úq_ªgi°î
–
SYS_CLK_IRQ
, 0x0, 
vP‹tSysTickH™dÀr
 ) )

180 
	`asm
( "break" );

185 
	`IOWR_ALTERA_AVALON_TIMER_CONTROL
–
SYS_CLK_BASE
, 
ALTERA_AVALON_TIMER_CONTROL_STOP_MSK
 );

186 
	`IOWR_ALTERA_AVALON_TIMER_PERIODL
–
SYS_CLK_BASE
, ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) & 0xFFFF );

187 
	`IOWR_ALTERA_AVALON_TIMER_PERIODH
–
SYS_CLK_BASE
, ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) >> 16 );

188 
	`IOWR_ALTERA_AVALON_TIMER_CONTROL
–
SYS_CLK_BASE
, 
ALTERA_AVALON_TIMER_CONTROL_CONT_MSK
 | 
ALTERA_AVALON_TIMER_CONTROL_START_MSK
 | 
ALTERA_AVALON_TIMER_CONTROL_ITO_MSK
 );

192 
	`IOWR_ALTERA_AVALON_TIMER_STATUS
–
SYS_CLK_BASE
, ~
ALTERA_AVALON_TIMER_STATUS_TO_MSK
 );

193 
	}
}

196 
	$vP‹tSysTickH™dÀr
–* 
c⁄ãxt
, 
Æt_u32
 
id
 )

199 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

201 
	`vTaskSwôchC⁄ãxt
();

205 
	`IOWR_ALTERA_AVALON_TIMER_STATUS
–
SYS_CLK_BASE
, ~
ALTERA_AVALON_TIMER_STATUS_TO_MSK
 );

206 
	}
}

215 
Æt_úq_ªgi°î
–
Æt_u32
 
id
, * 
c⁄ãxt
, (*
h™dÀr
)(*,ált_u32) )

217 
rc
 = -
EINVAL
;

218 
Æt_úq_c⁄ãxt
 
°©us
;

220 i‡(
id
 < 
ALT_NIRQ
)

228 
°©us
 = 
	`Æt_úq_dißbÀ_Æl
 ();

230 
Æt_úq
[
id
].
h™dÀr
 = handler;

231 
Æt_úq
[
id
].
c⁄ãxt
 = context;

233 
rc
 = (
h™dÀr
Ë? 
	`Æt_úq_íabÀ
 (
id
): 
	`Æt_úq_dißbÀ
 (id);

238  
rc
;

239 
	}
}

	@portable/GCC/NiosII/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


73 
	~"sys/Æt_úq.h
"

86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

92 
	#p‹tBASE_TYPE
 

	)

94 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

95 
	tBa£Ty≥_t
;

96 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

108 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

109 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

110 
	#p‹tBYTE_ALIGNMENT
 4

	)

111 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

112 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

115 
vTaskSwôchC⁄ãxt
( );

116 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"å≠" );

	)

117 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
	`vTaskSwôchC⁄ãxt
()

	)

121 
__asm__
( "\n\t.globl save_context" );

125 
vTaskE¡îCrôiˇl
( );

126 
vTaskExôCrôiˇl
( );

128 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`Æt_úq_dißbÀ_Æl
()

	)

129 
	#p‹tENABLE_INTERRUPTS
(Ë
	`Æt_úq_íabÀ_Æl
–0x01 );

	)

130 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

131 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

135 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

136 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

138 #ifde‡
__˝lu•lus


	@portable/GCC/PPC405_Xilinx/FPU_Macros.h

68 
	#åa˚TASK_SWITCHED_OUT
(Ë\

	)

69 if–
	gpxCuºítTCB
->
	gpxTaskTag
 !
NULL
 ) \

71 
vP‹tSaveFPURegi°îs
( * ); \

72 
vP‹tSaveFPURegi°îs
––* ) ( 
pxCuºítTCB
->
pxTaskTag
 ) ); \

77 
	#åa˚TASK_SWITCHED_IN
(Ë\

	)

78 if–
	gpxCuºítTCB
->
	gpxTaskTag
 !
NULL
 ) \

80 
vP‹tRe°‹eFPURegi°îs
( * ); \

81 
vP‹tRe°‹eFPURegi°îs
––* ) ( 
pxCuºítTCB
->
pxTaskTag
 ) ); \

	@portable/GCC/PPC405_Xilinx/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	~"xtime_l.h
"

77 
	~"xötc.h
"

78 
	~"xötc_i.h
"

83 
	#p‹tCRITICAL_INTERRUPT_ENABLE
 ( 1UL << 17UL )

	)

84 
	#p‹tEXTERNAL_INTERRUPT_ENABLE
 ( 1UL << 15UL )

	)

85 
	#p‹tMACHINE_CHECK_ENABLE
 ( 1UL << 12UL )

	)

87 #i‡
c⁄figUSE_FPU
 == 1

88 
	#p‹tAPU_PRESENT
 ( 1UL << 25UL )

	)

89 
	#p‹tFCM_FPU_PRESENT
 ( 1UL << 13UL )

	)

91 
	#p‹tAPU_PRESENT
 ( 0UL )

	)

92 
	#p‹tFCM_FPU_PRESENT
 ( 0UL )

	)

95 
	#p‹tINITIAL_MSR
 ( 
p‹tCRITICAL_INTERRUPT_ENABLE
 | 
p‹tEXTERNAL_INTERRUPT_ENABLE
 | 
p‹tMACHINE_CHECK_ENABLE
 | 
p‹tAPU_PRESENT
 | 
p‹tFCM_FPU_PRESENT
 )

	)

98 c⁄° 
_SDA_BASE_
;

99 c⁄° 
_SDA2_BASE_
;

106 
¥vSëupTimîI¡îru±
( );

111 
vP‹tTickISR
( );

116 
vP‹tYõld
( );

122 
vP‹tSèπFú°Task
( );

127 
XI¡c
 
	gxI¡îru±C⁄åﬁÀr
;

137 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

140 *
pxT›OfSèck
 = 0xDEADBEEF;

141 
pxT›OfSèck
--;

144 
pxT›OfSèck
 -= 20;

147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) &
_SDA_BASE_
;

148 
pxT›OfSèck
 -= 10;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

152 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) &
_SDA2_BASE_
;

156 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = 0x10000001UL;;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = 0x00000000UL;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = 0x00000000UL;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = 0x00000000UL;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = 0x00000000UL;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
vP‹tEndScheduÀr
;

171 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

173 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = 
p‹tINITIAL_MSR
;

175 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
vP‹tEndScheduÀr
;

177 
pxT›OfSèck
--;

178 *
pxT›OfSèck
 = 0x00000000UL;

180  
pxT›OfSèck
;

181 
	}
}

184 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

186 
	`¥vSëupTimîI¡îru±
();

187 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_SYSTEM_CALL
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tYõld
, ( * ) 0 );

188 
	`vP‹tSèπFú°Task
();

191  
pdFALSE
;

192 
	}
}

195 
	$vP‹tEndScheduÀr
( )

199 
	}
}

205 
	$¥vSëupTimîI¡îru±
( )

207 c⁄° 
uöt32_t
 
ulI¡îvÆ
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL );

209 
	`XTime_PITCÀ¨I¡îru±
();

210 
	`XTime_FITCÀ¨I¡îru±
();

211 
	`XTime_WDTCÀ¨I¡îru±
();

212 
	`XTime_WDTDißbÀI¡îru±
();

213 
	`XTime_FITDißbÀI¡îru±
();

215 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_PIT_INT
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tTickISR
, ( * ) 0 );

217 
	`XTime_PITE«bÀAutoRñﬂd
();

218 
	`XTime_PITSëI¡îvÆ
–
ulI¡îvÆ
 );

219 
	`XTime_PITE«bÀI¡îru±
();

220 
	}
}

223 
	$vP‹tISRH™dÀr
–*
pvNuŒDoNŸU£
 )

225 
uöt32_t
 
ulI¡îru±Sètus
, 
ulI¡îru±Mask
 = 1UL;

226 
Ba£Ty≥_t
 
xI¡îru±Numbî
;

227 
XI¡c_C⁄fig
 *
pxI¡îru±C⁄åﬁÀr
;

228 
XI¡c_Ve˘‹TabÀE¡ry
 *
pxTabÀ
;

231 –Ë
pvNuŒDoNŸU£
;

235 
pxI¡îru±C⁄åﬁÀr
 = &
XI¡c_C⁄figTabÀ
[ 
XPAR_XPS_INTC_0_DEVICE_ID
 ];

238 
ulI¡îru±Sètus
 = 
	`XI¡c_mGëI¡rSètus
–
pxI¡îru±C⁄åﬁÀr
->
Ba£Addªss
 );

240  
xI¡îru±Numbî
 = 0; xI¡îru±Numbî < 
XPAR_INTC_MAX_NUM_INTR_INPUTS
; xInterruptNumber++ )

242 if–
ulI¡îru±Sètus
 & 0x01UL )

245 
	`XI¡c_mAckI¡r
–
pxI¡îru±C⁄åﬁÀr
->
Ba£Addªss
, 
ulI¡îru±Mask
 );

248 
pxTabÀ
 = &–
pxI¡îru±C⁄åﬁÀr
->
H™dÀrTabÀ
[ 
xI¡îru±Numbî
 ] );

249 
pxTabÀ
->
	`H™dÀr
–pxTabÀ->
CÆlBackRef
 );

253 
ulI¡îru±Mask
 <<= 0x01UL;

254 
ulI¡îru±Sètus
 >>= 0x01UL;

257 if–
ulI¡îru±Sètus
 == 0UL )

262 
	}
}

265 
	$vP‹tSëupI¡îru±C⁄åﬁÀr
( )

267 
	`vP‹tISRWøµî
( );

272 
	`XExc_mDißbÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

273 
	`XExc_Inô
();

278 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_NON_CRITICAL_INT
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tISRWøµî
, 
NULL
 );

279 
	`XI¡c_Inôülize
–&
xI¡îru±C⁄åﬁÀr
, 
XPAR_XPS_INTC_0_DEVICE_ID
 );

280 
	`XI¡c_Sèπ
–&
xI¡îru±C⁄åﬁÀr
, 
XIN_REAL_MODE
 );

281 
	}
}

284 
Ba£Ty≥_t
 
	$xP‹tIn°ÆlI¡îru±H™dÀr
–
uöt8_t
 
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 )

286 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

291 if–
XST_SUCCESS
 =
	`XI¡c_C⁄√˘
–&
xI¡îru±C⁄åﬁÀr
, 
ucI¡îru±ID
, 
pxH™dÀr
, 
pvCÆlBackRef
 ) )

293 
	`XI¡c_E«bÀ
–&
xI¡îru±C⁄åﬁÀr
, 
ucI¡îru±ID
 );

294 
xRëu∫
 = 
pdPASS
;

297  
xRëu∫
;

298 
	}
}

	@portable/GCC/PPC405_Xilinx/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 
	~"xex˚±i⁄_l.h
"

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

92 
	#p‹tBASE_TYPE
 

	)

94 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

95 
	tBa£Ty≥_t
;

96 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

109 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

112 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`XExc_mDißbÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

	)

113 
	#p‹tENABLE_INTERRUPTS
(Ë
	`XExc_mE«bÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

	)

118 
vTaskE¡îCrôiˇl
( );

119 
vTaskExôCrôiˇl
( );

120 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

121 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

126 
vP‹tYõld
( );

127 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"SC \n\àNOP" )

	)

128 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

133 
	#p‹tBYTE_ALIGNMENT
 8

	)

134 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

135 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

136 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

139 
	#p‹tNO_FLOP_REGISTERS_TO_SAVE
 ( 32 + 1 )

	)

144 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

145 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

148 
vP‹tSëupI¡îru±C⁄åﬁÀr
( );

149 
Ba£Ty≥_t
 
xP‹tIn°ÆlI¡îru±H™dÀr
–
uöt8_t
 
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 );

151 #ifde‡
__˝lu•lus


	@portable/GCC/PPC440_Xilinx/FPU_Macros.h

68 
	#åa˚TASK_SWITCHED_OUT
(Ë\

	)

69 if–
	gpxCuºítTCB
->
	gpxTaskTag
 !
NULL
 ) \

71 
vP‹tSaveFPURegi°îs
( * ); \

72 
vP‹tSaveFPURegi°îs
––* ) ( 
pxCuºítTCB
->
pxTaskTag
 ) ); \

77 
	#åa˚TASK_SWITCHED_IN
(Ë\

	)

78 if–
	gpxCuºítTCB
->
	gpxTaskTag
 !
NULL
 ) \

80 
vP‹tRe°‹eFPURegi°îs
( * ); \

81 
vP‹tRe°‹eFPURegi°îs
––* ) ( 
pxCuºítTCB
->
pxTaskTag
 ) ); \

	@portable/GCC/PPC440_Xilinx/port.c

72 
	~"FªeRTOS.h
"

73 
	~"èsk.h
"

76 
	~"xtime_l.h
"

77 
	~"xötc.h
"

78 
	~"xötc_i.h
"

83 
	#p‹tCRITICAL_INTERRUPT_ENABLE
 ( 1UL << 17UL )

	)

84 
	#p‹tEXTERNAL_INTERRUPT_ENABLE
 ( 1UL << 15UL )

	)

85 
	#p‹tMACHINE_CHECK_ENABLE
 ( 1UL << 12UL )

	)

87 #i‡
c⁄figUSE_FPU
 == 1

88 
	#p‹tAPU_PRESENT
 ( 1UL << 25UL )

	)

89 
	#p‹tFCM_FPU_PRESENT
 ( 1UL << 13UL )

	)

91 
	#p‹tAPU_PRESENT
 ( 0UL )

	)

92 
	#p‹tFCM_FPU_PRESENT
 ( 0UL )

	)

95 
	#p‹tINITIAL_MSR
 ( 
p‹tCRITICAL_INTERRUPT_ENABLE
 | 
p‹tEXTERNAL_INTERRUPT_ENABLE
 | 
p‹tMACHINE_CHECK_ENABLE
 | 
p‹tAPU_PRESENT
 | 
p‹tFCM_FPU_PRESENT
 )

	)

98 c⁄° 
_SDA_BASE_
;

99 c⁄° 
_SDA2_BASE_
;

106 
¥vSëupTimîI¡îru±
( );

111 
vP‹tTickISR
( );

116 
vP‹tYõld
( );

122 
vP‹tSèπFú°Task
( );

127 
XI¡c
 
	gxI¡îru±C⁄åﬁÀr
;

137 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

140 *
pxT›OfSèck
 = 0xDEADBEEF;

141 
pxT›OfSèck
--;

144 
pxT›OfSèck
 -= 20;

147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) &
_SDA_BASE_
;

148 
pxT›OfSèck
 -= 10;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

152 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) &
_SDA2_BASE_
;

156 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = 0x10000001UL;;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = 0x00000000UL;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = 0x00000000UL;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = 0x00000000UL;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = 0x00000000UL;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
vP‹tEndScheduÀr
;

171 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

173 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = 
p‹tINITIAL_MSR
;

175 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
vP‹tEndScheduÀr
;

177 
pxT›OfSèck
--;

178 *
pxT›OfSèck
 = 0x00000000UL;

180  
pxT›OfSèck
;

181 
	}
}

184 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

186 
	`¥vSëupTimîI¡îru±
();

187 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_SYSTEM_CALL
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tYõld
, ( * ) 0 );

188 
	`vP‹tSèπFú°Task
();

191  
pdFALSE
;

192 
	}
}

195 
	$vP‹tEndScheduÀr
( )

199 
	}
}

205 
	$¥vSëupTimîI¡îru±
( )

207 c⁄° 
uöt32_t
 
ulI¡îvÆ
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL );

209 
	`XTime_DECCÀ¨I¡îru±
();

210 
	`XTime_FITCÀ¨I¡îru±
();

211 
	`XTime_WDTCÀ¨I¡îru±
();

212 
	`XTime_WDTDißbÀI¡îru±
();

213 
	`XTime_FITDißbÀI¡îru±
();

215 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_DEC_INT
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tTickISR
, ( * ) 0 );

217 
	`XTime_DECE«bÀAutoRñﬂd
();

218 
	`XTime_DECSëI¡îvÆ
–
ulI¡îvÆ
 );

219 
	`XTime_DECE«bÀI¡îru±
();

220 
	}
}

223 
	$vP‹tISRH™dÀr
–*
pvNuŒDoNŸU£
 )

225 
uöt32_t
 
ulI¡îru±Sètus
, 
ulI¡îru±Mask
 = 1UL;

226 
Ba£Ty≥_t
 
xI¡îru±Numbî
;

227 
XI¡c_C⁄fig
 *
pxI¡îru±C⁄åﬁÀr
;

228 
XI¡c_Ve˘‹TabÀE¡ry
 *
pxTabÀ
;

231 –Ë
pvNuŒDoNŸU£
;

235 
pxI¡îru±C⁄åﬁÀr
 = &
XI¡c_C⁄figTabÀ
[ 
XPAR_XPS_INTC_0_DEVICE_ID
 ];

238 
ulI¡îru±Sètus
 = 
	`XI¡c_mGëI¡rSètus
–
pxI¡îru±C⁄åﬁÀr
->
Ba£Addªss
 );

240  
xI¡îru±Numbî
 = 0; xI¡îru±Numbî < 
XPAR_INTC_MAX_NUM_INTR_INPUTS
; xInterruptNumber++ )

242 if–
ulI¡îru±Sètus
 & 0x01UL )

245 
	`XI¡c_mAckI¡r
–
pxI¡îru±C⁄åﬁÀr
->
Ba£Addªss
, 
ulI¡îru±Mask
 );

248 
pxTabÀ
 = &–
pxI¡îru±C⁄åﬁÀr
->
H™dÀrTabÀ
[ 
xI¡îru±Numbî
 ] );

249 
pxTabÀ
->
	`H™dÀr
–pxTabÀ->
CÆlBackRef
 );

253 
ulI¡îru±Mask
 <<= 0x01UL;

254 
ulI¡îru±Sètus
 >>= 0x01UL;

257 if–
ulI¡îru±Sètus
 == 0UL )

262 
	}
}

265 
	$vP‹tSëupI¡îru±C⁄åﬁÀr
( )

267 
	`vP‹tISRWøµî
( );

272 
	`XExc_mDißbÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

273 
	`XExc_Inô
();

278 
	`XExc_Regi°îH™dÀr
–
XEXC_ID_NON_CRITICAL_INT
, ( 
XEx˚±i⁄H™dÀr
 ) 
vP‹tISRWøµî
, 
NULL
 );

279 
	`XI¡c_Inôülize
–&
xI¡îru±C⁄åﬁÀr
, 
XPAR_XPS_INTC_0_DEVICE_ID
 );

280 
	`XI¡c_Sèπ
–&
xI¡îru±C⁄åﬁÀr
, 
XIN_REAL_MODE
 );

281 
	}
}

284 
Ba£Ty≥_t
 
	$xP‹tIn°ÆlI¡îru±H™dÀr
–
uöt8_t
 
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 )

286 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

291 if–
XST_SUCCESS
 =
	`XI¡c_C⁄√˘
–&
xI¡îru±C⁄åﬁÀr
, 
ucI¡îru±ID
, 
pxH™dÀr
, 
pvCÆlBackRef
 ) )

293 
	`XI¡c_E«bÀ
–&
xI¡îru±C⁄åﬁÀr
, 
ucI¡îru±ID
 );

294 
xRëu∫
 = 
pdPASS
;

297  
xRëu∫
;

298 
	}
}

	@portable/GCC/PPC440_Xilinx/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 
	~"xex˚±i⁄_l.h
"

71 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

92 
	#p‹tBASE_TYPE
 

	)

94 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

95 
	tBa£Ty≥_t
;

96 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

109 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

112 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`XExc_mDißbÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

	)

113 
	#p‹tENABLE_INTERRUPTS
(Ë
	`XExc_mE«bÀEx˚±i⁄s
–
XEXC_NON_CRITICAL
 );

	)

118 
vTaskE¡îCrôiˇl
( );

119 
vTaskExôCrôiˇl
( );

120 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

121 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

126 
vP‹tYõld
( );

127 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"SC \n\àNOP" )

	)

128 
	#p‹tYIELD_FROM_ISR
(Ë
	`vTaskSwôchC⁄ãxt
()

	)

133 
	#p‹tBYTE_ALIGNMENT
 8

	)

134 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

135 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

136 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

139 
	#p‹tNO_FLOP_REGISTERS_TO_SAVE
 ( 32 + 1 )

	)

144 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

145 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

148 
vP‹tSëupI¡îru±C⁄åﬁÀr
( );

149 
Ba£Ty≥_t
 
xP‹tIn°ÆlI¡îru±H™dÀr
–
uöt8_t
 
ucI¡îru±ID
, 
XI¡îru±H™dÀr
 
pxH™dÀr
, *
pvCÆlBackRef
 );

151 #ifde‡
__˝lu•lus


	@portable/GCC/RX100/port.c

71 
	~"limôs.h
"

74 
	~"FªeRTOS.h
"

75 
	~"èsk.h
"

78 
	~"°rög.h
"

81 
	~"iodeföe.h
"

87 
	#p‹tINITIAL_PSW
 ( ( 
SèckTy≥_t
 ) 0x00030000 )

	)

91 #i‡–
c⁄figUSE_TICKLESS_IDLE
 == 0 )

93 
	#p‹tCLOCK_DIVISOR
 8UL

	)

94 #ñi‡–
c⁄figPERIPHERAL_CLOCK_HZ
 >= 12000000 )

95 
	#p‹tCLOCK_DIVISOR
 512UL

	)

96 #ñi‡–
c⁄figPERIPHERAL_CLOCK_HZ
 >= 6000000 )

97 
	#p‹tCLOCK_DIVISOR
 128UL

	)

98 #ñi‡–
c⁄figPERIPHERAL_CLOCK_HZ
 >= 1000000 )

99 
	#p‹tCLOCK_DIVISOR
 32UL

	)

101 
	#p‹tCLOCK_DIVISOR
 8UL

	)

109 
	#p‹tDISABLE_INTERRUPTS_FROM_KERNEL_ISR
(Ë
__asm
 vﬁ©ûê–"MVTIPL %0" ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
Ë)

	)

110 
	#p‹tENABLE_INTERRUPTS_FROM_KERNEL_ISR
(Ë
__asm
 vﬁ©ûê–"MVTIPL %0" ::"i"(
c⁄figKERNEL_INTERRUPT_PRIORITY
Ë)

	)

114 
	#p‹tUNLOCK_KEY
 0xA50B

	)

115 
	#p‹tLOCK_KEY
 0xA500

	)

123 
	$¥vSèπFú°Task
–Ë
	`__©åibuã__
((
«ked
));

130 
	$vP‹tSo·w¨eI¡îru±ISR
–Ë
	`__©åibuã__
((
«ked
));

135 
	$vP‹tTickISR
–Ë
	`__©åibuã__
((
öãºu±
));

143 
	`¥vSëupTimîI¡îru±
( );

144 #i‚de‡
c⁄figSETUP_TICK_INTERRUPT


147 
	#c⁄figSETUP_TICK_INTERRUPT
(Ë
	`¥vSëupTimîI¡îru±
()

	)

155 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

156 
	`¥vSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

162 *
pxCuºítTCB
;

165 c⁄° 
uöt32_t
 
ulM©chVÆueF‹O√Tick
 = ( ( 
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tCLOCK_DIVISOR
 ) / 
c⁄figTICK_RATE_HZ
 );

167 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

173 c⁄° 
TickTy≥_t
 
xMaximumPossibÀSuµªs£dTicks
 = 
USHRT_MAX
 / ( ( 
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tCLOCK_DIVISOR
 ) / 
c⁄figTICK_RATE_HZ
 );

178 vﬁ©ûê
uöt32_t
 
ulTickFœg
 = 
pdFALSE
;

186 c⁄° 
uöt32_t
 
ulSt›≥dTimîCom≥nßti⁄
 = 100UL / ( 
c⁄figCPU_CLOCK_HZ
 / ( 
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tCLOCK_DIVISOR
 ) );

195 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

198 
pxT›OfSèck
--;

201 *
pxT›OfSèck
 = 0x00;

202 
pxT›OfSèck
--;

203 *
pxT›OfSèck
 = 0x00;

204 
pxT›OfSèck
--;

205 *
pxT›OfSèck
 = 
p‹tINITIAL_PSW
;

206 
pxT›OfSèck
--;

207 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

212 #ifde‡
USE_FULL_REGISTER_INITIALISATION


214 
pxT›OfSèck
--;

215 *
pxT›OfSèck
 = 0x12345678;

216 
pxT›OfSèck
--;

217 *
pxT›OfSèck
 = 0xaaaabbbb;

218 
pxT›OfSèck
--;

219 *
pxT›OfSèck
 = 0xdddddddd;

220 
pxT›OfSèck
--;

221 *
pxT›OfSèck
 = 0xcccccccc;

222 
pxT›OfSèck
--;

223 *
pxT›OfSèck
 = 0xbbbbbbbb;

224 
pxT›OfSèck
--;

225 *
pxT›OfSèck
 = 0xaaaaaaaa;

226 
pxT›OfSèck
--;

227 *
pxT›OfSèck
 = 0x99999999;

228 
pxT›OfSèck
--;

229 *
pxT›OfSèck
 = 0x88888888;

230 
pxT›OfSèck
--;

231 *
pxT›OfSèck
 = 0x77777777;

232 
pxT›OfSèck
--;

233 *
pxT›OfSèck
 = 0x66666666;

234 
pxT›OfSèck
--;

235 *
pxT›OfSèck
 = 0x55555555;

236 
pxT›OfSèck
--;

237 *
pxT›OfSèck
 = 0x44444444;

238 
pxT›OfSèck
--;

239 *
pxT›OfSèck
 = 0x33333333;

240 
pxT›OfSèck
--;

241 *
pxT›OfSèck
 = 0x22222222;

242 
pxT›OfSèck
--;

248 
pxT›OfSèck
 -= 15;

252 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

253 
pxT›OfSèck
--;

254 *
pxT›OfSèck
 = 0x12345678;

255 
pxT›OfSèck
--;

256 *
pxT›OfSèck
 = 0x87654321;

258  
pxT›OfSèck
;

259 
	}
}

262 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

265 if–
pxCuºítTCB
 !
NULL
 )

272 
	`c⁄figSETUP_TICK_INTERRUPT
();

275 
	`_IEN
–
_ICU_SWINT
 ) = 1;

278 
	`_IR
–
_ICU_SWINT
 ) = 0;

281 
	`_IPR
–
_ICU_SWINT
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

284 
	`¥vSèπFú°Task
();

293 
	`¥vSëupTimîI¡îru±
();

296  
pdFAIL
;

297 
	}
}

300 
	$vP‹tEndScheduÀr
( )

304 
	`c⁄figASSERT
–
pxCuºítTCB
 =
NULL
 );

305 
	}
}

308 
	$¥vSèπFú°Task
( )

310 
__asm
 volatile

342 
	}
}

345 
	$vP‹tSo·w¨eI¡îru±ISR
( )

347 
__asm
 volatile

421 :: "i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
), "i"(
c⁄figKERNEL_INTERRUPT_PRIORITY
)

423 
	}
}

426 
	$vP‹tTickISR
( )

429 
__asm
 volatile( "SETPSW I" );

433 
	`p‹tDISABLE_INTERRUPTS_FROM_KERNEL_ISR
();

435 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

437 
	`èskYIELD
();

440 
	`p‹tENABLE_INTERRUPTS_FROM_KERNEL_ISR
();

442 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

445 
ulTickFœg
 = 
pdTRUE
;

449 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆueF‹O√Tick
;

452 
	}
}

455 
uöt32_t
 
	$ulP‹tGëIPL
( )

457 
__asm
 volatile

466 
	}
}

469 
	$vP‹tSëIPL
–
uöt32_t
 
ulNewIPL
 )

471 
__asm
 volatile

482 
	}
}

485 
	$¥vSëupTimîI¡îru±
( )

488 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tUNLOCK_KEY
;

491 
	`MSTP
–
CMT0
 ) = 0;

494 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tLOCK_KEY
;

497 
CMT0
.
CMCR
.
BIT
.
CMIE
 = 1;

500 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆueF‹O√Tick
;

503 #i‡
p‹tCLOCK_DIVISOR
 == 512

505 
CMT0
.
CMCR
.
BIT
.
CKS
 = 3;

507 #ñi‡
p‹tCLOCK_DIVISOR
 == 128

509 
CMT0
.
CMCR
.
BIT
.
CKS
 = 2;

511 #ñi‡
p‹tCLOCK_DIVISOR
 == 32

513 
CMT0
.
CMCR
.
BIT
.
CKS
 = 1;

515 #ñi‡
p‹tCLOCK_DIVISOR
 == 8

517 
CMT0
.
CMCR
.
BIT
.
CKS
 = 0;

521 #îr‹ 
InvÆid
 
p‹tCLOCK_DIVISOR
 
£âög


526 
	`_IEN
–
_CMT0_CMI0
 ) = 1;

529 
	`_IPR
–
_CMT0_CMI0
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

532 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

533 
	}
}

536 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

538 
	$¥vSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

541 
	`c⁄figPRE_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

546 if–
xEx≥˘edIdÀTime
 > 0 )

548 
__asm
 volatile( "WAIT" );

552 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

553 
	}
}

558 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

560 
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

562 
uöt32_t
 
ulM©chVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCuºítCou¡
;

563 
eSÀïModeSètus
 
eSÀïA˘i⁄
;

568 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

570 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

575 
ulM©chVÆue
 = 
ulM©chVÆueF‹O√Tick
 * 
xEx≥˘edIdÀTime
;

576 if–
ulM©chVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

580 
ulM©chVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

587 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 0;

588  
CMT
.
CMSTR0
.
BIT
.
STR0
 == 1 )

595 
__asm
 volatile( "CLRPSW i" );

600 
ulTickFœg
 = 
pdFALSE
;

605 
eSÀïA˘i⁄
 = 
	`eTaskC⁄fúmSÀïModeSètus
();

606 if–
eSÀïA˘i⁄
 =
eAb‹tSÀï
 )

609 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

610 
__asm
 volatile( "SETPSW i" );

612 if–
eSÀïA˘i⁄
 =
eNoTasksWaôögTimeout
 )

615 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tUNLOCK_KEY
;

618 
SYSTEM
.
SBYCR
.
BIT
.
SSBY
 = 1;

621 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tLOCK_KEY
;

625 
	`¥vSÀï
–
xEx≥˘edIdÀTime
 );

628 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

633 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tUNLOCK_KEY
;

636 
SYSTEM
.
MSTPCRC
.
BIT
.
DSLPE
 = 1;

637 
SYSTEM
.
MSTPCRA
.
BIT
.
MSTPA28
 = 1;

638 
SYSTEM
.
SBYCR
.
BIT
.
SSBY
 = 0;

641 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tLOCK_KEY
;

645 
ulM©chVÆue
 -–
uöt32_t
 ) 
CMT0
.
CMCNT
;

646 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆue
;

649 
CMT0
.
CMCNT
 = 0;

650 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

654 
	`¥vSÀï
–
xEx≥˘edIdÀTime
 );

660 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 0;

661  
CMT
.
CMSTR0
.
BIT
.
STR0
 == 1 )

666 
ulCuºítCou¡
 = ( 
uöt32_t
 ) 
CMT0
.
CMCNT
;

668 if–
ulTickFœg
 !
pdFALSE
 )

675 
ulM©chVÆue
 = 
ulM©chVÆueF‹O√Tick
 - 
ulCuºítCou¡
;

676 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆue
;

684 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

691 
ulCom∂ëeTickPîiods
 = 
ulCuºítCou¡
 / 
ulM©chVÆueF‹O√Tick
;

695 
ulM©chVÆue
 = 
ulCuºítCou¡
 - ( 
ulCom∂ëeTickPîiods
 * 
ulM©chVÆueF‹O√Tick
 );

696 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆue
;

702 
CMT0
.
CMCNT
 = 0;

703 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

707 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

709 
	}
}

	@portable/GCC/RX100/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

92 
	#p‹tBASE_TYPE
 

	)

94 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

95 
	tBa£Ty≥_t
;

96 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

108 
	#p‹tBYTE_ALIGNMENT
 8

	)

109 
	#p‹tSTACK_GROWTH
 -1

	)

110 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

111 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûe–"NOP" )

	)

116 
	#p‹tYIELD
(Ë\

	)

117 
__asm
 volatile \

125 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) { 
	`p‹tYIELD
(); }

	)

136 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûê–"MVTIPL #0" )

	)

137 #ifde‡
c⁄figASSERT


138 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`c⁄figASSERT
––
	`ulP‹tGëIPL
(Ë<
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) )

	)

139 
	#p‹tDISABLE_INTERRUPTS
(Ëif–
	`ulP‹tGëIPL
(Ë< 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) 
__asm
 vﬁ©ûê–"MVTIPL %0" ::"i"(c⁄figMAX_SYSCALL_INTERRUPT_PRIORITYË)

	)

141 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûê–"MVTIPL %0" ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
Ë)

	)

145 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

148 
vTaskE¡îCrôiˇl
( );

149 
vTaskExôCrôiˇl
( );

150 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

151 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

154 
uöt32_t
 
ulP‹tGëIPL
–Ë
__©åibuã__
((
«ked
));

155 
vP‹tSëIPL
–
uöt32_t
 
ulNewIPL
 ) 
__©åibuã__
((
«ked
));

156 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tGëIPL
(); 
	`p‹tDISABLE_INTERRUPTS
()

	)

157 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ) 
	`vP‹tSëIPL
–uxSavedI¡îru±Sètu†)

	)

160 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

161 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


162 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

163 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

170 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

171 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

173 #ifde‡
__˝lu•lus


	@portable/GCC/RX600/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	~"°rög.h
"

78 
	~"iodeföe.h
"

84 
	#p‹tINITIAL_PSW
 ( ( 
SèckTy≥_t
 ) 0x00030000 )

	)

85 
	#p‹tINITIAL_FPSW
 ( ( 
SèckTy≥_t
 ) 0x00000100 )

	)

92 
	#p‹tDISABLE_INTERRUPTS_FROM_KERNEL_ISR
(Ë
__asm
 vﬁ©ûê–"MVTIPL %0" ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
Ë)

	)

93 
	#p‹tENABLE_INTERRUPTS_FROM_KERNEL_ISR
(Ë
__asm
 vﬁ©ûê–"MVTIPL %0" ::"i"(
c⁄figKERNEL_INTERRUPT_PRIORITY
Ë)

	)

101 
	$¥vSèπFú°Task
–Ë
	`__©åibuã__
((
«ked
));

108 
	$vSo·w¨eI¡îru±ISR
–Ë
	`__©åibuã__
((
«ked
));

113 
	$vTickISR
–Ë
	`__©åibuã__
((
öãºu±
));

117 *
pxCuºítTCB
;

124 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

128 *
pxT›OfSèck
 = 0x00;

129 
pxT›OfSèck
--;

130 *
pxT›OfSèck
 = 
p‹tINITIAL_PSW
;

131 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

137 #ifde‡
USE_FULL_REGISTER_INITIALISATION


139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = 0xffffffff;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = 0xeeeeeeee;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = 0xdddddddd;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = 0xcccccccc;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = 0xbbbbbbbb;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = 0xaaaaaaaa;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = 0x99999999;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = 0x88888888;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = 0x77777777;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = 0x66666666;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = 0x55555555;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = 0x44444444;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = 0x33333333;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = 0x22222222;

167 
pxT›OfSèck
--;

171 
pxT›OfSèck
 -= 15;

175 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

176 
pxT›OfSèck
--;

177 *
pxT›OfSèck
 = 
p‹tINITIAL_FPSW
;

178 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = 0x12345678;

180 
pxT›OfSèck
--;

181 *
pxT›OfSèck
 = 0x87654321;

183  
pxT›OfSèck
;

184 
	}
}

187 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

189 
	`vAµliˇti⁄SëupTimîI¡îru±
( );

192 if–
pxCuºítTCB
 !
NULL
 )

197 
	`vAµliˇti⁄SëupTimîI¡îru±
();

200 
	`_IEN
–
_ICU_SWINT
 ) = 1;

203 
	`_IR
–
_ICU_SWINT
 ) = 0;

206 
	`_IPR
–
_ICU_SWINT
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

209 
	`¥vSèπFú°Task
();

213  
pdFAIL
;

214 
	}
}

217 
	$vP‹tEndScheduÀr
( )

221 
	`c⁄figASSERT
–
pxCuºítTCB
 =
NULL
 );

222 
	}
}

225 
	$¥vSèπFú°Task
( )

227 
__asm
 volatile

263 
	}
}

266 
	$vSo·w¨eI¡îru±ISR
( )

268 
__asm
 volatile

346 :: "i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
), "i"(
c⁄figKERNEL_INTERRUPT_PRIORITY
)

348 
	}
}

351 
	$vTickISR
( )

354 
__asm
 volatile( "SETPSW I" );

358 
	`p‹tDISABLE_INTERRUPTS_FROM_KERNEL_ISR
();

360 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

362 
	`èskYIELD
();

365 
	`p‹tENABLE_INTERRUPTS_FROM_KERNEL_ISR
();

366 
	}
}

369 
uöt32_t
 
	$ulP‹tGëIPL
( )

371 
__asm
 volatile

380 
	}
}

383 
	$vP‹tSëIPL
–
uöt32_t
 
ulNewIPL
 )

385 
__asm
 volatile

396 
	}
}

	@portable/GCC/RX600/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

92 
	#p‹tBASE_TYPE
 

	)

94 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

95 
	tBa£Ty≥_t
;

96 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

108 
	#p‹tBYTE_ALIGNMENT
 8

	)

109 
	#p‹tSTACK_GROWTH
 -1

	)

110 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

111 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûe–"NOP" )

	)

117 
	#p‹tYIELD
(Ë\

	)

118 
__asm
 volatile \

127 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

138 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûê–"MVTIPL #0" )

	)

139 #ifde‡
c⁄figASSERT


140 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`c⁄figASSERT
––
	`ulP‹tGëIPL
(Ë<
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) )

	)

141 
	#p‹tDISABLE_INTERRUPTS
(Ëif–
	`ulP‹tGëIPL
(Ë< 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) 
__asm
 vﬁ©ûê–"MVTIPL %0" ::"i"(c⁄figMAX_SYSCALL_INTERRUPT_PRIORITYË)

	)

143 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûê–"MVTIPL %0" ::"i"(
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
Ë)

	)

147 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

150 
vTaskE¡îCrôiˇl
( );

151 
vTaskExôCrôiˇl
( );

152 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

153 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

156 
uöt32_t
 
ulP‹tGëIPL
–Ë
__©åibuã__
((
«ked
));

157 
vP‹tSëIPL
–
uöt32_t
 
ulNewIPL
 ) 
__©åibuã__
((
«ked
));

158 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tGëIPL
(); 
	`p‹tDISABLE_INTERRUPTS
()

	)

159 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ) 
	`vP‹tSëIPL
–uxSavedI¡îru±Sètu†)

	)

164 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

165 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

167 #ifde‡
__˝lu•lus


	@portable/GCC/STR75x/port.c

72 
	~"75x_tb.h
"

73 
	~"75x_eic.h
"

76 
	~"FªeRTOS.h
"

77 
	~"èsk.h
"

80 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

81 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

82 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

85 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

88 
	#p‹tPRESCALE
 20

	)

94 
¥vSëupTimîI¡îru±
( );

104 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

106 
SèckTy≥_t
 *
pxOrigöÆTOS
;

108 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

112 
pxT›OfSèck
--;

120 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

121 
pxT›OfSèck
--;

123 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaaaaaa;

124 
pxT›OfSèck
--;

125 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

126 
pxT›OfSèck
--;

127 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

128 
pxT›OfSèck
--;

129 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

130 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

132 
pxT›OfSèck
--;

133 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

134 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

150 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

155 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

160 #ifde‡
THUMB_INTERWORK


163 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

167 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

174  
pxT›OfSèck
;

175 
	}
}

178 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

180 
	`vP‹tISRSèπFú°Task
( );

184 
	`¥vSëupTimîI¡îru±
();

187 
	`vP‹tISRSèπFú°Task
();

191 
	}
}

194 
	$vP‹tEndScheduÀr
( )

198 
	}
}

201 
	$¥vSëupTimîI¡îru±
( )

203 
EIC_IRQInôTy≥Def
 
EIC_IRQInôSåu˘uª
;

204 
TB_InôTy≥Def
 
TB_InôSåu˘uª
;

207 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√lCmd
 = 
ENABLE
;

208 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√l
 = 
TB_IRQCh™√l
;

209 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√lPri‹ôy
 = 1;

210 
	`EIC_IRQInô
(&
EIC_IRQInôSåu˘uª
);

213 
TB_InôSåu˘uª
.
TB_Mode
 = 
TB_Mode_Timög
;

214 
TB_InôSåu˘uª
.
TB_Cou¡îMode
 = 
TB_Cou¡îMode_Down
;

215 
TB_InôSåu˘uª
.
TB_PªsˇÀr
 = 
p‹tPRESCALE
 - 1;

216 
TB_InôSåu˘uª
.
TB_AutoRñﬂd
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tPRESCALE
 ) / 
c⁄figTICK_RATE_HZ
 );

217 
	`TB_Inô
(&
TB_InôSåu˘uª
);

220 
	`TB_ITC⁄fig
(
TB_IT_Upd©e
, 
ENABLE
);

223 
	`TB_CÀ¨ITPídögBô
(
TB_IT_Upd©e
);

226 
	`TB_Cmd
(
ENABLE
);

227 
	}
}

	@portable/GCC/STR75x/portISR.c

77 
	~"FªeRTOS.h
"

78 
	~"èsk.h
"

81 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

83 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

91 
vP‹tISRSèπFú°Task
( );

94 
	$vP‹tISRSèπFú°Task
( )

98 
asm
 volatile ( \

124 
	}
}

127 
	$vP‹tTickISR
( )

131 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

133 
	`vTaskSwôchC⁄ãxt
();

137 
	`TB_CÀ¨ITPídögBô
–
TB_IT_Upd©e
 );

138 
	}
}

148 #ifde‡
THUMB_INTERWORK


150 
	$vP‹tDißbÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

151 
	$vP‹tE«bÀI¡îru±sFromThumb
–Ë
	`__©åibuã__
 ((
«ked
));

153 
	$vP‹tDißbÀI¡îru±sFromThumb
( )

155 
asm
 volatile (

162 
	}
}

164 
	$vP‹tE«bÀI¡îru±sFromThumb
( )

166 
asm
 volatile (

173 
	}
}

178 
	$vP‹tE¡îCrôiˇl
( )

181 
asm
 volatile (

191 
ulCrôiˇlNe°ög
++;

192 
	}
}

195 
	$vP‹tExôCrôiˇl
( )

197 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

200 
ulCrôiˇlNe°ög
--;

204 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

207 
asm
 volatile (

215 
	}
}

	@portable/GCC/STR75x/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

110 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"SWI 0" )

	)

111 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

122 #ifde‡
THUMB_INTERWORK


124 
vP‹tDißbÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

125 
vP‹tE«bÀI¡îru±sFromThumb
–Ë
__©åibuã__
 ((
«ked
));

127 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tDißbÀI¡îru±sFromThumb
()

	)

128 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tE«bÀI¡îru±sFromThumb
()

	)

132 
	#p‹tDISABLE_INTERRUPTS
(Ë\

	)

133 
asm
 volatile ( \

140 
	#p‹tENABLE_INTERRUPTS
(Ë\

	)

141 
asm
 volatile ( \

150 
vP‹tE¡îCrôiˇl
( );

151 
vP‹tExôCrôiˇl
( );

153 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

154 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

158 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

	)

160 
vTaskSwôchC⁄ãxt
( ); \

162 if–
	gxSwôchRequúed
 ) \

164 
vTaskSwôchC⁄ãxt
(); \

170 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

171 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

173 #ifde‡
__˝lu•lus


	@portable/GCC/TriCore_1782/port.c

67 
	~<°dlib.h
>

68 
	~<°rög.h
>

71 
	~<tc1782.h
>

72 
	~<machöe/öåösics.h
>

73 
	~<machöe/cöt.h
>

74 
	~<machöe/wdtc⁄.h
>

77 
	~"FªeRTOS.h
"

78 
	~"èsk.h
"

79 
	~"li°.h
"

81 #i‡
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0

90 
	#p‹tSYSTEM_PROGRAM_STATUS_WORD
 ( 0x000008FFUL )

	)

91 
	#p‹tINITIAL_PRIVILEGED_PROGRAM_STATUS_WORD
 ( 0x000014FFUL )

	)

92 
	#p‹tINITIAL_UNPRIVILEGED_PROGRAM_STATUS_WORD
 ( 0x000010FFUL )

	)

93 
	#p‹tINITIAL_PCXI_UPPER_CONTEXT_WORD
 ( 0x00C00000UL )

	)

94 
	#p‹tINITIAL_SYSCON
 ( 0x00000000UL )

	)

97 
	#p‹tCSA_FCX_MASK
 ( 0x000FFFFFUL )

	)

100 
	#p‹tRESTORE_PSW_MASK
 ( ~–0x000000FFUL ) )

	)

101 
	#p‹tSYSCALL_TRAP
 ( 6 )

	)

104 
	#p‹tNUM_WORDS_IN_CSA
 ( 16 )

	)

107 
	#p‹tENABLE_CPU_INTERRUPT
 ( 1U << 12U )

	)

113 
	$¥vSy°emTickH™dÀr
–Ë
	`__©åibuã__
((
l⁄gˇŒ
));

114 
	`¥vSëupTimîI¡îru±
( );

119 
	`¥vTøpYõld
–
iTøpIdítifiˇti⁄
 );

124 
	`¥vI¡îru±Yõld
–
iTøpIdítifiˇti⁄
 );

129 vﬁ©ûê
uöt32_t
 *
pxCuºítTCB
;

132 c⁄° 
uöt32_t
 
ulCom∑ªM©chVÆue
 = ( 
c⁄figPERIPHERAL_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

136 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 * 
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

138 
uöt32_t
 *
pulUµîCSA
 = 
NULL
;

139 
uöt32_t
 *
pulLowîCSA
 = 
NULL
;

160 
	`p‹tENTER_CRITICAL
();

163 
	`_dsync
();

166 
pulLowîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
	`_mf¸
–
$FCX
 ) );

167 if–
NULL
 !
pulLowîCSA
 )

170 
pulUµîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
pulLowîCSA
[ 0 ] );

174 if––
NULL
 !
pulLowîCSA
 ) && ( NULL !
pulUµîCSA
 ) )

177 
	`_dißbÀ
();

178 
	`_dsync
();

179 
	`_mt¸
–
$FCX
, 
pulUµîCSA
[ 0 ] );

180 
	`_isync
();

181 
	`_íabÀ
();

186 
	`_svlcx
();

189 
	`p‹tEXIT_CRITICAL
();

192 
	`mem£t
–
pulUµîCSA
, 0, 
p‹tNUM_WORDS_IN_CSA
 * –
uöt32_t
 ) );

195 
pulUµîCSA
[ 2 ] = ( 
uöt32_t
 )
pxT›OfSèck
;

196 
pulUµîCSA
[ 1 ] = 
p‹tSYSTEM_PROGRAM_STATUS_WORD
;

199 
	`mem£t
–
pulLowîCSA
, 0, 
p‹tNUM_WORDS_IN_CSA
 * –
uöt32_t
 ) );

202 
pulLowîCSA
[ 8 ] = ( 
uöt32_t
 ) 
pvP¨amëîs
;

203 
pulLowîCSA
[ 1 ] = ( 
uöt32_t
 ) 
pxCode
;

206 
pulLowîCSA
[ 0 ] = ( 
p‹tINITIAL_PCXI_UPPER_CONTEXT_WORD
 | ( 
uöt32_t
 ) 
	`p‹tADDRESS_TO_CSA
–
pulUµîCSA
 ) );

209 
pxT›OfSèck
 = (
uöt32_t
 * ) 
	`p‹tADDRESS_TO_CSA
–
pulLowîCSA
 );

212 
	`_dsync
();

214  
pxT›OfSèck
;

215 
	}
}

218 
öt32_t
 
	$xP‹tSèπScheduÀr
( )

220 
	`vTøpIn°ÆlH™dÀrs
( );

221 
uöt32_t
 
ulMFCR
 = 0UL;

222 
uöt32_t
 *
pulUµîCSA
 = 
NULL
;

223 
uöt32_t
 *
pulLowîCSA
 = 
NULL
;

229 
	`¥vSëupTimîI¡îru±
();

232 
	`vTøpIn°ÆlH™dÀrs
();

235 if–0 =
	`_ö°Æl_å≠_h™dÀr
–
p‹tSYSCALL_TRAP
, 
¥vTøpYõld
 ) )

238 
	`c⁄figASSERT
–––vﬁ©ûê* ) 
NULL
 ) );

243 
CPU_SRC0
.
ªg
 = ( 
p‹tENABLE_CPU_INTERRUPT
 ) | ( 
c⁄figKERNEL_YIELD_PRIORITY
 );

244 if–0 =
	`_ö°Æl_öt_h™dÀr
–
c⁄figKERNEL_YIELD_PRIORITY
, 
¥vI¡îru±Yõld
, 0 ) )

247 
	`c⁄figASSERT
–––vﬁ©ûê* ) 
NULL
 ) );

250 
	`_dißbÀ
();

253 
	`_mt¸
–
$SYSCON
, 
p‹tINITIAL_SYSCON
 );

254 
	`_isync
();

260 
ulMFCR
 = 
	`_mf¸
–
$PSW
 );

261 
ulMFCR
 &
p‹tRESTORE_PSW_MASK
;

262 
	`_dsync
();

263 
	`_mt¸
–
$PSW
, 
ulMFCR
 );

264 
	`_isync
();

267 
pulLowîCSA
 = 
	`p‹tCSA_TO_ADDRESS
––*
pxCuºítTCB
 ) );

268 
pulUµîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
pulLowîCSA
[0] );

269 
	`_dsync
();

270 
	`_mt¸
–
$PCXI
, *
pxCuºítTCB
 );

271 
	`_isync
();

272 
	`_n›
();

273 
	`_r¶cx
();

274 
	`_n›
();

277 
__asm
 volatile( "rfe" );

281 
	}
}

284 
	$¥vSëupTimîI¡îru±
( )

287 
	`u∆ock_wdtc⁄
();

290  0 !–
WDT_CON0
.
ªg
 & 0x1UL ) );

293 
STM_CLC
.
ªg
 = ( 1UL << 8 );

295 
	`lock_wdtc⁄
();

298 
STM_CMCON
.
ªg
 &= ~( 0x1fUL );

299 
STM_CMCON
.
ªg
 |–0x1fUL - 
	`__CLZ
–
c⁄figPERIPHERAL_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) );

302 
STM_CMP0
.
ªg
 = 
ulCom∑ªM©chVÆue
 + 
STM_TIM0
.reg;

304 if–0 !
	`_ö°Æl_öt_h™dÀr
–
c⁄figKERNEL_INTERRUPT_PRIORITY
, 
¥vSy°emTickH™dÀr
, 0 ) )

307 
STM_SRC0
.
ªg
 = ( 
c⁄figKERNEL_INTERRUPT_PRIORITY
 | 0x00005000UL );

310 
STM_ISRR
.
ªg
 &= ~( 0x03UL );

311 
STM_ISRR
.
ªg
 |= 0x1UL;

312 
STM_ISRR
.
ªg
 &= ~( 0x07UL );

313 
STM_ICR
.
ªg
 |= 0x1UL;

318 
	`c⁄figASSERT
–––vﬁ©ûê* ) 
NULL
 ) );

320 
	}
}

323 
	$¥vSy°emTickH™dÀr
–
iArg
 )

325 
uöt32_t
 
ulSavedI¡îru±Mask
;

326 
uöt32_t
 *
pxUµîCSA
 = 
NULL
;

327 
uöt32_t
 
xUµîCSA
 = 0UL;

328 vﬁ©ûê
uöt32_t
 *
pxCuºítTCB
;

329 
öt32_t
 
lYõldRequúed
;

332 –Ë
iArg
;

335 
STM_ISRR
.
ªg
 = 1UL;

354 
STM_CMP0
.
ªg
 +
ulCom∑ªM©chVÆue
;

357 
ulSavedI¡îru±Mask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

360 
lYõldRequúed
 = 
	`xTaskIn¸emítTick
();

362 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulSavedI¡îru±Mask
 );

364 if–
lYõldRequúed
 !
pdFALSE
 )

385 
	`_dißbÀ
();

386 
	`_dsync
();

387 
xUµîCSA
 = 
	`_mf¸
–
$PCXI
 );

388 
pxUµîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
xUµîCSA
 );

389 *
pxCuºítTCB
 = 
pxUµîCSA
[ 0 ];

390 
	`vTaskSwôchC⁄ãxt
();

391 
pxUµîCSA
[ 0 ] = *
pxCuºítTCB
;

392 
CPU_SRC0
.
bôs
.
SETR
 = 0;

393 
	`_isync
();

395 
	}
}

416 
	$vP‹tRe˛aimCSA
–
uöt32_t
 *
pxTCB
 )

418 
uöt32_t
 
pxHódCSA
, 
pxTaûCSA
, 
pxFªeCSA
;

419 
uöt32_t
 *
pulNextCSA
;

424 
pxHódCSA
 = ( *
pxTCB
 ) & 
p‹tCSA_FCX_MASK
;

429 
pxTaûCSA
 = 
pxHódCSA
;

433 
pulNextCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
pxTaûCSA
 );

440  0UL !–
pulNextCSA
[ 0 ] & 
p‹tCSA_FCX_MASK
 ) )

444 
pulNextCSA
[ 0 ] =ÖulNextCSA[ 0 ] & 
p‹tCSA_FCX_MASK
;

447 
pxTaûCSA
 = 
pulNextCSA
[ 0 ];

450 
pulNextCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
pxTaûCSA
 );

453 
	`_dißbÀ
();

456 
	`_dsync
();

457 
pxFªeCSA
 = 
	`_mf¸
–
$FCX
 );

460 
	`p‹tCSA_TO_ADDRESS
–
pxTaûCSA
 )[ 0 ] = 
pxFªeCSA
;

463 
	`_dsync
();

464 
	`_mt¸
–
$FCX
, 
pxHódCSA
 );

465 
	`_isync
();

467 
	`_íabÀ
();

468 
	}
}

471 
	$vP‹tEndScheduÀr
( )

474 
	}
}

477 
	$¥vTøpYõld
–
iTøpIdítifiˇti⁄
 )

479 
uöt32_t
 *
pxUµîCSA
 = 
NULL
;

480 
uöt32_t
 
xUµîCSA
 = 0UL;

481 vﬁ©ûê
uöt32_t
 *
pxCuºítTCB
;

483  
iTøpIdítifiˇti⁄
 )

485 
p‹tSYSCALL_TASK_YIELD
:

505 
	`_dißbÀ
();

506 
	`_dsync
();

507 
xUµîCSA
 = 
	`_mf¸
–
$PCXI
 );

508 
pxUµîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
xUµîCSA
 );

509 *
pxCuºítTCB
 = 
pxUµîCSA
[ 0 ];

510 
	`vTaskSwôchC⁄ãxt
();

511 
pxUµîCSA
[ 0 ] = *
pxCuºítTCB
;

512 
CPU_SRC0
.
bôs
.
SETR
 = 0;

513 
	`_isync
();

518 
	`c⁄figASSERT
–––vﬁ©ûê* ) 
NULL
 ) );

521 
	}
}

524 
	$¥vI¡îru±Yõld
–
iId
 )

526 
uöt32_t
 *
pxUµîCSA
 = 
NULL
;

527 
uöt32_t
 
xUµîCSA
 = 0UL;

528 vﬁ©ûê
uöt32_t
 *
pxCuºítTCB
;

531 –Ë
iId
;

552 
	`_dißbÀ
();

553 
	`_dsync
();

554 
xUµîCSA
 = 
	`_mf¸
–
$PCXI
 );

555 
pxUµîCSA
 = 
	`p‹tCSA_TO_ADDRESS
–
xUµîCSA
 );

556 *
pxCuºítTCB
 = 
pxUµîCSA
[ 0 ];

557 
	`vTaskSwôchC⁄ãxt
();

558 
pxUµîCSA
[ 0 ] = *
pxCuºítTCB
;

559 
CPU_SRC0
.
bôs
.
SETR
 = 0;

560 
	`_isync
();

561 
	}
}

564 
uöt32_t
 
	$uxP‹tSëI¡îru±MaskFromISR
( )

566 
uöt32_t
 
uxRëu∫
 = 0UL;

568 
	`_dißbÀ
();

569 
uxRëu∫
 = 
	`_mf¸
–
$ICR
 );

570 
	`_mt¸
–
$ICR
, ( ( 
uxRëu∫
 & ~
p‹tCCPN_MASK
 ) | 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) );

571 
	`_isync
();

572 
	`_íabÀ
();

575  ( 
uxRëu∫
 & 
p‹tCCPN_MASK
 );

576 
	}
}

	@portable/GCC/TriCore_1782/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


74 
	~<tc1782.h
>

75 
	~<machöe/öåösics.h
>

88 
	#p‹tCHAR
 

	)

89 
	#p‹tFLOAT
 

	)

90 
	#p‹tDOUBLE
 

	)

91 
	#p‹tLONG
 

	)

92 
	#p‹tSHORT
 

	)

93 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

94 
	#p‹tBASE_TYPE
 

	)

96 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

97 
	tBa£Ty≥_t
;

98 
	tUBa£Ty≥_t
;

100 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

101 
uöt16_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

104 
uöt32_t
 
	tTickTy≥_t
;

105 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

110 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

111 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

112 
	#p‹tBYTE_ALIGNMENT
 4

	)

113 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûe–"Ç› " )

	)

114 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

115 
	#p‹tRESTORE_FIRST_TASK_PRIORITY_LEVEL
 1

	)

120 
	sMPU_SETTINGS
 { 
uöt32_t
 
	gulNŸU£d
; } 
	txMPU_SETTINGS
;

123 
	#p‹tPRIVILEGE_BIT
 0x0UL

	)

125 
	#p‹tCCPN_MASK
 ( 0x000000FFUL )

	)

127 
vTaskE¡îCrôiˇl
( );

128 
vTaskExôCrôiˇl
( );

129 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

130 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

134 
	#p‹tCSA_TO_ADDRESS
–
pCSA
 ) ( ( 
uöt32_t
 * )––––pCSA ) & 0x000F0000 ) << 12 ) | ( ( (ÖCSA ) & 0x0000FFFF ) << 6 ) ) )

	)

135 
	#p‹tADDRESS_TO_CSA
–
pAddªss
 ) ( ( 
uöt32_t
 )––––(uöt32_t)–pAddªs†ËË& 0xF0000000 ) >> 12 ) | ( ( ( uöt32_à)–pAddªs†Ë& 0x003FFFC0 ) >> 6 ) ) )

	)

138 
	#p‹tYIELD
(Ë
	`_sysˇŒ
–0 )

	)

140 
	#p‹tSYSCALL_TASK_YIELD
 0

	)

141 
	#p‹tSYSCALL_RAISE_PRIORITY
 1

	)

147 
	#p‹tDISABLE_INTERRUPTS
(Ë{ \

	)

148 
uöt32_t
 
	gulICR
; \

149 
_dißbÀ
(); \

150 
	gulICR
 = 
_mf¸
–
$ICR
 ); \

151 
	gulICR
 &~
p‹tCCPN_MASK
; \

152 
	gulICR
 |
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
; \

153 
_mt¸
–
$ICR
, 
ulICR
 ); \

154 
_isync
(); \

155 
_íabÀ
(); \

159 
	#p‹tENABLE_INTERRUPTS
(Ë{ \

	)

160 
uöt32_t
 
	gulICR
; \

161 
_dißbÀ
(); \

162 
	gulICR
 = 
_mf¸
–
$ICR
 ); \

163 
	gulICR
 &~
p‹tCCPN_MASK
; \

164 
_mt¸
–
$ICR
, 
ulICR
 ); \

165 
_isync
(); \

166 
_íabÀ
(); \

170 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedMaskVÆue
 ) { \

	)

171 
uöt32_t
 
	gulICR
; \

172 
_dißbÀ
(); \

173 
	gulICR
 = 
_mf¸
–
$ICR
 ); \

174 
	gulICR
 &~
p‹tCCPN_MASK
; \

175 
	gulICR
 |
uxSavedMaskVÆue
; \

176 
_mt¸
–
$ICR
, 
ulICR
 ); \

177 
_isync
(); \

178 
_íabÀ
(); \

183 
uöt32_t
 
uxP‹tSëI¡îru±MaskFromISR
( );

184 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`uxP‹tSëI¡îru±MaskFromISR
()

	)

187 
	#p‹tYIELD_FROM_ISR
–
xHighîPri‹ôyTaskWokí
 ) if–xHighîPri‹ôyTaskWokí !
pdFALSE
 ) { 
CPU_SRC0
.
bôs
.
SETR
 = 1; 
	`_isync
(); }

	)

192 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

193 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

200 
vP‹tRe˛aimCSA
–
uöt32_t
 *
pxTCB
 );

201 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) 
	`vP‹tRe˛aimCSA
––
uöt32_t
 * ) (ÖxTCB ) )

	)

203 #ifde‡
__˝lu•lus


	@portable/GCC/TriCore_1782/porttrap.c

67 
	~"FªeRTOS.h
"

70 
	~<tc1782.h
>

71 
	~<machöe/öåösics.h
>

72 
	~<machöe/cöt.h
>

78 vﬁ©ûê
uöt32_t
 *
pxCuºítTCB
;

91 
	#p‹tMMU_TRAP
 0

	)

92 
	#p‹tIPT_TRAP
 1

	)

93 
	#p‹tIE_TRAP
 2

	)

94 
	#p‹tCM_TRAP
 3

	)

95 
	#p‹tSBP_TRAP
 4

	)

96 
	#p‹tASSERT_TRAP
 5

	)

97 
	#p‹tNMI_TRAP
 7

	)

100 
	#p‹tTIN_MMU_VIRTUAL_ADDRESS_FILL
 0

	)

101 
	#p‹tTIN_MMU_VIRTUAL_ADDRESS_PROTECTION
 1

	)

104 
	#p‹tTIN_IPT_PRIVILIGED_INSTRUCTION
 1

	)

105 
	#p‹tTIN_IPT_MEMORY_PROTECTION_READ
 2

	)

106 
	#p‹tTIN_IPT_MEMORY_PROTECTION_WRITE
 3

	)

107 
	#p‹tTIN_IPT_MEMORY_PROTECTION_EXECUTION
 4

	)

108 
	#p‹tTIN_IPT_MEMORY_PROTECTION_PERIPHERAL_ACCESS
 5

	)

109 
	#p‹tTIN_IPT_MEMORY_PROTECTION_NULL_ADDRESS
 6

	)

110 
	#p‹tTIN_IPT_MEMORY_PROTECTION_GLOBAL_REGISTER_WRITE_PROTECTION
 7

	)

113 
	#p‹tTIN_IE_ILLEGAL_OPCODE
 1

	)

114 
	#p‹tTIN_IE_UNIMPLEMENTED_OPCODE
 2

	)

115 
	#p‹tTIN_IE_INVALID_OPERAND
 3

	)

116 
	#p‹tTIN_IE_DATA_ADDRESS_ALIGNMENT
 4

	)

117 
	#p‹tTIN_IE_INVALID_LOCAL_MEMORY_ADDRESS
 5

	)

120 
	#p‹tTIN_CM_FREE_CONTEXT_LIST_DEPLETION
 1

	)

121 
	#p‹tTIN_CM_CALL_DEPTH_OVERFLOW
 2

	)

122 
	#p‹tTIN_CM_CALL_DEPTH_UNDEFLOW
 3

	)

123 
	#p‹tTIN_CM_FREE_CONTEXT_LIST_UNDERFLOW
 4

	)

124 
	#p‹tTIN_CM_CALL_STACK_UNDERFLOW
 5

	)

125 
	#p‹tTIN_CM_CONTEXT_TYPE
 6

	)

126 
	#p‹tTIN_CM_NESTING_ERROR
 7

	)

129 
	#p‹tTIN_SBP_PROGRAM_FETCH_SYNCHRONOUS_ERROR
 1

	)

130 
	#p‹tTIN_SBP_DATA_ACCESS_SYNCHRONOUS_ERROR
 2

	)

131 
	#p‹tTIN_SBP_DATA_ACCESS_ASYNCHRONOUS_ERROR
 3

	)

132 
	#p‹tTIN_SBP_COPROCESSOR_TRAP_ASYNCHRONOUS_ERROR
 4

	)

133 
	#p‹tTIN_SBP_PROGRAM_MEMORY_INTEGRITY_ERROR
 5

	)

134 
	#p‹tTIN_SBP_DATA_MEMORY_INTEGRITY_ERROR
 6

	)

137 
	#p‹tTIN_ASSERT_ARITHMETIC_OVERFLOW
 1

	)

138 
	#p‹tTIN_ASSERT_STICKY_ARITHMETIC_OVERFLOW
 2

	)

141 
	#p‹tTIN_NMI_NON_MASKABLE_INTERRUPT
 0

	)

144 
	$vMMUTøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

145 
	$vI¡î«lPrŸe˘i⁄Tøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

146 
	$vIn°ru˘i⁄Eº‹Tøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

147 
	$vC⁄ãxtM™agemítTøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

148 
	$vSy°emBusAndPîùhîÆsTøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

149 
	$vAs£πi⁄Tøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

150 
	$vN⁄MaskabÀI¡îru±Tøp
–
iTøpIdítifiˇti⁄
 ) 
	`__©åibuã__
––
l⁄gˇŒ
, 
wók
 ) );

153 
	$vTøpIn°ÆlH™dÀrs
( )

155 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tMMU_TRAP
, 
vMMUTøp
 ) )

157 
	`_debug
();

160 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tIPT_TRAP
, 
vI¡î«lPrŸe˘i⁄Tøp
 ) )

162 
	`_debug
();

165 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tIE_TRAP
, 
vIn°ru˘i⁄Eº‹Tøp
 ) )

167 
	`_debug
();

170 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tCM_TRAP
, 
vC⁄ãxtM™agemítTøp
 ) )

172 
	`_debug
();

175 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tSBP_TRAP
, 
vSy°emBusAndPîùhîÆsTøp
 ) )

177 
	`_debug
();

180 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tASSERT_TRAP
, 
vAs£πi⁄Tøp
 ) )

182 
	`_debug
();

185 if–0 =
	`_ö°Æl_å≠_h™dÀr
 ( 
p‹tNMI_TRAP
, 
vN⁄MaskabÀI¡îru±Tøp
 ) )

187 
	`_debug
();

189 
	}
}

192 
	$vMMUTøp
–
iTøpIdítifiˇti⁄
 )

194  
iTøpIdítifiˇti⁄
 )

196 
p‹tTIN_MMU_VIRTUAL_ADDRESS_FILL
:

197 
p‹tTIN_MMU_VIRTUAL_ADDRESS_PROTECTION
:

199 
	`_debug
();

202 
	}
}

205 
	$vI¡î«lPrŸe˘i⁄Tøp
–
iTøpIdítifiˇti⁄
 )

208  
iTøpIdítifiˇti⁄
 )

210 
p‹tTIN_IPT_PRIVILIGED_INSTRUCTION
:

213 
p‹tTIN_IPT_MEMORY_PROTECTION_READ
:

216 
p‹tTIN_IPT_MEMORY_PROTECTION_WRITE
:

219 
p‹tTIN_IPT_MEMORY_PROTECTION_EXECUTION
:

222 
p‹tTIN_IPT_MEMORY_PROTECTION_PERIPHERAL_ACCESS
:

225 
p‹tTIN_IPT_MEMORY_PROTECTION_NULL_ADDRESS
:

228 
p‹tTIN_IPT_MEMORY_PROTECTION_GLOBAL_REGISTER_WRITE_PROTECTION
:

233 
pxCuºítTCB
[ 0 ] = 
	`_mf¸
–
$PCXI
 );

234 
	`_debug
();

237 
	}
}

240 
	$vIn°ru˘i⁄Eº‹Tøp
–
iTøpIdítifiˇti⁄
 )

243  
iTøpIdítifiˇti⁄
 )

245 
p‹tTIN_IE_ILLEGAL_OPCODE
:

246 
p‹tTIN_IE_UNIMPLEMENTED_OPCODE
:

247 
p‹tTIN_IE_INVALID_OPERAND
:

248 
p‹tTIN_IE_DATA_ADDRESS_ALIGNMENT
:

249 
p‹tTIN_IE_INVALID_LOCAL_MEMORY_ADDRESS
:

251 
	`_debug
();

254 
	}
}

257 
	$vC⁄ãxtM™agemítTøp
–
iTøpIdítifiˇti⁄
 )

260  
iTøpIdítifiˇti⁄
 )

262 
p‹tTIN_CM_FREE_CONTEXT_LIST_DEPLETION
:

263 
p‹tTIN_CM_CALL_DEPTH_OVERFLOW
:

264 
p‹tTIN_CM_CALL_DEPTH_UNDEFLOW
:

265 
p‹tTIN_CM_FREE_CONTEXT_LIST_UNDERFLOW
:

266 
p‹tTIN_CM_CALL_STACK_UNDERFLOW
:

267 
p‹tTIN_CM_CONTEXT_TYPE
:

268 
p‹tTIN_CM_NESTING_ERROR
:

270 
	`_debug
();

273 
	}
}

276 
	$vSy°emBusAndPîùhîÆsTøp
–
iTøpIdítifiˇti⁄
 )

279  
iTøpIdítifiˇti⁄
 )

281 
p‹tTIN_SBP_PROGRAM_FETCH_SYNCHRONOUS_ERROR
:

282 
p‹tTIN_SBP_DATA_ACCESS_SYNCHRONOUS_ERROR
:

283 
p‹tTIN_SBP_DATA_ACCESS_ASYNCHRONOUS_ERROR
:

284 
p‹tTIN_SBP_COPROCESSOR_TRAP_ASYNCHRONOUS_ERROR
:

285 
p‹tTIN_SBP_PROGRAM_MEMORY_INTEGRITY_ERROR
:

286 
p‹tTIN_SBP_DATA_MEMORY_INTEGRITY_ERROR
:

288 
	`_debug
();

291 
	}
}

294 
	$vAs£πi⁄Tøp
–
iTøpIdítifiˇti⁄
 )

297  
iTøpIdítifiˇti⁄
 )

299 
p‹tTIN_ASSERT_ARITHMETIC_OVERFLOW
:

300 
p‹tTIN_ASSERT_STICKY_ARITHMETIC_OVERFLOW
:

302 
	`_debug
();

305 
	}
}

308 
	$vN⁄MaskabÀI¡îru±Tøp
–
iTøpIdítifiˇti⁄
 )

311  
iTøpIdítifiˇti⁄
 )

313 
p‹tTIN_NMI_NON_MASKABLE_INTERRUPT
:

315 
	`_debug
();

318 
	}
}

	@portable/IAR/78K0R/ISR_Support.h

55 
	~"FªeRTOSC⁄fig.h
"

57 ; 
V¨übÀs
 
u£d
 
by
 
	gscheduÀr


59 
EXTERN
 
pxCuºítTCB


60 
EXTERN
 
	gusCrôiˇlNe°ög


63 ; 
p‹tSAVE_CONTEXT
 
	gMACRO


64 ; 
Saves
 
the
 
c⁄ãxt
 
of
Åhê
gíîÆ
 
puΩo£
 
	gªgi°îs
, 
CS
 
™d
 
ES
 (
⁄ly
 
ö
 
Ár


65 ; 
mem‹y
 
mode
Ë
ªgi°îs
 
the
 
usCrôiˇlNe°ög
 
VÆue
 
™d
Åhê
Sèck
 
	gPoöãr


66 ; 
of
 
the
 
a˘ive
 
Task
 
⁄to
Åhê
èsk
 
	g°ack


68 
p‹tSAVE_CONTEXT
 
MACRO


70 
PUSH
 
	gAX
 ; 
Save
 
AX
 
Regi°î
 
to
 
	g°ack
.

71 
PUSH
 
	gHL


72 #i‡
c⁄figMEMORY_MODE
 == 1

73 
MOV
 
	gA
, 
	gCS
 ; 
Save
 
CS
 .

74 
XCH
 
	gA
, 
X


75 
MOV
 
	gA
, 
	gES
 ; 
Save
 
ES
 .

76 
PUSH
 
	gAX


78 
MOV
 
	gA
, 
	gCS
 ; 
Save
 
CS
 .

79 
PUSH
 
	gAX


81 
PUSH
 
	gDE
 ; 
Save
 
the
 
ªmaöög
 
gíîÆ
 
puΩo£
 
	gªgi°îs
.

82 
PUSH
 
BC


83 
MOVW
 
	gAX
, 
	gusCrôiˇlNe°ög
 ; 
Save
 
the
 
usCrôiˇlNe°ög
 
	gvÆue
.

84 
PUSH
 
AX


85 
MOVW
 
	gAX
, 
	gpxCuºítTCB
 ; 
Save
 
the
 
Sèck
 
	gpoöãr
.

86 
MOVW
 
	gHL
, 
AX


87 
MOVW
 
	gAX
, 
SP


88 
	gMOVW
 [
HL
], 
AX


89 
	gENDM


93 ; 
p‹tRESTORE_CONTEXT
 
	gMACRO


94 ; 
Re°‹es
 
the
 
èsk
 
Sèck
 
Poöãr
 
thí
 
u£
 
this
 
to
 
ª°‹e
 
	gusCrôiˇlNe°ög
,

95 ; 
gíîÆ
 
puΩo£
 
ªgi°îs
 
™d
 
the
 
CS
ánd 
ES
 (
⁄ly
 
ö
 
Ár
 
mem‹y
 
mode
)

96 ; 
of
 
the
 
£À˘ed
 
èsk
 
‰om
Åhêèsk 
	g°ack


98 
p‹tRESTORE_CONTEXT
 
MACRO


99 
MOVW
 
	gAX
, 
	gpxCuºítTCB
 ; 
Re°‹e
 
the
 
Sèck
 
	gpoöãr
.

100 
MOVW
 
	gHL
, 
AX


101 
MOVW
 
	gAX
, [
HL
]

102 
MOVW
 
	gSP
, 
AX


103 
POP
 
	gAX
 ; 
Re°‹e
 
usCrôiˇlNe°ög
 
	gvÆue
.

104 
MOVW
 
	gusCrôiˇlNe°ög
, 
AX


105 
POP
 
	gBC
 ; 
Re°‹e
 
the
 
√˚sßry
 
gíîÆ
 
puΩo£
 
	gªgi°îs
.

106 
POP
 
	gDE


107 #i‡
c⁄figMEMORY_MODE
 == 1

108 
POP
 
	gAX
 ; 
Re°‹e
 
the
 
ES
 .

109 
MOV
 
	gES
, 
A


110 
XCH
 
	gA
, 
	gX
 ; 
Re°‹e
 
the
 
CS
 .

111 
MOV
 
	gCS
, 
	gA


113 
POP
 
AX


114 
MOV
 
	gCS
, 
	gA
 ; 
Re°‹e
 
CS
 .

116 
POP
 
	gHL
 ; 
Re°‹e
 
gíîÆ
 
puΩo£
 HL.

117 
POP
 
	gAX
 ; 
Re°‹e
 AX.

118 
	gENDM


	@portable/IAR/78K0R/port.c

67 
	~<°dlib.h
>

70 
	~"FªeRTOS.h
"

71 
	~"èsk.h
"

75 
	#p‹tINITIAL_CRITICAL_NESTING
 (–
uöt16_t
 ) 10)

	)

88 
	#p‹tPSW
 (0xc6UL)

	)

92 
	tTCB_t
;

93 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

107 vﬁ©ûê
uöt16_t
 
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

113 
¥vSëupTimîI¡îru±
( );

122 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

124 
uöt32_t
 *
pulLoˇl
;

126 #i‡
c⁄figMEMORY_MODE
 == 1

130 
pxT›OfSèck
--;

133 
pulLoˇl
 = ( 
uöt32_t
 * ) 
pxT›OfSèck
;

134 *
pulLoˇl
 = ( 
uöt32_t
 ) 
pvP¨amëîs
;

135 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xcdcd;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xcdcd;

142 
pxT›OfSèck
--;

146 
pxT›OfSèck
--;

149 
pulLoˇl
 = ( 
uöt32_t
 * ) 
pxT›OfSèck
;

150 *
pulLoˇl
 = ( ( ( 
uöt32_t
 ) 
pxCode
 ) | ( 
p‹tPSW
 << 24UL ) );

151 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1111;

155 
pxT›OfSèck
--;

162 
pxT›OfSèck
--;

165 
pulLoˇl
 = ( 
uöt32_t
 * ) 
pxT›OfSèck
;

166 *
pulLoˇl
 = ( ( ( 
uöt32_t
 ) 
pxCode
 ) | ( 
p‹tPSW
 << 24UL ) );

167 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

171 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x2222;

177 
pxT›OfSèck
--;

180 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0F00;

181 
pxT›OfSèck
--;

184 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xDEDE;

185 
pxT›OfSèck
--;

186 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xBCBC;

187 
pxT›OfSèck
--;

191 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

195  
pxT›OfSèck
;

196 
	}
}

199 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

203 
	`¥vSëupTimîI¡îru±
();

206 
	`vP‹tSèπ
();

209  
pdTRUE
;

210 
	}
}

213 
	$vP‹tEndScheduÀr
( )

217 
	}
}

220 
	$¥vSëupTimîI¡îru±
( )

225 
TAU0EN
 = 1;

228 
TT0
 = 0xff;

232 
TMMK05
 = 1;

235 
TMIF05
 = 0;

238 
TMPR005
 = 0;

239 
TMPR105
 = 0;

242 
TMR05
 = 0x0000;

245 
TDR05
 = ( 
TickTy≥_t
 ) ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

248 
TOM0
 &= ~0x0020;

251 
TOL0
 &= ~0x0020;

254 
TOE0
 &= ~0x0020;

257 
TMMK05
 = 0;

260 
TS0
 |= 0x0020;

261 
	}
}

	@portable/IAR/78K0R/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #i‡(
c⁄figUSE_16_BIT_TICKS
==1)

98 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
 ( "DI" )

	)

108 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
 ( "EI" )

	)

112 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
uöt16_t
 ) 0 )

	)

114 
	#p‹tENTER_CRITICAL
(Ë\

	)

116 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

118 
p‹tDISABLE_INTERRUPTS
(); \

123 
	gusCrôiˇlNe°ög
++; \

126 
	#p‹tEXIT_CRITICAL
(Ë\

	)

128 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

130 if–
	gusCrôiˇlNe°ög
 > 
	gp‹tNO_CRITICAL_SECTION_NESTING
 ) \

133 
	gusCrôiˇlNe°ög
--; \

137 if–
	gusCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

139 
p‹tENABLE_INTERRUPTS
(); \

146 
vP‹tSèπ
( );

147 
	#p‹tYIELD
(Ë
	`__asm
–"BRK" )

	)

148 
	#p‹tYIELD_FROM_ISR
–
xHighîPri‹ôyTaskWokí
 ) if–xHighîPri‹ôyTaskWokí ) 
	`vTaskSwôchC⁄ãxt
()

	)

149 
	#p‹tNOP
(Ë
	`__asm
–"NOP" )

	)

153 
	#p‹tBYTE_ALIGNMENT
 2

	)

154 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

155 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

159 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

160 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

163 
__öãºu±
 
P0_i§
 ();

168 
	#OPT_BYTES_SIZE
 4

	)

169 
	#SECU_ID_SIZE
 10

	)

170 
	#WATCHDOG_DISABLED
 0x00

	)

171 
	#LVI_ENABLED
 0xFE

	)

172 
	#LVI_DISABLED
 0xFF

	)

173 
	#RESERVED_FF
 0xFF

	)

174 
	#OCD_DISABLED
 0x04

	)

175 
	#OCD_ENABLED
 0x81

	)

176 
	#OCD_ENABLED_ERASE
 0x80

	)

178 #ifde‡
__˝lu•lus


	@portable/IAR/ARM_CA9/port.c

67 
	~<°dlib.h
>

70 
	~<öåösics.h
>

73 
	~"FªeRTOS.h
"

74 
	~"èsk.h
"

76 #i‚de‡
c⁄figINTERRUPT_CONTROLLER_BASE_ADDRESS


77 #îr‹ 
c⁄figINTERRUPT_CONTROLLER_BASE_ADDRESS
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

80 #i‚de‡
c⁄figINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET


81 #îr‹ 
c⁄figINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

84 #i‚de‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES


85 #îr‹ 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

88 #i‚de‡
c⁄figSETUP_TICK_INTERRUPT


89 #îr‹ 
c⁄figSETUP_TICK_INTERRUPT
(Ë
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

92 #i‚de‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY


93 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

96 #i‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 == 0

97 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
nŸ
 
be
 
£t
 
to
 0

100 #i‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 > 
c⁄figUNIQUE_INTERRUPT_PRIORITIES


101 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
be
 
Àss
 
th™
 
‹
 
equÆ
 
to
 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 
as
 
the
 
lowî
Åhê
numîic
 
¥i‹ôy
 
vÆue
Åhê
highî
Åhê
logiˇl
 
öãºu±
Öriority

104 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

106 #if–
c⁄figMAX_PRIORITIES
 > 32 )

107 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

112 #i‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 <–
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 / 2 )

113 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
be
 
gª©î
 
th™
 ( 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 / 2 )

116 #i‚de‡
c⁄figCLEAR_TICK_INTERRUPT


117 
	#c⁄figCLEAR_TICK_INTERRUPT
()

	)

122 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

126 
	#p‹tUNMASK_VALUE
 ( 0xFF )

	)

133 
	#p‹tNO_FLOATING_POINT_CONTEXT
 ( ( 
SèckTy≥_t
 ) 0 )

	)

136 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

137 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

138 
	#p‹tTHUMB_MODE_ADDRESS
 ( 0x01UL )

	)

142 
	#p‹tBINARY_POINT_BITS
 ( ( 
uöt8_t
 ) 0x03 )

	)

145 
	#p‹tAPSR_MODE_BITS_MASK
 ( 0x1F )

	)

149 
	#p‹tAPSR_USER_MODE
 ( 0x10 )

	)

152 
	#p‹tCLEAR_INTERRUPT_MASK
(Ë\

	)

154 
__dißbÀ_úq
(); \

155 
	gp‹tICCPMR_PRIORITY_MASK_REGISTER
 = 
p‹tUNMASK_VALUE
; \

156 
__asm
( "DSB \n" \

158 
__íabÀ_úq
(); \

167 
vP‹tRe°‹eTaskC⁄ãxt
( );

176 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

180 
uöt32_t
 
	gulP‹tTaskHasFPUC⁄ãxt
 = 
pdFALSE
;

183 
uöt32_t
 
	gulP‹tYõldRequúed
 = 
pdFALSE
;

187 
uöt32_t
 
	gulP‹tI¡îru±Ne°ög
 = 0UL;

195 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

203 *
pxT›OfSèck
 = 
NULL
;

204 
pxT›OfSèck
--;

205 *
pxT›OfSèck
 = 
NULL
;

206 
pxT›OfSèck
--;

207 *
pxT›OfSèck
 = 
NULL
;

208 
pxT›OfSèck
--;

209 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

211 if–––
uöt32_t
 ) 
pxCode
 & 
p‹tTHUMB_MODE_ADDRESS
 ) != 0x00UL )

214 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

217 
pxT›OfSèck
--;

220 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

221 
pxT›OfSèck
--;

224 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00000000;

225 
pxT›OfSèck
--;

226 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

227 
pxT›OfSèck
--;

228 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

229 
pxT›OfSèck
--;

230 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

231 
pxT›OfSèck
--;

232 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

233 
pxT›OfSèck
--;

234 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

235 
pxT›OfSèck
--;

236 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

237 
pxT›OfSèck
--;

238 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

239 
pxT›OfSèck
--;

240 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

241 
pxT›OfSèck
--;

242 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

243 
pxT›OfSèck
--;

244 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

245 
pxT›OfSèck
--;

246 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

247 
pxT›OfSèck
--;

248 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

249 
pxT›OfSèck
--;

250 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

251 
pxT›OfSèck
--;

255 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

256 
pxT›OfSèck
--;

261 *
pxT›OfSèck
 = 
p‹tNO_FLOATING_POINT_CONTEXT
;

263  
pxT›OfSèck
;

264 
	}
}

267 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

269 
uöt32_t
 
ulAPSR
;

273 
__asm
 vﬁ©ûê–"MRS %0, APSR" : "Ù" ( 
ulAPSR
 ) );

274 
ulAPSR
 &
p‹tAPSR_MODE_BITS_MASK
;

275 
	`c⁄figASSERT
–
ulAPSR
 !
p‹tAPSR_USER_MODE
 );

277 if–
ulAPSR
 !
p‹tAPSR_USER_MODE
 )

282 
	`c⁄figASSERT
––
p‹tICCBPR_BINARY_POINT_REGISTER
 & 
p‹tBINARY_POINT_BITS
 ) <
p‹tMAX_BINARY_POINT_VALUE
 );

284 if––
p‹tICCBPR_BINARY_POINT_REGISTER
 & 
p‹tBINARY_POINT_BITS
 ) <
p‹tMAX_BINARY_POINT_VALUE
 )

287 
	`c⁄figSETUP_TICK_INTERRUPT
();

289 
	`__íabÀ_úq
();

290 
	`vP‹tRe°‹eTaskC⁄ãxt
();

298 
	}
}

301 
	$vP‹tEndScheduÀr
( )

305 
	`c⁄figASSERT
–
ulCrôiˇlNe°ög
 == 1000UL );

306 
	}
}

309 
	$vP‹tE¡îCrôiˇl
( )

312 
	`ulP‹tSëI¡îru±Mask
();

317 
ulCrôiˇlNe°ög
++;

318 
	}
}

321 
	$vP‹tExôCrôiˇl
( )

323 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

327 
ulCrôiˇlNe°ög
--;

331 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

335 
	`p‹tCLEAR_INTERRUPT_MASK
();

338 
	}
}

341 
	$FªeRTOS_Tick_H™dÀr
( )

346 
	`__dißbÀ_úq
();

347 
p‹tICCPMR_PRIORITY_MASK_REGISTER
 = ( 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 );

348 
	`__asm
( "DSB \n"

350 
	`__íabÀ_úq
();

353 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

355 
ulP‹tYõldRequúed
 = 
pdTRUE
;

359 
	`p‹tCLEAR_INTERRUPT_MASK
();

360 
	`c⁄figCLEAR_TICK_INTERRUPT
();

361 
	}
}

364 
	$vP‹tTaskU£sFPU
( )

366 
uöt32_t
 
ulInôülFPSCR
 = 0;

370 
ulP‹tTaskHasFPUC⁄ãxt
 = 
pdTRUE
;

373 
	`__asm
–"FMXR FPSCR, %0" :: "r" (
ulInôülFPSCR
) );

374 
	}
}

377 
	$vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 )

379 if–
ulNewMaskVÆue
 =
pdFALSE
 )

381 
	`p‹tCLEAR_INTERRUPT_MASK
();

383 
	}
}

386 
uöt32_t
 
	$ulP‹tSëI¡îru±Mask
( )

388 
uöt32_t
 
ulRëu∫
;

390 
	`__dißbÀ_úq
();

391 if–
p‹tICCPMR_PRIORITY_MASK_REGISTER
 =–
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 ) )

394 
ulRëu∫
 = 
pdTRUE
;

398 
ulRëu∫
 = 
pdFALSE
;

399 
p‹tICCPMR_PRIORITY_MASK_REGISTER
 = ( 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 );

400 
	`__asm
( "DSB \n"

403 
	`__íabÀ_úq
();

405  
ulRëu∫
;

406 
	}
}

409 #if–
c⁄figASSERT_DEFINED
 == 1 )

411 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

431 
	`c⁄figASSERT
–
p‹tICCRPR_RUNNING_PRIORITY_REGISTER
 >–
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 ) );

443 
	`c⁄figASSERT
––
p‹tICCBPR_BINARY_POINT_REGISTER
 & 
p‹tBINARY_POINT_BITS
 ) <
p‹tMAX_BINARY_POINT_VALUE
 );

444 
	}
}

	@portable/IAR/ARM_CA9/portASM.h

55 
EXTERN
 
vTaskSwôchC⁄ãxt


56 
EXTERN
 
ulCrôiˇlNe°ög


57 
EXTERN
 
pxCuºítTCB


58 
EXTERN
 
ulP‹tTaskHasFPUC⁄ãxt


59 
EXTERN
 
ulAsmAPIPri‹ôyMask


61 
p‹tSAVE_CONTEXT
 
	gma¸o


63 ; 
Save
 
the
 
LR
 
™d
 
SPSR
 
⁄to
Åhê
sy°em
 
mode
 
°ack
 
bef‹e
 
swôchög
 
	gto


64 ; 
sy°em
 
mode
 
to
 
ßve
 
the
 
ªmaöög
 sy°em modê
ªgi°îs


65 
SRSDB
 
	g•
!, #SYS_MODE

66 
	gCPS
 #SYS_MODE

67 
	gPUSH
 {
	gR0
-
	gR12
, 
	gR14
}

69 ; 
Push
 
the
 
¸ôiˇl
 
√°ög
 
cou¡


70 
LDR
 
	gR2
, =
ulCrôiˇlNe°ög


71 
LDR
 
R1
, [
R2
]

72 
	gPUSH
 {
	gR1
}

74 ; 
D€s
 
the
 
èsk
 
have
 
a
 
Êﬂtög
 
poöt
 
c⁄ãxt
 
th©
 
√eds
 
	gßvög
? 
	gIf


75 ; 
ulP‹tTaskHasFPUC⁄ãxt
 
	gis
 0 
thí
 
	gno
.

76 
LDR
 
	gR2
, =
ulP‹tTaskHasFPUC⁄ãxt


77 
LDR
 
R3
, [
R2
]

78 
CMP
 
	gR3
, #0

80 ; 
Save
 
the
 
Êﬂtög
 
poöt
 
	gc⁄ãxt
, 
™y


81 
FMRXNE
 
	gR1
, 
FPSCR


82 
	gVPUSHNE
 {
	gD0
-
	gD15
}

83 
	gVPUSHNE
 {
	gD16
-
	gD31
}

84 
	gPUSHNE
 {
	gR1
}

86 ; 
Save
 
ulP‹tTaskHasFPUC⁄ãxt
 
ô£lf


87 
	gPUSH
 {
	gR3
}

89 ; 
Save
 
the
 
°ack
 
poöãr
 
ö
Åhê
TCB


90 
LDR
 
	gR0
, =
pxCuºítTCB


91 
LDR
 
R1
, [
R0
]

92 
STR
 
	gSP
, [
R1
]

94 
	gídm


98 
p‹tRESTORE_CONTEXT
 
	gma¸o


100 ; 
Swôch
 
to
 
sy°em
 
mode


101 
	gCPS
 #SYS_MODE

103 ; 
Së
 
the
 
SP
 
to
 
poöt
Åÿthê
°ack
 
of
Åhê
èsk
 
beög
 
	gª°‹ed
.

104 
LDR
 
	gR0
, =
pxCuºítTCB


105 
LDR
 
R1
, [
R0
]

106 
LDR
 
	gSP
, [
R1
]

108 ; 
Is
 
thîe
 
a
 
Êﬂtög
 
poöt
 
c⁄ãxt
 
to
 
	gª°‹e
? 
If
 
the
 
	gª°‹ed


109 ; 
ulP‹tTaskHasFPUC⁄ãxt
 
is
 
zîo
 
thí
 
	gno
.

110 
LDR
 
	gR0
, =
ulP‹tTaskHasFPUC⁄ãxt


111 
POP
 {
R1
}

112 
STR
 
R1
, [
R0
]

113 
CMP
 
	gR1
, #0

115 ; 
Re°‹e
 
the
 
Êﬂtög
 
poöt
 
	gc⁄ãxt
, 
™y


116 
	gPOPNE
 {
	gR0
}

117 
	gVPOPNE
 {
	gD16
-
	gD31
}

118 
	gVPOPNE
 {
	gD0
-
	gD15
}

119 
VMSRNE
 
	gFPSCR
, 
	gR0


121 ; 
Re°‹e
 
the
 
¸ôiˇl
 
£˘i⁄
 
√°ög
 
dïth


122 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


123 
POP
 {
R1
}

124 
STR
 
R1
, [
R0
]

126 ; 
Ensuª
 
the
 
¥i‹ôy
 
mask
 
is
 
c‹ª˘
 thê
¸ôiˇl
 
√°ög
 
dïth


127 
LDR
 
	gR2
, =
p‹tICCPMR_PRIORITY_MASK_REGISTER_ADDRESS


128 
CMP
 
R1
, #0

129 
MOVEQ
 
	gR4
, #255

130 
LDRNE
 
	gR4
, =–
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 )

131 
STR
 
R4
, [
r2
]

133 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
Ÿhî
 
th™
 
the
 
SP
 (
which
 
is
 
Æªady


134 ; 
beög
 
u£d
)

135 
	gPOP
 {
	gR0
-
	gR12
, 
	gR14
}

137 ; 
Rëu∫
 
to
 
the
 
èsk
 
	gcode
, 
lﬂdög
 
CPSR
 
⁄
Åhê
	gway
.

138 
RFEIA
 
	g•
!

140 
	gídm


	@portable/IAR/ARM_CA9/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

70 #ifde‡
__ICCARM__


72 
	~<öåösics.h
>

74 #ifde‡
__˝lu•lus


89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

95 
	#p‹tBASE_TYPE
 

	)

97 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

98 
	tBa£Ty≥_t
;

99 
	tUBa£Ty≥_t
;

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

116 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 )\

	)

118 
uöt32_t
 
ulP‹tYõldRequúed
; \

120 if–
	gxSwôchRequúed
 !
pdFALSE
 ) \

122 
ulP‹tYõldRequúed
 = 
pdTRUE
; \

126 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

127 
	#p‹tYIELD
(Ë
	`__asm
–"SWI 0" );

	)

134 
vP‹tE¡îCrôiˇl
( );

135 
vP‹tExôCrôiˇl
( );

136 
uöt32_t
 
ulP‹tSëI¡îru±Mask
( );

137 
vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 );

141 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

142 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

143 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

144 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
–0 )

	)

145 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

146 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
(x)

	)

153 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

154 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

158 
FªeRTOS_Tick_H™dÀr
( );

162 
vP‹tTaskU£sFPU
( );

163 
	#p‹tTASK_USES_FLOATING_POINT
(Ë
	`vP‹tTaskU£sFPU
()

	)

165 
	#p‹tLOWEST_INTERRUPT_PRIORITY
 ( ( ( 
uöt32_t
 ) 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 ) - 1UL )

	)

166 
	#p‹tLOWEST_USABLE_INTERRUPT_PRIORITY
 ( 
p‹tLOWEST_INTERRUPT_PRIORITY
 - 1UL )

	)

169 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

172 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

173 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

177 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`__CLZ
–uxRódyPri‹ôõ†Ë)

	)

181 #ifde‡
c⁄figASSERT


182 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

183 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

186 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûe–"NOP" )

	)

189 #ifde‡
__˝lu•lus


196 #¥agm®
düg_suµªss
=
Pe191


197 #¥agm®
düg_suµªss
=
Pa082


204 #i‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 16

205 
	#p‹tPRIORITY_SHIFT
 4

	)

206 
	#p‹tMAX_BINARY_POINT_VALUE
 3

	)

207 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 32

208 
	#p‹tPRIORITY_SHIFT
 3

	)

209 
	#p‹tMAX_BINARY_POINT_VALUE
 2

	)

210 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 64

211 
	#p‹tPRIORITY_SHIFT
 2

	)

212 
	#p‹tMAX_BINARY_POINT_VALUE
 1

	)

213 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 128

214 
	#p‹tPRIORITY_SHIFT
 1

	)

215 
	#p‹tMAX_BINARY_POINT_VALUE
 0

	)

216 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 256

217 
	#p‹tPRIORITY_SHIFT
 0

	)

218 
	#p‹tMAX_BINARY_POINT_VALUE
 0

	)

220 #îr‹ 
InvÆid
 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 
£âög
. c⁄figUNIQUE_INTERRUPT_PRIORITIES 
mu°
 
be
 
£t
 
to
 
the
 
numbî
 
of
 
unique
 
¥i‹ôõs
 
im∂emíãd
 
by
Åhê
èrgë
 
h¨dw¨e


224 
	#p‹tICCPMR_PRIORITY_MASK_OFFSET
 ( 0x04 )

	)

225 
	#p‹tICCIAR_INTERRUPT_ACKNOWLEDGE_OFFSET
 ( 0x0C )

	)

226 
	#p‹tICCEOIR_END_OF_INTERRUPT_OFFSET
 ( 0x10 )

	)

227 
	#p‹tICCBPR_BINARY_POINT_OFFSET
 ( 0x08 )

	)

228 
	#p‹tICCRPR_RUNNING_PRIORITY_OFFSET
 ( 0x14 )

	)

230 
	#p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 ( 
c⁄figINTERRUPT_CONTROLLER_BASE_ADDRESS
 + 
c⁄figINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET
 )

	)

231 
	#p‹tICCPMR_PRIORITY_MASK_REGISTER
 ( *––vﬁ©ûê
uöt8_t
 * ) ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCPMR_PRIORITY_MASK_OFFSET
 ) ) )

	)

232 
	#p‹tICCIAR_INTERRUPT_ACKNOWLEDGE_REGISTER_ADDRESS
 ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCIAR_INTERRUPT_ACKNOWLEDGE_OFFSET
 )

	)

233 
	#p‹tICCEOIR_END_OF_INTERRUPT_REGISTER_ADDRESS
 ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCEOIR_END_OF_INTERRUPT_OFFSET
 )

	)

234 
	#p‹tICCPMR_PRIORITY_MASK_REGISTER_ADDRESS
 ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCPMR_PRIORITY_MASK_OFFSET
 )

	)

235 
	#p‹tICCBPR_BINARY_POINT_REGISTER
 ( *––c⁄° vﬁ©ûê
uöt32_t
 * ) ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCBPR_BINARY_POINT_OFFSET
 ) ) )

	)

236 
	#p‹tICCRPR_RUNNING_PRIORITY_REGISTER
 ( *––c⁄° vﬁ©ûê
uöt8_t
 * ) ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCRPR_RUNNING_PRIORITY_OFFSET
 ) ) )

	)

	@portable/IAR/ARM_CM0/port.c

71 
	~"öåösics.h
"

74 
	~"FªeRTOS.h
"

75 
	~"èsk.h
"

78 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000e010 )

	)

79 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000e014 )

	)

80 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000ed20 )

	)

81 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

82 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

83 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

84 
	#p‹tMIN_INTERRUPT_PRIORITY
 ( 255UL )

	)

85 
	#p‹tNVIC_PENDSV_PRI
 ( 
p‹tMIN_INTERRUPT_PRIORITY
 << 16UL )

	)

86 
	#p‹tNVIC_SYSTICK_PRI
 ( 
p‹tMIN_INTERRUPT_PRIORITY
 << 24UL )

	)

89 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

94 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


95 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 0

	)

100 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

105 
¥vSëupTimîI¡îru±
( );

110 
xP‹tSysTickH™dÀr
( );

115 
vP‹tSèπFú°Task
( );

120 
¥vTaskExôEº‹
( );

127 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

131 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

133 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
¥vTaskExôEº‹
;

137 
pxT›OfSèck
 -= 5;

138 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

139 
pxT›OfSèck
 -= 8;

141  
pxT›OfSèck
;

142 
	}
}

145 
	$¥vTaskExôEº‹
( )

153 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

154 
	`p‹tDISABLE_INTERRUPTS
();

156 
	}
}

162 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

165 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

166 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

170 
	`¥vSëupTimîI¡îru±
();

173 
uxCrôiˇlNe°ög
 = 0;

176 
	`vP‹tSèπFú°Task
();

180 
	}
}

183 
	$vP‹tEndScheduÀr
( )

187 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

188 
	}
}

191 
	$vP‹tYõld
( )

194 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

198 
	`__DSB
();

199 
	`__ISB
();

200 
	}
}

203 
	$vP‹tE¡îCrôiˇl
( )

205 
	`p‹tDISABLE_INTERRUPTS
();

206 
uxCrôiˇlNe°ög
++;

207 
	`__DSB
();

208 
	`__ISB
();

209 
	}
}

212 
	$vP‹tExôCrôiˇl
( )

214 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

215 
uxCrôiˇlNe°ög
--;

216 if–
uxCrôiˇlNe°ög
 == 0 )

218 
	`p‹tENABLE_INTERRUPTS
();

220 
	}
}

223 
	$xP‹tSysTickH™dÀr
( )

225 
uöt32_t
 
ulPªviousMask
;

227 
ulPªviousMask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

230 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

233 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

236 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulPªviousMask
 );

237 
	}
}

244 
	$¥vSëupTimîI¡îru±
( )

247 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

248 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

249 
	}
}

	@portable/IAR/ARM_CM0/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

108 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

109 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

110 
	#p‹tBYTE_ALIGNMENT
 8

	)

115 
vP‹tYõld
( );

116 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000ed04 )

	)

117 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

118 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

119 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET


	)

120 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

126 
vP‹tE¡îCrôiˇl
( );

127 
vP‹tExôCrôiˇl
( );

128 
uöt32_t
 
ulSëI¡îru±MaskFromISR
( );

129 
vCÀ¨I¡îru±MaskFromISR
–
uöt32_t
 
ulMask
 );

131 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûe–"˝sid i" )

	)

132 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
 vﬁ©ûe–"˝sõ i" )

	)

133 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

134 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

135 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulSëI¡îru±MaskFromISR
()

	)

136 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vCÀ¨I¡îru±MaskFromISR
–x )

	)

141 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

142 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

144 
	#p‹tNOP
()

	)

149 #¥agm®
düg_suµªss
=
Pa082


151 #ifde‡
__˝lu•lus


	@portable/IAR/ARM_CM3/port.c

71 
	~<öåösics.h
>

74 
	~"FªeRTOS.h
"

75 
	~"èsk.h
"

77 #i‡
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 == 0

78 #îr‹ 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 
mu°
 
nŸ
 
be
 
£t
 
to
 0. 
Sì
 
hâp
:

81 #i‚de‡
c⁄figSYSTICK_CLOCK_HZ


82 
	#c⁄figSYSTICK_CLOCK_HZ
 
c⁄figCPU_CLOCK_HZ


	)

84 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 1UL << 2UL )

	)

88 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 0 )

	)

92 
	#p‹tNVIC_SYSTICK_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 ) )

	)

93 
	#p‹tNVIC_SYSTICK_LOAD_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 ) )

	)

94 
	#p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e018 ) )

	)

95 
	#p‹tNVIC_SYSPRI2_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 ) )

	)

97 
	#p‹tNVIC_SYSTICK_INT_BIT
 ( 1UL << 1UL )

	)

98 
	#p‹tNVIC_SYSTICK_ENABLE_BIT
 ( 1UL << 0UL )

	)

99 
	#p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ( 1UL << 16UL )

	)

100 
	#p‹tNVIC_PENDSVCLEAR_BIT
 ( 1UL << 27UL )

	)

101 
	#p‹tNVIC_PEND_SYSTICK_CLEAR_BIT
 ( 1UL << 25UL )

	)

103 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

104 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

107 
	#p‹tFIRST_USER_INTERRUPT_NUMBER
 ( 16 )

	)

108 
	#p‹tNVIC_IP_REGISTERS_OFFSET_16
 ( 0xE000E3F0 )

	)

109 
	#p‹tAIRCR_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xE000ED0C ) )

	)

110 
	#p‹tMAX_8_BIT_VALUE
 ( ( 
uöt8_t
 ) 0xf‡)

	)

111 
	#p‹tTOP_BIT_OF_BYTE
 ( ( 
uöt8_t
 ) 0x80 )

	)

112 
	#p‹tMAX_PRIGROUP_BITS
 ( ( 
uöt8_t
 ) 7 )

	)

113 
	#p‹tPRIORITY_GROUP_MASK
 ( 0x07UL << 8UL )

	)

114 
	#p‹tPRIGROUP_SHIFT
 ( 8UL )

	)

117 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

120 
	#p‹tMAX_24_BIT_NUMBER
 ( 0xffffffUL )

	)

125 
	#p‹tMISSED_COUNTS_FACTOR
 ( 45UL )

	)

130 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


131 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

136 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

143 
vP‹tSëupTimîI¡îru±
( );

148 
xP‹tSysTickH™dÀr
( );

153 
vP‹tSèπFú°Task
( );

158 
¥vTaskExôEº‹
( );

165 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

166 
uöt32_t
 
	gulTimîCou¡sF‹O√Tick
 = 0;

173 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

174 
uöt32_t
 
	gxMaximumPossibÀSuµªs£dTicks
 = 0;

181 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

182 
uöt32_t
 
	gulSt›≥dTimîCom≥nßti⁄
 = 0;

190 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

191 
uöt8_t
 
	gucMaxSysCÆlPri‹ôy
 = 0;

192 
uöt32_t
 
	gulMaxPRIGROUPVÆue
 = 0;

193 c⁄° vﬁ©ûê
uöt8_t
 * c⁄° 
	gpcI¡îru±Pri‹ôyRegi°îs
 = ( c⁄° vﬁ©ûêuöt8_à* c⁄° ) 
p‹tNVIC_IP_REGISTERS_OFFSET_16
;

201 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

205 
pxT›OfSèck
--;

206 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

207 
pxT›OfSèck
--;

208 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

209 
pxT›OfSèck
--;

210 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
¥vTaskExôEº‹
;

211 
pxT›OfSèck
 -= 5;

212 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

213 
pxT›OfSèck
 -= 8;

215  
pxT›OfSèck
;

216 
	}
}

219 
	$¥vTaskExôEº‹
( )

227 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

228 
	`p‹tDISABLE_INTERRUPTS
();

230 
	}
}

236 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

238 #if–
c⁄figASSERT_DEFINED
 == 1 )

240 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

241 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( vﬁ©ûêuöt8_à* c⁄° ) ( 
p‹tNVIC_IP_REGISTERS_OFFSET_16
 + 
p‹tFIRST_USER_INTERRUPT_NUMBER
 );

242 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

250 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

254 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

257 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

260 
ucMaxSysCÆlPri‹ôy
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 & 
ucMaxPri‹ôyVÆue
;

264 
ulMaxPRIGROUPVÆue
 = 
p‹tMAX_PRIGROUP_BITS
;

265  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tTOP_BIT_OF_BYTE
 ) ==ÖortTOP_BIT_OF_BYTE )

267 
ulMaxPRIGROUPVÆue
--;

268 
ucMaxPri‹ôyVÆue
 <<–
uöt8_t
 ) 0x01;

273 
ulMaxPRIGROUPVÆue
 <<
p‹tPRIGROUP_SHIFT
;

274 
ulMaxPRIGROUPVÆue
 &
p‹tPRIORITY_GROUP_MASK
;

278 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

283 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_PENDSV_PRI
;

284 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_SYSTICK_PRI
;

288 
	`vP‹tSëupTimîI¡îru±
();

291 
uxCrôiˇlNe°ög
 = 0;

294 
	`vP‹tSèπFú°Task
();

298 
	}
}

301 
	$vP‹tEndScheduÀr
( )

305 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

306 
	}
}

309 
	$vP‹tYõld
( )

312 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

316 
	`__DSB
();

317 
	`__ISB
();

318 
	}
}

321 
	$vP‹tE¡îCrôiˇl
( )

323 
	`p‹tDISABLE_INTERRUPTS
();

324 
uxCrôiˇlNe°ög
++;

325 
	`__DSB
();

326 
	`__ISB
();

327 
	}
}

330 
	$vP‹tExôCrôiˇl
( )

332 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

333 
uxCrôiˇlNe°ög
--;

334 if–
uxCrôiˇlNe°ög
 == 0 )

336 
	`p‹tENABLE_INTERRUPTS
();

338 
	}
}

341 
	$xP‹tSysTickH™dÀr
( )

347 –Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

350 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

354 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

357 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
( 0 );

358 
	}
}

361 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

363 
__wók
 
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

365 
uöt32_t
 
ulRñﬂdVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCom∂ëedSysTickDe¸emíts
, 
ulSysTickCTRL
;

366 
TickTy≥_t
 
xModifübÀIdÀTime
;

369 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

371 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

378 
p‹tNVIC_SYSTICK_CTRL_REG
 &~
p‹tNVIC_SYSTICK_ENABLE_BIT
;

383 
ulRñﬂdVÆue
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 + ( 
ulTimîCou¡sF‹O√Tick
 * ( 
xEx≥˘edIdÀTime
 - 1UL ) );

384 if–
ulRñﬂdVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

386 
ulRñﬂdVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

391 
	`__dißbÀ_öãºu±
();

395 if–
	`eTaskC⁄fúmSÀïModeSètus
(Ë=
eAb‹tSÀï
 )

399 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

402 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

406 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

410 
	`__íabÀ_öãºu±
();

415 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulRñﬂdVÆue
;

419 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

422 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

429 
xModifübÀIdÀTime
 = 
xEx≥˘edIdÀTime
;

430 
	`c⁄figPRE_SLEEP_PROCESSING
–
xModifübÀIdÀTime
 );

431 if–
xModifübÀIdÀTime
 > 0 )

433 
	`__DSB
();

434 
	`__WFI
();

435 
	`__ISB
();

437 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

443 
ulSysTickCTRL
 = 
p‹tNVIC_SYSTICK_CTRL_REG
;

444 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
ulSysTickCTRL
 & ~
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

448 
	`__íabÀ_öãºu±
();

450 if––
ulSysTickCTRL
 & 
p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ) != 0 )

452 
uöt32_t
 
ulCÆcuœãdLﬂdVÆue
;

458 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL ) - ( 
ulRñﬂdVÆue
 - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 );

463 if––
ulCÆcuœãdLﬂdVÆue
 < 
ulSt›≥dTimîCom≥nßti⁄
 ) || ( ulCÆcuœãdLﬂdVÆuê> 
ulTimîCou¡sF‹O√Tick
 ) )

465 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL );

468 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulCÆcuœãdLﬂdVÆue
;

475 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

483 
ulCom∂ëedSysTickDe¸emíts
 = ( 
xEx≥˘edIdÀTime
 * 
ulTimîCou¡sF‹O√Tick
 ) - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

487 
ulCom∂ëeTickPîiods
 = 
ulCom∂ëedSysTickDe¸emíts
 / 
ulTimîCou¡sF‹O√Tick
;

491 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( ( 
ulCom∂ëeTickPîiods
 + 1 ) * 
ulTimîCou¡sF‹O√Tick
 ) - 
ulCom∂ëedSysTickDe¸emíts
;

499 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

500 
	`p‹tENTER_CRITICAL
();

502 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

503 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

504 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

506 
	`p‹tEXIT_CRITICAL
();

508 
	}
}

517 
__wók
 
	$vP‹tSëupTimîI¡îru±
( )

520 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

522 
ulTimîCou¡sF‹O√Tick
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

523 
xMaximumPossibÀSuµªs£dTicks
 = 
p‹tMAX_24_BIT_NUMBER
 / 
ulTimîCou¡sF‹O√Tick
;

524 
ulSt›≥dTimîCom≥nßti⁄
 = 
p‹tMISSED_COUNTS_FACTOR
 / ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figSYSTICK_CLOCK_HZ
 );

529 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

530 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 | 
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

531 
	}
}

534 #if–
c⁄figASSERT_DEFINED
 == 1 )

536 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

538 
uöt32_t
 
ulCuºítI¡îru±
;

539 
uöt8_t
 
ucCuºítPri‹ôy
;

542 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) );

545 if–
ulCuºítI¡îru±
 >
p‹tFIRST_USER_INTERRUPT_NUMBER
 )

548 
ucCuºítPri‹ôy
 = 
pcI¡îru±Pri‹ôyRegi°îs
[ 
ulCuºítI¡îru±
 ];

573 
	`c⁄figASSERT
–
ucCuºítPri‹ôy
 >
ucMaxSysCÆlPri‹ôy
 );

589 
	`c⁄figASSERT
––
p‹tAIRCR_REG
 & 
p‹tPRIORITY_GROUP_MASK
 ) <
ulMaxPRIGROUPVÆue
 );

590 
	}
}

	@portable/IAR/ARM_CM3/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

113 
vP‹tYõld
( );

114 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04UL ) )

	)

115 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

116 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

117 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT


	)

118 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

122 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

125 #if–
c⁄figMAX_PRIORITIES
 > 32 )

126 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

130 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) ) )

	)

131 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) ) )

	)

135 
	~<öåösics.h
>

136 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`__CLZ
––uxRódyPri‹ôõ†ËË)

	)

142 
vP‹tE¡îCrôiˇl
( );

143 
vP‹tExôCrôiˇl
( );

144 
uöt32_t
 
ulP‹tSëI¡îru±Mask
( );

145 
vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMask
 );

147 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

148 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
–0 )

	)

149 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

150 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

151 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

152 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
–x )

	)

156 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


157 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

158 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

165 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

166 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

169 #ifde‡
c⁄figASSERT


170 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

171 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

175 
	#p‹tNOP
()

	)

180 #¥agm®
düg_suµªss
=
Pe191


181 #¥agm®
düg_suµªss
=
Pa082


183 #ifde‡
__˝lu•lus


	@portable/IAR/ARM_CM4F/port.c

71 
	~<öåösics.h
>

74 
	~"FªeRTOS.h
"

75 
	~"èsk.h
"

77 #i‚de‡
__ARMVFP__


78 #îr‹ 
This
 
p‹t
 
ˇn
 
⁄ly
 
be
 
u£d
 
whí
 
the
 
¥oje˘
 
›ti⁄s
 
¨e
 
c⁄figuªd
 
to
 
íabÀ
 
h¨dw¨e
 
Êﬂtög
 
poöt
 
suµ‹t
.

81 #i‡
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 == 0

82 #îr‹ 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 
mu°
 
nŸ
 
be
 
£t
 
to
 0. 
Sì
 
hâp
:

85 #i‚de‡
c⁄figSYSTICK_CLOCK_HZ


86 
	#c⁄figSYSTICK_CLOCK_HZ
 
c⁄figCPU_CLOCK_HZ


	)

88 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 1UL << 2UL )

	)

92 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 0 )

	)

96 
	#p‹tNVIC_SYSTICK_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 ) )

	)

97 
	#p‹tNVIC_SYSTICK_LOAD_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 ) )

	)

98 
	#p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e018 ) )

	)

99 
	#p‹tNVIC_SYSPRI2_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 ) )

	)

101 
	#p‹tNVIC_SYSTICK_INT_BIT
 ( 1UL << 1UL )

	)

102 
	#p‹tNVIC_SYSTICK_ENABLE_BIT
 ( 1UL << 0UL )

	)

103 
	#p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ( 1UL << 16UL )

	)

104 
	#p‹tNVIC_PENDSVCLEAR_BIT
 ( 1UL << 27UL )

	)

105 
	#p‹tNVIC_PEND_SYSTICK_CLEAR_BIT
 ( 1UL << 25UL )

	)

107 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

108 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

111 
	#p‹tFIRST_USER_INTERRUPT_NUMBER
 ( 16 )

	)

112 
	#p‹tNVIC_IP_REGISTERS_OFFSET_16
 ( 0xE000E3F0 )

	)

113 
	#p‹tAIRCR_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xE000ED0C ) )

	)

114 
	#p‹tMAX_8_BIT_VALUE
 ( ( 
uöt8_t
 ) 0xf‡)

	)

115 
	#p‹tTOP_BIT_OF_BYTE
 ( ( 
uöt8_t
 ) 0x80 )

	)

116 
	#p‹tMAX_PRIGROUP_BITS
 ( ( 
uöt8_t
 ) 7 )

	)

117 
	#p‹tPRIORITY_GROUP_MASK
 ( 0x07UL << 8UL )

	)

118 
	#p‹tPRIGROUP_SHIFT
 ( 8UL )

	)

121 
	#p‹tFPCCR
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ef34 )

	)

122 
	#p‹tASPEN_AND_LSPEN_BITS
 ( 0x3UL << 30UL )

	)

125 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

126 
	#p‹tINITIAL_EXEC_RETURN
 ( 0xfffffffd )

	)

129 
	#p‹tMAX_24_BIT_NUMBER
 ( 0xffffffUL )

	)

134 
	#p‹tMISSED_COUNTS_FACTOR
 ( 45UL )

	)

139 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

146 
vP‹tSëupTimîI¡îru±
( );

151 
xP‹tSysTickH™dÀr
( );

156 
vP‹tSèπFú°Task
( );

161 
vP‹tE«bÀVFP
( );

166 
¥vTaskExôEº‹
( );

173 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

174 
uöt32_t
 
	gulTimîCou¡sF‹O√Tick
 = 0;

181 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

182 
uöt32_t
 
	gxMaximumPossibÀSuµªs£dTicks
 = 0;

189 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

190 
uöt32_t
 
	gulSt›≥dTimîCom≥nßti⁄
 = 0;

198 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

199 
uöt8_t
 
	gucMaxSysCÆlPri‹ôy
 = 0;

200 
uöt32_t
 
	gulMaxPRIGROUPVÆue
 = 0;

201 c⁄° vﬁ©ûê
uöt8_t
 * c⁄° 
	gpcI¡îru±Pri‹ôyRegi°îs
 = ( c⁄° vﬁ©ûêuöt8_à* c⁄° ) 
p‹tNVIC_IP_REGISTERS_OFFSET_16
;

209 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

216 
pxT›OfSèck
--;

218 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

219 
pxT›OfSèck
--;

220 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

221 
pxT›OfSèck
--;

222 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
¥vTaskExôEº‹
;

225 
pxT›OfSèck
 -= 5;

226 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

230 
pxT›OfSèck
--;

231 *
pxT›OfSèck
 = 
p‹tINITIAL_EXEC_RETURN
;

233 
pxT›OfSèck
 -= 8;

235  
pxT›OfSèck
;

236 
	}
}

239 
	$¥vTaskExôEº‹
( )

247 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

248 
	`p‹tDISABLE_INTERRUPTS
();

250 
	}
}

256 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

258 #if–
c⁄figASSERT_DEFINED
 == 1 )

260 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

261 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( vﬁ©ûêuöt8_à* c⁄° ) ( 
p‹tNVIC_IP_REGISTERS_OFFSET_16
 + 
p‹tFIRST_USER_INTERRUPT_NUMBER
 );

262 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

270 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

274 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

277 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

280 
ucMaxSysCÆlPri‹ôy
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 & 
ucMaxPri‹ôyVÆue
;

284 
ulMaxPRIGROUPVÆue
 = 
p‹tMAX_PRIGROUP_BITS
;

285  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tTOP_BIT_OF_BYTE
 ) ==ÖortTOP_BIT_OF_BYTE )

287 
ulMaxPRIGROUPVÆue
--;

288 
ucMaxPri‹ôyVÆue
 <<–
uöt8_t
 ) 0x01;

293 
ulMaxPRIGROUPVÆue
 <<
p‹tPRIGROUP_SHIFT
;

294 
ulMaxPRIGROUPVÆue
 &
p‹tPRIORITY_GROUP_MASK
;

298 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

303 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_PENDSV_PRI
;

304 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_SYSTICK_PRI
;

308 
	`vP‹tSëupTimîI¡îru±
();

311 
uxCrôiˇlNe°ög
 = 0;

314 
	`vP‹tE«bÀVFP
();

317 *–
p‹tFPCCR
 ) |
p‹tASPEN_AND_LSPEN_BITS
;

320 
	`vP‹tSèπFú°Task
();

324 
	}
}

327 
	$vP‹tEndScheduÀr
( )

331 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

332 
	}
}

335 
	$vP‹tYõld
( )

338 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

342 
	`__DSB
();

343 
	`__ISB
();

344 
	}
}

347 
	$vP‹tE¡îCrôiˇl
( )

349 
	`p‹tDISABLE_INTERRUPTS
();

350 
uxCrôiˇlNe°ög
++;

351 
	`__DSB
();

352 
	`__ISB
();

353 
	}
}

356 
	$vP‹tExôCrôiˇl
( )

358 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

359 
uxCrôiˇlNe°ög
--;

360 if–
uxCrôiˇlNe°ög
 == 0 )

362 
	`p‹tENABLE_INTERRUPTS
();

364 
	}
}

367 
	$xP‹tSysTickH™dÀr
( )

373 –Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

376 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

380 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

383 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
( 0 );

384 
	}
}

387 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

389 
__wók
 
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

391 
uöt32_t
 
ulRñﬂdVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCom∂ëedSysTickDe¸emíts
, 
ulSysTickCTRL
;

392 
TickTy≥_t
 
xModifübÀIdÀTime
;

395 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

397 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

404 
p‹tNVIC_SYSTICK_CTRL_REG
 &~
p‹tNVIC_SYSTICK_ENABLE_BIT
;

409 
ulRñﬂdVÆue
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 + ( 
ulTimîCou¡sF‹O√Tick
 * ( 
xEx≥˘edIdÀTime
 - 1UL ) );

410 if–
ulRñﬂdVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

412 
ulRñﬂdVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

417 
	`__dißbÀ_öãºu±
();

421 if–
	`eTaskC⁄fúmSÀïModeSètus
(Ë=
eAb‹tSÀï
 )

425 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

428 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

432 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

436 
	`__íabÀ_öãºu±
();

441 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulRñﬂdVÆue
;

445 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

448 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

455 
xModifübÀIdÀTime
 = 
xEx≥˘edIdÀTime
;

456 
	`c⁄figPRE_SLEEP_PROCESSING
–
xModifübÀIdÀTime
 );

457 if–
xModifübÀIdÀTime
 > 0 )

459 
	`__DSB
();

460 
	`__WFI
();

461 
	`__ISB
();

463 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

469 
ulSysTickCTRL
 = 
p‹tNVIC_SYSTICK_CTRL_REG
;

470 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
ulSysTickCTRL
 & ~
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

474 
	`__íabÀ_öãºu±
();

476 if––
ulSysTickCTRL
 & 
p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ) != 0 )

478 
uöt32_t
 
ulCÆcuœãdLﬂdVÆue
;

484 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL ) - ( 
ulRñﬂdVÆue
 - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 );

489 if––
ulCÆcuœãdLﬂdVÆue
 < 
ulSt›≥dTimîCom≥nßti⁄
 ) || ( ulCÆcuœãdLﬂdVÆuê> 
ulTimîCou¡sF‹O√Tick
 ) )

491 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL );

494 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulCÆcuœãdLﬂdVÆue
;

501 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

509 
ulCom∂ëedSysTickDe¸emíts
 = ( 
xEx≥˘edIdÀTime
 * 
ulTimîCou¡sF‹O√Tick
 ) - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

513 
ulCom∂ëeTickPîiods
 = 
ulCom∂ëedSysTickDe¸emíts
 / 
ulTimîCou¡sF‹O√Tick
;

517 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( ( 
ulCom∂ëeTickPîiods
 + 1 ) * 
ulTimîCou¡sF‹O√Tick
 ) - 
ulCom∂ëedSysTickDe¸emíts
;

525 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

526 
	`p‹tENTER_CRITICAL
();

528 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

529 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

530 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

532 
	`p‹tEXIT_CRITICAL
();

534 
	}
}

543 
__wók
 
	$vP‹tSëupTimîI¡îru±
( )

546 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

548 
ulTimîCou¡sF‹O√Tick
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

549 
xMaximumPossibÀSuµªs£dTicks
 = 
p‹tMAX_24_BIT_NUMBER
 / 
ulTimîCou¡sF‹O√Tick
;

550 
ulSt›≥dTimîCom≥nßti⁄
 = 
p‹tMISSED_COUNTS_FACTOR
 / ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figSYSTICK_CLOCK_HZ
 );

555 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

556 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 | 
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

557 
	}
}

560 #if–
c⁄figASSERT_DEFINED
 == 1 )

562 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

564 
uöt32_t
 
ulCuºítI¡îru±
;

565 
uöt8_t
 
ucCuºítPri‹ôy
;

568 
__asm
 vﬁ©ûe–"mr†%0, ip§" : "Ù"–
ulCuºítI¡îru±
 ) );

571 if–
ulCuºítI¡îru±
 >
p‹tFIRST_USER_INTERRUPT_NUMBER
 )

574 
ucCuºítPri‹ôy
 = 
pcI¡îru±Pri‹ôyRegi°îs
[ 
ulCuºítI¡îru±
 ];

599 
	`c⁄figASSERT
–
ucCuºítPri‹ôy
 >
ucMaxSysCÆlPri‹ôy
 );

615 
	`c⁄figASSERT
––
p‹tAIRCR_REG
 & 
p‹tPRIORITY_GROUP_MASK
 ) <
ulMaxPRIGROUPVÆue
 );

616 
	}
}

	@portable/IAR/ARM_CM4F/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

113 
vP‹tYõld
( );

114 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

115 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

116 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

117 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT


	)

118 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

122 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

125 #if–
c⁄figMAX_PRIORITIES
 > 32 )

126 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

130 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

131 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

135 
	~<öåösics.h
>

136 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`__CLZ
––uxRódyPri‹ôõ†ËË)

	)

142 
vP‹tE¡îCrôiˇl
( );

143 
vP‹tExôCrôiˇl
( );

144 
uöt32_t
 
ulP‹tSëI¡îru±Mask
( );

145 
vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMask
 );

147 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

148 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
–0 )

	)

149 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

150 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

151 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

152 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
–x )

	)

156 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


157 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

158 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

166 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

167 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

170 #ifde‡
c⁄figASSERT


171 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

172 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

176 
	#p‹tNOP
()

	)

181 #¥agm®
düg_suµªss
=
Pe191


182 #¥agm®
düg_suµªss
=
Pa082


184 #ifde‡
__˝lu•lus


	@portable/IAR/ATMega323/port.c

66 
	~<°dlib.h
>

68 
	~"FªeRTOS.h
"

69 
	~"èsk.h
"

76 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
SèckTy≥_t
 ) 0x80 )

	)

79 
	#p‹tCLEAR_COUNTER_ON_MATCH
 ( ( 
uöt8_t
 ) 0x08 )

	)

80 
	#p‹tPRESCALE_64
 ( ( 
uöt8_t
 ) 0x03 )

	)

81 
	#p‹tCLOCK_PRESCALER
 ( ( 
uöt32_t
 ) 64 )

	)

82 
	#p‹tCOMPARE_MATCH_A_INTERRUPT_ENABLE
 ( ( 
uöt8_t
 ) 0x10 )

	)

85 
	#p‹tBYTES_USED_BY_RETURN_ADDRESS
 ( 2 )

	)

90 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
UBa£Ty≥_t
 ) 0 )

	)

91 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0x50;

97 
¥vSëupTimîI¡îru±
( );

103 
vP‹tYõldFromTick
( );

104 
vP‹tSèπ
( );

111 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

113 
uöt16_t
 
usAddªss
;

114 
SèckTy≥_t
 *
pxT›OfH¨dw¨eSèck
;

119 *
pxT›OfSèck
 = 0x11;

120 
pxT›OfSèck
--;

121 *
pxT›OfSèck
 = 0x22;

122 
pxT›OfSèck
--;

123 *
pxT›OfSèck
 = 0x33;

124 
pxT›OfSèck
--;

128 
pxT›OfH¨dw¨eSèck
 = 
pxT›OfSèck
;

152 
usAddªss
 = ( 
uöt16_t
 ) 
pxCode
;

153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
usAddªss
 & ( 
uöt16_t
 ) 0x00ff );

154 
pxT›OfSèck
--;

156 
usAddªss
 >>= 8;

157 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
usAddªss
 & ( 
uöt16_t
 ) 0x00ff );

158 
pxT›OfSèck
--;

164 
pxT›OfSèck
 -–
c⁄figCALL_STACK_SIZE
 - 2 );

172 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

173 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

175 
pxT›OfSèck
--;

179 
pxT›OfH¨dw¨eSèck
 -
p‹tBYTES_USED_BY_RETURN_ADDRESS
;

180 
usAddªss
 = ( 
uöt16_t
 ) 
pxT›OfH¨dw¨eSèck
;

183 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
usAddªss
 & ( 
uöt16_t
 ) 0x00ff );

184 
pxT›OfSèck
--;

187 
usAddªss
 >>= 8;

188 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
usAddªss
 & ( 
uöt16_t
 ) 0x00ff );

189 
pxT›OfSèck
--;

195 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01;

196 
pxT›OfSèck
--;

197 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02;

198 
pxT›OfSèck
--;

199 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03;

200 
pxT›OfSèck
--;

201 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04;

202 
pxT›OfSèck
--;

203 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05;

204 
pxT›OfSèck
--;

205 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06;

206 
pxT›OfSèck
--;

207 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07;

208 
pxT›OfSèck
--;

209 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08;

210 
pxT›OfSèck
--;

211 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09;

212 
pxT›OfSèck
--;

213 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10;

214 
pxT›OfSèck
--;

215 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11;

216 
pxT›OfSèck
--;

217 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12;

218 
pxT›OfSèck
--;

219 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x13;

220 
pxT›OfSèck
--;

221 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x14;

222 
pxT›OfSèck
--;

223 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x15;

224 
pxT›OfSèck
--;

227 
usAddªss
 = ( 
uöt16_t
 ) 
pvP¨amëîs
;

228 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
usAddªss
 & ( 
uöt16_t
 ) 0x00ff );

229 
pxT›OfSèck
--;

231 
usAddªss
 >>= 8;

232 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
usAddªss
 & ( 
uöt16_t
 ) 0x00ff );

233 
pxT›OfSèck
--;

235 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x18;

236 
pxT›OfSèck
--;

237 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x19;

238 
pxT›OfSèck
--;

239 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x20;

240 
pxT›OfSèck
--;

241 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x21;

242 
pxT›OfSèck
--;

243 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x22;

244 
pxT›OfSèck
--;

245 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x23;

246 
pxT›OfSèck
--;

247 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x24;

248 
pxT›OfSèck
--;

249 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x25;

250 
pxT›OfSèck
--;

251 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x26;

252 
pxT›OfSèck
--;

253 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x27;

254 
pxT›OfSèck
--;

259 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x30;

260 
pxT›OfSèck
--;

261 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x031;

263 
pxT›OfSèck
--;

264 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

268  
pxT›OfSèck
;

269 
	}
}

272 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

275 
	`¥vSëupTimîI¡îru±
();

280 
	`vP‹tSèπ
();

283  
pdTRUE
;

284 
	}
}

287 
	$vP‹tEndScheduÀr
( )

291 
	}
}

297 
	$¥vSëupTimîI¡îru±
( )

299 
uöt32_t
 
ulCom∑ªM©ch
;

300 
uöt8_t
 
ucHighByã
, 
ucLowByã
;

305 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

308 
ulCom∑ªM©ch
 /
p‹tCLOCK_PRESCALER
;

311 
ulCom∑ªM©ch
 -–
uöt32_t
 ) 1;

315 
ucLowByã
 = ( 
uöt8_t
 ) ( 
ulCom∑ªM©ch
 & ( 
uöt32_t
 ) 0xff );

316 
ulCom∑ªM©ch
 >>= 8;

317 
ucHighByã
 = ( 
uöt8_t
 ) ( 
ulCom∑ªM©ch
 & ( 
uöt32_t
 ) 0xff );

318 
OCR1AH
 = 
ucHighByã
;

319 
OCR1AL
 = 
ucLowByã
;

322 
ucLowByã
 = 
p‹tCLEAR_COUNTER_ON_MATCH
 | 
p‹tPRESCALE_64
;

323 
TCCR1B
 = 
ucLowByã
;

327 
TIMSK
 |
p‹tCOMPARE_MATCH_A_INTERRUPT_ENABLE
;

328 
	}
}

331 #i‡
c⁄figUSE_PREEMPTION
 == 1

338 
__èsk
 
	$SIG_OUTPUT_COMPARE1A
( )

340 
	`vP‹tYõldFromTick
();

341 
	`asm
( "reti" );

342 
	}
}

354 
__öãºu±
 
	$SIG_OUTPUT_COMPARE1A
( )

356 
	`xTaskIn¸emítTick
();

357 
	}
}

361 
	$vP‹tE¡îCrôiˇl
( )

363 
	`p‹tDISABLE_INTERRUPTS
();

364 
uxCrôiˇlNe°ög
++;

365 
	}
}

368 
	$vP‹tExôCrôiˇl
( )

370 
uxCrôiˇlNe°ög
--;

371 if–
uxCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

373 
	`p‹tENABLE_INTERRUPTS
();

375 
	}
}

	@portable/IAR/ATMega323/portmacro.h

73 #i‚de‡
PORTMACRO_H


74 
	#PORTMACRO_H


	)

76 #ifde‡
__˝lu•lus


91 
	#p‹tCHAR
 

	)

92 
	#p‹tFLOAT
 

	)

93 
	#p‹tDOUBLE
 

	)

94 
	#p‹tLONG
 

	)

95 
	#p‹tSHORT
 

	)

96 
	#p‹tSTACK_TYPE
 
uöt8_t


	)

97 
	#p‹tBASE_TYPE
 

	)

98 
	#p‹tPOINTER_SIZE_TYPE
 
uöt16_t


	)

100 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

101 sig√d 
	tBa£Ty≥_t
;

102 
	tUBa£Ty≥_t
;

104 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

105 
uöt16_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

108 
uöt32_t
 
	tTickTy≥_t
;

109 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

115 
vP‹tE¡îCrôiˇl
( );

116 
vP‹tExôCrôiˇl
( );

117 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

118 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

120 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`asm
–"˛i" )

	)

121 
	#p‹tENABLE_INTERRUPTS
(Ë
	`asm
–"£i" )

	)

125 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

126 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

127 
	#p‹tBYTE_ALIGNMENT
 1

	)

128 
	#p‹tNOP
(Ë
	`asm
–"n›" )

	)

132 
vP‹tYõld
( );

133 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

135 #ifde‡
IAR_MEGA_AVR


136 
	#outb
–
PORT
, 
VALUE
 ) PORT = 
	)
VALUE

141 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

142 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

144 #ifde‡
__˝lu•lus


	@portable/IAR/AVR32_UC3/port.c

82 
	~"FªeRTOS.h
"

83 
	~"èsk.h
"

86 
	~<avr32/io.h
>

87 
	~<öåösics.h
>

88 
	~"gpio.h
"

90 #i‡
c⁄figDBG


91 
	~"ußπ.h
"

94 #if–
c⁄figTICK_USE_TC
==1 )

95 
	~"tc.h
"

100 
	#p‹tINITIAL_SR
 ( ( 
SèckTy≥_t
 ) 0x00400000 )

	)

101 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 0 )

	)

104 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

105 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

107 #if–
c⁄figTICK_USE_TC
==0 )

108 
¥vScheduÀNextTick
( );

110 
¥vCÀ¨TcI¡
( );

114 
¥vSëupTimîI¡îru±
( );

122 
	$__low_Àvñ_öô
()

124 #i‡
c⁄figHEAP_INIT


125 #¥agm®
£gmít
 = "HEAP"

126 
Ba£Ty≥_t
 *
pxMem
;

130 
	`ENABLE_ALL_EXCEPTIONS
();

133 
	`INTC_öô_öãºu±s
();

135 #i‡
c⁄figHEAP_INIT


138  
pxMem
 = 
	`__£gmít_begö
–"HEAP" );ÖxMem < ( 
Ba£Ty≥_t
 * ) 
	`__£gmít_íd
( "HEAP" ); )

140 *
pxMem
++ = 0xA5A5A5A5;

146 #i‡
c⁄figDBG


148 c⁄° 
gpio_m≠_t
 
DBG_USART_GPIO_MAP
 =

150 { 
c⁄figDBG_USART_RX_PIN
, 
c⁄figDBG_USART_RX_FUNCTION
 },

151 { 
c⁄figDBG_USART_TX_PIN
, 
c⁄figDBG_USART_TX_FUNCTION
 }

154 c⁄° 
ußπ_›ti⁄s_t
 
DBG_USART_OPTIONS
 =

156 .
baudøã
 = 
c⁄figDBG_USART_BAUDRATE
,

157 .
ch¨Àngth
 = 8,

158 .
∑rôyty≥
 = 
USART_NO_PARITY
,

159 .
°›bôs
 = 
USART_1_STOPBIT
,

160 .
ch™√lmode
 = 
USART_NORMAL_CHMODE


164 vﬁ©ûê
avr32_ußπ_t
 *vﬁ©ûê
°dio_ußπ_ba£
;

165 
°dio_ußπ_ba£
 = 
c⁄figDBG_USART
;

166 
	`gpio_íabÀ_moduÀ
–
DBG_USART_GPIO_MAP
,

167 –
DBG_USART_GPIO_MAP
 ) / ( DBG_USART_GPIO_MAP[0] ) );

168 
	`ußπ_öô_rs232
(
c⁄figDBG_USART
, &
DBG_USART_OPTIONS
, 
c⁄figCPU_CLOCK_HZ
);

174 
	}
}

178 *
	$pvP‹tRóŒoc
–*
pv
, 
size_t
 
xW™ãdSize
 )

180 *
pvRëu∫
;

182 
	`vTaskSu•ídAŒ
();

184 
pvRëu∫
 = 
	`ªÆloc
–
pv
, 
xW™ãdSize
 );

186 
	`xTaskResumeAŒ
();

188  
pvRëu∫
;

189 
	}
}

196 #¥agm®
shadow_ªgi°îs
 = 
fuŒ


197 
	$vTick
( )

200 
	`p‹tSAVE_CONTEXT_OS_INT
();

202 #if–
c⁄figTICK_USE_TC
==1 )

204 
	`¥vCÀ¨TcI¡
();

208 
	`¥vScheduÀNextTick
();

213 
	`p‹tENTER_CRITICAL
();

214 
	`xTaskIn¸emítTick
();

215 
	`p‹tEXIT_CRITICAL
();

218 
	`p‹tRESTORE_CONTEXT_OS_INT
();

219 
	}
}

222 #¥agm®
shadow_ªgi°îs
 = 
fuŒ


223 
	$SCALLYõld
( )

226 
	`p‹tSAVE_CONTEXT_SCALL
();

227 
	`vTaskSwôchC⁄ãxt
();

228 
	`p‹tRESTORE_CONTEXT_SCALL
();

229 
	}
}

236 #¥agm®
›timize
 = 
no_ölöe


237 
	$vP‹tE¡îCrôiˇl
( )

240 
	`p‹tDISABLE_INTERRUPTS
();

245 
ulCrôiˇlNe°ög
++;

246 
	}
}

249 #¥agm®
›timize
 = 
no_ölöe


250 
	$vP‹tExôCrôiˇl
( )

252 if(
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
)

254 
ulCrôiˇlNe°ög
--;

255 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

258 
	`p‹tENABLE_INTERRUPTS
();

261 
	}
}

270 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

276 
pxT›OfSèck
--;

277 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x08080808;

278 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x09090909;

279 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x0A0A0A0A;

280 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x0B0B0B0B;

281 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

282 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0xDEADBEEF;

283 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

284 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SR
;

285 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0xFF0000FF;

286 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x01010101;

287 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x02020202;

288 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x03030303;

289 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x04040404;

290 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x05050505;

291 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x06060606;

292 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x07070707;

293 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tNO_CRITICAL_NESTING
;

295  
pxT›OfSèck
;

296 
	}
}

299 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

303 
	`¥vSëupTimîI¡îru±
();

306 
	`p‹tRESTORE_CONTEXT
();

310 
	}
}

313 
	$vP‹tEndScheduÀr
( )

317 
	}
}

322 #if–
c⁄figTICK_USE_TC
==0 )

323 
	$¥vScheduÀFú°Tick
()

325 
uöt32_t
 
lCy˛es
;

327 
lCy˛es
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COUNT
);

328 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

331 if(0 =
lCy˛es
)

333 
lCy˛es
++;

335 
	`Së_sy°em_ªgi°î
(
AVR32_COMPARE
, 
lCy˛es
);

336 
	}
}

338 #¥agm®
›timize
 = 
no_ölöe


339 
	$¥vScheduÀNextTick
()

341 
uöt32_t
 
lCy˛es
, 
lCou¡
;

343 
lCy˛es
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COMPARE
);

344 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

347 if(0 =
lCy˛es
)

349 
lCy˛es
++;

351 
lCou¡
 = 
	`Gë_sy°em_ªgi°î
(
AVR32_COUNT
);

352 if–
lCy˛es
 < 
lCou¡
 )

354 
lCy˛es
 +(
c⁄figCPU_CLOCK_HZ
/
c⁄figTICK_RATE_HZ
);

356 
	`Së_sy°em_ªgi°î
(
AVR32_COMPARE
, 
lCy˛es
);

357 
	}
}

359 #¥agm®
›timize
 = 
no_ölöe


360 
	$¥vCÀ¨TcI¡
()

362 
AVR32_TC
.
ch™√l
[
c⁄figTICK_TC_CHANNEL
].
§
;

363 
	}
}

368 
	$¥vSëupTimîI¡îru±
()

370 #if–
c⁄figTICK_USE_TC
==1 )

372 vﬁ©ûê
avr32_tc_t
 *
tc
 = &
AVR32_TC
;

375 
tc_wavef‹m_›t_t
 
wavef‹m_›t
 =

377 .
ch™√l
 = 
c⁄figTICK_TC_CHANNEL
,

379 .
bswåg
 = 
TC_EVT_EFFECT_NOOP
,

380 .
bìvt
 = 
TC_EVT_EFFECT_NOOP
,

381 .
b˝c
 = 
TC_EVT_EFFECT_NOOP
,

382 .
b˝b
 = 
TC_EVT_EFFECT_NOOP
,

384 .
aswåg
 = 
TC_EVT_EFFECT_NOOP
,

385 .
´evt
 = 
TC_EVT_EFFECT_NOOP
,

386 .
a˝c
 = 
TC_EVT_EFFECT_NOOP
,

387 .
a˝a
 = 
TC_EVT_EFFECT_NOOP
,

389 .
wav£l
 = 
TC_WAVEFORM_SEL_UP_MODE_RC_TRIGGER
,

390 .
íërg
 = 
FALSE
,

391 .
ìvt
 = 0,

392 .
ìvãdg
 = 
TC_SEL_NO_EDGE
,

393 .
˝cdis
 = 
FALSE
,

394 .
˝c°›
 = 
FALSE
,

396 .
bur°
 = 
FALSE
,

397 .
˛ki
 = 
FALSE
,

398 .
tc˛ks
 = 
TC_CLOCK_SOURCE_TC2


401 
tc_öãºu±_t
 
tc_öãºu±
 =

403 .
ërgs
=0,

404 .
ldrbs
=0,

405 .
ldøs
=0,

406 .
˝cs
 =1,

407 .
˝bs
 =0,

408 .
˝as
 =0,

409 .
lovrs
=0,

410 .
covfs
=0,

416 
	`p‹tDISABLE_INTERRUPTS
();

421 #if–
c⁄figTICK_USE_TC
==1 )

423 
	`INTC_ªgi°î_öãºu±
((
__öt_h™dÀr
)&
vTick
, 
c⁄figTICK_TC_IRQ
, 
INT0
);

426 
	`tc_öô_wavef‹m
(
tc
, &
wavef‹m_›t
);

431 
	`tc_wrôe_rc
–
tc
, 
c⁄figTICK_TC_CHANNEL
, ( 
c⁄figPBA_CLOCK_HZ
 / 4Ë/ 
c⁄figTICK_RATE_HZ
 );

433 
	`tc_c⁄figuª_öãºu±s
–
tc
, 
c⁄figTICK_TC_CHANNEL
, &
tc_öãºu±
 );

436 
	`tc_°¨t
(
tc
, 
c⁄figTICK_TC_CHANNEL
);

440 
	`INTC_ªgi°î_öãºu±
((
__öt_h™dÀr
)&
vTick
, 
AVR32_CORE_COMPARE_IRQ
, 
INT0
);

441 
	`¥vScheduÀFú°Tick
();

444 
	}
}

	@portable/IAR/AVR32_UC3/portmacro.h

82 #i‚de‡
PORTMACRO_H


83 
	#PORTMACRO_H


	)

94 
	~<avr32/io.h
>

95 
	~"ötc.h
"

96 
	~"compûî.h
"

98 #ifde‡
__˝lu•lus


104 
	#p‹tCHAR
 

	)

105 
	#p‹tFLOAT
 

	)

106 
	#p‹tDOUBLE
 

	)

107 
	#p‹tLONG
 

	)

108 
	#p‹tSHORT
 

	)

109 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

110 
	#p‹tBASE_TYPE
 

	)

112 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

113 
	tBa£Ty≥_t
;

114 
	tUBa£Ty≥_t
;

117 
	#TASK_DELAY_MS
(
x
Ë–(xË/
p‹tTICK_PERIOD_MS
 )

	)

118 
	#TASK_DELAY_S
(
x
Ë–(x)*1000 /
p‹tTICK_PERIOD_MS
 )

	)

119 
	#TASK_DELAY_MIN
(
x
Ë–(x)*60*1000/
p‹tTICK_PERIOD_MS
 )

	)

121 
	#c⁄figTICK_TC_IRQ
 
	`ATPASTE2
(
AVR32_TC_IRQ
, 
c⁄figTICK_TC_CHANNEL
)

	)

123 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

124 
uöt16_t
 
	tTickTy≥_t
;

125 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

127 
uöt32_t
 
	tTickTy≥_t
;

128 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

133 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

134 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

135 
	#p‹tBYTE_ALIGNMENT
 4

	)

136 
	#p‹tNOP
(Ë{
__asm__
 
	`__vﬁ©ûe__
 ("n›");}

	)

143 
	#DISABLE_ALL_EXCEPTIONS
(Ë
	`DißbÀ_globÆ_ex˚±i⁄
()

	)

144 
	#ENABLE_ALL_EXCEPTIONS
(Ë
	`E«bÀ_globÆ_ex˚±i⁄
()

	)

146 
	#DISABLE_ALL_INTERRUPTS
(Ë
	`DißbÀ_globÆ_öãºu±
()

	)

147 
	#ENABLE_ALL_INTERRUPTS
(Ë
	`E«bÀ_globÆ_öãºu±
()

	)

149 
	#DISABLE_INT_LEVEL
(
öt_Àv
Ë
	`DißbÀ_öãºu±_Àvñ
(öt_Àv)

	)

150 
	#ENABLE_INT_LEVEL
(
öt_Àv
Ë
	`E«bÀ_öãºu±_Àvñ
(öt_Àv)

	)

166 #i‡
c⁄figDBG


167 
	#p‹tDBG_TRACE
(...Ë\

	)

169 
Âuts
(
__FILE__
 ":" 
ASTRINGZ
(
__LINE__
Ë": ", 
°dout
); \

170 
¥ötf
(
__VA_ARGS__
); \

171 
Âuts
("\r\n", 
°dout
); \

174 
	#p‹tDBG_TRACE
(...)

	)

179 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`DISABLE_ALL_INTERRUPTS
()

	)

180 
	#p‹tENABLE_INTERRUPTS
(Ë
	`ENABLE_ALL_INTERRUPTS
()

	)

183 
vP‹tE¡îCrôiˇl
( );

184 
vP‹tExôCrôiˇl
( );

186 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

187 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

191 *
pvP‹tRóŒoc
–*
pv
, 
size_t
 
xSize
 );

200 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

202 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

203 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

205 
__asm__
 
__vﬁ©ûe__
 ( \

207 "movÑ8, LWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

208 "‹hÑ8, HWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

214 "movÑ8, LWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

215 "‹hÑ8, HWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

227 "mt§ "
ASTRINGZ
(
AVR32_SR
)",Ñ0 \n\t"\

235 
	gulCrôiˇlNe°ög
; \

236 
	gpxCuºítTCB
; \

272 #i‡
c⁄figUSE_PREEMPTION
 == 0

277 
	#p‹tSAVE_CONTEXT_OS_INT
(Ë\

	)

280 
__asm__
 
__vﬁ©ûe__
 ("stm --sp,Ñ0-r7"); \

289 
	#p‹tRESTORE_CONTEXT_OS_INT
(Ë\

	)

291 
__asm__
 
__vﬁ©ûe__
 ( \

306 
	#p‹tSAVE_CONTEXT_OS_INT
(Ë\

	)

308 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

309 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

314 
__asm__
 
__vﬁ©ûe__
 ( \

319 "movÑ8, LWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

320 "‹hÑ8, HWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

335 "brhò LABEL_INT_SKIP_SAVE_CONTEXT_"
ASTRINGZ
(
__LINE__
)" \n\t"\

342 "movÑ8, LWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

343 "‹hÑ8, HWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

347 "LABEL_INT_SKIP_SAVE_CONTEXT_"
ASTRINGZ
(
__LINE__
)":" \

354 
	#p‹tRESTORE_CONTEXT_OS_INT
(Ë\

	)

356 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

357 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

366 
__asm__
 
__vﬁ©ûe__
 ( \

370 "brhò LABEL_INT_SKIP_RESTORE_CONTEXT_"
ASTRINGZ
(
__LINE__
) \

376 
p‹tENTER_CRITICAL
(); \

377 
vTaskSwôchC⁄ãxt
(); \

378 
p‹tEXIT_CRITICAL
(); \

382 
__asm__
 
__vﬁ©ûe__
 ( \

384 "movÑ8, LWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

385 "‹hÑ8, HWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

389 "LABEL_INT_SKIP_RESTORE_CONTEXT_"
ASTRINGZ
(
__LINE__
)": \n\t"\

393 "movÑ8, LWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

394 "‹hÑ8, HWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

405 
	gulCrôiˇlNe°ög
; \

406 
	gpxCuºítTCB
; \

418 
	#p‹tSAVE_CONTEXT_SCALL
(Ë\

	)

420 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

421 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

433 
__asm__
 
__vﬁ©ûe__
 ( \

457 "movÑ8, LWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

458 "‹hÑ8, HWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

467 
p‹tENTER_CRITICAL
(); \

470 
__asm__
 
__vﬁ©ûe__
 ( \

471 "movÑ8, LWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

472 "‹hÑ8, HWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

481 
	#p‹tRESTORE_CONTEXT_SCALL
(Ë\

	)

483 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

484 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

489 
__asm__
 
__vﬁ©ûe__
 ( \

490 "movÑ8, LWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

491 "‹hÑ8, HWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

497 
p‹tEXIT_CRITICAL
(); \

499 
__asm__
 
__vﬁ©ûe__
 ( \

502 "movÑ8, LWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

503 "‹hÑ8, HWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

528 
	gulCrôiˇlNe°ög
; \

529 
	gpxCuºítTCB
; \

537 #i‡
c⁄figUSE_PREEMPTION
 == 0

543 
	#p‹tENTER_SWITCHING_ISR
(Ë\

	)

546 
__asm__
 
__vﬁ©ûe__
 ("stm --sp,Ñ0-r7"); \

555 
	#p‹tEXIT_SWITCHING_ISR
(Ë\

	)

557 
__asm__
 
__vﬁ©ûe__
 ( \

573 
	#p‹tENTER_SWITCHING_ISR
(Ë\

	)

575 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

576 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

581 
__asm__
 
__vﬁ©ûe__
 ( \

586 "movÑ8, LWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

587 "‹hÑ8, HWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

602 "brhò LABEL_ISR_SKIP_SAVE_CONTEXT_"
ASTRINGZ
(
__LINE__
)" \n\t"\

605 "movÑ8, LWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

606 "‹hÑ8, HWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

610 "LABEL_ISR_SKIP_SAVE_CONTEXT_"
ASTRINGZ
(
__LINE__
)":" \

618 
	#p‹tEXIT_SWITCHING_ISR
(Ë\

	)

620 vﬁ©ûê
uöt32_t
 
ulCrôiˇlNe°ög
; \

621 vﬁ©ûê*vﬁ©ûê
pxCuºítTCB
; \

623 
__asm__
 
__vﬁ©ûe__
 ( \

632 "brhò LABEL_ISR_SKIP_RESTORE_CONTEXT_"
ASTRINGZ
(
__LINE__
)" \n\t"\

638 "b∫ê LABEL_ISR_RESTORE_CONTEXT_"
ASTRINGZ
(
__LINE__
)":C" \

642 
p‹tENTER_CRITICAL
(); \

643 
vTaskSwôchC⁄ãxt
(); \

644 
p‹tEXIT_CRITICAL
(); \

646 
__asm__
 
__vﬁ©ûe__
 ( \

647 "LABEL_ISR_RESTORE_CONTEXT_"
ASTRINGZ
(
__LINE__
)": \n\t"\

654 "movÑ8, LWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

655 "‹hÑ8, HWRD("
ASTRINGZ
(
pxCuºítTCB
)") \n\t"\

659 "LABEL_ISR_SKIP_RESTORE_CONTEXT_"
ASTRINGZ
(
__LINE__
)": \n\t"\

663 "movÑ8, LWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

664 "‹hÑ8, HWRD("
ASTRINGZ
(
ulCrôiˇlNe°ög
)") \n\t"\

675 
	gulCrôiˇlNe°ög
; \

676 
	gpxCuºítTCB
; \

682 
	#p‹tYIELD
(Ë{
__asm__
 
	`__vﬁ©ûe__
 ("sˇŒ");}

	)

685 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

686 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

688 #ifde‡
__˝lu•lus


	@portable/IAR/AVR32_UC3/read.c

44 
	~<yfuns.h
>

45 
	~<avr32/io.h
>

46 
	~"ußπ.h
"

49 
	g_STD_BEGIN


52 #¥agm®
moduÀ_«me
 = "?__read"

55 vﬁ©ûê
avr32_ußπ_t
 *vﬁ©ûê
°dio_ußπ_ba£
;

68 
size_t
 
	$__ªad
(
h™dÀ
, 
uöt8_t
 *
buf„r
, 
size_t
 
size
)

70 
nCh¨s
 = 0;

74 i‡(
h™dÀ
 !
_LLIO_STDIN
)

76  
_LLIO_ERROR
;

79 ; 
size
 > 0; --size)

81 
c
 = 
	`ußπ_gëch¨
(
°dio_ußπ_ba£
);

82 i‡(
c
 < 0)

85 *
buf„r
++ = 
c
;

86 ++
nCh¨s
;

89  
nCh¨s
;

90 
	}
}

93 
	g_STD_END


	@portable/IAR/AVR32_UC3/write.c

44 
	~<yfuns.h
>

45 
	~<avr32/io.h
>

46 
	~"ußπ.h
"

49 
	g_STD_BEGIN


52 #¥agm®
moduÀ_«me
 = "?__write"

56 
__no_öô
 vﬁ©ûê
avr32_ußπ_t
 *vﬁ©ûê
	g°dio_ußπ_ba£
;

72 
size_t
 
	$__wrôe
(
h™dÀ
, c⁄° 
uöt8_t
 *
buf„r
, 
size_t
 
size
)

74 
size_t
 
nCh¨s
 = 0;

76 i‡(
buf„r
 == 0)

84 i‡(
h™dÀ
 !
_LLIO_STDOUT
 && h™dÀ !
_LLIO_STDERR
)

86  
_LLIO_ERROR
;

89 ; 
size
 != 0; --size)

91 i‡(
	`ußπ_putch¨
(
°dio_ußπ_ba£
, *
buf„r
++) < 0)

93  
_LLIO_ERROR
;

96 ++
nCh¨s
;

99  
nCh¨s
;

100 
	}
}

103 
	g_STD_END


	@portable/IAR/AtmelSAM7S64/AT91SAM7S64.h

32 #i‚de‡
AT91SAM7S64_H


33 
	#AT91SAM7S64_H


	)

35 vﬁ©ûê
	tAT91_REG
;

40 
	s_AT91S_SYSC
 {

41 
AT91_REG
 
	mSYSC_AIC_SMR
[32];

42 
AT91_REG
 
	mSYSC_AIC_SVR
[32];

43 
AT91_REG
 
	mSYSC_AIC_IVR
;

44 
AT91_REG
 
	mSYSC_AIC_FVR
;

45 
AT91_REG
 
	mSYSC_AIC_ISR
;

46 
AT91_REG
 
	mSYSC_AIC_IPR
;

47 
AT91_REG
 
	mSYSC_AIC_IMR
;

48 
AT91_REG
 
	mSYSC_AIC_CISR
;

49 
AT91_REG
 
	mRe£rved0
[2];

50 
AT91_REG
 
	mSYSC_AIC_IECR
;

51 
AT91_REG
 
	mSYSC_AIC_IDCR
;

52 
AT91_REG
 
	mSYSC_AIC_ICCR
;

53 
AT91_REG
 
	mSYSC_AIC_ISCR
;

54 
AT91_REG
 
	mSYSC_AIC_EOICR
;

55 
AT91_REG
 
	mSYSC_AIC_SPU
;

56 
AT91_REG
 
	mSYSC_AIC_DCR
;

57 
AT91_REG
 
	mRe£rved1
[1];

58 
AT91_REG
 
	mSYSC_AIC_FFER
;

59 
AT91_REG
 
	mSYSC_AIC_FFDR
;

60 
AT91_REG
 
	mSYSC_AIC_FFSR
;

61 
AT91_REG
 
	mRe£rved2
[45];

62 
AT91_REG
 
	mSYSC_DBGU_CR
;

63 
AT91_REG
 
	mSYSC_DBGU_MR
;

64 
AT91_REG
 
	mSYSC_DBGU_IER
;

65 
AT91_REG
 
	mSYSC_DBGU_IDR
;

66 
AT91_REG
 
	mSYSC_DBGU_IMR
;

67 
AT91_REG
 
	mSYSC_DBGU_CSR
;

68 
AT91_REG
 
	mSYSC_DBGU_RHR
;

69 
AT91_REG
 
	mSYSC_DBGU_THR
;

70 
AT91_REG
 
	mSYSC_DBGU_BRGR
;

71 
AT91_REG
 
	mRe£rved3
[7];

72 
AT91_REG
 
	mSYSC_DBGU_C1R
;

73 
AT91_REG
 
	mSYSC_DBGU_C2R
;

74 
AT91_REG
 
	mSYSC_DBGU_FNTR
;

75 
AT91_REG
 
	mRe£rved4
[45];

76 
AT91_REG
 
	mSYSC_DBGU_RPR
;

77 
AT91_REG
 
	mSYSC_DBGU_RCR
;

78 
AT91_REG
 
	mSYSC_DBGU_TPR
;

79 
AT91_REG
 
	mSYSC_DBGU_TCR
;

80 
AT91_REG
 
	mSYSC_DBGU_RNPR
;

81 
AT91_REG
 
	mSYSC_DBGU_RNCR
;

82 
AT91_REG
 
	mSYSC_DBGU_TNPR
;

83 
AT91_REG
 
	mSYSC_DBGU_TNCR
;

84 
AT91_REG
 
	mSYSC_DBGU_PTCR
;

85 
AT91_REG
 
	mSYSC_DBGU_PTSR
;

86 
AT91_REG
 
	mRe£rved5
[54];

87 
AT91_REG
 
	mSYSC_PIOA_PER
;

88 
AT91_REG
 
	mSYSC_PIOA_PDR
;

89 
AT91_REG
 
	mSYSC_PIOA_PSR
;

90 
AT91_REG
 
	mRe£rved6
[1];

91 
AT91_REG
 
	mSYSC_PIOA_OER
;

92 
AT91_REG
 
	mSYSC_PIOA_ODR
;

93 
AT91_REG
 
	mSYSC_PIOA_OSR
;

94 
AT91_REG
 
	mRe£rved7
[1];

95 
AT91_REG
 
	mSYSC_PIOA_IFER
;

96 
AT91_REG
 
	mSYSC_PIOA_IFDR
;

97 
AT91_REG
 
	mSYSC_PIOA_IFSR
;

98 
AT91_REG
 
	mRe£rved8
[1];

99 
AT91_REG
 
	mSYSC_PIOA_SODR
;

100 
AT91_REG
 
	mSYSC_PIOA_CODR
;

101 
AT91_REG
 
	mSYSC_PIOA_ODSR
;

102 
AT91_REG
 
	mSYSC_PIOA_PDSR
;

103 
AT91_REG
 
	mSYSC_PIOA_IER
;

104 
AT91_REG
 
	mSYSC_PIOA_IDR
;

105 
AT91_REG
 
	mSYSC_PIOA_IMR
;

106 
AT91_REG
 
	mSYSC_PIOA_ISR
;

107 
AT91_REG
 
	mSYSC_PIOA_MDER
;

108 
AT91_REG
 
	mSYSC_PIOA_MDDR
;

109 
AT91_REG
 
	mSYSC_PIOA_MDSR
;

110 
AT91_REG
 
	mRe£rved9
[1];

111 
AT91_REG
 
	mSYSC_PIOA_PPUDR
;

112 
AT91_REG
 
	mSYSC_PIOA_PPUER
;

113 
AT91_REG
 
	mSYSC_PIOA_PPUSR
;

114 
AT91_REG
 
	mRe£rved10
[1];

115 
AT91_REG
 
	mSYSC_PIOA_ASR
;

116 
AT91_REG
 
	mSYSC_PIOA_BSR
;

117 
AT91_REG
 
	mSYSC_PIOA_ABSR
;

118 
AT91_REG
 
	mRe£rved11
[9];

119 
AT91_REG
 
	mSYSC_PIOA_OWER
;

120 
AT91_REG
 
	mSYSC_PIOA_OWDR
;

121 
AT91_REG
 
	mSYSC_PIOA_OWSR
;

122 
AT91_REG
 
	mRe£rved12
[469];

123 
AT91_REG
 
	mSYSC_PMC_SCER
;

124 
AT91_REG
 
	mSYSC_PMC_SCDR
;

125 
AT91_REG
 
	mSYSC_PMC_SCSR
;

126 
AT91_REG
 
	mRe£rved13
[1];

127 
AT91_REG
 
	mSYSC_PMC_PCER
;

128 
AT91_REG
 
	mSYSC_PMC_PCDR
;

129 
AT91_REG
 
	mSYSC_PMC_PCSR
;

130 
AT91_REG
 
	mRe£rved14
[1];

131 
AT91_REG
 
	mSYSC_PMC_MOR
;

132 
AT91_REG
 
	mSYSC_PMC_MCFR
;

133 
AT91_REG
 
	mRe£rved15
[1];

134 
AT91_REG
 
	mSYSC_PMC_PLLR
;

135 
AT91_REG
 
	mSYSC_PMC_MCKR
;

136 
AT91_REG
 
	mRe£rved16
[3];

137 
AT91_REG
 
	mSYSC_PMC_PCKR
[8];

138 
AT91_REG
 
	mSYSC_PMC_IER
;

139 
AT91_REG
 
	mSYSC_PMC_IDR
;

140 
AT91_REG
 
	mSYSC_PMC_SR
;

141 
AT91_REG
 
	mSYSC_PMC_IMR
;

142 
AT91_REG
 
	mRe£rved17
[36];

143 
AT91_REG
 
	mSYSC_RSTC_RCR
;

144 
AT91_REG
 
	mSYSC_RSTC_RSR
;

145 
AT91_REG
 
	mSYSC_RSTC_RMR
;

146 
AT91_REG
 
	mRe£rved18
[5];

147 
AT91_REG
 
	mSYSC_RTTC_RTMR
;

148 
AT91_REG
 
	mSYSC_RTTC_RTAR
;

149 
AT91_REG
 
	mSYSC_RTTC_RTVR
;

150 
AT91_REG
 
	mSYSC_RTTC_RTSR
;

151 
AT91_REG
 
	mSYSC_PITC_PIMR
;

152 
AT91_REG
 
	mSYSC_PITC_PISR
;

153 
AT91_REG
 
	mSYSC_PITC_PIVR
;

154 
AT91_REG
 
	mSYSC_PITC_PIIR
;

155 
AT91_REG
 
	mSYSC_WDTC_WDCR
;

156 
AT91_REG
 
	mSYSC_WDTC_WDMR
;

157 
AT91_REG
 
	mSYSC_WDTC_WDSR
;

158 
AT91_REG
 
	mRe£rved19
[5];

159 
AT91_REG
 
	mSYSC_SYSC_VRPM
;

160 } 
	tAT91S_SYSC
, *
	tAT91PS_SYSC
;

163 
	#AT91C_SYSC_PSTDBY
 (() 0x1 << 0)

164 

	)

168 
	s_AT91S_AIC
 {

169 
AT91_REG
 
	mAIC_SMR
[32];

170 
AT91_REG
 
	mAIC_SVR
[32];

171 
AT91_REG
 
	mAIC_IVR
;

172 
AT91_REG
 
	mAIC_FVR
;

173 
AT91_REG
 
	mAIC_ISR
;

174 
AT91_REG
 
	mAIC_IPR
;

175 
AT91_REG
 
	mAIC_IMR
;

176 
AT91_REG
 
	mAIC_CISR
;

177 
AT91_REG
 
	mRe£rved0
[2];

178 
AT91_REG
 
	mAIC_IECR
;

179 
AT91_REG
 
	mAIC_IDCR
;

180 
AT91_REG
 
	mAIC_ICCR
;

181 
AT91_REG
 
	mAIC_ISCR
;

182 
AT91_REG
 
	mAIC_EOICR
;

183 
AT91_REG
 
	mAIC_SPU
;

184 
AT91_REG
 
	mAIC_DCR
;

185 
AT91_REG
 
	mRe£rved1
[1];

186 
AT91_REG
 
	mAIC_FFER
;

187 
AT91_REG
 
	mAIC_FFDR
;

188 
AT91_REG
 
	mAIC_FFSR
;

189 } 
	tAT91S_AIC
, *
	tAT91PS_AIC
;

192 
	#AT91C_AIC_PRIOR
 (() 0x7 << 0)

193 
	#AT91C_AIC_PRIOR_LOWEST
 (() 0x0)

194 
	#AT91C_AIC_PRIOR_HIGHEST
 (() 0x7)

195 
	#AT91C_AIC_SRCTYPE
 (() 0x3 << 5)

196 
	#AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE
 (() 0x0 << 5)

197 
	#AT91C_AIC_SRCTYPE_INT_EDGE_TRIGGERED
 (() 0x1 << 5)

198 
	#AT91C_AIC_SRCTYPE_EXT_HIGH_LEVEL
 (() 0x2 << 5)

199 
	#AT91C_AIC_SRCTYPE_EXT_POSITIVE_EDGE
 (() 0x3 << 5)

201 
	#AT91C_AIC_NFIQ
 (() 0x1 << 0)

202 
	#AT91C_AIC_NIRQ
 (() 0x1 << 1)

204 
	#AT91C_AIC_DCR_PROT
 (() 0x1 << 0)

205 
	#AT91C_AIC_DCR_GMSK
 (() 0x1 << 1)

206 

	)

210 
	s_AT91S_DBGU
 {

211 
AT91_REG
 
	mDBGU_CR
;

212 
AT91_REG
 
	mDBGU_MR
;

213 
AT91_REG
 
	mDBGU_IER
;

214 
AT91_REG
 
	mDBGU_IDR
;

215 
AT91_REG
 
	mDBGU_IMR
;

216 
AT91_REG
 
	mDBGU_CSR
;

217 
AT91_REG
 
	mDBGU_RHR
;

218 
AT91_REG
 
	mDBGU_THR
;

219 
AT91_REG
 
	mDBGU_BRGR
;

220 
AT91_REG
 
	mRe£rved0
[7];

221 
AT91_REG
 
	mDBGU_C1R
;

222 
AT91_REG
 
	mDBGU_C2R
;

223 
AT91_REG
 
	mDBGU_FNTR
;

224 
AT91_REG
 
	mRe£rved1
[45];

225 
AT91_REG
 
	mDBGU_RPR
;

226 
AT91_REG
 
	mDBGU_RCR
;

227 
AT91_REG
 
	mDBGU_TPR
;

228 
AT91_REG
 
	mDBGU_TCR
;

229 
AT91_REG
 
	mDBGU_RNPR
;

230 
AT91_REG
 
	mDBGU_RNCR
;

231 
AT91_REG
 
	mDBGU_TNPR
;

232 
AT91_REG
 
	mDBGU_TNCR
;

233 
AT91_REG
 
	mDBGU_PTCR
;

234 
AT91_REG
 
	mDBGU_PTSR
;

235 } 
	tAT91S_DBGU
, *
	tAT91PS_DBGU
;

238 
	#AT91C_US_RSTRX
 (() 0x1 << 2)

239 
	#AT91C_US_RSTTX
 (() 0x1 << 3)

240 
	#AT91C_US_RXEN
 (() 0x1 << 4)

241 
	#AT91C_US_RXDIS
 (() 0x1 << 5)

242 
	#AT91C_US_TXEN
 (() 0x1 << 6)

243 
	#AT91C_US_TXDIS
 (() 0x1 << 7)

245 
	#AT91C_US_PAR
 (() 0x7 << 9)

246 
	#AT91C_US_PAR_EVEN
 (() 0x0 << 9)

247 
	#AT91C_US_PAR_ODD
 (() 0x1 << 9)

248 
	#AT91C_US_PAR_SPACE
 (() 0x2 << 9)

249 
	#AT91C_US_PAR_MARK
 (() 0x3 << 9)

250 
	#AT91C_US_PAR_NONE
 (() 0x4 << 9)

251 
	#AT91C_US_PAR_MULTI_DROP
 (() 0x6 << 9)

252 
	#AT91C_US_CHMODE
 (() 0x3 << 14)

253 
	#AT91C_US_CHMODE_NORMAL
 (() 0x0 << 14)

254 
	#AT91C_US_CHMODE_AUTO
 (() 0x1 << 14)

255 
	#AT91C_US_CHMODE_LOCAL
 (() 0x2 << 14)

256 
	#AT91C_US_CHMODE_REMOTE
 (() 0x3 << 14)

258 
	#AT91C_US_RXRDY
 (() 0x1 << 0)

259 
	#AT91C_US_TXRDY
 (() 0x1 << 1)

260 
	#AT91C_US_ENDRX
 (() 0x1 << 3)

261 
	#AT91C_US_ENDTX
 (() 0x1 << 4)

262 
	#AT91C_US_OVRE
 (() 0x1 << 5)

263 
	#AT91C_US_FRAME
 (() 0x1 << 6)

264 
	#AT91C_US_PARE
 (() 0x1 << 7)

265 
	#AT91C_US_TXEMPTY
 (() 0x1 << 9)

266 
	#AT91C_US_TXBUFE
 (() 0x1 << 11)

267 
	#AT91C_US_RXBUFF
 (() 0x1 << 12)

268 
	#AT91C_US_COMM_TX
 (() 0x1 << 30)

269 
	#AT91C_US_COMM_RX
 (() 0x1 << 31)

274 
	#AT91C_US_FORCE_NTRST
 (() 0x1 << 0)

275 

	)

279 
	s_AT91S_PDC
 {

280 
AT91_REG
 
	mPDC_RPR
;

281 
AT91_REG
 
	mPDC_RCR
;

282 
AT91_REG
 
	mPDC_TPR
;

283 
AT91_REG
 
	mPDC_TCR
;

284 
AT91_REG
 
	mPDC_RNPR
;

285 
AT91_REG
 
	mPDC_RNCR
;

286 
AT91_REG
 
	mPDC_TNPR
;

287 
AT91_REG
 
	mPDC_TNCR
;

288 
AT91_REG
 
	mPDC_PTCR
;

289 
AT91_REG
 
	mPDC_PTSR
;

290 } 
	tAT91S_PDC
, *
	tAT91PS_PDC
;

293 
	#AT91C_PDC_RXTEN
 (() 0x1 << 0)

294 
	#AT91C_PDC_RXTDIS
 (() 0x1 << 1)

295 
	#AT91C_PDC_TXTEN
 (() 0x1 << 8)

296 
	#AT91C_PDC_TXTDIS
 (() 0x1 << 9)

298 

	)

302 
	s_AT91S_PIO
 {

303 
AT91_REG
 
	mPIO_PER
;

304 
AT91_REG
 
	mPIO_PDR
;

305 
AT91_REG
 
	mPIO_PSR
;

306 
AT91_REG
 
	mRe£rved0
[1];

307 
AT91_REG
 
	mPIO_OER
;

308 
AT91_REG
 
	mPIO_ODR
;

309 
AT91_REG
 
	mPIO_OSR
;

310 
AT91_REG
 
	mRe£rved1
[1];

311 
AT91_REG
 
	mPIO_IFER
;

312 
AT91_REG
 
	mPIO_IFDR
;

313 
AT91_REG
 
	mPIO_IFSR
;

314 
AT91_REG
 
	mRe£rved2
[1];

315 
AT91_REG
 
	mPIO_SODR
;

316 
AT91_REG
 
	mPIO_CODR
;

317 
AT91_REG
 
	mPIO_ODSR
;

318 
AT91_REG
 
	mPIO_PDSR
;

319 
AT91_REG
 
	mPIO_IER
;

320 
AT91_REG
 
	mPIO_IDR
;

321 
AT91_REG
 
	mPIO_IMR
;

322 
AT91_REG
 
	mPIO_ISR
;

323 
AT91_REG
 
	mPIO_MDER
;

324 
AT91_REG
 
	mPIO_MDDR
;

325 
AT91_REG
 
	mPIO_MDSR
;

326 
AT91_REG
 
	mRe£rved3
[1];

327 
AT91_REG
 
	mPIO_PPUDR
;

328 
AT91_REG
 
	mPIO_PPUER
;

329 
AT91_REG
 
	mPIO_PPUSR
;

330 
AT91_REG
 
	mRe£rved4
[1];

331 
AT91_REG
 
	mPIO_ASR
;

332 
AT91_REG
 
	mPIO_BSR
;

333 
AT91_REG
 
	mPIO_ABSR
;

334 
AT91_REG
 
	mRe£rved5
[9];

335 
AT91_REG
 
	mPIO_OWER
;

336 
AT91_REG
 
	mPIO_OWDR
;

337 
AT91_REG
 
	mPIO_OWSR
;

338 } 
	tAT91S_PIO
, *
	tAT91PS_PIO
;

344 
	s_AT91S_CKGR
 {

345 
AT91_REG
 
	mCKGR_MOR
;

346 
AT91_REG
 
	mCKGR_MCFR
;

347 
AT91_REG
 
	mRe£rved0
[1];

348 
AT91_REG
 
	mCKGR_PLLR
;

349 } 
	tAT91S_CKGR
, *
	tAT91PS_CKGR
;

352 
	#AT91C_CKGR_MOSCEN
 (() 0x1 << 0)

353 
	#AT91C_CKGR_OSCBYPASS
 (() 0x1 << 1)

354 
	#AT91C_CKGR_OSCOUNT
 (() 0xFF << 8)

356 
	#AT91C_CKGR_MAINF
 (() 0xFFFF << 0)

357 
	#AT91C_CKGR_MAINRDY
 (() 0x1 << 16)

359 
	#AT91C_CKGR_DIV
 (() 0xFF << 0)

360 
	#AT91C_CKGR_DIV_0
 (() 0x0)

361 
	#AT91C_CKGR_DIV_BYPASS
 (() 0x1)

362 
	#AT91C_CKGR_PLLCOUNT
 (() 0x3F << 8)

363 
	#AT91C_CKGR_OUT
 (() 0x3 << 14)

364 
	#AT91C_CKGR_OUT_0
 (() 0x0 << 14)

365 
	#AT91C_CKGR_OUT_1
 (() 0x1 << 14)

366 
	#AT91C_CKGR_OUT_2
 (() 0x2 << 14)

367 
	#AT91C_CKGR_OUT_3
 (() 0x3 << 14)

368 
	#AT91C_CKGR_MUL
 (() 0x7FF << 16)

369 
	#AT91C_CKGR_USBDIV
 (() 0x3 << 28)

370 
	#AT91C_CKGR_USBDIV_0
 (() 0x0 << 28)

371 
	#AT91C_CKGR_USBDIV_1
 (() 0x1 << 28)

372 
	#AT91C_CKGR_USBDIV_2
 (() 0x2 << 28)

373 

	)

377 
	s_AT91S_PMC
 {

378 
AT91_REG
 
	mPMC_SCER
;

379 
AT91_REG
 
	mPMC_SCDR
;

380 
AT91_REG
 
	mPMC_SCSR
;

381 
AT91_REG
 
	mRe£rved0
[1];

382 
AT91_REG
 
	mPMC_PCER
;

383 
AT91_REG
 
	mPMC_PCDR
;

384 
AT91_REG
 
	mPMC_PCSR
;

385 
AT91_REG
 
	mRe£rved1
[1];

386 
AT91_REG
 
	mPMC_MOR
;

387 
AT91_REG
 
	mPMC_MCFR
;

388 
AT91_REG
 
	mRe£rved2
[1];

389 
AT91_REG
 
	mPMC_PLLR
;

390 
AT91_REG
 
	mPMC_MCKR
;

391 
AT91_REG
 
	mRe£rved3
[3];

392 
AT91_REG
 
	mPMC_PCKR
[8];

393 
AT91_REG
 
	mPMC_IER
;

394 
AT91_REG
 
	mPMC_IDR
;

395 
AT91_REG
 
	mPMC_SR
;

396 
AT91_REG
 
	mPMC_IMR
;

397 } 
	tAT91S_PMC
, *
	tAT91PS_PMC
;

400 
	#AT91C_PMC_PCK
 (() 0x1 << 0)

401 
	#AT91C_PMC_UDP
 (() 0x1 << 7)

402 
	#AT91C_PMC_PCK0
 (() 0x1 << 8)

403 
	#AT91C_PMC_PCK1
 (() 0x1 << 9)

404 
	#AT91C_PMC_PCK2
 (() 0x1 << 10)

405 
	#AT91C_PMC_PCK3
 (() 0x1 << 11)

412 
	#AT91C_PMC_CSS
 (() 0x3 << 0)

413 
	#AT91C_PMC_CSS_SLOW_CLK
 (() 0x0)

414 
	#AT91C_PMC_CSS_MAIN_CLK
 (() 0x1)

415 
	#AT91C_PMC_CSS_PLL_CLK
 (() 0x3)

416 
	#AT91C_PMC_PRES
 (() 0x7 << 2)

417 
	#AT91C_PMC_PRES_CLK
 (() 0x0 << 2)

418 
	#AT91C_PMC_PRES_CLK_2
 (() 0x1 << 2)

419 
	#AT91C_PMC_PRES_CLK_4
 (() 0x2 << 2)

420 
	#AT91C_PMC_PRES_CLK_8
 (() 0x3 << 2)

421 
	#AT91C_PMC_PRES_CLK_16
 (() 0x4 << 2)

422 
	#AT91C_PMC_PRES_CLK_32
 (() 0x5 << 2)

423 
	#AT91C_PMC_PRES_CLK_64
 (() 0x6 << 2)

426 
	#AT91C_PMC_MOSCS
 (() 0x1 << 0)

427 
	#AT91C_PMC_LOCK
 (() 0x1 << 2)

428 
	#AT91C_PMC_MCKRDY
 (() 0x1 << 3)

429 
	#AT91C_PMC_PCK0RDY
 (() 0x1 << 8)

430 
	#AT91C_PMC_PCK1RDY
 (() 0x1 << 9)

431 
	#AT91C_PMC_PCK2RDY
 (() 0x1 << 10)

432 
	#AT91C_PMC_PCK3RDY
 (() 0x1 << 11)

436 

	)

440 
	s_AT91S_RSTC
 {

441 
AT91_REG
 
	mRSTC_RCR
;

442 
AT91_REG
 
	mRSTC_RSR
;

443 
AT91_REG
 
	mRSTC_RMR
;

444 } 
	tAT91S_RSTC
, *
	tAT91PS_RSTC
;

447 
	#AT91C_SYSC_PROCRST
 (() 0x1 << 0)

448 
	#AT91C_SYSC_ICERST
 (() 0x1 << 1)

449 
	#AT91C_SYSC_PERRST
 (() 0x1 << 2)

450 
	#AT91C_SYSC_EXTRST
 (() 0x1 << 3)

451 
	#AT91C_SYSC_KEY
 (() 0xFF << 24)

453 
	#AT91C_SYSC_URSTS
 (() 0x1 << 0)

454 
	#AT91C_SYSC_BODSTS
 (() 0x1 << 1)

455 
	#AT91C_SYSC_RSTTYP
 (() 0x7 << 8)

456 
	#AT91C_SYSC_RSTTYP_POWERUP
 (() 0x0 << 8)

457 
	#AT91C_SYSC_RSTTYP_WATCHDOG
 (() 0x2 << 8)

458 
	#AT91C_SYSC_RSTTYP_SOFTWARE
 (() 0x3 << 8)

459 
	#AT91C_SYSC_RSTTYP_USER
 (() 0x4 << 8)

460 
	#AT91C_SYSC_RSTTYP_BROWNOUT
 (() 0x5 << 8)

461 
	#AT91C_SYSC_NRSTL
 (() 0x1 << 16)

462 
	#AT91C_SYSC_SRCMP
 (() 0x1 << 17)

464 
	#AT91C_SYSC_URSTEN
 (() 0x1 << 0)

465 
	#AT91C_SYSC_URSTIEN
 (() 0x1 << 4)

466 
	#AT91C_SYSC_ERSTL
 (() 0xF << 8)

467 
	#AT91C_SYSC_BODIEN
 (() 0x1 << 16)

468 

	)

472 
	s_AT91S_RTTC
 {

473 
AT91_REG
 
	mRTTC_RTMR
;

474 
AT91_REG
 
	mRTTC_RTAR
;

475 
AT91_REG
 
	mRTTC_RTVR
;

476 
AT91_REG
 
	mRTTC_RTSR
;

477 } 
	tAT91S_RTTC
, *
	tAT91PS_RTTC
;

480 
	#AT91C_SYSC_RTPRES
 (() 0xFFFF << 0)

481 
	#AT91C_SYSC_ALMIEN
 (() 0x1 << 16)

482 
	#AT91C_SYSC_RTTINCIEN
 (() 0x1 << 17)

483 
	#AT91C_SYSC_RTTRST
 (() 0x1 << 18)

485 
	#AT91C_SYSC_ALMV
 (() 0x0 << 0)

487 
	#AT91C_SYSC_CRTV
 (() 0x0 << 0)

489 
	#AT91C_SYSC_ALMS
 (() 0x1 << 0)

490 
	#AT91C_SYSC_RTTINC
 (() 0x1 << 1)

491 

	)

495 
	s_AT91S_PITC
 {

496 
AT91_REG
 
	mPITC_PIMR
;

497 
AT91_REG
 
	mPITC_PISR
;

498 
AT91_REG
 
	mPITC_PIVR
;

499 
AT91_REG
 
	mPITC_PIIR
;

500 } 
	tAT91S_PITC
, *
	tAT91PS_PITC
;

503 
	#AT91C_SYSC_PIV
 (() 0xFFFFF << 0)

504 
	#AT91C_SYSC_PITEN
 (() 0x1 << 24)

505 
	#AT91C_SYSC_PITIEN
 (() 0x1 << 25)

507 
	#AT91C_SYSC_PITS
 (() 0x1 << 0)

509 
	#AT91C_SYSC_CPIV
 (() 0xFFFFF << 0)

510 
	#AT91C_SYSC_PICNT
 (() 0xFFF << 20)

512 

	)

516 
	s_AT91S_WDTC
 {

517 
AT91_REG
 
	mWDTC_WDCR
;

518 
AT91_REG
 
	mWDTC_WDMR
;

519 
AT91_REG
 
	mWDTC_WDSR
;

520 } 
	tAT91S_WDTC
, *
	tAT91PS_WDTC
;

523 
	#AT91C_SYSC_WDRSTT
 (() 0x1 << 0)

525 
	#AT91C_SYSC_WDV
 (() 0xFFF << 0)

526 
	#AT91C_SYSC_WDFIEN
 (() 0x1 << 12)

527 
	#AT91C_SYSC_WDRSTEN
 (() 0x1 << 13)

528 
	#AT91C_SYSC_WDRPROC
 (() 0x1 << 14)

529 
	#AT91C_SYSC_WDDIS
 (() 0x1 << 15)

530 
	#AT91C_SYSC_WDD
 (() 0xFFF << 16)

531 
	#AT91C_SYSC_WDDBGHLT
 (() 0x1 << 28)

532 
	#AT91C_SYSC_WDIDLEHLT
 (() 0x1 << 29)

534 
	#AT91C_SYSC_WDUNF
 (() 0x1 << 0)

535 
	#AT91C_SYSC_WDERR
 (() 0x1 << 1)

536 

	)

540 
	s_AT91S_MC
 {

541 
AT91_REG
 
	mMC_RCR
;

542 
AT91_REG
 
	mMC_ASR
;

543 
AT91_REG
 
	mMC_AASR
;

544 
AT91_REG
 
	mRe£rved0
[21];

545 
AT91_REG
 
	mMC_FMR
;

546 
AT91_REG
 
	mMC_FCR
;

547 
AT91_REG
 
	mMC_FSR
;

548 } 
	tAT91S_MC
, *
	tAT91PS_MC
;

551 
	#AT91C_MC_RCB
 (() 0x1 << 0)

553 
	#AT91C_MC_UNDADD
 (() 0x1 << 0)

554 
	#AT91C_MC_MISADD
 (() 0x1 << 1)

555 
	#AT91C_MC_ABTSZ
 (() 0x3 << 8)

556 
	#AT91C_MC_ABTSZ_BYTE
 (() 0x0 << 8)

557 
	#AT91C_MC_ABTSZ_HWORD
 (() 0x1 << 8)

558 
	#AT91C_MC_ABTSZ_WORD
 (() 0x2 << 8)

559 
	#AT91C_MC_ABTTYP
 (() 0x3 << 10)

560 
	#AT91C_MC_ABTTYP_DATAR
 (() 0x0 << 10)

561 
	#AT91C_MC_ABTTYP_DATAW
 (() 0x1 << 10)

562 
	#AT91C_MC_ABTTYP_FETCH
 (() 0x2 << 10)

563 
	#AT91C_MC_MST0
 (() 0x1 << 16)

564 
	#AT91C_MC_MST1
 (() 0x1 << 17)

565 
	#AT91C_MC_SVMST0
 (() 0x1 << 24)

566 
	#AT91C_MC_SVMST1
 (() 0x1 << 25)

568 
	#AT91C_MC_FRDY
 (() 0x1 << 0)

569 
	#AT91C_MC_LOCKE
 (() 0x1 << 2)

570 
	#AT91C_MC_PROGE
 (() 0x1 << 3)

571 
	#AT91C_MC_NEBP
 (() 0x1 << 7)

572 
	#AT91C_MC_FWS
 (() 0x3 << 8)

573 
	#AT91C_MC_FWS_0FWS
 (() 0x0 << 8)

574 
	#AT91C_MC_FWS_1FWS
 (() 0x1 << 8)

575 
	#AT91C_MC_FWS_2FWS
 (() 0x2 << 8)

576 
	#AT91C_MC_FWS_3FWS
 (() 0x3 << 8)

577 
	#AT91C_MC_FMCN
 (() 0xFF << 16)

579 
	#AT91C_MC_FCMD
 (() 0xF << 0)

580 
	#AT91C_MC_FCMD_START_PROG
 (() 0x1)

581 
	#AT91C_MC_FCMD_LOCK
 (() 0x2)

582 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (() 0x3)

583 
	#AT91C_MC_FCMD_UNLOCK
 (() 0x4)

584 
	#AT91C_MC_FCMD_ERASE_ALL
 (() 0x8)

585 
	#AT91C_MC_FCMD_SET_GP_NVM
 (() 0xB)

586 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (() 0xD)

587 
	#AT91C_MC_FCMD_SET_SECURITY
 (() 0xF)

588 
	#AT91C_MC_PAGEN
 (() 0x3FF << 8)

589 
	#AT91C_MC_KEY
 (() 0xFF << 24)

591 
	#AT91C_MC_SECURITY
 (() 0x1 << 4)

592 
	#AT91C_MC_GPNVM0
 (() 0x1 << 8)

593 
	#AT91C_MC_GPNVM1
 (() 0x1 << 9)

594 
	#AT91C_MC_GPNVM2
 (() 0x1 << 10)

595 
	#AT91C_MC_GPNVM3
 (() 0x1 << 11)

596 
	#AT91C_MC_GPNVM4
 (() 0x1 << 12)

597 
	#AT91C_MC_GPNVM5
 (() 0x1 << 13)

598 
	#AT91C_MC_GPNVM6
 (() 0x1 << 14)

599 
	#AT91C_MC_GPNVM7
 (() 0x1 << 15)

600 
	#AT91C_MC_LOCKS0
 (() 0x1 << 16)

601 
	#AT91C_MC_LOCKS1
 (() 0x1 << 17)

602 
	#AT91C_MC_LOCKS2
 (() 0x1 << 18)

603 
	#AT91C_MC_LOCKS3
 (() 0x1 << 19)

604 
	#AT91C_MC_LOCKS4
 (() 0x1 << 20)

605 
	#AT91C_MC_LOCKS5
 (() 0x1 << 21)

606 
	#AT91C_MC_LOCKS6
 (() 0x1 << 22)

607 
	#AT91C_MC_LOCKS7
 (() 0x1 << 23)

608 
	#AT91C_MC_LOCKS8
 (() 0x1 << 24)

609 
	#AT91C_MC_LOCKS9
 (() 0x1 << 25)

610 
	#AT91C_MC_LOCKS10
 (() 0x1 << 26)

611 
	#AT91C_MC_LOCKS11
 (() 0x1 << 27)

612 
	#AT91C_MC_LOCKS12
 (() 0x1 << 28)

613 
	#AT91C_MC_LOCKS13
 (() 0x1 << 29)

614 
	#AT91C_MC_LOCKS14
 (() 0x1 << 30)

615 
	#AT91C_MC_LOCKS15
 (() 0x1 << 31)

616 

	)

620 
	s_AT91S_SPI
 {

621 
AT91_REG
 
	mSPI_CR
;

622 
AT91_REG
 
	mSPI_MR
;

623 
AT91_REG
 
	mSPI_RDR
;

624 
AT91_REG
 
	mSPI_TDR
;

625 
AT91_REG
 
	mSPI_SR
;

626 
AT91_REG
 
	mSPI_IER
;

627 
AT91_REG
 
	mSPI_IDR
;

628 
AT91_REG
 
	mSPI_IMR
;

629 
AT91_REG
 
	mRe£rved0
[4];

630 
AT91_REG
 
	mSPI_CSR
[4];

631 
AT91_REG
 
	mRe£rved1
[48];

632 
AT91_REG
 
	mSPI_RPR
;

633 
AT91_REG
 
	mSPI_RCR
;

634 
AT91_REG
 
	mSPI_TPR
;

635 
AT91_REG
 
	mSPI_TCR
;

636 
AT91_REG
 
	mSPI_RNPR
;

637 
AT91_REG
 
	mSPI_RNCR
;

638 
AT91_REG
 
	mSPI_TNPR
;

639 
AT91_REG
 
	mSPI_TNCR
;

640 
AT91_REG
 
	mSPI_PTCR
;

641 
AT91_REG
 
	mSPI_PTSR
;

642 } 
	tAT91S_SPI
, *
	tAT91PS_SPI
;

645 
	#AT91C_SPI_SPIEN
 (() 0x1 << 0)

646 
	#AT91C_SPI_SPIDIS
 (() 0x1 << 1)

647 
	#AT91C_SPI_SWRST
 (() 0x1 << 7)

648 
	#AT91C_SPI_LASTXFER
 (() 0x1 << 24)

650 
	#AT91C_SPI_MSTR
 (() 0x1 << 0)

651 
	#AT91C_SPI_PS
 (() 0x1 << 1)

652 
	#AT91C_SPI_PS_FIXED
 (() 0x0 << 1)

653 
	#AT91C_SPI_PS_VARIABLE
 (() 0x1 << 1)

654 
	#AT91C_SPI_PCSDEC
 (() 0x1 << 2)

655 
	#AT91C_SPI_FDIV
 (() 0x1 << 3)

656 
	#AT91C_SPI_MODFDIS
 (() 0x1 << 4)

657 
	#AT91C_SPI_LLB
 (() 0x1 << 7)

658 
	#AT91C_SPI_PCS
 (() 0xF << 16)

659 
	#AT91C_SPI_DLYBCS
 (() 0xFF << 24)

661 
	#AT91C_SPI_RD
 (() 0xFFFF << 0)

662 
	#AT91C_SPI_RPCS
 (() 0xF << 16)

664 
	#AT91C_SPI_TD
 (() 0xFFFF << 0)

665 
	#AT91C_SPI_TPCS
 (() 0xF << 16)

667 
	#AT91C_SPI_RDRF
 (() 0x1 << 0)

668 
	#AT91C_SPI_TDRE
 (() 0x1 << 1)

669 
	#AT91C_SPI_MODF
 (() 0x1 << 2)

670 
	#AT91C_SPI_OVRES
 (() 0x1 << 3)

671 
	#AT91C_SPI_ENDRX
 (() 0x1 << 4)

672 
	#AT91C_SPI_ENDTX
 (() 0x1 << 5)

673 
	#AT91C_SPI_RXBUFF
 (() 0x1 << 6)

674 
	#AT91C_SPI_TXBUFE
 (() 0x1 << 7)

675 
	#AT91C_SPI_NSSR
 (() 0x1 << 8)

676 
	#AT91C_SPI_TXEMPTY
 (() 0x1 << 9)

677 
	#AT91C_SPI_SPIENS
 (() 0x1 << 16)

682 
	#AT91C_SPI_CPOL
 (() 0x1 << 0)

683 
	#AT91C_SPI_NCPHA
 (() 0x1 << 1)

684 
	#AT91C_SPI_CSAAT
 (() 0x1 << 2)

685 
	#AT91C_SPI_BITS
 (() 0xF << 4)

686 
	#AT91C_SPI_BITS_8
 (() 0x0 << 4)

687 
	#AT91C_SPI_BITS_9
 (() 0x1 << 4)

688 
	#AT91C_SPI_BITS_10
 (() 0x2 << 4)

689 
	#AT91C_SPI_BITS_11
 (() 0x3 << 4)

690 
	#AT91C_SPI_BITS_12
 (() 0x4 << 4)

691 
	#AT91C_SPI_BITS_13
 (() 0x5 << 4)

692 
	#AT91C_SPI_BITS_14
 (() 0x6 << 4)

693 
	#AT91C_SPI_BITS_15
 (() 0x7 << 4)

694 
	#AT91C_SPI_BITS_16
 (() 0x8 << 4)

695 
	#AT91C_SPI_SCBR
 (() 0xFF << 8)

696 
	#AT91C_SPI_DLYBS
 (() 0xFF << 16)

697 
	#AT91C_SPI_DLYBCT
 (() 0xFF << 24)

698 

	)

702 
	s_AT91S_ADC
 {

703 
AT91_REG
 
	mADC_CR
;

704 
AT91_REG
 
	mADC_MR
;

705 
AT91_REG
 
	mRe£rved0
[2];

706 
AT91_REG
 
	mADC_CHER
;

707 
AT91_REG
 
	mADC_CHDR
;

708 
AT91_REG
 
	mADC_CHSR
;

709 
AT91_REG
 
	mADC_SR
;

710 
AT91_REG
 
	mADC_LCDR
;

711 
AT91_REG
 
	mADC_IER
;

712 
AT91_REG
 
	mADC_IDR
;

713 
AT91_REG
 
	mADC_IMR
;

714 
AT91_REG
 
	mADC_CDR0
;

715 
AT91_REG
 
	mADC_CDR1
;

716 
AT91_REG
 
	mADC_CDR2
;

717 
AT91_REG
 
	mADC_CDR3
;

718 
AT91_REG
 
	mADC_CDR4
;

719 
AT91_REG
 
	mADC_CDR5
;

720 
AT91_REG
 
	mADC_CDR6
;

721 
AT91_REG
 
	mADC_CDR7
;

722 
AT91_REG
 
	mRe£rved1
[44];

723 
AT91_REG
 
	mADC_RPR
;

724 
AT91_REG
 
	mADC_RCR
;

725 
AT91_REG
 
	mADC_TPR
;

726 
AT91_REG
 
	mADC_TCR
;

727 
AT91_REG
 
	mADC_RNPR
;

728 
AT91_REG
 
	mADC_RNCR
;

729 
AT91_REG
 
	mADC_TNPR
;

730 
AT91_REG
 
	mADC_TNCR
;

731 
AT91_REG
 
	mADC_PTCR
;

732 
AT91_REG
 
	mADC_PTSR
;

733 } 
	tAT91S_ADC
, *
	tAT91PS_ADC
;

736 
	#AT91C_ADC_SWRST
 (() 0x1 << 0)

737 
	#AT91C_ADC_START
 (() 0x1 << 1)

739 
	#AT91C_ADC_TRGEN
 (() 0x1 << 0)

740 
	#AT91C_ADC_TRGEN_DIS
 (() 0x0)

741 
	#AT91C_ADC_TRGEN_EN
 (() 0x1)

742 
	#AT91C_ADC_TRGSEL
 (() 0x7 << 1)

743 
	#AT91C_ADC_TRGSEL_TIOA0
 (() 0x0 << 1)

744 
	#AT91C_ADC_TRGSEL_TIOA1
 (() 0x1 << 1)

745 
	#AT91C_ADC_TRGSEL_TIOA2
 (() 0x2 << 1)

746 
	#AT91C_ADC_TRGSEL_TIOA3
 (() 0x3 << 1)

747 
	#AT91C_ADC_TRGSEL_TIOA4
 (() 0x4 << 1)

748 
	#AT91C_ADC_TRGSEL_TIOA5
 (() 0x5 << 1)

749 
	#AT91C_ADC_TRGSEL_EXT
 (() 0x6 << 1)

750 
	#AT91C_ADC_LOWRES
 (() 0x1 << 4)

751 
	#AT91C_ADC_LOWRES_10_BIT
 (() 0x0 << 4)

752 
	#AT91C_ADC_LOWRES_8_BIT
 (() 0x1 << 4)

753 
	#AT91C_ADC_SLEEP
 (() 0x1 << 5)

754 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (() 0x0 << 5)

755 
	#AT91C_ADC_SLEEP_MODE
 (() 0x1 << 5)

756 
	#AT91C_ADC_PRESCAL
 (() 0x3F << 8)

757 
	#AT91C_ADC_STARTUP
 (() 0x1F << 16)

758 
	#AT91C_ADC_SHTIM
 (() 0xF << 24)

760 
	#AT91C_ADC_CH0
 (() 0x1 << 0)

761 
	#AT91C_ADC_CH1
 (() 0x1 << 1)

762 
	#AT91C_ADC_CH2
 (() 0x1 << 2)

763 
	#AT91C_ADC_CH3
 (() 0x1 << 3)

764 
	#AT91C_ADC_CH4
 (() 0x1 << 4)

765 
	#AT91C_ADC_CH5
 (() 0x1 << 5)

766 
	#AT91C_ADC_CH6
 (() 0x1 << 6)

767 
	#AT91C_ADC_CH7
 (() 0x1 << 7)

771 
	#AT91C_ADC_EOC0
 (() 0x1 << 0)

772 
	#AT91C_ADC_EOC1
 (() 0x1 << 1)

773 
	#AT91C_ADC_EOC2
 (() 0x1 << 2)

774 
	#AT91C_ADC_EOC3
 (() 0x1 << 3)

775 
	#AT91C_ADC_EOC4
 (() 0x1 << 4)

776 
	#AT91C_ADC_EOC5
 (() 0x1 << 5)

777 
	#AT91C_ADC_EOC6
 (() 0x1 << 6)

778 
	#AT91C_ADC_EOC7
 (() 0x1 << 7)

779 
	#AT91C_ADC_OVRE0
 (() 0x1 << 8)

780 
	#AT91C_ADC_OVRE1
 (() 0x1 << 9)

781 
	#AT91C_ADC_OVRE2
 (() 0x1 << 10)

782 
	#AT91C_ADC_OVRE3
 (() 0x1 << 11)

783 
	#AT91C_ADC_OVRE4
 (() 0x1 << 12)

784 
	#AT91C_ADC_OVRE5
 (() 0x1 << 13)

785 
	#AT91C_ADC_OVRE6
 (() 0x1 << 14)

786 
	#AT91C_ADC_OVRE7
 (() 0x1 << 15)

787 
	#AT91C_ADC_DRDY
 (() 0x1 << 16)

788 
	#AT91C_ADC_GOVRE
 (() 0x1 << 17)

789 
	#AT91C_ADC_ENDRX
 (() 0x1 << 18)

790 
	#AT91C_ADC_RXBUFF
 (() 0x1 << 19)

792 
	#AT91C_ADC_LDATA
 (() 0x3FF << 0)

797 
	#AT91C_ADC_DATA
 (() 0x3FF << 0)

805 

	)

809 
	s_AT91S_SSC
 {

810 
AT91_REG
 
	mSSC_CR
;

811 
AT91_REG
 
	mSSC_CMR
;

812 
AT91_REG
 
	mRe£rved0
[2];

813 
AT91_REG
 
	mSSC_RCMR
;

814 
AT91_REG
 
	mSSC_RFMR
;

815 
AT91_REG
 
	mSSC_TCMR
;

816 
AT91_REG
 
	mSSC_TFMR
;

817 
AT91_REG
 
	mSSC_RHR
;

818 
AT91_REG
 
	mSSC_THR
;

819 
AT91_REG
 
	mRe£rved1
[2];

820 
AT91_REG
 
	mSSC_RSHR
;

821 
AT91_REG
 
	mSSC_TSHR
;

822 
AT91_REG
 
	mSSC_RC0R
;

823 
AT91_REG
 
	mSSC_RC1R
;

824 
AT91_REG
 
	mSSC_SR
;

825 
AT91_REG
 
	mSSC_IER
;

826 
AT91_REG
 
	mSSC_IDR
;

827 
AT91_REG
 
	mSSC_IMR
;

828 
AT91_REG
 
	mRe£rved2
[44];

829 
AT91_REG
 
	mSSC_RPR
;

830 
AT91_REG
 
	mSSC_RCR
;

831 
AT91_REG
 
	mSSC_TPR
;

832 
AT91_REG
 
	mSSC_TCR
;

833 
AT91_REG
 
	mSSC_RNPR
;

834 
AT91_REG
 
	mSSC_RNCR
;

835 
AT91_REG
 
	mSSC_TNPR
;

836 
AT91_REG
 
	mSSC_TNCR
;

837 
AT91_REG
 
	mSSC_PTCR
;

838 
AT91_REG
 
	mSSC_PTSR
;

839 } 
	tAT91S_SSC
, *
	tAT91PS_SSC
;

842 
	#AT91C_SSC_RXEN
 (() 0x1 << 0)

843 
	#AT91C_SSC_RXDIS
 (() 0x1 << 1)

844 
	#AT91C_SSC_TXEN
 (() 0x1 << 8)

845 
	#AT91C_SSC_TXDIS
 (() 0x1 << 9)

846 
	#AT91C_SSC_SWRST
 (() 0x1 << 15)

848 
	#AT91C_SSC_CKS
 (() 0x3 << 0)

849 
	#AT91C_SSC_CKS_DIV
 (() 0x0)

850 
	#AT91C_SSC_CKS_TK
 (() 0x1)

851 
	#AT91C_SSC_CKS_RK
 (() 0x2)

852 
	#AT91C_SSC_CKO
 (() 0x7 << 2)

853 
	#AT91C_SSC_CKO_NONE
 (() 0x0 << 2)

854 
	#AT91C_SSC_CKO_CONTINOUS
 (() 0x1 << 2)

855 
	#AT91C_SSC_CKO_DATA_TX
 (() 0x2 << 2)

856 
	#AT91C_SSC_CKI
 (() 0x1 << 5)

857 
	#AT91C_SSC_CKG
 (() 0x3 << 6)

858 
	#AT91C_SSC_CKG_NONE
 (() 0x0 << 6)

859 
	#AT91C_SSC_CKG_LOW
 (() 0x1 << 6)

860 
	#AT91C_SSC_CKG_HIGH
 (() 0x2 << 6)

861 
	#AT91C_SSC_START
 (() 0xF << 8)

862 
	#AT91C_SSC_START_CONTINOUS
 (() 0x0 << 8)

863 
	#AT91C_SSC_START_TX
 (() 0x1 << 8)

864 
	#AT91C_SSC_START_LOW_RF
 (() 0x2 << 8)

865 
	#AT91C_SSC_START_HIGH_RF
 (() 0x3 << 8)

866 
	#AT91C_SSC_START_FALL_RF
 (() 0x4 << 8)

867 
	#AT91C_SSC_START_RISE_RF
 (() 0x5 << 8)

868 
	#AT91C_SSC_START_LEVEL_RF
 (() 0x6 << 8)

869 
	#AT91C_SSC_START_EDGE_RF
 (() 0x7 << 8)

870 
	#AT91C_SSC_START_0
 (() 0x8 << 8)

871 
	#AT91C_SSC_STOP
 (() 0x1 << 12)

872 
	#AT91C_SSC_STTOUT
 (() 0x1 << 15)

873 
	#AT91C_SSC_STTDLY
 (() 0xFF << 16)

874 
	#AT91C_SSC_PERIOD
 (() 0xFF << 24)

876 
	#AT91C_SSC_DATLEN
 (() 0x1F << 0)

877 
	#AT91C_SSC_LOOP
 (() 0x1 << 5)

878 
	#AT91C_SSC_MSBF
 (() 0x1 << 7)

879 
	#AT91C_SSC_DATNB
 (() 0xF << 8)

880 
	#AT91C_SSC_FSLEN
 (() 0xF << 16)

881 
	#AT91C_SSC_FSOS
 (() 0x7 << 20)

882 
	#AT91C_SSC_FSOS_NONE
 (() 0x0 << 20)

883 
	#AT91C_SSC_FSOS_NEGATIVE
 (() 0x1 << 20)

884 
	#AT91C_SSC_FSOS_POSITIVE
 (() 0x2 << 20)

885 
	#AT91C_SSC_FSOS_LOW
 (() 0x3 << 20)

886 
	#AT91C_SSC_FSOS_HIGH
 (() 0x4 << 20)

887 
	#AT91C_SSC_FSOS_TOGGLE
 (() 0x5 << 20)

888 
	#AT91C_SSC_FSEDGE
 (() 0x1 << 24)

891 
	#AT91C_SSC_DATDEF
 (() 0x1 << 5)

892 
	#AT91C_SSC_FSDEN
 (() 0x1 << 23)

894 
	#AT91C_SSC_TXRDY
 (() 0x1 << 0)

895 
	#AT91C_SSC_TXEMPTY
 (() 0x1 << 1)

896 
	#AT91C_SSC_ENDTX
 (() 0x1 << 2)

897 
	#AT91C_SSC_TXBUFE
 (() 0x1 << 3)

898 
	#AT91C_SSC_RXRDY
 (() 0x1 << 4)

899 
	#AT91C_SSC_OVRUN
 (() 0x1 << 5)

900 
	#AT91C_SSC_ENDRX
 (() 0x1 << 6)

901 
	#AT91C_SSC_RXBUFF
 (() 0x1 << 7)

902 
	#AT91C_SSC_CP0
 (() 0x1 << 8)

903 
	#AT91C_SSC_CP1
 (() 0x1 << 9)

904 
	#AT91C_SSC_TXSYN
 (() 0x1 << 10)

905 
	#AT91C_SSC_RXSYN
 (() 0x1 << 11)

906 
	#AT91C_SSC_TXENA
 (() 0x1 << 16)

907 
	#AT91C_SSC_RXENA
 (() 0x1 << 17)

911 

	)

915 
	s_AT91S_USART
 {

916 
AT91_REG
 
	mUS_CR
;

917 
AT91_REG
 
	mUS_MR
;

918 
AT91_REG
 
	mUS_IER
;

919 
AT91_REG
 
	mUS_IDR
;

920 
AT91_REG
 
	mUS_IMR
;

921 
AT91_REG
 
	mUS_CSR
;

922 
AT91_REG
 
	mUS_RHR
;

923 
AT91_REG
 
	mUS_THR
;

924 
AT91_REG
 
	mUS_BRGR
;

925 
AT91_REG
 
	mUS_RTOR
;

926 
AT91_REG
 
	mUS_TTGR
;

927 
AT91_REG
 
	mRe£rved0
[5];

928 
AT91_REG
 
	mUS_FIDI
;

929 
AT91_REG
 
	mUS_NER
;

930 
AT91_REG
 
	mUS_XXR
;

931 
AT91_REG
 
	mUS_IF
;

932 
AT91_REG
 
	mRe£rved1
[44];

933 
AT91_REG
 
	mUS_RPR
;

934 
AT91_REG
 
	mUS_RCR
;

935 
AT91_REG
 
	mUS_TPR
;

936 
AT91_REG
 
	mUS_TCR
;

937 
AT91_REG
 
	mUS_RNPR
;

938 
AT91_REG
 
	mUS_RNCR
;

939 
AT91_REG
 
	mUS_TNPR
;

940 
AT91_REG
 
	mUS_TNCR
;

941 
AT91_REG
 
	mUS_PTCR
;

942 
AT91_REG
 
	mUS_PTSR
;

943 } 
	tAT91S_USART
, *
	tAT91PS_USART
;

946 
	#AT91C_US_RSTSTA
 (() 0x1 << 8)

947 
	#AT91C_US_STTBRK
 (() 0x1 << 9)

948 
	#AT91C_US_STPBRK
 (() 0x1 << 10)

949 
	#AT91C_US_STTTO
 (() 0x1 << 11)

950 
	#AT91C_US_SENDA
 (() 0x1 << 12)

951 
	#AT91C_US_RSTIT
 (() 0x1 << 13)

952 
	#AT91C_US_RSTNACK
 (() 0x1 << 14)

953 
	#AT91C_US_RETTO
 (() 0x1 << 15)

954 
	#AT91C_US_DTREN
 (() 0x1 << 16)

955 
	#AT91C_US_DTRDIS
 (() 0x1 << 17)

956 
	#AT91C_US_RTSEN
 (() 0x1 << 18)

957 
	#AT91C_US_RTSDIS
 (() 0x1 << 19)

959 
	#AT91C_US_USMODE
 (() 0xF << 0)

960 
	#AT91C_US_USMODE_NORMAL
 (() 0x0)

961 
	#AT91C_US_USMODE_RS485
 (() 0x1)

962 
	#AT91C_US_USMODE_HWHSH
 (() 0x2)

963 
	#AT91C_US_USMODE_MODEM
 (() 0x3)

964 
	#AT91C_US_USMODE_ISO7816_0
 (() 0x4)

965 
	#AT91C_US_USMODE_ISO7816_1
 (() 0x6)

966 
	#AT91C_US_USMODE_IRDA
 (() 0x8)

967 
	#AT91C_US_USMODE_SWHSH
 (() 0xC)

968 
	#AT91C_US_CLKS
 (() 0x3 << 4)

969 
	#AT91C_US_CLKS_CLOCK
 (() 0x0 << 4)

970 
	#AT91C_US_CLKS_FDIV1
 (() 0x1 << 4)

971 
	#AT91C_US_CLKS_SLOW
 (() 0x2 << 4)

972 
	#AT91C_US_CLKS_EXT
 (() 0x3 << 4)

973 
	#AT91C_US_CHRL
 (() 0x3 << 6)

974 
	#AT91C_US_CHRL_5_BITS
 (() 0x0 << 6)

975 
	#AT91C_US_CHRL_6_BITS
 (() 0x1 << 6)

976 
	#AT91C_US_CHRL_7_BITS
 (() 0x2 << 6)

977 
	#AT91C_US_CHRL_8_BITS
 (() 0x3 << 6)

978 
	#AT91C_US_SYNC
 (() 0x1 << 8)

979 
	#AT91C_US_NBSTOP
 (() 0x3 << 12)

980 
	#AT91C_US_NBSTOP_1_BIT
 (() 0x0 << 12)

981 
	#AT91C_US_NBSTOP_15_BIT
 (() 0x1 << 12)

982 
	#AT91C_US_NBSTOP_2_BIT
 (() 0x2 << 12)

983 
	#AT91C_US_MSBF
 (() 0x1 << 16)

984 
	#AT91C_US_MODE9
 (() 0x1 << 17)

985 
	#AT91C_US_CKLO
 (() 0x1 << 18)

986 
	#AT91C_US_OVER
 (() 0x1 << 19)

987 
	#AT91C_US_INACK
 (() 0x1 << 20)

988 
	#AT91C_US_DSNACK
 (() 0x1 << 21)

989 
	#AT91C_US_MAX_ITER
 (() 0x1 << 24)

990 
	#AT91C_US_FILTER
 (() 0x1 << 28)

992 
	#AT91C_US_RXBRK
 (() 0x1 << 2)

993 
	#AT91C_US_TIMEOUT
 (() 0x1 << 8)

994 
	#AT91C_US_ITERATION
 (() 0x1 << 10)

995 
	#AT91C_US_NACK
 (() 0x1 << 13)

996 
	#AT91C_US_RIIC
 (() 0x1 << 16)

997 
	#AT91C_US_DSRIC
 (() 0x1 << 17)

998 
	#AT91C_US_DCDIC
 (() 0x1 << 18)

999 
	#AT91C_US_CTSIC
 (() 0x1 << 19)

1003 
	#AT91C_US_RI
 (() 0x1 << 20)

1004 
	#AT91C_US_DSR
 (() 0x1 << 21)

1005 
	#AT91C_US_DCD
 (() 0x1 << 22)

1006 
	#AT91C_US_CTS
 (() 0x1 << 23)

1007 

	)

1011 
	s_AT91S_TWI
 {

1012 
AT91_REG
 
	mTWI_CR
;

1013 
AT91_REG
 
	mTWI_MMR
;

1014 
AT91_REG
 
	mTWI_SMR
;

1015 
AT91_REG
 
	mTWI_IADR
;

1016 
AT91_REG
 
	mTWI_CWGR
;

1017 
AT91_REG
 
	mRe£rved0
[3];

1018 
AT91_REG
 
	mTWI_SR
;

1019 
AT91_REG
 
	mTWI_IER
;

1020 
AT91_REG
 
	mTWI_IDR
;

1021 
AT91_REG
 
	mTWI_IMR
;

1022 
AT91_REG
 
	mTWI_RHR
;

1023 
AT91_REG
 
	mTWI_THR
;

1024 } 
	tAT91S_TWI
, *
	tAT91PS_TWI
;

1027 
	#AT91C_TWI_START
 (() 0x1 << 0)

1028 
	#AT91C_TWI_STOP
 (() 0x1 << 1)

1029 
	#AT91C_TWI_MSEN
 (() 0x1 << 2)

1030 
	#AT91C_TWI_MSDIS
 (() 0x1 << 3)

1031 
	#AT91C_TWI_SVEN
 (() 0x1 << 4)

1032 
	#AT91C_TWI_SVDIS
 (() 0x1 << 5)

1033 
	#AT91C_TWI_SWRST
 (() 0x1 << 7)

1035 
	#AT91C_TWI_IADRSZ
 (() 0x3 << 8)

1036 
	#AT91C_TWI_IADRSZ_NO
 (() 0x0 << 8)

1037 
	#AT91C_TWI_IADRSZ_1_BYTE
 (() 0x1 << 8)

1038 
	#AT91C_TWI_IADRSZ_2_BYTE
 (() 0x2 << 8)

1039 
	#AT91C_TWI_IADRSZ_3_BYTE
 (() 0x3 << 8)

1040 
	#AT91C_TWI_MREAD
 (() 0x1 << 12)

1041 
	#AT91C_TWI_DADR
 (() 0x7F << 16)

1043 
	#AT91C_TWI_SADR
 (() 0x7F << 16)

1045 
	#AT91C_TWI_CLDIV
 (() 0xFF << 0)

1046 
	#AT91C_TWI_CHDIV
 (() 0xFF << 8)

1047 
	#AT91C_TWI_CKDIV
 (() 0x7 << 16)

1049 
	#AT91C_TWI_TXCOMP
 (() 0x1 << 0)

1050 
	#AT91C_TWI_RXRDY
 (() 0x1 << 1)

1051 
	#AT91C_TWI_TXRDY
 (() 0x1 << 2)

1052 
	#AT91C_TWI_SVREAD
 (() 0x1 << 3)

1053 
	#AT91C_TWI_SVACC
 (() 0x1 << 4)

1054 
	#AT91C_TWI_GCACC
 (() 0x1 << 5)

1055 
	#AT91C_TWI_OVRE
 (() 0x1 << 6)

1056 
	#AT91C_TWI_UNRE
 (() 0x1 << 7)

1057 
	#AT91C_TWI_NACK
 (() 0x1 << 8)

1058 
	#AT91C_TWI_ARBLST
 (() 0x1 << 9)

1062 

	)

1066 
	s_AT91S_TC
 {

1067 
AT91_REG
 
	mTC_CCR
;

1068 
AT91_REG
 
	mTC_CMR
;

1069 
AT91_REG
 
	mRe£rved0
[2];

1070 
AT91_REG
 
	mTC_CV
;

1071 
AT91_REG
 
	mTC_RA
;

1072 
AT91_REG
 
	mTC_RB
;

1073 
AT91_REG
 
	mTC_RC
;

1074 
AT91_REG
 
	mTC_SR
;

1075 
AT91_REG
 
	mTC_IER
;

1076 
AT91_REG
 
	mTC_IDR
;

1077 
AT91_REG
 
	mTC_IMR
;

1078 } 
	tAT91S_TC
, *
	tAT91PS_TC
;

1081 
	#AT91C_TC_CLKEN
 (() 0x1 << 0)

1082 
	#AT91C_TC_CLKDIS
 (() 0x1 << 1)

1083 
	#AT91C_TC_SWTRG
 (() 0x1 << 2)

1085 
	#AT91C_TC_CLKS
 (() 0x7 << 0)

1086 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (() 0x0)

1087 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (() 0x1)

1088 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (() 0x2)

1089 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (() 0x3)

1090 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (() 0x4)

1091 
	#AT91C_TC_CLKS_XC0
 (() 0x5)

1092 
	#AT91C_TC_CLKS_XC1
 (() 0x6)

1093 
	#AT91C_TC_CLKS_XC2
 (() 0x7)

1094 
	#AT91C_TC_CLKI
 (() 0x1 << 3)

1095 
	#AT91C_TC_BURST
 (() 0x3 << 4)

1096 
	#AT91C_TC_BURST_NONE
 (() 0x0 << 4)

1097 
	#AT91C_TC_BURST_XC0
 (() 0x1 << 4)

1098 
	#AT91C_TC_BURST_XC1
 (() 0x2 << 4)

1099 
	#AT91C_TC_BURST_XC2
 (() 0x3 << 4)

1100 
	#AT91C_TC_CPCSTOP
 (() 0x1 << 6)

1101 
	#AT91C_TC_LDBSTOP
 (() 0x1 << 6)

1102 
	#AT91C_TC_LDBDIS
 (() 0x1 << 7)

1103 
	#AT91C_TC_CPCDIS
 (() 0x1 << 7)

1104 
	#AT91C_TC_ETRGEDG
 (() 0x3 << 8)

1105 
	#AT91C_TC_ETRGEDG_NONE
 (() 0x0 << 8)

1106 
	#AT91C_TC_ETRGEDG_RISING
 (() 0x1 << 8)

1107 
	#AT91C_TC_ETRGEDG_FALLING
 (() 0x2 << 8)

1108 
	#AT91C_TC_ETRGEDG_BOTH
 (() 0x3 << 8)

1109 
	#AT91C_TC_EEVTEDG
 (() 0x3 << 8)

1110 
	#AT91C_TC_EEVTEDG_NONE
 (() 0x0 << 8)

1111 
	#AT91C_TC_EEVTEDG_RISING
 (() 0x1 << 8)

1112 
	#AT91C_TC_EEVTEDG_FALLING
 (() 0x2 << 8)

1113 
	#AT91C_TC_EEVTEDG_BOTH
 (() 0x3 << 8)

1114 
	#AT91C_TC_ABETRG
 (() 0x1 << 10)

1115 
	#AT91C_TC_EEVT
 (() 0x3 << 10)

1116 
	#AT91C_TC_EEVT_NONE
 (() 0x0 << 10)

1117 
	#AT91C_TC_EEVT_RISING
 (() 0x1 << 10)

1118 
	#AT91C_TC_EEVT_FALLING
 (() 0x2 << 10)

1119 
	#AT91C_TC_EEVT_BOTH
 (() 0x3 << 10)

1120 
	#AT91C_TC_ENETRG
 (() 0x1 << 12)

1121 
	#AT91C_TC_WAVESEL
 (() 0x3 << 13)

1122 
	#AT91C_TC_WAVESEL_UP
 (() 0x0 << 13)

1123 
	#AT91C_TC_WAVESEL_UPDOWN
 (() 0x1 << 13)

1124 
	#AT91C_TC_WAVESEL_UP_AUTO
 (() 0x2 << 13)

1125 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (() 0x3 << 13)

1126 
	#AT91C_TC_CPCTRG
 (() 0x1 << 14)

1127 
	#AT91C_TC_WAVE
 (() 0x1 << 15)

1128 
	#AT91C_TC_LDRA
 (() 0x3 << 16)

1129 
	#AT91C_TC_LDRA_NONE
 (() 0x0 << 16)

1130 
	#AT91C_TC_LDRA_RISING
 (() 0x1 << 16)

1131 
	#AT91C_TC_LDRA_FALLING
 (() 0x2 << 16)

1132 
	#AT91C_TC_LDRA_BOTH
 (() 0x3 << 16)

1133 
	#AT91C_TC_ACPA
 (() 0x3 << 16)

1134 
	#AT91C_TC_ACPA_NONE
 (() 0x0 << 16)

1135 
	#AT91C_TC_ACPA_SET
 (() 0x1 << 16)

1136 
	#AT91C_TC_ACPA_CLEAR
 (() 0x2 << 16)

1137 
	#AT91C_TC_ACPA_TOGGLE
 (() 0x3 << 16)

1138 
	#AT91C_TC_LDRB
 (() 0x3 << 18)

1139 
	#AT91C_TC_LDRB_NONE
 (() 0x0 << 18)

1140 
	#AT91C_TC_LDRB_RISING
 (() 0x1 << 18)

1141 
	#AT91C_TC_LDRB_FALLING
 (() 0x2 << 18)

1142 
	#AT91C_TC_LDRB_BOTH
 (() 0x3 << 18)

1143 
	#AT91C_TC_ACPC
 (() 0x3 << 18)

1144 
	#AT91C_TC_ACPC_NONE
 (() 0x0 << 18)

1145 
	#AT91C_TC_ACPC_SET
 (() 0x1 << 18)

1146 
	#AT91C_TC_ACPC_CLEAR
 (() 0x2 << 18)

1147 
	#AT91C_TC_ACPC_TOGGLE
 (() 0x3 << 18)

1148 
	#AT91C_TC_AEEVT
 (() 0x3 << 20)

1149 
	#AT91C_TC_AEEVT_NONE
 (() 0x0 << 20)

1150 
	#AT91C_TC_AEEVT_SET
 (() 0x1 << 20)

1151 
	#AT91C_TC_AEEVT_CLEAR
 (() 0x2 << 20)

1152 
	#AT91C_TC_AEEVT_TOGGLE
 (() 0x3 << 20)

1153 
	#AT91C_TC_ASWTRG
 (() 0x3 << 22)

1154 
	#AT91C_TC_ASWTRG_NONE
 (() 0x0 << 22)

1155 
	#AT91C_TC_ASWTRG_SET
 (() 0x1 << 22)

1156 
	#AT91C_TC_ASWTRG_CLEAR
 (() 0x2 << 22)

1157 
	#AT91C_TC_ASWTRG_TOGGLE
 (() 0x3 << 22)

1158 
	#AT91C_TC_BCPB
 (() 0x3 << 24)

1159 
	#AT91C_TC_BCPB_NONE
 (() 0x0 << 24)

1160 
	#AT91C_TC_BCPB_SET
 (() 0x1 << 24)

1161 
	#AT91C_TC_BCPB_CLEAR
 (() 0x2 << 24)

1162 
	#AT91C_TC_BCPB_TOGGLE
 (() 0x3 << 24)

1163 
	#AT91C_TC_BCPC
 (() 0x3 << 26)

1164 
	#AT91C_TC_BCPC_NONE
 (() 0x0 << 26)

1165 
	#AT91C_TC_BCPC_SET
 (() 0x1 << 26)

1166 
	#AT91C_TC_BCPC_CLEAR
 (() 0x2 << 26)

1167 
	#AT91C_TC_BCPC_TOGGLE
 (() 0x3 << 26)

1168 
	#AT91C_TC_BEEVT
 (() 0x3 << 28)

1169 
	#AT91C_TC_BEEVT_NONE
 (() 0x0 << 28)

1170 
	#AT91C_TC_BEEVT_SET
 (() 0x1 << 28)

1171 
	#AT91C_TC_BEEVT_CLEAR
 (() 0x2 << 28)

1172 
	#AT91C_TC_BEEVT_TOGGLE
 (() 0x3 << 28)

1173 
	#AT91C_TC_BSWTRG
 (() 0x3 << 30)

1174 
	#AT91C_TC_BSWTRG_NONE
 (() 0x0 << 30)

1175 
	#AT91C_TC_BSWTRG_SET
 (() 0x1 << 30)

1176 
	#AT91C_TC_BSWTRG_CLEAR
 (() 0x2 << 30)

1177 
	#AT91C_TC_BSWTRG_TOGGLE
 (() 0x3 << 30)

1179 
	#AT91C_TC_COVFS
 (() 0x1 << 0)

1180 
	#AT91C_TC_LOVRS
 (() 0x1 << 1)

1181 
	#AT91C_TC_CPAS
 (() 0x1 << 2)

1182 
	#AT91C_TC_CPBS
 (() 0x1 << 3)

1183 
	#AT91C_TC_CPCS
 (() 0x1 << 4)

1184 
	#AT91C_TC_LDRAS
 (() 0x1 << 5)

1185 
	#AT91C_TC_LDRBS
 (() 0x1 << 6)

1186 
	#AT91C_TC_ETRCS
 (() 0x1 << 7)

1187 
	#AT91C_TC_ETRGS
 (() 0x1 << 16)

1188 
	#AT91C_TC_MTIOA
 (() 0x1 << 17)

1189 
	#AT91C_TC_MTIOB
 (() 0x1 << 18)

1193 

	)

1197 
	s_AT91S_TCB
 {

1198 
AT91S_TC
 
	mTCB_TC0
;

1199 
AT91_REG
 
	mRe£rved0
[4];

1200 
AT91S_TC
 
	mTCB_TC1
;

1201 
AT91_REG
 
	mRe£rved1
[4];

1202 
AT91S_TC
 
	mTCB_TC2
;

1203 
AT91_REG
 
	mRe£rved2
[4];

1204 
AT91_REG
 
	mTCB_BCR
;

1205 
AT91_REG
 
	mTCB_BMR
;

1206 } 
	tAT91S_TCB
, *
	tAT91PS_TCB
;

1209 
	#AT91C_TCB_SYNC
 (() 0x1 << 0)

1211 
	#AT91C_TCB_TC0XC0S
 (() 0x1 << 0)

1212 
	#AT91C_TCB_TC0XC0S_TCLK0
 (() 0x0)

1213 
	#AT91C_TCB_TC0XC0S_NONE
 (() 0x1)

1214 
	#AT91C_TCB_TC0XC0S_TIOA1
 (() 0x2)

1215 
	#AT91C_TCB_TC0XC0S_TIOA2
 (() 0x3)

1216 
	#AT91C_TCB_TC1XC1S
 (() 0x1 << 2)

1217 
	#AT91C_TCB_TC1XC1S_TCLK1
 (() 0x0 << 2)

1218 
	#AT91C_TCB_TC1XC1S_NONE
 (() 0x1 << 2)

1219 
	#AT91C_TCB_TC1XC1S_TIOA0
 (() 0x2 << 2)

1220 
	#AT91C_TCB_TC1XC1S_TIOA2
 (() 0x3 << 2)

1221 
	#AT91C_TCB_TC2XC2S
 (() 0x1 << 4)

1222 
	#AT91C_TCB_TC2XC2S_TCLK2
 (() 0x0 << 4)

1223 
	#AT91C_TCB_TC2XC2S_NONE
 (() 0x1 << 4)

1224 
	#AT91C_TCB_TC2XC2S_TIOA0
 (() 0x2 << 4)

1225 
	#AT91C_TCB_TC2XC2S_TIOA2
 (() 0x3 << 4)

1226 

	)

1230 
	s_AT91S_PWMC_CH
 {

1231 
AT91_REG
 
	mPWMC_CMR
;

1232 
AT91_REG
 
	mPWMC_CDTYR
;

1233 
AT91_REG
 
	mPWMC_CPRDR
;

1234 
AT91_REG
 
	mPWMC_CCNTR
;

1235 
AT91_REG
 
	mPWMC_CUPDR
;

1236 
AT91_REG
 
	mPWMC_Re£rved
[3];

1237 } 
	tAT91S_PWMC_CH
, *
	tAT91PS_PWMC_CH
;

1240 
	#AT91C_PWMC_CPRE
 (() 0xF << 0)

1241 
	#AT91C_PWMC_CPRE_MCK
 (() 0x0)

1242 
	#AT91C_PWMC_CPRE_MCKA
 (() 0xB)

1243 
	#AT91C_PWMC_CPRE_MCKB
 (() 0xC)

1244 
	#AT91C_PWMC_CALG
 (() 0x1 << 8)

1245 
	#AT91C_PWMC_CPOL
 (() 0x1 << 9)

1246 
	#AT91C_PWMC_CPD
 (() 0x1 << 10)

1248 
	#AT91C_PWMC_CDTY
 (() 0x0 << 0)

1250 
	#AT91C_PWMC_CPRD
 (() 0x0 << 0)

1252 
	#AT91C_PWMC_CCNT
 (() 0x0 << 0)

1254 
	#AT91C_PWMC_CUPD
 (() 0x0 << 0)

1255 

	)

1259 
	s_AT91S_PWMC
 {

1260 
AT91_REG
 
	mPWMC_MR
;

1261 
AT91_REG
 
	mPWMC_ENA
;

1262 
AT91_REG
 
	mPWMC_DIS
;

1263 
AT91_REG
 
	mPWMC_SR
;

1264 
AT91_REG
 
	mPWMC_IER
;

1265 
AT91_REG
 
	mPWMC_IDR
;

1266 
AT91_REG
 
	mPWMC_IMR
;

1267 
AT91_REG
 
	mPWMC_ISR
;

1268 
AT91_REG
 
	mRe£rved0
[55];

1269 
AT91_REG
 
	mPWMC_VR
;

1270 
AT91_REG
 
	mRe£rved1
[64];

1271 
AT91S_PWMC_CH
 
	mPWMC_CH
[32];

1272 } 
	tAT91S_PWMC
, *
	tAT91PS_PWMC
;

1275 
	#AT91C_PWMC_DIVA
 (() 0xFF << 0)

1276 
	#AT91C_PWMC_PREA
 (() 0xF << 8)

1277 
	#AT91C_PWMC_PREA_MCK
 (() 0x0 << 8)

1278 
	#AT91C_PWMC_DIVB
 (() 0xFF << 16)

1279 
	#AT91C_PWMC_PREB
 (() 0xF << 24)

1280 
	#AT91C_PWMC_PREB_MCK
 (() 0x0 << 24)

1282 
	#AT91C_PWMC_CHID0
 (() 0x1 << 0)

1283 
	#AT91C_PWMC_CHID1
 (() 0x1 << 1)

1284 
	#AT91C_PWMC_CHID2
 (() 0x1 << 2)

1285 
	#AT91C_PWMC_CHID3
 (() 0x1 << 3)

1286 
	#AT91C_PWMC_CHID4
 (() 0x1 << 4)

1287 
	#AT91C_PWMC_CHID5
 (() 0x1 << 5)

1288 
	#AT91C_PWMC_CHID6
 (() 0x1 << 6)

1289 
	#AT91C_PWMC_CHID7
 (() 0x1 << 7)

1296 

	)

1300 
	s_AT91S_UDP
 {

1301 
AT91_REG
 
	mUDP_NUM
;

1302 
AT91_REG
 
	mUDP_GLBSTATE
;

1303 
AT91_REG
 
	mUDP_FADDR
;

1304 
AT91_REG
 
	mRe£rved0
[1];

1305 
AT91_REG
 
	mUDP_IER
;

1306 
AT91_REG
 
	mUDP_IDR
;

1307 
AT91_REG
 
	mUDP_IMR
;

1308 
AT91_REG
 
	mUDP_ISR
;

1309 
AT91_REG
 
	mUDP_ICR
;

1310 
AT91_REG
 
	mRe£rved1
[1];

1311 
AT91_REG
 
	mUDP_RSTEP
;

1312 
AT91_REG
 
	mRe£rved2
[1];

1313 
AT91_REG
 
	mUDP_CSR
[8];

1314 
AT91_REG
 
	mUDP_FDR
[8];

1315 } 
	tAT91S_UDP
, *
	tAT91PS_UDP
;

1318 
	#AT91C_UDP_FRM_NUM
 (() 0x7FF << 0)

1319 
	#AT91C_UDP_FRM_ERR
 (() 0x1 << 16)

1320 
	#AT91C_UDP_FRM_OK
 (() 0x1 << 17)

1322 
	#AT91C_UDP_FADDEN
 (() 0x1 << 0)

1323 
	#AT91C_UDP_CONFG
 (() 0x1 << 1)

1324 
	#AT91C_UDP_RMWUPE
 (() 0x1 << 2)

1325 
	#AT91C_UDP_RSMINPR
 (() 0x1 << 3)

1327 
	#AT91C_UDP_FADD
 (() 0xFF << 0)

1328 
	#AT91C_UDP_FEN
 (() 0x1 << 8)

1330 
	#AT91C_UDP_EPINT0
 (() 0x1 << 0)

1331 
	#AT91C_UDP_EPINT1
 (() 0x1 << 1)

1332 
	#AT91C_UDP_EPINT2
 (() 0x1 << 2)

1333 
	#AT91C_UDP_EPINT3
 (() 0x1 << 3)

1334 
	#AT91C_UDP_EPINT4
 (() 0x1 << 4)

1335 
	#AT91C_UDP_EPINT5
 (() 0x1 << 5)

1336 
	#AT91C_UDP_EPINT6
 (() 0x1 << 6)

1337 
	#AT91C_UDP_EPINT7
 (() 0x1 << 7)

1338 
	#AT91C_UDP_RXSUSP
 (() 0x1 << 8)

1339 
	#AT91C_UDP_RXRSM
 (() 0x1 << 9)

1340 
	#AT91C_UDP_EXTRSM
 (() 0x1 << 10)

1341 
	#AT91C_UDP_SOFINT
 (() 0x1 << 11)

1342 
	#AT91C_UDP_WAKEUP
 (() 0x1 << 13)

1346 
	#AT91C_UDP_ENDBUSRES
 (() 0x1 << 12)

1349 
	#AT91C_UDP_EP0
 (() 0x1 << 0)

1350 
	#AT91C_UDP_EP1
 (() 0x1 << 1)

1351 
	#AT91C_UDP_EP2
 (() 0x1 << 2)

1352 
	#AT91C_UDP_EP3
 (() 0x1 << 3)

1353 
	#AT91C_UDP_EP4
 (() 0x1 << 4)

1354 
	#AT91C_UDP_EP5
 (() 0x1 << 5)

1355 
	#AT91C_UDP_EP6
 (() 0x1 << 6)

1356 
	#AT91C_UDP_EP7
 (() 0x1 << 7)

1358 
	#AT91C_UDP_TXCOMP
 (() 0x1 << 0)

1359 
	#AT91C_UDP_RX_DATA_BK0
 (() 0x1 << 1)

1360 
	#AT91C_UDP_RXSETUP
 (() 0x1 << 2)

1361 
	#AT91C_UDP_ISOERROR
 (() 0x1 << 3)

1362 
	#AT91C_UDP_TXPKTRDY
 (() 0x1 << 4)

1363 
	#AT91C_UDP_FORCESTALL
 (() 0x1 << 5)

1364 
	#AT91C_UDP_RX_DATA_BK1
 (() 0x1 << 6)

1365 
	#AT91C_UDP_DIR
 (() 0x1 << 7)

1366 
	#AT91C_UDP_EPTYPE
 (() 0x7 << 8)

1367 
	#AT91C_UDP_EPTYPE_CTRL
 (() 0x0 << 8)

1368 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (() 0x1 << 8)

1369 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (() 0x2 << 8)

1370 
	#AT91C_UDP_EPTYPE_INT_OUT
 (() 0x3 << 8)

1371 
	#AT91C_UDP_EPTYPE_ISO_IN
 (() 0x5 << 8)

1372 
	#AT91C_UDP_EPTYPE_BULK_IN
 (() 0x6 << 8)

1373 
	#AT91C_UDP_EPTYPE_INT_IN
 (() 0x7 << 8)

1374 
	#AT91C_UDP_DTGLE
 (() 0x1 << 11)

1375 
	#AT91C_UDP_EPEDS
 (() 0x1 << 15)

1376 
	#AT91C_UDP_RXBYTECNT
 (() 0x7FF << 16)

1377 

	)

1382 
	#AT91C_SYSC_SYSC_VRPM
 ((
AT91_REG
 *) 0xFFFFFD60)

1384 
	#AT91C_AIC_ICCR
 ((
AT91_REG
 *) 0xFFFFF128)

1385 
	#AT91C_AIC_IECR
 ((
AT91_REG
 *) 0xFFFFF120)

1386 
	#AT91C_AIC_SMR
 ((
AT91_REG
 *) 0xFFFFF000)

1387 
	#AT91C_AIC_ISCR
 ((
AT91_REG
 *) 0xFFFFF12C)

1388 
	#AT91C_AIC_EOICR
 ((
AT91_REG
 *) 0xFFFFF130)

1389 
	#AT91C_AIC_DCR
 ((
AT91_REG
 *) 0xFFFFF138)

1390 
	#AT91C_AIC_FFER
 ((
AT91_REG
 *) 0xFFFFF140)

1391 
	#AT91C_AIC_SVR
 ((
AT91_REG
 *) 0xFFFFF080)

1392 
	#AT91C_AIC_SPU
 ((
AT91_REG
 *) 0xFFFFF134)

1393 
	#AT91C_AIC_FFDR
 ((
AT91_REG
 *) 0xFFFFF144)

1394 
	#AT91C_AIC_FVR
 ((
AT91_REG
 *) 0xFFFFF104)

1395 
	#AT91C_AIC_FFSR
 ((
AT91_REG
 *) 0xFFFFF148)

1396 
	#AT91C_AIC_IMR
 ((
AT91_REG
 *) 0xFFFFF110)

1397 
	#AT91C_AIC_ISR
 ((
AT91_REG
 *) 0xFFFFF108)

1398 
	#AT91C_AIC_IVR
 ((
AT91_REG
 *) 0xFFFFF100)

1399 
	#AT91C_AIC_IDCR
 ((
AT91_REG
 *) 0xFFFFF124)

1400 
	#AT91C_AIC_CISR
 ((
AT91_REG
 *) 0xFFFFF114)

1401 
	#AT91C_AIC_IPR
 ((
AT91_REG
 *) 0xFFFFF10C)

1403 
	#AT91C_DBGU_C2R
 ((
AT91_REG
 *) 0xFFFFF244)

1404 
	#AT91C_DBGU_THR
 ((
AT91_REG
 *) 0xFFFFF21C)

1405 
	#AT91C_DBGU_CSR
 ((
AT91_REG
 *) 0xFFFFF214)

1406 
	#AT91C_DBGU_IDR
 ((
AT91_REG
 *) 0xFFFFF20C)

1407 
	#AT91C_DBGU_MR
 ((
AT91_REG
 *) 0xFFFFF204)

1408 
	#AT91C_DBGU_FNTR
 ((
AT91_REG
 *) 0xFFFFF248)

1409 
	#AT91C_DBGU_C1R
 ((
AT91_REG
 *) 0xFFFFF240)

1410 
	#AT91C_DBGU_BRGR
 ((
AT91_REG
 *) 0xFFFFF220)

1411 
	#AT91C_DBGU_RHR
 ((
AT91_REG
 *) 0xFFFFF218)

1412 
	#AT91C_DBGU_IMR
 ((
AT91_REG
 *) 0xFFFFF210)

1413 
	#AT91C_DBGU_IER
 ((
AT91_REG
 *) 0xFFFFF208)

1414 
	#AT91C_DBGU_CR
 ((
AT91_REG
 *) 0xFFFFF200)

1416 
	#AT91C_DBGU_TNCR
 ((
AT91_REG
 *) 0xFFFFF31C)

1417 
	#AT91C_DBGU_RNCR
 ((
AT91_REG
 *) 0xFFFFF314)

1418 
	#AT91C_DBGU_PTCR
 ((
AT91_REG
 *) 0xFFFFF320)

1419 
	#AT91C_DBGU_PTSR
 ((
AT91_REG
 *) 0xFFFFF324)

1420 
	#AT91C_DBGU_RCR
 ((
AT91_REG
 *) 0xFFFFF304)

1421 
	#AT91C_DBGU_TCR
 ((
AT91_REG
 *) 0xFFFFF30C)

1422 
	#AT91C_DBGU_RPR
 ((
AT91_REG
 *) 0xFFFFF300)

1423 
	#AT91C_DBGU_TPR
 ((
AT91_REG
 *) 0xFFFFF308)

1424 
	#AT91C_DBGU_RNPR
 ((
AT91_REG
 *) 0xFFFFF310)

1425 
	#AT91C_DBGU_TNPR
 ((
AT91_REG
 *) 0xFFFFF318)

1427 
	#AT91C_PIOA_IMR
 ((
AT91_REG
 *) 0xFFFFF448)

1428 
	#AT91C_PIOA_IER
 ((
AT91_REG
 *) 0xFFFFF440)

1429 
	#AT91C_PIOA_OWDR
 ((
AT91_REG
 *) 0xFFFFF4A4)

1430 
	#AT91C_PIOA_ISR
 ((
AT91_REG
 *) 0xFFFFF44C)

1431 
	#AT91C_PIOA_PPUDR
 ((
AT91_REG
 *) 0xFFFFF460)

1432 
	#AT91C_PIOA_MDSR
 ((
AT91_REG
 *) 0xFFFFF458)

1433 
	#AT91C_PIOA_MDER
 ((
AT91_REG
 *) 0xFFFFF450)

1434 
	#AT91C_PIOA_PER
 ((
AT91_REG
 *) 0xFFFFF400)

1435 
	#AT91C_PIOA_PSR
 ((
AT91_REG
 *) 0xFFFFF408)

1436 
	#AT91C_PIOA_OER
 ((
AT91_REG
 *) 0xFFFFF410)

1437 
	#AT91C_PIOA_BSR
 ((
AT91_REG
 *) 0xFFFFF474)

1438 
	#AT91C_PIOA_PPUER
 ((
AT91_REG
 *) 0xFFFFF464)

1439 
	#AT91C_PIOA_MDDR
 ((
AT91_REG
 *) 0xFFFFF454)

1440 
	#AT91C_PIOA_PDR
 ((
AT91_REG
 *) 0xFFFFF404)

1441 
	#AT91C_PIOA_ODR
 ((
AT91_REG
 *) 0xFFFFF414)

1442 
	#AT91C_PIOA_IFDR
 ((
AT91_REG
 *) 0xFFFFF424)

1443 
	#AT91C_PIOA_ABSR
 ((
AT91_REG
 *) 0xFFFFF478)

1444 
	#AT91C_PIOA_ASR
 ((
AT91_REG
 *) 0xFFFFF470)

1445 
	#AT91C_PIOA_PPUSR
 ((
AT91_REG
 *) 0xFFFFF468)

1446 
	#AT91C_PIOA_ODSR
 ((
AT91_REG
 *) 0xFFFFF438)

1447 
	#AT91C_PIOA_SODR
 ((
AT91_REG
 *) 0xFFFFF430)

1448 
	#AT91C_PIOA_IFSR
 ((
AT91_REG
 *) 0xFFFFF428)

1449 
	#AT91C_PIOA_IFER
 ((
AT91_REG
 *) 0xFFFFF420)

1450 
	#AT91C_PIOA_OSR
 ((
AT91_REG
 *) 0xFFFFF418)

1451 
	#AT91C_PIOA_IDR
 ((
AT91_REG
 *) 0xFFFFF444)

1452 
	#AT91C_PIOA_PDSR
 ((
AT91_REG
 *) 0xFFFFF43C)

1453 
	#AT91C_PIOA_CODR
 ((
AT91_REG
 *) 0xFFFFF434)

1454 
	#AT91C_PIOA_OWSR
 ((
AT91_REG
 *) 0xFFFFF4A8)

1455 
	#AT91C_PIOA_OWER
 ((
AT91_REG
 *) 0xFFFFF4A0)

1457 
	#AT91C_CKGR_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1458 
	#AT91C_CKGR_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1459 
	#AT91C_CKGR_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1461 
	#AT91C_PMC_SCSR
 ((
AT91_REG
 *) 0xFFFFFC08)

1462 
	#AT91C_PMC_SCER
 ((
AT91_REG
 *) 0xFFFFFC00)

1463 
	#AT91C_PMC_IMR
 ((
AT91_REG
 *) 0xFFFFFC6C)

1464 
	#AT91C_PMC_IDR
 ((
AT91_REG
 *) 0xFFFFFC64)

1465 
	#AT91C_PMC_PCDR
 ((
AT91_REG
 *) 0xFFFFFC14)

1466 
	#AT91C_PMC_SCDR
 ((
AT91_REG
 *) 0xFFFFFC04)

1467 
	#AT91C_PMC_SR
 ((
AT91_REG
 *) 0xFFFFFC68)

1468 
	#AT91C_PMC_IER
 ((
AT91_REG
 *) 0xFFFFFC60)

1469 
	#AT91C_PMC_MCKR
 ((
AT91_REG
 *) 0xFFFFFC30)

1470 
	#AT91C_PMC_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1471 
	#AT91C_PMC_PCER
 ((
AT91_REG
 *) 0xFFFFFC10)

1472 
	#AT91C_PMC_PCSR
 ((
AT91_REG
 *) 0xFFFFFC18)

1473 
	#AT91C_PMC_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1474 
	#AT91C_PMC_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1475 
	#AT91C_PMC_PCKR
 ((
AT91_REG
 *) 0xFFFFFC40)

1477 
	#AT91C_RSTC_RSR
 ((
AT91_REG
 *) 0xFFFFFD04)

1478 
	#AT91C_RSTC_RMR
 ((
AT91_REG
 *) 0xFFFFFD08)

1479 
	#AT91C_RSTC_RCR
 ((
AT91_REG
 *) 0xFFFFFD00)

1481 
	#AT91C_RTTC_RTSR
 ((
AT91_REG
 *) 0xFFFFFD2C)

1482 
	#AT91C_RTTC_RTAR
 ((
AT91_REG
 *) 0xFFFFFD24)

1483 
	#AT91C_RTTC_RTVR
 ((
AT91_REG
 *) 0xFFFFFD28)

1484 
	#AT91C_RTTC_RTMR
 ((
AT91_REG
 *) 0xFFFFFD20)

1486 
	#AT91C_PITC_PIIR
 ((
AT91_REG
 *) 0xFFFFFD3C)

1487 
	#AT91C_PITC_PISR
 ((
AT91_REG
 *) 0xFFFFFD34)

1488 
	#AT91C_PITC_PIVR
 ((
AT91_REG
 *) 0xFFFFFD38)

1489 
	#AT91C_PITC_PIMR
 ((
AT91_REG
 *) 0xFFFFFD30)

1491 
	#AT91C_WDTC_WDMR
 ((
AT91_REG
 *) 0xFFFFFD44)

1492 
	#AT91C_WDTC_WDSR
 ((
AT91_REG
 *) 0xFFFFFD48)

1493 
	#AT91C_WDTC_WDCR
 ((
AT91_REG
 *) 0xFFFFFD40)

1495 
	#AT91C_MC_FCR
 ((
AT91_REG
 *) 0xFFFFFF64)

1496 
	#AT91C_MC_ASR
 ((
AT91_REG
 *) 0xFFFFFF04)

1497 
	#AT91C_MC_FSR
 ((
AT91_REG
 *) 0xFFFFFF68)

1498 
	#AT91C_MC_FMR
 ((
AT91_REG
 *) 0xFFFFFF60)

1499 
	#AT91C_MC_AASR
 ((
AT91_REG
 *) 0xFFFFFF08)

1500 
	#AT91C_MC_RCR
 ((
AT91_REG
 *) 0xFFFFFF00)

1502 
	#AT91C_SPI_PTCR
 ((
AT91_REG
 *) 0xFFFE0120)

1503 
	#AT91C_SPI_TNPR
 ((
AT91_REG
 *) 0xFFFE0118)

1504 
	#AT91C_SPI_RNPR
 ((
AT91_REG
 *) 0xFFFE0110)

1505 
	#AT91C_SPI_TPR
 ((
AT91_REG
 *) 0xFFFE0108)

1506 
	#AT91C_SPI_RPR
 ((
AT91_REG
 *) 0xFFFE0100)

1507 
	#AT91C_SPI_PTSR
 ((
AT91_REG
 *) 0xFFFE0124)

1508 
	#AT91C_SPI_TNCR
 ((
AT91_REG
 *) 0xFFFE011C)

1509 
	#AT91C_SPI_RNCR
 ((
AT91_REG
 *) 0xFFFE0114)

1510 
	#AT91C_SPI_TCR
 ((
AT91_REG
 *) 0xFFFE010C)

1511 
	#AT91C_SPI_RCR
 ((
AT91_REG
 *) 0xFFFE0104)

1513 
	#AT91C_SPI_CSR
 ((
AT91_REG
 *) 0xFFFE0030)

1514 
	#AT91C_SPI_IDR
 ((
AT91_REG
 *) 0xFFFE0018)

1515 
	#AT91C_SPI_SR
 ((
AT91_REG
 *) 0xFFFE0010)

1516 
	#AT91C_SPI_RDR
 ((
AT91_REG
 *) 0xFFFE0008)

1517 
	#AT91C_SPI_CR
 ((
AT91_REG
 *) 0xFFFE0000)

1518 
	#AT91C_SPI_IMR
 ((
AT91_REG
 *) 0xFFFE001C)

1519 
	#AT91C_SPI_IER
 ((
AT91_REG
 *) 0xFFFE0014)

1520 
	#AT91C_SPI_TDR
 ((
AT91_REG
 *) 0xFFFE000C)

1521 
	#AT91C_SPI_MR
 ((
AT91_REG
 *) 0xFFFE0004)

1523 
	#AT91C_ADC_PTCR
 ((
AT91_REG
 *) 0xFFFD8120)

1524 
	#AT91C_ADC_TNPR
 ((
AT91_REG
 *) 0xFFFD8118)

1525 
	#AT91C_ADC_RNPR
 ((
AT91_REG
 *) 0xFFFD8110)

1526 
	#AT91C_ADC_TPR
 ((
AT91_REG
 *) 0xFFFD8108)

1527 
	#AT91C_ADC_RPR
 ((
AT91_REG
 *) 0xFFFD8100)

1528 
	#AT91C_ADC_PTSR
 ((
AT91_REG
 *) 0xFFFD8124)

1529 
	#AT91C_ADC_TNCR
 ((
AT91_REG
 *) 0xFFFD811C)

1530 
	#AT91C_ADC_RNCR
 ((
AT91_REG
 *) 0xFFFD8114)

1531 
	#AT91C_ADC_TCR
 ((
AT91_REG
 *) 0xFFFD810C)

1532 
	#AT91C_ADC_RCR
 ((
AT91_REG
 *) 0xFFFD8104)

1534 
	#AT91C_ADC_IMR
 ((
AT91_REG
 *) 0xFFFD802C)

1535 
	#AT91C_ADC_CDR4
 ((
AT91_REG
 *) 0xFFFD8040)

1536 
	#AT91C_ADC_CDR2
 ((
AT91_REG
 *) 0xFFFD8038)

1537 
	#AT91C_ADC_CDR0
 ((
AT91_REG
 *) 0xFFFD8030)

1538 
	#AT91C_ADC_CDR7
 ((
AT91_REG
 *) 0xFFFD804C)

1539 
	#AT91C_ADC_CDR1
 ((
AT91_REG
 *) 0xFFFD8034)

1540 
	#AT91C_ADC_CDR3
 ((
AT91_REG
 *) 0xFFFD803C)

1541 
	#AT91C_ADC_CDR5
 ((
AT91_REG
 *) 0xFFFD8044)

1542 
	#AT91C_ADC_MR
 ((
AT91_REG
 *) 0xFFFD8004)

1543 
	#AT91C_ADC_CDR6
 ((
AT91_REG
 *) 0xFFFD8048)

1544 
	#AT91C_ADC_CR
 ((
AT91_REG
 *) 0xFFFD8000)

1545 
	#AT91C_ADC_CHER
 ((
AT91_REG
 *) 0xFFFD8010)

1546 
	#AT91C_ADC_CHSR
 ((
AT91_REG
 *) 0xFFFD8018)

1547 
	#AT91C_ADC_IER
 ((
AT91_REG
 *) 0xFFFD8024)

1548 
	#AT91C_ADC_SR
 ((
AT91_REG
 *) 0xFFFD801C)

1549 
	#AT91C_ADC_CHDR
 ((
AT91_REG
 *) 0xFFFD8014)

1550 
	#AT91C_ADC_IDR
 ((
AT91_REG
 *) 0xFFFD8028)

1551 
	#AT91C_ADC_LCDR
 ((
AT91_REG
 *) 0xFFFD8020)

1553 
	#AT91C_SSC_PTCR
 ((
AT91_REG
 *) 0xFFFD4120)

1554 
	#AT91C_SSC_TNPR
 ((
AT91_REG
 *) 0xFFFD4118)

1555 
	#AT91C_SSC_RNPR
 ((
AT91_REG
 *) 0xFFFD4110)

1556 
	#AT91C_SSC_TPR
 ((
AT91_REG
 *) 0xFFFD4108)

1557 
	#AT91C_SSC_RPR
 ((
AT91_REG
 *) 0xFFFD4100)

1558 
	#AT91C_SSC_PTSR
 ((
AT91_REG
 *) 0xFFFD4124)

1559 
	#AT91C_SSC_TNCR
 ((
AT91_REG
 *) 0xFFFD411C)

1560 
	#AT91C_SSC_RNCR
 ((
AT91_REG
 *) 0xFFFD4114)

1561 
	#AT91C_SSC_TCR
 ((
AT91_REG
 *) 0xFFFD410C)

1562 
	#AT91C_SSC_RCR
 ((
AT91_REG
 *) 0xFFFD4104)

1564 
	#AT91C_SSC_RFMR
 ((
AT91_REG
 *) 0xFFFD4014)

1565 
	#AT91C_SSC_CMR
 ((
AT91_REG
 *) 0xFFFD4004)

1566 
	#AT91C_SSC_IDR
 ((
AT91_REG
 *) 0xFFFD4048)

1567 
	#AT91C_SSC_SR
 ((
AT91_REG
 *) 0xFFFD4040)

1568 
	#AT91C_SSC_RC0R
 ((
AT91_REG
 *) 0xFFFD4038)

1569 
	#AT91C_SSC_RSHR
 ((
AT91_REG
 *) 0xFFFD4030)

1570 
	#AT91C_SSC_RHR
 ((
AT91_REG
 *) 0xFFFD4020)

1571 
	#AT91C_SSC_TCMR
 ((
AT91_REG
 *) 0xFFFD4018)

1572 
	#AT91C_SSC_RCMR
 ((
AT91_REG
 *) 0xFFFD4010)

1573 
	#AT91C_SSC_CR
 ((
AT91_REG
 *) 0xFFFD4000)

1574 
	#AT91C_SSC_IMR
 ((
AT91_REG
 *) 0xFFFD404C)

1575 
	#AT91C_SSC_IER
 ((
AT91_REG
 *) 0xFFFD4044)

1576 
	#AT91C_SSC_RC1R
 ((
AT91_REG
 *) 0xFFFD403C)

1577 
	#AT91C_SSC_TSHR
 ((
AT91_REG
 *) 0xFFFD4034)

1578 
	#AT91C_SSC_THR
 ((
AT91_REG
 *) 0xFFFD4024)

1579 
	#AT91C_SSC_TFMR
 ((
AT91_REG
 *) 0xFFFD401C)

1581 
	#AT91C_US1_PTSR
 ((
AT91_REG
 *) 0xFFFC4124)

1582 
	#AT91C_US1_TNCR
 ((
AT91_REG
 *) 0xFFFC411C)

1583 
	#AT91C_US1_RNCR
 ((
AT91_REG
 *) 0xFFFC4114)

1584 
	#AT91C_US1_TCR
 ((
AT91_REG
 *) 0xFFFC410C)

1585 
	#AT91C_US1_RCR
 ((
AT91_REG
 *) 0xFFFC4104)

1586 
	#AT91C_US1_PTCR
 ((
AT91_REG
 *) 0xFFFC4120)

1587 
	#AT91C_US1_TNPR
 ((
AT91_REG
 *) 0xFFFC4118)

1588 
	#AT91C_US1_RNPR
 ((
AT91_REG
 *) 0xFFFC4110)

1589 
	#AT91C_US1_TPR
 ((
AT91_REG
 *) 0xFFFC4108)

1590 
	#AT91C_US1_RPR
 ((
AT91_REG
 *) 0xFFFC4100)

1592 
	#AT91C_US1_XXR
 ((
AT91_REG
 *) 0xFFFC4048)

1593 
	#AT91C_US1_RHR
 ((
AT91_REG
 *) 0xFFFC4018)

1594 
	#AT91C_US1_IMR
 ((
AT91_REG
 *) 0xFFFC4010)

1595 
	#AT91C_US1_IER
 ((
AT91_REG
 *) 0xFFFC4008)

1596 
	#AT91C_US1_CR
 ((
AT91_REG
 *) 0xFFFC4000)

1597 
	#AT91C_US1_RTOR
 ((
AT91_REG
 *) 0xFFFC4024)

1598 
	#AT91C_US1_THR
 ((
AT91_REG
 *) 0xFFFC401C)

1599 
	#AT91C_US1_CSR
 ((
AT91_REG
 *) 0xFFFC4014)

1600 
	#AT91C_US1_IDR
 ((
AT91_REG
 *) 0xFFFC400C)

1601 
	#AT91C_US1_FIDI
 ((
AT91_REG
 *) 0xFFFC4040)

1602 
	#AT91C_US1_BRGR
 ((
AT91_REG
 *) 0xFFFC4020)

1603 
	#AT91C_US1_TTGR
 ((
AT91_REG
 *) 0xFFFC4028)

1604 
	#AT91C_US1_IF
 ((
AT91_REG
 *) 0xFFFC404C)

1605 
	#AT91C_US1_NER
 ((
AT91_REG
 *) 0xFFFC4044)

1606 
	#AT91C_US1_MR
 ((
AT91_REG
 *) 0xFFFC4004)

1608 
	#AT91C_US0_PTCR
 ((
AT91_REG
 *) 0xFFFC0120)

1609 
	#AT91C_US0_TNPR
 ((
AT91_REG
 *) 0xFFFC0118)

1610 
	#AT91C_US0_RNPR
 ((
AT91_REG
 *) 0xFFFC0110)

1611 
	#AT91C_US0_TPR
 ((
AT91_REG
 *) 0xFFFC0108)

1612 
	#AT91C_US0_RPR
 ((
AT91_REG
 *) 0xFFFC0100)

1613 
	#AT91C_US0_PTSR
 ((
AT91_REG
 *) 0xFFFC0124)

1614 
	#AT91C_US0_TNCR
 ((
AT91_REG
 *) 0xFFFC011C)

1615 
	#AT91C_US0_RNCR
 ((
AT91_REG
 *) 0xFFFC0114)

1616 
	#AT91C_US0_TCR
 ((
AT91_REG
 *) 0xFFFC010C)

1617 
	#AT91C_US0_RCR
 ((
AT91_REG
 *) 0xFFFC0104)

1619 
	#AT91C_US0_TTGR
 ((
AT91_REG
 *) 0xFFFC0028)

1620 
	#AT91C_US0_BRGR
 ((
AT91_REG
 *) 0xFFFC0020)

1621 
	#AT91C_US0_RHR
 ((
AT91_REG
 *) 0xFFFC0018)

1622 
	#AT91C_US0_IMR
 ((
AT91_REG
 *) 0xFFFC0010)

1623 
	#AT91C_US0_NER
 ((
AT91_REG
 *) 0xFFFC0044)

1624 
	#AT91C_US0_RTOR
 ((
AT91_REG
 *) 0xFFFC0024)

1625 
	#AT91C_US0_XXR
 ((
AT91_REG
 *) 0xFFFC0048)

1626 
	#AT91C_US0_FIDI
 ((
AT91_REG
 *) 0xFFFC0040)

1627 
	#AT91C_US0_CR
 ((
AT91_REG
 *) 0xFFFC0000)

1628 
	#AT91C_US0_IER
 ((
AT91_REG
 *) 0xFFFC0008)

1629 
	#AT91C_US0_IF
 ((
AT91_REG
 *) 0xFFFC004C)

1630 
	#AT91C_US0_MR
 ((
AT91_REG
 *) 0xFFFC0004)

1631 
	#AT91C_US0_IDR
 ((
AT91_REG
 *) 0xFFFC000C)

1632 
	#AT91C_US0_CSR
 ((
AT91_REG
 *) 0xFFFC0014)

1633 
	#AT91C_US0_THR
 ((
AT91_REG
 *) 0xFFFC001C)

1635 
	#AT91C_TWI_RHR
 ((
AT91_REG
 *) 0xFFFB8030)

1636 
	#AT91C_TWI_IDR
 ((
AT91_REG
 *) 0xFFFB8028)

1637 
	#AT91C_TWI_SR
 ((
AT91_REG
 *) 0xFFFB8020)

1638 
	#AT91C_TWI_CWGR
 ((
AT91_REG
 *) 0xFFFB8010)

1639 
	#AT91C_TWI_SMR
 ((
AT91_REG
 *) 0xFFFB8008)

1640 
	#AT91C_TWI_CR
 ((
AT91_REG
 *) 0xFFFB8000)

1641 
	#AT91C_TWI_THR
 ((
AT91_REG
 *) 0xFFFB8034)

1642 
	#AT91C_TWI_IMR
 ((
AT91_REG
 *) 0xFFFB802C)

1643 
	#AT91C_TWI_IER
 ((
AT91_REG
 *) 0xFFFB8024)

1644 
	#AT91C_TWI_IADR
 ((
AT91_REG
 *) 0xFFFB800C)

1645 
	#AT91C_TWI_MMR
 ((
AT91_REG
 *) 0xFFFB8004)

1647 
	#AT91C_TC2_IMR
 ((
AT91_REG
 *) 0xFFFA00AC)

1648 
	#AT91C_TC2_IER
 ((
AT91_REG
 *) 0xFFFA00A4)

1649 
	#AT91C_TC2_RC
 ((
AT91_REG
 *) 0xFFFA009C)

1650 
	#AT91C_TC2_RA
 ((
AT91_REG
 *) 0xFFFA0094)

1651 
	#AT91C_TC2_CMR
 ((
AT91_REG
 *) 0xFFFA0084)

1652 
	#AT91C_TC2_IDR
 ((
AT91_REG
 *) 0xFFFA00A8)

1653 
	#AT91C_TC2_SR
 ((
AT91_REG
 *) 0xFFFA00A0)

1654 
	#AT91C_TC2_RB
 ((
AT91_REG
 *) 0xFFFA0098)

1655 
	#AT91C_TC2_CV
 ((
AT91_REG
 *) 0xFFFA0090)

1656 
	#AT91C_TC2_CCR
 ((
AT91_REG
 *) 0xFFFA0080)

1658 
	#AT91C_TC1_IMR
 ((
AT91_REG
 *) 0xFFFA006C)

1659 
	#AT91C_TC1_IER
 ((
AT91_REG
 *) 0xFFFA0064)

1660 
	#AT91C_TC1_RC
 ((
AT91_REG
 *) 0xFFFA005C)

1661 
	#AT91C_TC1_RA
 ((
AT91_REG
 *) 0xFFFA0054)

1662 
	#AT91C_TC1_CMR
 ((
AT91_REG
 *) 0xFFFA0044)

1663 
	#AT91C_TC1_IDR
 ((
AT91_REG
 *) 0xFFFA0068)

1664 
	#AT91C_TC1_SR
 ((
AT91_REG
 *) 0xFFFA0060)

1665 
	#AT91C_TC1_RB
 ((
AT91_REG
 *) 0xFFFA0058)

1666 
	#AT91C_TC1_CV
 ((
AT91_REG
 *) 0xFFFA0050)

1667 
	#AT91C_TC1_CCR
 ((
AT91_REG
 *) 0xFFFA0040)

1669 
	#AT91C_TC0_IMR
 ((
AT91_REG
 *) 0xFFFA002C)

1670 
	#AT91C_TC0_IER
 ((
AT91_REG
 *) 0xFFFA0024)

1671 
	#AT91C_TC0_RC
 ((
AT91_REG
 *) 0xFFFA001C)

1672 
	#AT91C_TC0_RA
 ((
AT91_REG
 *) 0xFFFA0014)

1673 
	#AT91C_TC0_CMR
 ((
AT91_REG
 *) 0xFFFA0004)

1674 
	#AT91C_TC0_IDR
 ((
AT91_REG
 *) 0xFFFA0028)

1675 
	#AT91C_TC0_SR
 ((
AT91_REG
 *) 0xFFFA0020)

1676 
	#AT91C_TC0_RB
 ((
AT91_REG
 *) 0xFFFA0018)

1677 
	#AT91C_TC0_CV
 ((
AT91_REG
 *) 0xFFFA0010)

1678 
	#AT91C_TC0_CCR
 ((
AT91_REG
 *) 0xFFFA0000)

1680 
	#AT91C_TCB_BMR
 ((
AT91_REG
 *) 0xFFFA00C4)

1681 
	#AT91C_TCB_BCR
 ((
AT91_REG
 *) 0xFFFA00C0)

1683 
	#AT91C_CH3_CUPDR
 ((
AT91_REG
 *) 0xFFFCC270)

1684 
	#AT91C_CH3_CPRDR
 ((
AT91_REG
 *) 0xFFFCC268)

1685 
	#AT91C_CH3_CMR
 ((
AT91_REG
 *) 0xFFFCC260)

1686 
	#AT91C_CH3_Re£rved
 ((
AT91_REG
 *) 0xFFFCC274)

1687 
	#AT91C_CH3_CCNTR
 ((
AT91_REG
 *) 0xFFFCC26C)

1688 
	#AT91C_CH3_CDTYR
 ((
AT91_REG
 *) 0xFFFCC264)

1690 
	#AT91C_CH2_CUPDR
 ((
AT91_REG
 *) 0xFFFCC250)

1691 
	#AT91C_CH2_CPRDR
 ((
AT91_REG
 *) 0xFFFCC248)

1692 
	#AT91C_CH2_CMR
 ((
AT91_REG
 *) 0xFFFCC240)

1693 
	#AT91C_CH2_Re£rved
 ((
AT91_REG
 *) 0xFFFCC254)

1694 
	#AT91C_CH2_CCNTR
 ((
AT91_REG
 *) 0xFFFCC24C)

1695 
	#AT91C_CH2_CDTYR
 ((
AT91_REG
 *) 0xFFFCC244)

1697 
	#AT91C_CH1_CUPDR
 ((
AT91_REG
 *) 0xFFFCC230)

1698 
	#AT91C_CH1_CPRDR
 ((
AT91_REG
 *) 0xFFFCC228)

1699 
	#AT91C_CH1_CMR
 ((
AT91_REG
 *) 0xFFFCC220)

1700 
	#AT91C_CH1_Re£rved
 ((
AT91_REG
 *) 0xFFFCC234)

1701 
	#AT91C_CH1_CCNTR
 ((
AT91_REG
 *) 0xFFFCC22C)

1702 
	#AT91C_CH1_CDTYR
 ((
AT91_REG
 *) 0xFFFCC224)

1704 
	#AT91C_CH0_CUPDR
 ((
AT91_REG
 *) 0xFFFCC210)

1705 
	#AT91C_CH0_CPRDR
 ((
AT91_REG
 *) 0xFFFCC208)

1706 
	#AT91C_CH0_CMR
 ((
AT91_REG
 *) 0xFFFCC200)

1707 
	#AT91C_CH0_Re£rved
 ((
AT91_REG
 *) 0xFFFCC214)

1708 
	#AT91C_CH0_CCNTR
 ((
AT91_REG
 *) 0xFFFCC20C)

1709 
	#AT91C_CH0_CDTYR
 ((
AT91_REG
 *) 0xFFFCC204)

1711 
	#AT91C_PWMC_VR
 ((
AT91_REG
 *) 0xFFFCC0FC)

1712 
	#AT91C_PWMC_ISR
 ((
AT91_REG
 *) 0xFFFCC01C)

1713 
	#AT91C_PWMC_IDR
 ((
AT91_REG
 *) 0xFFFCC014)

1714 
	#AT91C_PWMC_SR
 ((
AT91_REG
 *) 0xFFFCC00C)

1715 
	#AT91C_PWMC_ENA
 ((
AT91_REG
 *) 0xFFFCC004)

1716 
	#AT91C_PWMC_IMR
 ((
AT91_REG
 *) 0xFFFCC018)

1717 
	#AT91C_PWMC_MR
 ((
AT91_REG
 *) 0xFFFCC000)

1718 
	#AT91C_PWMC_DIS
 ((
AT91_REG
 *) 0xFFFCC008)

1719 
	#AT91C_PWMC_IER
 ((
AT91_REG
 *) 0xFFFCC010)

1721 
	#AT91C_UDP_ISR
 ((
AT91_REG
 *) 0xFFFB001C)

1722 
	#AT91C_UDP_IDR
 ((
AT91_REG
 *) 0xFFFB0014)

1723 
	#AT91C_UDP_GLBSTATE
 ((
AT91_REG
 *) 0xFFFB0004)

1724 
	#AT91C_UDP_FDR
 ((
AT91_REG
 *) 0xFFFB0050)

1725 
	#AT91C_UDP_CSR
 ((
AT91_REG
 *) 0xFFFB0030)

1726 
	#AT91C_UDP_RSTEP
 ((
AT91_REG
 *) 0xFFFB0028)

1727 
	#AT91C_UDP_ICR
 ((
AT91_REG
 *) 0xFFFB0020)

1728 
	#AT91C_UDP_IMR
 ((
AT91_REG
 *) 0xFFFB0018)

1729 
	#AT91C_UDP_IER
 ((
AT91_REG
 *) 0xFFFB0010)

1730 
	#AT91C_UDP_FADDR
 ((
AT91_REG
 *) 0xFFFB0008)

1731 
	#AT91C_UDP_NUM
 ((
AT91_REG
 *) 0xFFFB0000)

1732 

	)

1736 
	#AT91C_PIO_PA0
 (() 1 << 0)

1737 
	#AT91C_PA0_PWM0
 ((Ë
AT91C_PIO_PA0
)

1738 
	#AT91C_PA0_TIOA0
 ((Ë
AT91C_PIO_PA0
)

1739 
	#AT91C_PIO_PA1
 (() 1 << 1)

1740 
	#AT91C_PA1_PWM1
 ((Ë
AT91C_PIO_PA1
)

1741 
	#AT91C_PA1_TIOB0
 ((Ë
AT91C_PIO_PA1
)

1742 
	#AT91C_PIO_PA10
 (() 1 << 10)

1743 
	#AT91C_PA10_DTXD
 ((Ë
AT91C_PIO_PA10
)

1744 
	#AT91C_PA10_NPCS2
 ((Ë
AT91C_PIO_PA10
)

1745 
	#AT91C_PIO_PA11
 (() 1 << 11)

1746 
	#AT91C_PA11_NPCS0
 ((Ë
AT91C_PIO_PA11
)

1747 
	#AT91C_PA11_PWM0
 ((Ë
AT91C_PIO_PA11
)

1748 
	#AT91C_PIO_PA12
 (() 1 << 12)

1749 
	#AT91C_PA12_MISO
 ((Ë
AT91C_PIO_PA12
)

1750 
	#AT91C_PA12_PWM1
 ((Ë
AT91C_PIO_PA12
)

1751 
	#AT91C_PIO_PA13
 (() 1 << 13)

1752 
	#AT91C_PA13_MOSI
 ((Ë
AT91C_PIO_PA13
)

1753 
	#AT91C_PA13_PWM2
 ((Ë
AT91C_PIO_PA13
)

1754 
	#AT91C_PIO_PA14
 (() 1 << 14)

1755 
	#AT91C_PA14_SPCK
 ((Ë
AT91C_PIO_PA14
)

1756 
	#AT91C_PA14_PWM3
 ((Ë
AT91C_PIO_PA14
)

1757 
	#AT91C_PIO_PA15
 (() 1 << 15)

1758 
	#AT91C_PA15_TF
 ((Ë
AT91C_PIO_PA15
)

1759 
	#AT91C_PA15_TIOA1
 ((Ë
AT91C_PIO_PA15
)

1760 
	#AT91C_PIO_PA16
 (() 1 << 16)

1761 
	#AT91C_PA16_TK
 ((Ë
AT91C_PIO_PA16
)

1762 
	#AT91C_PA16_TIOB1
 ((Ë
AT91C_PIO_PA16
)

1763 
	#AT91C_PIO_PA17
 (() 1 << 17)

1764 
	#AT91C_PA17_TD
 ((Ë
AT91C_PIO_PA17
)

1765 
	#AT91C_PA17_PCK1
 ((Ë
AT91C_PIO_PA17
)

1766 
	#AT91C_PIO_PA18
 (() 1 << 18)

1767 
	#AT91C_PA18_RD
 ((Ë
AT91C_PIO_PA18
)

1768 
	#AT91C_PA18_PCK2
 ((Ë
AT91C_PIO_PA18
)

1769 
	#AT91C_PIO_PA19
 (() 1 << 19)

1770 
	#AT91C_PA19_RK
 ((Ë
AT91C_PIO_PA19
)

1771 
	#AT91C_PA19_FIQ
 ((Ë
AT91C_PIO_PA19
)

1772 
	#AT91C_PIO_PA2
 (() 1 << 2)

1773 
	#AT91C_PA2_PWM2
 ((Ë
AT91C_PIO_PA2
)

1774 
	#AT91C_PA2_SCK0
 ((Ë
AT91C_PIO_PA2
)

1775 
	#AT91C_PIO_PA20
 (() 1 << 20)

1776 
	#AT91C_PA20_RF
 ((Ë
AT91C_PIO_PA20
)

1777 
	#AT91C_PA20_IRQ0
 ((Ë
AT91C_PIO_PA20
)

1778 
	#AT91C_PIO_PA21
 (() 1 << 21)

1779 
	#AT91C_PA21_RXD1
 ((Ë
AT91C_PIO_PA21
)

1780 
	#AT91C_PA21_PCK1
 ((Ë
AT91C_PIO_PA21
)

1781 
	#AT91C_PIO_PA22
 (() 1 << 22)

1782 
	#AT91C_PA22_TXD1
 ((Ë
AT91C_PIO_PA22
)

1783 
	#AT91C_PA22_NPCS3
 ((Ë
AT91C_PIO_PA22
)

1784 
	#AT91C_PIO_PA23
 (() 1 << 23)

1785 
	#AT91C_PA23_SCK1
 ((Ë
AT91C_PIO_PA23
)

1786 
	#AT91C_PA23_PWM0
 ((Ë
AT91C_PIO_PA23
)

1787 
	#AT91C_PIO_PA24
 (() 1 << 24)

1788 
	#AT91C_PA24_RTS1
 ((Ë
AT91C_PIO_PA24
)

1789 
	#AT91C_PA24_PWM1
 ((Ë
AT91C_PIO_PA24
)

1790 
	#AT91C_PIO_PA25
 (() 1 << 25)

1791 
	#AT91C_PA25_CTS1
 ((Ë
AT91C_PIO_PA25
)

1792 
	#AT91C_PA25_PWM2
 ((Ë
AT91C_PIO_PA25
)

1793 
	#AT91C_PIO_PA26
 (() 1 << 26)

1794 
	#AT91C_PA26_DCD1
 ((Ë
AT91C_PIO_PA26
)

1795 
	#AT91C_PA26_TIOA2
 ((Ë
AT91C_PIO_PA26
)

1796 
	#AT91C_PIO_PA27
 (() 1 << 27)

1797 
	#AT91C_PA27_DTR1
 ((Ë
AT91C_PIO_PA27
)

1798 
	#AT91C_PA27_TIOB2
 ((Ë
AT91C_PIO_PA27
)

1799 
	#AT91C_PIO_PA28
 (() 1 << 28)

1800 
	#AT91C_PA28_DSR1
 ((Ë
AT91C_PIO_PA28
)

1801 
	#AT91C_PA28_TCLK1
 ((Ë
AT91C_PIO_PA28
)

1802 
	#AT91C_PIO_PA29
 (() 1 << 29)

1803 
	#AT91C_PA29_RI1
 ((Ë
AT91C_PIO_PA29
)

1804 
	#AT91C_PA29_TCLK2
 ((Ë
AT91C_PIO_PA29
)

1805 
	#AT91C_PIO_PA3
 (() 1 << 3)

1806 
	#AT91C_PA3_TWD
 ((Ë
AT91C_PIO_PA3
)

1807 
	#AT91C_PA3_NPCS3
 ((Ë
AT91C_PIO_PA3
)

1808 
	#AT91C_PIO_PA30
 (() 1 << 30)

1809 
	#AT91C_PA30_IRQ1
 ((Ë
AT91C_PIO_PA30
)

1810 
	#AT91C_PA30_NPCS2
 ((Ë
AT91C_PIO_PA30
)

1811 
	#AT91C_PIO_PA31
 (() 1 << 31)

1812 
	#AT91C_PA31_NPCS1
 ((Ë
AT91C_PIO_PA31
)

1813 
	#AT91C_PA31_PCK2
 ((Ë
AT91C_PIO_PA31
)

1814 
	#AT91C_PIO_PA4
 (() 1 << 4)

1815 
	#AT91C_PA4_TWCK
 ((Ë
AT91C_PIO_PA4
)

1816 
	#AT91C_PA4_TCLK0
 ((Ë
AT91C_PIO_PA4
)

1817 
	#AT91C_PIO_PA5
 (() 1 << 5)

1818 
	#AT91C_PA5_RXD0
 ((Ë
AT91C_PIO_PA5
)

1819 
	#AT91C_PA5_NPCS3
 ((Ë
AT91C_PIO_PA5
)

1820 
	#AT91C_PIO_PA6
 (() 1 << 6)

1821 
	#AT91C_PA6_TXD0
 ((Ë
AT91C_PIO_PA6
)

1822 
	#AT91C_PA6_PCK0
 ((Ë
AT91C_PIO_PA6
)

1823 
	#AT91C_PIO_PA7
 (() 1 << 7)

1824 
	#AT91C_PA7_RTS0
 ((Ë
AT91C_PIO_PA7
)

1825 
	#AT91C_PA7_PWM3
 ((Ë
AT91C_PIO_PA7
)

1826 
	#AT91C_PIO_PA8
 (() 1 << 8)

1827 
	#AT91C_PA8_CTS0
 ((Ë
AT91C_PIO_PA8
)

1828 
	#AT91C_PA8_ADTRG
 ((Ë
AT91C_PIO_PA8
)

1829 
	#AT91C_PIO_PA9
 (() 1 << 9)

1830 
	#AT91C_PA9_DRXD
 ((Ë
AT91C_PIO_PA9
)

1831 
	#AT91C_PA9_NPCS1
 ((Ë
AT91C_PIO_PA9
)

1832 

	)

1836 
	#AT91C_ID_FIQ
 (() 0)

1837 
	#AT91C_ID_SYS
 (() 1)

1838 
	#AT91C_ID_PIOA
 (() 2)

1839 
	#AT91C_ID_3_Re£rved
 (() 3)

1840 
	#AT91C_ID_ADC
 (() 4)

1841 
	#AT91C_ID_SPI
 (() 5)

1842 
	#AT91C_ID_US0
 (() 6)

1843 
	#AT91C_ID_US1
 (() 7)

1844 
	#AT91C_ID_SSC
 (() 8)

1845 
	#AT91C_ID_TWI
 (() 9)

1846 
	#AT91C_ID_PWMC
 (() 10)

1847 
	#AT91C_ID_UDP
 (() 11)

1848 
	#AT91C_ID_TC0
 (() 12)

1849 
	#AT91C_ID_TC1
 (() 13)

1850 
	#AT91C_ID_TC2
 (() 14)

1851 
	#AT91C_ID_15_Re£rved
 (() 15)

1852 
	#AT91C_ID_16_Re£rved
 (() 16)

1853 
	#AT91C_ID_17_Re£rved
 (() 17)

1854 
	#AT91C_ID_18_Re£rved
 (() 18)

1855 
	#AT91C_ID_19_Re£rved
 (() 19)

1856 
	#AT91C_ID_20_Re£rved
 (() 20)

1857 
	#AT91C_ID_21_Re£rved
 (() 21)

1858 
	#AT91C_ID_22_Re£rved
 (() 22)

1859 
	#AT91C_ID_23_Re£rved
 (() 23)

1860 
	#AT91C_ID_24_Re£rved
 (() 24)

1861 
	#AT91C_ID_25_Re£rved
 (() 25)

1862 
	#AT91C_ID_26_Re£rved
 (() 26)

1863 
	#AT91C_ID_27_Re£rved
 (() 27)

1864 
	#AT91C_ID_28_Re£rved
 (() 28)

1865 
	#AT91C_ID_29_Re£rved
 (() 29)

1866 
	#AT91C_ID_IRQ0
 (() 30)

1867 
	#AT91C_ID_IRQ1
 (() 31)

1868 

	)

1872 
	#AT91C_BASE_SYSC
 ((
AT91PS_SYSC
) 0xFFFFF000)

1873 
	#AT91C_BASE_AIC
 ((
AT91PS_AIC
) 0xFFFFF000)

1874 
	#AT91C_BASE_DBGU
 ((
AT91PS_DBGU
) 0xFFFFF200)

1875 
	#AT91C_BASE_PDC_DBGU
 ((
AT91PS_PDC
) 0xFFFFF300)

1876 
	#AT91C_BASE_PIOA
 ((
AT91PS_PIO
) 0xFFFFF400)

1877 
	#AT91C_BASE_CKGR
 ((
AT91PS_CKGR
) 0xFFFFFC20)

1878 
	#AT91C_BASE_PMC
 ((
AT91PS_PMC
) 0xFFFFFC00)

1879 
	#AT91C_BASE_RSTC
 ((
AT91PS_RSTC
) 0xFFFFFD00)

1880 
	#AT91C_BASE_RTTC
 ((
AT91PS_RTTC
) 0xFFFFFD20)

1881 
	#AT91C_BASE_PITC
 ((
AT91PS_PITC
) 0xFFFFFD30)

1882 
	#AT91C_BASE_WDTC
 ((
AT91PS_WDTC
) 0xFFFFFD40)

1883 
	#AT91C_BASE_MC
 ((
AT91PS_MC
) 0xFFFFFF00)

1884 
	#AT91C_BASE_PDC_SPI
 ((
AT91PS_PDC
) 0xFFFE0100)

1885 
	#AT91C_BASE_SPI
 ((
AT91PS_SPI
) 0xFFFE0000)

1886 
	#AT91C_BASE_PDC_ADC
 ((
AT91PS_PDC
) 0xFFFD8100)

1887 
	#AT91C_BASE_ADC
 ((
AT91PS_ADC
) 0xFFFD8000)

1888 
	#AT91C_BASE_PDC_SSC
 ((
AT91PS_PDC
) 0xFFFD4100)

1889 
	#AT91C_BASE_SSC
 ((
AT91PS_SSC
) 0xFFFD4000)

1890 
	#AT91C_BASE_PDC_US1
 ((
AT91PS_PDC
) 0xFFFC4100)

1891 
	#AT91C_BASE_US1
 ((
AT91PS_USART
) 0xFFFC4000)

1892 
	#AT91C_BASE_PDC_US0
 ((
AT91PS_PDC
) 0xFFFC0100)

1893 
	#AT91C_BASE_US0
 ((
AT91PS_USART
) 0xFFFC0000)

1894 
	#AT91C_BASE_TWI
 ((
AT91PS_TWI
) 0xFFFB8000)

1895 
	#AT91C_BASE_TC2
 ((
AT91PS_TC
) 0xFFFA0080)

1896 
	#AT91C_BASE_TC1
 ((
AT91PS_TC
) 0xFFFA0040)

1897 
	#AT91C_BASE_TC0
 ((
AT91PS_TC
) 0xFFFA0000)

1898 
	#AT91C_BASE_TCB
 ((
AT91PS_TCB
) 0xFFFA0000)

1899 
	#AT91C_BASE_PWMC_CH3
 ((
AT91PS_PWMC_CH
) 0xFFFCC260)

1900 
	#AT91C_BASE_PWMC_CH2
 ((
AT91PS_PWMC_CH
) 0xFFFCC240)

1901 
	#AT91C_BASE_PWMC_CH1
 ((
AT91PS_PWMC_CH
) 0xFFFCC220)

1902 
	#AT91C_BASE_PWMC_CH0
 ((
AT91PS_PWMC_CH
) 0xFFFCC200)

1903 
	#AT91C_BASE_PWMC
 ((
AT91PS_PWMC
) 0xFFFCC000)

1904 
	#AT91C_BASE_UDP
 ((
AT91PS_UDP
) 0xFFFB0000)

1905 

	)

1909 
	#AT91C_ISRAM
 ((*) 0x00200000)

1910 
	#AT91C_ISRAM_SIZE
 (() 0x00004000)

1911 
	#AT91C_IFLASH
 ((*) 0x00100000)

1912 
	#AT91C_IFLASH_SIZE
 (() 0x00010000)

1913 

	)

	@portable/IAR/AtmelSAM7S64/AT91SAM7S64_inc.h

38 
	#SYSC_AIC_SMR
 ( 0)

39 
	#SYSC_AIC_SVR
 (128)

40 
	#SYSC_AIC_IVR
 (256)

41 
	#SYSC_AIC_FVR
 (260)

42 
	#SYSC_AIC_ISR
 (264)

43 
	#SYSC_AIC_IPR
 (268)

44 
	#SYSC_AIC_IMR
 (272)

45 
	#SYSC_AIC_CISR
 (276)

46 
	#SYSC_AIC_IECR
 (288)

47 
	#SYSC_AIC_IDCR
 (292)

48 
	#SYSC_AIC_ICCR
 (296)

49 
	#SYSC_AIC_ISCR
 (300)

50 
	#SYSC_AIC_EOICR
 (304)

51 
	#SYSC_AIC_SPU
 (308)

52 
	#SYSC_AIC_DCR
 (312)

53 
	#SYSC_AIC_FFER
 (320)

54 
	#SYSC_AIC_FFDR
 (324)

55 
	#SYSC_AIC_FFSR
 (328)

56 
	#SYSC_DBGU_CR
 (512)

57 
	#SYSC_DBGU_MR
 (516)

58 
	#SYSC_DBGU_IER
 (520)

59 
	#SYSC_DBGU_IDR
 (524)

60 
	#SYSC_DBGU_IMR
 (528)

61 
	#SYSC_DBGU_CSR
 (532)

62 
	#SYSC_DBGU_RHR
 (536)

63 
	#SYSC_DBGU_THR
 (540)

64 
	#SYSC_DBGU_BRGR
 (544)

65 
	#SYSC_DBGU_C1R
 (576)

66 
	#SYSC_DBGU_C2R
 (580)

67 
	#SYSC_DBGU_FNTR
 (584)

68 
	#SYSC_DBGU_RPR
 (768)

69 
	#SYSC_DBGU_RCR
 (772)

70 
	#SYSC_DBGU_TPR
 (776)

71 
	#SYSC_DBGU_TCR
 (780)

72 
	#SYSC_DBGU_RNPR
 (784)

73 
	#SYSC_DBGU_RNCR
 (788)

74 
	#SYSC_DBGU_TNPR
 (792)

75 
	#SYSC_DBGU_TNCR
 (796)

76 
	#SYSC_DBGU_PTCR
 (800)

77 
	#SYSC_DBGU_PTSR
 (804)

78 
	#SYSC_PIOA_PER
 (1024)

79 
	#SYSC_PIOA_PDR
 (1028)

80 
	#SYSC_PIOA_PSR
 (1032)

81 
	#SYSC_PIOA_OER
 (1040)

82 
	#SYSC_PIOA_ODR
 (1044)

83 
	#SYSC_PIOA_OSR
 (1048)

84 
	#SYSC_PIOA_IFER
 (1056)

85 
	#SYSC_PIOA_IFDR
 (1060)

86 
	#SYSC_PIOA_IFSR
 (1064)

87 
	#SYSC_PIOA_SODR
 (1072)

88 
	#SYSC_PIOA_CODR
 (1076)

89 
	#SYSC_PIOA_ODSR
 (1080)

90 
	#SYSC_PIOA_PDSR
 (1084)

91 
	#SYSC_PIOA_IER
 (1088)

92 
	#SYSC_PIOA_IDR
 (1092)

93 
	#SYSC_PIOA_IMR
 (1096)

94 
	#SYSC_PIOA_ISR
 (1100)

95 
	#SYSC_PIOA_MDER
 (1104)

96 
	#SYSC_PIOA_MDDR
 (1108)

97 
	#SYSC_PIOA_MDSR
 (1112)

98 
	#SYSC_PIOA_PPUDR
 (1120)

99 
	#SYSC_PIOA_PPUER
 (1124)

100 
	#SYSC_PIOA_PPUSR
 (1128)

101 
	#SYSC_PIOA_ASR
 (1136)

102 
	#SYSC_PIOA_BSR
 (1140)

103 
	#SYSC_PIOA_ABSR
 (1144)

104 
	#SYSC_PIOA_OWER
 (1184)

105 
	#SYSC_PIOA_OWDR
 (1188)

106 
	#SYSC_PIOA_OWSR
 (1192)

107 
	#SYSC_PMC_SCER
 (3072)

108 
	#SYSC_PMC_SCDR
 (3076)

109 
	#SYSC_PMC_SCSR
 (3080)

110 
	#SYSC_PMC_PCER
 (3088)

111 
	#SYSC_PMC_PCDR
 (3092)

112 
	#SYSC_PMC_PCSR
 (3096)

113 
	#SYSC_PMC_MOR
 (3104)

114 
	#SYSC_PMC_MCFR
 (3108)

115 
	#SYSC_PMC_PLLR
 (3116)

116 
	#SYSC_PMC_MCKR
 (3120)

117 
	#SYSC_PMC_PCKR
 (3136)

118 
	#SYSC_PMC_IER
 (3168)

119 
	#SYSC_PMC_IDR
 (3172)

120 
	#SYSC_PMC_SR
 (3176)

121 
	#SYSC_PMC_IMR
 (3180)

122 
	#SYSC_RSTC_RCR
 (3328)

123 
	#SYSC_RSTC_RSR
 (3332)

124 
	#SYSC_RSTC_RMR
 (3336)

125 
	#SYSC_RTTC_RTMR
 (3360)

126 
	#SYSC_RTTC_RTAR
 (3364)

127 
	#SYSC_RTTC_RTVR
 (3368)

128 
	#SYSC_RTTC_RTSR
 (3372)

129 
	#SYSC_PITC_PIMR
 (3376)

130 
	#SYSC_PITC_PISR
 (3380)

131 
	#SYSC_PITC_PIVR
 (3384)

132 
	#SYSC_PITC_PIIR
 (3388)

133 
	#SYSC_WDTC_WDCR
 (3392)

134 
	#SYSC_WDTC_WDMR
 (3396)

135 
	#SYSC_WDTC_WDSR
 (3400)

136 
	#SYSC_SYSC_VRPM
 (3424)

138 
	#AT91C_SYSC_PSTDBY
 (0x1 << 0)

139 

	)

144 
	#AIC_SMR
 ( 0)

145 
	#AIC_SVR
 (128)

146 
	#AIC_IVR
 (256)

147 
	#AIC_FVR
 (260)

148 
	#AIC_ISR
 (264)

149 
	#AIC_IPR
 (268)

150 
	#AIC_IMR
 (272)

151 
	#AIC_CISR
 (276)

152 
	#AIC_IECR
 (288)

153 
	#AIC_IDCR
 (292)

154 
	#AIC_ICCR
 (296)

155 
	#AIC_ISCR
 (300)

156 
	#AIC_EOICR
 (304)

157 
	#AIC_SPU
 (308)

158 
	#AIC_DCR
 (312)

159 
	#AIC_FFER
 (320)

160 
	#AIC_FFDR
 (324)

161 
	#AIC_FFSR
 (328)

163 
	#AT91C_AIC_PRIOR
 (0x7 << 0)

164 
	#AT91C_AIC_PRIOR_LOWEST
 (0x0)

165 
	#AT91C_AIC_PRIOR_HIGHEST
 (0x7)

166 
	#AT91C_AIC_SRCTYPE
 (0x3 << 5)

167 
	#AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE
 (0x0 << 5)

168 
	#AT91C_AIC_SRCTYPE_INT_EDGE_TRIGGERED
 (0x1 << 5)

169 
	#AT91C_AIC_SRCTYPE_EXT_HIGH_LEVEL
 (0x2 << 5)

170 
	#AT91C_AIC_SRCTYPE_EXT_POSITIVE_EDGE
 (0x3 << 5)

172 
	#AT91C_AIC_NFIQ
 (0x1 << 0)

173 
	#AT91C_AIC_NIRQ
 (0x1 << 1)

175 
	#AT91C_AIC_DCR_PROT
 (0x1 << 0)

176 
	#AT91C_AIC_DCR_GMSK
 (0x1 << 1)

177 

	)

182 
	#DBGU_CR
 ( 0)

183 
	#DBGU_MR
 ( 4)

184 
	#DBGU_IER
 ( 8)

185 
	#DBGU_IDR
 (12)

186 
	#DBGU_IMR
 (16)

187 
	#DBGU_CSR
 (20)

188 
	#DBGU_RHR
 (24)

189 
	#DBGU_THR
 (28)

190 
	#DBGU_BRGR
 (32)

191 
	#DBGU_C1R
 (64)

192 
	#DBGU_C2R
 (68)

193 
	#DBGU_FNTR
 (72)

194 
	#DBGU_RPR
 (256)

195 
	#DBGU_RCR
 (260)

196 
	#DBGU_TPR
 (264)

197 
	#DBGU_TCR
 (268)

198 
	#DBGU_RNPR
 (272)

199 
	#DBGU_RNCR
 (276)

200 
	#DBGU_TNPR
 (280)

201 
	#DBGU_TNCR
 (284)

202 
	#DBGU_PTCR
 (288)

203 
	#DBGU_PTSR
 (292)

205 
	#AT91C_US_RSTRX
 (0x1 << 2)

206 
	#AT91C_US_RSTTX
 (0x1 << 3)

207 
	#AT91C_US_RXEN
 (0x1 << 4)

208 
	#AT91C_US_RXDIS
 (0x1 << 5)

209 
	#AT91C_US_TXEN
 (0x1 << 6)

210 
	#AT91C_US_TXDIS
 (0x1 << 7)

212 
	#AT91C_US_PAR
 (0x7 << 9)

213 
	#AT91C_US_PAR_EVEN
 (0x0 << 9)

214 
	#AT91C_US_PAR_ODD
 (0x1 << 9)

215 
	#AT91C_US_PAR_SPACE
 (0x2 << 9)

216 
	#AT91C_US_PAR_MARK
 (0x3 << 9)

217 
	#AT91C_US_PAR_NONE
 (0x4 << 9)

218 
	#AT91C_US_PAR_MULTI_DROP
 (0x6 << 9)

219 
	#AT91C_US_CHMODE
 (0x3 << 14)

220 
	#AT91C_US_CHMODE_NORMAL
 (0x0 << 14)

221 
	#AT91C_US_CHMODE_AUTO
 (0x1 << 14)

222 
	#AT91C_US_CHMODE_LOCAL
 (0x2 << 14)

223 
	#AT91C_US_CHMODE_REMOTE
 (0x3 << 14)

225 
	#AT91C_US_RXRDY
 (0x1 << 0)

226 
	#AT91C_US_TXRDY
 (0x1 << 1)

227 
	#AT91C_US_ENDRX
 (0x1 << 3)

228 
	#AT91C_US_ENDTX
 (0x1 << 4)

229 
	#AT91C_US_OVRE
 (0x1 << 5)

230 
	#AT91C_US_FRAME
 (0x1 << 6)

231 
	#AT91C_US_PARE
 (0x1 << 7)

232 
	#AT91C_US_TXEMPTY
 (0x1 << 9)

233 
	#AT91C_US_TXBUFE
 (0x1 << 11)

234 
	#AT91C_US_RXBUFF
 (0x1 << 12)

235 
	#AT91C_US_COMM_TX
 (0x1 << 30)

236 
	#AT91C_US_COMM_RX
 (0x1 << 31)

241 
	#AT91C_US_FORCE_NTRST
 (0x1 << 0)

242 

	)

247 
	#PDC_RPR
 ( 0)

248 
	#PDC_RCR
 ( 4)

249 
	#PDC_TPR
 ( 8)

250 
	#PDC_TCR
 (12)

251 
	#PDC_RNPR
 (16)

252 
	#PDC_RNCR
 (20)

253 
	#PDC_TNPR
 (24)

254 
	#PDC_TNCR
 (28)

255 
	#PDC_PTCR
 (32)

256 
	#PDC_PTSR
 (36)

258 
	#AT91C_PDC_RXTEN
 (0x1 << 0)

259 
	#AT91C_PDC_RXTDIS
 (0x1 << 1)

260 
	#AT91C_PDC_TXTEN
 (0x1 << 8)

261 
	#AT91C_PDC_TXTDIS
 (0x1 << 9)

263 

	)

268 
	#PIO_PER
 ( 0)

269 
	#PIO_PDR
 ( 4)

270 
	#PIO_PSR
 ( 8)

271 
	#PIO_OER
 (16)

272 
	#PIO_ODR
 (20)

273 
	#PIO_OSR
 (24)

274 
	#PIO_IFER
 (32)

275 
	#PIO_IFDR
 (36)

276 
	#PIO_IFSR
 (40)

277 
	#PIO_SODR
 (48)

278 
	#PIO_CODR
 (52)

279 
	#PIO_ODSR
 (56)

280 
	#PIO_PDSR
 (60)

281 
	#PIO_IER
 (64)

282 
	#PIO_IDR
 (68)

283 
	#PIO_IMR
 (72)

284 
	#PIO_ISR
 (76)

285 
	#PIO_MDER
 (80)

286 
	#PIO_MDDR
 (84)

287 
	#PIO_MDSR
 (88)

288 
	#PIO_PPUDR
 (96)

289 
	#PIO_PPUER
 (100)

290 
	#PIO_PPUSR
 (104)

291 
	#PIO_ASR
 (112)

292 
	#PIO_BSR
 (116)

293 
	#PIO_ABSR
 (120)

294 
	#PIO_OWER
 (160)

295 
	#PIO_OWDR
 (164)

296 
	#PIO_OWSR
 (168)

297 

	)

302 
	#CKGR_MOR
 ( 0)

303 
	#CKGR_MCFR
 ( 4)

304 
	#CKGR_PLLR
 (12)

306 
	#AT91C_CKGR_MOSCEN
 (0x1 << 0)

307 
	#AT91C_CKGR_OSCBYPASS
 (0x1 << 1)

308 
	#AT91C_CKGR_OSCOUNT
 (0xFF << 8)

310 
	#AT91C_CKGR_MAINF
 (0xFFFF << 0)

311 
	#AT91C_CKGR_MAINRDY
 (0x1 << 16)

313 
	#AT91C_CKGR_DIV
 (0xFF << 0)

314 
	#AT91C_CKGR_DIV_0
 (0x0)

315 
	#AT91C_CKGR_DIV_BYPASS
 (0x1)

316 
	#AT91C_CKGR_PLLCOUNT
 (0x3F << 8)

317 
	#AT91C_CKGR_OUT
 (0x3 << 14)

318 
	#AT91C_CKGR_OUT_0
 (0x0 << 14)

319 
	#AT91C_CKGR_OUT_1
 (0x1 << 14)

320 
	#AT91C_CKGR_OUT_2
 (0x2 << 14)

321 
	#AT91C_CKGR_OUT_3
 (0x3 << 14)

322 
	#AT91C_CKGR_MUL
 (0x7FF << 16)

323 
	#AT91C_CKGR_USBDIV
 (0x3 << 28)

324 
	#AT91C_CKGR_USBDIV_0
 (0x0 << 28)

325 
	#AT91C_CKGR_USBDIV_1
 (0x1 << 28)

326 
	#AT91C_CKGR_USBDIV_2
 (0x2 << 28)

327 

	)

332 
	#PMC_SCER
 ( 0)

333 
	#PMC_SCDR
 ( 4)

334 
	#PMC_SCSR
 ( 8)

335 
	#PMC_PCER
 (16)

336 
	#PMC_PCDR
 (20)

337 
	#PMC_PCSR
 (24)

338 
	#PMC_MOR
 (32)

339 
	#PMC_MCFR
 (36)

340 
	#PMC_PLLR
 (44)

341 
	#PMC_MCKR
 (48)

342 
	#PMC_PCKR
 (64)

343 
	#PMC_IER
 (96)

344 
	#PMC_IDR
 (100)

345 
	#PMC_SR
 (104)

346 
	#PMC_IMR
 (108)

348 
	#AT91C_PMC_PCK
 (0x1 << 0)

349 
	#AT91C_PMC_UDP
 (0x1 << 7)

350 
	#AT91C_PMC_PCK0
 (0x1 << 8)

351 
	#AT91C_PMC_PCK1
 (0x1 << 9)

352 
	#AT91C_PMC_PCK2
 (0x1 << 10)

353 
	#AT91C_PMC_PCK3
 (0x1 << 11)

360 
	#AT91C_PMC_CSS
 (0x3 << 0)

361 
	#AT91C_PMC_CSS_SLOW_CLK
 (0x0)

362 
	#AT91C_PMC_CSS_MAIN_CLK
 (0x1)

363 
	#AT91C_PMC_CSS_PLL_CLK
 (0x3)

364 
	#AT91C_PMC_PRES
 (0x7 << 2)

365 
	#AT91C_PMC_PRES_CLK
 (0x0 << 2)

366 
	#AT91C_PMC_PRES_CLK_2
 (0x1 << 2)

367 
	#AT91C_PMC_PRES_CLK_4
 (0x2 << 2)

368 
	#AT91C_PMC_PRES_CLK_8
 (0x3 << 2)

369 
	#AT91C_PMC_PRES_CLK_16
 (0x4 << 2)

370 
	#AT91C_PMC_PRES_CLK_32
 (0x5 << 2)

371 
	#AT91C_PMC_PRES_CLK_64
 (0x6 << 2)

374 
	#AT91C_PMC_MOSCS
 (0x1 << 0)

375 
	#AT91C_PMC_LOCK
 (0x1 << 2)

376 
	#AT91C_PMC_MCKRDY
 (0x1 << 3)

377 
	#AT91C_PMC_PCK0RDY
 (0x1 << 8)

378 
	#AT91C_PMC_PCK1RDY
 (0x1 << 9)

379 
	#AT91C_PMC_PCK2RDY
 (0x1 << 10)

380 
	#AT91C_PMC_PCK3RDY
 (0x1 << 11)

384 

	)

389 
	#RSTC_RCR
 ( 0)

390 
	#RSTC_RSR
 ( 4)

391 
	#RSTC_RMR
 ( 8)

393 
	#AT91C_SYSC_PROCRST
 (0x1 << 0)

394 
	#AT91C_SYSC_ICERST
 (0x1 << 1)

395 
	#AT91C_SYSC_PERRST
 (0x1 << 2)

396 
	#AT91C_SYSC_EXTRST
 (0x1 << 3)

397 
	#AT91C_SYSC_KEY
 (0xFF << 24)

399 
	#AT91C_SYSC_URSTS
 (0x1 << 0)

400 
	#AT91C_SYSC_BODSTS
 (0x1 << 1)

401 
	#AT91C_SYSC_RSTTYP
 (0x7 << 8)

402 
	#AT91C_SYSC_RSTTYP_POWERUP
 (0x0 << 8)

403 
	#AT91C_SYSC_RSTTYP_WATCHDOG
 (0x2 << 8)

404 
	#AT91C_SYSC_RSTTYP_SOFTWARE
 (0x3 << 8)

405 
	#AT91C_SYSC_RSTTYP_USER
 (0x4 << 8)

406 
	#AT91C_SYSC_RSTTYP_BROWNOUT
 (0x5 << 8)

407 
	#AT91C_SYSC_NRSTL
 (0x1 << 16)

408 
	#AT91C_SYSC_SRCMP
 (0x1 << 17)

410 
	#AT91C_SYSC_URSTEN
 (0x1 << 0)

411 
	#AT91C_SYSC_URSTIEN
 (0x1 << 4)

412 
	#AT91C_SYSC_ERSTL
 (0xF << 8)

413 
	#AT91C_SYSC_BODIEN
 (0x1 << 16)

414 

	)

419 
	#RTTC_RTMR
 ( 0)

420 
	#RTTC_RTAR
 ( 4)

421 
	#RTTC_RTVR
 ( 8)

422 
	#RTTC_RTSR
 (12)

424 
	#AT91C_SYSC_RTPRES
 (0xFFFF << 0)

425 
	#AT91C_SYSC_ALMIEN
 (0x1 << 16)

426 
	#AT91C_SYSC_RTTINCIEN
 (0x1 << 17)

427 
	#AT91C_SYSC_RTTRST
 (0x1 << 18)

429 
	#AT91C_SYSC_ALMV
 (0x0 << 0)

431 
	#AT91C_SYSC_CRTV
 (0x0 << 0)

433 
	#AT91C_SYSC_ALMS
 (0x1 << 0)

434 
	#AT91C_SYSC_RTTINC
 (0x1 << 1)

435 

	)

440 
	#PITC_PIMR
 ( 0)

441 
	#PITC_PISR
 ( 4)

442 
	#PITC_PIVR
 ( 8)

443 
	#PITC_PIIR
 (12)

445 
	#AT91C_SYSC_PIV
 (0xFFFFF << 0)

446 
	#AT91C_SYSC_PITEN
 (0x1 << 24)

447 
	#AT91C_SYSC_PITIEN
 (0x1 << 25)

449 
	#AT91C_SYSC_PITS
 (0x1 << 0)

451 
	#AT91C_SYSC_CPIV
 (0xFFFFF << 0)

452 
	#AT91C_SYSC_PICNT
 (0xFFF << 20)

454 

	)

459 
	#WDTC_WDCR
 ( 0)

460 
	#WDTC_WDMR
 ( 4)

461 
	#WDTC_WDSR
 ( 8)

463 
	#AT91C_SYSC_WDRSTT
 (0x1 << 0)

465 
	#AT91C_SYSC_WDV
 (0xFFF << 0)

466 
	#AT91C_SYSC_WDFIEN
 (0x1 << 12)

467 
	#AT91C_SYSC_WDRSTEN
 (0x1 << 13)

468 
	#AT91C_SYSC_WDRPROC
 (0x1 << 14)

469 
	#AT91C_SYSC_WDDIS
 (0x1 << 15)

470 
	#AT91C_SYSC_WDD
 (0xFFF << 16)

471 
	#AT91C_SYSC_WDDBGHLT
 (0x1 << 28)

472 
	#AT91C_SYSC_WDIDLEHLT
 (0x1 << 29)

474 
	#AT91C_SYSC_WDUNF
 (0x1 << 0)

475 
	#AT91C_SYSC_WDERR
 (0x1 << 1)

476 

	)

481 
	#MC_RCR
 ( 0)

482 
	#MC_ASR
 ( 4)

483 
	#MC_AASR
 ( 8)

484 
	#MC_FMR
 (96)

485 
	#MC_FCR
 (100)

486 
	#MC_FSR
 (104)

488 
	#AT91C_MC_RCB
 (0x1 << 0)

490 
	#AT91C_MC_UNDADD
 (0x1 << 0)

491 
	#AT91C_MC_MISADD
 (0x1 << 1)

492 
	#AT91C_MC_ABTSZ
 (0x3 << 8)

493 
	#AT91C_MC_ABTSZ_BYTE
 (0x0 << 8)

494 
	#AT91C_MC_ABTSZ_HWORD
 (0x1 << 8)

495 
	#AT91C_MC_ABTSZ_WORD
 (0x2 << 8)

496 
	#AT91C_MC_ABTTYP
 (0x3 << 10)

497 
	#AT91C_MC_ABTTYP_DATAR
 (0x0 << 10)

498 
	#AT91C_MC_ABTTYP_DATAW
 (0x1 << 10)

499 
	#AT91C_MC_ABTTYP_FETCH
 (0x2 << 10)

500 
	#AT91C_MC_MST0
 (0x1 << 16)

501 
	#AT91C_MC_MST1
 (0x1 << 17)

502 
	#AT91C_MC_SVMST0
 (0x1 << 24)

503 
	#AT91C_MC_SVMST1
 (0x1 << 25)

505 
	#AT91C_MC_FRDY
 (0x1 << 0)

506 
	#AT91C_MC_LOCKE
 (0x1 << 2)

507 
	#AT91C_MC_PROGE
 (0x1 << 3)

508 
	#AT91C_MC_NEBP
 (0x1 << 7)

509 
	#AT91C_MC_FWS
 (0x3 << 8)

510 
	#AT91C_MC_FWS_0FWS
 (0x0 << 8)

511 
	#AT91C_MC_FWS_1FWS
 (0x1 << 8)

512 
	#AT91C_MC_FWS_2FWS
 (0x2 << 8)

513 
	#AT91C_MC_FWS_3FWS
 (0x3 << 8)

514 
	#AT91C_MC_FMCN
 (0xFF << 16)

516 
	#AT91C_MC_FCMD
 (0xF << 0)

517 
	#AT91C_MC_FCMD_START_PROG
 (0x1)

518 
	#AT91C_MC_FCMD_LOCK
 (0x2)

519 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (0x3)

520 
	#AT91C_MC_FCMD_UNLOCK
 (0x4)

521 
	#AT91C_MC_FCMD_ERASE_ALL
 (0x8)

522 
	#AT91C_MC_FCMD_SET_GP_NVM
 (0xB)

523 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (0xD)

524 
	#AT91C_MC_FCMD_SET_SECURITY
 (0xF)

525 
	#AT91C_MC_PAGEN
 (0x3FF << 8)

526 
	#AT91C_MC_KEY
 (0xFF << 24)

528 
	#AT91C_MC_SECURITY
 (0x1 << 4)

529 
	#AT91C_MC_GPNVM0
 (0x1 << 8)

530 
	#AT91C_MC_GPNVM1
 (0x1 << 9)

531 
	#AT91C_MC_GPNVM2
 (0x1 << 10)

532 
	#AT91C_MC_GPNVM3
 (0x1 << 11)

533 
	#AT91C_MC_GPNVM4
 (0x1 << 12)

534 
	#AT91C_MC_GPNVM5
 (0x1 << 13)

535 
	#AT91C_MC_GPNVM6
 (0x1 << 14)

536 
	#AT91C_MC_GPNVM7
 (0x1 << 15)

537 
	#AT91C_MC_LOCKS0
 (0x1 << 16)

538 
	#AT91C_MC_LOCKS1
 (0x1 << 17)

539 
	#AT91C_MC_LOCKS2
 (0x1 << 18)

540 
	#AT91C_MC_LOCKS3
 (0x1 << 19)

541 
	#AT91C_MC_LOCKS4
 (0x1 << 20)

542 
	#AT91C_MC_LOCKS5
 (0x1 << 21)

543 
	#AT91C_MC_LOCKS6
 (0x1 << 22)

544 
	#AT91C_MC_LOCKS7
 (0x1 << 23)

545 
	#AT91C_MC_LOCKS8
 (0x1 << 24)

546 
	#AT91C_MC_LOCKS9
 (0x1 << 25)

547 
	#AT91C_MC_LOCKS10
 (0x1 << 26)

548 
	#AT91C_MC_LOCKS11
 (0x1 << 27)

549 
	#AT91C_MC_LOCKS12
 (0x1 << 28)

550 
	#AT91C_MC_LOCKS13
 (0x1 << 29)

551 
	#AT91C_MC_LOCKS14
 (0x1 << 30)

552 
	#AT91C_MC_LOCKS15
 (0x1 << 31)

553 

	)

558 
	#SPI_CR
 ( 0)

559 
	#SPI_MR
 ( 4)

560 
	#SPI_RDR
 ( 8)

561 
	#SPI_TDR
 (12)

562 
	#SPI_SR
 (16)

563 
	#SPI_IER
 (20)

564 
	#SPI_IDR
 (24)

565 
	#SPI_IMR
 (28)

566 
	#SPI_CSR
 (48)

567 
	#SPI_RPR
 (256)

568 
	#SPI_RCR
 (260)

569 
	#SPI_TPR
 (264)

570 
	#SPI_TCR
 (268)

571 
	#SPI_RNPR
 (272)

572 
	#SPI_RNCR
 (276)

573 
	#SPI_TNPR
 (280)

574 
	#SPI_TNCR
 (284)

575 
	#SPI_PTCR
 (288)

576 
	#SPI_PTSR
 (292)

578 
	#AT91C_SPI_SPIEN
 (0x1 << 0)

579 
	#AT91C_SPI_SPIDIS
 (0x1 << 1)

580 
	#AT91C_SPI_SWRST
 (0x1 << 7)

581 
	#AT91C_SPI_LASTXFER
 (0x1 << 24)

583 
	#AT91C_SPI_MSTR
 (0x1 << 0)

584 
	#AT91C_SPI_PS
 (0x1 << 1)

585 
	#AT91C_SPI_PS_FIXED
 (0x0 << 1)

586 
	#AT91C_SPI_PS_VARIABLE
 (0x1 << 1)

587 
	#AT91C_SPI_PCSDEC
 (0x1 << 2)

588 
	#AT91C_SPI_FDIV
 (0x1 << 3)

589 
	#AT91C_SPI_MODFDIS
 (0x1 << 4)

590 
	#AT91C_SPI_LLB
 (0x1 << 7)

591 
	#AT91C_SPI_PCS
 (0xF << 16)

592 
	#AT91C_SPI_DLYBCS
 (0xFF << 24)

594 
	#AT91C_SPI_RD
 (0xFFFF << 0)

595 
	#AT91C_SPI_RPCS
 (0xF << 16)

597 
	#AT91C_SPI_TD
 (0xFFFF << 0)

598 
	#AT91C_SPI_TPCS
 (0xF << 16)

600 
	#AT91C_SPI_RDRF
 (0x1 << 0)

601 
	#AT91C_SPI_TDRE
 (0x1 << 1)

602 
	#AT91C_SPI_MODF
 (0x1 << 2)

603 
	#AT91C_SPI_OVRES
 (0x1 << 3)

604 
	#AT91C_SPI_ENDRX
 (0x1 << 4)

605 
	#AT91C_SPI_ENDTX
 (0x1 << 5)

606 
	#AT91C_SPI_RXBUFF
 (0x1 << 6)

607 
	#AT91C_SPI_TXBUFE
 (0x1 << 7)

608 
	#AT91C_SPI_NSSR
 (0x1 << 8)

609 
	#AT91C_SPI_TXEMPTY
 (0x1 << 9)

610 
	#AT91C_SPI_SPIENS
 (0x1 << 16)

615 
	#AT91C_SPI_CPOL
 (0x1 << 0)

616 
	#AT91C_SPI_NCPHA
 (0x1 << 1)

617 
	#AT91C_SPI_CSAAT
 (0x1 << 2)

618 
	#AT91C_SPI_BITS
 (0xF << 4)

619 
	#AT91C_SPI_BITS_8
 (0x0 << 4)

620 
	#AT91C_SPI_BITS_9
 (0x1 << 4)

621 
	#AT91C_SPI_BITS_10
 (0x2 << 4)

622 
	#AT91C_SPI_BITS_11
 (0x3 << 4)

623 
	#AT91C_SPI_BITS_12
 (0x4 << 4)

624 
	#AT91C_SPI_BITS_13
 (0x5 << 4)

625 
	#AT91C_SPI_BITS_14
 (0x6 << 4)

626 
	#AT91C_SPI_BITS_15
 (0x7 << 4)

627 
	#AT91C_SPI_BITS_16
 (0x8 << 4)

628 
	#AT91C_SPI_SCBR
 (0xFF << 8)

629 
	#AT91C_SPI_DLYBS
 (0xFF << 16)

630 
	#AT91C_SPI_DLYBCT
 (0xFF << 24)

631 

	)

636 
	#ADC_CR
 ( 0)

637 
	#ADC_MR
 ( 4)

638 
	#ADC_CHER
 (16)

639 
	#ADC_CHDR
 (20)

640 
	#ADC_CHSR
 (24)

641 
	#ADC_SR
 (28)

642 
	#ADC_LCDR
 (32)

643 
	#ADC_IER
 (36)

644 
	#ADC_IDR
 (40)

645 
	#ADC_IMR
 (44)

646 
	#ADC_CDR0
 (48)

647 
	#ADC_CDR1
 (52)

648 
	#ADC_CDR2
 (56)

649 
	#ADC_CDR3
 (60)

650 
	#ADC_CDR4
 (64)

651 
	#ADC_CDR5
 (68)

652 
	#ADC_CDR6
 (72)

653 
	#ADC_CDR7
 (76)

654 
	#ADC_RPR
 (256)

655 
	#ADC_RCR
 (260)

656 
	#ADC_TPR
 (264)

657 
	#ADC_TCR
 (268)

658 
	#ADC_RNPR
 (272)

659 
	#ADC_RNCR
 (276)

660 
	#ADC_TNPR
 (280)

661 
	#ADC_TNCR
 (284)

662 
	#ADC_PTCR
 (288)

663 
	#ADC_PTSR
 (292)

665 
	#AT91C_ADC_SWRST
 (0x1 << 0)

666 
	#AT91C_ADC_START
 (0x1 << 1)

668 
	#AT91C_ADC_TRGEN
 (0x1 << 0)

669 
	#AT91C_ADC_TRGEN_DIS
 (0x0)

670 
	#AT91C_ADC_TRGEN_EN
 (0x1)

671 
	#AT91C_ADC_TRGSEL
 (0x7 << 1)

672 
	#AT91C_ADC_TRGSEL_TIOA0
 (0x0 << 1)

673 
	#AT91C_ADC_TRGSEL_TIOA1
 (0x1 << 1)

674 
	#AT91C_ADC_TRGSEL_TIOA2
 (0x2 << 1)

675 
	#AT91C_ADC_TRGSEL_TIOA3
 (0x3 << 1)

676 
	#AT91C_ADC_TRGSEL_TIOA4
 (0x4 << 1)

677 
	#AT91C_ADC_TRGSEL_TIOA5
 (0x5 << 1)

678 
	#AT91C_ADC_TRGSEL_EXT
 (0x6 << 1)

679 
	#AT91C_ADC_LOWRES
 (0x1 << 4)

680 
	#AT91C_ADC_LOWRES_10_BIT
 (0x0 << 4)

681 
	#AT91C_ADC_LOWRES_8_BIT
 (0x1 << 4)

682 
	#AT91C_ADC_SLEEP
 (0x1 << 5)

683 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (0x0 << 5)

684 
	#AT91C_ADC_SLEEP_MODE
 (0x1 << 5)

685 
	#AT91C_ADC_PRESCAL
 (0x3F << 8)

686 
	#AT91C_ADC_STARTUP
 (0x1F << 16)

687 
	#AT91C_ADC_SHTIM
 (0xF << 24)

689 
	#AT91C_ADC_CH0
 (0x1 << 0)

690 
	#AT91C_ADC_CH1
 (0x1 << 1)

691 
	#AT91C_ADC_CH2
 (0x1 << 2)

692 
	#AT91C_ADC_CH3
 (0x1 << 3)

693 
	#AT91C_ADC_CH4
 (0x1 << 4)

694 
	#AT91C_ADC_CH5
 (0x1 << 5)

695 
	#AT91C_ADC_CH6
 (0x1 << 6)

696 
	#AT91C_ADC_CH7
 (0x1 << 7)

700 
	#AT91C_ADC_EOC0
 (0x1 << 0)

701 
	#AT91C_ADC_EOC1
 (0x1 << 1)

702 
	#AT91C_ADC_EOC2
 (0x1 << 2)

703 
	#AT91C_ADC_EOC3
 (0x1 << 3)

704 
	#AT91C_ADC_EOC4
 (0x1 << 4)

705 
	#AT91C_ADC_EOC5
 (0x1 << 5)

706 
	#AT91C_ADC_EOC6
 (0x1 << 6)

707 
	#AT91C_ADC_EOC7
 (0x1 << 7)

708 
	#AT91C_ADC_OVRE0
 (0x1 << 8)

709 
	#AT91C_ADC_OVRE1
 (0x1 << 9)

710 
	#AT91C_ADC_OVRE2
 (0x1 << 10)

711 
	#AT91C_ADC_OVRE3
 (0x1 << 11)

712 
	#AT91C_ADC_OVRE4
 (0x1 << 12)

713 
	#AT91C_ADC_OVRE5
 (0x1 << 13)

714 
	#AT91C_ADC_OVRE6
 (0x1 << 14)

715 
	#AT91C_ADC_OVRE7
 (0x1 << 15)

716 
	#AT91C_ADC_DRDY
 (0x1 << 16)

717 
	#AT91C_ADC_GOVRE
 (0x1 << 17)

718 
	#AT91C_ADC_ENDRX
 (0x1 << 18)

719 
	#AT91C_ADC_RXBUFF
 (0x1 << 19)

721 
	#AT91C_ADC_LDATA
 (0x3FF << 0)

726 
	#AT91C_ADC_DATA
 (0x3FF << 0)

734 

	)

739 
	#SSC_CR
 ( 0)

740 
	#SSC_CMR
 ( 4)

741 
	#SSC_RCMR
 (16)

742 
	#SSC_RFMR
 (20)

743 
	#SSC_TCMR
 (24)

744 
	#SSC_TFMR
 (28)

745 
	#SSC_RHR
 (32)

746 
	#SSC_THR
 (36)

747 
	#SSC_RSHR
 (48)

748 
	#SSC_TSHR
 (52)

749 
	#SSC_RC0R
 (56)

750 
	#SSC_RC1R
 (60)

751 
	#SSC_SR
 (64)

752 
	#SSC_IER
 (68)

753 
	#SSC_IDR
 (72)

754 
	#SSC_IMR
 (76)

755 
	#SSC_RPR
 (256)

756 
	#SSC_RCR
 (260)

757 
	#SSC_TPR
 (264)

758 
	#SSC_TCR
 (268)

759 
	#SSC_RNPR
 (272)

760 
	#SSC_RNCR
 (276)

761 
	#SSC_TNPR
 (280)

762 
	#SSC_TNCR
 (284)

763 
	#SSC_PTCR
 (288)

764 
	#SSC_PTSR
 (292)

766 
	#AT91C_SSC_RXEN
 (0x1 << 0)

767 
	#AT91C_SSC_RXDIS
 (0x1 << 1)

768 
	#AT91C_SSC_TXEN
 (0x1 << 8)

769 
	#AT91C_SSC_TXDIS
 (0x1 << 9)

770 
	#AT91C_SSC_SWRST
 (0x1 << 15)

772 
	#AT91C_SSC_CKS
 (0x3 << 0)

773 
	#AT91C_SSC_CKS_DIV
 (0x0)

774 
	#AT91C_SSC_CKS_TK
 (0x1)

775 
	#AT91C_SSC_CKS_RK
 (0x2)

776 
	#AT91C_SSC_CKO
 (0x7 << 2)

777 
	#AT91C_SSC_CKO_NONE
 (0x0 << 2)

778 
	#AT91C_SSC_CKO_CONTINOUS
 (0x1 << 2)

779 
	#AT91C_SSC_CKO_DATA_TX
 (0x2 << 2)

780 
	#AT91C_SSC_CKI
 (0x1 << 5)

781 
	#AT91C_SSC_CKG
 (0x3 << 6)

782 
	#AT91C_SSC_CKG_NONE
 (0x0 << 6)

783 
	#AT91C_SSC_CKG_LOW
 (0x1 << 6)

784 
	#AT91C_SSC_CKG_HIGH
 (0x2 << 6)

785 
	#AT91C_SSC_START
 (0xF << 8)

786 
	#AT91C_SSC_START_CONTINOUS
 (0x0 << 8)

787 
	#AT91C_SSC_START_TX
 (0x1 << 8)

788 
	#AT91C_SSC_START_LOW_RF
 (0x2 << 8)

789 
	#AT91C_SSC_START_HIGH_RF
 (0x3 << 8)

790 
	#AT91C_SSC_START_FALL_RF
 (0x4 << 8)

791 
	#AT91C_SSC_START_RISE_RF
 (0x5 << 8)

792 
	#AT91C_SSC_START_LEVEL_RF
 (0x6 << 8)

793 
	#AT91C_SSC_START_EDGE_RF
 (0x7 << 8)

794 
	#AT91C_SSC_START_0
 (0x8 << 8)

795 
	#AT91C_SSC_STOP
 (0x1 << 12)

796 
	#AT91C_SSC_STTOUT
 (0x1 << 15)

797 
	#AT91C_SSC_STTDLY
 (0xFF << 16)

798 
	#AT91C_SSC_PERIOD
 (0xFF << 24)

800 
	#AT91C_SSC_DATLEN
 (0x1F << 0)

801 
	#AT91C_SSC_LOOP
 (0x1 << 5)

802 
	#AT91C_SSC_MSBF
 (0x1 << 7)

803 
	#AT91C_SSC_DATNB
 (0xF << 8)

804 
	#AT91C_SSC_FSLEN
 (0xF << 16)

805 
	#AT91C_SSC_FSOS
 (0x7 << 20)

806 
	#AT91C_SSC_FSOS_NONE
 (0x0 << 20)

807 
	#AT91C_SSC_FSOS_NEGATIVE
 (0x1 << 20)

808 
	#AT91C_SSC_FSOS_POSITIVE
 (0x2 << 20)

809 
	#AT91C_SSC_FSOS_LOW
 (0x3 << 20)

810 
	#AT91C_SSC_FSOS_HIGH
 (0x4 << 20)

811 
	#AT91C_SSC_FSOS_TOGGLE
 (0x5 << 20)

812 
	#AT91C_SSC_FSEDGE
 (0x1 << 24)

815 
	#AT91C_SSC_DATDEF
 (0x1 << 5)

816 
	#AT91C_SSC_FSDEN
 (0x1 << 23)

818 
	#AT91C_SSC_TXRDY
 (0x1 << 0)

819 
	#AT91C_SSC_TXEMPTY
 (0x1 << 1)

820 
	#AT91C_SSC_ENDTX
 (0x1 << 2)

821 
	#AT91C_SSC_TXBUFE
 (0x1 << 3)

822 
	#AT91C_SSC_RXRDY
 (0x1 << 4)

823 
	#AT91C_SSC_OVRUN
 (0x1 << 5)

824 
	#AT91C_SSC_ENDRX
 (0x1 << 6)

825 
	#AT91C_SSC_RXBUFF
 (0x1 << 7)

826 
	#AT91C_SSC_CP0
 (0x1 << 8)

827 
	#AT91C_SSC_CP1
 (0x1 << 9)

828 
	#AT91C_SSC_TXSYN
 (0x1 << 10)

829 
	#AT91C_SSC_RXSYN
 (0x1 << 11)

830 
	#AT91C_SSC_TXENA
 (0x1 << 16)

831 
	#AT91C_SSC_RXENA
 (0x1 << 17)

835 

	)

840 
	#US_CR
 ( 0)

841 
	#US_MR
 ( 4)

842 
	#US_IER
 ( 8)

843 
	#US_IDR
 (12)

844 
	#US_IMR
 (16)

845 
	#US_CSR
 (20)

846 
	#US_RHR
 (24)

847 
	#US_THR
 (28)

848 
	#US_BRGR
 (32)

849 
	#US_RTOR
 (36)

850 
	#US_TTGR
 (40)

851 
	#US_FIDI
 (64)

852 
	#US_NER
 (68)

853 
	#US_XXR
 (72)

854 
	#US_IF
 (76)

855 
	#US_RPR
 (256)

856 
	#US_RCR
 (260)

857 
	#US_TPR
 (264)

858 
	#US_TCR
 (268)

859 
	#US_RNPR
 (272)

860 
	#US_RNCR
 (276)

861 
	#US_TNPR
 (280)

862 
	#US_TNCR
 (284)

863 
	#US_PTCR
 (288)

864 
	#US_PTSR
 (292)

866 
	#AT91C_US_RSTSTA
 (0x1 << 8)

867 
	#AT91C_US_STTBRK
 (0x1 << 9)

868 
	#AT91C_US_STPBRK
 (0x1 << 10)

869 
	#AT91C_US_STTTO
 (0x1 << 11)

870 
	#AT91C_US_SENDA
 (0x1 << 12)

871 
	#AT91C_US_RSTIT
 (0x1 << 13)

872 
	#AT91C_US_RSTNACK
 (0x1 << 14)

873 
	#AT91C_US_RETTO
 (0x1 << 15)

874 
	#AT91C_US_DTREN
 (0x1 << 16)

875 
	#AT91C_US_DTRDIS
 (0x1 << 17)

876 
	#AT91C_US_RTSEN
 (0x1 << 18)

877 
	#AT91C_US_RTSDIS
 (0x1 << 19)

879 
	#AT91C_US_USMODE
 (0xF << 0)

880 
	#AT91C_US_USMODE_NORMAL
 (0x0)

881 
	#AT91C_US_USMODE_RS485
 (0x1)

882 
	#AT91C_US_USMODE_HWHSH
 (0x2)

883 
	#AT91C_US_USMODE_MODEM
 (0x3)

884 
	#AT91C_US_USMODE_ISO7816_0
 (0x4)

885 
	#AT91C_US_USMODE_ISO7816_1
 (0x6)

886 
	#AT91C_US_USMODE_IRDA
 (0x8)

887 
	#AT91C_US_USMODE_SWHSH
 (0xC)

888 
	#AT91C_US_CLKS
 (0x3 << 4)

889 
	#AT91C_US_CLKS_CLOCK
 (0x0 << 4)

890 
	#AT91C_US_CLKS_FDIV1
 (0x1 << 4)

891 
	#AT91C_US_CLKS_SLOW
 (0x2 << 4)

892 
	#AT91C_US_CLKS_EXT
 (0x3 << 4)

893 
	#AT91C_US_CHRL
 (0x3 << 6)

894 
	#AT91C_US_CHRL_5_BITS
 (0x0 << 6)

895 
	#AT91C_US_CHRL_6_BITS
 (0x1 << 6)

896 
	#AT91C_US_CHRL_7_BITS
 (0x2 << 6)

897 
	#AT91C_US_CHRL_8_BITS
 (0x3 << 6)

898 
	#AT91C_US_SYNC
 (0x1 << 8)

899 
	#AT91C_US_NBSTOP
 (0x3 << 12)

900 
	#AT91C_US_NBSTOP_1_BIT
 (0x0 << 12)

901 
	#AT91C_US_NBSTOP_15_BIT
 (0x1 << 12)

902 
	#AT91C_US_NBSTOP_2_BIT
 (0x2 << 12)

903 
	#AT91C_US_MSBF
 (0x1 << 16)

904 
	#AT91C_US_MODE9
 (0x1 << 17)

905 
	#AT91C_US_CKLO
 (0x1 << 18)

906 
	#AT91C_US_OVER
 (0x1 << 19)

907 
	#AT91C_US_INACK
 (0x1 << 20)

908 
	#AT91C_US_DSNACK
 (0x1 << 21)

909 
	#AT91C_US_MAX_ITER
 (0x1 << 24)

910 
	#AT91C_US_FILTER
 (0x1 << 28)

912 
	#AT91C_US_RXBRK
 (0x1 << 2)

913 
	#AT91C_US_TIMEOUT
 (0x1 << 8)

914 
	#AT91C_US_ITERATION
 (0x1 << 10)

915 
	#AT91C_US_NACK
 (0x1 << 13)

916 
	#AT91C_US_RIIC
 (0x1 << 16)

917 
	#AT91C_US_DSRIC
 (0x1 << 17)

918 
	#AT91C_US_DCDIC
 (0x1 << 18)

919 
	#AT91C_US_CTSIC
 (0x1 << 19)

923 
	#AT91C_US_RI
 (0x1 << 20)

924 
	#AT91C_US_DSR
 (0x1 << 21)

925 
	#AT91C_US_DCD
 (0x1 << 22)

926 
	#AT91C_US_CTS
 (0x1 << 23)

927 

	)

932 
	#TWI_CR
 ( 0)

933 
	#TWI_MMR
 ( 4)

934 
	#TWI_SMR
 ( 8)

935 
	#TWI_IADR
 (12)

936 
	#TWI_CWGR
 (16)

937 
	#TWI_SR
 (32)

938 
	#TWI_IER
 (36)

939 
	#TWI_IDR
 (40)

940 
	#TWI_IMR
 (44)

941 
	#TWI_RHR
 (48)

942 
	#TWI_THR
 (52)

944 
	#AT91C_TWI_START
 (0x1 << 0)

945 
	#AT91C_TWI_STOP
 (0x1 << 1)

946 
	#AT91C_TWI_MSEN
 (0x1 << 2)

947 
	#AT91C_TWI_MSDIS
 (0x1 << 3)

948 
	#AT91C_TWI_SVEN
 (0x1 << 4)

949 
	#AT91C_TWI_SVDIS
 (0x1 << 5)

950 
	#AT91C_TWI_SWRST
 (0x1 << 7)

952 
	#AT91C_TWI_IADRSZ
 (0x3 << 8)

953 
	#AT91C_TWI_IADRSZ_NO
 (0x0 << 8)

954 
	#AT91C_TWI_IADRSZ_1_BYTE
 (0x1 << 8)

955 
	#AT91C_TWI_IADRSZ_2_BYTE
 (0x2 << 8)

956 
	#AT91C_TWI_IADRSZ_3_BYTE
 (0x3 << 8)

957 
	#AT91C_TWI_MREAD
 (0x1 << 12)

958 
	#AT91C_TWI_DADR
 (0x7F << 16)

960 
	#AT91C_TWI_SADR
 (0x7F << 16)

962 
	#AT91C_TWI_CLDIV
 (0xFF << 0)

963 
	#AT91C_TWI_CHDIV
 (0xFF << 8)

964 
	#AT91C_TWI_CKDIV
 (0x7 << 16)

966 
	#AT91C_TWI_TXCOMP
 (0x1 << 0)

967 
	#AT91C_TWI_RXRDY
 (0x1 << 1)

968 
	#AT91C_TWI_TXRDY
 (0x1 << 2)

969 
	#AT91C_TWI_SVREAD
 (0x1 << 3)

970 
	#AT91C_TWI_SVACC
 (0x1 << 4)

971 
	#AT91C_TWI_GCACC
 (0x1 << 5)

972 
	#AT91C_TWI_OVRE
 (0x1 << 6)

973 
	#AT91C_TWI_UNRE
 (0x1 << 7)

974 
	#AT91C_TWI_NACK
 (0x1 << 8)

975 
	#AT91C_TWI_ARBLST
 (0x1 << 9)

979 

	)

984 
	#TC_CCR
 ( 0)

985 
	#TC_CMR
 ( 4)

986 
	#TC_CV
 (16)

987 
	#TC_RA
 (20)

988 
	#TC_RB
 (24)

989 
	#TC_RC
 (28)

990 
	#TC_SR
 (32)

991 
	#TC_IER
 (36)

992 
	#TC_IDR
 (40)

993 
	#TC_IMR
 (44)

995 
	#AT91C_TC_CLKEN
 (0x1 << 0)

996 
	#AT91C_TC_CLKDIS
 (0x1 << 1)

997 
	#AT91C_TC_SWTRG
 (0x1 << 2)

999 
	#AT91C_TC_CLKS
 (0x7 << 0)

1000 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (0x0)

1001 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (0x1)

1002 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (0x2)

1003 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (0x3)

1004 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (0x4)

1005 
	#AT91C_TC_CLKS_XC0
 (0x5)

1006 
	#AT91C_TC_CLKS_XC1
 (0x6)

1007 
	#AT91C_TC_CLKS_XC2
 (0x7)

1008 
	#AT91C_TC_CLKI
 (0x1 << 3)

1009 
	#AT91C_TC_BURST
 (0x3 << 4)

1010 
	#AT91C_TC_BURST_NONE
 (0x0 << 4)

1011 
	#AT91C_TC_BURST_XC0
 (0x1 << 4)

1012 
	#AT91C_TC_BURST_XC1
 (0x2 << 4)

1013 
	#AT91C_TC_BURST_XC2
 (0x3 << 4)

1014 
	#AT91C_TC_CPCSTOP
 (0x1 << 6)

1015 
	#AT91C_TC_LDBSTOP
 (0x1 << 6)

1016 
	#AT91C_TC_LDBDIS
 (0x1 << 7)

1017 
	#AT91C_TC_CPCDIS
 (0x1 << 7)

1018 
	#AT91C_TC_ETRGEDG
 (0x3 << 8)

1019 
	#AT91C_TC_ETRGEDG_NONE
 (0x0 << 8)

1020 
	#AT91C_TC_ETRGEDG_RISING
 (0x1 << 8)

1021 
	#AT91C_TC_ETRGEDG_FALLING
 (0x2 << 8)

1022 
	#AT91C_TC_ETRGEDG_BOTH
 (0x3 << 8)

1023 
	#AT91C_TC_EEVTEDG
 (0x3 << 8)

1024 
	#AT91C_TC_EEVTEDG_NONE
 (0x0 << 8)

1025 
	#AT91C_TC_EEVTEDG_RISING
 (0x1 << 8)

1026 
	#AT91C_TC_EEVTEDG_FALLING
 (0x2 << 8)

1027 
	#AT91C_TC_EEVTEDG_BOTH
 (0x3 << 8)

1028 
	#AT91C_TC_ABETRG
 (0x1 << 10)

1029 
	#AT91C_TC_EEVT
 (0x3 << 10)

1030 
	#AT91C_TC_EEVT_NONE
 (0x0 << 10)

1031 
	#AT91C_TC_EEVT_RISING
 (0x1 << 10)

1032 
	#AT91C_TC_EEVT_FALLING
 (0x2 << 10)

1033 
	#AT91C_TC_EEVT_BOTH
 (0x3 << 10)

1034 
	#AT91C_TC_ENETRG
 (0x1 << 12)

1035 
	#AT91C_TC_WAVESEL
 (0x3 << 13)

1036 
	#AT91C_TC_WAVESEL_UP
 (0x0 << 13)

1037 
	#AT91C_TC_WAVESEL_UPDOWN
 (0x1 << 13)

1038 
	#AT91C_TC_WAVESEL_UP_AUTO
 (0x2 << 13)

1039 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (0x3 << 13)

1040 
	#AT91C_TC_CPCTRG
 (0x1 << 14)

1041 
	#AT91C_TC_WAVE
 (0x1 << 15)

1042 
	#AT91C_TC_LDRA
 (0x3 << 16)

1043 
	#AT91C_TC_LDRA_NONE
 (0x0 << 16)

1044 
	#AT91C_TC_LDRA_RISING
 (0x1 << 16)

1045 
	#AT91C_TC_LDRA_FALLING
 (0x2 << 16)

1046 
	#AT91C_TC_LDRA_BOTH
 (0x3 << 16)

1047 
	#AT91C_TC_ACPA
 (0x3 << 16)

1048 
	#AT91C_TC_ACPA_NONE
 (0x0 << 16)

1049 
	#AT91C_TC_ACPA_SET
 (0x1 << 16)

1050 
	#AT91C_TC_ACPA_CLEAR
 (0x2 << 16)

1051 
	#AT91C_TC_ACPA_TOGGLE
 (0x3 << 16)

1052 
	#AT91C_TC_LDRB
 (0x3 << 18)

1053 
	#AT91C_TC_LDRB_NONE
 (0x0 << 18)

1054 
	#AT91C_TC_LDRB_RISING
 (0x1 << 18)

1055 
	#AT91C_TC_LDRB_FALLING
 (0x2 << 18)

1056 
	#AT91C_TC_LDRB_BOTH
 (0x3 << 18)

1057 
	#AT91C_TC_ACPC
 (0x3 << 18)

1058 
	#AT91C_TC_ACPC_NONE
 (0x0 << 18)

1059 
	#AT91C_TC_ACPC_SET
 (0x1 << 18)

1060 
	#AT91C_TC_ACPC_CLEAR
 (0x2 << 18)

1061 
	#AT91C_TC_ACPC_TOGGLE
 (0x3 << 18)

1062 
	#AT91C_TC_AEEVT
 (0x3 << 20)

1063 
	#AT91C_TC_AEEVT_NONE
 (0x0 << 20)

1064 
	#AT91C_TC_AEEVT_SET
 (0x1 << 20)

1065 
	#AT91C_TC_AEEVT_CLEAR
 (0x2 << 20)

1066 
	#AT91C_TC_AEEVT_TOGGLE
 (0x3 << 20)

1067 
	#AT91C_TC_ASWTRG
 (0x3 << 22)

1068 
	#AT91C_TC_ASWTRG_NONE
 (0x0 << 22)

1069 
	#AT91C_TC_ASWTRG_SET
 (0x1 << 22)

1070 
	#AT91C_TC_ASWTRG_CLEAR
 (0x2 << 22)

1071 
	#AT91C_TC_ASWTRG_TOGGLE
 (0x3 << 22)

1072 
	#AT91C_TC_BCPB
 (0x3 << 24)

1073 
	#AT91C_TC_BCPB_NONE
 (0x0 << 24)

1074 
	#AT91C_TC_BCPB_SET
 (0x1 << 24)

1075 
	#AT91C_TC_BCPB_CLEAR
 (0x2 << 24)

1076 
	#AT91C_TC_BCPB_TOGGLE
 (0x3 << 24)

1077 
	#AT91C_TC_BCPC
 (0x3 << 26)

1078 
	#AT91C_TC_BCPC_NONE
 (0x0 << 26)

1079 
	#AT91C_TC_BCPC_SET
 (0x1 << 26)

1080 
	#AT91C_TC_BCPC_CLEAR
 (0x2 << 26)

1081 
	#AT91C_TC_BCPC_TOGGLE
 (0x3 << 26)

1082 
	#AT91C_TC_BEEVT
 (0x3 << 28)

1083 
	#AT91C_TC_BEEVT_NONE
 (0x0 << 28)

1084 
	#AT91C_TC_BEEVT_SET
 (0x1 << 28)

1085 
	#AT91C_TC_BEEVT_CLEAR
 (0x2 << 28)

1086 
	#AT91C_TC_BEEVT_TOGGLE
 (0x3 << 28)

1087 
	#AT91C_TC_BSWTRG
 (0x3 << 30)

1088 
	#AT91C_TC_BSWTRG_NONE
 (0x0 << 30)

1089 
	#AT91C_TC_BSWTRG_SET
 (0x1 << 30)

1090 
	#AT91C_TC_BSWTRG_CLEAR
 (0x2 << 30)

1091 
	#AT91C_TC_BSWTRG_TOGGLE
 (0x3 << 30)

1093 
	#AT91C_TC_COVFS
 (0x1 << 0)

1094 
	#AT91C_TC_LOVRS
 (0x1 << 1)

1095 
	#AT91C_TC_CPAS
 (0x1 << 2)

1096 
	#AT91C_TC_CPBS
 (0x1 << 3)

1097 
	#AT91C_TC_CPCS
 (0x1 << 4)

1098 
	#AT91C_TC_LDRAS
 (0x1 << 5)

1099 
	#AT91C_TC_LDRBS
 (0x1 << 6)

1100 
	#AT91C_TC_ETRCS
 (0x1 << 7)

1101 
	#AT91C_TC_ETRGS
 (0x1 << 16)

1102 
	#AT91C_TC_MTIOA
 (0x1 << 17)

1103 
	#AT91C_TC_MTIOB
 (0x1 << 18)

1107 

	)

1112 
	#TCB_TC0
 ( 0)

1113 
	#TCB_TC1
 (64)

1114 
	#TCB_TC2
 (128)

1115 
	#TCB_BCR
 (192)

1116 
	#TCB_BMR
 (196)

1118 
	#AT91C_TCB_SYNC
 (0x1 << 0)

1120 
	#AT91C_TCB_TC0XC0S
 (0x1 << 0)

1121 
	#AT91C_TCB_TC0XC0S_TCLK0
 (0x0)

1122 
	#AT91C_TCB_TC0XC0S_NONE
 (0x1)

1123 
	#AT91C_TCB_TC0XC0S_TIOA1
 (0x2)

1124 
	#AT91C_TCB_TC0XC0S_TIOA2
 (0x3)

1125 
	#AT91C_TCB_TC1XC1S
 (0x1 << 2)

1126 
	#AT91C_TCB_TC1XC1S_TCLK1
 (0x0 << 2)

1127 
	#AT91C_TCB_TC1XC1S_NONE
 (0x1 << 2)

1128 
	#AT91C_TCB_TC1XC1S_TIOA0
 (0x2 << 2)

1129 
	#AT91C_TCB_TC1XC1S_TIOA2
 (0x3 << 2)

1130 
	#AT91C_TCB_TC2XC2S
 (0x1 << 4)

1131 
	#AT91C_TCB_TC2XC2S_TCLK2
 (0x0 << 4)

1132 
	#AT91C_TCB_TC2XC2S_NONE
 (0x1 << 4)

1133 
	#AT91C_TCB_TC2XC2S_TIOA0
 (0x2 << 4)

1134 
	#AT91C_TCB_TC2XC2S_TIOA2
 (0x3 << 4)

1135 

	)

1140 
	#PWMC_CMR
 ( 0)

1141 
	#PWMC_CDTYR
 ( 4)

1142 
	#PWMC_CPRDR
 ( 8)

1143 
	#PWMC_CCNTR
 (12)

1144 
	#PWMC_CUPDR
 (16)

1145 
	#PWMC_Re£rved
 (20)

1147 
	#AT91C_PWMC_CPRE
 (0xF << 0)

1148 
	#AT91C_PWMC_CPRE_MCK
 (0x0)

1149 
	#AT91C_PWMC_CPRE_MCKA
 (0xB)

1150 
	#AT91C_PWMC_CPRE_MCKB
 (0xC)

1151 
	#AT91C_PWMC_CALG
 (0x1 << 8)

1152 
	#AT91C_PWMC_CPOL
 (0x1 << 9)

1153 
	#AT91C_PWMC_CPD
 (0x1 << 10)

1155 
	#AT91C_PWMC_CDTY
 (0x0 << 0)

1157 
	#AT91C_PWMC_CPRD
 (0x0 << 0)

1159 
	#AT91C_PWMC_CCNT
 (0x0 << 0)

1161 
	#AT91C_PWMC_CUPD
 (0x0 << 0)

1162 

	)

1167 
	#PWMC_MR
 ( 0)

1168 
	#PWMC_ENA
 ( 4)

1169 
	#PWMC_DIS
 ( 8)

1170 
	#PWMC_SR
 (12)

1171 
	#PWMC_IER
 (16)

1172 
	#PWMC_IDR
 (20)

1173 
	#PWMC_IMR
 (24)

1174 
	#PWMC_ISR
 (28)

1175 
	#PWMC_VR
 (252)

1176 
	#PWMC_CH
 (512)

1178 
	#AT91C_PWMC_DIVA
 (0xFF << 0)

1179 
	#AT91C_PWMC_PREA
 (0xF << 8)

1180 
	#AT91C_PWMC_PREA_MCK
 (0x0 << 8)

1181 
	#AT91C_PWMC_DIVB
 (0xFF << 16)

1182 
	#AT91C_PWMC_PREB
 (0xF << 24)

1183 
	#AT91C_PWMC_PREB_MCK
 (0x0 << 24)

1185 
	#AT91C_PWMC_CHID0
 (0x1 << 0)

1186 
	#AT91C_PWMC_CHID1
 (0x1 << 1)

1187 
	#AT91C_PWMC_CHID2
 (0x1 << 2)

1188 
	#AT91C_PWMC_CHID3
 (0x1 << 3)

1189 
	#AT91C_PWMC_CHID4
 (0x1 << 4)

1190 
	#AT91C_PWMC_CHID5
 (0x1 << 5)

1191 
	#AT91C_PWMC_CHID6
 (0x1 << 6)

1192 
	#AT91C_PWMC_CHID7
 (0x1 << 7)

1199 

	)

1204 
	#UDP_NUM
 ( 0)

1205 
	#UDP_GLBSTATE
 ( 4)

1206 
	#UDP_FADDR
 ( 8)

1207 
	#UDP_IER
 (16)

1208 
	#UDP_IDR
 (20)

1209 
	#UDP_IMR
 (24)

1210 
	#UDP_ISR
 (28)

1211 
	#UDP_ICR
 (32)

1212 
	#UDP_RSTEP
 (40)

1213 
	#UDP_CSR
 (48)

1214 
	#UDP_FDR
 (80)

1216 
	#AT91C_UDP_FRM_NUM
 (0x7FF << 0)

1217 
	#AT91C_UDP_FRM_ERR
 (0x1 << 16)

1218 
	#AT91C_UDP_FRM_OK
 (0x1 << 17)

1220 
	#AT91C_UDP_FADDEN
 (0x1 << 0)

1221 
	#AT91C_UDP_CONFG
 (0x1 << 1)

1222 
	#AT91C_UDP_RMWUPE
 (0x1 << 2)

1223 
	#AT91C_UDP_RSMINPR
 (0x1 << 3)

1225 
	#AT91C_UDP_FADD
 (0xFF << 0)

1226 
	#AT91C_UDP_FEN
 (0x1 << 8)

1228 
	#AT91C_UDP_EPINT0
 (0x1 << 0)

1229 
	#AT91C_UDP_EPINT1
 (0x1 << 1)

1230 
	#AT91C_UDP_EPINT2
 (0x1 << 2)

1231 
	#AT91C_UDP_EPINT3
 (0x1 << 3)

1232 
	#AT91C_UDP_EPINT4
 (0x1 << 4)

1233 
	#AT91C_UDP_EPINT5
 (0x1 << 5)

1234 
	#AT91C_UDP_EPINT6
 (0x1 << 6)

1235 
	#AT91C_UDP_EPINT7
 (0x1 << 7)

1236 
	#AT91C_UDP_RXSUSP
 (0x1 << 8)

1237 
	#AT91C_UDP_RXRSM
 (0x1 << 9)

1238 
	#AT91C_UDP_EXTRSM
 (0x1 << 10)

1239 
	#AT91C_UDP_SOFINT
 (0x1 << 11)

1240 
	#AT91C_UDP_WAKEUP
 (0x1 << 13)

1244 
	#AT91C_UDP_ENDBUSRES
 (0x1 << 12)

1247 
	#AT91C_UDP_EP0
 (0x1 << 0)

1248 
	#AT91C_UDP_EP1
 (0x1 << 1)

1249 
	#AT91C_UDP_EP2
 (0x1 << 2)

1250 
	#AT91C_UDP_EP3
 (0x1 << 3)

1251 
	#AT91C_UDP_EP4
 (0x1 << 4)

1252 
	#AT91C_UDP_EP5
 (0x1 << 5)

1253 
	#AT91C_UDP_EP6
 (0x1 << 6)

1254 
	#AT91C_UDP_EP7
 (0x1 << 7)

1256 
	#AT91C_UDP_TXCOMP
 (0x1 << 0)

1257 
	#AT91C_UDP_RX_DATA_BK0
 (0x1 << 1)

1258 
	#AT91C_UDP_RXSETUP
 (0x1 << 2)

1259 
	#AT91C_UDP_ISOERROR
 (0x1 << 3)

1260 
	#AT91C_UDP_TXPKTRDY
 (0x1 << 4)

1261 
	#AT91C_UDP_FORCESTALL
 (0x1 << 5)

1262 
	#AT91C_UDP_RX_DATA_BK1
 (0x1 << 6)

1263 
	#AT91C_UDP_DIR
 (0x1 << 7)

1264 
	#AT91C_UDP_EPTYPE
 (0x7 << 8)

1265 
	#AT91C_UDP_EPTYPE_CTRL
 (0x0 << 8)

1266 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (0x1 << 8)

1267 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (0x2 << 8)

1268 
	#AT91C_UDP_EPTYPE_INT_OUT
 (0x3 << 8)

1269 
	#AT91C_UDP_EPTYPE_ISO_IN
 (0x5 << 8)

1270 
	#AT91C_UDP_EPTYPE_BULK_IN
 (0x6 << 8)

1271 
	#AT91C_UDP_EPTYPE_INT_IN
 (0x7 << 8)

1272 
	#AT91C_UDP_DTGLE
 (0x1 << 11)

1273 
	#AT91C_UDP_EPEDS
 (0x1 << 15)

1274 
	#AT91C_UDP_RXBYTECNT
 (0x7FF << 16)

1275 

	)

1280 
	#AT91C_SYSC_SYSC_VRPM
 (0xFFFFFD60)

1282 
	#AT91C_AIC_ICCR
 (0xFFFFF128)

1283 
	#AT91C_AIC_IECR
 (0xFFFFF120)

1284 
	#AT91C_AIC_SMR
 (0xFFFFF000)

1285 
	#AT91C_AIC_ISCR
 (0xFFFFF12C)

1286 
	#AT91C_AIC_EOICR
 (0xFFFFF130)

1287 
	#AT91C_AIC_DCR
 (0xFFFFF138)

1288 
	#AT91C_AIC_FFER
 (0xFFFFF140)

1289 
	#AT91C_AIC_SVR
 (0xFFFFF080)

1290 
	#AT91C_AIC_SPU
 (0xFFFFF134)

1291 
	#AT91C_AIC_FFDR
 (0xFFFFF144)

1292 
	#AT91C_AIC_FVR
 (0xFFFFF104)

1293 
	#AT91C_AIC_FFSR
 (0xFFFFF148)

1294 
	#AT91C_AIC_IMR
 (0xFFFFF110)

1295 
	#AT91C_AIC_ISR
 (0xFFFFF108)

1296 
	#AT91C_AIC_IVR
 (0xFFFFF100)

1297 
	#AT91C_AIC_IDCR
 (0xFFFFF124)

1298 
	#AT91C_AIC_CISR
 (0xFFFFF114)

1299 
	#AT91C_AIC_IPR
 (0xFFFFF10C)

1301 
	#AT91C_DBGU_C2R
 (0xFFFFF244)

1302 
	#AT91C_DBGU_THR
 (0xFFFFF21C)

1303 
	#AT91C_DBGU_CSR
 (0xFFFFF214)

1304 
	#AT91C_DBGU_IDR
 (0xFFFFF20C)

1305 
	#AT91C_DBGU_MR
 (0xFFFFF204)

1306 
	#AT91C_DBGU_FNTR
 (0xFFFFF248)

1307 
	#AT91C_DBGU_C1R
 (0xFFFFF240)

1308 
	#AT91C_DBGU_BRGR
 (0xFFFFF220)

1309 
	#AT91C_DBGU_RHR
 (0xFFFFF218)

1310 
	#AT91C_DBGU_IMR
 (0xFFFFF210)

1311 
	#AT91C_DBGU_IER
 (0xFFFFF208)

1312 
	#AT91C_DBGU_CR
 (0xFFFFF200)

1314 
	#AT91C_DBGU_TNCR
 (0xFFFFF31C)

1315 
	#AT91C_DBGU_RNCR
 (0xFFFFF314)

1316 
	#AT91C_DBGU_PTCR
 (0xFFFFF320)

1317 
	#AT91C_DBGU_PTSR
 (0xFFFFF324)

1318 
	#AT91C_DBGU_RCR
 (0xFFFFF304)

1319 
	#AT91C_DBGU_TCR
 (0xFFFFF30C)

1320 
	#AT91C_DBGU_RPR
 (0xFFFFF300)

1321 
	#AT91C_DBGU_TPR
 (0xFFFFF308)

1322 
	#AT91C_DBGU_RNPR
 (0xFFFFF310)

1323 
	#AT91C_DBGU_TNPR
 (0xFFFFF318)

1325 
	#AT91C_PIOA_IMR
 (0xFFFFF448)

1326 
	#AT91C_PIOA_IER
 (0xFFFFF440)

1327 
	#AT91C_PIOA_OWDR
 (0xFFFFF4A4)

1328 
	#AT91C_PIOA_ISR
 (0xFFFFF44C)

1329 
	#AT91C_PIOA_PPUDR
 (0xFFFFF460)

1330 
	#AT91C_PIOA_MDSR
 (0xFFFFF458)

1331 
	#AT91C_PIOA_MDER
 (0xFFFFF450)

1332 
	#AT91C_PIOA_PER
 (0xFFFFF400)

1333 
	#AT91C_PIOA_PSR
 (0xFFFFF408)

1334 
	#AT91C_PIOA_OER
 (0xFFFFF410)

1335 
	#AT91C_PIOA_BSR
 (0xFFFFF474)

1336 
	#AT91C_PIOA_PPUER
 (0xFFFFF464)

1337 
	#AT91C_PIOA_MDDR
 (0xFFFFF454)

1338 
	#AT91C_PIOA_PDR
 (0xFFFFF404)

1339 
	#AT91C_PIOA_ODR
 (0xFFFFF414)

1340 
	#AT91C_PIOA_IFDR
 (0xFFFFF424)

1341 
	#AT91C_PIOA_ABSR
 (0xFFFFF478)

1342 
	#AT91C_PIOA_ASR
 (0xFFFFF470)

1343 
	#AT91C_PIOA_PPUSR
 (0xFFFFF468)

1344 
	#AT91C_PIOA_ODSR
 (0xFFFFF438)

1345 
	#AT91C_PIOA_SODR
 (0xFFFFF430)

1346 
	#AT91C_PIOA_IFSR
 (0xFFFFF428)

1347 
	#AT91C_PIOA_IFER
 (0xFFFFF420)

1348 
	#AT91C_PIOA_OSR
 (0xFFFFF418)

1349 
	#AT91C_PIOA_IDR
 (0xFFFFF444)

1350 
	#AT91C_PIOA_PDSR
 (0xFFFFF43C)

1351 
	#AT91C_PIOA_CODR
 (0xFFFFF434)

1352 
	#AT91C_PIOA_OWSR
 (0xFFFFF4A8)

1353 
	#AT91C_PIOA_OWER
 (0xFFFFF4A0)

1355 
	#AT91C_CKGR_PLLR
 (0xFFFFFC2C)

1356 
	#AT91C_CKGR_MCFR
 (0xFFFFFC24)

1357 
	#AT91C_CKGR_MOR
 (0xFFFFFC20)

1359 
	#AT91C_PMC_SCSR
 (0xFFFFFC08)

1360 
	#AT91C_PMC_SCER
 (0xFFFFFC00)

1361 
	#AT91C_PMC_IMR
 (0xFFFFFC6C)

1362 
	#AT91C_PMC_IDR
 (0xFFFFFC64)

1363 
	#AT91C_PMC_PCDR
 (0xFFFFFC14)

1364 
	#AT91C_PMC_SCDR
 (0xFFFFFC04)

1365 
	#AT91C_PMC_SR
 (0xFFFFFC68)

1366 
	#AT91C_PMC_IER
 (0xFFFFFC60)

1367 
	#AT91C_PMC_MCKR
 (0xFFFFFC30)

1368 
	#AT91C_PMC_MOR
 (0xFFFFFC20)

1369 
	#AT91C_PMC_PCER
 (0xFFFFFC10)

1370 
	#AT91C_PMC_PCSR
 (0xFFFFFC18)

1371 
	#AT91C_PMC_PLLR
 (0xFFFFFC2C)

1372 
	#AT91C_PMC_MCFR
 (0xFFFFFC24)

1373 
	#AT91C_PMC_PCKR
 (0xFFFFFC40)

1375 
	#AT91C_RSTC_RSR
 (0xFFFFFD04)

1376 
	#AT91C_RSTC_RMR
 (0xFFFFFD08)

1377 
	#AT91C_RSTC_RCR
 (0xFFFFFD00)

1379 
	#AT91C_RTTC_RTSR
 (0xFFFFFD2C)

1380 
	#AT91C_RTTC_RTAR
 (0xFFFFFD24)

1381 
	#AT91C_RTTC_RTVR
 (0xFFFFFD28)

1382 
	#AT91C_RTTC_RTMR
 (0xFFFFFD20)

1384 
	#AT91C_PITC_PIIR
 (0xFFFFFD3C)

1385 
	#AT91C_PITC_PISR
 (0xFFFFFD34)

1386 
	#AT91C_PITC_PIVR
 (0xFFFFFD38)

1387 
	#AT91C_PITC_PIMR
 (0xFFFFFD30)

1389 
	#AT91C_WDTC_WDMR
 (0xFFFFFD44)

1390 
	#AT91C_WDTC_WDSR
 (0xFFFFFD48)

1391 
	#AT91C_WDTC_WDCR
 (0xFFFFFD40)

1393 
	#AT91C_MC_FCR
 (0xFFFFFF64)

1394 
	#AT91C_MC_ASR
 (0xFFFFFF04)

1395 
	#AT91C_MC_FSR
 (0xFFFFFF68)

1396 
	#AT91C_MC_FMR
 (0xFFFFFF60)

1397 
	#AT91C_MC_AASR
 (0xFFFFFF08)

1398 
	#AT91C_MC_RCR
 (0xFFFFFF00)

1400 
	#AT91C_SPI_PTCR
 (0xFFFE0120)

1401 
	#AT91C_SPI_TNPR
 (0xFFFE0118)

1402 
	#AT91C_SPI_RNPR
 (0xFFFE0110)

1403 
	#AT91C_SPI_TPR
 (0xFFFE0108)

1404 
	#AT91C_SPI_RPR
 (0xFFFE0100)

1405 
	#AT91C_SPI_PTSR
 (0xFFFE0124)

1406 
	#AT91C_SPI_TNCR
 (0xFFFE011C)

1407 
	#AT91C_SPI_RNCR
 (0xFFFE0114)

1408 
	#AT91C_SPI_TCR
 (0xFFFE010C)

1409 
	#AT91C_SPI_RCR
 (0xFFFE0104)

1411 
	#AT91C_SPI_CSR
 (0xFFFE0030)

1412 
	#AT91C_SPI_IDR
 (0xFFFE0018)

1413 
	#AT91C_SPI_SR
 (0xFFFE0010)

1414 
	#AT91C_SPI_RDR
 (0xFFFE0008)

1415 
	#AT91C_SPI_CR
 (0xFFFE0000)

1416 
	#AT91C_SPI_IMR
 (0xFFFE001C)

1417 
	#AT91C_SPI_IER
 (0xFFFE0014)

1418 
	#AT91C_SPI_TDR
 (0xFFFE000C)

1419 
	#AT91C_SPI_MR
 (0xFFFE0004)

1421 
	#AT91C_ADC_PTCR
 (0xFFFD8120)

1422 
	#AT91C_ADC_TNPR
 (0xFFFD8118)

1423 
	#AT91C_ADC_RNPR
 (0xFFFD8110)

1424 
	#AT91C_ADC_TPR
 (0xFFFD8108)

1425 
	#AT91C_ADC_RPR
 (0xFFFD8100)

1426 
	#AT91C_ADC_PTSR
 (0xFFFD8124)

1427 
	#AT91C_ADC_TNCR
 (0xFFFD811C)

1428 
	#AT91C_ADC_RNCR
 (0xFFFD8114)

1429 
	#AT91C_ADC_TCR
 (0xFFFD810C)

1430 
	#AT91C_ADC_RCR
 (0xFFFD8104)

1432 
	#AT91C_ADC_IMR
 (0xFFFD802C)

1433 
	#AT91C_ADC_CDR4
 (0xFFFD8040)

1434 
	#AT91C_ADC_CDR2
 (0xFFFD8038)

1435 
	#AT91C_ADC_CDR0
 (0xFFFD8030)

1436 
	#AT91C_ADC_CDR7
 (0xFFFD804C)

1437 
	#AT91C_ADC_CDR1
 (0xFFFD8034)

1438 
	#AT91C_ADC_CDR3
 (0xFFFD803C)

1439 
	#AT91C_ADC_CDR5
 (0xFFFD8044)

1440 
	#AT91C_ADC_MR
 (0xFFFD8004)

1441 
	#AT91C_ADC_CDR6
 (0xFFFD8048)

1442 
	#AT91C_ADC_CR
 (0xFFFD8000)

1443 
	#AT91C_ADC_CHER
 (0xFFFD8010)

1444 
	#AT91C_ADC_CHSR
 (0xFFFD8018)

1445 
	#AT91C_ADC_IER
 (0xFFFD8024)

1446 
	#AT91C_ADC_SR
 (0xFFFD801C)

1447 
	#AT91C_ADC_CHDR
 (0xFFFD8014)

1448 
	#AT91C_ADC_IDR
 (0xFFFD8028)

1449 
	#AT91C_ADC_LCDR
 (0xFFFD8020)

1451 
	#AT91C_SSC_PTCR
 (0xFFFD4120)

1452 
	#AT91C_SSC_TNPR
 (0xFFFD4118)

1453 
	#AT91C_SSC_RNPR
 (0xFFFD4110)

1454 
	#AT91C_SSC_TPR
 (0xFFFD4108)

1455 
	#AT91C_SSC_RPR
 (0xFFFD4100)

1456 
	#AT91C_SSC_PTSR
 (0xFFFD4124)

1457 
	#AT91C_SSC_TNCR
 (0xFFFD411C)

1458 
	#AT91C_SSC_RNCR
 (0xFFFD4114)

1459 
	#AT91C_SSC_TCR
 (0xFFFD410C)

1460 
	#AT91C_SSC_RCR
 (0xFFFD4104)

1462 
	#AT91C_SSC_RFMR
 (0xFFFD4014)

1463 
	#AT91C_SSC_CMR
 (0xFFFD4004)

1464 
	#AT91C_SSC_IDR
 (0xFFFD4048)

1465 
	#AT91C_SSC_SR
 (0xFFFD4040)

1466 
	#AT91C_SSC_RC0R
 (0xFFFD4038)

1467 
	#AT91C_SSC_RSHR
 (0xFFFD4030)

1468 
	#AT91C_SSC_RHR
 (0xFFFD4020)

1469 
	#AT91C_SSC_TCMR
 (0xFFFD4018)

1470 
	#AT91C_SSC_RCMR
 (0xFFFD4010)

1471 
	#AT91C_SSC_CR
 (0xFFFD4000)

1472 
	#AT91C_SSC_IMR
 (0xFFFD404C)

1473 
	#AT91C_SSC_IER
 (0xFFFD4044)

1474 
	#AT91C_SSC_RC1R
 (0xFFFD403C)

1475 
	#AT91C_SSC_TSHR
 (0xFFFD4034)

1476 
	#AT91C_SSC_THR
 (0xFFFD4024)

1477 
	#AT91C_SSC_TFMR
 (0xFFFD401C)

1479 
	#AT91C_US1_PTSR
 (0xFFFC4124)

1480 
	#AT91C_US1_TNCR
 (0xFFFC411C)

1481 
	#AT91C_US1_RNCR
 (0xFFFC4114)

1482 
	#AT91C_US1_TCR
 (0xFFFC410C)

1483 
	#AT91C_US1_RCR
 (0xFFFC4104)

1484 
	#AT91C_US1_PTCR
 (0xFFFC4120)

1485 
	#AT91C_US1_TNPR
 (0xFFFC4118)

1486 
	#AT91C_US1_RNPR
 (0xFFFC4110)

1487 
	#AT91C_US1_TPR
 (0xFFFC4108)

1488 
	#AT91C_US1_RPR
 (0xFFFC4100)

1490 
	#AT91C_US1_XXR
 (0xFFFC4048)

1491 
	#AT91C_US1_RHR
 (0xFFFC4018)

1492 
	#AT91C_US1_IMR
 (0xFFFC4010)

1493 
	#AT91C_US1_IER
 (0xFFFC4008)

1494 
	#AT91C_US1_CR
 (0xFFFC4000)

1495 
	#AT91C_US1_RTOR
 (0xFFFC4024)

1496 
	#AT91C_US1_THR
 (0xFFFC401C)

1497 
	#AT91C_US1_CSR
 (0xFFFC4014)

1498 
	#AT91C_US1_IDR
 (0xFFFC400C)

1499 
	#AT91C_US1_FIDI
 (0xFFFC4040)

1500 
	#AT91C_US1_BRGR
 (0xFFFC4020)

1501 
	#AT91C_US1_TTGR
 (0xFFFC4028)

1502 
	#AT91C_US1_IF
 (0xFFFC404C)

1503 
	#AT91C_US1_NER
 (0xFFFC4044)

1504 
	#AT91C_US1_MR
 (0xFFFC4004)

1506 
	#AT91C_US0_PTCR
 (0xFFFC0120)

1507 
	#AT91C_US0_TNPR
 (0xFFFC0118)

1508 
	#AT91C_US0_RNPR
 (0xFFFC0110)

1509 
	#AT91C_US0_TPR
 (0xFFFC0108)

1510 
	#AT91C_US0_RPR
 (0xFFFC0100)

1511 
	#AT91C_US0_PTSR
 (0xFFFC0124)

1512 
	#AT91C_US0_TNCR
 (0xFFFC011C)

1513 
	#AT91C_US0_RNCR
 (0xFFFC0114)

1514 
	#AT91C_US0_TCR
 (0xFFFC010C)

1515 
	#AT91C_US0_RCR
 (0xFFFC0104)

1517 
	#AT91C_US0_TTGR
 (0xFFFC0028)

1518 
	#AT91C_US0_BRGR
 (0xFFFC0020)

1519 
	#AT91C_US0_RHR
 (0xFFFC0018)

1520 
	#AT91C_US0_IMR
 (0xFFFC0010)

1521 
	#AT91C_US0_NER
 (0xFFFC0044)

1522 
	#AT91C_US0_RTOR
 (0xFFFC0024)

1523 
	#AT91C_US0_XXR
 (0xFFFC0048)

1524 
	#AT91C_US0_FIDI
 (0xFFFC0040)

1525 
	#AT91C_US0_CR
 (0xFFFC0000)

1526 
	#AT91C_US0_IER
 (0xFFFC0008)

1527 
	#AT91C_US0_IF
 (0xFFFC004C)

1528 
	#AT91C_US0_MR
 (0xFFFC0004)

1529 
	#AT91C_US0_IDR
 (0xFFFC000C)

1530 
	#AT91C_US0_CSR
 (0xFFFC0014)

1531 
	#AT91C_US0_THR
 (0xFFFC001C)

1533 
	#AT91C_TWI_RHR
 (0xFFFB8030)

1534 
	#AT91C_TWI_IDR
 (0xFFFB8028)

1535 
	#AT91C_TWI_SR
 (0xFFFB8020)

1536 
	#AT91C_TWI_CWGR
 (0xFFFB8010)

1537 
	#AT91C_TWI_SMR
 (0xFFFB8008)

1538 
	#AT91C_TWI_CR
 (0xFFFB8000)

1539 
	#AT91C_TWI_THR
 (0xFFFB8034)

1540 
	#AT91C_TWI_IMR
 (0xFFFB802C)

1541 
	#AT91C_TWI_IER
 (0xFFFB8024)

1542 
	#AT91C_TWI_IADR
 (0xFFFB800C)

1543 
	#AT91C_TWI_MMR
 (0xFFFB8004)

1545 
	#AT91C_TC2_IMR
 (0xFFFA00AC)

1546 
	#AT91C_TC2_IER
 (0xFFFA00A4)

1547 
	#AT91C_TC2_RC
 (0xFFFA009C)

1548 
	#AT91C_TC2_RA
 (0xFFFA0094)

1549 
	#AT91C_TC2_CMR
 (0xFFFA0084)

1550 
	#AT91C_TC2_IDR
 (0xFFFA00A8)

1551 
	#AT91C_TC2_SR
 (0xFFFA00A0)

1552 
	#AT91C_TC2_RB
 (0xFFFA0098)

1553 
	#AT91C_TC2_CV
 (0xFFFA0090)

1554 
	#AT91C_TC2_CCR
 (0xFFFA0080)

1556 
	#AT91C_TC1_IMR
 (0xFFFA006C)

1557 
	#AT91C_TC1_IER
 (0xFFFA0064)

1558 
	#AT91C_TC1_RC
 (0xFFFA005C)

1559 
	#AT91C_TC1_RA
 (0xFFFA0054)

1560 
	#AT91C_TC1_CMR
 (0xFFFA0044)

1561 
	#AT91C_TC1_IDR
 (0xFFFA0068)

1562 
	#AT91C_TC1_SR
 (0xFFFA0060)

1563 
	#AT91C_TC1_RB
 (0xFFFA0058)

1564 
	#AT91C_TC1_CV
 (0xFFFA0050)

1565 
	#AT91C_TC1_CCR
 (0xFFFA0040)

1567 
	#AT91C_TC0_IMR
 (0xFFFA002C)

1568 
	#AT91C_TC0_IER
 (0xFFFA0024)

1569 
	#AT91C_TC0_RC
 (0xFFFA001C)

1570 
	#AT91C_TC0_RA
 (0xFFFA0014)

1571 
	#AT91C_TC0_CMR
 (0xFFFA0004)

1572 
	#AT91C_TC0_IDR
 (0xFFFA0028)

1573 
	#AT91C_TC0_SR
 (0xFFFA0020)

1574 
	#AT91C_TC0_RB
 (0xFFFA0018)

1575 
	#AT91C_TC0_CV
 (0xFFFA0010)

1576 
	#AT91C_TC0_CCR
 (0xFFFA0000)

1578 
	#AT91C_TCB_BMR
 (0xFFFA00C4)

1579 
	#AT91C_TCB_BCR
 (0xFFFA00C0)

1581 
	#AT91C_CH3_CUPDR
 (0xFFFCC270)

1582 
	#AT91C_CH3_CPRDR
 (0xFFFCC268)

1583 
	#AT91C_CH3_CMR
 (0xFFFCC260)

1584 
	#AT91C_CH3_Re£rved
 (0xFFFCC274)

1585 
	#AT91C_CH3_CCNTR
 (0xFFFCC26C)

1586 
	#AT91C_CH3_CDTYR
 (0xFFFCC264)

1588 
	#AT91C_CH2_CUPDR
 (0xFFFCC250)

1589 
	#AT91C_CH2_CPRDR
 (0xFFFCC248)

1590 
	#AT91C_CH2_CMR
 (0xFFFCC240)

1591 
	#AT91C_CH2_Re£rved
 (0xFFFCC254)

1592 
	#AT91C_CH2_CCNTR
 (0xFFFCC24C)

1593 
	#AT91C_CH2_CDTYR
 (0xFFFCC244)

1595 
	#AT91C_CH1_CUPDR
 (0xFFFCC230)

1596 
	#AT91C_CH1_CPRDR
 (0xFFFCC228)

1597 
	#AT91C_CH1_CMR
 (0xFFFCC220)

1598 
	#AT91C_CH1_Re£rved
 (0xFFFCC234)

1599 
	#AT91C_CH1_CCNTR
 (0xFFFCC22C)

1600 
	#AT91C_CH1_CDTYR
 (0xFFFCC224)

1602 
	#AT91C_CH0_CUPDR
 (0xFFFCC210)

1603 
	#AT91C_CH0_CPRDR
 (0xFFFCC208)

1604 
	#AT91C_CH0_CMR
 (0xFFFCC200)

1605 
	#AT91C_CH0_Re£rved
 (0xFFFCC214)

1606 
	#AT91C_CH0_CCNTR
 (0xFFFCC20C)

1607 
	#AT91C_CH0_CDTYR
 (0xFFFCC204)

1609 
	#AT91C_PWMC_VR
 (0xFFFCC0FC)

1610 
	#AT91C_PWMC_ISR
 (0xFFFCC01C)

1611 
	#AT91C_PWMC_IDR
 (0xFFFCC014)

1612 
	#AT91C_PWMC_SR
 (0xFFFCC00C)

1613 
	#AT91C_PWMC_ENA
 (0xFFFCC004)

1614 
	#AT91C_PWMC_IMR
 (0xFFFCC018)

1615 
	#AT91C_PWMC_MR
 (0xFFFCC000)

1616 
	#AT91C_PWMC_DIS
 (0xFFFCC008)

1617 
	#AT91C_PWMC_IER
 (0xFFFCC010)

1619 
	#AT91C_UDP_ISR
 (0xFFFB001C)

1620 
	#AT91C_UDP_IDR
 (0xFFFB0014)

1621 
	#AT91C_UDP_GLBSTATE
 (0xFFFB0004)

1622 
	#AT91C_UDP_FDR
 (0xFFFB0050)

1623 
	#AT91C_UDP_CSR
 (0xFFFB0030)

1624 
	#AT91C_UDP_RSTEP
 (0xFFFB0028)

1625 
	#AT91C_UDP_ICR
 (0xFFFB0020)

1626 
	#AT91C_UDP_IMR
 (0xFFFB0018)

1627 
	#AT91C_UDP_IER
 (0xFFFB0010)

1628 
	#AT91C_UDP_FADDR
 (0xFFFB0008)

1629 
	#AT91C_UDP_NUM
 (0xFFFB0000)

1630 

	)

1634 
	#AT91C_PIO_PA0
 (1 << 0)

1635 
	#AT91C_PA0_PWM0
 (
AT91C_PIO_PA0
)

1636 
	#AT91C_PA0_TIOA0
 (
AT91C_PIO_PA0
)

1637 
	#AT91C_PIO_PA1
 (1 << 1)

1638 
	#AT91C_PA1_PWM1
 (
AT91C_PIO_PA1
)

1639 
	#AT91C_PA1_TIOB0
 (
AT91C_PIO_PA1
)

1640 
	#AT91C_PIO_PA10
 (1 << 10)

1641 
	#AT91C_PA10_DTXD
 (
AT91C_PIO_PA10
)

1642 
	#AT91C_PA10_NPCS2
 (
AT91C_PIO_PA10
)

1643 
	#AT91C_PIO_PA11
 (1 << 11)

1644 
	#AT91C_PA11_NPCS0
 (
AT91C_PIO_PA11
)

1645 
	#AT91C_PA11_PWM0
 (
AT91C_PIO_PA11
)

1646 
	#AT91C_PIO_PA12
 (1 << 12)

1647 
	#AT91C_PA12_MISO
 (
AT91C_PIO_PA12
)

1648 
	#AT91C_PA12_PWM1
 (
AT91C_PIO_PA12
)

1649 
	#AT91C_PIO_PA13
 (1 << 13)

1650 
	#AT91C_PA13_MOSI
 (
AT91C_PIO_PA13
)

1651 
	#AT91C_PA13_PWM2
 (
AT91C_PIO_PA13
)

1652 
	#AT91C_PIO_PA14
 (1 << 14)

1653 
	#AT91C_PA14_SPCK
 (
AT91C_PIO_PA14
)

1654 
	#AT91C_PA14_PWM3
 (
AT91C_PIO_PA14
)

1655 
	#AT91C_PIO_PA15
 (1 << 15)

1656 
	#AT91C_PA15_TF
 (
AT91C_PIO_PA15
)

1657 
	#AT91C_PA15_TIOA1
 (
AT91C_PIO_PA15
)

1658 
	#AT91C_PIO_PA16
 (1 << 16)

1659 
	#AT91C_PA16_TK
 (
AT91C_PIO_PA16
)

1660 
	#AT91C_PA16_TIOB1
 (
AT91C_PIO_PA16
)

1661 
	#AT91C_PIO_PA17
 (1 << 17)

1662 
	#AT91C_PA17_TD
 (
AT91C_PIO_PA17
)

1663 
	#AT91C_PA17_PCK1
 (
AT91C_PIO_PA17
)

1664 
	#AT91C_PIO_PA18
 (1 << 18)

1665 
	#AT91C_PA18_RD
 (
AT91C_PIO_PA18
)

1666 
	#AT91C_PA18_PCK2
 (
AT91C_PIO_PA18
)

1667 
	#AT91C_PIO_PA19
 (1 << 19)

1668 
	#AT91C_PA19_RK
 (
AT91C_PIO_PA19
)

1669 
	#AT91C_PA19_FIQ
 (
AT91C_PIO_PA19
)

1670 
	#AT91C_PIO_PA2
 (1 << 2)

1671 
	#AT91C_PA2_PWM2
 (
AT91C_PIO_PA2
)

1672 
	#AT91C_PA2_SCK0
 (
AT91C_PIO_PA2
)

1673 
	#AT91C_PIO_PA20
 (1 << 20)

1674 
	#AT91C_PA20_RF
 (
AT91C_PIO_PA20
)

1675 
	#AT91C_PA20_IRQ0
 (
AT91C_PIO_PA20
)

1676 
	#AT91C_PIO_PA21
 (1 << 21)

1677 
	#AT91C_PA21_RXD1
 (
AT91C_PIO_PA21
)

1678 
	#AT91C_PA21_PCK1
 (
AT91C_PIO_PA21
)

1679 
	#AT91C_PIO_PA22
 (1 << 22)

1680 
	#AT91C_PA22_TXD1
 (
AT91C_PIO_PA22
)

1681 
	#AT91C_PA22_NPCS3
 (
AT91C_PIO_PA22
)

1682 
	#AT91C_PIO_PA23
 (1 << 23)

1683 
	#AT91C_PA23_SCK1
 (
AT91C_PIO_PA23
)

1684 
	#AT91C_PA23_PWM0
 (
AT91C_PIO_PA23
)

1685 
	#AT91C_PIO_PA24
 (1 << 24)

1686 
	#AT91C_PA24_RTS1
 (
AT91C_PIO_PA24
)

1687 
	#AT91C_PA24_PWM1
 (
AT91C_PIO_PA24
)

1688 
	#AT91C_PIO_PA25
 (1 << 25)

1689 
	#AT91C_PA25_CTS1
 (
AT91C_PIO_PA25
)

1690 
	#AT91C_PA25_PWM2
 (
AT91C_PIO_PA25
)

1691 
	#AT91C_PIO_PA26
 (1 << 26)

1692 
	#AT91C_PA26_DCD1
 (
AT91C_PIO_PA26
)

1693 
	#AT91C_PA26_TIOA2
 (
AT91C_PIO_PA26
)

1694 
	#AT91C_PIO_PA27
 (1 << 27)

1695 
	#AT91C_PA27_DTR1
 (
AT91C_PIO_PA27
)

1696 
	#AT91C_PA27_TIOB2
 (
AT91C_PIO_PA27
)

1697 
	#AT91C_PIO_PA28
 (1 << 28)

1698 
	#AT91C_PA28_DSR1
 (
AT91C_PIO_PA28
)

1699 
	#AT91C_PA28_TCLK1
 (
AT91C_PIO_PA28
)

1700 
	#AT91C_PIO_PA29
 (1 << 29)

1701 
	#AT91C_PA29_RI1
 (
AT91C_PIO_PA29
)

1702 
	#AT91C_PA29_TCLK2
 (
AT91C_PIO_PA29
)

1703 
	#AT91C_PIO_PA3
 (1 << 3)

1704 
	#AT91C_PA3_TWD
 (
AT91C_PIO_PA3
)

1705 
	#AT91C_PA3_NPCS3
 (
AT91C_PIO_PA3
)

1706 
	#AT91C_PIO_PA30
 (1 << 30)

1707 
	#AT91C_PA30_IRQ1
 (
AT91C_PIO_PA30
)

1708 
	#AT91C_PA30_NPCS2
 (
AT91C_PIO_PA30
)

1709 
	#AT91C_PIO_PA31
 (1 << 31)

1710 
	#AT91C_PA31_NPCS1
 (
AT91C_PIO_PA31
)

1711 
	#AT91C_PA31_PCK2
 (
AT91C_PIO_PA31
)

1712 
	#AT91C_PIO_PA4
 (1 << 4)

1713 
	#AT91C_PA4_TWCK
 (
AT91C_PIO_PA4
)

1714 
	#AT91C_PA4_TCLK0
 (
AT91C_PIO_PA4
)

1715 
	#AT91C_PIO_PA5
 (1 << 5)

1716 
	#AT91C_PA5_RXD0
 (
AT91C_PIO_PA5
)

1717 
	#AT91C_PA5_NPCS3
 (
AT91C_PIO_PA5
)

1718 
	#AT91C_PIO_PA6
 (1 << 6)

1719 
	#AT91C_PA6_TXD0
 (
AT91C_PIO_PA6
)

1720 
	#AT91C_PA6_PCK0
 (
AT91C_PIO_PA6
)

1721 
	#AT91C_PIO_PA7
 (1 << 7)

1722 
	#AT91C_PA7_RTS0
 (
AT91C_PIO_PA7
)

1723 
	#AT91C_PA7_PWM3
 (
AT91C_PIO_PA7
)

1724 
	#AT91C_PIO_PA8
 (1 << 8)

1725 
	#AT91C_PA8_CTS0
 (
AT91C_PIO_PA8
)

1726 
	#AT91C_PA8_ADTRG
 (
AT91C_PIO_PA8
)

1727 
	#AT91C_PIO_PA9
 (1 << 9)

1728 
	#AT91C_PA9_DRXD
 (
AT91C_PIO_PA9
)

1729 
	#AT91C_PA9_NPCS1
 (
AT91C_PIO_PA9
)

1730 

	)

1734 
	#AT91C_ID_FIQ
 ( 0)

1735 
	#AT91C_ID_SYS
 ( 1)

1736 
	#AT91C_ID_PIOA
 ( 2)

1737 
	#AT91C_ID_3_Re£rved
 ( 3)

1738 
	#AT91C_ID_ADC
 ( 4)

1739 
	#AT91C_ID_SPI
 ( 5)

1740 
	#AT91C_ID_US0
 ( 6)

1741 
	#AT91C_ID_US1
 ( 7)

1742 
	#AT91C_ID_SSC
 ( 8)

1743 
	#AT91C_ID_TWI
 ( 9)

1744 
	#AT91C_ID_PWMC
 (10)

1745 
	#AT91C_ID_UDP
 (11)

1746 
	#AT91C_ID_TC0
 (12)

1747 
	#AT91C_ID_TC1
 (13)

1748 
	#AT91C_ID_TC2
 (14)

1749 
	#AT91C_ID_15_Re£rved
 (15)

1750 
	#AT91C_ID_16_Re£rved
 (16)

1751 
	#AT91C_ID_17_Re£rved
 (17)

1752 
	#AT91C_ID_18_Re£rved
 (18)

1753 
	#AT91C_ID_19_Re£rved
 (19)

1754 
	#AT91C_ID_20_Re£rved
 (20)

1755 
	#AT91C_ID_21_Re£rved
 (21)

1756 
	#AT91C_ID_22_Re£rved
 (22)

1757 
	#AT91C_ID_23_Re£rved
 (23)

1758 
	#AT91C_ID_24_Re£rved
 (24)

1759 
	#AT91C_ID_25_Re£rved
 (25)

1760 
	#AT91C_ID_26_Re£rved
 (26)

1761 
	#AT91C_ID_27_Re£rved
 (27)

1762 
	#AT91C_ID_28_Re£rved
 (28)

1763 
	#AT91C_ID_29_Re£rved
 (29)

1764 
	#AT91C_ID_IRQ0
 (30)

1765 
	#AT91C_ID_IRQ1
 (31)

1766 

	)

1770 
	#AT91C_BASE_SYSC
 (0xFFFFF000)

1771 
	#AT91C_BASE_AIC
 (0xFFFFF000)

1772 
	#AT91C_BASE_DBGU
 (0xFFFFF200)

1773 
	#AT91C_BASE_PDC_DBGU
 (0xFFFFF300)

1774 
	#AT91C_BASE_PIOA
 (0xFFFFF400)

1775 
	#AT91C_BASE_CKGR
 (0xFFFFFC20)

1776 
	#AT91C_BASE_PMC
 (0xFFFFFC00)

1777 
	#AT91C_BASE_RSTC
 (0xFFFFFD00)

1778 
	#AT91C_BASE_RTTC
 (0xFFFFFD20)

1779 
	#AT91C_BASE_PITC
 (0xFFFFFD30)

1780 
	#AT91C_BASE_WDTC
 (0xFFFFFD40)

1781 
	#AT91C_BASE_MC
 (0xFFFFFF00)

1782 
	#AT91C_BASE_PDC_SPI
 (0xFFFE0100)

1783 
	#AT91C_BASE_SPI
 (0xFFFE0000)

1784 
	#AT91C_BASE_PDC_ADC
 (0xFFFD8100)

1785 
	#AT91C_BASE_ADC
 (0xFFFD8000)

1786 
	#AT91C_BASE_PDC_SSC
 (0xFFFD4100)

1787 
	#AT91C_BASE_SSC
 (0xFFFD4000)

1788 
	#AT91C_BASE_PDC_US1
 (0xFFFC4100)

1789 
	#AT91C_BASE_US1
 (0xFFFC4000)

1790 
	#AT91C_BASE_PDC_US0
 (0xFFFC0100)

1791 
	#AT91C_BASE_US0
 (0xFFFC0000)

1792 
	#AT91C_BASE_TWI
 (0xFFFB8000)

1793 
	#AT91C_BASE_TC2
 (0xFFFA0080)

1794 
	#AT91C_BASE_TC1
 (0xFFFA0040)

1795 
	#AT91C_BASE_TC0
 (0xFFFA0000)

1796 
	#AT91C_BASE_TCB
 (0xFFFA0000)

1797 
	#AT91C_BASE_PWMC_CH3
 (0xFFFCC260)

1798 
	#AT91C_BASE_PWMC_CH2
 (0xFFFCC240)

1799 
	#AT91C_BASE_PWMC_CH1
 (0xFFFCC220)

1800 
	#AT91C_BASE_PWMC_CH0
 (0xFFFCC200)

1801 
	#AT91C_BASE_PWMC
 (0xFFFCC000)

1802 
	#AT91C_BASE_UDP
 (0xFFFB0000)

1803 

	)

1807 
	#AT91C_ISRAM
 (0x00200000)

1808 
	#AT91C_ISRAM_SIZE
 (0x00004000)

1809 
	#AT91C_IFLASH
 (0x00100000)

1810 
	#AT91C_IFLASH_SIZE
 (0x00010000)

1811 

	)

	@portable/IAR/AtmelSAM7S64/AT91SAM7X128.h

46 #i‚de‡
AT91SAM7X128_H


47 
	#AT91SAM7X128_H


	)

49 vﬁ©ûê
	tAT91_REG
;

54 
	s_AT91S_SYS
 {

55 
AT91_REG
 
	mAIC_SMR
[32];

56 
AT91_REG
 
	mAIC_SVR
[32];

57 
AT91_REG
 
	mAIC_IVR
;

58 
AT91_REG
 
	mAIC_FVR
;

59 
AT91_REG
 
	mAIC_ISR
;

60 
AT91_REG
 
	mAIC_IPR
;

61 
AT91_REG
 
	mAIC_IMR
;

62 
AT91_REG
 
	mAIC_CISR
;

63 
AT91_REG
 
	mRe£rved0
[2];

64 
AT91_REG
 
	mAIC_IECR
;

65 
AT91_REG
 
	mAIC_IDCR
;

66 
AT91_REG
 
	mAIC_ICCR
;

67 
AT91_REG
 
	mAIC_ISCR
;

68 
AT91_REG
 
	mAIC_EOICR
;

69 
AT91_REG
 
	mAIC_SPU
;

70 
AT91_REG
 
	mAIC_DCR
;

71 
AT91_REG
 
	mRe£rved1
[1];

72 
AT91_REG
 
	mAIC_FFER
;

73 
AT91_REG
 
	mAIC_FFDR
;

74 
AT91_REG
 
	mAIC_FFSR
;

75 
AT91_REG
 
	mRe£rved2
[45];

76 
AT91_REG
 
	mDBGU_CR
;

77 
AT91_REG
 
	mDBGU_MR
;

78 
AT91_REG
 
	mDBGU_IER
;

79 
AT91_REG
 
	mDBGU_IDR
;

80 
AT91_REG
 
	mDBGU_IMR
;

81 
AT91_REG
 
	mDBGU_CSR
;

82 
AT91_REG
 
	mDBGU_RHR
;

83 
AT91_REG
 
	mDBGU_THR
;

84 
AT91_REG
 
	mDBGU_BRGR
;

85 
AT91_REG
 
	mRe£rved3
[7];

86 
AT91_REG
 
	mDBGU_CIDR
;

87 
AT91_REG
 
	mDBGU_EXID
;

88 
AT91_REG
 
	mDBGU_FNTR
;

89 
AT91_REG
 
	mRe£rved4
[45];

90 
AT91_REG
 
	mDBGU_RPR
;

91 
AT91_REG
 
	mDBGU_RCR
;

92 
AT91_REG
 
	mDBGU_TPR
;

93 
AT91_REG
 
	mDBGU_TCR
;

94 
AT91_REG
 
	mDBGU_RNPR
;

95 
AT91_REG
 
	mDBGU_RNCR
;

96 
AT91_REG
 
	mDBGU_TNPR
;

97 
AT91_REG
 
	mDBGU_TNCR
;

98 
AT91_REG
 
	mDBGU_PTCR
;

99 
AT91_REG
 
	mDBGU_PTSR
;

100 
AT91_REG
 
	mRe£rved5
[54];

101 
AT91_REG
 
	mPIOA_PER
;

102 
AT91_REG
 
	mPIOA_PDR
;

103 
AT91_REG
 
	mPIOA_PSR
;

104 
AT91_REG
 
	mRe£rved6
[1];

105 
AT91_REG
 
	mPIOA_OER
;

106 
AT91_REG
 
	mPIOA_ODR
;

107 
AT91_REG
 
	mPIOA_OSR
;

108 
AT91_REG
 
	mRe£rved7
[1];

109 
AT91_REG
 
	mPIOA_IFER
;

110 
AT91_REG
 
	mPIOA_IFDR
;

111 
AT91_REG
 
	mPIOA_IFSR
;

112 
AT91_REG
 
	mRe£rved8
[1];

113 
AT91_REG
 
	mPIOA_SODR
;

114 
AT91_REG
 
	mPIOA_CODR
;

115 
AT91_REG
 
	mPIOA_ODSR
;

116 
AT91_REG
 
	mPIOA_PDSR
;

117 
AT91_REG
 
	mPIOA_IER
;

118 
AT91_REG
 
	mPIOA_IDR
;

119 
AT91_REG
 
	mPIOA_IMR
;

120 
AT91_REG
 
	mPIOA_ISR
;

121 
AT91_REG
 
	mPIOA_MDER
;

122 
AT91_REG
 
	mPIOA_MDDR
;

123 
AT91_REG
 
	mPIOA_MDSR
;

124 
AT91_REG
 
	mRe£rved9
[1];

125 
AT91_REG
 
	mPIOA_PPUDR
;

126 
AT91_REG
 
	mPIOA_PPUER
;

127 
AT91_REG
 
	mPIOA_PPUSR
;

128 
AT91_REG
 
	mRe£rved10
[1];

129 
AT91_REG
 
	mPIOA_ASR
;

130 
AT91_REG
 
	mPIOA_BSR
;

131 
AT91_REG
 
	mPIOA_ABSR
;

132 
AT91_REG
 
	mRe£rved11
[9];

133 
AT91_REG
 
	mPIOA_OWER
;

134 
AT91_REG
 
	mPIOA_OWDR
;

135 
AT91_REG
 
	mPIOA_OWSR
;

136 
AT91_REG
 
	mRe£rved12
[85];

137 
AT91_REG
 
	mPIOB_PER
;

138 
AT91_REG
 
	mPIOB_PDR
;

139 
AT91_REG
 
	mPIOB_PSR
;

140 
AT91_REG
 
	mRe£rved13
[1];

141 
AT91_REG
 
	mPIOB_OER
;

142 
AT91_REG
 
	mPIOB_ODR
;

143 
AT91_REG
 
	mPIOB_OSR
;

144 
AT91_REG
 
	mRe£rved14
[1];

145 
AT91_REG
 
	mPIOB_IFER
;

146 
AT91_REG
 
	mPIOB_IFDR
;

147 
AT91_REG
 
	mPIOB_IFSR
;

148 
AT91_REG
 
	mRe£rved15
[1];

149 
AT91_REG
 
	mPIOB_SODR
;

150 
AT91_REG
 
	mPIOB_CODR
;

151 
AT91_REG
 
	mPIOB_ODSR
;

152 
AT91_REG
 
	mPIOB_PDSR
;

153 
AT91_REG
 
	mPIOB_IER
;

154 
AT91_REG
 
	mPIOB_IDR
;

155 
AT91_REG
 
	mPIOB_IMR
;

156 
AT91_REG
 
	mPIOB_ISR
;

157 
AT91_REG
 
	mPIOB_MDER
;

158 
AT91_REG
 
	mPIOB_MDDR
;

159 
AT91_REG
 
	mPIOB_MDSR
;

160 
AT91_REG
 
	mRe£rved16
[1];

161 
AT91_REG
 
	mPIOB_PPUDR
;

162 
AT91_REG
 
	mPIOB_PPUER
;

163 
AT91_REG
 
	mPIOB_PPUSR
;

164 
AT91_REG
 
	mRe£rved17
[1];

165 
AT91_REG
 
	mPIOB_ASR
;

166 
AT91_REG
 
	mPIOB_BSR
;

167 
AT91_REG
 
	mPIOB_ABSR
;

168 
AT91_REG
 
	mRe£rved18
[9];

169 
AT91_REG
 
	mPIOB_OWER
;

170 
AT91_REG
 
	mPIOB_OWDR
;

171 
AT91_REG
 
	mPIOB_OWSR
;

172 
AT91_REG
 
	mRe£rved19
[341];

173 
AT91_REG
 
	mPMC_SCER
;

174 
AT91_REG
 
	mPMC_SCDR
;

175 
AT91_REG
 
	mPMC_SCSR
;

176 
AT91_REG
 
	mRe£rved20
[1];

177 
AT91_REG
 
	mPMC_PCER
;

178 
AT91_REG
 
	mPMC_PCDR
;

179 
AT91_REG
 
	mPMC_PCSR
;

180 
AT91_REG
 
	mRe£rved21
[1];

181 
AT91_REG
 
	mPMC_MOR
;

182 
AT91_REG
 
	mPMC_MCFR
;

183 
AT91_REG
 
	mRe£rved22
[1];

184 
AT91_REG
 
	mPMC_PLLR
;

185 
AT91_REG
 
	mPMC_MCKR
;

186 
AT91_REG
 
	mRe£rved23
[3];

187 
AT91_REG
 
	mPMC_PCKR
[4];

188 
AT91_REG
 
	mRe£rved24
[4];

189 
AT91_REG
 
	mPMC_IER
;

190 
AT91_REG
 
	mPMC_IDR
;

191 
AT91_REG
 
	mPMC_SR
;

192 
AT91_REG
 
	mPMC_IMR
;

193 
AT91_REG
 
	mRe£rved25
[36];

194 
AT91_REG
 
	mRSTC_RCR
;

195 
AT91_REG
 
	mRSTC_RSR
;

196 
AT91_REG
 
	mRSTC_RMR
;

197 
AT91_REG
 
	mRe£rved26
[5];

198 
AT91_REG
 
	mRTTC_RTMR
;

199 
AT91_REG
 
	mRTTC_RTAR
;

200 
AT91_REG
 
	mRTTC_RTVR
;

201 
AT91_REG
 
	mRTTC_RTSR
;

202 
AT91_REG
 
	mPITC_PIMR
;

203 
AT91_REG
 
	mPITC_PISR
;

204 
AT91_REG
 
	mPITC_PIVR
;

205 
AT91_REG
 
	mPITC_PIIR
;

206 
AT91_REG
 
	mWDTC_WDCR
;

207 
AT91_REG
 
	mWDTC_WDMR
;

208 
AT91_REG
 
	mWDTC_WDSR
;

209 
AT91_REG
 
	mRe£rved27
[5];

210 
AT91_REG
 
	mVREG_MR
;

211 } 
	tAT91S_SYS
, *
	tAT91PS_SYS
;

217 
	s_AT91S_AIC
 {

218 
AT91_REG
 
	mAIC_SMR
[32];

219 
AT91_REG
 
	mAIC_SVR
[32];

220 
AT91_REG
 
	mAIC_IVR
;

221 
AT91_REG
 
	mAIC_FVR
;

222 
AT91_REG
 
	mAIC_ISR
;

223 
AT91_REG
 
	mAIC_IPR
;

224 
AT91_REG
 
	mAIC_IMR
;

225 
AT91_REG
 
	mAIC_CISR
;

226 
AT91_REG
 
	mRe£rved0
[2];

227 
AT91_REG
 
	mAIC_IECR
;

228 
AT91_REG
 
	mAIC_IDCR
;

229 
AT91_REG
 
	mAIC_ICCR
;

230 
AT91_REG
 
	mAIC_ISCR
;

231 
AT91_REG
 
	mAIC_EOICR
;

232 
AT91_REG
 
	mAIC_SPU
;

233 
AT91_REG
 
	mAIC_DCR
;

234 
AT91_REG
 
	mRe£rved1
[1];

235 
AT91_REG
 
	mAIC_FFER
;

236 
AT91_REG
 
	mAIC_FFDR
;

237 
AT91_REG
 
	mAIC_FFSR
;

238 } 
	tAT91S_AIC
, *
	tAT91PS_AIC
;

241 
	#AT91C_AIC_PRIOR
 (() 0x7 << 0)

242 
	#AT91C_AIC_PRIOR_LOWEST
 (() 0x0)

243 
	#AT91C_AIC_PRIOR_HIGHEST
 (() 0x7)

244 
	#AT91C_AIC_SRCTYPE
 (() 0x3 << 5)

245 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (() 0x0 << 5)

246 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (() 0x0 << 5)

247 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (() 0x1 << 5)

248 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (() 0x1 << 5)

249 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (() 0x2 << 5)

250 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (() 0x3 << 5)

252 
	#AT91C_AIC_NFIQ
 (() 0x1 << 0)

253 
	#AT91C_AIC_NIRQ
 (() 0x1 << 1)

255 
	#AT91C_AIC_DCR_PROT
 (() 0x1 << 0)

256 
	#AT91C_AIC_DCR_GMSK
 (() 0x1 << 1)

257 

	)

261 
	s_AT91S_PDC
 {

262 
AT91_REG
 
	mPDC_RPR
;

263 
AT91_REG
 
	mPDC_RCR
;

264 
AT91_REG
 
	mPDC_TPR
;

265 
AT91_REG
 
	mPDC_TCR
;

266 
AT91_REG
 
	mPDC_RNPR
;

267 
AT91_REG
 
	mPDC_RNCR
;

268 
AT91_REG
 
	mPDC_TNPR
;

269 
AT91_REG
 
	mPDC_TNCR
;

270 
AT91_REG
 
	mPDC_PTCR
;

271 
AT91_REG
 
	mPDC_PTSR
;

272 } 
	tAT91S_PDC
, *
	tAT91PS_PDC
;

275 
	#AT91C_PDC_RXTEN
 (() 0x1 << 0)

276 
	#AT91C_PDC_RXTDIS
 (() 0x1 << 1)

277 
	#AT91C_PDC_TXTEN
 (() 0x1 << 8)

278 
	#AT91C_PDC_TXTDIS
 (() 0x1 << 9)

280 

	)

284 
	s_AT91S_DBGU
 {

285 
AT91_REG
 
	mDBGU_CR
;

286 
AT91_REG
 
	mDBGU_MR
;

287 
AT91_REG
 
	mDBGU_IER
;

288 
AT91_REG
 
	mDBGU_IDR
;

289 
AT91_REG
 
	mDBGU_IMR
;

290 
AT91_REG
 
	mDBGU_CSR
;

291 
AT91_REG
 
	mDBGU_RHR
;

292 
AT91_REG
 
	mDBGU_THR
;

293 
AT91_REG
 
	mDBGU_BRGR
;

294 
AT91_REG
 
	mRe£rved0
[7];

295 
AT91_REG
 
	mDBGU_CIDR
;

296 
AT91_REG
 
	mDBGU_EXID
;

297 
AT91_REG
 
	mDBGU_FNTR
;

298 
AT91_REG
 
	mRe£rved1
[45];

299 
AT91_REG
 
	mDBGU_RPR
;

300 
AT91_REG
 
	mDBGU_RCR
;

301 
AT91_REG
 
	mDBGU_TPR
;

302 
AT91_REG
 
	mDBGU_TCR
;

303 
AT91_REG
 
	mDBGU_RNPR
;

304 
AT91_REG
 
	mDBGU_RNCR
;

305 
AT91_REG
 
	mDBGU_TNPR
;

306 
AT91_REG
 
	mDBGU_TNCR
;

307 
AT91_REG
 
	mDBGU_PTCR
;

308 
AT91_REG
 
	mDBGU_PTSR
;

309 } 
	tAT91S_DBGU
, *
	tAT91PS_DBGU
;

312 
	#AT91C_US_RSTRX
 (() 0x1 << 2)

313 
	#AT91C_US_RSTTX
 (() 0x1 << 3)

314 
	#AT91C_US_RXEN
 (() 0x1 << 4)

315 
	#AT91C_US_RXDIS
 (() 0x1 << 5)

316 
	#AT91C_US_TXEN
 (() 0x1 << 6)

317 
	#AT91C_US_TXDIS
 (() 0x1 << 7)

318 
	#AT91C_US_RSTSTA
 (() 0x1 << 8)

320 
	#AT91C_US_PAR
 (() 0x7 << 9)

321 
	#AT91C_US_PAR_EVEN
 (() 0x0 << 9)

322 
	#AT91C_US_PAR_ODD
 (() 0x1 << 9)

323 
	#AT91C_US_PAR_SPACE
 (() 0x2 << 9)

324 
	#AT91C_US_PAR_MARK
 (() 0x3 << 9)

325 
	#AT91C_US_PAR_NONE
 (() 0x4 << 9)

326 
	#AT91C_US_PAR_MULTI_DROP
 (() 0x6 << 9)

327 
	#AT91C_US_CHMODE
 (() 0x3 << 14)

328 
	#AT91C_US_CHMODE_NORMAL
 (() 0x0 << 14)

329 
	#AT91C_US_CHMODE_AUTO
 (() 0x1 << 14)

330 
	#AT91C_US_CHMODE_LOCAL
 (() 0x2 << 14)

331 
	#AT91C_US_CHMODE_REMOTE
 (() 0x3 << 14)

333 
	#AT91C_US_RXRDY
 (() 0x1 << 0)

334 
	#AT91C_US_TXRDY
 (() 0x1 << 1)

335 
	#AT91C_US_ENDRX
 (() 0x1 << 3)

336 
	#AT91C_US_ENDTX
 (() 0x1 << 4)

337 
	#AT91C_US_OVRE
 (() 0x1 << 5)

338 
	#AT91C_US_FRAME
 (() 0x1 << 6)

339 
	#AT91C_US_PARE
 (() 0x1 << 7)

340 
	#AT91C_US_TXEMPTY
 (() 0x1 << 9)

341 
	#AT91C_US_TXBUFE
 (() 0x1 << 11)

342 
	#AT91C_US_RXBUFF
 (() 0x1 << 12)

343 
	#AT91C_US_COMM_TX
 (() 0x1 << 30)

344 
	#AT91C_US_COMM_RX
 (() 0x1 << 31)

349 
	#AT91C_US_FORCE_NTRST
 (() 0x1 << 0)

350 

	)

354 
	s_AT91S_PIO
 {

355 
AT91_REG
 
	mPIO_PER
;

356 
AT91_REG
 
	mPIO_PDR
;

357 
AT91_REG
 
	mPIO_PSR
;

358 
AT91_REG
 
	mRe£rved0
[1];

359 
AT91_REG
 
	mPIO_OER
;

360 
AT91_REG
 
	mPIO_ODR
;

361 
AT91_REG
 
	mPIO_OSR
;

362 
AT91_REG
 
	mRe£rved1
[1];

363 
AT91_REG
 
	mPIO_IFER
;

364 
AT91_REG
 
	mPIO_IFDR
;

365 
AT91_REG
 
	mPIO_IFSR
;

366 
AT91_REG
 
	mRe£rved2
[1];

367 
AT91_REG
 
	mPIO_SODR
;

368 
AT91_REG
 
	mPIO_CODR
;

369 
AT91_REG
 
	mPIO_ODSR
;

370 
AT91_REG
 
	mPIO_PDSR
;

371 
AT91_REG
 
	mPIO_IER
;

372 
AT91_REG
 
	mPIO_IDR
;

373 
AT91_REG
 
	mPIO_IMR
;

374 
AT91_REG
 
	mPIO_ISR
;

375 
AT91_REG
 
	mPIO_MDER
;

376 
AT91_REG
 
	mPIO_MDDR
;

377 
AT91_REG
 
	mPIO_MDSR
;

378 
AT91_REG
 
	mRe£rved3
[1];

379 
AT91_REG
 
	mPIO_PPUDR
;

380 
AT91_REG
 
	mPIO_PPUER
;

381 
AT91_REG
 
	mPIO_PPUSR
;

382 
AT91_REG
 
	mRe£rved4
[1];

383 
AT91_REG
 
	mPIO_ASR
;

384 
AT91_REG
 
	mPIO_BSR
;

385 
AT91_REG
 
	mPIO_ABSR
;

386 
AT91_REG
 
	mRe£rved5
[9];

387 
AT91_REG
 
	mPIO_OWER
;

388 
AT91_REG
 
	mPIO_OWDR
;

389 
AT91_REG
 
	mPIO_OWSR
;

390 } 
	tAT91S_PIO
, *
	tAT91PS_PIO
;

396 
	s_AT91S_CKGR
 {

397 
AT91_REG
 
	mCKGR_MOR
;

398 
AT91_REG
 
	mCKGR_MCFR
;

399 
AT91_REG
 
	mRe£rved0
[1];

400 
AT91_REG
 
	mCKGR_PLLR
;

401 } 
	tAT91S_CKGR
, *
	tAT91PS_CKGR
;

404 
	#AT91C_CKGR_MOSCEN
 (() 0x1 << 0)

405 
	#AT91C_CKGR_OSCBYPASS
 (() 0x1 << 1)

406 
	#AT91C_CKGR_OSCOUNT
 (() 0xFF << 8)

408 
	#AT91C_CKGR_MAINF
 (() 0xFFFF << 0)

409 
	#AT91C_CKGR_MAINRDY
 (() 0x1 << 16)

411 
	#AT91C_CKGR_DIV
 (() 0xFF << 0)

412 
	#AT91C_CKGR_DIV_0
 (() 0x0)

413 
	#AT91C_CKGR_DIV_BYPASS
 (() 0x1)

414 
	#AT91C_CKGR_PLLCOUNT
 (() 0x3F << 8)

415 
	#AT91C_CKGR_OUT
 (() 0x3 << 14)

416 
	#AT91C_CKGR_OUT_0
 (() 0x0 << 14)

417 
	#AT91C_CKGR_OUT_1
 (() 0x1 << 14)

418 
	#AT91C_CKGR_OUT_2
 (() 0x2 << 14)

419 
	#AT91C_CKGR_OUT_3
 (() 0x3 << 14)

420 
	#AT91C_CKGR_MUL
 (() 0x7FF << 16)

421 
	#AT91C_CKGR_USBDIV
 (() 0x3 << 28)

422 
	#AT91C_CKGR_USBDIV_0
 (() 0x0 << 28)

423 
	#AT91C_CKGR_USBDIV_1
 (() 0x1 << 28)

424 
	#AT91C_CKGR_USBDIV_2
 (() 0x2 << 28)

425 

	)

429 
	s_AT91S_PMC
 {

430 
AT91_REG
 
	mPMC_SCER
;

431 
AT91_REG
 
	mPMC_SCDR
;

432 
AT91_REG
 
	mPMC_SCSR
;

433 
AT91_REG
 
	mRe£rved0
[1];

434 
AT91_REG
 
	mPMC_PCER
;

435 
AT91_REG
 
	mPMC_PCDR
;

436 
AT91_REG
 
	mPMC_PCSR
;

437 
AT91_REG
 
	mRe£rved1
[1];

438 
AT91_REG
 
	mPMC_MOR
;

439 
AT91_REG
 
	mPMC_MCFR
;

440 
AT91_REG
 
	mRe£rved2
[1];

441 
AT91_REG
 
	mPMC_PLLR
;

442 
AT91_REG
 
	mPMC_MCKR
;

443 
AT91_REG
 
	mRe£rved3
[3];

444 
AT91_REG
 
	mPMC_PCKR
[4];

445 
AT91_REG
 
	mRe£rved4
[4];

446 
AT91_REG
 
	mPMC_IER
;

447 
AT91_REG
 
	mPMC_IDR
;

448 
AT91_REG
 
	mPMC_SR
;

449 
AT91_REG
 
	mPMC_IMR
;

450 } 
	tAT91S_PMC
, *
	tAT91PS_PMC
;

453 
	#AT91C_PMC_PCK
 (() 0x1 << 0)

454 
	#AT91C_PMC_UDP
 (() 0x1 << 7)

455 
	#AT91C_PMC_PCK0
 (() 0x1 << 8)

456 
	#AT91C_PMC_PCK1
 (() 0x1 << 9)

457 
	#AT91C_PMC_PCK2
 (() 0x1 << 10)

458 
	#AT91C_PMC_PCK3
 (() 0x1 << 11)

465 
	#AT91C_PMC_CSS
 (() 0x3 << 0)

466 
	#AT91C_PMC_CSS_SLOW_CLK
 (() 0x0)

467 
	#AT91C_PMC_CSS_MAIN_CLK
 (() 0x1)

468 
	#AT91C_PMC_CSS_PLL_CLK
 (() 0x3)

469 
	#AT91C_PMC_PRES
 (() 0x7 << 2)

470 
	#AT91C_PMC_PRES_CLK
 (() 0x0 << 2)

471 
	#AT91C_PMC_PRES_CLK_2
 (() 0x1 << 2)

472 
	#AT91C_PMC_PRES_CLK_4
 (() 0x2 << 2)

473 
	#AT91C_PMC_PRES_CLK_8
 (() 0x3 << 2)

474 
	#AT91C_PMC_PRES_CLK_16
 (() 0x4 << 2)

475 
	#AT91C_PMC_PRES_CLK_32
 (() 0x5 << 2)

476 
	#AT91C_PMC_PRES_CLK_64
 (() 0x6 << 2)

479 
	#AT91C_PMC_MOSCS
 (() 0x1 << 0)

480 
	#AT91C_PMC_LOCK
 (() 0x1 << 2)

481 
	#AT91C_PMC_MCKRDY
 (() 0x1 << 3)

482 
	#AT91C_PMC_PCK0RDY
 (() 0x1 << 8)

483 
	#AT91C_PMC_PCK1RDY
 (() 0x1 << 9)

484 
	#AT91C_PMC_PCK2RDY
 (() 0x1 << 10)

485 
	#AT91C_PMC_PCK3RDY
 (() 0x1 << 11)

489 

	)

493 
	s_AT91S_RSTC
 {

494 
AT91_REG
 
	mRSTC_RCR
;

495 
AT91_REG
 
	mRSTC_RSR
;

496 
AT91_REG
 
	mRSTC_RMR
;

497 } 
	tAT91S_RSTC
, *
	tAT91PS_RSTC
;

500 
	#AT91C_RSTC_PROCRST
 (() 0x1 << 0)

501 
	#AT91C_RSTC_PERRST
 (() 0x1 << 2)

502 
	#AT91C_RSTC_EXTRST
 (() 0x1 << 3)

503 
	#AT91C_RSTC_KEY
 (() 0xFF << 24)

505 
	#AT91C_RSTC_URSTS
 (() 0x1 << 0)

506 
	#AT91C_RSTC_BODSTS
 (() 0x1 << 1)

507 
	#AT91C_RSTC_RSTTYP
 (() 0x7 << 8)

508 
	#AT91C_RSTC_RSTTYP_POWERUP
 (() 0x0 << 8)

509 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (() 0x1 << 8)

510 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (() 0x2 << 8)

511 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (() 0x3 << 8)

512 
	#AT91C_RSTC_RSTTYP_USER
 (() 0x4 << 8)

513 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (() 0x5 << 8)

514 
	#AT91C_RSTC_NRSTL
 (() 0x1 << 16)

515 
	#AT91C_RSTC_SRCMP
 (() 0x1 << 17)

517 
	#AT91C_RSTC_URSTEN
 (() 0x1 << 0)

518 
	#AT91C_RSTC_URSTIEN
 (() 0x1 << 4)

519 
	#AT91C_RSTC_ERSTL
 (() 0xF << 8)

520 
	#AT91C_RSTC_BODIEN
 (() 0x1 << 16)

521 

	)

525 
	s_AT91S_RTTC
 {

526 
AT91_REG
 
	mRTTC_RTMR
;

527 
AT91_REG
 
	mRTTC_RTAR
;

528 
AT91_REG
 
	mRTTC_RTVR
;

529 
AT91_REG
 
	mRTTC_RTSR
;

530 } 
	tAT91S_RTTC
, *
	tAT91PS_RTTC
;

533 
	#AT91C_RTTC_RTPRES
 (() 0xFFFF << 0)

534 
	#AT91C_RTTC_ALMIEN
 (() 0x1 << 16)

535 
	#AT91C_RTTC_RTTINCIEN
 (() 0x1 << 17)

536 
	#AT91C_RTTC_RTTRST
 (() 0x1 << 18)

538 
	#AT91C_RTTC_ALMV
 (() 0x0 << 0)

540 
	#AT91C_RTTC_CRTV
 (() 0x0 << 0)

542 
	#AT91C_RTTC_ALMS
 (() 0x1 << 0)

543 
	#AT91C_RTTC_RTTINC
 (() 0x1 << 1)

544 

	)

548 
	s_AT91S_PITC
 {

549 
AT91_REG
 
	mPITC_PIMR
;

550 
AT91_REG
 
	mPITC_PISR
;

551 
AT91_REG
 
	mPITC_PIVR
;

552 
AT91_REG
 
	mPITC_PIIR
;

553 } 
	tAT91S_PITC
, *
	tAT91PS_PITC
;

556 
	#AT91C_PITC_PIV
 (() 0xFFFFF << 0)

557 
	#AT91C_PITC_PITEN
 (() 0x1 << 24)

558 
	#AT91C_PITC_PITIEN
 (() 0x1 << 25)

560 
	#AT91C_PITC_PITS
 (() 0x1 << 0)

562 
	#AT91C_PITC_CPIV
 (() 0xFFFFF << 0)

563 
	#AT91C_PITC_PICNT
 (() 0xFFF << 20)

565 

	)

569 
	s_AT91S_WDTC
 {

570 
AT91_REG
 
	mWDTC_WDCR
;

571 
AT91_REG
 
	mWDTC_WDMR
;

572 
AT91_REG
 
	mWDTC_WDSR
;

573 } 
	tAT91S_WDTC
, *
	tAT91PS_WDTC
;

576 
	#AT91C_WDTC_WDRSTT
 (() 0x1 << 0)

577 
	#AT91C_WDTC_KEY
 (() 0xFF << 24)

579 
	#AT91C_WDTC_WDV
 (() 0xFFF << 0)

580 
	#AT91C_WDTC_WDFIEN
 (() 0x1 << 12)

581 
	#AT91C_WDTC_WDRSTEN
 (() 0x1 << 13)

582 
	#AT91C_WDTC_WDRPROC
 (() 0x1 << 14)

583 
	#AT91C_WDTC_WDDIS
 (() 0x1 << 15)

584 
	#AT91C_WDTC_WDD
 (() 0xFFF << 16)

585 
	#AT91C_WDTC_WDDBGHLT
 (() 0x1 << 28)

586 
	#AT91C_WDTC_WDIDLEHLT
 (() 0x1 << 29)

588 
	#AT91C_WDTC_WDUNF
 (() 0x1 << 0)

589 
	#AT91C_WDTC_WDERR
 (() 0x1 << 1)

590 

	)

594 
	s_AT91S_VREG
 {

595 
AT91_REG
 
	mVREG_MR
;

596 } 
	tAT91S_VREG
, *
	tAT91PS_VREG
;

599 
	#AT91C_VREG_PSTDBY
 (() 0x1 << 0)

600 

	)

604 
	s_AT91S_MC
 {

605 
AT91_REG
 
	mMC_RCR
;

606 
AT91_REG
 
	mMC_ASR
;

607 
AT91_REG
 
	mMC_AASR
;

608 
AT91_REG
 
	mRe£rved0
[21];

609 
AT91_REG
 
	mMC_FMR
;

610 
AT91_REG
 
	mMC_FCR
;

611 
AT91_REG
 
	mMC_FSR
;

612 } 
	tAT91S_MC
, *
	tAT91PS_MC
;

615 
	#AT91C_MC_RCB
 (() 0x1 << 0)

617 
	#AT91C_MC_UNDADD
 (() 0x1 << 0)

618 
	#AT91C_MC_MISADD
 (() 0x1 << 1)

619 
	#AT91C_MC_ABTSZ
 (() 0x3 << 8)

620 
	#AT91C_MC_ABTSZ_BYTE
 (() 0x0 << 8)

621 
	#AT91C_MC_ABTSZ_HWORD
 (() 0x1 << 8)

622 
	#AT91C_MC_ABTSZ_WORD
 (() 0x2 << 8)

623 
	#AT91C_MC_ABTTYP
 (() 0x3 << 10)

624 
	#AT91C_MC_ABTTYP_DATAR
 (() 0x0 << 10)

625 
	#AT91C_MC_ABTTYP_DATAW
 (() 0x1 << 10)

626 
	#AT91C_MC_ABTTYP_FETCH
 (() 0x2 << 10)

627 
	#AT91C_MC_MST0
 (() 0x1 << 16)

628 
	#AT91C_MC_MST1
 (() 0x1 << 17)

629 
	#AT91C_MC_SVMST0
 (() 0x1 << 24)

630 
	#AT91C_MC_SVMST1
 (() 0x1 << 25)

632 
	#AT91C_MC_FRDY
 (() 0x1 << 0)

633 
	#AT91C_MC_LOCKE
 (() 0x1 << 2)

634 
	#AT91C_MC_PROGE
 (() 0x1 << 3)

635 
	#AT91C_MC_NEBP
 (() 0x1 << 7)

636 
	#AT91C_MC_FWS
 (() 0x3 << 8)

637 
	#AT91C_MC_FWS_0FWS
 (() 0x0 << 8)

638 
	#AT91C_MC_FWS_1FWS
 (() 0x1 << 8)

639 
	#AT91C_MC_FWS_2FWS
 (() 0x2 << 8)

640 
	#AT91C_MC_FWS_3FWS
 (() 0x3 << 8)

641 
	#AT91C_MC_FMCN
 (() 0xFF << 16)

643 
	#AT91C_MC_FCMD
 (() 0xF << 0)

644 
	#AT91C_MC_FCMD_START_PROG
 (() 0x1)

645 
	#AT91C_MC_FCMD_LOCK
 (() 0x2)

646 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (() 0x3)

647 
	#AT91C_MC_FCMD_UNLOCK
 (() 0x4)

648 
	#AT91C_MC_FCMD_ERASE_ALL
 (() 0x8)

649 
	#AT91C_MC_FCMD_SET_GP_NVM
 (() 0xB)

650 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (() 0xD)

651 
	#AT91C_MC_FCMD_SET_SECURITY
 (() 0xF)

652 
	#AT91C_MC_PAGEN
 (() 0x3FF << 8)

653 
	#AT91C_MC_KEY
 (() 0xFF << 24)

655 
	#AT91C_MC_SECURITY
 (() 0x1 << 4)

656 
	#AT91C_MC_GPNVM0
 (() 0x1 << 8)

657 
	#AT91C_MC_GPNVM1
 (() 0x1 << 9)

658 
	#AT91C_MC_GPNVM2
 (() 0x1 << 10)

659 
	#AT91C_MC_GPNVM3
 (() 0x1 << 11)

660 
	#AT91C_MC_GPNVM4
 (() 0x1 << 12)

661 
	#AT91C_MC_GPNVM5
 (() 0x1 << 13)

662 
	#AT91C_MC_GPNVM6
 (() 0x1 << 14)

663 
	#AT91C_MC_GPNVM7
 (() 0x1 << 15)

664 
	#AT91C_MC_LOCKS0
 (() 0x1 << 16)

665 
	#AT91C_MC_LOCKS1
 (() 0x1 << 17)

666 
	#AT91C_MC_LOCKS2
 (() 0x1 << 18)

667 
	#AT91C_MC_LOCKS3
 (() 0x1 << 19)

668 
	#AT91C_MC_LOCKS4
 (() 0x1 << 20)

669 
	#AT91C_MC_LOCKS5
 (() 0x1 << 21)

670 
	#AT91C_MC_LOCKS6
 (() 0x1 << 22)

671 
	#AT91C_MC_LOCKS7
 (() 0x1 << 23)

672 
	#AT91C_MC_LOCKS8
 (() 0x1 << 24)

673 
	#AT91C_MC_LOCKS9
 (() 0x1 << 25)

674 
	#AT91C_MC_LOCKS10
 (() 0x1 << 26)

675 
	#AT91C_MC_LOCKS11
 (() 0x1 << 27)

676 
	#AT91C_MC_LOCKS12
 (() 0x1 << 28)

677 
	#AT91C_MC_LOCKS13
 (() 0x1 << 29)

678 
	#AT91C_MC_LOCKS14
 (() 0x1 << 30)

679 
	#AT91C_MC_LOCKS15
 (() 0x1 << 31)

680 

	)

684 
	s_AT91S_SPI
 {

685 
AT91_REG
 
	mSPI_CR
;

686 
AT91_REG
 
	mSPI_MR
;

687 
AT91_REG
 
	mSPI_RDR
;

688 
AT91_REG
 
	mSPI_TDR
;

689 
AT91_REG
 
	mSPI_SR
;

690 
AT91_REG
 
	mSPI_IER
;

691 
AT91_REG
 
	mSPI_IDR
;

692 
AT91_REG
 
	mSPI_IMR
;

693 
AT91_REG
 
	mRe£rved0
[4];

694 
AT91_REG
 
	mSPI_CSR
[4];

695 
AT91_REG
 
	mRe£rved1
[48];

696 
AT91_REG
 
	mSPI_RPR
;

697 
AT91_REG
 
	mSPI_RCR
;

698 
AT91_REG
 
	mSPI_TPR
;

699 
AT91_REG
 
	mSPI_TCR
;

700 
AT91_REG
 
	mSPI_RNPR
;

701 
AT91_REG
 
	mSPI_RNCR
;

702 
AT91_REG
 
	mSPI_TNPR
;

703 
AT91_REG
 
	mSPI_TNCR
;

704 
AT91_REG
 
	mSPI_PTCR
;

705 
AT91_REG
 
	mSPI_PTSR
;

706 } 
	tAT91S_SPI
, *
	tAT91PS_SPI
;

709 
	#AT91C_SPI_SPIEN
 (() 0x1 << 0)

710 
	#AT91C_SPI_SPIDIS
 (() 0x1 << 1)

711 
	#AT91C_SPI_SWRST
 (() 0x1 << 7)

712 
	#AT91C_SPI_LASTXFER
 (() 0x1 << 24)

714 
	#AT91C_SPI_MSTR
 (() 0x1 << 0)

715 
	#AT91C_SPI_PS
 (() 0x1 << 1)

716 
	#AT91C_SPI_PS_FIXED
 (() 0x0 << 1)

717 
	#AT91C_SPI_PS_VARIABLE
 (() 0x1 << 1)

718 
	#AT91C_SPI_PCSDEC
 (() 0x1 << 2)

719 
	#AT91C_SPI_FDIV
 (() 0x1 << 3)

720 
	#AT91C_SPI_MODFDIS
 (() 0x1 << 4)

721 
	#AT91C_SPI_LLB
 (() 0x1 << 7)

722 
	#AT91C_SPI_PCS
 (() 0xF << 16)

723 
	#AT91C_SPI_DLYBCS
 (() 0xFF << 24)

725 
	#AT91C_SPI_RD
 (() 0xFFFF << 0)

726 
	#AT91C_SPI_RPCS
 (() 0xF << 16)

728 
	#AT91C_SPI_TD
 (() 0xFFFF << 0)

729 
	#AT91C_SPI_TPCS
 (() 0xF << 16)

731 
	#AT91C_SPI_RDRF
 (() 0x1 << 0)

732 
	#AT91C_SPI_TDRE
 (() 0x1 << 1)

733 
	#AT91C_SPI_MODF
 (() 0x1 << 2)

734 
	#AT91C_SPI_OVRES
 (() 0x1 << 3)

735 
	#AT91C_SPI_ENDRX
 (() 0x1 << 4)

736 
	#AT91C_SPI_ENDTX
 (() 0x1 << 5)

737 
	#AT91C_SPI_RXBUFF
 (() 0x1 << 6)

738 
	#AT91C_SPI_TXBUFE
 (() 0x1 << 7)

739 
	#AT91C_SPI_NSSR
 (() 0x1 << 8)

740 
	#AT91C_SPI_TXEMPTY
 (() 0x1 << 9)

741 
	#AT91C_SPI_SPIENS
 (() 0x1 << 16)

746 
	#AT91C_SPI_CPOL
 (() 0x1 << 0)

747 
	#AT91C_SPI_NCPHA
 (() 0x1 << 1)

748 
	#AT91C_SPI_CSAAT
 (() 0x1 << 3)

749 
	#AT91C_SPI_BITS
 (() 0xF << 4)

750 
	#AT91C_SPI_BITS_8
 (() 0x0 << 4)

751 
	#AT91C_SPI_BITS_9
 (() 0x1 << 4)

752 
	#AT91C_SPI_BITS_10
 (() 0x2 << 4)

753 
	#AT91C_SPI_BITS_11
 (() 0x3 << 4)

754 
	#AT91C_SPI_BITS_12
 (() 0x4 << 4)

755 
	#AT91C_SPI_BITS_13
 (() 0x5 << 4)

756 
	#AT91C_SPI_BITS_14
 (() 0x6 << 4)

757 
	#AT91C_SPI_BITS_15
 (() 0x7 << 4)

758 
	#AT91C_SPI_BITS_16
 (() 0x8 << 4)

759 
	#AT91C_SPI_SCBR
 (() 0xFF << 8)

760 
	#AT91C_SPI_DLYBS
 (() 0xFF << 16)

761 
	#AT91C_SPI_DLYBCT
 (() 0xFF << 24)

762 

	)

766 
	s_AT91S_USART
 {

767 
AT91_REG
 
	mUS_CR
;

768 
AT91_REG
 
	mUS_MR
;

769 
AT91_REG
 
	mUS_IER
;

770 
AT91_REG
 
	mUS_IDR
;

771 
AT91_REG
 
	mUS_IMR
;

772 
AT91_REG
 
	mUS_CSR
;

773 
AT91_REG
 
	mUS_RHR
;

774 
AT91_REG
 
	mUS_THR
;

775 
AT91_REG
 
	mUS_BRGR
;

776 
AT91_REG
 
	mUS_RTOR
;

777 
AT91_REG
 
	mUS_TTGR
;

778 
AT91_REG
 
	mRe£rved0
[5];

779 
AT91_REG
 
	mUS_FIDI
;

780 
AT91_REG
 
	mUS_NER
;

781 
AT91_REG
 
	mRe£rved1
[1];

782 
AT91_REG
 
	mUS_IF
;

783 
AT91_REG
 
	mRe£rved2
[44];

784 
AT91_REG
 
	mUS_RPR
;

785 
AT91_REG
 
	mUS_RCR
;

786 
AT91_REG
 
	mUS_TPR
;

787 
AT91_REG
 
	mUS_TCR
;

788 
AT91_REG
 
	mUS_RNPR
;

789 
AT91_REG
 
	mUS_RNCR
;

790 
AT91_REG
 
	mUS_TNPR
;

791 
AT91_REG
 
	mUS_TNCR
;

792 
AT91_REG
 
	mUS_PTCR
;

793 
AT91_REG
 
	mUS_PTSR
;

794 } 
	tAT91S_USART
, *
	tAT91PS_USART
;

797 
	#AT91C_US_STTBRK
 (() 0x1 << 9)

798 
	#AT91C_US_STPBRK
 (() 0x1 << 10)

799 
	#AT91C_US_STTTO
 (() 0x1 << 11)

800 
	#AT91C_US_SENDA
 (() 0x1 << 12)

801 
	#AT91C_US_RSTIT
 (() 0x1 << 13)

802 
	#AT91C_US_RSTNACK
 (() 0x1 << 14)

803 
	#AT91C_US_RETTO
 (() 0x1 << 15)

804 
	#AT91C_US_DTREN
 (() 0x1 << 16)

805 
	#AT91C_US_DTRDIS
 (() 0x1 << 17)

806 
	#AT91C_US_RTSEN
 (() 0x1 << 18)

807 
	#AT91C_US_RTSDIS
 (() 0x1 << 19)

809 
	#AT91C_US_USMODE
 (() 0xF << 0)

810 
	#AT91C_US_USMODE_NORMAL
 (() 0x0)

811 
	#AT91C_US_USMODE_RS485
 (() 0x1)

812 
	#AT91C_US_USMODE_HWHSH
 (() 0x2)

813 
	#AT91C_US_USMODE_MODEM
 (() 0x3)

814 
	#AT91C_US_USMODE_ISO7816_0
 (() 0x4)

815 
	#AT91C_US_USMODE_ISO7816_1
 (() 0x6)

816 
	#AT91C_US_USMODE_IRDA
 (() 0x8)

817 
	#AT91C_US_USMODE_SWHSH
 (() 0xC)

818 
	#AT91C_US_CLKS
 (() 0x3 << 4)

819 
	#AT91C_US_CLKS_CLOCK
 (() 0x0 << 4)

820 
	#AT91C_US_CLKS_FDIV1
 (() 0x1 << 4)

821 
	#AT91C_US_CLKS_SLOW
 (() 0x2 << 4)

822 
	#AT91C_US_CLKS_EXT
 (() 0x3 << 4)

823 
	#AT91C_US_CHRL
 (() 0x3 << 6)

824 
	#AT91C_US_CHRL_5_BITS
 (() 0x0 << 6)

825 
	#AT91C_US_CHRL_6_BITS
 (() 0x1 << 6)

826 
	#AT91C_US_CHRL_7_BITS
 (() 0x2 << 6)

827 
	#AT91C_US_CHRL_8_BITS
 (() 0x3 << 6)

828 
	#AT91C_US_SYNC
 (() 0x1 << 8)

829 
	#AT91C_US_NBSTOP
 (() 0x3 << 12)

830 
	#AT91C_US_NBSTOP_1_BIT
 (() 0x0 << 12)

831 
	#AT91C_US_NBSTOP_15_BIT
 (() 0x1 << 12)

832 
	#AT91C_US_NBSTOP_2_BIT
 (() 0x2 << 12)

833 
	#AT91C_US_MSBF
 (() 0x1 << 16)

834 
	#AT91C_US_MODE9
 (() 0x1 << 17)

835 
	#AT91C_US_CKLO
 (() 0x1 << 18)

836 
	#AT91C_US_OVER
 (() 0x1 << 19)

837 
	#AT91C_US_INACK
 (() 0x1 << 20)

838 
	#AT91C_US_DSNACK
 (() 0x1 << 21)

839 
	#AT91C_US_MAX_ITER
 (() 0x1 << 24)

840 
	#AT91C_US_FILTER
 (() 0x1 << 28)

842 
	#AT91C_US_RXBRK
 (() 0x1 << 2)

843 
	#AT91C_US_TIMEOUT
 (() 0x1 << 8)

844 
	#AT91C_US_ITERATION
 (() 0x1 << 10)

845 
	#AT91C_US_NACK
 (() 0x1 << 13)

846 
	#AT91C_US_RIIC
 (() 0x1 << 16)

847 
	#AT91C_US_DSRIC
 (() 0x1 << 17)

848 
	#AT91C_US_DCDIC
 (() 0x1 << 18)

849 
	#AT91C_US_CTSIC
 (() 0x1 << 19)

853 
	#AT91C_US_RI
 (() 0x1 << 20)

854 
	#AT91C_US_DSR
 (() 0x1 << 21)

855 
	#AT91C_US_DCD
 (() 0x1 << 22)

856 
	#AT91C_US_CTS
 (() 0x1 << 23)

857 

	)

861 
	s_AT91S_SSC
 {

862 
AT91_REG
 
	mSSC_CR
;

863 
AT91_REG
 
	mSSC_CMR
;

864 
AT91_REG
 
	mRe£rved0
[2];

865 
AT91_REG
 
	mSSC_RCMR
;

866 
AT91_REG
 
	mSSC_RFMR
;

867 
AT91_REG
 
	mSSC_TCMR
;

868 
AT91_REG
 
	mSSC_TFMR
;

869 
AT91_REG
 
	mSSC_RHR
;

870 
AT91_REG
 
	mSSC_THR
;

871 
AT91_REG
 
	mRe£rved1
[2];

872 
AT91_REG
 
	mSSC_RSHR
;

873 
AT91_REG
 
	mSSC_TSHR
;

874 
AT91_REG
 
	mRe£rved2
[2];

875 
AT91_REG
 
	mSSC_SR
;

876 
AT91_REG
 
	mSSC_IER
;

877 
AT91_REG
 
	mSSC_IDR
;

878 
AT91_REG
 
	mSSC_IMR
;

879 
AT91_REG
 
	mRe£rved3
[44];

880 
AT91_REG
 
	mSSC_RPR
;

881 
AT91_REG
 
	mSSC_RCR
;

882 
AT91_REG
 
	mSSC_TPR
;

883 
AT91_REG
 
	mSSC_TCR
;

884 
AT91_REG
 
	mSSC_RNPR
;

885 
AT91_REG
 
	mSSC_RNCR
;

886 
AT91_REG
 
	mSSC_TNPR
;

887 
AT91_REG
 
	mSSC_TNCR
;

888 
AT91_REG
 
	mSSC_PTCR
;

889 
AT91_REG
 
	mSSC_PTSR
;

890 } 
	tAT91S_SSC
, *
	tAT91PS_SSC
;

893 
	#AT91C_SSC_RXEN
 (() 0x1 << 0)

894 
	#AT91C_SSC_RXDIS
 (() 0x1 << 1)

895 
	#AT91C_SSC_TXEN
 (() 0x1 << 8)

896 
	#AT91C_SSC_TXDIS
 (() 0x1 << 9)

897 
	#AT91C_SSC_SWRST
 (() 0x1 << 15)

899 
	#AT91C_SSC_CKS
 (() 0x3 << 0)

900 
	#AT91C_SSC_CKS_DIV
 (() 0x0)

901 
	#AT91C_SSC_CKS_TK
 (() 0x1)

902 
	#AT91C_SSC_CKS_RK
 (() 0x2)

903 
	#AT91C_SSC_CKO
 (() 0x7 << 2)

904 
	#AT91C_SSC_CKO_NONE
 (() 0x0 << 2)

905 
	#AT91C_SSC_CKO_CONTINOUS
 (() 0x1 << 2)

906 
	#AT91C_SSC_CKO_DATA_TX
 (() 0x2 << 2)

907 
	#AT91C_SSC_CKI
 (() 0x1 << 5)

908 
	#AT91C_SSC_START
 (() 0xF << 8)

909 
	#AT91C_SSC_START_CONTINOUS
 (() 0x0 << 8)

910 
	#AT91C_SSC_START_TX
 (() 0x1 << 8)

911 
	#AT91C_SSC_START_LOW_RF
 (() 0x2 << 8)

912 
	#AT91C_SSC_START_HIGH_RF
 (() 0x3 << 8)

913 
	#AT91C_SSC_START_FALL_RF
 (() 0x4 << 8)

914 
	#AT91C_SSC_START_RISE_RF
 (() 0x5 << 8)

915 
	#AT91C_SSC_START_LEVEL_RF
 (() 0x6 << 8)

916 
	#AT91C_SSC_START_EDGE_RF
 (() 0x7 << 8)

917 
	#AT91C_SSC_START_0
 (() 0x8 << 8)

918 
	#AT91C_SSC_STTDLY
 (() 0xFF << 16)

919 
	#AT91C_SSC_PERIOD
 (() 0xFF << 24)

921 
	#AT91C_SSC_DATLEN
 (() 0x1F << 0)

922 
	#AT91C_SSC_LOOP
 (() 0x1 << 5)

923 
	#AT91C_SSC_MSBF
 (() 0x1 << 7)

924 
	#AT91C_SSC_DATNB
 (() 0xF << 8)

925 
	#AT91C_SSC_FSLEN
 (() 0xF << 16)

926 
	#AT91C_SSC_FSOS
 (() 0x7 << 20)

927 
	#AT91C_SSC_FSOS_NONE
 (() 0x0 << 20)

928 
	#AT91C_SSC_FSOS_NEGATIVE
 (() 0x1 << 20)

929 
	#AT91C_SSC_FSOS_POSITIVE
 (() 0x2 << 20)

930 
	#AT91C_SSC_FSOS_LOW
 (() 0x3 << 20)

931 
	#AT91C_SSC_FSOS_HIGH
 (() 0x4 << 20)

932 
	#AT91C_SSC_FSOS_TOGGLE
 (() 0x5 << 20)

933 
	#AT91C_SSC_FSEDGE
 (() 0x1 << 24)

936 
	#AT91C_SSC_DATDEF
 (() 0x1 << 5)

937 
	#AT91C_SSC_FSDEN
 (() 0x1 << 23)

939 
	#AT91C_SSC_TXRDY
 (() 0x1 << 0)

940 
	#AT91C_SSC_TXEMPTY
 (() 0x1 << 1)

941 
	#AT91C_SSC_ENDTX
 (() 0x1 << 2)

942 
	#AT91C_SSC_TXBUFE
 (() 0x1 << 3)

943 
	#AT91C_SSC_RXRDY
 (() 0x1 << 4)

944 
	#AT91C_SSC_OVRUN
 (() 0x1 << 5)

945 
	#AT91C_SSC_ENDRX
 (() 0x1 << 6)

946 
	#AT91C_SSC_RXBUFF
 (() 0x1 << 7)

947 
	#AT91C_SSC_TXSYN
 (() 0x1 << 10)

948 
	#AT91C_SSC_RXSYN
 (() 0x1 << 11)

949 
	#AT91C_SSC_TXENA
 (() 0x1 << 16)

950 
	#AT91C_SSC_RXENA
 (() 0x1 << 17)

954 

	)

958 
	s_AT91S_TWI
 {

959 
AT91_REG
 
	mTWI_CR
;

960 
AT91_REG
 
	mTWI_MMR
;

961 
AT91_REG
 
	mRe£rved0
[1];

962 
AT91_REG
 
	mTWI_IADR
;

963 
AT91_REG
 
	mTWI_CWGR
;

964 
AT91_REG
 
	mRe£rved1
[3];

965 
AT91_REG
 
	mTWI_SR
;

966 
AT91_REG
 
	mTWI_IER
;

967 
AT91_REG
 
	mTWI_IDR
;

968 
AT91_REG
 
	mTWI_IMR
;

969 
AT91_REG
 
	mTWI_RHR
;

970 
AT91_REG
 
	mTWI_THR
;

971 } 
	tAT91S_TWI
, *
	tAT91PS_TWI
;

974 
	#AT91C_TWI_START
 (() 0x1 << 0)

975 
	#AT91C_TWI_STOP
 (() 0x1 << 1)

976 
	#AT91C_TWI_MSEN
 (() 0x1 << 2)

977 
	#AT91C_TWI_MSDIS
 (() 0x1 << 3)

978 
	#AT91C_TWI_SWRST
 (() 0x1 << 7)

980 
	#AT91C_TWI_IADRSZ
 (() 0x3 << 8)

981 
	#AT91C_TWI_IADRSZ_NO
 (() 0x0 << 8)

982 
	#AT91C_TWI_IADRSZ_1_BYTE
 (() 0x1 << 8)

983 
	#AT91C_TWI_IADRSZ_2_BYTE
 (() 0x2 << 8)

984 
	#AT91C_TWI_IADRSZ_3_BYTE
 (() 0x3 << 8)

985 
	#AT91C_TWI_MREAD
 (() 0x1 << 12)

986 
	#AT91C_TWI_DADR
 (() 0x7F << 16)

988 
	#AT91C_TWI_CLDIV
 (() 0xFF << 0)

989 
	#AT91C_TWI_CHDIV
 (() 0xFF << 8)

990 
	#AT91C_TWI_CKDIV
 (() 0x7 << 16)

992 
	#AT91C_TWI_TXCOMP
 (() 0x1 << 0)

993 
	#AT91C_TWI_RXRDY
 (() 0x1 << 1)

994 
	#AT91C_TWI_TXRDY
 (() 0x1 << 2)

995 
	#AT91C_TWI_OVRE
 (() 0x1 << 6)

996 
	#AT91C_TWI_UNRE
 (() 0x1 << 7)

997 
	#AT91C_TWI_NACK
 (() 0x1 << 8)

1001 

	)

1005 
	s_AT91S_PWMC_CH
 {

1006 
AT91_REG
 
	mPWMC_CMR
;

1007 
AT91_REG
 
	mPWMC_CDTYR
;

1008 
AT91_REG
 
	mPWMC_CPRDR
;

1009 
AT91_REG
 
	mPWMC_CCNTR
;

1010 
AT91_REG
 
	mPWMC_CUPDR
;

1011 
AT91_REG
 
	mPWMC_Re£rved
[3];

1012 } 
	tAT91S_PWMC_CH
, *
	tAT91PS_PWMC_CH
;

1015 
	#AT91C_PWMC_CPRE
 (() 0xF << 0)

1016 
	#AT91C_PWMC_CPRE_MCK
 (() 0x0)

1017 
	#AT91C_PWMC_CPRE_MCKA
 (() 0xB)

1018 
	#AT91C_PWMC_CPRE_MCKB
 (() 0xC)

1019 
	#AT91C_PWMC_CALG
 (() 0x1 << 8)

1020 
	#AT91C_PWMC_CPOL
 (() 0x1 << 9)

1021 
	#AT91C_PWMC_CPD
 (() 0x1 << 10)

1023 
	#AT91C_PWMC_CDTY
 (() 0x0 << 0)

1025 
	#AT91C_PWMC_CPRD
 (() 0x0 << 0)

1027 
	#AT91C_PWMC_CCNT
 (() 0x0 << 0)

1029 
	#AT91C_PWMC_CUPD
 (() 0x0 << 0)

1030 

	)

1034 
	s_AT91S_PWMC
 {

1035 
AT91_REG
 
	mPWMC_MR
;

1036 
AT91_REG
 
	mPWMC_ENA
;

1037 
AT91_REG
 
	mPWMC_DIS
;

1038 
AT91_REG
 
	mPWMC_SR
;

1039 
AT91_REG
 
	mPWMC_IER
;

1040 
AT91_REG
 
	mPWMC_IDR
;

1041 
AT91_REG
 
	mPWMC_IMR
;

1042 
AT91_REG
 
	mPWMC_ISR
;

1043 
AT91_REG
 
	mRe£rved0
[55];

1044 
AT91_REG
 
	mPWMC_VR
;

1045 
AT91_REG
 
	mRe£rved1
[64];

1046 
AT91S_PWMC_CH
 
	mPWMC_CH
[4];

1047 } 
	tAT91S_PWMC
, *
	tAT91PS_PWMC
;

1050 
	#AT91C_PWMC_DIVA
 (() 0xFF << 0)

1051 
	#AT91C_PWMC_PREA
 (() 0xF << 8)

1052 
	#AT91C_PWMC_PREA_MCK
 (() 0x0 << 8)

1053 
	#AT91C_PWMC_DIVB
 (() 0xFF << 16)

1054 
	#AT91C_PWMC_PREB
 (() 0xF << 24)

1055 
	#AT91C_PWMC_PREB_MCK
 (() 0x0 << 24)

1057 
	#AT91C_PWMC_CHID0
 (() 0x1 << 0)

1058 
	#AT91C_PWMC_CHID1
 (() 0x1 << 1)

1059 
	#AT91C_PWMC_CHID2
 (() 0x1 << 2)

1060 
	#AT91C_PWMC_CHID3
 (() 0x1 << 3)

1067 

	)

1071 
	s_AT91S_UDP
 {

1072 
AT91_REG
 
	mUDP_NUM
;

1073 
AT91_REG
 
	mUDP_GLBSTATE
;

1074 
AT91_REG
 
	mUDP_FADDR
;

1075 
AT91_REG
 
	mRe£rved0
[1];

1076 
AT91_REG
 
	mUDP_IER
;

1077 
AT91_REG
 
	mUDP_IDR
;

1078 
AT91_REG
 
	mUDP_IMR
;

1079 
AT91_REG
 
	mUDP_ISR
;

1080 
AT91_REG
 
	mUDP_ICR
;

1081 
AT91_REG
 
	mRe£rved1
[1];

1082 
AT91_REG
 
	mUDP_RSTEP
;

1083 
AT91_REG
 
	mRe£rved2
[1];

1084 
AT91_REG
 
	mUDP_CSR
[6];

1085 
AT91_REG
 
	mRe£rved3
[2];

1086 
AT91_REG
 
	mUDP_FDR
[6];

1087 
AT91_REG
 
	mRe£rved4
[3];

1088 
AT91_REG
 
	mUDP_TXVC
;

1089 } 
	tAT91S_UDP
, *
	tAT91PS_UDP
;

1092 
	#AT91C_UDP_FRM_NUM
 (() 0x7FF << 0)

1093 
	#AT91C_UDP_FRM_ERR
 (() 0x1 << 16)

1094 
	#AT91C_UDP_FRM_OK
 (() 0x1 << 17)

1096 
	#AT91C_UDP_FADDEN
 (() 0x1 << 0)

1097 
	#AT91C_UDP_CONFG
 (() 0x1 << 1)

1098 
	#AT91C_UDP_ESR
 (() 0x1 << 2)

1099 
	#AT91C_UDP_RSMINPR
 (() 0x1 << 3)

1100 
	#AT91C_UDP_RMWUPE
 (() 0x1 << 4)

1102 
	#AT91C_UDP_FADD
 (() 0xFF << 0)

1103 
	#AT91C_UDP_FEN
 (() 0x1 << 8)

1105 
	#AT91C_UDP_EPINT0
 (() 0x1 << 0)

1106 
	#AT91C_UDP_EPINT1
 (() 0x1 << 1)

1107 
	#AT91C_UDP_EPINT2
 (() 0x1 << 2)

1108 
	#AT91C_UDP_EPINT3
 (() 0x1 << 3)

1109 
	#AT91C_UDP_EPINT4
 (() 0x1 << 4)

1110 
	#AT91C_UDP_EPINT5
 (() 0x1 << 5)

1111 
	#AT91C_UDP_RXSUSP
 (() 0x1 << 8)

1112 
	#AT91C_UDP_RXRSM
 (() 0x1 << 9)

1113 
	#AT91C_UDP_EXTRSM
 (() 0x1 << 10)

1114 
	#AT91C_UDP_SOFINT
 (() 0x1 << 11)

1115 
	#AT91C_UDP_WAKEUP
 (() 0x1 << 13)

1119 
	#AT91C_UDP_ENDBUSRES
 (() 0x1 << 12)

1122 
	#AT91C_UDP_EP0
 (() 0x1 << 0)

1123 
	#AT91C_UDP_EP1
 (() 0x1 << 1)

1124 
	#AT91C_UDP_EP2
 (() 0x1 << 2)

1125 
	#AT91C_UDP_EP3
 (() 0x1 << 3)

1126 
	#AT91C_UDP_EP4
 (() 0x1 << 4)

1127 
	#AT91C_UDP_EP5
 (() 0x1 << 5)

1129 
	#AT91C_UDP_TXCOMP
 (() 0x1 << 0)

1130 
	#AT91C_UDP_RX_DATA_BK0
 (() 0x1 << 1)

1131 
	#AT91C_UDP_RXSETUP
 (() 0x1 << 2)

1132 
	#AT91C_UDP_ISOERROR
 (() 0x1 << 3)

1133 
	#AT91C_UDP_TXPKTRDY
 (() 0x1 << 4)

1134 
	#AT91C_UDP_FORCESTALL
 (() 0x1 << 5)

1135 
	#AT91C_UDP_RX_DATA_BK1
 (() 0x1 << 6)

1136 
	#AT91C_UDP_DIR
 (() 0x1 << 7)

1137 
	#AT91C_UDP_EPTYPE
 (() 0x7 << 8)

1138 
	#AT91C_UDP_EPTYPE_CTRL
 (() 0x0 << 8)

1139 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (() 0x1 << 8)

1140 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (() 0x2 << 8)

1141 
	#AT91C_UDP_EPTYPE_INT_OUT
 (() 0x3 << 8)

1142 
	#AT91C_UDP_EPTYPE_ISO_IN
 (() 0x5 << 8)

1143 
	#AT91C_UDP_EPTYPE_BULK_IN
 (() 0x6 << 8)

1144 
	#AT91C_UDP_EPTYPE_INT_IN
 (() 0x7 << 8)

1145 
	#AT91C_UDP_DTGLE
 (() 0x1 << 11)

1146 
	#AT91C_UDP_EPEDS
 (() 0x1 << 15)

1147 
	#AT91C_UDP_RXBYTECNT
 (() 0x7FF << 16)

1149 
	#AT91C_UDP_TXVDIS
 (() 0x1 << 8)

1150 
	#AT91C_UDP_PUON
 (() 0x1 << 9)

1151 

	)

1155 
	s_AT91S_TC
 {

1156 
AT91_REG
 
	mTC_CCR
;

1157 
AT91_REG
 
	mTC_CMR
;

1158 
AT91_REG
 
	mRe£rved0
[2];

1159 
AT91_REG
 
	mTC_CV
;

1160 
AT91_REG
 
	mTC_RA
;

1161 
AT91_REG
 
	mTC_RB
;

1162 
AT91_REG
 
	mTC_RC
;

1163 
AT91_REG
 
	mTC_SR
;

1164 
AT91_REG
 
	mTC_IER
;

1165 
AT91_REG
 
	mTC_IDR
;

1166 
AT91_REG
 
	mTC_IMR
;

1167 } 
	tAT91S_TC
, *
	tAT91PS_TC
;

1170 
	#AT91C_TC_CLKEN
 (() 0x1 << 0)

1171 
	#AT91C_TC_CLKDIS
 (() 0x1 << 1)

1172 
	#AT91C_TC_SWTRG
 (() 0x1 << 2)

1174 
	#AT91C_TC_CLKS
 (() 0x7 << 0)

1175 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (() 0x0)

1176 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (() 0x1)

1177 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (() 0x2)

1178 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (() 0x3)

1179 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (() 0x4)

1180 
	#AT91C_TC_CLKS_XC0
 (() 0x5)

1181 
	#AT91C_TC_CLKS_XC1
 (() 0x6)

1182 
	#AT91C_TC_CLKS_XC2
 (() 0x7)

1183 
	#AT91C_TC_CLKI
 (() 0x1 << 3)

1184 
	#AT91C_TC_BURST
 (() 0x3 << 4)

1185 
	#AT91C_TC_BURST_NONE
 (() 0x0 << 4)

1186 
	#AT91C_TC_BURST_XC0
 (() 0x1 << 4)

1187 
	#AT91C_TC_BURST_XC1
 (() 0x2 << 4)

1188 
	#AT91C_TC_BURST_XC2
 (() 0x3 << 4)

1189 
	#AT91C_TC_CPCSTOP
 (() 0x1 << 6)

1190 
	#AT91C_TC_LDBSTOP
 (() 0x1 << 6)

1191 
	#AT91C_TC_CPCDIS
 (() 0x1 << 7)

1192 
	#AT91C_TC_LDBDIS
 (() 0x1 << 7)

1193 
	#AT91C_TC_ETRGEDG
 (() 0x3 << 8)

1194 
	#AT91C_TC_ETRGEDG_NONE
 (() 0x0 << 8)

1195 
	#AT91C_TC_ETRGEDG_RISING
 (() 0x1 << 8)

1196 
	#AT91C_TC_ETRGEDG_FALLING
 (() 0x2 << 8)

1197 
	#AT91C_TC_ETRGEDG_BOTH
 (() 0x3 << 8)

1198 
	#AT91C_TC_EEVTEDG
 (() 0x3 << 8)

1199 
	#AT91C_TC_EEVTEDG_NONE
 (() 0x0 << 8)

1200 
	#AT91C_TC_EEVTEDG_RISING
 (() 0x1 << 8)

1201 
	#AT91C_TC_EEVTEDG_FALLING
 (() 0x2 << 8)

1202 
	#AT91C_TC_EEVTEDG_BOTH
 (() 0x3 << 8)

1203 
	#AT91C_TC_EEVT
 (() 0x3 << 10)

1204 
	#AT91C_TC_EEVT_TIOB
 (() 0x0 << 10)

1205 
	#AT91C_TC_EEVT_XC0
 (() 0x1 << 10)

1206 
	#AT91C_TC_EEVT_XC1
 (() 0x2 << 10)

1207 
	#AT91C_TC_EEVT_XC2
 (() 0x3 << 10)

1208 
	#AT91C_TC_ABETRG
 (() 0x1 << 10)

1209 
	#AT91C_TC_ENETRG
 (() 0x1 << 12)

1210 
	#AT91C_TC_WAVESEL
 (() 0x3 << 13)

1211 
	#AT91C_TC_WAVESEL_UP
 (() 0x0 << 13)

1212 
	#AT91C_TC_WAVESEL_UPDOWN
 (() 0x1 << 13)

1213 
	#AT91C_TC_WAVESEL_UP_AUTO
 (() 0x2 << 13)

1214 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (() 0x3 << 13)

1215 
	#AT91C_TC_CPCTRG
 (() 0x1 << 14)

1216 
	#AT91C_TC_WAVE
 (() 0x1 << 15)

1217 
	#AT91C_TC_ACPA
 (() 0x3 << 16)

1218 
	#AT91C_TC_ACPA_NONE
 (() 0x0 << 16)

1219 
	#AT91C_TC_ACPA_SET
 (() 0x1 << 16)

1220 
	#AT91C_TC_ACPA_CLEAR
 (() 0x2 << 16)

1221 
	#AT91C_TC_ACPA_TOGGLE
 (() 0x3 << 16)

1222 
	#AT91C_TC_LDRA
 (() 0x3 << 16)

1223 
	#AT91C_TC_LDRA_NONE
 (() 0x0 << 16)

1224 
	#AT91C_TC_LDRA_RISING
 (() 0x1 << 16)

1225 
	#AT91C_TC_LDRA_FALLING
 (() 0x2 << 16)

1226 
	#AT91C_TC_LDRA_BOTH
 (() 0x3 << 16)

1227 
	#AT91C_TC_ACPC
 (() 0x3 << 18)

1228 
	#AT91C_TC_ACPC_NONE
 (() 0x0 << 18)

1229 
	#AT91C_TC_ACPC_SET
 (() 0x1 << 18)

1230 
	#AT91C_TC_ACPC_CLEAR
 (() 0x2 << 18)

1231 
	#AT91C_TC_ACPC_TOGGLE
 (() 0x3 << 18)

1232 
	#AT91C_TC_LDRB
 (() 0x3 << 18)

1233 
	#AT91C_TC_LDRB_NONE
 (() 0x0 << 18)

1234 
	#AT91C_TC_LDRB_RISING
 (() 0x1 << 18)

1235 
	#AT91C_TC_LDRB_FALLING
 (() 0x2 << 18)

1236 
	#AT91C_TC_LDRB_BOTH
 (() 0x3 << 18)

1237 
	#AT91C_TC_AEEVT
 (() 0x3 << 20)

1238 
	#AT91C_TC_AEEVT_NONE
 (() 0x0 << 20)

1239 
	#AT91C_TC_AEEVT_SET
 (() 0x1 << 20)

1240 
	#AT91C_TC_AEEVT_CLEAR
 (() 0x2 << 20)

1241 
	#AT91C_TC_AEEVT_TOGGLE
 (() 0x3 << 20)

1242 
	#AT91C_TC_ASWTRG
 (() 0x3 << 22)

1243 
	#AT91C_TC_ASWTRG_NONE
 (() 0x0 << 22)

1244 
	#AT91C_TC_ASWTRG_SET
 (() 0x1 << 22)

1245 
	#AT91C_TC_ASWTRG_CLEAR
 (() 0x2 << 22)

1246 
	#AT91C_TC_ASWTRG_TOGGLE
 (() 0x3 << 22)

1247 
	#AT91C_TC_BCPB
 (() 0x3 << 24)

1248 
	#AT91C_TC_BCPB_NONE
 (() 0x0 << 24)

1249 
	#AT91C_TC_BCPB_SET
 (() 0x1 << 24)

1250 
	#AT91C_TC_BCPB_CLEAR
 (() 0x2 << 24)

1251 
	#AT91C_TC_BCPB_TOGGLE
 (() 0x3 << 24)

1252 
	#AT91C_TC_BCPC
 (() 0x3 << 26)

1253 
	#AT91C_TC_BCPC_NONE
 (() 0x0 << 26)

1254 
	#AT91C_TC_BCPC_SET
 (() 0x1 << 26)

1255 
	#AT91C_TC_BCPC_CLEAR
 (() 0x2 << 26)

1256 
	#AT91C_TC_BCPC_TOGGLE
 (() 0x3 << 26)

1257 
	#AT91C_TC_BEEVT
 (() 0x3 << 28)

1258 
	#AT91C_TC_BEEVT_NONE
 (() 0x0 << 28)

1259 
	#AT91C_TC_BEEVT_SET
 (() 0x1 << 28)

1260 
	#AT91C_TC_BEEVT_CLEAR
 (() 0x2 << 28)

1261 
	#AT91C_TC_BEEVT_TOGGLE
 (() 0x3 << 28)

1262 
	#AT91C_TC_BSWTRG
 (() 0x3 << 30)

1263 
	#AT91C_TC_BSWTRG_NONE
 (() 0x0 << 30)

1264 
	#AT91C_TC_BSWTRG_SET
 (() 0x1 << 30)

1265 
	#AT91C_TC_BSWTRG_CLEAR
 (() 0x2 << 30)

1266 
	#AT91C_TC_BSWTRG_TOGGLE
 (() 0x3 << 30)

1268 
	#AT91C_TC_COVFS
 (() 0x1 << 0)

1269 
	#AT91C_TC_LOVRS
 (() 0x1 << 1)

1270 
	#AT91C_TC_CPAS
 (() 0x1 << 2)

1271 
	#AT91C_TC_CPBS
 (() 0x1 << 3)

1272 
	#AT91C_TC_CPCS
 (() 0x1 << 4)

1273 
	#AT91C_TC_LDRAS
 (() 0x1 << 5)

1274 
	#AT91C_TC_LDRBS
 (() 0x1 << 6)

1275 
	#AT91C_TC_ETRGS
 (() 0x1 << 7)

1276 
	#AT91C_TC_CLKSTA
 (() 0x1 << 16)

1277 
	#AT91C_TC_MTIOA
 (() 0x1 << 17)

1278 
	#AT91C_TC_MTIOB
 (() 0x1 << 18)

1282 

	)

1286 
	s_AT91S_TCB
 {

1287 
AT91S_TC
 
	mTCB_TC0
;

1288 
AT91_REG
 
	mRe£rved0
[4];

1289 
AT91S_TC
 
	mTCB_TC1
;

1290 
AT91_REG
 
	mRe£rved1
[4];

1291 
AT91S_TC
 
	mTCB_TC2
;

1292 
AT91_REG
 
	mRe£rved2
[4];

1293 
AT91_REG
 
	mTCB_BCR
;

1294 
AT91_REG
 
	mTCB_BMR
;

1295 } 
	tAT91S_TCB
, *
	tAT91PS_TCB
;

1298 
	#AT91C_TCB_SYNC
 (() 0x1 << 0)

1300 
	#AT91C_TCB_TC0XC0S
 (() 0x3 << 0)

1301 
	#AT91C_TCB_TC0XC0S_TCLK0
 (() 0x0)

1302 
	#AT91C_TCB_TC0XC0S_NONE
 (() 0x1)

1303 
	#AT91C_TCB_TC0XC0S_TIOA1
 (() 0x2)

1304 
	#AT91C_TCB_TC0XC0S_TIOA2
 (() 0x3)

1305 
	#AT91C_TCB_TC1XC1S
 (() 0x3 << 2)

1306 
	#AT91C_TCB_TC1XC1S_TCLK1
 (() 0x0 << 2)

1307 
	#AT91C_TCB_TC1XC1S_NONE
 (() 0x1 << 2)

1308 
	#AT91C_TCB_TC1XC1S_TIOA0
 (() 0x2 << 2)

1309 
	#AT91C_TCB_TC1XC1S_TIOA2
 (() 0x3 << 2)

1310 
	#AT91C_TCB_TC2XC2S
 (() 0x3 << 4)

1311 
	#AT91C_TCB_TC2XC2S_TCLK2
 (() 0x0 << 4)

1312 
	#AT91C_TCB_TC2XC2S_NONE
 (() 0x1 << 4)

1313 
	#AT91C_TCB_TC2XC2S_TIOA0
 (() 0x2 << 4)

1314 
	#AT91C_TCB_TC2XC2S_TIOA1
 (() 0x3 << 4)

1315 

	)

1319 
	s_AT91S_CAN_MB
 {

1320 
AT91_REG
 
	mCAN_MB_MMR
;

1321 
AT91_REG
 
	mCAN_MB_MAM
;

1322 
AT91_REG
 
	mCAN_MB_MID
;

1323 
AT91_REG
 
	mCAN_MB_MFID
;

1324 
AT91_REG
 
	mCAN_MB_MSR
;

1325 
AT91_REG
 
	mCAN_MB_MDL
;

1326 
AT91_REG
 
	mCAN_MB_MDH
;

1327 
AT91_REG
 
	mCAN_MB_MCR
;

1328 } 
	tAT91S_CAN_MB
, *
	tAT91PS_CAN_MB
;

1331 
	#AT91C_CAN_MTIMEMARK
 (() 0xFFFF << 0)

1332 
	#AT91C_CAN_PRIOR
 (() 0xF << 16)

1333 
	#AT91C_CAN_MOT
 (() 0x7 << 24)

1334 
	#AT91C_CAN_MOT_DIS
 (() 0x0 << 24)

1335 
	#AT91C_CAN_MOT_RX
 (() 0x1 << 24)

1336 
	#AT91C_CAN_MOT_RXOVERWRITE
 (() 0x2 << 24)

1337 
	#AT91C_CAN_MOT_TX
 (() 0x3 << 24)

1338 
	#AT91C_CAN_MOT_CONSUMER
 (() 0x4 << 24)

1339 
	#AT91C_CAN_MOT_PRODUCER
 (() 0x5 << 24)

1341 
	#AT91C_CAN_MIDvB
 (() 0x3FFFF << 0)

1342 
	#AT91C_CAN_MIDvA
 (() 0x7FF << 18)

1343 
	#AT91C_CAN_MIDE
 (() 0x1 << 29)

1347 
	#AT91C_CAN_MTIMESTAMP
 (() 0xFFFF << 0)

1348 
	#AT91C_CAN_MDLC
 (() 0xF << 16)

1349 
	#AT91C_CAN_MRTR
 (() 0x1 << 20)

1350 
	#AT91C_CAN_MABT
 (() 0x1 << 22)

1351 
	#AT91C_CAN_MRDY
 (() 0x1 << 23)

1352 
	#AT91C_CAN_MMI
 (() 0x1 << 24)

1356 
	#AT91C_CAN_MACR
 (() 0x1 << 22)

1357 
	#AT91C_CAN_MTCR
 (() 0x1 << 23)

1358 

	)

1362 
	s_AT91S_CAN
 {

1363 
AT91_REG
 
	mCAN_MR
;

1364 
AT91_REG
 
	mCAN_IER
;

1365 
AT91_REG
 
	mCAN_IDR
;

1366 
AT91_REG
 
	mCAN_IMR
;

1367 
AT91_REG
 
	mCAN_SR
;

1368 
AT91_REG
 
	mCAN_BR
;

1369 
AT91_REG
 
	mCAN_TIM
;

1370 
AT91_REG
 
	mCAN_TIMESTP
;

1371 
AT91_REG
 
	mCAN_ECR
;

1372 
AT91_REG
 
	mCAN_TCR
;

1373 
AT91_REG
 
	mCAN_ACR
;

1374 
AT91_REG
 
	mRe£rved0
[52];

1375 
AT91_REG
 
	mCAN_VR
;

1376 
AT91_REG
 
	mRe£rved1
[64];

1377 
AT91S_CAN_MB
 
	mCAN_MB0
;

1378 
AT91S_CAN_MB
 
	mCAN_MB1
;

1379 
AT91S_CAN_MB
 
	mCAN_MB2
;

1380 
AT91S_CAN_MB
 
	mCAN_MB3
;

1381 
AT91S_CAN_MB
 
	mCAN_MB4
;

1382 
AT91S_CAN_MB
 
	mCAN_MB5
;

1383 
AT91S_CAN_MB
 
	mCAN_MB6
;

1384 
AT91S_CAN_MB
 
	mCAN_MB7
;

1385 
AT91S_CAN_MB
 
	mCAN_MB8
;

1386 
AT91S_CAN_MB
 
	mCAN_MB9
;

1387 
AT91S_CAN_MB
 
	mCAN_MB10
;

1388 
AT91S_CAN_MB
 
	mCAN_MB11
;

1389 
AT91S_CAN_MB
 
	mCAN_MB12
;

1390 
AT91S_CAN_MB
 
	mCAN_MB13
;

1391 
AT91S_CAN_MB
 
	mCAN_MB14
;

1392 
AT91S_CAN_MB
 
	mCAN_MB15
;

1393 } 
	tAT91S_CAN
, *
	tAT91PS_CAN
;

1396 
	#AT91C_CAN_CANEN
 (() 0x1 << 0)

1397 
	#AT91C_CAN_LPM
 (() 0x1 << 1)

1398 
	#AT91C_CAN_ABM
 (() 0x1 << 2)

1399 
	#AT91C_CAN_OVL
 (() 0x1 << 3)

1400 
	#AT91C_CAN_TEOF
 (() 0x1 << 4)

1401 
	#AT91C_CAN_TTM
 (() 0x1 << 5)

1402 
	#AT91C_CAN_TIMFRZ
 (() 0x1 << 6)

1403 
	#AT91C_CAN_DRPT
 (() 0x1 << 7)

1405 
	#AT91C_CAN_MB0
 (() 0x1 << 0)

1406 
	#AT91C_CAN_MB1
 (() 0x1 << 1)

1407 
	#AT91C_CAN_MB2
 (() 0x1 << 2)

1408 
	#AT91C_CAN_MB3
 (() 0x1 << 3)

1409 
	#AT91C_CAN_MB4
 (() 0x1 << 4)

1410 
	#AT91C_CAN_MB5
 (() 0x1 << 5)

1411 
	#AT91C_CAN_MB6
 (() 0x1 << 6)

1412 
	#AT91C_CAN_MB7
 (() 0x1 << 7)

1413 
	#AT91C_CAN_MB8
 (() 0x1 << 8)

1414 
	#AT91C_CAN_MB9
 (() 0x1 << 9)

1415 
	#AT91C_CAN_MB10
 (() 0x1 << 10)

1416 
	#AT91C_CAN_MB11
 (() 0x1 << 11)

1417 
	#AT91C_CAN_MB12
 (() 0x1 << 12)

1418 
	#AT91C_CAN_MB13
 (() 0x1 << 13)

1419 
	#AT91C_CAN_MB14
 (() 0x1 << 14)

1420 
	#AT91C_CAN_MB15
 (() 0x1 << 15)

1421 
	#AT91C_CAN_ERRA
 (() 0x1 << 16)

1422 
	#AT91C_CAN_WARN
 (() 0x1 << 17)

1423 
	#AT91C_CAN_ERRP
 (() 0x1 << 18)

1424 
	#AT91C_CAN_BOFF
 (() 0x1 << 19)

1425 
	#AT91C_CAN_SLEEP
 (() 0x1 << 20)

1426 
	#AT91C_CAN_WAKEUP
 (() 0x1 << 21)

1427 
	#AT91C_CAN_TOVF
 (() 0x1 << 22)

1428 
	#AT91C_CAN_TSTP
 (() 0x1 << 23)

1429 
	#AT91C_CAN_CERR
 (() 0x1 << 24)

1430 
	#AT91C_CAN_SERR
 (() 0x1 << 25)

1431 
	#AT91C_CAN_AERR
 (() 0x1 << 26)

1432 
	#AT91C_CAN_FERR
 (() 0x1 << 27)

1433 
	#AT91C_CAN_BERR
 (() 0x1 << 28)

1437 
	#AT91C_CAN_RBSY
 (() 0x1 << 29)

1438 
	#AT91C_CAN_TBSY
 (() 0x1 << 30)

1439 
	#AT91C_CAN_OVLY
 (() 0x1 << 31)

1441 
	#AT91C_CAN_PHASE2
 (() 0x7 << 0)

1442 
	#AT91C_CAN_PHASE1
 (() 0x7 << 4)

1443 
	#AT91C_CAN_PROPAG
 (() 0x7 << 8)

1444 
	#AT91C_CAN_SYNC
 (() 0x3 << 12)

1445 
	#AT91C_CAN_BRP
 (() 0x7F << 16)

1446 
	#AT91C_CAN_SMP
 (() 0x1 << 24)

1448 
	#AT91C_CAN_TIMER
 (() 0xFFFF << 0)

1451 
	#AT91C_CAN_REC
 (() 0xFF << 0)

1452 
	#AT91C_CAN_TEC
 (() 0xFF << 16)

1454 
	#AT91C_CAN_TIMRST
 (() 0x1 << 31)

1456 

	)

1460 
	s_AT91S_EMAC
 {

1461 
AT91_REG
 
	mEMAC_NCR
;

1462 
AT91_REG
 
	mEMAC_NCFGR
;

1463 
AT91_REG
 
	mEMAC_NSR
;

1464 
AT91_REG
 
	mRe£rved0
[2];

1465 
AT91_REG
 
	mEMAC_TSR
;

1466 
AT91_REG
 
	mEMAC_RBQP
;

1467 
AT91_REG
 
	mEMAC_TBQP
;

1468 
AT91_REG
 
	mEMAC_RSR
;

1469 
AT91_REG
 
	mEMAC_ISR
;

1470 
AT91_REG
 
	mEMAC_IER
;

1471 
AT91_REG
 
	mEMAC_IDR
;

1472 
AT91_REG
 
	mEMAC_IMR
;

1473 
AT91_REG
 
	mEMAC_MAN
;

1474 
AT91_REG
 
	mEMAC_PTR
;

1475 
AT91_REG
 
	mEMAC_PFR
;

1476 
AT91_REG
 
	mEMAC_FTO
;

1477 
AT91_REG
 
	mEMAC_SCF
;

1478 
AT91_REG
 
	mEMAC_MCF
;

1479 
AT91_REG
 
	mEMAC_FRO
;

1480 
AT91_REG
 
	mEMAC_FCSE
;

1481 
AT91_REG
 
	mEMAC_ALE
;

1482 
AT91_REG
 
	mEMAC_DTF
;

1483 
AT91_REG
 
	mEMAC_LCOL
;

1484 
AT91_REG
 
	mEMAC_ECOL
;

1485 
AT91_REG
 
	mEMAC_TUND
;

1486 
AT91_REG
 
	mEMAC_CSE
;

1487 
AT91_REG
 
	mEMAC_RRE
;

1488 
AT91_REG
 
	mEMAC_ROV
;

1489 
AT91_REG
 
	mEMAC_RSE
;

1490 
AT91_REG
 
	mEMAC_ELE
;

1491 
AT91_REG
 
	mEMAC_RJA
;

1492 
AT91_REG
 
	mEMAC_USF
;

1493 
AT91_REG
 
	mEMAC_STE
;

1494 
AT91_REG
 
	mEMAC_RLE
;

1495 
AT91_REG
 
	mEMAC_TPF
;

1496 
AT91_REG
 
	mEMAC_HRB
;

1497 
AT91_REG
 
	mEMAC_HRT
;

1498 
AT91_REG
 
	mEMAC_SA1L
;

1499 
AT91_REG
 
	mEMAC_SA1H
;

1500 
AT91_REG
 
	mEMAC_SA2L
;

1501 
AT91_REG
 
	mEMAC_SA2H
;

1502 
AT91_REG
 
	mEMAC_SA3L
;

1503 
AT91_REG
 
	mEMAC_SA3H
;

1504 
AT91_REG
 
	mEMAC_SA4L
;

1505 
AT91_REG
 
	mEMAC_SA4H
;

1506 
AT91_REG
 
	mEMAC_TID
;

1507 
AT91_REG
 
	mEMAC_TPQ
;

1508 
AT91_REG
 
	mEMAC_USRIO
;

1509 
AT91_REG
 
	mEMAC_WOL
;

1510 
AT91_REG
 
	mRe£rved1
[13];

1511 
AT91_REG
 
	mEMAC_REV
;

1512 } 
	tAT91S_EMAC
, *
	tAT91PS_EMAC
;

1515 
	#AT91C_EMAC_LB
 (() 0x1 << 0)

1516 
	#AT91C_EMAC_LLB
 (() 0x1 << 1)

1517 
	#AT91C_EMAC_RE
 (() 0x1 << 2)

1518 
	#AT91C_EMAC_TE
 (() 0x1 << 3)

1519 
	#AT91C_EMAC_MPE
 (() 0x1 << 4)

1520 
	#AT91C_EMAC_CLRSTAT
 (() 0x1 << 5)

1521 
	#AT91C_EMAC_INCSTAT
 (() 0x1 << 6)

1522 
	#AT91C_EMAC_WESTAT
 (() 0x1 << 7)

1523 
	#AT91C_EMAC_BP
 (() 0x1 << 8)

1524 
	#AT91C_EMAC_TSTART
 (() 0x1 << 9)

1525 
	#AT91C_EMAC_THALT
 (() 0x1 << 10)

1526 
	#AT91C_EMAC_TPFR
 (() 0x1 << 11)

1527 
	#AT91C_EMAC_TZQ
 (() 0x1 << 12)

1529 
	#AT91C_EMAC_SPD
 (() 0x1 << 0)

1530 
	#AT91C_EMAC_FD
 (() 0x1 << 1)

1531 
	#AT91C_EMAC_JFRAME
 (() 0x1 << 3)

1532 
	#AT91C_EMAC_CAF
 (() 0x1 << 4)

1533 
	#AT91C_EMAC_NBC
 (() 0x1 << 5)

1534 
	#AT91C_EMAC_MTI
 (() 0x1 << 6)

1535 
	#AT91C_EMAC_UNI
 (() 0x1 << 7)

1536 
	#AT91C_EMAC_BIG
 (() 0x1 << 8)

1537 
	#AT91C_EMAC_EAE
 (() 0x1 << 9)

1538 
	#AT91C_EMAC_CLK
 (() 0x3 << 10)

1539 
	#AT91C_EMAC_CLK_HCLK_8
 (() 0x0 << 10)

1540 
	#AT91C_EMAC_CLK_HCLK_16
 (() 0x1 << 10)

1541 
	#AT91C_EMAC_CLK_HCLK_32
 (() 0x2 << 10)

1542 
	#AT91C_EMAC_CLK_HCLK_64
 (() 0x3 << 10)

1543 
	#AT91C_EMAC_RTY
 (() 0x1 << 12)

1544 
	#AT91C_EMAC_PAE
 (() 0x1 << 13)

1545 
	#AT91C_EMAC_RBOF
 (() 0x3 << 14)

1546 
	#AT91C_EMAC_RBOF_OFFSET_0
 (() 0x0 << 14)

1547 
	#AT91C_EMAC_RBOF_OFFSET_1
 (() 0x1 << 14)

1548 
	#AT91C_EMAC_RBOF_OFFSET_2
 (() 0x2 << 14)

1549 
	#AT91C_EMAC_RBOF_OFFSET_3
 (() 0x3 << 14)

1550 
	#AT91C_EMAC_RLCE
 (() 0x1 << 16)

1551 
	#AT91C_EMAC_DRFCS
 (() 0x1 << 17)

1552 
	#AT91C_EMAC_EFRHD
 (() 0x1 << 18)

1553 
	#AT91C_EMAC_IRXFCS
 (() 0x1 << 19)

1555 
	#AT91C_EMAC_LINKR
 (() 0x1 << 0)

1556 
	#AT91C_EMAC_MDIO
 (() 0x1 << 1)

1557 
	#AT91C_EMAC_IDLE
 (() 0x1 << 2)

1559 
	#AT91C_EMAC_UBR
 (() 0x1 << 0)

1560 
	#AT91C_EMAC_COL
 (() 0x1 << 1)

1561 
	#AT91C_EMAC_RLES
 (() 0x1 << 2)

1562 
	#AT91C_EMAC_TGO
 (() 0x1 << 3)

1563 
	#AT91C_EMAC_BEX
 (() 0x1 << 4)

1564 
	#AT91C_EMAC_COMP
 (() 0x1 << 5)

1565 
	#AT91C_EMAC_UND
 (() 0x1 << 6)

1567 
	#AT91C_EMAC_BNA
 (() 0x1 << 0)

1568 
	#AT91C_EMAC_REC
 (() 0x1 << 1)

1569 
	#AT91C_EMAC_OVR
 (() 0x1 << 2)

1571 
	#AT91C_EMAC_MFD
 (() 0x1 << 0)

1572 
	#AT91C_EMAC_RCOMP
 (() 0x1 << 1)

1573 
	#AT91C_EMAC_RXUBR
 (() 0x1 << 2)

1574 
	#AT91C_EMAC_TXUBR
 (() 0x1 << 3)

1575 
	#AT91C_EMAC_TUNDR
 (() 0x1 << 4)

1576 
	#AT91C_EMAC_RLEX
 (() 0x1 << 5)

1577 
	#AT91C_EMAC_TXERR
 (() 0x1 << 6)

1578 
	#AT91C_EMAC_TCOMP
 (() 0x1 << 7)

1579 
	#AT91C_EMAC_LINK
 (() 0x1 << 9)

1580 
	#AT91C_EMAC_ROVR
 (() 0x1 << 10)

1581 
	#AT91C_EMAC_HRESP
 (() 0x1 << 11)

1582 
	#AT91C_EMAC_PFRE
 (() 0x1 << 12)

1583 
	#AT91C_EMAC_PTZ
 (() 0x1 << 13)

1588 
	#AT91C_EMAC_DATA
 (() 0xFFFF << 0)

1589 
	#AT91C_EMAC_CODE
 (() 0x3 << 16)

1590 
	#AT91C_EMAC_REGA
 (() 0x1F << 18)

1591 
	#AT91C_EMAC_PHYA
 (() 0x1F << 23)

1592 
	#AT91C_EMAC_RW
 (() 0x3 << 28)

1593 
	#AT91C_EMAC_SOF
 (() 0x3 << 30)

1595 
	#AT91C_EMAC_RMII
 (() 0x1 << 0)

1597 
	#AT91C_EMAC_IP
 (() 0xFFFF << 0)

1598 
	#AT91C_EMAC_MAG
 (() 0x1 << 16)

1599 
	#AT91C_EMAC_ARP
 (() 0x1 << 17)

1600 
	#AT91C_EMAC_SA1
 (() 0x1 << 18)

1602 
	#AT91C_EMAC_REVREF
 (() 0xFFFF << 0)

1603 
	#AT91C_EMAC_PARTREF
 (() 0xFFFF << 16)

1604 

	)

1608 
	s_AT91S_ADC
 {

1609 
AT91_REG
 
	mADC_CR
;

1610 
AT91_REG
 
	mADC_MR
;

1611 
AT91_REG
 
	mRe£rved0
[2];

1612 
AT91_REG
 
	mADC_CHER
;

1613 
AT91_REG
 
	mADC_CHDR
;

1614 
AT91_REG
 
	mADC_CHSR
;

1615 
AT91_REG
 
	mADC_SR
;

1616 
AT91_REG
 
	mADC_LCDR
;

1617 
AT91_REG
 
	mADC_IER
;

1618 
AT91_REG
 
	mADC_IDR
;

1619 
AT91_REG
 
	mADC_IMR
;

1620 
AT91_REG
 
	mADC_CDR0
;

1621 
AT91_REG
 
	mADC_CDR1
;

1622 
AT91_REG
 
	mADC_CDR2
;

1623 
AT91_REG
 
	mADC_CDR3
;

1624 
AT91_REG
 
	mADC_CDR4
;

1625 
AT91_REG
 
	mADC_CDR5
;

1626 
AT91_REG
 
	mADC_CDR6
;

1627 
AT91_REG
 
	mADC_CDR7
;

1628 
AT91_REG
 
	mRe£rved1
[44];

1629 
AT91_REG
 
	mADC_RPR
;

1630 
AT91_REG
 
	mADC_RCR
;

1631 
AT91_REG
 
	mADC_TPR
;

1632 
AT91_REG
 
	mADC_TCR
;

1633 
AT91_REG
 
	mADC_RNPR
;

1634 
AT91_REG
 
	mADC_RNCR
;

1635 
AT91_REG
 
	mADC_TNPR
;

1636 
AT91_REG
 
	mADC_TNCR
;

1637 
AT91_REG
 
	mADC_PTCR
;

1638 
AT91_REG
 
	mADC_PTSR
;

1639 } 
	tAT91S_ADC
, *
	tAT91PS_ADC
;

1642 
	#AT91C_ADC_SWRST
 (() 0x1 << 0)

1643 
	#AT91C_ADC_START
 (() 0x1 << 1)

1645 
	#AT91C_ADC_TRGEN
 (() 0x1 << 0)

1646 
	#AT91C_ADC_TRGEN_DIS
 (() 0x0)

1647 
	#AT91C_ADC_TRGEN_EN
 (() 0x1)

1648 
	#AT91C_ADC_TRGSEL
 (() 0x7 << 1)

1649 
	#AT91C_ADC_TRGSEL_TIOA0
 (() 0x0 << 1)

1650 
	#AT91C_ADC_TRGSEL_TIOA1
 (() 0x1 << 1)

1651 
	#AT91C_ADC_TRGSEL_TIOA2
 (() 0x2 << 1)

1652 
	#AT91C_ADC_TRGSEL_TIOA3
 (() 0x3 << 1)

1653 
	#AT91C_ADC_TRGSEL_TIOA4
 (() 0x4 << 1)

1654 
	#AT91C_ADC_TRGSEL_TIOA5
 (() 0x5 << 1)

1655 
	#AT91C_ADC_TRGSEL_EXT
 (() 0x6 << 1)

1656 
	#AT91C_ADC_LOWRES
 (() 0x1 << 4)

1657 
	#AT91C_ADC_LOWRES_10_BIT
 (() 0x0 << 4)

1658 
	#AT91C_ADC_LOWRES_8_BIT
 (() 0x1 << 4)

1659 
	#AT91C_ADC_SLEEP
 (() 0x1 << 5)

1660 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (() 0x0 << 5)

1661 
	#AT91C_ADC_SLEEP_MODE
 (() 0x1 << 5)

1662 
	#AT91C_ADC_PRESCAL
 (() 0x3F << 8)

1663 
	#AT91C_ADC_STARTUP
 (() 0x1F << 16)

1664 
	#AT91C_ADC_SHTIM
 (() 0xF << 24)

1666 
	#AT91C_ADC_CH0
 (() 0x1 << 0)

1667 
	#AT91C_ADC_CH1
 (() 0x1 << 1)

1668 
	#AT91C_ADC_CH2
 (() 0x1 << 2)

1669 
	#AT91C_ADC_CH3
 (() 0x1 << 3)

1670 
	#AT91C_ADC_CH4
 (() 0x1 << 4)

1671 
	#AT91C_ADC_CH5
 (() 0x1 << 5)

1672 
	#AT91C_ADC_CH6
 (() 0x1 << 6)

1673 
	#AT91C_ADC_CH7
 (() 0x1 << 7)

1677 
	#AT91C_ADC_EOC0
 (() 0x1 << 0)

1678 
	#AT91C_ADC_EOC1
 (() 0x1 << 1)

1679 
	#AT91C_ADC_EOC2
 (() 0x1 << 2)

1680 
	#AT91C_ADC_EOC3
 (() 0x1 << 3)

1681 
	#AT91C_ADC_EOC4
 (() 0x1 << 4)

1682 
	#AT91C_ADC_EOC5
 (() 0x1 << 5)

1683 
	#AT91C_ADC_EOC6
 (() 0x1 << 6)

1684 
	#AT91C_ADC_EOC7
 (() 0x1 << 7)

1685 
	#AT91C_ADC_OVRE0
 (() 0x1 << 8)

1686 
	#AT91C_ADC_OVRE1
 (() 0x1 << 9)

1687 
	#AT91C_ADC_OVRE2
 (() 0x1 << 10)

1688 
	#AT91C_ADC_OVRE3
 (() 0x1 << 11)

1689 
	#AT91C_ADC_OVRE4
 (() 0x1 << 12)

1690 
	#AT91C_ADC_OVRE5
 (() 0x1 << 13)

1691 
	#AT91C_ADC_OVRE6
 (() 0x1 << 14)

1692 
	#AT91C_ADC_OVRE7
 (() 0x1 << 15)

1693 
	#AT91C_ADC_DRDY
 (() 0x1 << 16)

1694 
	#AT91C_ADC_GOVRE
 (() 0x1 << 17)

1695 
	#AT91C_ADC_ENDRX
 (() 0x1 << 18)

1696 
	#AT91C_ADC_RXBUFF
 (() 0x1 << 19)

1698 
	#AT91C_ADC_LDATA
 (() 0x3FF << 0)

1703 
	#AT91C_ADC_DATA
 (() 0x3FF << 0)

1711 

	)

1715 
	s_AT91S_AES
 {

1716 
AT91_REG
 
	mAES_CR
;

1717 
AT91_REG
 
	mAES_MR
;

1718 
AT91_REG
 
	mRe£rved0
[2];

1719 
AT91_REG
 
	mAES_IER
;

1720 
AT91_REG
 
	mAES_IDR
;

1721 
AT91_REG
 
	mAES_IMR
;

1722 
AT91_REG
 
	mAES_ISR
;

1723 
AT91_REG
 
	mAES_KEYWxR
[4];

1724 
AT91_REG
 
	mRe£rved1
[4];

1725 
AT91_REG
 
	mAES_IDATAxR
[4];

1726 
AT91_REG
 
	mAES_ODATAxR
[4];

1727 
AT91_REG
 
	mAES_IVxR
[4];

1728 
AT91_REG
 
	mRe£rved2
[35];

1729 
AT91_REG
 
	mAES_VR
;

1730 
AT91_REG
 
	mAES_RPR
;

1731 
AT91_REG
 
	mAES_RCR
;

1732 
AT91_REG
 
	mAES_TPR
;

1733 
AT91_REG
 
	mAES_TCR
;

1734 
AT91_REG
 
	mAES_RNPR
;

1735 
AT91_REG
 
	mAES_RNCR
;

1736 
AT91_REG
 
	mAES_TNPR
;

1737 
AT91_REG
 
	mAES_TNCR
;

1738 
AT91_REG
 
	mAES_PTCR
;

1739 
AT91_REG
 
	mAES_PTSR
;

1740 } 
	tAT91S_AES
, *
	tAT91PS_AES
;

1743 
	#AT91C_AES_START
 (() 0x1 << 0)

1744 
	#AT91C_AES_SWRST
 (() 0x1 << 8)

1745 
	#AT91C_AES_LOADSEED
 (() 0x1 << 16)

1747 
	#AT91C_AES_CIPHER
 (() 0x1 << 0)

1748 
	#AT91C_AES_PROCDLY
 (() 0xF << 4)

1749 
	#AT91C_AES_SMOD
 (() 0x3 << 8)

1750 
	#AT91C_AES_SMOD_MANUAL
 (() 0x0 << 8)

1751 
	#AT91C_AES_SMOD_AUTO
 (() 0x1 << 8)

1752 
	#AT91C_AES_SMOD_PDC
 (() 0x2 << 8)

1753 
	#AT91C_AES_OPMOD
 (() 0x7 << 12)

1754 
	#AT91C_AES_OPMOD_ECB
 (() 0x0 << 12)

1755 
	#AT91C_AES_OPMOD_CBC
 (() 0x1 << 12)

1756 
	#AT91C_AES_OPMOD_OFB
 (() 0x2 << 12)

1757 
	#AT91C_AES_OPMOD_CFB
 (() 0x3 << 12)

1758 
	#AT91C_AES_OPMOD_CTR
 (() 0x4 << 12)

1759 
	#AT91C_AES_LOD
 (() 0x1 << 15)

1760 
	#AT91C_AES_CFBS
 (() 0x7 << 16)

1761 
	#AT91C_AES_CFBS_128_BIT
 (() 0x0 << 16)

1762 
	#AT91C_AES_CFBS_64_BIT
 (() 0x1 << 16)

1763 
	#AT91C_AES_CFBS_32_BIT
 (() 0x2 << 16)

1764 
	#AT91C_AES_CFBS_16_BIT
 (() 0x3 << 16)

1765 
	#AT91C_AES_CFBS_8_BIT
 (() 0x4 << 16)

1766 
	#AT91C_AES_CKEY
 (() 0xF << 20)

1767 
	#AT91C_AES_CTYPE
 (() 0x1F << 24)

1768 
	#AT91C_AES_CTYPE_TYPE1_EN
 (() 0x1 << 24)

1769 
	#AT91C_AES_CTYPE_TYPE2_EN
 (() 0x2 << 24)

1770 
	#AT91C_AES_CTYPE_TYPE3_EN
 (() 0x4 << 24)

1771 
	#AT91C_AES_CTYPE_TYPE4_EN
 (() 0x8 << 24)

1772 
	#AT91C_AES_CTYPE_TYPE5_EN
 (() 0x10 << 24)

1774 
	#AT91C_AES_DATRDY
 (() 0x1 << 0)

1775 
	#AT91C_AES_ENDRX
 (() 0x1 << 1)

1776 
	#AT91C_AES_ENDTX
 (() 0x1 << 2)

1777 
	#AT91C_AES_RXBUFF
 (() 0x1 << 3)

1778 
	#AT91C_AES_TXBUFE
 (() 0x1 << 4)

1779 
	#AT91C_AES_URAD
 (() 0x1 << 8)

1783 
	#AT91C_AES_URAT
 (() 0x7 << 12)

1784 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1785 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1786 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1787 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (() 0x3 << 12)

1788 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (() 0x4 << 12)

1789 
	#AT91C_AES_URAT_WO_REG_READ
 (() 0x5 << 12)

1790 

	)

1794 
	s_AT91S_TDES
 {

1795 
AT91_REG
 
	mTDES_CR
;

1796 
AT91_REG
 
	mTDES_MR
;

1797 
AT91_REG
 
	mRe£rved0
[2];

1798 
AT91_REG
 
	mTDES_IER
;

1799 
AT91_REG
 
	mTDES_IDR
;

1800 
AT91_REG
 
	mTDES_IMR
;

1801 
AT91_REG
 
	mTDES_ISR
;

1802 
AT91_REG
 
	mTDES_KEY1WxR
[2];

1803 
AT91_REG
 
	mTDES_KEY2WxR
[2];

1804 
AT91_REG
 
	mTDES_KEY3WxR
[2];

1805 
AT91_REG
 
	mRe£rved1
[2];

1806 
AT91_REG
 
	mTDES_IDATAxR
[2];

1807 
AT91_REG
 
	mRe£rved2
[2];

1808 
AT91_REG
 
	mTDES_ODATAxR
[2];

1809 
AT91_REG
 
	mRe£rved3
[2];

1810 
AT91_REG
 
	mTDES_IVxR
[2];

1811 
AT91_REG
 
	mRe£rved4
[37];

1812 
AT91_REG
 
	mTDES_VR
;

1813 
AT91_REG
 
	mTDES_RPR
;

1814 
AT91_REG
 
	mTDES_RCR
;

1815 
AT91_REG
 
	mTDES_TPR
;

1816 
AT91_REG
 
	mTDES_TCR
;

1817 
AT91_REG
 
	mTDES_RNPR
;

1818 
AT91_REG
 
	mTDES_RNCR
;

1819 
AT91_REG
 
	mTDES_TNPR
;

1820 
AT91_REG
 
	mTDES_TNCR
;

1821 
AT91_REG
 
	mTDES_PTCR
;

1822 
AT91_REG
 
	mTDES_PTSR
;

1823 } 
	tAT91S_TDES
, *
	tAT91PS_TDES
;

1826 
	#AT91C_TDES_START
 (() 0x1 << 0)

1827 
	#AT91C_TDES_SWRST
 (() 0x1 << 8)

1829 
	#AT91C_TDES_CIPHER
 (() 0x1 << 0)

1830 
	#AT91C_TDES_TDESMOD
 (() 0x1 << 1)

1831 
	#AT91C_TDES_KEYMOD
 (() 0x1 << 4)

1832 
	#AT91C_TDES_SMOD
 (() 0x3 << 8)

1833 
	#AT91C_TDES_SMOD_MANUAL
 (() 0x0 << 8)

1834 
	#AT91C_TDES_SMOD_AUTO
 (() 0x1 << 8)

1835 
	#AT91C_TDES_SMOD_PDC
 (() 0x2 << 8)

1836 
	#AT91C_TDES_OPMOD
 (() 0x3 << 12)

1837 
	#AT91C_TDES_OPMOD_ECB
 (() 0x0 << 12)

1838 
	#AT91C_TDES_OPMOD_CBC
 (() 0x1 << 12)

1839 
	#AT91C_TDES_OPMOD_OFB
 (() 0x2 << 12)

1840 
	#AT91C_TDES_OPMOD_CFB
 (() 0x3 << 12)

1841 
	#AT91C_TDES_LOD
 (() 0x1 << 15)

1842 
	#AT91C_TDES_CFBS
 (() 0x3 << 16)

1843 
	#AT91C_TDES_CFBS_64_BIT
 (() 0x0 << 16)

1844 
	#AT91C_TDES_CFBS_32_BIT
 (() 0x1 << 16)

1845 
	#AT91C_TDES_CFBS_16_BIT
 (() 0x2 << 16)

1846 
	#AT91C_TDES_CFBS_8_BIT
 (() 0x3 << 16)

1848 
	#AT91C_TDES_DATRDY
 (() 0x1 << 0)

1849 
	#AT91C_TDES_ENDRX
 (() 0x1 << 1)

1850 
	#AT91C_TDES_ENDTX
 (() 0x1 << 2)

1851 
	#AT91C_TDES_RXBUFF
 (() 0x1 << 3)

1852 
	#AT91C_TDES_TXBUFE
 (() 0x1 << 4)

1853 
	#AT91C_TDES_URAD
 (() 0x1 << 8)

1857 
	#AT91C_TDES_URAT
 (() 0x3 << 12)

1858 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1859 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1860 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1861 
	#AT91C_TDES_URAT_WO_REG_READ
 (() 0x3 << 12)

1862 

	)

1868 
	#AT91C_AIC_IVR
 ((
AT91_REG
 *) 0xFFFFF100)

1869 
	#AT91C_AIC_SMR
 ((
AT91_REG
 *) 0xFFFFF000)

1870 
	#AT91C_AIC_FVR
 ((
AT91_REG
 *) 0xFFFFF104)

1871 
	#AT91C_AIC_DCR
 ((
AT91_REG
 *) 0xFFFFF138)

1872 
	#AT91C_AIC_EOICR
 ((
AT91_REG
 *) 0xFFFFF130)

1873 
	#AT91C_AIC_SVR
 ((
AT91_REG
 *) 0xFFFFF080)

1874 
	#AT91C_AIC_FFSR
 ((
AT91_REG
 *) 0xFFFFF148)

1875 
	#AT91C_AIC_ICCR
 ((
AT91_REG
 *) 0xFFFFF128)

1876 
	#AT91C_AIC_ISR
 ((
AT91_REG
 *) 0xFFFFF108)

1877 
	#AT91C_AIC_IMR
 ((
AT91_REG
 *) 0xFFFFF110)

1878 
	#AT91C_AIC_IPR
 ((
AT91_REG
 *) 0xFFFFF10C)

1879 
	#AT91C_AIC_FFER
 ((
AT91_REG
 *) 0xFFFFF140)

1880 
	#AT91C_AIC_IECR
 ((
AT91_REG
 *) 0xFFFFF120)

1881 
	#AT91C_AIC_ISCR
 ((
AT91_REG
 *) 0xFFFFF12C)

1882 
	#AT91C_AIC_FFDR
 ((
AT91_REG
 *) 0xFFFFF144)

1883 
	#AT91C_AIC_CISR
 ((
AT91_REG
 *) 0xFFFFF114)

1884 
	#AT91C_AIC_IDCR
 ((
AT91_REG
 *) 0xFFFFF124)

1885 
	#AT91C_AIC_SPU
 ((
AT91_REG
 *) 0xFFFFF134)

1887 
	#AT91C_DBGU_TCR
 ((
AT91_REG
 *) 0xFFFFF30C)

1888 
	#AT91C_DBGU_RNPR
 ((
AT91_REG
 *) 0xFFFFF310)

1889 
	#AT91C_DBGU_TNPR
 ((
AT91_REG
 *) 0xFFFFF318)

1890 
	#AT91C_DBGU_TPR
 ((
AT91_REG
 *) 0xFFFFF308)

1891 
	#AT91C_DBGU_RPR
 ((
AT91_REG
 *) 0xFFFFF300)

1892 
	#AT91C_DBGU_RCR
 ((
AT91_REG
 *) 0xFFFFF304)

1893 
	#AT91C_DBGU_RNCR
 ((
AT91_REG
 *) 0xFFFFF314)

1894 
	#AT91C_DBGU_PTCR
 ((
AT91_REG
 *) 0xFFFFF320)

1895 
	#AT91C_DBGU_PTSR
 ((
AT91_REG
 *) 0xFFFFF324)

1896 
	#AT91C_DBGU_TNCR
 ((
AT91_REG
 *) 0xFFFFF31C)

1898 
	#AT91C_DBGU_EXID
 ((
AT91_REG
 *) 0xFFFFF244)

1899 
	#AT91C_DBGU_BRGR
 ((
AT91_REG
 *) 0xFFFFF220)

1900 
	#AT91C_DBGU_IDR
 ((
AT91_REG
 *) 0xFFFFF20C)

1901 
	#AT91C_DBGU_CSR
 ((
AT91_REG
 *) 0xFFFFF214)

1902 
	#AT91C_DBGU_CIDR
 ((
AT91_REG
 *) 0xFFFFF240)

1903 
	#AT91C_DBGU_MR
 ((
AT91_REG
 *) 0xFFFFF204)

1904 
	#AT91C_DBGU_IMR
 ((
AT91_REG
 *) 0xFFFFF210)

1905 
	#AT91C_DBGU_CR
 ((
AT91_REG
 *) 0xFFFFF200)

1906 
	#AT91C_DBGU_FNTR
 ((
AT91_REG
 *) 0xFFFFF248)

1907 
	#AT91C_DBGU_THR
 ((
AT91_REG
 *) 0xFFFFF21C)

1908 
	#AT91C_DBGU_RHR
 ((
AT91_REG
 *) 0xFFFFF218)

1909 
	#AT91C_DBGU_IER
 ((
AT91_REG
 *) 0xFFFFF208)

1911 
	#AT91C_PIOA_ODR
 ((
AT91_REG
 *) 0xFFFFF414)

1912 
	#AT91C_PIOA_SODR
 ((
AT91_REG
 *) 0xFFFFF430)

1913 
	#AT91C_PIOA_ISR
 ((
AT91_REG
 *) 0xFFFFF44C)

1914 
	#AT91C_PIOA_ABSR
 ((
AT91_REG
 *) 0xFFFFF478)

1915 
	#AT91C_PIOA_IER
 ((
AT91_REG
 *) 0xFFFFF440)

1916 
	#AT91C_PIOA_PPUDR
 ((
AT91_REG
 *) 0xFFFFF460)

1917 
	#AT91C_PIOA_IMR
 ((
AT91_REG
 *) 0xFFFFF448)

1918 
	#AT91C_PIOA_PER
 ((
AT91_REG
 *) 0xFFFFF400)

1919 
	#AT91C_PIOA_IFDR
 ((
AT91_REG
 *) 0xFFFFF424)

1920 
	#AT91C_PIOA_OWDR
 ((
AT91_REG
 *) 0xFFFFF4A4)

1921 
	#AT91C_PIOA_MDSR
 ((
AT91_REG
 *) 0xFFFFF458)

1922 
	#AT91C_PIOA_IDR
 ((
AT91_REG
 *) 0xFFFFF444)

1923 
	#AT91C_PIOA_ODSR
 ((
AT91_REG
 *) 0xFFFFF438)

1924 
	#AT91C_PIOA_PPUSR
 ((
AT91_REG
 *) 0xFFFFF468)

1925 
	#AT91C_PIOA_OWSR
 ((
AT91_REG
 *) 0xFFFFF4A8)

1926 
	#AT91C_PIOA_BSR
 ((
AT91_REG
 *) 0xFFFFF474)

1927 
	#AT91C_PIOA_OWER
 ((
AT91_REG
 *) 0xFFFFF4A0)

1928 
	#AT91C_PIOA_IFER
 ((
AT91_REG
 *) 0xFFFFF420)

1929 
	#AT91C_PIOA_PDSR
 ((
AT91_REG
 *) 0xFFFFF43C)

1930 
	#AT91C_PIOA_PPUER
 ((
AT91_REG
 *) 0xFFFFF464)

1931 
	#AT91C_PIOA_OSR
 ((
AT91_REG
 *) 0xFFFFF418)

1932 
	#AT91C_PIOA_ASR
 ((
AT91_REG
 *) 0xFFFFF470)

1933 
	#AT91C_PIOA_MDDR
 ((
AT91_REG
 *) 0xFFFFF454)

1934 
	#AT91C_PIOA_CODR
 ((
AT91_REG
 *) 0xFFFFF434)

1935 
	#AT91C_PIOA_MDER
 ((
AT91_REG
 *) 0xFFFFF450)

1936 
	#AT91C_PIOA_PDR
 ((
AT91_REG
 *) 0xFFFFF404)

1937 
	#AT91C_PIOA_IFSR
 ((
AT91_REG
 *) 0xFFFFF428)

1938 
	#AT91C_PIOA_OER
 ((
AT91_REG
 *) 0xFFFFF410)

1939 
	#AT91C_PIOA_PSR
 ((
AT91_REG
 *) 0xFFFFF408)

1941 
	#AT91C_PIOB_OWDR
 ((
AT91_REG
 *) 0xFFFFF6A4)

1942 
	#AT91C_PIOB_MDER
 ((
AT91_REG
 *) 0xFFFFF650)

1943 
	#AT91C_PIOB_PPUSR
 ((
AT91_REG
 *) 0xFFFFF668)

1944 
	#AT91C_PIOB_IMR
 ((
AT91_REG
 *) 0xFFFFF648)

1945 
	#AT91C_PIOB_ASR
 ((
AT91_REG
 *) 0xFFFFF670)

1946 
	#AT91C_PIOB_PPUDR
 ((
AT91_REG
 *) 0xFFFFF660)

1947 
	#AT91C_PIOB_PSR
 ((
AT91_REG
 *) 0xFFFFF608)

1948 
	#AT91C_PIOB_IER
 ((
AT91_REG
 *) 0xFFFFF640)

1949 
	#AT91C_PIOB_CODR
 ((
AT91_REG
 *) 0xFFFFF634)

1950 
	#AT91C_PIOB_OWER
 ((
AT91_REG
 *) 0xFFFFF6A0)

1951 
	#AT91C_PIOB_ABSR
 ((
AT91_REG
 *) 0xFFFFF678)

1952 
	#AT91C_PIOB_IFDR
 ((
AT91_REG
 *) 0xFFFFF624)

1953 
	#AT91C_PIOB_PDSR
 ((
AT91_REG
 *) 0xFFFFF63C)

1954 
	#AT91C_PIOB_IDR
 ((
AT91_REG
 *) 0xFFFFF644)

1955 
	#AT91C_PIOB_OWSR
 ((
AT91_REG
 *) 0xFFFFF6A8)

1956 
	#AT91C_PIOB_PDR
 ((
AT91_REG
 *) 0xFFFFF604)

1957 
	#AT91C_PIOB_ODR
 ((
AT91_REG
 *) 0xFFFFF614)

1958 
	#AT91C_PIOB_IFSR
 ((
AT91_REG
 *) 0xFFFFF628)

1959 
	#AT91C_PIOB_PPUER
 ((
AT91_REG
 *) 0xFFFFF664)

1960 
	#AT91C_PIOB_SODR
 ((
AT91_REG
 *) 0xFFFFF630)

1961 
	#AT91C_PIOB_ISR
 ((
AT91_REG
 *) 0xFFFFF64C)

1962 
	#AT91C_PIOB_ODSR
 ((
AT91_REG
 *) 0xFFFFF638)

1963 
	#AT91C_PIOB_OSR
 ((
AT91_REG
 *) 0xFFFFF618)

1964 
	#AT91C_PIOB_MDSR
 ((
AT91_REG
 *) 0xFFFFF658)

1965 
	#AT91C_PIOB_IFER
 ((
AT91_REG
 *) 0xFFFFF620)

1966 
	#AT91C_PIOB_BSR
 ((
AT91_REG
 *) 0xFFFFF674)

1967 
	#AT91C_PIOB_MDDR
 ((
AT91_REG
 *) 0xFFFFF654)

1968 
	#AT91C_PIOB_OER
 ((
AT91_REG
 *) 0xFFFFF610)

1969 
	#AT91C_PIOB_PER
 ((
AT91_REG
 *) 0xFFFFF600)

1971 
	#AT91C_CKGR_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1972 
	#AT91C_CKGR_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1973 
	#AT91C_CKGR_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1975 
	#AT91C_PMC_IDR
 ((
AT91_REG
 *) 0xFFFFFC64)

1976 
	#AT91C_PMC_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1977 
	#AT91C_PMC_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1978 
	#AT91C_PMC_PCER
 ((
AT91_REG
 *) 0xFFFFFC10)

1979 
	#AT91C_PMC_PCKR
 ((
AT91_REG
 *) 0xFFFFFC40)

1980 
	#AT91C_PMC_MCKR
 ((
AT91_REG
 *) 0xFFFFFC30)

1981 
	#AT91C_PMC_SCDR
 ((
AT91_REG
 *) 0xFFFFFC04)

1982 
	#AT91C_PMC_PCDR
 ((
AT91_REG
 *) 0xFFFFFC14)

1983 
	#AT91C_PMC_SCSR
 ((
AT91_REG
 *) 0xFFFFFC08)

1984 
	#AT91C_PMC_PCSR
 ((
AT91_REG
 *) 0xFFFFFC18)

1985 
	#AT91C_PMC_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1986 
	#AT91C_PMC_SCER
 ((
AT91_REG
 *) 0xFFFFFC00)

1987 
	#AT91C_PMC_IMR
 ((
AT91_REG
 *) 0xFFFFFC6C)

1988 
	#AT91C_PMC_IER
 ((
AT91_REG
 *) 0xFFFFFC60)

1989 
	#AT91C_PMC_SR
 ((
AT91_REG
 *) 0xFFFFFC68)

1991 
	#AT91C_RSTC_RCR
 ((
AT91_REG
 *) 0xFFFFFD00)

1992 
	#AT91C_RSTC_RMR
 ((
AT91_REG
 *) 0xFFFFFD08)

1993 
	#AT91C_RSTC_RSR
 ((
AT91_REG
 *) 0xFFFFFD04)

1995 
	#AT91C_RTTC_RTSR
 ((
AT91_REG
 *) 0xFFFFFD2C)

1996 
	#AT91C_RTTC_RTMR
 ((
AT91_REG
 *) 0xFFFFFD20)

1997 
	#AT91C_RTTC_RTVR
 ((
AT91_REG
 *) 0xFFFFFD28)

1998 
	#AT91C_RTTC_RTAR
 ((
AT91_REG
 *) 0xFFFFFD24)

2000 
	#AT91C_PITC_PIVR
 ((
AT91_REG
 *) 0xFFFFFD38)

2001 
	#AT91C_PITC_PISR
 ((
AT91_REG
 *) 0xFFFFFD34)

2002 
	#AT91C_PITC_PIIR
 ((
AT91_REG
 *) 0xFFFFFD3C)

2003 
	#AT91C_PITC_PIMR
 ((
AT91_REG
 *) 0xFFFFFD30)

2005 
	#AT91C_WDTC_WDCR
 ((
AT91_REG
 *) 0xFFFFFD40)

2006 
	#AT91C_WDTC_WDSR
 ((
AT91_REG
 *) 0xFFFFFD48)

2007 
	#AT91C_WDTC_WDMR
 ((
AT91_REG
 *) 0xFFFFFD44)

2009 
	#AT91C_VREG_MR
 ((
AT91_REG
 *) 0xFFFFFD60)

2011 
	#AT91C_MC_ASR
 ((
AT91_REG
 *) 0xFFFFFF04)

2012 
	#AT91C_MC_RCR
 ((
AT91_REG
 *) 0xFFFFFF00)

2013 
	#AT91C_MC_FCR
 ((
AT91_REG
 *) 0xFFFFFF64)

2014 
	#AT91C_MC_AASR
 ((
AT91_REG
 *) 0xFFFFFF08)

2015 
	#AT91C_MC_FSR
 ((
AT91_REG
 *) 0xFFFFFF68)

2016 
	#AT91C_MC_FMR
 ((
AT91_REG
 *) 0xFFFFFF60)

2018 
	#AT91C_SPI1_PTCR
 ((
AT91_REG
 *) 0xFFFE4120)

2019 
	#AT91C_SPI1_RPR
 ((
AT91_REG
 *) 0xFFFE4100)

2020 
	#AT91C_SPI1_TNCR
 ((
AT91_REG
 *) 0xFFFE411C)

2021 
	#AT91C_SPI1_TPR
 ((
AT91_REG
 *) 0xFFFE4108)

2022 
	#AT91C_SPI1_TNPR
 ((
AT91_REG
 *) 0xFFFE4118)

2023 
	#AT91C_SPI1_TCR
 ((
AT91_REG
 *) 0xFFFE410C)

2024 
	#AT91C_SPI1_RCR
 ((
AT91_REG
 *) 0xFFFE4104)

2025 
	#AT91C_SPI1_RNPR
 ((
AT91_REG
 *) 0xFFFE4110)

2026 
	#AT91C_SPI1_RNCR
 ((
AT91_REG
 *) 0xFFFE4114)

2027 
	#AT91C_SPI1_PTSR
 ((
AT91_REG
 *) 0xFFFE4124)

2029 
	#AT91C_SPI1_IMR
 ((
AT91_REG
 *) 0xFFFE401C)

2030 
	#AT91C_SPI1_IER
 ((
AT91_REG
 *) 0xFFFE4014)

2031 
	#AT91C_SPI1_MR
 ((
AT91_REG
 *) 0xFFFE4004)

2032 
	#AT91C_SPI1_RDR
 ((
AT91_REG
 *) 0xFFFE4008)

2033 
	#AT91C_SPI1_IDR
 ((
AT91_REG
 *) 0xFFFE4018)

2034 
	#AT91C_SPI1_SR
 ((
AT91_REG
 *) 0xFFFE4010)

2035 
	#AT91C_SPI1_TDR
 ((
AT91_REG
 *) 0xFFFE400C)

2036 
	#AT91C_SPI1_CR
 ((
AT91_REG
 *) 0xFFFE4000)

2037 
	#AT91C_SPI1_CSR
 ((
AT91_REG
 *) 0xFFFE4030)

2039 
	#AT91C_SPI0_PTCR
 ((
AT91_REG
 *) 0xFFFE0120)

2040 
	#AT91C_SPI0_TPR
 ((
AT91_REG
 *) 0xFFFE0108)

2041 
	#AT91C_SPI0_TCR
 ((
AT91_REG
 *) 0xFFFE010C)

2042 
	#AT91C_SPI0_RCR
 ((
AT91_REG
 *) 0xFFFE0104)

2043 
	#AT91C_SPI0_PTSR
 ((
AT91_REG
 *) 0xFFFE0124)

2044 
	#AT91C_SPI0_RNPR
 ((
AT91_REG
 *) 0xFFFE0110)

2045 
	#AT91C_SPI0_RPR
 ((
AT91_REG
 *) 0xFFFE0100)

2046 
	#AT91C_SPI0_TNCR
 ((
AT91_REG
 *) 0xFFFE011C)

2047 
	#AT91C_SPI0_RNCR
 ((
AT91_REG
 *) 0xFFFE0114)

2048 
	#AT91C_SPI0_TNPR
 ((
AT91_REG
 *) 0xFFFE0118)

2050 
	#AT91C_SPI0_IER
 ((
AT91_REG
 *) 0xFFFE0014)

2051 
	#AT91C_SPI0_SR
 ((
AT91_REG
 *) 0xFFFE0010)

2052 
	#AT91C_SPI0_IDR
 ((
AT91_REG
 *) 0xFFFE0018)

2053 
	#AT91C_SPI0_CR
 ((
AT91_REG
 *) 0xFFFE0000)

2054 
	#AT91C_SPI0_MR
 ((
AT91_REG
 *) 0xFFFE0004)

2055 
	#AT91C_SPI0_IMR
 ((
AT91_REG
 *) 0xFFFE001C)

2056 
	#AT91C_SPI0_TDR
 ((
AT91_REG
 *) 0xFFFE000C)

2057 
	#AT91C_SPI0_RDR
 ((
AT91_REG
 *) 0xFFFE0008)

2058 
	#AT91C_SPI0_CSR
 ((
AT91_REG
 *) 0xFFFE0030)

2060 
	#AT91C_US1_RNCR
 ((
AT91_REG
 *) 0xFFFC4114)

2061 
	#AT91C_US1_PTCR
 ((
AT91_REG
 *) 0xFFFC4120)

2062 
	#AT91C_US1_TCR
 ((
AT91_REG
 *) 0xFFFC410C)

2063 
	#AT91C_US1_PTSR
 ((
AT91_REG
 *) 0xFFFC4124)

2064 
	#AT91C_US1_TNPR
 ((
AT91_REG
 *) 0xFFFC4118)

2065 
	#AT91C_US1_RCR
 ((
AT91_REG
 *) 0xFFFC4104)

2066 
	#AT91C_US1_RNPR
 ((
AT91_REG
 *) 0xFFFC4110)

2067 
	#AT91C_US1_RPR
 ((
AT91_REG
 *) 0xFFFC4100)

2068 
	#AT91C_US1_TNCR
 ((
AT91_REG
 *) 0xFFFC411C)

2069 
	#AT91C_US1_TPR
 ((
AT91_REG
 *) 0xFFFC4108)

2071 
	#AT91C_US1_IF
 ((
AT91_REG
 *) 0xFFFC404C)

2072 
	#AT91C_US1_NER
 ((
AT91_REG
 *) 0xFFFC4044)

2073 
	#AT91C_US1_RTOR
 ((
AT91_REG
 *) 0xFFFC4024)

2074 
	#AT91C_US1_CSR
 ((
AT91_REG
 *) 0xFFFC4014)

2075 
	#AT91C_US1_IDR
 ((
AT91_REG
 *) 0xFFFC400C)

2076 
	#AT91C_US1_IER
 ((
AT91_REG
 *) 0xFFFC4008)

2077 
	#AT91C_US1_THR
 ((
AT91_REG
 *) 0xFFFC401C)

2078 
	#AT91C_US1_TTGR
 ((
AT91_REG
 *) 0xFFFC4028)

2079 
	#AT91C_US1_RHR
 ((
AT91_REG
 *) 0xFFFC4018)

2080 
	#AT91C_US1_BRGR
 ((
AT91_REG
 *) 0xFFFC4020)

2081 
	#AT91C_US1_IMR
 ((
AT91_REG
 *) 0xFFFC4010)

2082 
	#AT91C_US1_FIDI
 ((
AT91_REG
 *) 0xFFFC4040)

2083 
	#AT91C_US1_CR
 ((
AT91_REG
 *) 0xFFFC4000)

2084 
	#AT91C_US1_MR
 ((
AT91_REG
 *) 0xFFFC4004)

2086 
	#AT91C_US0_TNPR
 ((
AT91_REG
 *) 0xFFFC0118)

2087 
	#AT91C_US0_RNPR
 ((
AT91_REG
 *) 0xFFFC0110)

2088 
	#AT91C_US0_TCR
 ((
AT91_REG
 *) 0xFFFC010C)

2089 
	#AT91C_US0_PTCR
 ((
AT91_REG
 *) 0xFFFC0120)

2090 
	#AT91C_US0_PTSR
 ((
AT91_REG
 *) 0xFFFC0124)

2091 
	#AT91C_US0_TNCR
 ((
AT91_REG
 *) 0xFFFC011C)

2092 
	#AT91C_US0_TPR
 ((
AT91_REG
 *) 0xFFFC0108)

2093 
	#AT91C_US0_RCR
 ((
AT91_REG
 *) 0xFFFC0104)

2094 
	#AT91C_US0_RPR
 ((
AT91_REG
 *) 0xFFFC0100)

2095 
	#AT91C_US0_RNCR
 ((
AT91_REG
 *) 0xFFFC0114)

2097 
	#AT91C_US0_BRGR
 ((
AT91_REG
 *) 0xFFFC0020)

2098 
	#AT91C_US0_NER
 ((
AT91_REG
 *) 0xFFFC0044)

2099 
	#AT91C_US0_CR
 ((
AT91_REG
 *) 0xFFFC0000)

2100 
	#AT91C_US0_IMR
 ((
AT91_REG
 *) 0xFFFC0010)

2101 
	#AT91C_US0_FIDI
 ((
AT91_REG
 *) 0xFFFC0040)

2102 
	#AT91C_US0_TTGR
 ((
AT91_REG
 *) 0xFFFC0028)

2103 
	#AT91C_US0_MR
 ((
AT91_REG
 *) 0xFFFC0004)

2104 
	#AT91C_US0_RTOR
 ((
AT91_REG
 *) 0xFFFC0024)

2105 
	#AT91C_US0_CSR
 ((
AT91_REG
 *) 0xFFFC0014)

2106 
	#AT91C_US0_RHR
 ((
AT91_REG
 *) 0xFFFC0018)

2107 
	#AT91C_US0_IDR
 ((
AT91_REG
 *) 0xFFFC000C)

2108 
	#AT91C_US0_THR
 ((
AT91_REG
 *) 0xFFFC001C)

2109 
	#AT91C_US0_IF
 ((
AT91_REG
 *) 0xFFFC004C)

2110 
	#AT91C_US0_IER
 ((
AT91_REG
 *) 0xFFFC0008)

2112 
	#AT91C_SSC_TNCR
 ((
AT91_REG
 *) 0xFFFD411C)

2113 
	#AT91C_SSC_RPR
 ((
AT91_REG
 *) 0xFFFD4100)

2114 
	#AT91C_SSC_RNCR
 ((
AT91_REG
 *) 0xFFFD4114)

2115 
	#AT91C_SSC_TPR
 ((
AT91_REG
 *) 0xFFFD4108)

2116 
	#AT91C_SSC_PTCR
 ((
AT91_REG
 *) 0xFFFD4120)

2117 
	#AT91C_SSC_TCR
 ((
AT91_REG
 *) 0xFFFD410C)

2118 
	#AT91C_SSC_RCR
 ((
AT91_REG
 *) 0xFFFD4104)

2119 
	#AT91C_SSC_RNPR
 ((
AT91_REG
 *) 0xFFFD4110)

2120 
	#AT91C_SSC_TNPR
 ((
AT91_REG
 *) 0xFFFD4118)

2121 
	#AT91C_SSC_PTSR
 ((
AT91_REG
 *) 0xFFFD4124)

2123 
	#AT91C_SSC_RHR
 ((
AT91_REG
 *) 0xFFFD4020)

2124 
	#AT91C_SSC_RSHR
 ((
AT91_REG
 *) 0xFFFD4030)

2125 
	#AT91C_SSC_TFMR
 ((
AT91_REG
 *) 0xFFFD401C)

2126 
	#AT91C_SSC_IDR
 ((
AT91_REG
 *) 0xFFFD4048)

2127 
	#AT91C_SSC_THR
 ((
AT91_REG
 *) 0xFFFD4024)

2128 
	#AT91C_SSC_RCMR
 ((
AT91_REG
 *) 0xFFFD4010)

2129 
	#AT91C_SSC_IER
 ((
AT91_REG
 *) 0xFFFD4044)

2130 
	#AT91C_SSC_TSHR
 ((
AT91_REG
 *) 0xFFFD4034)

2131 
	#AT91C_SSC_SR
 ((
AT91_REG
 *) 0xFFFD4040)

2132 
	#AT91C_SSC_CMR
 ((
AT91_REG
 *) 0xFFFD4004)

2133 
	#AT91C_SSC_TCMR
 ((
AT91_REG
 *) 0xFFFD4018)

2134 
	#AT91C_SSC_CR
 ((
AT91_REG
 *) 0xFFFD4000)

2135 
	#AT91C_SSC_IMR
 ((
AT91_REG
 *) 0xFFFD404C)

2136 
	#AT91C_SSC_RFMR
 ((
AT91_REG
 *) 0xFFFD4014)

2138 
	#AT91C_TWI_IER
 ((
AT91_REG
 *) 0xFFFB8024)

2139 
	#AT91C_TWI_CR
 ((
AT91_REG
 *) 0xFFFB8000)

2140 
	#AT91C_TWI_SR
 ((
AT91_REG
 *) 0xFFFB8020)

2141 
	#AT91C_TWI_IMR
 ((
AT91_REG
 *) 0xFFFB802C)

2142 
	#AT91C_TWI_THR
 ((
AT91_REG
 *) 0xFFFB8034)

2143 
	#AT91C_TWI_IDR
 ((
AT91_REG
 *) 0xFFFB8028)

2144 
	#AT91C_TWI_IADR
 ((
AT91_REG
 *) 0xFFFB800C)

2145 
	#AT91C_TWI_MMR
 ((
AT91_REG
 *) 0xFFFB8004)

2146 
	#AT91C_TWI_CWGR
 ((
AT91_REG
 *) 0xFFFB8010)

2147 
	#AT91C_TWI_RHR
 ((
AT91_REG
 *) 0xFFFB8030)

2149 
	#AT91C_PWMC_CH3_CUPDR
 ((
AT91_REG
 *) 0xFFFCC270)

2150 
	#AT91C_PWMC_CH3_Re£rved
 ((
AT91_REG
 *) 0xFFFCC274)

2151 
	#AT91C_PWMC_CH3_CPRDR
 ((
AT91_REG
 *) 0xFFFCC268)

2152 
	#AT91C_PWMC_CH3_CDTYR
 ((
AT91_REG
 *) 0xFFFCC264)

2153 
	#AT91C_PWMC_CH3_CCNTR
 ((
AT91_REG
 *) 0xFFFCC26C)

2154 
	#AT91C_PWMC_CH3_CMR
 ((
AT91_REG
 *) 0xFFFCC260)

2156 
	#AT91C_PWMC_CH2_Re£rved
 ((
AT91_REG
 *) 0xFFFCC254)

2157 
	#AT91C_PWMC_CH2_CMR
 ((
AT91_REG
 *) 0xFFFCC240)

2158 
	#AT91C_PWMC_CH2_CCNTR
 ((
AT91_REG
 *) 0xFFFCC24C)

2159 
	#AT91C_PWMC_CH2_CPRDR
 ((
AT91_REG
 *) 0xFFFCC248)

2160 
	#AT91C_PWMC_CH2_CUPDR
 ((
AT91_REG
 *) 0xFFFCC250)

2161 
	#AT91C_PWMC_CH2_CDTYR
 ((
AT91_REG
 *) 0xFFFCC244)

2163 
	#AT91C_PWMC_CH1_Re£rved
 ((
AT91_REG
 *) 0xFFFCC234)

2164 
	#AT91C_PWMC_CH1_CUPDR
 ((
AT91_REG
 *) 0xFFFCC230)

2165 
	#AT91C_PWMC_CH1_CPRDR
 ((
AT91_REG
 *) 0xFFFCC228)

2166 
	#AT91C_PWMC_CH1_CCNTR
 ((
AT91_REG
 *) 0xFFFCC22C)

2167 
	#AT91C_PWMC_CH1_CDTYR
 ((
AT91_REG
 *) 0xFFFCC224)

2168 
	#AT91C_PWMC_CH1_CMR
 ((
AT91_REG
 *) 0xFFFCC220)

2170 
	#AT91C_PWMC_CH0_Re£rved
 ((
AT91_REG
 *) 0xFFFCC214)

2171 
	#AT91C_PWMC_CH0_CPRDR
 ((
AT91_REG
 *) 0xFFFCC208)

2172 
	#AT91C_PWMC_CH0_CDTYR
 ((
AT91_REG
 *) 0xFFFCC204)

2173 
	#AT91C_PWMC_CH0_CMR
 ((
AT91_REG
 *) 0xFFFCC200)

2174 
	#AT91C_PWMC_CH0_CUPDR
 ((
AT91_REG
 *) 0xFFFCC210)

2175 
	#AT91C_PWMC_CH0_CCNTR
 ((
AT91_REG
 *) 0xFFFCC20C)

2177 
	#AT91C_PWMC_IDR
 ((
AT91_REG
 *) 0xFFFCC014)

2178 
	#AT91C_PWMC_DIS
 ((
AT91_REG
 *) 0xFFFCC008)

2179 
	#AT91C_PWMC_IER
 ((
AT91_REG
 *) 0xFFFCC010)

2180 
	#AT91C_PWMC_VR
 ((
AT91_REG
 *) 0xFFFCC0FC)

2181 
	#AT91C_PWMC_ISR
 ((
AT91_REG
 *) 0xFFFCC01C)

2182 
	#AT91C_PWMC_SR
 ((
AT91_REG
 *) 0xFFFCC00C)

2183 
	#AT91C_PWMC_IMR
 ((
AT91_REG
 *) 0xFFFCC018)

2184 
	#AT91C_PWMC_MR
 ((
AT91_REG
 *) 0xFFFCC000)

2185 
	#AT91C_PWMC_ENA
 ((
AT91_REG
 *) 0xFFFCC004)

2187 
	#AT91C_UDP_IMR
 ((
AT91_REG
 *) 0xFFFB0018)

2188 
	#AT91C_UDP_FADDR
 ((
AT91_REG
 *) 0xFFFB0008)

2189 
	#AT91C_UDP_NUM
 ((
AT91_REG
 *) 0xFFFB0000)

2190 
	#AT91C_UDP_FDR
 ((
AT91_REG
 *) 0xFFFB0050)

2191 
	#AT91C_UDP_ISR
 ((
AT91_REG
 *) 0xFFFB001C)

2192 
	#AT91C_UDP_CSR
 ((
AT91_REG
 *) 0xFFFB0030)

2193 
	#AT91C_UDP_IDR
 ((
AT91_REG
 *) 0xFFFB0014)

2194 
	#AT91C_UDP_ICR
 ((
AT91_REG
 *) 0xFFFB0020)

2195 
	#AT91C_UDP_RSTEP
 ((
AT91_REG
 *) 0xFFFB0028)

2196 
	#AT91C_UDP_TXVC
 ((
AT91_REG
 *) 0xFFFB0074)

2197 
	#AT91C_UDP_GLBSTATE
 ((
AT91_REG
 *) 0xFFFB0004)

2198 
	#AT91C_UDP_IER
 ((
AT91_REG
 *) 0xFFFB0010)

2200 
	#AT91C_TC0_SR
 ((
AT91_REG
 *) 0xFFFA0020)

2201 
	#AT91C_TC0_RC
 ((
AT91_REG
 *) 0xFFFA001C)

2202 
	#AT91C_TC0_RB
 ((
AT91_REG
 *) 0xFFFA0018)

2203 
	#AT91C_TC0_CCR
 ((
AT91_REG
 *) 0xFFFA0000)

2204 
	#AT91C_TC0_CMR
 ((
AT91_REG
 *) 0xFFFA0004)

2205 
	#AT91C_TC0_IER
 ((
AT91_REG
 *) 0xFFFA0024)

2206 
	#AT91C_TC0_RA
 ((
AT91_REG
 *) 0xFFFA0014)

2207 
	#AT91C_TC0_IDR
 ((
AT91_REG
 *) 0xFFFA0028)

2208 
	#AT91C_TC0_CV
 ((
AT91_REG
 *) 0xFFFA0010)

2209 
	#AT91C_TC0_IMR
 ((
AT91_REG
 *) 0xFFFA002C)

2211 
	#AT91C_TC1_RB
 ((
AT91_REG
 *) 0xFFFA0058)

2212 
	#AT91C_TC1_CCR
 ((
AT91_REG
 *) 0xFFFA0040)

2213 
	#AT91C_TC1_IER
 ((
AT91_REG
 *) 0xFFFA0064)

2214 
	#AT91C_TC1_IDR
 ((
AT91_REG
 *) 0xFFFA0068)

2215 
	#AT91C_TC1_SR
 ((
AT91_REG
 *) 0xFFFA0060)

2216 
	#AT91C_TC1_CMR
 ((
AT91_REG
 *) 0xFFFA0044)

2217 
	#AT91C_TC1_RA
 ((
AT91_REG
 *) 0xFFFA0054)

2218 
	#AT91C_TC1_RC
 ((
AT91_REG
 *) 0xFFFA005C)

2219 
	#AT91C_TC1_IMR
 ((
AT91_REG
 *) 0xFFFA006C)

2220 
	#AT91C_TC1_CV
 ((
AT91_REG
 *) 0xFFFA0050)

2222 
	#AT91C_TC2_CMR
 ((
AT91_REG
 *) 0xFFFA0084)

2223 
	#AT91C_TC2_CCR
 ((
AT91_REG
 *) 0xFFFA0080)

2224 
	#AT91C_TC2_CV
 ((
AT91_REG
 *) 0xFFFA0090)

2225 
	#AT91C_TC2_RA
 ((
AT91_REG
 *) 0xFFFA0094)

2226 
	#AT91C_TC2_RB
 ((
AT91_REG
 *) 0xFFFA0098)

2227 
	#AT91C_TC2_IDR
 ((
AT91_REG
 *) 0xFFFA00A8)

2228 
	#AT91C_TC2_IMR
 ((
AT91_REG
 *) 0xFFFA00AC)

2229 
	#AT91C_TC2_RC
 ((
AT91_REG
 *) 0xFFFA009C)

2230 
	#AT91C_TC2_IER
 ((
AT91_REG
 *) 0xFFFA00A4)

2231 
	#AT91C_TC2_SR
 ((
AT91_REG
 *) 0xFFFA00A0)

2233 
	#AT91C_TCB_BMR
 ((
AT91_REG
 *) 0xFFFA00C4)

2234 
	#AT91C_TCB_BCR
 ((
AT91_REG
 *) 0xFFFA00C0)

2236 
	#AT91C_CAN_MB0_MDL
 ((
AT91_REG
 *) 0xFFFD0214)

2237 
	#AT91C_CAN_MB0_MAM
 ((
AT91_REG
 *) 0xFFFD0204)

2238 
	#AT91C_CAN_MB0_MCR
 ((
AT91_REG
 *) 0xFFFD021C)

2239 
	#AT91C_CAN_MB0_MID
 ((
AT91_REG
 *) 0xFFFD0208)

2240 
	#AT91C_CAN_MB0_MSR
 ((
AT91_REG
 *) 0xFFFD0210)

2241 
	#AT91C_CAN_MB0_MFID
 ((
AT91_REG
 *) 0xFFFD020C)

2242 
	#AT91C_CAN_MB0_MDH
 ((
AT91_REG
 *) 0xFFFD0218)

2243 
	#AT91C_CAN_MB0_MMR
 ((
AT91_REG
 *) 0xFFFD0200)

2245 
	#AT91C_CAN_MB1_MDL
 ((
AT91_REG
 *) 0xFFFD0234)

2246 
	#AT91C_CAN_MB1_MID
 ((
AT91_REG
 *) 0xFFFD0228)

2247 
	#AT91C_CAN_MB1_MMR
 ((
AT91_REG
 *) 0xFFFD0220)

2248 
	#AT91C_CAN_MB1_MSR
 ((
AT91_REG
 *) 0xFFFD0230)

2249 
	#AT91C_CAN_MB1_MAM
 ((
AT91_REG
 *) 0xFFFD0224)

2250 
	#AT91C_CAN_MB1_MDH
 ((
AT91_REG
 *) 0xFFFD0238)

2251 
	#AT91C_CAN_MB1_MCR
 ((
AT91_REG
 *) 0xFFFD023C)

2252 
	#AT91C_CAN_MB1_MFID
 ((
AT91_REG
 *) 0xFFFD022C)

2254 
	#AT91C_CAN_MB2_MCR
 ((
AT91_REG
 *) 0xFFFD025C)

2255 
	#AT91C_CAN_MB2_MDH
 ((
AT91_REG
 *) 0xFFFD0258)

2256 
	#AT91C_CAN_MB2_MID
 ((
AT91_REG
 *) 0xFFFD0248)

2257 
	#AT91C_CAN_MB2_MDL
 ((
AT91_REG
 *) 0xFFFD0254)

2258 
	#AT91C_CAN_MB2_MMR
 ((
AT91_REG
 *) 0xFFFD0240)

2259 
	#AT91C_CAN_MB2_MAM
 ((
AT91_REG
 *) 0xFFFD0244)

2260 
	#AT91C_CAN_MB2_MFID
 ((
AT91_REG
 *) 0xFFFD024C)

2261 
	#AT91C_CAN_MB2_MSR
 ((
AT91_REG
 *) 0xFFFD0250)

2263 
	#AT91C_CAN_MB3_MFID
 ((
AT91_REG
 *) 0xFFFD026C)

2264 
	#AT91C_CAN_MB3_MAM
 ((
AT91_REG
 *) 0xFFFD0264)

2265 
	#AT91C_CAN_MB3_MID
 ((
AT91_REG
 *) 0xFFFD0268)

2266 
	#AT91C_CAN_MB3_MCR
 ((
AT91_REG
 *) 0xFFFD027C)

2267 
	#AT91C_CAN_MB3_MMR
 ((
AT91_REG
 *) 0xFFFD0260)

2268 
	#AT91C_CAN_MB3_MSR
 ((
AT91_REG
 *) 0xFFFD0270)

2269 
	#AT91C_CAN_MB3_MDL
 ((
AT91_REG
 *) 0xFFFD0274)

2270 
	#AT91C_CAN_MB3_MDH
 ((
AT91_REG
 *) 0xFFFD0278)

2272 
	#AT91C_CAN_MB4_MID
 ((
AT91_REG
 *) 0xFFFD0288)

2273 
	#AT91C_CAN_MB4_MMR
 ((
AT91_REG
 *) 0xFFFD0280)

2274 
	#AT91C_CAN_MB4_MDH
 ((
AT91_REG
 *) 0xFFFD0298)

2275 
	#AT91C_CAN_MB4_MFID
 ((
AT91_REG
 *) 0xFFFD028C)

2276 
	#AT91C_CAN_MB4_MSR
 ((
AT91_REG
 *) 0xFFFD0290)

2277 
	#AT91C_CAN_MB4_MCR
 ((
AT91_REG
 *) 0xFFFD029C)

2278 
	#AT91C_CAN_MB4_MDL
 ((
AT91_REG
 *) 0xFFFD0294)

2279 
	#AT91C_CAN_MB4_MAM
 ((
AT91_REG
 *) 0xFFFD0284)

2281 
	#AT91C_CAN_MB5_MSR
 ((
AT91_REG
 *) 0xFFFD02B0)

2282 
	#AT91C_CAN_MB5_MCR
 ((
AT91_REG
 *) 0xFFFD02BC)

2283 
	#AT91C_CAN_MB5_MFID
 ((
AT91_REG
 *) 0xFFFD02AC)

2284 
	#AT91C_CAN_MB5_MDH
 ((
AT91_REG
 *) 0xFFFD02B8)

2285 
	#AT91C_CAN_MB5_MID
 ((
AT91_REG
 *) 0xFFFD02A8)

2286 
	#AT91C_CAN_MB5_MMR
 ((
AT91_REG
 *) 0xFFFD02A0)

2287 
	#AT91C_CAN_MB5_MDL
 ((
AT91_REG
 *) 0xFFFD02B4)

2288 
	#AT91C_CAN_MB5_MAM
 ((
AT91_REG
 *) 0xFFFD02A4)

2290 
	#AT91C_CAN_MB6_MFID
 ((
AT91_REG
 *) 0xFFFD02CC)

2291 
	#AT91C_CAN_MB6_MID
 ((
AT91_REG
 *) 0xFFFD02C8)

2292 
	#AT91C_CAN_MB6_MAM
 ((
AT91_REG
 *) 0xFFFD02C4)

2293 
	#AT91C_CAN_MB6_MSR
 ((
AT91_REG
 *) 0xFFFD02D0)

2294 
	#AT91C_CAN_MB6_MDL
 ((
AT91_REG
 *) 0xFFFD02D4)

2295 
	#AT91C_CAN_MB6_MCR
 ((
AT91_REG
 *) 0xFFFD02DC)

2296 
	#AT91C_CAN_MB6_MDH
 ((
AT91_REG
 *) 0xFFFD02D8)

2297 
	#AT91C_CAN_MB6_MMR
 ((
AT91_REG
 *) 0xFFFD02C0)

2299 
	#AT91C_CAN_MB7_MCR
 ((
AT91_REG
 *) 0xFFFD02FC)

2300 
	#AT91C_CAN_MB7_MDH
 ((
AT91_REG
 *) 0xFFFD02F8)

2301 
	#AT91C_CAN_MB7_MFID
 ((
AT91_REG
 *) 0xFFFD02EC)

2302 
	#AT91C_CAN_MB7_MDL
 ((
AT91_REG
 *) 0xFFFD02F4)

2303 
	#AT91C_CAN_MB7_MID
 ((
AT91_REG
 *) 0xFFFD02E8)

2304 
	#AT91C_CAN_MB7_MMR
 ((
AT91_REG
 *) 0xFFFD02E0)

2305 
	#AT91C_CAN_MB7_MAM
 ((
AT91_REG
 *) 0xFFFD02E4)

2306 
	#AT91C_CAN_MB7_MSR
 ((
AT91_REG
 *) 0xFFFD02F0)

2308 
	#AT91C_CAN_TCR
 ((
AT91_REG
 *) 0xFFFD0024)

2309 
	#AT91C_CAN_IMR
 ((
AT91_REG
 *) 0xFFFD000C)

2310 
	#AT91C_CAN_IER
 ((
AT91_REG
 *) 0xFFFD0004)

2311 
	#AT91C_CAN_ECR
 ((
AT91_REG
 *) 0xFFFD0020)

2312 
	#AT91C_CAN_TIMESTP
 ((
AT91_REG
 *) 0xFFFD001C)

2313 
	#AT91C_CAN_MR
 ((
AT91_REG
 *) 0xFFFD0000)

2314 
	#AT91C_CAN_IDR
 ((
AT91_REG
 *) 0xFFFD0008)

2315 
	#AT91C_CAN_ACR
 ((
AT91_REG
 *) 0xFFFD0028)

2316 
	#AT91C_CAN_TIM
 ((
AT91_REG
 *) 0xFFFD0018)

2317 
	#AT91C_CAN_SR
 ((
AT91_REG
 *) 0xFFFD0010)

2318 
	#AT91C_CAN_BR
 ((
AT91_REG
 *) 0xFFFD0014)

2319 
	#AT91C_CAN_VR
 ((
AT91_REG
 *) 0xFFFD00FC)

2321 
	#AT91C_EMAC_ISR
 ((
AT91_REG
 *) 0xFFFDC024)

2322 
	#AT91C_EMAC_SA4H
 ((
AT91_REG
 *) 0xFFFDC0B4)

2323 
	#AT91C_EMAC_SA1L
 ((
AT91_REG
 *) 0xFFFDC098)

2324 
	#AT91C_EMAC_ELE
 ((
AT91_REG
 *) 0xFFFDC078)

2325 
	#AT91C_EMAC_LCOL
 ((
AT91_REG
 *) 0xFFFDC05C)

2326 
	#AT91C_EMAC_RLE
 ((
AT91_REG
 *) 0xFFFDC088)

2327 
	#AT91C_EMAC_WOL
 ((
AT91_REG
 *) 0xFFFDC0C4)

2328 
	#AT91C_EMAC_DTF
 ((
AT91_REG
 *) 0xFFFDC058)

2329 
	#AT91C_EMAC_TUND
 ((
AT91_REG
 *) 0xFFFDC064)

2330 
	#AT91C_EMAC_NCR
 ((
AT91_REG
 *) 0xFFFDC000)

2331 
	#AT91C_EMAC_SA4L
 ((
AT91_REG
 *) 0xFFFDC0B0)

2332 
	#AT91C_EMAC_RSR
 ((
AT91_REG
 *) 0xFFFDC020)

2333 
	#AT91C_EMAC_SA3L
 ((
AT91_REG
 *) 0xFFFDC0A8)

2334 
	#AT91C_EMAC_TSR
 ((
AT91_REG
 *) 0xFFFDC014)

2335 
	#AT91C_EMAC_IDR
 ((
AT91_REG
 *) 0xFFFDC02C)

2336 
	#AT91C_EMAC_RSE
 ((
AT91_REG
 *) 0xFFFDC074)

2337 
	#AT91C_EMAC_ECOL
 ((
AT91_REG
 *) 0xFFFDC060)

2338 
	#AT91C_EMAC_TID
 ((
AT91_REG
 *) 0xFFFDC0B8)

2339 
	#AT91C_EMAC_HRB
 ((
AT91_REG
 *) 0xFFFDC090)

2340 
	#AT91C_EMAC_TBQP
 ((
AT91_REG
 *) 0xFFFDC01C)

2341 
	#AT91C_EMAC_USRIO
 ((
AT91_REG
 *) 0xFFFDC0C0)

2342 
	#AT91C_EMAC_PTR
 ((
AT91_REG
 *) 0xFFFDC038)

2343 
	#AT91C_EMAC_SA2H
 ((
AT91_REG
 *) 0xFFFDC0A4)

2344 
	#AT91C_EMAC_ROV
 ((
AT91_REG
 *) 0xFFFDC070)

2345 
	#AT91C_EMAC_ALE
 ((
AT91_REG
 *) 0xFFFDC054)

2346 
	#AT91C_EMAC_RJA
 ((
AT91_REG
 *) 0xFFFDC07C)

2347 
	#AT91C_EMAC_RBQP
 ((
AT91_REG
 *) 0xFFFDC018)

2348 
	#AT91C_EMAC_TPF
 ((
AT91_REG
 *) 0xFFFDC08C)

2349 
	#AT91C_EMAC_NCFGR
 ((
AT91_REG
 *) 0xFFFDC004)

2350 
	#AT91C_EMAC_HRT
 ((
AT91_REG
 *) 0xFFFDC094)

2351 
	#AT91C_EMAC_USF
 ((
AT91_REG
 *) 0xFFFDC080)

2352 
	#AT91C_EMAC_FCSE
 ((
AT91_REG
 *) 0xFFFDC050)

2353 
	#AT91C_EMAC_TPQ
 ((
AT91_REG
 *) 0xFFFDC0BC)

2354 
	#AT91C_EMAC_MAN
 ((
AT91_REG
 *) 0xFFFDC034)

2355 
	#AT91C_EMAC_FTO
 ((
AT91_REG
 *) 0xFFFDC040)

2356 
	#AT91C_EMAC_REV
 ((
AT91_REG
 *) 0xFFFDC0FC)

2357 
	#AT91C_EMAC_IMR
 ((
AT91_REG
 *) 0xFFFDC030)

2358 
	#AT91C_EMAC_SCF
 ((
AT91_REG
 *) 0xFFFDC044)

2359 
	#AT91C_EMAC_PFR
 ((
AT91_REG
 *) 0xFFFDC03C)

2360 
	#AT91C_EMAC_MCF
 ((
AT91_REG
 *) 0xFFFDC048)

2361 
	#AT91C_EMAC_NSR
 ((
AT91_REG
 *) 0xFFFDC008)

2362 
	#AT91C_EMAC_SA2L
 ((
AT91_REG
 *) 0xFFFDC0A0)

2363 
	#AT91C_EMAC_FRO
 ((
AT91_REG
 *) 0xFFFDC04C)

2364 
	#AT91C_EMAC_IER
 ((
AT91_REG
 *) 0xFFFDC028)

2365 
	#AT91C_EMAC_SA1H
 ((
AT91_REG
 *) 0xFFFDC09C)

2366 
	#AT91C_EMAC_CSE
 ((
AT91_REG
 *) 0xFFFDC068)

2367 
	#AT91C_EMAC_SA3H
 ((
AT91_REG
 *) 0xFFFDC0AC)

2368 
	#AT91C_EMAC_RRE
 ((
AT91_REG
 *) 0xFFFDC06C)

2369 
	#AT91C_EMAC_STE
 ((
AT91_REG
 *) 0xFFFDC084)

2371 
	#AT91C_ADC_PTSR
 ((
AT91_REG
 *) 0xFFFD8124)

2372 
	#AT91C_ADC_PTCR
 ((
AT91_REG
 *) 0xFFFD8120)

2373 
	#AT91C_ADC_TNPR
 ((
AT91_REG
 *) 0xFFFD8118)

2374 
	#AT91C_ADC_TNCR
 ((
AT91_REG
 *) 0xFFFD811C)

2375 
	#AT91C_ADC_RNPR
 ((
AT91_REG
 *) 0xFFFD8110)

2376 
	#AT91C_ADC_RNCR
 ((
AT91_REG
 *) 0xFFFD8114)

2377 
	#AT91C_ADC_RPR
 ((
AT91_REG
 *) 0xFFFD8100)

2378 
	#AT91C_ADC_TCR
 ((
AT91_REG
 *) 0xFFFD810C)

2379 
	#AT91C_ADC_TPR
 ((
AT91_REG
 *) 0xFFFD8108)

2380 
	#AT91C_ADC_RCR
 ((
AT91_REG
 *) 0xFFFD8104)

2382 
	#AT91C_ADC_CDR2
 ((
AT91_REG
 *) 0xFFFD8038)

2383 
	#AT91C_ADC_CDR3
 ((
AT91_REG
 *) 0xFFFD803C)

2384 
	#AT91C_ADC_CDR0
 ((
AT91_REG
 *) 0xFFFD8030)

2385 
	#AT91C_ADC_CDR5
 ((
AT91_REG
 *) 0xFFFD8044)

2386 
	#AT91C_ADC_CHDR
 ((
AT91_REG
 *) 0xFFFD8014)

2387 
	#AT91C_ADC_SR
 ((
AT91_REG
 *) 0xFFFD801C)

2388 
	#AT91C_ADC_CDR4
 ((
AT91_REG
 *) 0xFFFD8040)

2389 
	#AT91C_ADC_CDR1
 ((
AT91_REG
 *) 0xFFFD8034)

2390 
	#AT91C_ADC_LCDR
 ((
AT91_REG
 *) 0xFFFD8020)

2391 
	#AT91C_ADC_IDR
 ((
AT91_REG
 *) 0xFFFD8028)

2392 
	#AT91C_ADC_CR
 ((
AT91_REG
 *) 0xFFFD8000)

2393 
	#AT91C_ADC_CDR7
 ((
AT91_REG
 *) 0xFFFD804C)

2394 
	#AT91C_ADC_CDR6
 ((
AT91_REG
 *) 0xFFFD8048)

2395 
	#AT91C_ADC_IER
 ((
AT91_REG
 *) 0xFFFD8024)

2396 
	#AT91C_ADC_CHER
 ((
AT91_REG
 *) 0xFFFD8010)

2397 
	#AT91C_ADC_CHSR
 ((
AT91_REG
 *) 0xFFFD8018)

2398 
	#AT91C_ADC_MR
 ((
AT91_REG
 *) 0xFFFD8004)

2399 
	#AT91C_ADC_IMR
 ((
AT91_REG
 *) 0xFFFD802C)

2401 
	#AT91C_AES_TPR
 ((
AT91_REG
 *) 0xFFFA4108)

2402 
	#AT91C_AES_PTCR
 ((
AT91_REG
 *) 0xFFFA4120)

2403 
	#AT91C_AES_RNPR
 ((
AT91_REG
 *) 0xFFFA4110)

2404 
	#AT91C_AES_TNCR
 ((
AT91_REG
 *) 0xFFFA411C)

2405 
	#AT91C_AES_TCR
 ((
AT91_REG
 *) 0xFFFA410C)

2406 
	#AT91C_AES_RCR
 ((
AT91_REG
 *) 0xFFFA4104)

2407 
	#AT91C_AES_RNCR
 ((
AT91_REG
 *) 0xFFFA4114)

2408 
	#AT91C_AES_TNPR
 ((
AT91_REG
 *) 0xFFFA4118)

2409 
	#AT91C_AES_RPR
 ((
AT91_REG
 *) 0xFFFA4100)

2410 
	#AT91C_AES_PTSR
 ((
AT91_REG
 *) 0xFFFA4124)

2412 
	#AT91C_AES_IVxR
 ((
AT91_REG
 *) 0xFFFA4060)

2413 
	#AT91C_AES_MR
 ((
AT91_REG
 *) 0xFFFA4004)

2414 
	#AT91C_AES_VR
 ((
AT91_REG
 *) 0xFFFA40FC)

2415 
	#AT91C_AES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA4050)

2416 
	#AT91C_AES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA4040)

2417 
	#AT91C_AES_CR
 ((
AT91_REG
 *) 0xFFFA4000)

2418 
	#AT91C_AES_IDR
 ((
AT91_REG
 *) 0xFFFA4014)

2419 
	#AT91C_AES_IMR
 ((
AT91_REG
 *) 0xFFFA4018)

2420 
	#AT91C_AES_IER
 ((
AT91_REG
 *) 0xFFFA4010)

2421 
	#AT91C_AES_KEYWxR
 ((
AT91_REG
 *) 0xFFFA4020)

2422 
	#AT91C_AES_ISR
 ((
AT91_REG
 *) 0xFFFA401C)

2424 
	#AT91C_TDES_RNCR
 ((
AT91_REG
 *) 0xFFFA8114)

2425 
	#AT91C_TDES_TCR
 ((
AT91_REG
 *) 0xFFFA810C)

2426 
	#AT91C_TDES_RCR
 ((
AT91_REG
 *) 0xFFFA8104)

2427 
	#AT91C_TDES_TNPR
 ((
AT91_REG
 *) 0xFFFA8118)

2428 
	#AT91C_TDES_RNPR
 ((
AT91_REG
 *) 0xFFFA8110)

2429 
	#AT91C_TDES_RPR
 ((
AT91_REG
 *) 0xFFFA8100)

2430 
	#AT91C_TDES_TNCR
 ((
AT91_REG
 *) 0xFFFA811C)

2431 
	#AT91C_TDES_TPR
 ((
AT91_REG
 *) 0xFFFA8108)

2432 
	#AT91C_TDES_PTSR
 ((
AT91_REG
 *) 0xFFFA8124)

2433 
	#AT91C_TDES_PTCR
 ((
AT91_REG
 *) 0xFFFA8120)

2435 
	#AT91C_TDES_KEY2WxR
 ((
AT91_REG
 *) 0xFFFA8028)

2436 
	#AT91C_TDES_KEY3WxR
 ((
AT91_REG
 *) 0xFFFA8030)

2437 
	#AT91C_TDES_IDR
 ((
AT91_REG
 *) 0xFFFA8014)

2438 
	#AT91C_TDES_VR
 ((
AT91_REG
 *) 0xFFFA80FC)

2439 
	#AT91C_TDES_IVxR
 ((
AT91_REG
 *) 0xFFFA8060)

2440 
	#AT91C_TDES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA8050)

2441 
	#AT91C_TDES_IMR
 ((
AT91_REG
 *) 0xFFFA8018)

2442 
	#AT91C_TDES_MR
 ((
AT91_REG
 *) 0xFFFA8004)

2443 
	#AT91C_TDES_CR
 ((
AT91_REG
 *) 0xFFFA8000)

2444 
	#AT91C_TDES_IER
 ((
AT91_REG
 *) 0xFFFA8010)

2445 
	#AT91C_TDES_ISR
 ((
AT91_REG
 *) 0xFFFA801C)

2446 
	#AT91C_TDES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA8040)

2447 
	#AT91C_TDES_KEY1WxR
 ((
AT91_REG
 *) 0xFFFA8020)

2448 

	)

2452 
	#AT91C_PIO_PA0
 (() 1 << 0)

2453 
	#AT91C_PA0_RXD0
 ((Ë
AT91C_PIO_PA0
)

2454 
	#AT91C_PIO_PA1
 (() 1 << 1)

2455 
	#AT91C_PA1_TXD0
 ((Ë
AT91C_PIO_PA1
)

2456 
	#AT91C_PIO_PA10
 (() 1 << 10)

2457 
	#AT91C_PA10_TWD
 ((Ë
AT91C_PIO_PA10
)

2458 
	#AT91C_PIO_PA11
 (() 1 << 11)

2459 
	#AT91C_PA11_TWCK
 ((Ë
AT91C_PIO_PA11
)

2460 
	#AT91C_PIO_PA12
 (() 1 << 12)

2461 
	#AT91C_PA12_NPCS00
 ((Ë
AT91C_PIO_PA12
)

2462 
	#AT91C_PIO_PA13
 (() 1 << 13)

2463 
	#AT91C_PA13_NPCS01
 ((Ë
AT91C_PIO_PA13
)

2464 
	#AT91C_PA13_PCK1
 ((Ë
AT91C_PIO_PA13
)

2465 
	#AT91C_PIO_PA14
 (() 1 << 14)

2466 
	#AT91C_PA14_NPCS02
 ((Ë
AT91C_PIO_PA14
)

2467 
	#AT91C_PA14_IRQ1
 ((Ë
AT91C_PIO_PA14
)

2468 
	#AT91C_PIO_PA15
 (() 1 << 15)

2469 
	#AT91C_PA15_NPCS03
 ((Ë
AT91C_PIO_PA15
)

2470 
	#AT91C_PA15_TCLK2
 ((Ë
AT91C_PIO_PA15
)

2471 
	#AT91C_PIO_PA16
 (() 1 << 16)

2472 
	#AT91C_PA16_MISO0
 ((Ë
AT91C_PIO_PA16
)

2473 
	#AT91C_PIO_PA17
 (() 1 << 17)

2474 
	#AT91C_PA17_MOSI0
 ((Ë
AT91C_PIO_PA17
)

2475 
	#AT91C_PIO_PA18
 (() 1 << 18)

2476 
	#AT91C_PA18_SPCK0
 ((Ë
AT91C_PIO_PA18
)

2477 
	#AT91C_PIO_PA19
 (() 1 << 19)

2478 
	#AT91C_PA19_CANRX
 ((Ë
AT91C_PIO_PA19
)

2479 
	#AT91C_PIO_PA2
 (() 1 << 2)

2480 
	#AT91C_PA2_SCK0
 ((Ë
AT91C_PIO_PA2
)

2481 
	#AT91C_PA2_NPCS11
 ((Ë
AT91C_PIO_PA2
)

2482 
	#AT91C_PIO_PA20
 (() 1 << 20)

2483 
	#AT91C_PA20_CANTX
 ((Ë
AT91C_PIO_PA20
)

2484 
	#AT91C_PIO_PA21
 (() 1 << 21)

2485 
	#AT91C_PA21_TF
 ((Ë
AT91C_PIO_PA21
)

2486 
	#AT91C_PA21_NPCS10
 ((Ë
AT91C_PIO_PA21
)

2487 
	#AT91C_PIO_PA22
 (() 1 << 22)

2488 
	#AT91C_PA22_TK
 ((Ë
AT91C_PIO_PA22
)

2489 
	#AT91C_PA22_SPCK1
 ((Ë
AT91C_PIO_PA22
)

2490 
	#AT91C_PIO_PA23
 (() 1 << 23)

2491 
	#AT91C_PA23_TD
 ((Ë
AT91C_PIO_PA23
)

2492 
	#AT91C_PA23_MOSI1
 ((Ë
AT91C_PIO_PA23
)

2493 
	#AT91C_PIO_PA24
 (() 1 << 24)

2494 
	#AT91C_PA24_RD
 ((Ë
AT91C_PIO_PA24
)

2495 
	#AT91C_PA24_MISO1
 ((Ë
AT91C_PIO_PA24
)

2496 
	#AT91C_PIO_PA25
 (() 1 << 25)

2497 
	#AT91C_PA25_RK
 ((Ë
AT91C_PIO_PA25
)

2498 
	#AT91C_PA25_NPCS11
 ((Ë
AT91C_PIO_PA25
)

2499 
	#AT91C_PIO_PA26
 (() 1 << 26)

2500 
	#AT91C_PA26_RF
 ((Ë
AT91C_PIO_PA26
)

2501 
	#AT91C_PA26_NPCS12
 ((Ë
AT91C_PIO_PA26
)

2502 
	#AT91C_PIO_PA27
 (() 1 << 27)

2503 
	#AT91C_PA27_DRXD
 ((Ë
AT91C_PIO_PA27
)

2504 
	#AT91C_PA27_PCK3
 ((Ë
AT91C_PIO_PA27
)

2505 
	#AT91C_PIO_PA28
 (() 1 << 28)

2506 
	#AT91C_PA28_DTXD
 ((Ë
AT91C_PIO_PA28
)

2507 
	#AT91C_PIO_PA29
 (() 1 << 29)

2508 
	#AT91C_PA29_FIQ
 ((Ë
AT91C_PIO_PA29
)

2509 
	#AT91C_PA29_NPCS13
 ((Ë
AT91C_PIO_PA29
)

2510 
	#AT91C_PIO_PA3
 (() 1 << 3)

2511 
	#AT91C_PA3_RTS0
 ((Ë
AT91C_PIO_PA3
)

2512 
	#AT91C_PA3_NPCS12
 ((Ë
AT91C_PIO_PA3
)

2513 
	#AT91C_PIO_PA30
 (() 1 << 30)

2514 
	#AT91C_PA30_IRQ0
 ((Ë
AT91C_PIO_PA30
)

2515 
	#AT91C_PA30_PCK2
 ((Ë
AT91C_PIO_PA30
)

2516 
	#AT91C_PIO_PA4
 (() 1 << 4)

2517 
	#AT91C_PA4_CTS0
 ((Ë
AT91C_PIO_PA4
)

2518 
	#AT91C_PA4_NPCS13
 ((Ë
AT91C_PIO_PA4
)

2519 
	#AT91C_PIO_PA5
 (() 1 << 5)

2520 
	#AT91C_PA5_RXD1
 ((Ë
AT91C_PIO_PA5
)

2521 
	#AT91C_PIO_PA6
 (() 1 << 6)

2522 
	#AT91C_PA6_TXD1
 ((Ë
AT91C_PIO_PA6
)

2523 
	#AT91C_PIO_PA7
 (() 1 << 7)

2524 
	#AT91C_PA7_SCK1
 ((Ë
AT91C_PIO_PA7
)

2525 
	#AT91C_PA7_NPCS01
 ((Ë
AT91C_PIO_PA7
)

2526 
	#AT91C_PIO_PA8
 (() 1 << 8)

2527 
	#AT91C_PA8_RTS1
 ((Ë
AT91C_PIO_PA8
)

2528 
	#AT91C_PA8_NPCS02
 ((Ë
AT91C_PIO_PA8
)

2529 
	#AT91C_PIO_PA9
 (() 1 << 9)

2530 
	#AT91C_PA9_CTS1
 ((Ë
AT91C_PIO_PA9
)

2531 
	#AT91C_PA9_NPCS03
 ((Ë
AT91C_PIO_PA9
)

2532 
	#AT91C_PIO_PB0
 (() 1 << 0)

2533 
	#AT91C_PB0_ETXCK_EREFCK
 ((Ë
AT91C_PIO_PB0
)

2534 
	#AT91C_PB0_PCK0
 ((Ë
AT91C_PIO_PB0
)

2535 
	#AT91C_PIO_PB1
 (() 1 << 1)

2536 
	#AT91C_PB1_ETXEN
 ((Ë
AT91C_PIO_PB1
)

2537 
	#AT91C_PIO_PB10
 (() 1 << 10)

2538 
	#AT91C_PB10_ETX2
 ((Ë
AT91C_PIO_PB10
)

2539 
	#AT91C_PB10_NPCS11
 ((Ë
AT91C_PIO_PB10
)

2540 
	#AT91C_PIO_PB11
 (() 1 << 11)

2541 
	#AT91C_PB11_ETX3
 ((Ë
AT91C_PIO_PB11
)

2542 
	#AT91C_PB11_NPCS12
 ((Ë
AT91C_PIO_PB11
)

2543 
	#AT91C_PIO_PB12
 (() 1 << 12)

2544 
	#AT91C_PB12_ETXER
 ((Ë
AT91C_PIO_PB12
)

2545 
	#AT91C_PB12_TCLK0
 ((Ë
AT91C_PIO_PB12
)

2546 
	#AT91C_PIO_PB13
 (() 1 << 13)

2547 
	#AT91C_PB13_ERX2
 ((Ë
AT91C_PIO_PB13
)

2548 
	#AT91C_PB13_NPCS01
 ((Ë
AT91C_PIO_PB13
)

2549 
	#AT91C_PIO_PB14
 (() 1 << 14)

2550 
	#AT91C_PB14_ERX3
 ((Ë
AT91C_PIO_PB14
)

2551 
	#AT91C_PB14_NPCS02
 ((Ë
AT91C_PIO_PB14
)

2552 
	#AT91C_PIO_PB15
 (() 1 << 15)

2553 
	#AT91C_PB15_ERXDV
 ((Ë
AT91C_PIO_PB15
)

2554 
	#AT91C_PIO_PB16
 (() 1 << 16)

2555 
	#AT91C_PB16_ECOL
 ((Ë
AT91C_PIO_PB16
)

2556 
	#AT91C_PB16_NPCS13
 ((Ë
AT91C_PIO_PB16
)

2557 
	#AT91C_PIO_PB17
 (() 1 << 17)

2558 
	#AT91C_PB17_ERXCK
 ((Ë
AT91C_PIO_PB17
)

2559 
	#AT91C_PB17_NPCS03
 ((Ë
AT91C_PIO_PB17
)

2560 
	#AT91C_PIO_PB18
 (() 1 << 18)

2561 
	#AT91C_PB18_EF100
 ((Ë
AT91C_PIO_PB18
)

2562 
	#AT91C_PB18_ADTRG
 ((Ë
AT91C_PIO_PB18
)

2563 
	#AT91C_PIO_PB19
 (() 1 << 19)

2564 
	#AT91C_PB19_PWM0
 ((Ë
AT91C_PIO_PB19
)

2565 
	#AT91C_PB19_TCLK1
 ((Ë
AT91C_PIO_PB19
)

2566 
	#AT91C_PIO_PB2
 (() 1 << 2)

2567 
	#AT91C_PB2_ETX0
 ((Ë
AT91C_PIO_PB2
)

2568 
	#AT91C_PIO_PB20
 (() 1 << 20)

2569 
	#AT91C_PB20_PWM1
 ((Ë
AT91C_PIO_PB20
)

2570 
	#AT91C_PB20_PCK0
 ((Ë
AT91C_PIO_PB20
)

2571 
	#AT91C_PIO_PB21
 (() 1 << 21)

2572 
	#AT91C_PB21_PWM2
 ((Ë
AT91C_PIO_PB21
)

2573 
	#AT91C_PB21_PCK1
 ((Ë
AT91C_PIO_PB21
)

2574 
	#AT91C_PIO_PB22
 (() 1 << 22)

2575 
	#AT91C_PB22_PWM3
 ((Ë
AT91C_PIO_PB22
)

2576 
	#AT91C_PB22_PCK2
 ((Ë
AT91C_PIO_PB22
)

2577 
	#AT91C_PIO_PB23
 (() 1 << 23)

2578 
	#AT91C_PB23_TIOA0
 ((Ë
AT91C_PIO_PB23
)

2579 
	#AT91C_PB23_DCD1
 ((Ë
AT91C_PIO_PB23
)

2580 
	#AT91C_PIO_PB24
 (() 1 << 24)

2581 
	#AT91C_PB24_TIOB0
 ((Ë
AT91C_PIO_PB24
)

2582 
	#AT91C_PB24_DSR1
 ((Ë
AT91C_PIO_PB24
)

2583 
	#AT91C_PIO_PB25
 (() 1 << 25)

2584 
	#AT91C_PB25_TIOA1
 ((Ë
AT91C_PIO_PB25
)

2585 
	#AT91C_PB25_DTR1
 ((Ë
AT91C_PIO_PB25
)

2586 
	#AT91C_PIO_PB26
 (() 1 << 26)

2587 
	#AT91C_PB26_TIOB1
 ((Ë
AT91C_PIO_PB26
)

2588 
	#AT91C_PB26_RI1
 ((Ë
AT91C_PIO_PB26
)

2589 
	#AT91C_PIO_PB27
 (() 1 << 27)

2590 
	#AT91C_PB27_TIOA2
 ((Ë
AT91C_PIO_PB27
)

2591 
	#AT91C_PB27_PWM0
 ((Ë
AT91C_PIO_PB27
)

2592 
	#AT91C_PIO_PB28
 (() 1 << 28)

2593 
	#AT91C_PB28_TIOB2
 ((Ë
AT91C_PIO_PB28
)

2594 
	#AT91C_PB28_PWM1
 ((Ë
AT91C_PIO_PB28
)

2595 
	#AT91C_PIO_PB29
 (() 1 << 29)

2596 
	#AT91C_PB29_PCK1
 ((Ë
AT91C_PIO_PB29
)

2597 
	#AT91C_PB29_PWM2
 ((Ë
AT91C_PIO_PB29
)

2598 
	#AT91C_PIO_PB3
 (() 1 << 3)

2599 
	#AT91C_PB3_ETX1
 ((Ë
AT91C_PIO_PB3
)

2600 
	#AT91C_PIO_PB30
 (() 1 << 30)

2601 
	#AT91C_PB30_PCK2
 ((Ë
AT91C_PIO_PB30
)

2602 
	#AT91C_PB30_PWM3
 ((Ë
AT91C_PIO_PB30
)

2603 
	#AT91C_PIO_PB4
 (() 1 << 4)

2604 
	#AT91C_PB4_ECRS_ECRSDV
 ((Ë
AT91C_PIO_PB4
)

2605 
	#AT91C_PIO_PB5
 (() 1 << 5)

2606 
	#AT91C_PB5_ERX0
 ((Ë
AT91C_PIO_PB5
)

2607 
	#AT91C_PIO_PB6
 (() 1 << 6)

2608 
	#AT91C_PB6_ERX1
 ((Ë
AT91C_PIO_PB6
)

2609 
	#AT91C_PIO_PB7
 (() 1 << 7)

2610 
	#AT91C_PB7_ERXER
 ((Ë
AT91C_PIO_PB7
)

2611 
	#AT91C_PIO_PB8
 (() 1 << 8)

2612 
	#AT91C_PB8_EMDC
 ((Ë
AT91C_PIO_PB8
)

2613 
	#AT91C_PIO_PB9
 (() 1 << 9)

2614 
	#AT91C_PB9_EMDIO
 ((Ë
AT91C_PIO_PB9
)

2615 

	)

2619 
	#AT91C_ID_FIQ
 (() 0)

2620 
	#AT91C_ID_SYS
 (() 1)

2621 
	#AT91C_ID_PIOA
 (() 2)

2622 
	#AT91C_ID_PIOB
 (() 3)

2623 
	#AT91C_ID_SPI0
 (() 4)

2624 
	#AT91C_ID_SPI1
 (() 5)

2625 
	#AT91C_ID_US0
 (() 6)

2626 
	#AT91C_ID_US1
 (() 7)

2627 
	#AT91C_ID_SSC
 (() 8)

2628 
	#AT91C_ID_TWI
 (() 9)

2629 
	#AT91C_ID_PWMC
 (() 10)

2630 
	#AT91C_ID_UDP
 (() 11)

2631 
	#AT91C_ID_TC0
 (() 12)

2632 
	#AT91C_ID_TC1
 (() 13)

2633 
	#AT91C_ID_TC2
 (() 14)

2634 
	#AT91C_ID_CAN
 (() 15)

2635 
	#AT91C_ID_EMAC
 (() 16)

2636 
	#AT91C_ID_ADC
 (() 17)

2637 
	#AT91C_ID_AES
 (() 18)

2638 
	#AT91C_ID_TDES
 (() 19)

2639 
	#AT91C_ID_20_Re£rved
 (() 20)

2640 
	#AT91C_ID_21_Re£rved
 (() 21)

2641 
	#AT91C_ID_22_Re£rved
 (() 22)

2642 
	#AT91C_ID_23_Re£rved
 (() 23)

2643 
	#AT91C_ID_24_Re£rved
 (() 24)

2644 
	#AT91C_ID_25_Re£rved
 (() 25)

2645 
	#AT91C_ID_26_Re£rved
 (() 26)

2646 
	#AT91C_ID_27_Re£rved
 (() 27)

2647 
	#AT91C_ID_28_Re£rved
 (() 28)

2648 
	#AT91C_ID_29_Re£rved
 (() 29)

2649 
	#AT91C_ID_IRQ0
 (() 30)

2650 
	#AT91C_ID_IRQ1
 (() 31)

2651 

	)

2655 
	#AT91C_BASE_SYS
 ((
AT91PS_SYS
) 0xFFFFF000)

2656 
	#AT91C_BASE_AIC
 ((
AT91PS_AIC
) 0xFFFFF000)

2657 
	#AT91C_BASE_PDC_DBGU
 ((
AT91PS_PDC
) 0xFFFFF300)

2658 
	#AT91C_BASE_DBGU
 ((
AT91PS_DBGU
) 0xFFFFF200)

2659 
	#AT91C_BASE_PIOA
 ((
AT91PS_PIO
) 0xFFFFF400)

2660 
	#AT91C_BASE_PIOB
 ((
AT91PS_PIO
) 0xFFFFF600)

2661 
	#AT91C_BASE_CKGR
 ((
AT91PS_CKGR
) 0xFFFFFC20)

2662 
	#AT91C_BASE_PMC
 ((
AT91PS_PMC
) 0xFFFFFC00)

2663 
	#AT91C_BASE_RSTC
 ((
AT91PS_RSTC
) 0xFFFFFD00)

2664 
	#AT91C_BASE_RTTC
 ((
AT91PS_RTTC
) 0xFFFFFD20)

2665 
	#AT91C_BASE_PITC
 ((
AT91PS_PITC
) 0xFFFFFD30)

2666 
	#AT91C_BASE_WDTC
 ((
AT91PS_WDTC
) 0xFFFFFD40)

2667 
	#AT91C_BASE_VREG
 ((
AT91PS_VREG
) 0xFFFFFD60)

2668 
	#AT91C_BASE_MC
 ((
AT91PS_MC
) 0xFFFFFF00)

2669 
	#AT91C_BASE_PDC_SPI1
 ((
AT91PS_PDC
) 0xFFFE4100)

2670 
	#AT91C_BASE_SPI1
 ((
AT91PS_SPI
) 0xFFFE4000)

2671 
	#AT91C_BASE_PDC_SPI0
 ((
AT91PS_PDC
) 0xFFFE0100)

2672 
	#AT91C_BASE_SPI0
 ((
AT91PS_SPI
) 0xFFFE0000)

2673 
	#AT91C_BASE_PDC_US1
 ((
AT91PS_PDC
) 0xFFFC4100)

2674 
	#AT91C_BASE_US1
 ((
AT91PS_USART
) 0xFFFC4000)

2675 
	#AT91C_BASE_PDC_US0
 ((
AT91PS_PDC
) 0xFFFC0100)

2676 
	#AT91C_BASE_US0
 ((
AT91PS_USART
) 0xFFFC0000)

2677 
	#AT91C_BASE_PDC_SSC
 ((
AT91PS_PDC
) 0xFFFD4100)

2678 
	#AT91C_BASE_SSC
 ((
AT91PS_SSC
) 0xFFFD4000)

2679 
	#AT91C_BASE_TWI
 ((
AT91PS_TWI
) 0xFFFB8000)

2680 
	#AT91C_BASE_PWMC_CH3
 ((
AT91PS_PWMC_CH
) 0xFFFCC260)

2681 
	#AT91C_BASE_PWMC_CH2
 ((
AT91PS_PWMC_CH
) 0xFFFCC240)

2682 
	#AT91C_BASE_PWMC_CH1
 ((
AT91PS_PWMC_CH
) 0xFFFCC220)

2683 
	#AT91C_BASE_PWMC_CH0
 ((
AT91PS_PWMC_CH
) 0xFFFCC200)

2684 
	#AT91C_BASE_PWMC
 ((
AT91PS_PWMC
) 0xFFFCC000)

2685 
	#AT91C_BASE_UDP
 ((
AT91PS_UDP
) 0xFFFB0000)

2686 
	#AT91C_BASE_TC0
 ((
AT91PS_TC
) 0xFFFA0000)

2687 
	#AT91C_BASE_TC1
 ((
AT91PS_TC
) 0xFFFA0040)

2688 
	#AT91C_BASE_TC2
 ((
AT91PS_TC
) 0xFFFA0080)

2689 
	#AT91C_BASE_TCB
 ((
AT91PS_TCB
) 0xFFFA0000)

2690 
	#AT91C_BASE_CAN_MB0
 ((
AT91PS_CAN_MB
) 0xFFFD0200)

2691 
	#AT91C_BASE_CAN_MB1
 ((
AT91PS_CAN_MB
) 0xFFFD0220)

2692 
	#AT91C_BASE_CAN_MB2
 ((
AT91PS_CAN_MB
) 0xFFFD0240)

2693 
	#AT91C_BASE_CAN_MB3
 ((
AT91PS_CAN_MB
) 0xFFFD0260)

2694 
	#AT91C_BASE_CAN_MB4
 ((
AT91PS_CAN_MB
) 0xFFFD0280)

2695 
	#AT91C_BASE_CAN_MB5
 ((
AT91PS_CAN_MB
) 0xFFFD02A0)

2696 
	#AT91C_BASE_CAN_MB6
 ((
AT91PS_CAN_MB
) 0xFFFD02C0)

2697 
	#AT91C_BASE_CAN_MB7
 ((
AT91PS_CAN_MB
) 0xFFFD02E0)

2698 
	#AT91C_BASE_CAN
 ((
AT91PS_CAN
) 0xFFFD0000)

2699 
	#AT91C_BASE_EMAC
 ((
AT91PS_EMAC
) 0xFFFDC000)

2700 
	#AT91C_BASE_PDC_ADC
 ((
AT91PS_PDC
) 0xFFFD8100)

2701 
	#AT91C_BASE_ADC
 ((
AT91PS_ADC
) 0xFFFD8000)

2702 
	#AT91C_BASE_PDC_AES
 ((
AT91PS_PDC
) 0xFFFA4100)

2703 
	#AT91C_BASE_AES
 ((
AT91PS_AES
) 0xFFFA4000)

2704 
	#AT91C_BASE_PDC_TDES
 ((
AT91PS_PDC
) 0xFFFA8100)

2705 
	#AT91C_BASE_TDES
 ((
AT91PS_TDES
) 0xFFFA8000)

2706 

	)

2710 
	#AT91C_ISRAM
 ((*) 0x00200000)

2711 
	#AT91C_ISRAM_SIZE
 (() 0x00008000)

2712 
	#AT91C_IFLASH
 ((*) 0x00100000)

2713 
	#AT91C_IFLASH_SIZE
 (() 0x00020000)

2714 

	)

	@portable/IAR/AtmelSAM7S64/AT91SAM7X128_inc.h

56 
	#AIC_SMR
 ( 0)

57 
	#AIC_SVR
 (128)

58 
	#AIC_IVR
 (256)

59 
	#AIC_FVR
 (260)

60 
	#AIC_ISR
 (264)

61 
	#AIC_IPR
 (268)

62 
	#AIC_IMR
 (272)

63 
	#AIC_CISR
 (276)

64 
	#AIC_IECR
 (288)

65 
	#AIC_IDCR
 (292)

66 
	#AIC_ICCR
 (296)

67 
	#AIC_ISCR
 (300)

68 
	#AIC_EOICR
 (304)

69 
	#AIC_SPU
 (308)

70 
	#AIC_DCR
 (312)

71 
	#AIC_FFER
 (320)

72 
	#AIC_FFDR
 (324)

73 
	#AIC_FFSR
 (328)

75 
	#AT91C_AIC_PRIOR
 (0x7 << 0)

76 
	#AT91C_AIC_PRIOR_LOWEST
 (0x0)

77 
	#AT91C_AIC_PRIOR_HIGHEST
 (0x7)

78 
	#AT91C_AIC_SRCTYPE
 (0x3 << 5)

79 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (0x0 << 5)

80 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (0x0 << 5)

81 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (0x1 << 5)

82 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (0x1 << 5)

83 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (0x2 << 5)

84 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (0x3 << 5)

86 
	#AT91C_AIC_NFIQ
 (0x1 << 0)

87 
	#AT91C_AIC_NIRQ
 (0x1 << 1)

89 
	#AT91C_AIC_DCR_PROT
 (0x1 << 0)

90 
	#AT91C_AIC_DCR_GMSK
 (0x1 << 1)

91 

	)

96 
	#PDC_RPR
 ( 0)

97 
	#PDC_RCR
 ( 4)

98 
	#PDC_TPR
 ( 8)

99 
	#PDC_TCR
 (12)

100 
	#PDC_RNPR
 (16)

101 
	#PDC_RNCR
 (20)

102 
	#PDC_TNPR
 (24)

103 
	#PDC_TNCR
 (28)

104 
	#PDC_PTCR
 (32)

105 
	#PDC_PTSR
 (36)

107 
	#AT91C_PDC_RXTEN
 (0x1 << 0)

108 
	#AT91C_PDC_RXTDIS
 (0x1 << 1)

109 
	#AT91C_PDC_TXTEN
 (0x1 << 8)

110 
	#AT91C_PDC_TXTDIS
 (0x1 << 9)

112 

	)

117 
	#DBGU_CR
 ( 0)

118 
	#DBGU_MR
 ( 4)

119 
	#DBGU_IER
 ( 8)

120 
	#DBGU_IDR
 (12)

121 
	#DBGU_IMR
 (16)

122 
	#DBGU_CSR
 (20)

123 
	#DBGU_RHR
 (24)

124 
	#DBGU_THR
 (28)

125 
	#DBGU_BRGR
 (32)

126 
	#DBGU_CIDR
 (64)

127 
	#DBGU_EXID
 (68)

128 
	#DBGU_FNTR
 (72)

129 
	#DBGU_RPR
 (256)

130 
	#DBGU_RCR
 (260)

131 
	#DBGU_TPR
 (264)

132 
	#DBGU_TCR
 (268)

133 
	#DBGU_RNPR
 (272)

134 
	#DBGU_RNCR
 (276)

135 
	#DBGU_TNPR
 (280)

136 
	#DBGU_TNCR
 (284)

137 
	#DBGU_PTCR
 (288)

138 
	#DBGU_PTSR
 (292)

140 
	#AT91C_US_RSTRX
 (0x1 << 2)

141 
	#AT91C_US_RSTTX
 (0x1 << 3)

142 
	#AT91C_US_RXEN
 (0x1 << 4)

143 
	#AT91C_US_RXDIS
 (0x1 << 5)

144 
	#AT91C_US_TXEN
 (0x1 << 6)

145 
	#AT91C_US_TXDIS
 (0x1 << 7)

146 
	#AT91C_US_RSTSTA
 (0x1 << 8)

148 
	#AT91C_US_PAR
 (0x7 << 9)

149 
	#AT91C_US_PAR_EVEN
 (0x0 << 9)

150 
	#AT91C_US_PAR_ODD
 (0x1 << 9)

151 
	#AT91C_US_PAR_SPACE
 (0x2 << 9)

152 
	#AT91C_US_PAR_MARK
 (0x3 << 9)

153 
	#AT91C_US_PAR_NONE
 (0x4 << 9)

154 
	#AT91C_US_PAR_MULTI_DROP
 (0x6 << 9)

155 
	#AT91C_US_CHMODE
 (0x3 << 14)

156 
	#AT91C_US_CHMODE_NORMAL
 (0x0 << 14)

157 
	#AT91C_US_CHMODE_AUTO
 (0x1 << 14)

158 
	#AT91C_US_CHMODE_LOCAL
 (0x2 << 14)

159 
	#AT91C_US_CHMODE_REMOTE
 (0x3 << 14)

161 
	#AT91C_US_RXRDY
 (0x1 << 0)

162 
	#AT91C_US_TXRDY
 (0x1 << 1)

163 
	#AT91C_US_ENDRX
 (0x1 << 3)

164 
	#AT91C_US_ENDTX
 (0x1 << 4)

165 
	#AT91C_US_OVRE
 (0x1 << 5)

166 
	#AT91C_US_FRAME
 (0x1 << 6)

167 
	#AT91C_US_PARE
 (0x1 << 7)

168 
	#AT91C_US_TXEMPTY
 (0x1 << 9)

169 
	#AT91C_US_TXBUFE
 (0x1 << 11)

170 
	#AT91C_US_RXBUFF
 (0x1 << 12)

171 
	#AT91C_US_COMM_TX
 (0x1 << 30)

172 
	#AT91C_US_COMM_RX
 (0x1 << 31)

177 
	#AT91C_US_FORCE_NTRST
 (0x1 << 0)

178 

	)

183 
	#PIO_PER
 ( 0)

184 
	#PIO_PDR
 ( 4)

185 
	#PIO_PSR
 ( 8)

186 
	#PIO_OER
 (16)

187 
	#PIO_ODR
 (20)

188 
	#PIO_OSR
 (24)

189 
	#PIO_IFER
 (32)

190 
	#PIO_IFDR
 (36)

191 
	#PIO_IFSR
 (40)

192 
	#PIO_SODR
 (48)

193 
	#PIO_CODR
 (52)

194 
	#PIO_ODSR
 (56)

195 
	#PIO_PDSR
 (60)

196 
	#PIO_IER
 (64)

197 
	#PIO_IDR
 (68)

198 
	#PIO_IMR
 (72)

199 
	#PIO_ISR
 (76)

200 
	#PIO_MDER
 (80)

201 
	#PIO_MDDR
 (84)

202 
	#PIO_MDSR
 (88)

203 
	#PIO_PPUDR
 (96)

204 
	#PIO_PPUER
 (100)

205 
	#PIO_PPUSR
 (104)

206 
	#PIO_ASR
 (112)

207 
	#PIO_BSR
 (116)

208 
	#PIO_ABSR
 (120)

209 
	#PIO_OWER
 (160)

210 
	#PIO_OWDR
 (164)

211 
	#PIO_OWSR
 (168)

212 

	)

217 
	#CKGR_MOR
 ( 0)

218 
	#CKGR_MCFR
 ( 4)

219 
	#CKGR_PLLR
 (12)

221 
	#AT91C_CKGR_MOSCEN
 (0x1 << 0)

222 
	#AT91C_CKGR_OSCBYPASS
 (0x1 << 1)

223 
	#AT91C_CKGR_OSCOUNT
 (0xFF << 8)

225 
	#AT91C_CKGR_MAINF
 (0xFFFF << 0)

226 
	#AT91C_CKGR_MAINRDY
 (0x1 << 16)

228 
	#AT91C_CKGR_DIV
 (0xFF << 0)

229 
	#AT91C_CKGR_DIV_0
 (0x0)

230 
	#AT91C_CKGR_DIV_BYPASS
 (0x1)

231 
	#AT91C_CKGR_PLLCOUNT
 (0x3F << 8)

232 
	#AT91C_CKGR_OUT
 (0x3 << 14)

233 
	#AT91C_CKGR_OUT_0
 (0x0 << 14)

234 
	#AT91C_CKGR_OUT_1
 (0x1 << 14)

235 
	#AT91C_CKGR_OUT_2
 (0x2 << 14)

236 
	#AT91C_CKGR_OUT_3
 (0x3 << 14)

237 
	#AT91C_CKGR_MUL
 (0x7FF << 16)

238 
	#AT91C_CKGR_USBDIV
 (0x3 << 28)

239 
	#AT91C_CKGR_USBDIV_0
 (0x0 << 28)

240 
	#AT91C_CKGR_USBDIV_1
 (0x1 << 28)

241 
	#AT91C_CKGR_USBDIV_2
 (0x2 << 28)

242 

	)

247 
	#PMC_SCER
 ( 0)

248 
	#PMC_SCDR
 ( 4)

249 
	#PMC_SCSR
 ( 8)

250 
	#PMC_PCER
 (16)

251 
	#PMC_PCDR
 (20)

252 
	#PMC_PCSR
 (24)

253 
	#PMC_MOR
 (32)

254 
	#PMC_MCFR
 (36)

255 
	#PMC_PLLR
 (44)

256 
	#PMC_MCKR
 (48)

257 
	#PMC_PCKR
 (64)

258 
	#PMC_IER
 (96)

259 
	#PMC_IDR
 (100)

260 
	#PMC_SR
 (104)

261 
	#PMC_IMR
 (108)

263 
	#AT91C_PMC_PCK
 (0x1 << 0)

264 
	#AT91C_PMC_UDP
 (0x1 << 7)

265 
	#AT91C_PMC_PCK0
 (0x1 << 8)

266 
	#AT91C_PMC_PCK1
 (0x1 << 9)

267 
	#AT91C_PMC_PCK2
 (0x1 << 10)

268 
	#AT91C_PMC_PCK3
 (0x1 << 11)

275 
	#AT91C_PMC_CSS
 (0x3 << 0)

276 
	#AT91C_PMC_CSS_SLOW_CLK
 (0x0)

277 
	#AT91C_PMC_CSS_MAIN_CLK
 (0x1)

278 
	#AT91C_PMC_CSS_PLL_CLK
 (0x3)

279 
	#AT91C_PMC_PRES
 (0x7 << 2)

280 
	#AT91C_PMC_PRES_CLK
 (0x0 << 2)

281 
	#AT91C_PMC_PRES_CLK_2
 (0x1 << 2)

282 
	#AT91C_PMC_PRES_CLK_4
 (0x2 << 2)

283 
	#AT91C_PMC_PRES_CLK_8
 (0x3 << 2)

284 
	#AT91C_PMC_PRES_CLK_16
 (0x4 << 2)

285 
	#AT91C_PMC_PRES_CLK_32
 (0x5 << 2)

286 
	#AT91C_PMC_PRES_CLK_64
 (0x6 << 2)

289 
	#AT91C_PMC_MOSCS
 (0x1 << 0)

290 
	#AT91C_PMC_LOCK
 (0x1 << 2)

291 
	#AT91C_PMC_MCKRDY
 (0x1 << 3)

292 
	#AT91C_PMC_PCK0RDY
 (0x1 << 8)

293 
	#AT91C_PMC_PCK1RDY
 (0x1 << 9)

294 
	#AT91C_PMC_PCK2RDY
 (0x1 << 10)

295 
	#AT91C_PMC_PCK3RDY
 (0x1 << 11)

299 

	)

304 
	#RSTC_RCR
 ( 0)

305 
	#RSTC_RSR
 ( 4)

306 
	#RSTC_RMR
 ( 8)

308 
	#AT91C_RSTC_PROCRST
 (0x1 << 0)

309 
	#AT91C_RSTC_PERRST
 (0x1 << 2)

310 
	#AT91C_RSTC_EXTRST
 (0x1 << 3)

311 
	#AT91C_RSTC_KEY
 (0xFF << 24)

313 
	#AT91C_RSTC_URSTS
 (0x1 << 0)

314 
	#AT91C_RSTC_BODSTS
 (0x1 << 1)

315 
	#AT91C_RSTC_RSTTYP
 (0x7 << 8)

316 
	#AT91C_RSTC_RSTTYP_POWERUP
 (0x0 << 8)

317 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (0x1 << 8)

318 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (0x2 << 8)

319 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (0x3 << 8)

320 
	#AT91C_RSTC_RSTTYP_USER
 (0x4 << 8)

321 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (0x5 << 8)

322 
	#AT91C_RSTC_NRSTL
 (0x1 << 16)

323 
	#AT91C_RSTC_SRCMP
 (0x1 << 17)

325 
	#AT91C_RSTC_URSTEN
 (0x1 << 0)

326 
	#AT91C_RSTC_URSTIEN
 (0x1 << 4)

327 
	#AT91C_RSTC_ERSTL
 (0xF << 8)

328 
	#AT91C_RSTC_BODIEN
 (0x1 << 16)

329 

	)

334 
	#RTTC_RTMR
 ( 0)

335 
	#RTTC_RTAR
 ( 4)

336 
	#RTTC_RTVR
 ( 8)

337 
	#RTTC_RTSR
 (12)

339 
	#AT91C_RTTC_RTPRES
 (0xFFFF << 0)

340 
	#AT91C_RTTC_ALMIEN
 (0x1 << 16)

341 
	#AT91C_RTTC_RTTINCIEN
 (0x1 << 17)

342 
	#AT91C_RTTC_RTTRST
 (0x1 << 18)

344 
	#AT91C_RTTC_ALMV
 (0x0 << 0)

346 
	#AT91C_RTTC_CRTV
 (0x0 << 0)

348 
	#AT91C_RTTC_ALMS
 (0x1 << 0)

349 
	#AT91C_RTTC_RTTINC
 (0x1 << 1)

350 

	)

355 
	#PITC_PIMR
 ( 0)

356 
	#PITC_PISR
 ( 4)

357 
	#PITC_PIVR
 ( 8)

358 
	#PITC_PIIR
 (12)

360 
	#AT91C_PITC_PIV
 (0xFFFFF << 0)

361 
	#AT91C_PITC_PITEN
 (0x1 << 24)

362 
	#AT91C_PITC_PITIEN
 (0x1 << 25)

364 
	#AT91C_PITC_PITS
 (0x1 << 0)

366 
	#AT91C_PITC_CPIV
 (0xFFFFF << 0)

367 
	#AT91C_PITC_PICNT
 (0xFFF << 20)

369 

	)

374 
	#WDTC_WDCR
 ( 0)

375 
	#WDTC_WDMR
 ( 4)

376 
	#WDTC_WDSR
 ( 8)

378 
	#AT91C_WDTC_WDRSTT
 (0x1 << 0)

379 
	#AT91C_WDTC_KEY
 (0xFF << 24)

381 
	#AT91C_WDTC_WDV
 (0xFFF << 0)

382 
	#AT91C_WDTC_WDFIEN
 (0x1 << 12)

383 
	#AT91C_WDTC_WDRSTEN
 (0x1 << 13)

384 
	#AT91C_WDTC_WDRPROC
 (0x1 << 14)

385 
	#AT91C_WDTC_WDDIS
 (0x1 << 15)

386 
	#AT91C_WDTC_WDD
 (0xFFF << 16)

387 
	#AT91C_WDTC_WDDBGHLT
 (0x1 << 28)

388 
	#AT91C_WDTC_WDIDLEHLT
 (0x1 << 29)

390 
	#AT91C_WDTC_WDUNF
 (0x1 << 0)

391 
	#AT91C_WDTC_WDERR
 (0x1 << 1)

392 

	)

397 
	#VREG_MR
 ( 0)

399 
	#AT91C_VREG_PSTDBY
 (0x1 << 0)

400 

	)

405 
	#MC_RCR
 ( 0)

406 
	#MC_ASR
 ( 4)

407 
	#MC_AASR
 ( 8)

408 
	#MC_FMR
 (96)

409 
	#MC_FCR
 (100)

410 
	#MC_FSR
 (104)

412 
	#AT91C_MC_RCB
 (0x1 << 0)

414 
	#AT91C_MC_UNDADD
 (0x1 << 0)

415 
	#AT91C_MC_MISADD
 (0x1 << 1)

416 
	#AT91C_MC_ABTSZ
 (0x3 << 8)

417 
	#AT91C_MC_ABTSZ_BYTE
 (0x0 << 8)

418 
	#AT91C_MC_ABTSZ_HWORD
 (0x1 << 8)

419 
	#AT91C_MC_ABTSZ_WORD
 (0x2 << 8)

420 
	#AT91C_MC_ABTTYP
 (0x3 << 10)

421 
	#AT91C_MC_ABTTYP_DATAR
 (0x0 << 10)

422 
	#AT91C_MC_ABTTYP_DATAW
 (0x1 << 10)

423 
	#AT91C_MC_ABTTYP_FETCH
 (0x2 << 10)

424 
	#AT91C_MC_MST0
 (0x1 << 16)

425 
	#AT91C_MC_MST1
 (0x1 << 17)

426 
	#AT91C_MC_SVMST0
 (0x1 << 24)

427 
	#AT91C_MC_SVMST1
 (0x1 << 25)

429 
	#AT91C_MC_FRDY
 (0x1 << 0)

430 
	#AT91C_MC_LOCKE
 (0x1 << 2)

431 
	#AT91C_MC_PROGE
 (0x1 << 3)

432 
	#AT91C_MC_NEBP
 (0x1 << 7)

433 
	#AT91C_MC_FWS
 (0x3 << 8)

434 
	#AT91C_MC_FWS_0FWS
 (0x0 << 8)

435 
	#AT91C_MC_FWS_1FWS
 (0x1 << 8)

436 
	#AT91C_MC_FWS_2FWS
 (0x2 << 8)

437 
	#AT91C_MC_FWS_3FWS
 (0x3 << 8)

438 
	#AT91C_MC_FMCN
 (0xFF << 16)

440 
	#AT91C_MC_FCMD
 (0xF << 0)

441 
	#AT91C_MC_FCMD_START_PROG
 (0x1)

442 
	#AT91C_MC_FCMD_LOCK
 (0x2)

443 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (0x3)

444 
	#AT91C_MC_FCMD_UNLOCK
 (0x4)

445 
	#AT91C_MC_FCMD_ERASE_ALL
 (0x8)

446 
	#AT91C_MC_FCMD_SET_GP_NVM
 (0xB)

447 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (0xD)

448 
	#AT91C_MC_FCMD_SET_SECURITY
 (0xF)

449 
	#AT91C_MC_PAGEN
 (0x3FF << 8)

450 
	#AT91C_MC_KEY
 (0xFF << 24)

452 
	#AT91C_MC_SECURITY
 (0x1 << 4)

453 
	#AT91C_MC_GPNVM0
 (0x1 << 8)

454 
	#AT91C_MC_GPNVM1
 (0x1 << 9)

455 
	#AT91C_MC_GPNVM2
 (0x1 << 10)

456 
	#AT91C_MC_GPNVM3
 (0x1 << 11)

457 
	#AT91C_MC_GPNVM4
 (0x1 << 12)

458 
	#AT91C_MC_GPNVM5
 (0x1 << 13)

459 
	#AT91C_MC_GPNVM6
 (0x1 << 14)

460 
	#AT91C_MC_GPNVM7
 (0x1 << 15)

461 
	#AT91C_MC_LOCKS0
 (0x1 << 16)

462 
	#AT91C_MC_LOCKS1
 (0x1 << 17)

463 
	#AT91C_MC_LOCKS2
 (0x1 << 18)

464 
	#AT91C_MC_LOCKS3
 (0x1 << 19)

465 
	#AT91C_MC_LOCKS4
 (0x1 << 20)

466 
	#AT91C_MC_LOCKS5
 (0x1 << 21)

467 
	#AT91C_MC_LOCKS6
 (0x1 << 22)

468 
	#AT91C_MC_LOCKS7
 (0x1 << 23)

469 
	#AT91C_MC_LOCKS8
 (0x1 << 24)

470 
	#AT91C_MC_LOCKS9
 (0x1 << 25)

471 
	#AT91C_MC_LOCKS10
 (0x1 << 26)

472 
	#AT91C_MC_LOCKS11
 (0x1 << 27)

473 
	#AT91C_MC_LOCKS12
 (0x1 << 28)

474 
	#AT91C_MC_LOCKS13
 (0x1 << 29)

475 
	#AT91C_MC_LOCKS14
 (0x1 << 30)

476 
	#AT91C_MC_LOCKS15
 (0x1 << 31)

477 

	)

482 
	#SPI_CR
 ( 0)

483 
	#SPI_MR
 ( 4)

484 
	#SPI_RDR
 ( 8)

485 
	#SPI_TDR
 (12)

486 
	#SPI_SR
 (16)

487 
	#SPI_IER
 (20)

488 
	#SPI_IDR
 (24)

489 
	#SPI_IMR
 (28)

490 
	#SPI_CSR
 (48)

491 
	#SPI_RPR
 (256)

492 
	#SPI_RCR
 (260)

493 
	#SPI_TPR
 (264)

494 
	#SPI_TCR
 (268)

495 
	#SPI_RNPR
 (272)

496 
	#SPI_RNCR
 (276)

497 
	#SPI_TNPR
 (280)

498 
	#SPI_TNCR
 (284)

499 
	#SPI_PTCR
 (288)

500 
	#SPI_PTSR
 (292)

502 
	#AT91C_SPI_SPIEN
 (0x1 << 0)

503 
	#AT91C_SPI_SPIDIS
 (0x1 << 1)

504 
	#AT91C_SPI_SWRST
 (0x1 << 7)

505 
	#AT91C_SPI_LASTXFER
 (0x1 << 24)

507 
	#AT91C_SPI_MSTR
 (0x1 << 0)

508 
	#AT91C_SPI_PS
 (0x1 << 1)

509 
	#AT91C_SPI_PS_FIXED
 (0x0 << 1)

510 
	#AT91C_SPI_PS_VARIABLE
 (0x1 << 1)

511 
	#AT91C_SPI_PCSDEC
 (0x1 << 2)

512 
	#AT91C_SPI_FDIV
 (0x1 << 3)

513 
	#AT91C_SPI_MODFDIS
 (0x1 << 4)

514 
	#AT91C_SPI_LLB
 (0x1 << 7)

515 
	#AT91C_SPI_PCS
 (0xF << 16)

516 
	#AT91C_SPI_DLYBCS
 (0xFF << 24)

518 
	#AT91C_SPI_RD
 (0xFFFF << 0)

519 
	#AT91C_SPI_RPCS
 (0xF << 16)

521 
	#AT91C_SPI_TD
 (0xFFFF << 0)

522 
	#AT91C_SPI_TPCS
 (0xF << 16)

524 
	#AT91C_SPI_RDRF
 (0x1 << 0)

525 
	#AT91C_SPI_TDRE
 (0x1 << 1)

526 
	#AT91C_SPI_MODF
 (0x1 << 2)

527 
	#AT91C_SPI_OVRES
 (0x1 << 3)

528 
	#AT91C_SPI_ENDRX
 (0x1 << 4)

529 
	#AT91C_SPI_ENDTX
 (0x1 << 5)

530 
	#AT91C_SPI_RXBUFF
 (0x1 << 6)

531 
	#AT91C_SPI_TXBUFE
 (0x1 << 7)

532 
	#AT91C_SPI_NSSR
 (0x1 << 8)

533 
	#AT91C_SPI_TXEMPTY
 (0x1 << 9)

534 
	#AT91C_SPI_SPIENS
 (0x1 << 16)

539 
	#AT91C_SPI_CPOL
 (0x1 << 0)

540 
	#AT91C_SPI_NCPHA
 (0x1 << 1)

541 
	#AT91C_SPI_CSAAT
 (0x1 << 3)

542 
	#AT91C_SPI_BITS
 (0xF << 4)

543 
	#AT91C_SPI_BITS_8
 (0x0 << 4)

544 
	#AT91C_SPI_BITS_9
 (0x1 << 4)

545 
	#AT91C_SPI_BITS_10
 (0x2 << 4)

546 
	#AT91C_SPI_BITS_11
 (0x3 << 4)

547 
	#AT91C_SPI_BITS_12
 (0x4 << 4)

548 
	#AT91C_SPI_BITS_13
 (0x5 << 4)

549 
	#AT91C_SPI_BITS_14
 (0x6 << 4)

550 
	#AT91C_SPI_BITS_15
 (0x7 << 4)

551 
	#AT91C_SPI_BITS_16
 (0x8 << 4)

552 
	#AT91C_SPI_SCBR
 (0xFF << 8)

553 
	#AT91C_SPI_DLYBS
 (0xFF << 16)

554 
	#AT91C_SPI_DLYBCT
 (0xFF << 24)

555 

	)

560 
	#US_CR
 ( 0)

561 
	#US_MR
 ( 4)

562 
	#US_IER
 ( 8)

563 
	#US_IDR
 (12)

564 
	#US_IMR
 (16)

565 
	#US_CSR
 (20)

566 
	#US_RHR
 (24)

567 
	#US_THR
 (28)

568 
	#US_BRGR
 (32)

569 
	#US_RTOR
 (36)

570 
	#US_TTGR
 (40)

571 
	#US_FIDI
 (64)

572 
	#US_NER
 (68)

573 
	#US_IF
 (76)

574 
	#US_RPR
 (256)

575 
	#US_RCR
 (260)

576 
	#US_TPR
 (264)

577 
	#US_TCR
 (268)

578 
	#US_RNPR
 (272)

579 
	#US_RNCR
 (276)

580 
	#US_TNPR
 (280)

581 
	#US_TNCR
 (284)

582 
	#US_PTCR
 (288)

583 
	#US_PTSR
 (292)

585 
	#AT91C_US_STTBRK
 (0x1 << 9)

586 
	#AT91C_US_STPBRK
 (0x1 << 10)

587 
	#AT91C_US_STTTO
 (0x1 << 11)

588 
	#AT91C_US_SENDA
 (0x1 << 12)

589 
	#AT91C_US_RSTIT
 (0x1 << 13)

590 
	#AT91C_US_RSTNACK
 (0x1 << 14)

591 
	#AT91C_US_RETTO
 (0x1 << 15)

592 
	#AT91C_US_DTREN
 (0x1 << 16)

593 
	#AT91C_US_DTRDIS
 (0x1 << 17)

594 
	#AT91C_US_RTSEN
 (0x1 << 18)

595 
	#AT91C_US_RTSDIS
 (0x1 << 19)

597 
	#AT91C_US_USMODE
 (0xF << 0)

598 
	#AT91C_US_USMODE_NORMAL
 (0x0)

599 
	#AT91C_US_USMODE_RS485
 (0x1)

600 
	#AT91C_US_USMODE_HWHSH
 (0x2)

601 
	#AT91C_US_USMODE_MODEM
 (0x3)

602 
	#AT91C_US_USMODE_ISO7816_0
 (0x4)

603 
	#AT91C_US_USMODE_ISO7816_1
 (0x6)

604 
	#AT91C_US_USMODE_IRDA
 (0x8)

605 
	#AT91C_US_USMODE_SWHSH
 (0xC)

606 
	#AT91C_US_CLKS
 (0x3 << 4)

607 
	#AT91C_US_CLKS_CLOCK
 (0x0 << 4)

608 
	#AT91C_US_CLKS_FDIV1
 (0x1 << 4)

609 
	#AT91C_US_CLKS_SLOW
 (0x2 << 4)

610 
	#AT91C_US_CLKS_EXT
 (0x3 << 4)

611 
	#AT91C_US_CHRL
 (0x3 << 6)

612 
	#AT91C_US_CHRL_5_BITS
 (0x0 << 6)

613 
	#AT91C_US_CHRL_6_BITS
 (0x1 << 6)

614 
	#AT91C_US_CHRL_7_BITS
 (0x2 << 6)

615 
	#AT91C_US_CHRL_8_BITS
 (0x3 << 6)

616 
	#AT91C_US_SYNC
 (0x1 << 8)

617 
	#AT91C_US_NBSTOP
 (0x3 << 12)

618 
	#AT91C_US_NBSTOP_1_BIT
 (0x0 << 12)

619 
	#AT91C_US_NBSTOP_15_BIT
 (0x1 << 12)

620 
	#AT91C_US_NBSTOP_2_BIT
 (0x2 << 12)

621 
	#AT91C_US_MSBF
 (0x1 << 16)

622 
	#AT91C_US_MODE9
 (0x1 << 17)

623 
	#AT91C_US_CKLO
 (0x1 << 18)

624 
	#AT91C_US_OVER
 (0x1 << 19)

625 
	#AT91C_US_INACK
 (0x1 << 20)

626 
	#AT91C_US_DSNACK
 (0x1 << 21)

627 
	#AT91C_US_MAX_ITER
 (0x1 << 24)

628 
	#AT91C_US_FILTER
 (0x1 << 28)

630 
	#AT91C_US_RXBRK
 (0x1 << 2)

631 
	#AT91C_US_TIMEOUT
 (0x1 << 8)

632 
	#AT91C_US_ITERATION
 (0x1 << 10)

633 
	#AT91C_US_NACK
 (0x1 << 13)

634 
	#AT91C_US_RIIC
 (0x1 << 16)

635 
	#AT91C_US_DSRIC
 (0x1 << 17)

636 
	#AT91C_US_DCDIC
 (0x1 << 18)

637 
	#AT91C_US_CTSIC
 (0x1 << 19)

641 
	#AT91C_US_RI
 (0x1 << 20)

642 
	#AT91C_US_DSR
 (0x1 << 21)

643 
	#AT91C_US_DCD
 (0x1 << 22)

644 
	#AT91C_US_CTS
 (0x1 << 23)

645 

	)

650 
	#SSC_CR
 ( 0)

651 
	#SSC_CMR
 ( 4)

652 
	#SSC_RCMR
 (16)

653 
	#SSC_RFMR
 (20)

654 
	#SSC_TCMR
 (24)

655 
	#SSC_TFMR
 (28)

656 
	#SSC_RHR
 (32)

657 
	#SSC_THR
 (36)

658 
	#SSC_RSHR
 (48)

659 
	#SSC_TSHR
 (52)

660 
	#SSC_SR
 (64)

661 
	#SSC_IER
 (68)

662 
	#SSC_IDR
 (72)

663 
	#SSC_IMR
 (76)

664 
	#SSC_RPR
 (256)

665 
	#SSC_RCR
 (260)

666 
	#SSC_TPR
 (264)

667 
	#SSC_TCR
 (268)

668 
	#SSC_RNPR
 (272)

669 
	#SSC_RNCR
 (276)

670 
	#SSC_TNPR
 (280)

671 
	#SSC_TNCR
 (284)

672 
	#SSC_PTCR
 (288)

673 
	#SSC_PTSR
 (292)

675 
	#AT91C_SSC_RXEN
 (0x1 << 0)

676 
	#AT91C_SSC_RXDIS
 (0x1 << 1)

677 
	#AT91C_SSC_TXEN
 (0x1 << 8)

678 
	#AT91C_SSC_TXDIS
 (0x1 << 9)

679 
	#AT91C_SSC_SWRST
 (0x1 << 15)

681 
	#AT91C_SSC_CKS
 (0x3 << 0)

682 
	#AT91C_SSC_CKS_DIV
 (0x0)

683 
	#AT91C_SSC_CKS_TK
 (0x1)

684 
	#AT91C_SSC_CKS_RK
 (0x2)

685 
	#AT91C_SSC_CKO
 (0x7 << 2)

686 
	#AT91C_SSC_CKO_NONE
 (0x0 << 2)

687 
	#AT91C_SSC_CKO_CONTINOUS
 (0x1 << 2)

688 
	#AT91C_SSC_CKO_DATA_TX
 (0x2 << 2)

689 
	#AT91C_SSC_CKI
 (0x1 << 5)

690 
	#AT91C_SSC_START
 (0xF << 8)

691 
	#AT91C_SSC_START_CONTINOUS
 (0x0 << 8)

692 
	#AT91C_SSC_START_TX
 (0x1 << 8)

693 
	#AT91C_SSC_START_LOW_RF
 (0x2 << 8)

694 
	#AT91C_SSC_START_HIGH_RF
 (0x3 << 8)

695 
	#AT91C_SSC_START_FALL_RF
 (0x4 << 8)

696 
	#AT91C_SSC_START_RISE_RF
 (0x5 << 8)

697 
	#AT91C_SSC_START_LEVEL_RF
 (0x6 << 8)

698 
	#AT91C_SSC_START_EDGE_RF
 (0x7 << 8)

699 
	#AT91C_SSC_START_0
 (0x8 << 8)

700 
	#AT91C_SSC_STTDLY
 (0xFF << 16)

701 
	#AT91C_SSC_PERIOD
 (0xFF << 24)

703 
	#AT91C_SSC_DATLEN
 (0x1F << 0)

704 
	#AT91C_SSC_LOOP
 (0x1 << 5)

705 
	#AT91C_SSC_MSBF
 (0x1 << 7)

706 
	#AT91C_SSC_DATNB
 (0xF << 8)

707 
	#AT91C_SSC_FSLEN
 (0xF << 16)

708 
	#AT91C_SSC_FSOS
 (0x7 << 20)

709 
	#AT91C_SSC_FSOS_NONE
 (0x0 << 20)

710 
	#AT91C_SSC_FSOS_NEGATIVE
 (0x1 << 20)

711 
	#AT91C_SSC_FSOS_POSITIVE
 (0x2 << 20)

712 
	#AT91C_SSC_FSOS_LOW
 (0x3 << 20)

713 
	#AT91C_SSC_FSOS_HIGH
 (0x4 << 20)

714 
	#AT91C_SSC_FSOS_TOGGLE
 (0x5 << 20)

715 
	#AT91C_SSC_FSEDGE
 (0x1 << 24)

718 
	#AT91C_SSC_DATDEF
 (0x1 << 5)

719 
	#AT91C_SSC_FSDEN
 (0x1 << 23)

721 
	#AT91C_SSC_TXRDY
 (0x1 << 0)

722 
	#AT91C_SSC_TXEMPTY
 (0x1 << 1)

723 
	#AT91C_SSC_ENDTX
 (0x1 << 2)

724 
	#AT91C_SSC_TXBUFE
 (0x1 << 3)

725 
	#AT91C_SSC_RXRDY
 (0x1 << 4)

726 
	#AT91C_SSC_OVRUN
 (0x1 << 5)

727 
	#AT91C_SSC_ENDRX
 (0x1 << 6)

728 
	#AT91C_SSC_RXBUFF
 (0x1 << 7)

729 
	#AT91C_SSC_TXSYN
 (0x1 << 10)

730 
	#AT91C_SSC_RXSYN
 (0x1 << 11)

731 
	#AT91C_SSC_TXENA
 (0x1 << 16)

732 
	#AT91C_SSC_RXENA
 (0x1 << 17)

736 

	)

741 
	#TWI_CR
 ( 0)

742 
	#TWI_MMR
 ( 4)

743 
	#TWI_IADR
 (12)

744 
	#TWI_CWGR
 (16)

745 
	#TWI_SR
 (32)

746 
	#TWI_IER
 (36)

747 
	#TWI_IDR
 (40)

748 
	#TWI_IMR
 (44)

749 
	#TWI_RHR
 (48)

750 
	#TWI_THR
 (52)

752 
	#AT91C_TWI_START
 (0x1 << 0)

753 
	#AT91C_TWI_STOP
 (0x1 << 1)

754 
	#AT91C_TWI_MSEN
 (0x1 << 2)

755 
	#AT91C_TWI_MSDIS
 (0x1 << 3)

756 
	#AT91C_TWI_SWRST
 (0x1 << 7)

758 
	#AT91C_TWI_IADRSZ
 (0x3 << 8)

759 
	#AT91C_TWI_IADRSZ_NO
 (0x0 << 8)

760 
	#AT91C_TWI_IADRSZ_1_BYTE
 (0x1 << 8)

761 
	#AT91C_TWI_IADRSZ_2_BYTE
 (0x2 << 8)

762 
	#AT91C_TWI_IADRSZ_3_BYTE
 (0x3 << 8)

763 
	#AT91C_TWI_MREAD
 (0x1 << 12)

764 
	#AT91C_TWI_DADR
 (0x7F << 16)

766 
	#AT91C_TWI_CLDIV
 (0xFF << 0)

767 
	#AT91C_TWI_CHDIV
 (0xFF << 8)

768 
	#AT91C_TWI_CKDIV
 (0x7 << 16)

770 
	#AT91C_TWI_TXCOMP
 (0x1 << 0)

771 
	#AT91C_TWI_RXRDY
 (0x1 << 1)

772 
	#AT91C_TWI_TXRDY
 (0x1 << 2)

773 
	#AT91C_TWI_OVRE
 (0x1 << 6)

774 
	#AT91C_TWI_UNRE
 (0x1 << 7)

775 
	#AT91C_TWI_NACK
 (0x1 << 8)

779 

	)

784 
	#PWMC_CMR
 ( 0)

785 
	#PWMC_CDTYR
 ( 4)

786 
	#PWMC_CPRDR
 ( 8)

787 
	#PWMC_CCNTR
 (12)

788 
	#PWMC_CUPDR
 (16)

789 
	#PWMC_Re£rved
 (20)

791 
	#AT91C_PWMC_CPRE
 (0xF << 0)

792 
	#AT91C_PWMC_CPRE_MCK
 (0x0)

793 
	#AT91C_PWMC_CPRE_MCKA
 (0xB)

794 
	#AT91C_PWMC_CPRE_MCKB
 (0xC)

795 
	#AT91C_PWMC_CALG
 (0x1 << 8)

796 
	#AT91C_PWMC_CPOL
 (0x1 << 9)

797 
	#AT91C_PWMC_CPD
 (0x1 << 10)

799 
	#AT91C_PWMC_CDTY
 (0x0 << 0)

801 
	#AT91C_PWMC_CPRD
 (0x0 << 0)

803 
	#AT91C_PWMC_CCNT
 (0x0 << 0)

805 
	#AT91C_PWMC_CUPD
 (0x0 << 0)

806 

	)

811 
	#PWMC_MR
 ( 0)

812 
	#PWMC_ENA
 ( 4)

813 
	#PWMC_DIS
 ( 8)

814 
	#PWMC_SR
 (12)

815 
	#PWMC_IER
 (16)

816 
	#PWMC_IDR
 (20)

817 
	#PWMC_IMR
 (24)

818 
	#PWMC_ISR
 (28)

819 
	#PWMC_VR
 (252)

820 
	#PWMC_CH
 (512)

822 
	#AT91C_PWMC_DIVA
 (0xFF << 0)

823 
	#AT91C_PWMC_PREA
 (0xF << 8)

824 
	#AT91C_PWMC_PREA_MCK
 (0x0 << 8)

825 
	#AT91C_PWMC_DIVB
 (0xFF << 16)

826 
	#AT91C_PWMC_PREB
 (0xF << 24)

827 
	#AT91C_PWMC_PREB_MCK
 (0x0 << 24)

829 
	#AT91C_PWMC_CHID0
 (0x1 << 0)

830 
	#AT91C_PWMC_CHID1
 (0x1 << 1)

831 
	#AT91C_PWMC_CHID2
 (0x1 << 2)

832 
	#AT91C_PWMC_CHID3
 (0x1 << 3)

839 

	)

844 
	#UDP_NUM
 ( 0)

845 
	#UDP_GLBSTATE
 ( 4)

846 
	#UDP_FADDR
 ( 8)

847 
	#UDP_IER
 (16)

848 
	#UDP_IDR
 (20)

849 
	#UDP_IMR
 (24)

850 
	#UDP_ISR
 (28)

851 
	#UDP_ICR
 (32)

852 
	#UDP_RSTEP
 (40)

853 
	#UDP_CSR
 (48)

854 
	#UDP_FDR
 (80)

855 
	#UDP_TXVC
 (116)

857 
	#AT91C_UDP_FRM_NUM
 (0x7FF << 0)

858 
	#AT91C_UDP_FRM_ERR
 (0x1 << 16)

859 
	#AT91C_UDP_FRM_OK
 (0x1 << 17)

861 
	#AT91C_UDP_FADDEN
 (0x1 << 0)

862 
	#AT91C_UDP_CONFG
 (0x1 << 1)

863 
	#AT91C_UDP_ESR
 (0x1 << 2)

864 
	#AT91C_UDP_RSMINPR
 (0x1 << 3)

865 
	#AT91C_UDP_RMWUPE
 (0x1 << 4)

867 
	#AT91C_UDP_FADD
 (0xFF << 0)

868 
	#AT91C_UDP_FEN
 (0x1 << 8)

870 
	#AT91C_UDP_EPINT0
 (0x1 << 0)

871 
	#AT91C_UDP_EPINT1
 (0x1 << 1)

872 
	#AT91C_UDP_EPINT2
 (0x1 << 2)

873 
	#AT91C_UDP_EPINT3
 (0x1 << 3)

874 
	#AT91C_UDP_EPINT4
 (0x1 << 4)

875 
	#AT91C_UDP_EPINT5
 (0x1 << 5)

876 
	#AT91C_UDP_RXSUSP
 (0x1 << 8)

877 
	#AT91C_UDP_RXRSM
 (0x1 << 9)

878 
	#AT91C_UDP_EXTRSM
 (0x1 << 10)

879 
	#AT91C_UDP_SOFINT
 (0x1 << 11)

880 
	#AT91C_UDP_WAKEUP
 (0x1 << 13)

884 
	#AT91C_UDP_ENDBUSRES
 (0x1 << 12)

887 
	#AT91C_UDP_EP0
 (0x1 << 0)

888 
	#AT91C_UDP_EP1
 (0x1 << 1)

889 
	#AT91C_UDP_EP2
 (0x1 << 2)

890 
	#AT91C_UDP_EP3
 (0x1 << 3)

891 
	#AT91C_UDP_EP4
 (0x1 << 4)

892 
	#AT91C_UDP_EP5
 (0x1 << 5)

894 
	#AT91C_UDP_TXCOMP
 (0x1 << 0)

895 
	#AT91C_UDP_RX_DATA_BK0
 (0x1 << 1)

896 
	#AT91C_UDP_RXSETUP
 (0x1 << 2)

897 
	#AT91C_UDP_ISOERROR
 (0x1 << 3)

898 
	#AT91C_UDP_TXPKTRDY
 (0x1 << 4)

899 
	#AT91C_UDP_FORCESTALL
 (0x1 << 5)

900 
	#AT91C_UDP_RX_DATA_BK1
 (0x1 << 6)

901 
	#AT91C_UDP_DIR
 (0x1 << 7)

902 
	#AT91C_UDP_EPTYPE
 (0x7 << 8)

903 
	#AT91C_UDP_EPTYPE_CTRL
 (0x0 << 8)

904 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (0x1 << 8)

905 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (0x2 << 8)

906 
	#AT91C_UDP_EPTYPE_INT_OUT
 (0x3 << 8)

907 
	#AT91C_UDP_EPTYPE_ISO_IN
 (0x5 << 8)

908 
	#AT91C_UDP_EPTYPE_BULK_IN
 (0x6 << 8)

909 
	#AT91C_UDP_EPTYPE_INT_IN
 (0x7 << 8)

910 
	#AT91C_UDP_DTGLE
 (0x1 << 11)

911 
	#AT91C_UDP_EPEDS
 (0x1 << 15)

912 
	#AT91C_UDP_RXBYTECNT
 (0x7FF << 16)

914 
	#AT91C_UDP_TXVDIS
 (0x1 << 8)

915 
	#AT91C_UDP_PUON
 (0x1 << 9)

916 

	)

921 
	#TC_CCR
 ( 0)

922 
	#TC_CMR
 ( 4)

923 
	#TC_CV
 (16)

924 
	#TC_RA
 (20)

925 
	#TC_RB
 (24)

926 
	#TC_RC
 (28)

927 
	#TC_SR
 (32)

928 
	#TC_IER
 (36)

929 
	#TC_IDR
 (40)

930 
	#TC_IMR
 (44)

932 
	#AT91C_TC_CLKEN
 (0x1 << 0)

933 
	#AT91C_TC_CLKDIS
 (0x1 << 1)

934 
	#AT91C_TC_SWTRG
 (0x1 << 2)

936 
	#AT91C_TC_CLKS
 (0x7 << 0)

937 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (0x0)

938 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (0x1)

939 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (0x2)

940 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (0x3)

941 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (0x4)

942 
	#AT91C_TC_CLKS_XC0
 (0x5)

943 
	#AT91C_TC_CLKS_XC1
 (0x6)

944 
	#AT91C_TC_CLKS_XC2
 (0x7)

945 
	#AT91C_TC_CLKI
 (0x1 << 3)

946 
	#AT91C_TC_BURST
 (0x3 << 4)

947 
	#AT91C_TC_BURST_NONE
 (0x0 << 4)

948 
	#AT91C_TC_BURST_XC0
 (0x1 << 4)

949 
	#AT91C_TC_BURST_XC1
 (0x2 << 4)

950 
	#AT91C_TC_BURST_XC2
 (0x3 << 4)

951 
	#AT91C_TC_CPCSTOP
 (0x1 << 6)

952 
	#AT91C_TC_LDBSTOP
 (0x1 << 6)

953 
	#AT91C_TC_CPCDIS
 (0x1 << 7)

954 
	#AT91C_TC_LDBDIS
 (0x1 << 7)

955 
	#AT91C_TC_ETRGEDG
 (0x3 << 8)

956 
	#AT91C_TC_ETRGEDG_NONE
 (0x0 << 8)

957 
	#AT91C_TC_ETRGEDG_RISING
 (0x1 << 8)

958 
	#AT91C_TC_ETRGEDG_FALLING
 (0x2 << 8)

959 
	#AT91C_TC_ETRGEDG_BOTH
 (0x3 << 8)

960 
	#AT91C_TC_EEVTEDG
 (0x3 << 8)

961 
	#AT91C_TC_EEVTEDG_NONE
 (0x0 << 8)

962 
	#AT91C_TC_EEVTEDG_RISING
 (0x1 << 8)

963 
	#AT91C_TC_EEVTEDG_FALLING
 (0x2 << 8)

964 
	#AT91C_TC_EEVTEDG_BOTH
 (0x3 << 8)

965 
	#AT91C_TC_EEVT
 (0x3 << 10)

966 
	#AT91C_TC_EEVT_TIOB
 (0x0 << 10)

967 
	#AT91C_TC_EEVT_XC0
 (0x1 << 10)

968 
	#AT91C_TC_EEVT_XC1
 (0x2 << 10)

969 
	#AT91C_TC_EEVT_XC2
 (0x3 << 10)

970 
	#AT91C_TC_ABETRG
 (0x1 << 10)

971 
	#AT91C_TC_ENETRG
 (0x1 << 12)

972 
	#AT91C_TC_WAVESEL
 (0x3 << 13)

973 
	#AT91C_TC_WAVESEL_UP
 (0x0 << 13)

974 
	#AT91C_TC_WAVESEL_UPDOWN
 (0x1 << 13)

975 
	#AT91C_TC_WAVESEL_UP_AUTO
 (0x2 << 13)

976 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (0x3 << 13)

977 
	#AT91C_TC_CPCTRG
 (0x1 << 14)

978 
	#AT91C_TC_WAVE
 (0x1 << 15)

979 
	#AT91C_TC_ACPA
 (0x3 << 16)

980 
	#AT91C_TC_ACPA_NONE
 (0x0 << 16)

981 
	#AT91C_TC_ACPA_SET
 (0x1 << 16)

982 
	#AT91C_TC_ACPA_CLEAR
 (0x2 << 16)

983 
	#AT91C_TC_ACPA_TOGGLE
 (0x3 << 16)

984 
	#AT91C_TC_LDRA
 (0x3 << 16)

985 
	#AT91C_TC_LDRA_NONE
 (0x0 << 16)

986 
	#AT91C_TC_LDRA_RISING
 (0x1 << 16)

987 
	#AT91C_TC_LDRA_FALLING
 (0x2 << 16)

988 
	#AT91C_TC_LDRA_BOTH
 (0x3 << 16)

989 
	#AT91C_TC_ACPC
 (0x3 << 18)

990 
	#AT91C_TC_ACPC_NONE
 (0x0 << 18)

991 
	#AT91C_TC_ACPC_SET
 (0x1 << 18)

992 
	#AT91C_TC_ACPC_CLEAR
 (0x2 << 18)

993 
	#AT91C_TC_ACPC_TOGGLE
 (0x3 << 18)

994 
	#AT91C_TC_LDRB
 (0x3 << 18)

995 
	#AT91C_TC_LDRB_NONE
 (0x0 << 18)

996 
	#AT91C_TC_LDRB_RISING
 (0x1 << 18)

997 
	#AT91C_TC_LDRB_FALLING
 (0x2 << 18)

998 
	#AT91C_TC_LDRB_BOTH
 (0x3 << 18)

999 
	#AT91C_TC_AEEVT
 (0x3 << 20)

1000 
	#AT91C_TC_AEEVT_NONE
 (0x0 << 20)

1001 
	#AT91C_TC_AEEVT_SET
 (0x1 << 20)

1002 
	#AT91C_TC_AEEVT_CLEAR
 (0x2 << 20)

1003 
	#AT91C_TC_AEEVT_TOGGLE
 (0x3 << 20)

1004 
	#AT91C_TC_ASWTRG
 (0x3 << 22)

1005 
	#AT91C_TC_ASWTRG_NONE
 (0x0 << 22)

1006 
	#AT91C_TC_ASWTRG_SET
 (0x1 << 22)

1007 
	#AT91C_TC_ASWTRG_CLEAR
 (0x2 << 22)

1008 
	#AT91C_TC_ASWTRG_TOGGLE
 (0x3 << 22)

1009 
	#AT91C_TC_BCPB
 (0x3 << 24)

1010 
	#AT91C_TC_BCPB_NONE
 (0x0 << 24)

1011 
	#AT91C_TC_BCPB_SET
 (0x1 << 24)

1012 
	#AT91C_TC_BCPB_CLEAR
 (0x2 << 24)

1013 
	#AT91C_TC_BCPB_TOGGLE
 (0x3 << 24)

1014 
	#AT91C_TC_BCPC
 (0x3 << 26)

1015 
	#AT91C_TC_BCPC_NONE
 (0x0 << 26)

1016 
	#AT91C_TC_BCPC_SET
 (0x1 << 26)

1017 
	#AT91C_TC_BCPC_CLEAR
 (0x2 << 26)

1018 
	#AT91C_TC_BCPC_TOGGLE
 (0x3 << 26)

1019 
	#AT91C_TC_BEEVT
 (0x3 << 28)

1020 
	#AT91C_TC_BEEVT_NONE
 (0x0 << 28)

1021 
	#AT91C_TC_BEEVT_SET
 (0x1 << 28)

1022 
	#AT91C_TC_BEEVT_CLEAR
 (0x2 << 28)

1023 
	#AT91C_TC_BEEVT_TOGGLE
 (0x3 << 28)

1024 
	#AT91C_TC_BSWTRG
 (0x3 << 30)

1025 
	#AT91C_TC_BSWTRG_NONE
 (0x0 << 30)

1026 
	#AT91C_TC_BSWTRG_SET
 (0x1 << 30)

1027 
	#AT91C_TC_BSWTRG_CLEAR
 (0x2 << 30)

1028 
	#AT91C_TC_BSWTRG_TOGGLE
 (0x3 << 30)

1030 
	#AT91C_TC_COVFS
 (0x1 << 0)

1031 
	#AT91C_TC_LOVRS
 (0x1 << 1)

1032 
	#AT91C_TC_CPAS
 (0x1 << 2)

1033 
	#AT91C_TC_CPBS
 (0x1 << 3)

1034 
	#AT91C_TC_CPCS
 (0x1 << 4)

1035 
	#AT91C_TC_LDRAS
 (0x1 << 5)

1036 
	#AT91C_TC_LDRBS
 (0x1 << 6)

1037 
	#AT91C_TC_ETRGS
 (0x1 << 7)

1038 
	#AT91C_TC_CLKSTA
 (0x1 << 16)

1039 
	#AT91C_TC_MTIOA
 (0x1 << 17)

1040 
	#AT91C_TC_MTIOB
 (0x1 << 18)

1044 

	)

1049 
	#TCB_TC0
 ( 0)

1050 
	#TCB_TC1
 (64)

1051 
	#TCB_TC2
 (128)

1052 
	#TCB_BCR
 (192)

1053 
	#TCB_BMR
 (196)

1055 
	#AT91C_TCB_SYNC
 (0x1 << 0)

1057 
	#AT91C_TCB_TC0XC0S
 (0x3 << 0)

1058 
	#AT91C_TCB_TC0XC0S_TCLK0
 (0x0)

1059 
	#AT91C_TCB_TC0XC0S_NONE
 (0x1)

1060 
	#AT91C_TCB_TC0XC0S_TIOA1
 (0x2)

1061 
	#AT91C_TCB_TC0XC0S_TIOA2
 (0x3)

1062 
	#AT91C_TCB_TC1XC1S
 (0x3 << 2)

1063 
	#AT91C_TCB_TC1XC1S_TCLK1
 (0x0 << 2)

1064 
	#AT91C_TCB_TC1XC1S_NONE
 (0x1 << 2)

1065 
	#AT91C_TCB_TC1XC1S_TIOA0
 (0x2 << 2)

1066 
	#AT91C_TCB_TC1XC1S_TIOA2
 (0x3 << 2)

1067 
	#AT91C_TCB_TC2XC2S
 (0x3 << 4)

1068 
	#AT91C_TCB_TC2XC2S_TCLK2
 (0x0 << 4)

1069 
	#AT91C_TCB_TC2XC2S_NONE
 (0x1 << 4)

1070 
	#AT91C_TCB_TC2XC2S_TIOA0
 (0x2 << 4)

1071 
	#AT91C_TCB_TC2XC2S_TIOA1
 (0x3 << 4)

1072 

	)

1077 
	#CAN_MB_MMR
 ( 0)

1078 
	#CAN_MB_MAM
 ( 4)

1079 
	#CAN_MB_MID
 ( 8)

1080 
	#CAN_MB_MFID
 (12)

1081 
	#CAN_MB_MSR
 (16)

1082 
	#CAN_MB_MDL
 (20)

1083 
	#CAN_MB_MDH
 (24)

1084 
	#CAN_MB_MCR
 (28)

1086 
	#AT91C_CAN_MTIMEMARK
 (0xFFFF << 0)

1087 
	#AT91C_CAN_PRIOR
 (0xF << 16)

1088 
	#AT91C_CAN_MOT
 (0x7 << 24)

1089 
	#AT91C_CAN_MOT_DIS
 (0x0 << 24)

1090 
	#AT91C_CAN_MOT_RX
 (0x1 << 24)

1091 
	#AT91C_CAN_MOT_RXOVERWRITE
 (0x2 << 24)

1092 
	#AT91C_CAN_MOT_TX
 (0x3 << 24)

1093 
	#AT91C_CAN_MOT_CONSUMER
 (0x4 << 24)

1094 
	#AT91C_CAN_MOT_PRODUCER
 (0x5 << 24)

1096 
	#AT91C_CAN_MIDvB
 (0x3FFFF << 0)

1097 
	#AT91C_CAN_MIDvA
 (0x7FF << 18)

1098 
	#AT91C_CAN_MIDE
 (0x1 << 29)

1102 
	#AT91C_CAN_MTIMESTAMP
 (0xFFFF << 0)

1103 
	#AT91C_CAN_MDLC
 (0xF << 16)

1104 
	#AT91C_CAN_MRTR
 (0x1 << 20)

1105 
	#AT91C_CAN_MABT
 (0x1 << 22)

1106 
	#AT91C_CAN_MRDY
 (0x1 << 23)

1107 
	#AT91C_CAN_MMI
 (0x1 << 24)

1111 
	#AT91C_CAN_MACR
 (0x1 << 22)

1112 
	#AT91C_CAN_MTCR
 (0x1 << 23)

1113 

	)

1118 
	#CAN_MR
 ( 0)

1119 
	#CAN_IER
 ( 4)

1120 
	#CAN_IDR
 ( 8)

1121 
	#CAN_IMR
 (12)

1122 
	#CAN_SR
 (16)

1123 
	#CAN_BR
 (20)

1124 
	#CAN_TIM
 (24)

1125 
	#CAN_TIMESTP
 (28)

1126 
	#CAN_ECR
 (32)

1127 
	#CAN_TCR
 (36)

1128 
	#CAN_ACR
 (40)

1129 
	#CAN_VR
 (252)

1130 
	#CAN_MB0
 (512)

1131 
	#CAN_MB1
 (544)

1132 
	#CAN_MB2
 (576)

1133 
	#CAN_MB3
 (608)

1134 
	#CAN_MB4
 (640)

1135 
	#CAN_MB5
 (672)

1136 
	#CAN_MB6
 (704)

1137 
	#CAN_MB7
 (736)

1138 
	#CAN_MB8
 (768)

1139 
	#CAN_MB9
 (800)

1140 
	#CAN_MB10
 (832)

1141 
	#CAN_MB11
 (864)

1142 
	#CAN_MB12
 (896)

1143 
	#CAN_MB13
 (928)

1144 
	#CAN_MB14
 (960)

1145 
	#CAN_MB15
 (992)

1147 
	#AT91C_CAN_CANEN
 (0x1 << 0)

1148 
	#AT91C_CAN_LPM
 (0x1 << 1)

1149 
	#AT91C_CAN_ABM
 (0x1 << 2)

1150 
	#AT91C_CAN_OVL
 (0x1 << 3)

1151 
	#AT91C_CAN_TEOF
 (0x1 << 4)

1152 
	#AT91C_CAN_TTM
 (0x1 << 5)

1153 
	#AT91C_CAN_TIMFRZ
 (0x1 << 6)

1154 
	#AT91C_CAN_DRPT
 (0x1 << 7)

1156 
	#AT91C_CAN_MB0
 (0x1 << 0)

1157 
	#AT91C_CAN_MB1
 (0x1 << 1)

1158 
	#AT91C_CAN_MB2
 (0x1 << 2)

1159 
	#AT91C_CAN_MB3
 (0x1 << 3)

1160 
	#AT91C_CAN_MB4
 (0x1 << 4)

1161 
	#AT91C_CAN_MB5
 (0x1 << 5)

1162 
	#AT91C_CAN_MB6
 (0x1 << 6)

1163 
	#AT91C_CAN_MB7
 (0x1 << 7)

1164 
	#AT91C_CAN_MB8
 (0x1 << 8)

1165 
	#AT91C_CAN_MB9
 (0x1 << 9)

1166 
	#AT91C_CAN_MB10
 (0x1 << 10)

1167 
	#AT91C_CAN_MB11
 (0x1 << 11)

1168 
	#AT91C_CAN_MB12
 (0x1 << 12)

1169 
	#AT91C_CAN_MB13
 (0x1 << 13)

1170 
	#AT91C_CAN_MB14
 (0x1 << 14)

1171 
	#AT91C_CAN_MB15
 (0x1 << 15)

1172 
	#AT91C_CAN_ERRA
 (0x1 << 16)

1173 
	#AT91C_CAN_WARN
 (0x1 << 17)

1174 
	#AT91C_CAN_ERRP
 (0x1 << 18)

1175 
	#AT91C_CAN_BOFF
 (0x1 << 19)

1176 
	#AT91C_CAN_SLEEP
 (0x1 << 20)

1177 
	#AT91C_CAN_WAKEUP
 (0x1 << 21)

1178 
	#AT91C_CAN_TOVF
 (0x1 << 22)

1179 
	#AT91C_CAN_TSTP
 (0x1 << 23)

1180 
	#AT91C_CAN_CERR
 (0x1 << 24)

1181 
	#AT91C_CAN_SERR
 (0x1 << 25)

1182 
	#AT91C_CAN_AERR
 (0x1 << 26)

1183 
	#AT91C_CAN_FERR
 (0x1 << 27)

1184 
	#AT91C_CAN_BERR
 (0x1 << 28)

1188 
	#AT91C_CAN_RBSY
 (0x1 << 29)

1189 
	#AT91C_CAN_TBSY
 (0x1 << 30)

1190 
	#AT91C_CAN_OVLY
 (0x1 << 31)

1192 
	#AT91C_CAN_PHASE2
 (0x7 << 0)

1193 
	#AT91C_CAN_PHASE1
 (0x7 << 4)

1194 
	#AT91C_CAN_PROPAG
 (0x7 << 8)

1195 
	#AT91C_CAN_SYNC
 (0x3 << 12)

1196 
	#AT91C_CAN_BRP
 (0x7F << 16)

1197 
	#AT91C_CAN_SMP
 (0x1 << 24)

1199 
	#AT91C_CAN_TIMER
 (0xFFFF << 0)

1202 
	#AT91C_CAN_REC
 (0xFF << 0)

1203 
	#AT91C_CAN_TEC
 (0xFF << 16)

1205 
	#AT91C_CAN_TIMRST
 (0x1 << 31)

1207 

	)

1212 
	#EMAC_NCR
 ( 0)

1213 
	#EMAC_NCFGR
 ( 4)

1214 
	#EMAC_NSR
 ( 8)

1215 
	#EMAC_TSR
 (20)

1216 
	#EMAC_RBQP
 (24)

1217 
	#EMAC_TBQP
 (28)

1218 
	#EMAC_RSR
 (32)

1219 
	#EMAC_ISR
 (36)

1220 
	#EMAC_IER
 (40)

1221 
	#EMAC_IDR
 (44)

1222 
	#EMAC_IMR
 (48)

1223 
	#EMAC_MAN
 (52)

1224 
	#EMAC_PTR
 (56)

1225 
	#EMAC_PFR
 (60)

1226 
	#EMAC_FTO
 (64)

1227 
	#EMAC_SCF
 (68)

1228 
	#EMAC_MCF
 (72)

1229 
	#EMAC_FRO
 (76)

1230 
	#EMAC_FCSE
 (80)

1231 
	#EMAC_ALE
 (84)

1232 
	#EMAC_DTF
 (88)

1233 
	#EMAC_LCOL
 (92)

1234 
	#EMAC_ECOL
 (96)

1235 
	#EMAC_TUND
 (100)

1236 
	#EMAC_CSE
 (104)

1237 
	#EMAC_RRE
 (108)

1238 
	#EMAC_ROV
 (112)

1239 
	#EMAC_RSE
 (116)

1240 
	#EMAC_ELE
 (120)

1241 
	#EMAC_RJA
 (124)

1242 
	#EMAC_USF
 (128)

1243 
	#EMAC_STE
 (132)

1244 
	#EMAC_RLE
 (136)

1245 
	#EMAC_TPF
 (140)

1246 
	#EMAC_HRB
 (144)

1247 
	#EMAC_HRT
 (148)

1248 
	#EMAC_SA1L
 (152)

1249 
	#EMAC_SA1H
 (156)

1250 
	#EMAC_SA2L
 (160)

1251 
	#EMAC_SA2H
 (164)

1252 
	#EMAC_SA3L
 (168)

1253 
	#EMAC_SA3H
 (172)

1254 
	#EMAC_SA4L
 (176)

1255 
	#EMAC_SA4H
 (180)

1256 
	#EMAC_TID
 (184)

1257 
	#EMAC_TPQ
 (188)

1258 
	#EMAC_USRIO
 (192)

1259 
	#EMAC_WOL
 (196)

1260 
	#EMAC_REV
 (252)

1262 
	#AT91C_EMAC_LB
 (0x1 << 0)

1263 
	#AT91C_EMAC_LLB
 (0x1 << 1)

1264 
	#AT91C_EMAC_RE
 (0x1 << 2)

1265 
	#AT91C_EMAC_TE
 (0x1 << 3)

1266 
	#AT91C_EMAC_MPE
 (0x1 << 4)

1267 
	#AT91C_EMAC_CLRSTAT
 (0x1 << 5)

1268 
	#AT91C_EMAC_INCSTAT
 (0x1 << 6)

1269 
	#AT91C_EMAC_WESTAT
 (0x1 << 7)

1270 
	#AT91C_EMAC_BP
 (0x1 << 8)

1271 
	#AT91C_EMAC_TSTART
 (0x1 << 9)

1272 
	#AT91C_EMAC_THALT
 (0x1 << 10)

1273 
	#AT91C_EMAC_TPFR
 (0x1 << 11)

1274 
	#AT91C_EMAC_TZQ
 (0x1 << 12)

1276 
	#AT91C_EMAC_SPD
 (0x1 << 0)

1277 
	#AT91C_EMAC_FD
 (0x1 << 1)

1278 
	#AT91C_EMAC_JFRAME
 (0x1 << 3)

1279 
	#AT91C_EMAC_CAF
 (0x1 << 4)

1280 
	#AT91C_EMAC_NBC
 (0x1 << 5)

1281 
	#AT91C_EMAC_MTI
 (0x1 << 6)

1282 
	#AT91C_EMAC_UNI
 (0x1 << 7)

1283 
	#AT91C_EMAC_BIG
 (0x1 << 8)

1284 
	#AT91C_EMAC_EAE
 (0x1 << 9)

1285 
	#AT91C_EMAC_CLK
 (0x3 << 10)

1286 
	#AT91C_EMAC_CLK_HCLK_8
 (0x0 << 10)

1287 
	#AT91C_EMAC_CLK_HCLK_16
 (0x1 << 10)

1288 
	#AT91C_EMAC_CLK_HCLK_32
 (0x2 << 10)

1289 
	#AT91C_EMAC_CLK_HCLK_64
 (0x3 << 10)

1290 
	#AT91C_EMAC_RTY
 (0x1 << 12)

1291 
	#AT91C_EMAC_PAE
 (0x1 << 13)

1292 
	#AT91C_EMAC_RBOF
 (0x3 << 14)

1293 
	#AT91C_EMAC_RBOF_OFFSET_0
 (0x0 << 14)

1294 
	#AT91C_EMAC_RBOF_OFFSET_1
 (0x1 << 14)

1295 
	#AT91C_EMAC_RBOF_OFFSET_2
 (0x2 << 14)

1296 
	#AT91C_EMAC_RBOF_OFFSET_3
 (0x3 << 14)

1297 
	#AT91C_EMAC_RLCE
 (0x1 << 16)

1298 
	#AT91C_EMAC_DRFCS
 (0x1 << 17)

1299 
	#AT91C_EMAC_EFRHD
 (0x1 << 18)

1300 
	#AT91C_EMAC_IRXFCS
 (0x1 << 19)

1302 
	#AT91C_EMAC_LINKR
 (0x1 << 0)

1303 
	#AT91C_EMAC_MDIO
 (0x1 << 1)

1304 
	#AT91C_EMAC_IDLE
 (0x1 << 2)

1306 
	#AT91C_EMAC_UBR
 (0x1 << 0)

1307 
	#AT91C_EMAC_COL
 (0x1 << 1)

1308 
	#AT91C_EMAC_RLES
 (0x1 << 2)

1309 
	#AT91C_EMAC_TGO
 (0x1 << 3)

1310 
	#AT91C_EMAC_BEX
 (0x1 << 4)

1311 
	#AT91C_EMAC_COMP
 (0x1 << 5)

1312 
	#AT91C_EMAC_UND
 (0x1 << 6)

1314 
	#AT91C_EMAC_BNA
 (0x1 << 0)

1315 
	#AT91C_EMAC_REC
 (0x1 << 1)

1316 
	#AT91C_EMAC_OVR
 (0x1 << 2)

1318 
	#AT91C_EMAC_MFD
 (0x1 << 0)

1319 
	#AT91C_EMAC_RCOMP
 (0x1 << 1)

1320 
	#AT91C_EMAC_RXUBR
 (0x1 << 2)

1321 
	#AT91C_EMAC_TXUBR
 (0x1 << 3)

1322 
	#AT91C_EMAC_TUNDR
 (0x1 << 4)

1323 
	#AT91C_EMAC_RLEX
 (0x1 << 5)

1324 
	#AT91C_EMAC_TXERR
 (0x1 << 6)

1325 
	#AT91C_EMAC_TCOMP
 (0x1 << 7)

1326 
	#AT91C_EMAC_LINK
 (0x1 << 9)

1327 
	#AT91C_EMAC_ROVR
 (0x1 << 10)

1328 
	#AT91C_EMAC_HRESP
 (0x1 << 11)

1329 
	#AT91C_EMAC_PFRE
 (0x1 << 12)

1330 
	#AT91C_EMAC_PTZ
 (0x1 << 13)

1335 
	#AT91C_EMAC_DATA
 (0xFFFF << 0)

1336 
	#AT91C_EMAC_CODE
 (0x3 << 16)

1337 
	#AT91C_EMAC_REGA
 (0x1F << 18)

1338 
	#AT91C_EMAC_PHYA
 (0x1F << 23)

1339 
	#AT91C_EMAC_RW
 (0x3 << 28)

1340 
	#AT91C_EMAC_SOF
 (0x3 << 30)

1342 
	#AT91C_EMAC_RMII
 (0x1 << 0)

1344 
	#AT91C_EMAC_IP
 (0xFFFF << 0)

1345 
	#AT91C_EMAC_MAG
 (0x1 << 16)

1346 
	#AT91C_EMAC_ARP
 (0x1 << 17)

1347 
	#AT91C_EMAC_SA1
 (0x1 << 18)

1349 
	#AT91C_EMAC_REVREF
 (0xFFFF << 0)

1350 
	#AT91C_EMAC_PARTREF
 (0xFFFF << 16)

1351 

	)

1356 
	#ADC_CR
 ( 0)

1357 
	#ADC_MR
 ( 4)

1358 
	#ADC_CHER
 (16)

1359 
	#ADC_CHDR
 (20)

1360 
	#ADC_CHSR
 (24)

1361 
	#ADC_SR
 (28)

1362 
	#ADC_LCDR
 (32)

1363 
	#ADC_IER
 (36)

1364 
	#ADC_IDR
 (40)

1365 
	#ADC_IMR
 (44)

1366 
	#ADC_CDR0
 (48)

1367 
	#ADC_CDR1
 (52)

1368 
	#ADC_CDR2
 (56)

1369 
	#ADC_CDR3
 (60)

1370 
	#ADC_CDR4
 (64)

1371 
	#ADC_CDR5
 (68)

1372 
	#ADC_CDR6
 (72)

1373 
	#ADC_CDR7
 (76)

1374 
	#ADC_RPR
 (256)

1375 
	#ADC_RCR
 (260)

1376 
	#ADC_TPR
 (264)

1377 
	#ADC_TCR
 (268)

1378 
	#ADC_RNPR
 (272)

1379 
	#ADC_RNCR
 (276)

1380 
	#ADC_TNPR
 (280)

1381 
	#ADC_TNCR
 (284)

1382 
	#ADC_PTCR
 (288)

1383 
	#ADC_PTSR
 (292)

1385 
	#AT91C_ADC_SWRST
 (0x1 << 0)

1386 
	#AT91C_ADC_START
 (0x1 << 1)

1388 
	#AT91C_ADC_TRGEN
 (0x1 << 0)

1389 
	#AT91C_ADC_TRGEN_DIS
 (0x0)

1390 
	#AT91C_ADC_TRGEN_EN
 (0x1)

1391 
	#AT91C_ADC_TRGSEL
 (0x7 << 1)

1392 
	#AT91C_ADC_TRGSEL_TIOA0
 (0x0 << 1)

1393 
	#AT91C_ADC_TRGSEL_TIOA1
 (0x1 << 1)

1394 
	#AT91C_ADC_TRGSEL_TIOA2
 (0x2 << 1)

1395 
	#AT91C_ADC_TRGSEL_TIOA3
 (0x3 << 1)

1396 
	#AT91C_ADC_TRGSEL_TIOA4
 (0x4 << 1)

1397 
	#AT91C_ADC_TRGSEL_TIOA5
 (0x5 << 1)

1398 
	#AT91C_ADC_TRGSEL_EXT
 (0x6 << 1)

1399 
	#AT91C_ADC_LOWRES
 (0x1 << 4)

1400 
	#AT91C_ADC_LOWRES_10_BIT
 (0x0 << 4)

1401 
	#AT91C_ADC_LOWRES_8_BIT
 (0x1 << 4)

1402 
	#AT91C_ADC_SLEEP
 (0x1 << 5)

1403 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (0x0 << 5)

1404 
	#AT91C_ADC_SLEEP_MODE
 (0x1 << 5)

1405 
	#AT91C_ADC_PRESCAL
 (0x3F << 8)

1406 
	#AT91C_ADC_STARTUP
 (0x1F << 16)

1407 
	#AT91C_ADC_SHTIM
 (0xF << 24)

1409 
	#AT91C_ADC_CH0
 (0x1 << 0)

1410 
	#AT91C_ADC_CH1
 (0x1 << 1)

1411 
	#AT91C_ADC_CH2
 (0x1 << 2)

1412 
	#AT91C_ADC_CH3
 (0x1 << 3)

1413 
	#AT91C_ADC_CH4
 (0x1 << 4)

1414 
	#AT91C_ADC_CH5
 (0x1 << 5)

1415 
	#AT91C_ADC_CH6
 (0x1 << 6)

1416 
	#AT91C_ADC_CH7
 (0x1 << 7)

1420 
	#AT91C_ADC_EOC0
 (0x1 << 0)

1421 
	#AT91C_ADC_EOC1
 (0x1 << 1)

1422 
	#AT91C_ADC_EOC2
 (0x1 << 2)

1423 
	#AT91C_ADC_EOC3
 (0x1 << 3)

1424 
	#AT91C_ADC_EOC4
 (0x1 << 4)

1425 
	#AT91C_ADC_EOC5
 (0x1 << 5)

1426 
	#AT91C_ADC_EOC6
 (0x1 << 6)

1427 
	#AT91C_ADC_EOC7
 (0x1 << 7)

1428 
	#AT91C_ADC_OVRE0
 (0x1 << 8)

1429 
	#AT91C_ADC_OVRE1
 (0x1 << 9)

1430 
	#AT91C_ADC_OVRE2
 (0x1 << 10)

1431 
	#AT91C_ADC_OVRE3
 (0x1 << 11)

1432 
	#AT91C_ADC_OVRE4
 (0x1 << 12)

1433 
	#AT91C_ADC_OVRE5
 (0x1 << 13)

1434 
	#AT91C_ADC_OVRE6
 (0x1 << 14)

1435 
	#AT91C_ADC_OVRE7
 (0x1 << 15)

1436 
	#AT91C_ADC_DRDY
 (0x1 << 16)

1437 
	#AT91C_ADC_GOVRE
 (0x1 << 17)

1438 
	#AT91C_ADC_ENDRX
 (0x1 << 18)

1439 
	#AT91C_ADC_RXBUFF
 (0x1 << 19)

1441 
	#AT91C_ADC_LDATA
 (0x3FF << 0)

1446 
	#AT91C_ADC_DATA
 (0x3FF << 0)

1454 

	)

1459 
	#AES_CR
 ( 0)

1460 
	#AES_MR
 ( 4)

1461 
	#AES_IER
 (16)

1462 
	#AES_IDR
 (20)

1463 
	#AES_IMR
 (24)

1464 
	#AES_ISR
 (28)

1465 
	#AES_KEYWxR
 (32)

1466 
	#AES_IDATAxR
 (64)

1467 
	#AES_ODATAxR
 (80)

1468 
	#AES_IVxR
 (96)

1469 
	#AES_VR
 (252)

1470 
	#AES_RPR
 (256)

1471 
	#AES_RCR
 (260)

1472 
	#AES_TPR
 (264)

1473 
	#AES_TCR
 (268)

1474 
	#AES_RNPR
 (272)

1475 
	#AES_RNCR
 (276)

1476 
	#AES_TNPR
 (280)

1477 
	#AES_TNCR
 (284)

1478 
	#AES_PTCR
 (288)

1479 
	#AES_PTSR
 (292)

1481 
	#AT91C_AES_START
 (0x1 << 0)

1482 
	#AT91C_AES_SWRST
 (0x1 << 8)

1483 
	#AT91C_AES_LOADSEED
 (0x1 << 16)

1485 
	#AT91C_AES_CIPHER
 (0x1 << 0)

1486 
	#AT91C_AES_PROCDLY
 (0xF << 4)

1487 
	#AT91C_AES_SMOD
 (0x3 << 8)

1488 
	#AT91C_AES_SMOD_MANUAL
 (0x0 << 8)

1489 
	#AT91C_AES_SMOD_AUTO
 (0x1 << 8)

1490 
	#AT91C_AES_SMOD_PDC
 (0x2 << 8)

1491 
	#AT91C_AES_OPMOD
 (0x7 << 12)

1492 
	#AT91C_AES_OPMOD_ECB
 (0x0 << 12)

1493 
	#AT91C_AES_OPMOD_CBC
 (0x1 << 12)

1494 
	#AT91C_AES_OPMOD_OFB
 (0x2 << 12)

1495 
	#AT91C_AES_OPMOD_CFB
 (0x3 << 12)

1496 
	#AT91C_AES_OPMOD_CTR
 (0x4 << 12)

1497 
	#AT91C_AES_LOD
 (0x1 << 15)

1498 
	#AT91C_AES_CFBS
 (0x7 << 16)

1499 
	#AT91C_AES_CFBS_128_BIT
 (0x0 << 16)

1500 
	#AT91C_AES_CFBS_64_BIT
 (0x1 << 16)

1501 
	#AT91C_AES_CFBS_32_BIT
 (0x2 << 16)

1502 
	#AT91C_AES_CFBS_16_BIT
 (0x3 << 16)

1503 
	#AT91C_AES_CFBS_8_BIT
 (0x4 << 16)

1504 
	#AT91C_AES_CKEY
 (0xF << 20)

1505 
	#AT91C_AES_CTYPE
 (0x1F << 24)

1506 
	#AT91C_AES_CTYPE_TYPE1_EN
 (0x1 << 24)

1507 
	#AT91C_AES_CTYPE_TYPE2_EN
 (0x2 << 24)

1508 
	#AT91C_AES_CTYPE_TYPE3_EN
 (0x4 << 24)

1509 
	#AT91C_AES_CTYPE_TYPE4_EN
 (0x8 << 24)

1510 
	#AT91C_AES_CTYPE_TYPE5_EN
 (0x10 << 24)

1512 
	#AT91C_AES_DATRDY
 (0x1 << 0)

1513 
	#AT91C_AES_ENDRX
 (0x1 << 1)

1514 
	#AT91C_AES_ENDTX
 (0x1 << 2)

1515 
	#AT91C_AES_RXBUFF
 (0x1 << 3)

1516 
	#AT91C_AES_TXBUFE
 (0x1 << 4)

1517 
	#AT91C_AES_URAD
 (0x1 << 8)

1521 
	#AT91C_AES_URAT
 (0x7 << 12)

1522 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (0x0 << 12)

1523 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (0x1 << 12)

1524 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (0x2 << 12)

1525 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (0x3 << 12)

1526 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (0x4 << 12)

1527 
	#AT91C_AES_URAT_WO_REG_READ
 (0x5 << 12)

1528 

	)

1533 
	#TDES_CR
 ( 0)

1534 
	#TDES_MR
 ( 4)

1535 
	#TDES_IER
 (16)

1536 
	#TDES_IDR
 (20)

1537 
	#TDES_IMR
 (24)

1538 
	#TDES_ISR
 (28)

1539 
	#TDES_KEY1WxR
 (32)

1540 
	#TDES_KEY2WxR
 (40)

1541 
	#TDES_KEY3WxR
 (48)

1542 
	#TDES_IDATAxR
 (64)

1543 
	#TDES_ODATAxR
 (80)

1544 
	#TDES_IVxR
 (96)

1545 
	#TDES_VR
 (252)

1546 
	#TDES_RPR
 (256)

1547 
	#TDES_RCR
 (260)

1548 
	#TDES_TPR
 (264)

1549 
	#TDES_TCR
 (268)

1550 
	#TDES_RNPR
 (272)

1551 
	#TDES_RNCR
 (276)

1552 
	#TDES_TNPR
 (280)

1553 
	#TDES_TNCR
 (284)

1554 
	#TDES_PTCR
 (288)

1555 
	#TDES_PTSR
 (292)

1557 
	#AT91C_TDES_START
 (0x1 << 0)

1558 
	#AT91C_TDES_SWRST
 (0x1 << 8)

1560 
	#AT91C_TDES_CIPHER
 (0x1 << 0)

1561 
	#AT91C_TDES_TDESMOD
 (0x1 << 1)

1562 
	#AT91C_TDES_KEYMOD
 (0x1 << 4)

1563 
	#AT91C_TDES_SMOD
 (0x3 << 8)

1564 
	#AT91C_TDES_SMOD_MANUAL
 (0x0 << 8)

1565 
	#AT91C_TDES_SMOD_AUTO
 (0x1 << 8)

1566 
	#AT91C_TDES_SMOD_PDC
 (0x2 << 8)

1567 
	#AT91C_TDES_OPMOD
 (0x3 << 12)

1568 
	#AT91C_TDES_OPMOD_ECB
 (0x0 << 12)

1569 
	#AT91C_TDES_OPMOD_CBC
 (0x1 << 12)

1570 
	#AT91C_TDES_OPMOD_OFB
 (0x2 << 12)

1571 
	#AT91C_TDES_OPMOD_CFB
 (0x3 << 12)

1572 
	#AT91C_TDES_LOD
 (0x1 << 15)

1573 
	#AT91C_TDES_CFBS
 (0x3 << 16)

1574 
	#AT91C_TDES_CFBS_64_BIT
 (0x0 << 16)

1575 
	#AT91C_TDES_CFBS_32_BIT
 (0x1 << 16)

1576 
	#AT91C_TDES_CFBS_16_BIT
 (0x2 << 16)

1577 
	#AT91C_TDES_CFBS_8_BIT
 (0x3 << 16)

1579 
	#AT91C_TDES_DATRDY
 (0x1 << 0)

1580 
	#AT91C_TDES_ENDRX
 (0x1 << 1)

1581 
	#AT91C_TDES_ENDTX
 (0x1 << 2)

1582 
	#AT91C_TDES_RXBUFF
 (0x1 << 3)

1583 
	#AT91C_TDES_TXBUFE
 (0x1 << 4)

1584 
	#AT91C_TDES_URAD
 (0x1 << 8)

1588 
	#AT91C_TDES_URAT
 (0x3 << 12)

1589 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (0x0 << 12)

1590 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (0x1 << 12)

1591 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (0x2 << 12)

1592 
	#AT91C_TDES_URAT_WO_REG_READ
 (0x3 << 12)

1593 

	)

1599 
	#AT91C_AIC_IVR
 (0xFFFFF100)

1600 
	#AT91C_AIC_SMR
 (0xFFFFF000)

1601 
	#AT91C_AIC_FVR
 (0xFFFFF104)

1602 
	#AT91C_AIC_DCR
 (0xFFFFF138)

1603 
	#AT91C_AIC_EOICR
 (0xFFFFF130)

1604 
	#AT91C_AIC_SVR
 (0xFFFFF080)

1605 
	#AT91C_AIC_FFSR
 (0xFFFFF148)

1606 
	#AT91C_AIC_ICCR
 (0xFFFFF128)

1607 
	#AT91C_AIC_ISR
 (0xFFFFF108)

1608 
	#AT91C_AIC_IMR
 (0xFFFFF110)

1609 
	#AT91C_AIC_IPR
 (0xFFFFF10C)

1610 
	#AT91C_AIC_FFER
 (0xFFFFF140)

1611 
	#AT91C_AIC_IECR
 (0xFFFFF120)

1612 
	#AT91C_AIC_ISCR
 (0xFFFFF12C)

1613 
	#AT91C_AIC_FFDR
 (0xFFFFF144)

1614 
	#AT91C_AIC_CISR
 (0xFFFFF114)

1615 
	#AT91C_AIC_IDCR
 (0xFFFFF124)

1616 
	#AT91C_AIC_SPU
 (0xFFFFF134)

1618 
	#AT91C_DBGU_TCR
 (0xFFFFF30C)

1619 
	#AT91C_DBGU_RNPR
 (0xFFFFF310)

1620 
	#AT91C_DBGU_TNPR
 (0xFFFFF318)

1621 
	#AT91C_DBGU_TPR
 (0xFFFFF308)

1622 
	#AT91C_DBGU_RPR
 (0xFFFFF300)

1623 
	#AT91C_DBGU_RCR
 (0xFFFFF304)

1624 
	#AT91C_DBGU_RNCR
 (0xFFFFF314)

1625 
	#AT91C_DBGU_PTCR
 (0xFFFFF320)

1626 
	#AT91C_DBGU_PTSR
 (0xFFFFF324)

1627 
	#AT91C_DBGU_TNCR
 (0xFFFFF31C)

1629 
	#AT91C_DBGU_EXID
 (0xFFFFF244)

1630 
	#AT91C_DBGU_BRGR
 (0xFFFFF220)

1631 
	#AT91C_DBGU_IDR
 (0xFFFFF20C)

1632 
	#AT91C_DBGU_CSR
 (0xFFFFF214)

1633 
	#AT91C_DBGU_CIDR
 (0xFFFFF240)

1634 
	#AT91C_DBGU_MR
 (0xFFFFF204)

1635 
	#AT91C_DBGU_IMR
 (0xFFFFF210)

1636 
	#AT91C_DBGU_CR
 (0xFFFFF200)

1637 
	#AT91C_DBGU_FNTR
 (0xFFFFF248)

1638 
	#AT91C_DBGU_THR
 (0xFFFFF21C)

1639 
	#AT91C_DBGU_RHR
 (0xFFFFF218)

1640 
	#AT91C_DBGU_IER
 (0xFFFFF208)

1642 
	#AT91C_PIOA_ODR
 (0xFFFFF414)

1643 
	#AT91C_PIOA_SODR
 (0xFFFFF430)

1644 
	#AT91C_PIOA_ISR
 (0xFFFFF44C)

1645 
	#AT91C_PIOA_ABSR
 (0xFFFFF478)

1646 
	#AT91C_PIOA_IER
 (0xFFFFF440)

1647 
	#AT91C_PIOA_PPUDR
 (0xFFFFF460)

1648 
	#AT91C_PIOA_IMR
 (0xFFFFF448)

1649 
	#AT91C_PIOA_PER
 (0xFFFFF400)

1650 
	#AT91C_PIOA_IFDR
 (0xFFFFF424)

1651 
	#AT91C_PIOA_OWDR
 (0xFFFFF4A4)

1652 
	#AT91C_PIOA_MDSR
 (0xFFFFF458)

1653 
	#AT91C_PIOA_IDR
 (0xFFFFF444)

1654 
	#AT91C_PIOA_ODSR
 (0xFFFFF438)

1655 
	#AT91C_PIOA_PPUSR
 (0xFFFFF468)

1656 
	#AT91C_PIOA_OWSR
 (0xFFFFF4A8)

1657 
	#AT91C_PIOA_BSR
 (0xFFFFF474)

1658 
	#AT91C_PIOA_OWER
 (0xFFFFF4A0)

1659 
	#AT91C_PIOA_IFER
 (0xFFFFF420)

1660 
	#AT91C_PIOA_PDSR
 (0xFFFFF43C)

1661 
	#AT91C_PIOA_PPUER
 (0xFFFFF464)

1662 
	#AT91C_PIOA_OSR
 (0xFFFFF418)

1663 
	#AT91C_PIOA_ASR
 (0xFFFFF470)

1664 
	#AT91C_PIOA_MDDR
 (0xFFFFF454)

1665 
	#AT91C_PIOA_CODR
 (0xFFFFF434)

1666 
	#AT91C_PIOA_MDER
 (0xFFFFF450)

1667 
	#AT91C_PIOA_PDR
 (0xFFFFF404)

1668 
	#AT91C_PIOA_IFSR
 (0xFFFFF428)

1669 
	#AT91C_PIOA_OER
 (0xFFFFF410)

1670 
	#AT91C_PIOA_PSR
 (0xFFFFF408)

1672 
	#AT91C_PIOB_OWDR
 (0xFFFFF6A4)

1673 
	#AT91C_PIOB_MDER
 (0xFFFFF650)

1674 
	#AT91C_PIOB_PPUSR
 (0xFFFFF668)

1675 
	#AT91C_PIOB_IMR
 (0xFFFFF648)

1676 
	#AT91C_PIOB_ASR
 (0xFFFFF670)

1677 
	#AT91C_PIOB_PPUDR
 (0xFFFFF660)

1678 
	#AT91C_PIOB_PSR
 (0xFFFFF608)

1679 
	#AT91C_PIOB_IER
 (0xFFFFF640)

1680 
	#AT91C_PIOB_CODR
 (0xFFFFF634)

1681 
	#AT91C_PIOB_OWER
 (0xFFFFF6A0)

1682 
	#AT91C_PIOB_ABSR
 (0xFFFFF678)

1683 
	#AT91C_PIOB_IFDR
 (0xFFFFF624)

1684 
	#AT91C_PIOB_PDSR
 (0xFFFFF63C)

1685 
	#AT91C_PIOB_IDR
 (0xFFFFF644)

1686 
	#AT91C_PIOB_OWSR
 (0xFFFFF6A8)

1687 
	#AT91C_PIOB_PDR
 (0xFFFFF604)

1688 
	#AT91C_PIOB_ODR
 (0xFFFFF614)

1689 
	#AT91C_PIOB_IFSR
 (0xFFFFF628)

1690 
	#AT91C_PIOB_PPUER
 (0xFFFFF664)

1691 
	#AT91C_PIOB_SODR
 (0xFFFFF630)

1692 
	#AT91C_PIOB_ISR
 (0xFFFFF64C)

1693 
	#AT91C_PIOB_ODSR
 (0xFFFFF638)

1694 
	#AT91C_PIOB_OSR
 (0xFFFFF618)

1695 
	#AT91C_PIOB_MDSR
 (0xFFFFF658)

1696 
	#AT91C_PIOB_IFER
 (0xFFFFF620)

1697 
	#AT91C_PIOB_BSR
 (0xFFFFF674)

1698 
	#AT91C_PIOB_MDDR
 (0xFFFFF654)

1699 
	#AT91C_PIOB_OER
 (0xFFFFF610)

1700 
	#AT91C_PIOB_PER
 (0xFFFFF600)

1702 
	#AT91C_CKGR_MOR
 (0xFFFFFC20)

1703 
	#AT91C_CKGR_PLLR
 (0xFFFFFC2C)

1704 
	#AT91C_CKGR_MCFR
 (0xFFFFFC24)

1706 
	#AT91C_PMC_IDR
 (0xFFFFFC64)

1707 
	#AT91C_PMC_MOR
 (0xFFFFFC20)

1708 
	#AT91C_PMC_PLLR
 (0xFFFFFC2C)

1709 
	#AT91C_PMC_PCER
 (0xFFFFFC10)

1710 
	#AT91C_PMC_PCKR
 (0xFFFFFC40)

1711 
	#AT91C_PMC_MCKR
 (0xFFFFFC30)

1712 
	#AT91C_PMC_SCDR
 (0xFFFFFC04)

1713 
	#AT91C_PMC_PCDR
 (0xFFFFFC14)

1714 
	#AT91C_PMC_SCSR
 (0xFFFFFC08)

1715 
	#AT91C_PMC_PCSR
 (0xFFFFFC18)

1716 
	#AT91C_PMC_MCFR
 (0xFFFFFC24)

1717 
	#AT91C_PMC_SCER
 (0xFFFFFC00)

1718 
	#AT91C_PMC_IMR
 (0xFFFFFC6C)

1719 
	#AT91C_PMC_IER
 (0xFFFFFC60)

1720 
	#AT91C_PMC_SR
 (0xFFFFFC68)

1722 
	#AT91C_RSTC_RCR
 (0xFFFFFD00)

1723 
	#AT91C_RSTC_RMR
 (0xFFFFFD08)

1724 
	#AT91C_RSTC_RSR
 (0xFFFFFD04)

1726 
	#AT91C_RTTC_RTSR
 (0xFFFFFD2C)

1727 
	#AT91C_RTTC_RTMR
 (0xFFFFFD20)

1728 
	#AT91C_RTTC_RTVR
 (0xFFFFFD28)

1729 
	#AT91C_RTTC_RTAR
 (0xFFFFFD24)

1731 
	#AT91C_PITC_PIVR
 (0xFFFFFD38)

1732 
	#AT91C_PITC_PISR
 (0xFFFFFD34)

1733 
	#AT91C_PITC_PIIR
 (0xFFFFFD3C)

1734 
	#AT91C_PITC_PIMR
 (0xFFFFFD30)

1736 
	#AT91C_WDTC_WDCR
 (0xFFFFFD40)

1737 
	#AT91C_WDTC_WDSR
 (0xFFFFFD48)

1738 
	#AT91C_WDTC_WDMR
 (0xFFFFFD44)

1740 
	#AT91C_VREG_MR
 (0xFFFFFD60)

1742 
	#AT91C_MC_ASR
 (0xFFFFFF04)

1743 
	#AT91C_MC_RCR
 (0xFFFFFF00)

1744 
	#AT91C_MC_FCR
 (0xFFFFFF64)

1745 
	#AT91C_MC_AASR
 (0xFFFFFF08)

1746 
	#AT91C_MC_FSR
 (0xFFFFFF68)

1747 
	#AT91C_MC_FMR
 (0xFFFFFF60)

1749 
	#AT91C_SPI1_PTCR
 (0xFFFE4120)

1750 
	#AT91C_SPI1_RPR
 (0xFFFE4100)

1751 
	#AT91C_SPI1_TNCR
 (0xFFFE411C)

1752 
	#AT91C_SPI1_TPR
 (0xFFFE4108)

1753 
	#AT91C_SPI1_TNPR
 (0xFFFE4118)

1754 
	#AT91C_SPI1_TCR
 (0xFFFE410C)

1755 
	#AT91C_SPI1_RCR
 (0xFFFE4104)

1756 
	#AT91C_SPI1_RNPR
 (0xFFFE4110)

1757 
	#AT91C_SPI1_RNCR
 (0xFFFE4114)

1758 
	#AT91C_SPI1_PTSR
 (0xFFFE4124)

1760 
	#AT91C_SPI1_IMR
 (0xFFFE401C)

1761 
	#AT91C_SPI1_IER
 (0xFFFE4014)

1762 
	#AT91C_SPI1_MR
 (0xFFFE4004)

1763 
	#AT91C_SPI1_RDR
 (0xFFFE4008)

1764 
	#AT91C_SPI1_IDR
 (0xFFFE4018)

1765 
	#AT91C_SPI1_SR
 (0xFFFE4010)

1766 
	#AT91C_SPI1_TDR
 (0xFFFE400C)

1767 
	#AT91C_SPI1_CR
 (0xFFFE4000)

1768 
	#AT91C_SPI1_CSR
 (0xFFFE4030)

1770 
	#AT91C_SPI0_PTCR
 (0xFFFE0120)

1771 
	#AT91C_SPI0_TPR
 (0xFFFE0108)

1772 
	#AT91C_SPI0_TCR
 (0xFFFE010C)

1773 
	#AT91C_SPI0_RCR
 (0xFFFE0104)

1774 
	#AT91C_SPI0_PTSR
 (0xFFFE0124)

1775 
	#AT91C_SPI0_RNPR
 (0xFFFE0110)

1776 
	#AT91C_SPI0_RPR
 (0xFFFE0100)

1777 
	#AT91C_SPI0_TNCR
 (0xFFFE011C)

1778 
	#AT91C_SPI0_RNCR
 (0xFFFE0114)

1779 
	#AT91C_SPI0_TNPR
 (0xFFFE0118)

1781 
	#AT91C_SPI0_IER
 (0xFFFE0014)

1782 
	#AT91C_SPI0_SR
 (0xFFFE0010)

1783 
	#AT91C_SPI0_IDR
 (0xFFFE0018)

1784 
	#AT91C_SPI0_CR
 (0xFFFE0000)

1785 
	#AT91C_SPI0_MR
 (0xFFFE0004)

1786 
	#AT91C_SPI0_IMR
 (0xFFFE001C)

1787 
	#AT91C_SPI0_TDR
 (0xFFFE000C)

1788 
	#AT91C_SPI0_RDR
 (0xFFFE0008)

1789 
	#AT91C_SPI0_CSR
 (0xFFFE0030)

1791 
	#AT91C_US1_RNCR
 (0xFFFC4114)

1792 
	#AT91C_US1_PTCR
 (0xFFFC4120)

1793 
	#AT91C_US1_TCR
 (0xFFFC410C)

1794 
	#AT91C_US1_PTSR
 (0xFFFC4124)

1795 
	#AT91C_US1_TNPR
 (0xFFFC4118)

1796 
	#AT91C_US1_RCR
 (0xFFFC4104)

1797 
	#AT91C_US1_RNPR
 (0xFFFC4110)

1798 
	#AT91C_US1_RPR
 (0xFFFC4100)

1799 
	#AT91C_US1_TNCR
 (0xFFFC411C)

1800 
	#AT91C_US1_TPR
 (0xFFFC4108)

1802 
	#AT91C_US1_IF
 (0xFFFC404C)

1803 
	#AT91C_US1_NER
 (0xFFFC4044)

1804 
	#AT91C_US1_RTOR
 (0xFFFC4024)

1805 
	#AT91C_US1_CSR
 (0xFFFC4014)

1806 
	#AT91C_US1_IDR
 (0xFFFC400C)

1807 
	#AT91C_US1_IER
 (0xFFFC4008)

1808 
	#AT91C_US1_THR
 (0xFFFC401C)

1809 
	#AT91C_US1_TTGR
 (0xFFFC4028)

1810 
	#AT91C_US1_RHR
 (0xFFFC4018)

1811 
	#AT91C_US1_BRGR
 (0xFFFC4020)

1812 
	#AT91C_US1_IMR
 (0xFFFC4010)

1813 
	#AT91C_US1_FIDI
 (0xFFFC4040)

1814 
	#AT91C_US1_CR
 (0xFFFC4000)

1815 
	#AT91C_US1_MR
 (0xFFFC4004)

1817 
	#AT91C_US0_TNPR
 (0xFFFC0118)

1818 
	#AT91C_US0_RNPR
 (0xFFFC0110)

1819 
	#AT91C_US0_TCR
 (0xFFFC010C)

1820 
	#AT91C_US0_PTCR
 (0xFFFC0120)

1821 
	#AT91C_US0_PTSR
 (0xFFFC0124)

1822 
	#AT91C_US0_TNCR
 (0xFFFC011C)

1823 
	#AT91C_US0_TPR
 (0xFFFC0108)

1824 
	#AT91C_US0_RCR
 (0xFFFC0104)

1825 
	#AT91C_US0_RPR
 (0xFFFC0100)

1826 
	#AT91C_US0_RNCR
 (0xFFFC0114)

1828 
	#AT91C_US0_BRGR
 (0xFFFC0020)

1829 
	#AT91C_US0_NER
 (0xFFFC0044)

1830 
	#AT91C_US0_CR
 (0xFFFC0000)

1831 
	#AT91C_US0_IMR
 (0xFFFC0010)

1832 
	#AT91C_US0_FIDI
 (0xFFFC0040)

1833 
	#AT91C_US0_TTGR
 (0xFFFC0028)

1834 
	#AT91C_US0_MR
 (0xFFFC0004)

1835 
	#AT91C_US0_RTOR
 (0xFFFC0024)

1836 
	#AT91C_US0_CSR
 (0xFFFC0014)

1837 
	#AT91C_US0_RHR
 (0xFFFC0018)

1838 
	#AT91C_US0_IDR
 (0xFFFC000C)

1839 
	#AT91C_US0_THR
 (0xFFFC001C)

1840 
	#AT91C_US0_IF
 (0xFFFC004C)

1841 
	#AT91C_US0_IER
 (0xFFFC0008)

1843 
	#AT91C_SSC_TNCR
 (0xFFFD411C)

1844 
	#AT91C_SSC_RPR
 (0xFFFD4100)

1845 
	#AT91C_SSC_RNCR
 (0xFFFD4114)

1846 
	#AT91C_SSC_TPR
 (0xFFFD4108)

1847 
	#AT91C_SSC_PTCR
 (0xFFFD4120)

1848 
	#AT91C_SSC_TCR
 (0xFFFD410C)

1849 
	#AT91C_SSC_RCR
 (0xFFFD4104)

1850 
	#AT91C_SSC_RNPR
 (0xFFFD4110)

1851 
	#AT91C_SSC_TNPR
 (0xFFFD4118)

1852 
	#AT91C_SSC_PTSR
 (0xFFFD4124)

1854 
	#AT91C_SSC_RHR
 (0xFFFD4020)

1855 
	#AT91C_SSC_RSHR
 (0xFFFD4030)

1856 
	#AT91C_SSC_TFMR
 (0xFFFD401C)

1857 
	#AT91C_SSC_IDR
 (0xFFFD4048)

1858 
	#AT91C_SSC_THR
 (0xFFFD4024)

1859 
	#AT91C_SSC_RCMR
 (0xFFFD4010)

1860 
	#AT91C_SSC_IER
 (0xFFFD4044)

1861 
	#AT91C_SSC_TSHR
 (0xFFFD4034)

1862 
	#AT91C_SSC_SR
 (0xFFFD4040)

1863 
	#AT91C_SSC_CMR
 (0xFFFD4004)

1864 
	#AT91C_SSC_TCMR
 (0xFFFD4018)

1865 
	#AT91C_SSC_CR
 (0xFFFD4000)

1866 
	#AT91C_SSC_IMR
 (0xFFFD404C)

1867 
	#AT91C_SSC_RFMR
 (0xFFFD4014)

1869 
	#AT91C_TWI_IER
 (0xFFFB8024)

1870 
	#AT91C_TWI_CR
 (0xFFFB8000)

1871 
	#AT91C_TWI_SR
 (0xFFFB8020)

1872 
	#AT91C_TWI_IMR
 (0xFFFB802C)

1873 
	#AT91C_TWI_THR
 (0xFFFB8034)

1874 
	#AT91C_TWI_IDR
 (0xFFFB8028)

1875 
	#AT91C_TWI_IADR
 (0xFFFB800C)

1876 
	#AT91C_TWI_MMR
 (0xFFFB8004)

1877 
	#AT91C_TWI_CWGR
 (0xFFFB8010)

1878 
	#AT91C_TWI_RHR
 (0xFFFB8030)

1880 
	#AT91C_PWMC_CH3_CUPDR
 (0xFFFCC270)

1881 
	#AT91C_PWMC_CH3_Re£rved
 (0xFFFCC274)

1882 
	#AT91C_PWMC_CH3_CPRDR
 (0xFFFCC268)

1883 
	#AT91C_PWMC_CH3_CDTYR
 (0xFFFCC264)

1884 
	#AT91C_PWMC_CH3_CCNTR
 (0xFFFCC26C)

1885 
	#AT91C_PWMC_CH3_CMR
 (0xFFFCC260)

1887 
	#AT91C_PWMC_CH2_Re£rved
 (0xFFFCC254)

1888 
	#AT91C_PWMC_CH2_CMR
 (0xFFFCC240)

1889 
	#AT91C_PWMC_CH2_CCNTR
 (0xFFFCC24C)

1890 
	#AT91C_PWMC_CH2_CPRDR
 (0xFFFCC248)

1891 
	#AT91C_PWMC_CH2_CUPDR
 (0xFFFCC250)

1892 
	#AT91C_PWMC_CH2_CDTYR
 (0xFFFCC244)

1894 
	#AT91C_PWMC_CH1_Re£rved
 (0xFFFCC234)

1895 
	#AT91C_PWMC_CH1_CUPDR
 (0xFFFCC230)

1896 
	#AT91C_PWMC_CH1_CPRDR
 (0xFFFCC228)

1897 
	#AT91C_PWMC_CH1_CCNTR
 (0xFFFCC22C)

1898 
	#AT91C_PWMC_CH1_CDTYR
 (0xFFFCC224)

1899 
	#AT91C_PWMC_CH1_CMR
 (0xFFFCC220)

1901 
	#AT91C_PWMC_CH0_Re£rved
 (0xFFFCC214)

1902 
	#AT91C_PWMC_CH0_CPRDR
 (0xFFFCC208)

1903 
	#AT91C_PWMC_CH0_CDTYR
 (0xFFFCC204)

1904 
	#AT91C_PWMC_CH0_CMR
 (0xFFFCC200)

1905 
	#AT91C_PWMC_CH0_CUPDR
 (0xFFFCC210)

1906 
	#AT91C_PWMC_CH0_CCNTR
 (0xFFFCC20C)

1908 
	#AT91C_PWMC_IDR
 (0xFFFCC014)

1909 
	#AT91C_PWMC_DIS
 (0xFFFCC008)

1910 
	#AT91C_PWMC_IER
 (0xFFFCC010)

1911 
	#AT91C_PWMC_VR
 (0xFFFCC0FC)

1912 
	#AT91C_PWMC_ISR
 (0xFFFCC01C)

1913 
	#AT91C_PWMC_SR
 (0xFFFCC00C)

1914 
	#AT91C_PWMC_IMR
 (0xFFFCC018)

1915 
	#AT91C_PWMC_MR
 (0xFFFCC000)

1916 
	#AT91C_PWMC_ENA
 (0xFFFCC004)

1918 
	#AT91C_UDP_IMR
 (0xFFFB0018)

1919 
	#AT91C_UDP_FADDR
 (0xFFFB0008)

1920 
	#AT91C_UDP_NUM
 (0xFFFB0000)

1921 
	#AT91C_UDP_FDR
 (0xFFFB0050)

1922 
	#AT91C_UDP_ISR
 (0xFFFB001C)

1923 
	#AT91C_UDP_CSR
 (0xFFFB0030)

1924 
	#AT91C_UDP_IDR
 (0xFFFB0014)

1925 
	#AT91C_UDP_ICR
 (0xFFFB0020)

1926 
	#AT91C_UDP_RSTEP
 (0xFFFB0028)

1927 
	#AT91C_UDP_TXVC
 (0xFFFB0074)

1928 
	#AT91C_UDP_GLBSTATE
 (0xFFFB0004)

1929 
	#AT91C_UDP_IER
 (0xFFFB0010)

1931 
	#AT91C_TC0_SR
 (0xFFFA0020)

1932 
	#AT91C_TC0_RC
 (0xFFFA001C)

1933 
	#AT91C_TC0_RB
 (0xFFFA0018)

1934 
	#AT91C_TC0_CCR
 (0xFFFA0000)

1935 
	#AT91C_TC0_CMR
 (0xFFFA0004)

1936 
	#AT91C_TC0_IER
 (0xFFFA0024)

1937 
	#AT91C_TC0_RA
 (0xFFFA0014)

1938 
	#AT91C_TC0_IDR
 (0xFFFA0028)

1939 
	#AT91C_TC0_CV
 (0xFFFA0010)

1940 
	#AT91C_TC0_IMR
 (0xFFFA002C)

1942 
	#AT91C_TC1_RB
 (0xFFFA0058)

1943 
	#AT91C_TC1_CCR
 (0xFFFA0040)

1944 
	#AT91C_TC1_IER
 (0xFFFA0064)

1945 
	#AT91C_TC1_IDR
 (0xFFFA0068)

1946 
	#AT91C_TC1_SR
 (0xFFFA0060)

1947 
	#AT91C_TC1_CMR
 (0xFFFA0044)

1948 
	#AT91C_TC1_RA
 (0xFFFA0054)

1949 
	#AT91C_TC1_RC
 (0xFFFA005C)

1950 
	#AT91C_TC1_IMR
 (0xFFFA006C)

1951 
	#AT91C_TC1_CV
 (0xFFFA0050)

1953 
	#AT91C_TC2_CMR
 (0xFFFA0084)

1954 
	#AT91C_TC2_CCR
 (0xFFFA0080)

1955 
	#AT91C_TC2_CV
 (0xFFFA0090)

1956 
	#AT91C_TC2_RA
 (0xFFFA0094)

1957 
	#AT91C_TC2_RB
 (0xFFFA0098)

1958 
	#AT91C_TC2_IDR
 (0xFFFA00A8)

1959 
	#AT91C_TC2_IMR
 (0xFFFA00AC)

1960 
	#AT91C_TC2_RC
 (0xFFFA009C)

1961 
	#AT91C_TC2_IER
 (0xFFFA00A4)

1962 
	#AT91C_TC2_SR
 (0xFFFA00A0)

1964 
	#AT91C_TCB_BMR
 (0xFFFA00C4)

1965 
	#AT91C_TCB_BCR
 (0xFFFA00C0)

1967 
	#AT91C_CAN_MB0_MDL
 (0xFFFD0214)

1968 
	#AT91C_CAN_MB0_MAM
 (0xFFFD0204)

1969 
	#AT91C_CAN_MB0_MCR
 (0xFFFD021C)

1970 
	#AT91C_CAN_MB0_MID
 (0xFFFD0208)

1971 
	#AT91C_CAN_MB0_MSR
 (0xFFFD0210)

1972 
	#AT91C_CAN_MB0_MFID
 (0xFFFD020C)

1973 
	#AT91C_CAN_MB0_MDH
 (0xFFFD0218)

1974 
	#AT91C_CAN_MB0_MMR
 (0xFFFD0200)

1976 
	#AT91C_CAN_MB1_MDL
 (0xFFFD0234)

1977 
	#AT91C_CAN_MB1_MID
 (0xFFFD0228)

1978 
	#AT91C_CAN_MB1_MMR
 (0xFFFD0220)

1979 
	#AT91C_CAN_MB1_MSR
 (0xFFFD0230)

1980 
	#AT91C_CAN_MB1_MAM
 (0xFFFD0224)

1981 
	#AT91C_CAN_MB1_MDH
 (0xFFFD0238)

1982 
	#AT91C_CAN_MB1_MCR
 (0xFFFD023C)

1983 
	#AT91C_CAN_MB1_MFID
 (0xFFFD022C)

1985 
	#AT91C_CAN_MB2_MCR
 (0xFFFD025C)

1986 
	#AT91C_CAN_MB2_MDH
 (0xFFFD0258)

1987 
	#AT91C_CAN_MB2_MID
 (0xFFFD0248)

1988 
	#AT91C_CAN_MB2_MDL
 (0xFFFD0254)

1989 
	#AT91C_CAN_MB2_MMR
 (0xFFFD0240)

1990 
	#AT91C_CAN_MB2_MAM
 (0xFFFD0244)

1991 
	#AT91C_CAN_MB2_MFID
 (0xFFFD024C)

1992 
	#AT91C_CAN_MB2_MSR
 (0xFFFD0250)

1994 
	#AT91C_CAN_MB3_MFID
 (0xFFFD026C)

1995 
	#AT91C_CAN_MB3_MAM
 (0xFFFD0264)

1996 
	#AT91C_CAN_MB3_MID
 (0xFFFD0268)

1997 
	#AT91C_CAN_MB3_MCR
 (0xFFFD027C)

1998 
	#AT91C_CAN_MB3_MMR
 (0xFFFD0260)

1999 
	#AT91C_CAN_MB3_MSR
 (0xFFFD0270)

2000 
	#AT91C_CAN_MB3_MDL
 (0xFFFD0274)

2001 
	#AT91C_CAN_MB3_MDH
 (0xFFFD0278)

2003 
	#AT91C_CAN_MB4_MID
 (0xFFFD0288)

2004 
	#AT91C_CAN_MB4_MMR
 (0xFFFD0280)

2005 
	#AT91C_CAN_MB4_MDH
 (0xFFFD0298)

2006 
	#AT91C_CAN_MB4_MFID
 (0xFFFD028C)

2007 
	#AT91C_CAN_MB4_MSR
 (0xFFFD0290)

2008 
	#AT91C_CAN_MB4_MCR
 (0xFFFD029C)

2009 
	#AT91C_CAN_MB4_MDL
 (0xFFFD0294)

2010 
	#AT91C_CAN_MB4_MAM
 (0xFFFD0284)

2012 
	#AT91C_CAN_MB5_MSR
 (0xFFFD02B0)

2013 
	#AT91C_CAN_MB5_MCR
 (0xFFFD02BC)

2014 
	#AT91C_CAN_MB5_MFID
 (0xFFFD02AC)

2015 
	#AT91C_CAN_MB5_MDH
 (0xFFFD02B8)

2016 
	#AT91C_CAN_MB5_MID
 (0xFFFD02A8)

2017 
	#AT91C_CAN_MB5_MMR
 (0xFFFD02A0)

2018 
	#AT91C_CAN_MB5_MDL
 (0xFFFD02B4)

2019 
	#AT91C_CAN_MB5_MAM
 (0xFFFD02A4)

2021 
	#AT91C_CAN_MB6_MFID
 (0xFFFD02CC)

2022 
	#AT91C_CAN_MB6_MID
 (0xFFFD02C8)

2023 
	#AT91C_CAN_MB6_MAM
 (0xFFFD02C4)

2024 
	#AT91C_CAN_MB6_MSR
 (0xFFFD02D0)

2025 
	#AT91C_CAN_MB6_MDL
 (0xFFFD02D4)

2026 
	#AT91C_CAN_MB6_MCR
 (0xFFFD02DC)

2027 
	#AT91C_CAN_MB6_MDH
 (0xFFFD02D8)

2028 
	#AT91C_CAN_MB6_MMR
 (0xFFFD02C0)

2030 
	#AT91C_CAN_MB7_MCR
 (0xFFFD02FC)

2031 
	#AT91C_CAN_MB7_MDH
 (0xFFFD02F8)

2032 
	#AT91C_CAN_MB7_MFID
 (0xFFFD02EC)

2033 
	#AT91C_CAN_MB7_MDL
 (0xFFFD02F4)

2034 
	#AT91C_CAN_MB7_MID
 (0xFFFD02E8)

2035 
	#AT91C_CAN_MB7_MMR
 (0xFFFD02E0)

2036 
	#AT91C_CAN_MB7_MAM
 (0xFFFD02E4)

2037 
	#AT91C_CAN_MB7_MSR
 (0xFFFD02F0)

2039 
	#AT91C_CAN_TCR
 (0xFFFD0024)

2040 
	#AT91C_CAN_IMR
 (0xFFFD000C)

2041 
	#AT91C_CAN_IER
 (0xFFFD0004)

2042 
	#AT91C_CAN_ECR
 (0xFFFD0020)

2043 
	#AT91C_CAN_TIMESTP
 (0xFFFD001C)

2044 
	#AT91C_CAN_MR
 (0xFFFD0000)

2045 
	#AT91C_CAN_IDR
 (0xFFFD0008)

2046 
	#AT91C_CAN_ACR
 (0xFFFD0028)

2047 
	#AT91C_CAN_TIM
 (0xFFFD0018)

2048 
	#AT91C_CAN_SR
 (0xFFFD0010)

2049 
	#AT91C_CAN_BR
 (0xFFFD0014)

2050 
	#AT91C_CAN_VR
 (0xFFFD00FC)

2052 
	#AT91C_EMAC_ISR
 (0xFFFDC024)

2053 
	#AT91C_EMAC_SA4H
 (0xFFFDC0B4)

2054 
	#AT91C_EMAC_SA1L
 (0xFFFDC098)

2055 
	#AT91C_EMAC_ELE
 (0xFFFDC078)

2056 
	#AT91C_EMAC_LCOL
 (0xFFFDC05C)

2057 
	#AT91C_EMAC_RLE
 (0xFFFDC088)

2058 
	#AT91C_EMAC_WOL
 (0xFFFDC0C4)

2059 
	#AT91C_EMAC_DTF
 (0xFFFDC058)

2060 
	#AT91C_EMAC_TUND
 (0xFFFDC064)

2061 
	#AT91C_EMAC_NCR
 (0xFFFDC000)

2062 
	#AT91C_EMAC_SA4L
 (0xFFFDC0B0)

2063 
	#AT91C_EMAC_RSR
 (0xFFFDC020)

2064 
	#AT91C_EMAC_SA3L
 (0xFFFDC0A8)

2065 
	#AT91C_EMAC_TSR
 (0xFFFDC014)

2066 
	#AT91C_EMAC_IDR
 (0xFFFDC02C)

2067 
	#AT91C_EMAC_RSE
 (0xFFFDC074)

2068 
	#AT91C_EMAC_ECOL
 (0xFFFDC060)

2069 
	#AT91C_EMAC_TID
 (0xFFFDC0B8)

2070 
	#AT91C_EMAC_HRB
 (0xFFFDC090)

2071 
	#AT91C_EMAC_TBQP
 (0xFFFDC01C)

2072 
	#AT91C_EMAC_USRIO
 (0xFFFDC0C0)

2073 
	#AT91C_EMAC_PTR
 (0xFFFDC038)

2074 
	#AT91C_EMAC_SA2H
 (0xFFFDC0A4)

2075 
	#AT91C_EMAC_ROV
 (0xFFFDC070)

2076 
	#AT91C_EMAC_ALE
 (0xFFFDC054)

2077 
	#AT91C_EMAC_RJA
 (0xFFFDC07C)

2078 
	#AT91C_EMAC_RBQP
 (0xFFFDC018)

2079 
	#AT91C_EMAC_TPF
 (0xFFFDC08C)

2080 
	#AT91C_EMAC_NCFGR
 (0xFFFDC004)

2081 
	#AT91C_EMAC_HRT
 (0xFFFDC094)

2082 
	#AT91C_EMAC_USF
 (0xFFFDC080)

2083 
	#AT91C_EMAC_FCSE
 (0xFFFDC050)

2084 
	#AT91C_EMAC_TPQ
 (0xFFFDC0BC)

2085 
	#AT91C_EMAC_MAN
 (0xFFFDC034)

2086 
	#AT91C_EMAC_FTO
 (0xFFFDC040)

2087 
	#AT91C_EMAC_REV
 (0xFFFDC0FC)

2088 
	#AT91C_EMAC_IMR
 (0xFFFDC030)

2089 
	#AT91C_EMAC_SCF
 (0xFFFDC044)

2090 
	#AT91C_EMAC_PFR
 (0xFFFDC03C)

2091 
	#AT91C_EMAC_MCF
 (0xFFFDC048)

2092 
	#AT91C_EMAC_NSR
 (0xFFFDC008)

2093 
	#AT91C_EMAC_SA2L
 (0xFFFDC0A0)

2094 
	#AT91C_EMAC_FRO
 (0xFFFDC04C)

2095 
	#AT91C_EMAC_IER
 (0xFFFDC028)

2096 
	#AT91C_EMAC_SA1H
 (0xFFFDC09C)

2097 
	#AT91C_EMAC_CSE
 (0xFFFDC068)

2098 
	#AT91C_EMAC_SA3H
 (0xFFFDC0AC)

2099 
	#AT91C_EMAC_RRE
 (0xFFFDC06C)

2100 
	#AT91C_EMAC_STE
 (0xFFFDC084)

2102 
	#AT91C_ADC_PTSR
 (0xFFFD8124)

2103 
	#AT91C_ADC_PTCR
 (0xFFFD8120)

2104 
	#AT91C_ADC_TNPR
 (0xFFFD8118)

2105 
	#AT91C_ADC_TNCR
 (0xFFFD811C)

2106 
	#AT91C_ADC_RNPR
 (0xFFFD8110)

2107 
	#AT91C_ADC_RNCR
 (0xFFFD8114)

2108 
	#AT91C_ADC_RPR
 (0xFFFD8100)

2109 
	#AT91C_ADC_TCR
 (0xFFFD810C)

2110 
	#AT91C_ADC_TPR
 (0xFFFD8108)

2111 
	#AT91C_ADC_RCR
 (0xFFFD8104)

2113 
	#AT91C_ADC_CDR2
 (0xFFFD8038)

2114 
	#AT91C_ADC_CDR3
 (0xFFFD803C)

2115 
	#AT91C_ADC_CDR0
 (0xFFFD8030)

2116 
	#AT91C_ADC_CDR5
 (0xFFFD8044)

2117 
	#AT91C_ADC_CHDR
 (0xFFFD8014)

2118 
	#AT91C_ADC_SR
 (0xFFFD801C)

2119 
	#AT91C_ADC_CDR4
 (0xFFFD8040)

2120 
	#AT91C_ADC_CDR1
 (0xFFFD8034)

2121 
	#AT91C_ADC_LCDR
 (0xFFFD8020)

2122 
	#AT91C_ADC_IDR
 (0xFFFD8028)

2123 
	#AT91C_ADC_CR
 (0xFFFD8000)

2124 
	#AT91C_ADC_CDR7
 (0xFFFD804C)

2125 
	#AT91C_ADC_CDR6
 (0xFFFD8048)

2126 
	#AT91C_ADC_IER
 (0xFFFD8024)

2127 
	#AT91C_ADC_CHER
 (0xFFFD8010)

2128 
	#AT91C_ADC_CHSR
 (0xFFFD8018)

2129 
	#AT91C_ADC_MR
 (0xFFFD8004)

2130 
	#AT91C_ADC_IMR
 (0xFFFD802C)

2132 
	#AT91C_AES_TPR
 (0xFFFA4108)

2133 
	#AT91C_AES_PTCR
 (0xFFFA4120)

2134 
	#AT91C_AES_RNPR
 (0xFFFA4110)

2135 
	#AT91C_AES_TNCR
 (0xFFFA411C)

2136 
	#AT91C_AES_TCR
 (0xFFFA410C)

2137 
	#AT91C_AES_RCR
 (0xFFFA4104)

2138 
	#AT91C_AES_RNCR
 (0xFFFA4114)

2139 
	#AT91C_AES_TNPR
 (0xFFFA4118)

2140 
	#AT91C_AES_RPR
 (0xFFFA4100)

2141 
	#AT91C_AES_PTSR
 (0xFFFA4124)

2143 
	#AT91C_AES_IVxR
 (0xFFFA4060)

2144 
	#AT91C_AES_MR
 (0xFFFA4004)

2145 
	#AT91C_AES_VR
 (0xFFFA40FC)

2146 
	#AT91C_AES_ODATAxR
 (0xFFFA4050)

2147 
	#AT91C_AES_IDATAxR
 (0xFFFA4040)

2148 
	#AT91C_AES_CR
 (0xFFFA4000)

2149 
	#AT91C_AES_IDR
 (0xFFFA4014)

2150 
	#AT91C_AES_IMR
 (0xFFFA4018)

2151 
	#AT91C_AES_IER
 (0xFFFA4010)

2152 
	#AT91C_AES_KEYWxR
 (0xFFFA4020)

2153 
	#AT91C_AES_ISR
 (0xFFFA401C)

2155 
	#AT91C_TDES_RNCR
 (0xFFFA8114)

2156 
	#AT91C_TDES_TCR
 (0xFFFA810C)

2157 
	#AT91C_TDES_RCR
 (0xFFFA8104)

2158 
	#AT91C_TDES_TNPR
 (0xFFFA8118)

2159 
	#AT91C_TDES_RNPR
 (0xFFFA8110)

2160 
	#AT91C_TDES_RPR
 (0xFFFA8100)

2161 
	#AT91C_TDES_TNCR
 (0xFFFA811C)

2162 
	#AT91C_TDES_TPR
 (0xFFFA8108)

2163 
	#AT91C_TDES_PTSR
 (0xFFFA8124)

2164 
	#AT91C_TDES_PTCR
 (0xFFFA8120)

2166 
	#AT91C_TDES_KEY2WxR
 (0xFFFA8028)

2167 
	#AT91C_TDES_KEY3WxR
 (0xFFFA8030)

2168 
	#AT91C_TDES_IDR
 (0xFFFA8014)

2169 
	#AT91C_TDES_VR
 (0xFFFA80FC)

2170 
	#AT91C_TDES_IVxR
 (0xFFFA8060)

2171 
	#AT91C_TDES_ODATAxR
 (0xFFFA8050)

2172 
	#AT91C_TDES_IMR
 (0xFFFA8018)

2173 
	#AT91C_TDES_MR
 (0xFFFA8004)

2174 
	#AT91C_TDES_CR
 (0xFFFA8000)

2175 
	#AT91C_TDES_IER
 (0xFFFA8010)

2176 
	#AT91C_TDES_ISR
 (0xFFFA801C)

2177 
	#AT91C_TDES_IDATAxR
 (0xFFFA8040)

2178 
	#AT91C_TDES_KEY1WxR
 (0xFFFA8020)

2179 

	)

2183 
	#AT91C_PIO_PA0
 (1 << 0)

2184 
	#AT91C_PA0_RXD0
 (
AT91C_PIO_PA0
)

2185 
	#AT91C_PIO_PA1
 (1 << 1)

2186 
	#AT91C_PA1_TXD0
 (
AT91C_PIO_PA1
)

2187 
	#AT91C_PIO_PA10
 (1 << 10)

2188 
	#AT91C_PA10_TWD
 (
AT91C_PIO_PA10
)

2189 
	#AT91C_PIO_PA11
 (1 << 11)

2190 
	#AT91C_PA11_TWCK
 (
AT91C_PIO_PA11
)

2191 
	#AT91C_PIO_PA12
 (1 << 12)

2192 
	#AT91C_PA12_NPCS00
 (
AT91C_PIO_PA12
)

2193 
	#AT91C_PIO_PA13
 (1 << 13)

2194 
	#AT91C_PA13_NPCS01
 (
AT91C_PIO_PA13
)

2195 
	#AT91C_PA13_PCK1
 (
AT91C_PIO_PA13
)

2196 
	#AT91C_PIO_PA14
 (1 << 14)

2197 
	#AT91C_PA14_NPCS02
 (
AT91C_PIO_PA14
)

2198 
	#AT91C_PA14_IRQ1
 (
AT91C_PIO_PA14
)

2199 
	#AT91C_PIO_PA15
 (1 << 15)

2200 
	#AT91C_PA15_NPCS03
 (
AT91C_PIO_PA15
)

2201 
	#AT91C_PA15_TCLK2
 (
AT91C_PIO_PA15
)

2202 
	#AT91C_PIO_PA16
 (1 << 16)

2203 
	#AT91C_PA16_MISO0
 (
AT91C_PIO_PA16
)

2204 
	#AT91C_PIO_PA17
 (1 << 17)

2205 
	#AT91C_PA17_MOSI0
 (
AT91C_PIO_PA17
)

2206 
	#AT91C_PIO_PA18
 (1 << 18)

2207 
	#AT91C_PA18_SPCK0
 (
AT91C_PIO_PA18
)

2208 
	#AT91C_PIO_PA19
 (1 << 19)

2209 
	#AT91C_PA19_CANRX
 (
AT91C_PIO_PA19
)

2210 
	#AT91C_PIO_PA2
 (1 << 2)

2211 
	#AT91C_PA2_SCK0
 (
AT91C_PIO_PA2
)

2212 
	#AT91C_PA2_NPCS11
 (
AT91C_PIO_PA2
)

2213 
	#AT91C_PIO_PA20
 (1 << 20)

2214 
	#AT91C_PA20_CANTX
 (
AT91C_PIO_PA20
)

2215 
	#AT91C_PIO_PA21
 (1 << 21)

2216 
	#AT91C_PA21_TF
 (
AT91C_PIO_PA21
)

2217 
	#AT91C_PA21_NPCS10
 (
AT91C_PIO_PA21
)

2218 
	#AT91C_PIO_PA22
 (1 << 22)

2219 
	#AT91C_PA22_TK
 (
AT91C_PIO_PA22
)

2220 
	#AT91C_PA22_SPCK1
 (
AT91C_PIO_PA22
)

2221 
	#AT91C_PIO_PA23
 (1 << 23)

2222 
	#AT91C_PA23_TD
 (
AT91C_PIO_PA23
)

2223 
	#AT91C_PA23_MOSI1
 (
AT91C_PIO_PA23
)

2224 
	#AT91C_PIO_PA24
 (1 << 24)

2225 
	#AT91C_PA24_RD
 (
AT91C_PIO_PA24
)

2226 
	#AT91C_PA24_MISO1
 (
AT91C_PIO_PA24
)

2227 
	#AT91C_PIO_PA25
 (1 << 25)

2228 
	#AT91C_PA25_RK
 (
AT91C_PIO_PA25
)

2229 
	#AT91C_PA25_NPCS11
 (
AT91C_PIO_PA25
)

2230 
	#AT91C_PIO_PA26
 (1 << 26)

2231 
	#AT91C_PA26_RF
 (
AT91C_PIO_PA26
)

2232 
	#AT91C_PA26_NPCS12
 (
AT91C_PIO_PA26
)

2233 
	#AT91C_PIO_PA27
 (1 << 27)

2234 
	#AT91C_PA27_DRXD
 (
AT91C_PIO_PA27
)

2235 
	#AT91C_PA27_PCK3
 (
AT91C_PIO_PA27
)

2236 
	#AT91C_PIO_PA28
 (1 << 28)

2237 
	#AT91C_PA28_DTXD
 (
AT91C_PIO_PA28
)

2238 
	#AT91C_PIO_PA29
 (1 << 29)

2239 
	#AT91C_PA29_FIQ
 (
AT91C_PIO_PA29
)

2240 
	#AT91C_PA29_NPCS13
 (
AT91C_PIO_PA29
)

2241 
	#AT91C_PIO_PA3
 (1 << 3)

2242 
	#AT91C_PA3_RTS0
 (
AT91C_PIO_PA3
)

2243 
	#AT91C_PA3_NPCS12
 (
AT91C_PIO_PA3
)

2244 
	#AT91C_PIO_PA30
 (1 << 30)

2245 
	#AT91C_PA30_IRQ0
 (
AT91C_PIO_PA30
)

2246 
	#AT91C_PA30_PCK2
 (
AT91C_PIO_PA30
)

2247 
	#AT91C_PIO_PA4
 (1 << 4)

2248 
	#AT91C_PA4_CTS0
 (
AT91C_PIO_PA4
)

2249 
	#AT91C_PA4_NPCS13
 (
AT91C_PIO_PA4
)

2250 
	#AT91C_PIO_PA5
 (1 << 5)

2251 
	#AT91C_PA5_RXD1
 (
AT91C_PIO_PA5
)

2252 
	#AT91C_PIO_PA6
 (1 << 6)

2253 
	#AT91C_PA6_TXD1
 (
AT91C_PIO_PA6
)

2254 
	#AT91C_PIO_PA7
 (1 << 7)

2255 
	#AT91C_PA7_SCK1
 (
AT91C_PIO_PA7
)

2256 
	#AT91C_PA7_NPCS01
 (
AT91C_PIO_PA7
)

2257 
	#AT91C_PIO_PA8
 (1 << 8)

2258 
	#AT91C_PA8_RTS1
 (
AT91C_PIO_PA8
)

2259 
	#AT91C_PA8_NPCS02
 (
AT91C_PIO_PA8
)

2260 
	#AT91C_PIO_PA9
 (1 << 9)

2261 
	#AT91C_PA9_CTS1
 (
AT91C_PIO_PA9
)

2262 
	#AT91C_PA9_NPCS03
 (
AT91C_PIO_PA9
)

2263 
	#AT91C_PIO_PB0
 (1 << 0)

2264 
	#AT91C_PB0_ETXCK_EREFCK
 (
AT91C_PIO_PB0
)

2265 
	#AT91C_PB0_PCK0
 (
AT91C_PIO_PB0
)

2266 
	#AT91C_PIO_PB1
 (1 << 1)

2267 
	#AT91C_PB1_ETXEN
 (
AT91C_PIO_PB1
)

2268 
	#AT91C_PIO_PB10
 (1 << 10)

2269 
	#AT91C_PB10_ETX2
 (
AT91C_PIO_PB10
)

2270 
	#AT91C_PB10_NPCS11
 (
AT91C_PIO_PB10
)

2271 
	#AT91C_PIO_PB11
 (1 << 11)

2272 
	#AT91C_PB11_ETX3
 (
AT91C_PIO_PB11
)

2273 
	#AT91C_PB11_NPCS12
 (
AT91C_PIO_PB11
)

2274 
	#AT91C_PIO_PB12
 (1 << 12)

2275 
	#AT91C_PB12_ETXER
 (
AT91C_PIO_PB12
)

2276 
	#AT91C_PB12_TCLK0
 (
AT91C_PIO_PB12
)

2277 
	#AT91C_PIO_PB13
 (1 << 13)

2278 
	#AT91C_PB13_ERX2
 (
AT91C_PIO_PB13
)

2279 
	#AT91C_PB13_NPCS01
 (
AT91C_PIO_PB13
)

2280 
	#AT91C_PIO_PB14
 (1 << 14)

2281 
	#AT91C_PB14_ERX3
 (
AT91C_PIO_PB14
)

2282 
	#AT91C_PB14_NPCS02
 (
AT91C_PIO_PB14
)

2283 
	#AT91C_PIO_PB15
 (1 << 15)

2284 
	#AT91C_PB15_ERXDV
 (
AT91C_PIO_PB15
)

2285 
	#AT91C_PIO_PB16
 (1 << 16)

2286 
	#AT91C_PB16_ECOL
 (
AT91C_PIO_PB16
)

2287 
	#AT91C_PB16_NPCS13
 (
AT91C_PIO_PB16
)

2288 
	#AT91C_PIO_PB17
 (1 << 17)

2289 
	#AT91C_PB17_ERXCK
 (
AT91C_PIO_PB17
)

2290 
	#AT91C_PB17_NPCS03
 (
AT91C_PIO_PB17
)

2291 
	#AT91C_PIO_PB18
 (1 << 18)

2292 
	#AT91C_PB18_EF100
 (
AT91C_PIO_PB18
)

2293 
	#AT91C_PB18_ADTRG
 (
AT91C_PIO_PB18
)

2294 
	#AT91C_PIO_PB19
 (1 << 19)

2295 
	#AT91C_PB19_PWM0
 (
AT91C_PIO_PB19
)

2296 
	#AT91C_PB19_TCLK1
 (
AT91C_PIO_PB19
)

2297 
	#AT91C_PIO_PB2
 (1 << 2)

2298 
	#AT91C_PB2_ETX0
 (
AT91C_PIO_PB2
)

2299 
	#AT91C_PIO_PB20
 (1 << 20)

2300 
	#AT91C_PB20_PWM1
 (
AT91C_PIO_PB20
)

2301 
	#AT91C_PB20_PCK0
 (
AT91C_PIO_PB20
)

2302 
	#AT91C_PIO_PB21
 (1 << 21)

2303 
	#AT91C_PB21_PWM2
 (
AT91C_PIO_PB21
)

2304 
	#AT91C_PB21_PCK1
 (
AT91C_PIO_PB21
)

2305 
	#AT91C_PIO_PB22
 (1 << 22)

2306 
	#AT91C_PB22_PWM3
 (
AT91C_PIO_PB22
)

2307 
	#AT91C_PB22_PCK2
 (
AT91C_PIO_PB22
)

2308 
	#AT91C_PIO_PB23
 (1 << 23)

2309 
	#AT91C_PB23_TIOA0
 (
AT91C_PIO_PB23
)

2310 
	#AT91C_PB23_DCD1
 (
AT91C_PIO_PB23
)

2311 
	#AT91C_PIO_PB24
 (1 << 24)

2312 
	#AT91C_PB24_TIOB0
 (
AT91C_PIO_PB24
)

2313 
	#AT91C_PB24_DSR1
 (
AT91C_PIO_PB24
)

2314 
	#AT91C_PIO_PB25
 (1 << 25)

2315 
	#AT91C_PB25_TIOA1
 (
AT91C_PIO_PB25
)

2316 
	#AT91C_PB25_DTR1
 (
AT91C_PIO_PB25
)

2317 
	#AT91C_PIO_PB26
 (1 << 26)

2318 
	#AT91C_PB26_TIOB1
 (
AT91C_PIO_PB26
)

2319 
	#AT91C_PB26_RI1
 (
AT91C_PIO_PB26
)

2320 
	#AT91C_PIO_PB27
 (1 << 27)

2321 
	#AT91C_PB27_TIOA2
 (
AT91C_PIO_PB27
)

2322 
	#AT91C_PB27_PWM0
 (
AT91C_PIO_PB27
)

2323 
	#AT91C_PIO_PB28
 (1 << 28)

2324 
	#AT91C_PB28_TIOB2
 (
AT91C_PIO_PB28
)

2325 
	#AT91C_PB28_PWM1
 (
AT91C_PIO_PB28
)

2326 
	#AT91C_PIO_PB29
 (1 << 29)

2327 
	#AT91C_PB29_PCK1
 (
AT91C_PIO_PB29
)

2328 
	#AT91C_PB29_PWM2
 (
AT91C_PIO_PB29
)

2329 
	#AT91C_PIO_PB3
 (1 << 3)

2330 
	#AT91C_PB3_ETX1
 (
AT91C_PIO_PB3
)

2331 
	#AT91C_PIO_PB30
 (1 << 30)

2332 
	#AT91C_PB30_PCK2
 (
AT91C_PIO_PB30
)

2333 
	#AT91C_PB30_PWM3
 (
AT91C_PIO_PB30
)

2334 
	#AT91C_PIO_PB4
 (1 << 4)

2335 
	#AT91C_PB4_ECRS_ECRSDV
 (
AT91C_PIO_PB4
)

2336 
	#AT91C_PIO_PB5
 (1 << 5)

2337 
	#AT91C_PB5_ERX0
 (
AT91C_PIO_PB5
)

2338 
	#AT91C_PIO_PB6
 (1 << 6)

2339 
	#AT91C_PB6_ERX1
 (
AT91C_PIO_PB6
)

2340 
	#AT91C_PIO_PB7
 (1 << 7)

2341 
	#AT91C_PB7_ERXER
 (
AT91C_PIO_PB7
)

2342 
	#AT91C_PIO_PB8
 (1 << 8)

2343 
	#AT91C_PB8_EMDC
 (
AT91C_PIO_PB8
)

2344 
	#AT91C_PIO_PB9
 (1 << 9)

2345 
	#AT91C_PB9_EMDIO
 (
AT91C_PIO_PB9
)

2346 

	)

2350 
	#AT91C_ID_FIQ
 ( 0)

2351 
	#AT91C_ID_SYS
 ( 1)

2352 
	#AT91C_ID_PIOA
 ( 2)

2353 
	#AT91C_ID_PIOB
 ( 3)

2354 
	#AT91C_ID_SPI0
 ( 4)

2355 
	#AT91C_ID_SPI1
 ( 5)

2356 
	#AT91C_ID_US0
 ( 6)

2357 
	#AT91C_ID_US1
 ( 7)

2358 
	#AT91C_ID_SSC
 ( 8)

2359 
	#AT91C_ID_TWI
 ( 9)

2360 
	#AT91C_ID_PWMC
 (10)

2361 
	#AT91C_ID_UDP
 (11)

2362 
	#AT91C_ID_TC0
 (12)

2363 
	#AT91C_ID_TC1
 (13)

2364 
	#AT91C_ID_TC2
 (14)

2365 
	#AT91C_ID_CAN
 (15)

2366 
	#AT91C_ID_EMAC
 (16)

2367 
	#AT91C_ID_ADC
 (17)

2368 
	#AT91C_ID_AES
 (18)

2369 
	#AT91C_ID_TDES
 (19)

2370 
	#AT91C_ID_20_Re£rved
 (20)

2371 
	#AT91C_ID_21_Re£rved
 (21)

2372 
	#AT91C_ID_22_Re£rved
 (22)

2373 
	#AT91C_ID_23_Re£rved
 (23)

2374 
	#AT91C_ID_24_Re£rved
 (24)

2375 
	#AT91C_ID_25_Re£rved
 (25)

2376 
	#AT91C_ID_26_Re£rved
 (26)

2377 
	#AT91C_ID_27_Re£rved
 (27)

2378 
	#AT91C_ID_28_Re£rved
 (28)

2379 
	#AT91C_ID_29_Re£rved
 (29)

2380 
	#AT91C_ID_IRQ0
 (30)

2381 
	#AT91C_ID_IRQ1
 (31)

2382 

	)

2386 
	#AT91C_BASE_SYS
 (0xFFFFF000)

2387 
	#AT91C_BASE_AIC
 (0xFFFFF000)

2388 
	#AT91C_BASE_PDC_DBGU
 (0xFFFFF300)

2389 
	#AT91C_BASE_DBGU
 (0xFFFFF200)

2390 
	#AT91C_BASE_PIOA
 (0xFFFFF400)

2391 
	#AT91C_BASE_PIOB
 (0xFFFFF600)

2392 
	#AT91C_BASE_CKGR
 (0xFFFFFC20)

2393 
	#AT91C_BASE_PMC
 (0xFFFFFC00)

2394 
	#AT91C_BASE_RSTC
 (0xFFFFFD00)

2395 
	#AT91C_BASE_RTTC
 (0xFFFFFD20)

2396 
	#AT91C_BASE_PITC
 (0xFFFFFD30)

2397 
	#AT91C_BASE_WDTC
 (0xFFFFFD40)

2398 
	#AT91C_BASE_VREG
 (0xFFFFFD60)

2399 
	#AT91C_BASE_MC
 (0xFFFFFF00)

2400 
	#AT91C_BASE_PDC_SPI1
 (0xFFFE4100)

2401 
	#AT91C_BASE_SPI1
 (0xFFFE4000)

2402 
	#AT91C_BASE_PDC_SPI0
 (0xFFFE0100)

2403 
	#AT91C_BASE_SPI0
 (0xFFFE0000)

2404 
	#AT91C_BASE_PDC_US1
 (0xFFFC4100)

2405 
	#AT91C_BASE_US1
 (0xFFFC4000)

2406 
	#AT91C_BASE_PDC_US0
 (0xFFFC0100)

2407 
	#AT91C_BASE_US0
 (0xFFFC0000)

2408 
	#AT91C_BASE_PDC_SSC
 (0xFFFD4100)

2409 
	#AT91C_BASE_SSC
 (0xFFFD4000)

2410 
	#AT91C_BASE_TWI
 (0xFFFB8000)

2411 
	#AT91C_BASE_PWMC_CH3
 (0xFFFCC260)

2412 
	#AT91C_BASE_PWMC_CH2
 (0xFFFCC240)

2413 
	#AT91C_BASE_PWMC_CH1
 (0xFFFCC220)

2414 
	#AT91C_BASE_PWMC_CH0
 (0xFFFCC200)

2415 
	#AT91C_BASE_PWMC
 (0xFFFCC000)

2416 
	#AT91C_BASE_UDP
 (0xFFFB0000)

2417 
	#AT91C_BASE_TC0
 (0xFFFA0000)

2418 
	#AT91C_BASE_TC1
 (0xFFFA0040)

2419 
	#AT91C_BASE_TC2
 (0xFFFA0080)

2420 
	#AT91C_BASE_TCB
 (0xFFFA0000)

2421 
	#AT91C_BASE_CAN_MB0
 (0xFFFD0200)

2422 
	#AT91C_BASE_CAN_MB1
 (0xFFFD0220)

2423 
	#AT91C_BASE_CAN_MB2
 (0xFFFD0240)

2424 
	#AT91C_BASE_CAN_MB3
 (0xFFFD0260)

2425 
	#AT91C_BASE_CAN_MB4
 (0xFFFD0280)

2426 
	#AT91C_BASE_CAN_MB5
 (0xFFFD02A0)

2427 
	#AT91C_BASE_CAN_MB6
 (0xFFFD02C0)

2428 
	#AT91C_BASE_CAN_MB7
 (0xFFFD02E0)

2429 
	#AT91C_BASE_CAN
 (0xFFFD0000)

2430 
	#AT91C_BASE_EMAC
 (0xFFFDC000)

2431 
	#AT91C_BASE_PDC_ADC
 (0xFFFD8100)

2432 
	#AT91C_BASE_ADC
 (0xFFFD8000)

2433 
	#AT91C_BASE_PDC_AES
 (0xFFFA4100)

2434 
	#AT91C_BASE_AES
 (0xFFFA4000)

2435 
	#AT91C_BASE_PDC_TDES
 (0xFFFA8100)

2436 
	#AT91C_BASE_TDES
 (0xFFFA8000)

2437 

	)

2441 
	#AT91C_ISRAM
 (0x00200000)

2442 
	#AT91C_ISRAM_SIZE
 (0x00008000)

2443 
	#AT91C_IFLASH
 (0x00100000)

2444 
	#AT91C_IFLASH_SIZE
 (0x00020000)

2445 

	)

	@portable/IAR/AtmelSAM7S64/AT91SAM7X256.h

46 #i‚de‡
AT91SAM7X256_H


47 
	#AT91SAM7X256_H


	)

49 vﬁ©ûê
	tAT91_REG
;

54 
	s_AT91S_SYS
 {

55 
AT91_REG
 
	mAIC_SMR
[32];

56 
AT91_REG
 
	mAIC_SVR
[32];

57 
AT91_REG
 
	mAIC_IVR
;

58 
AT91_REG
 
	mAIC_FVR
;

59 
AT91_REG
 
	mAIC_ISR
;

60 
AT91_REG
 
	mAIC_IPR
;

61 
AT91_REG
 
	mAIC_IMR
;

62 
AT91_REG
 
	mAIC_CISR
;

63 
AT91_REG
 
	mRe£rved0
[2];

64 
AT91_REG
 
	mAIC_IECR
;

65 
AT91_REG
 
	mAIC_IDCR
;

66 
AT91_REG
 
	mAIC_ICCR
;

67 
AT91_REG
 
	mAIC_ISCR
;

68 
AT91_REG
 
	mAIC_EOICR
;

69 
AT91_REG
 
	mAIC_SPU
;

70 
AT91_REG
 
	mAIC_DCR
;

71 
AT91_REG
 
	mRe£rved1
[1];

72 
AT91_REG
 
	mAIC_FFER
;

73 
AT91_REG
 
	mAIC_FFDR
;

74 
AT91_REG
 
	mAIC_FFSR
;

75 
AT91_REG
 
	mRe£rved2
[45];

76 
AT91_REG
 
	mDBGU_CR
;

77 
AT91_REG
 
	mDBGU_MR
;

78 
AT91_REG
 
	mDBGU_IER
;

79 
AT91_REG
 
	mDBGU_IDR
;

80 
AT91_REG
 
	mDBGU_IMR
;

81 
AT91_REG
 
	mDBGU_CSR
;

82 
AT91_REG
 
	mDBGU_RHR
;

83 
AT91_REG
 
	mDBGU_THR
;

84 
AT91_REG
 
	mDBGU_BRGR
;

85 
AT91_REG
 
	mRe£rved3
[7];

86 
AT91_REG
 
	mDBGU_CIDR
;

87 
AT91_REG
 
	mDBGU_EXID
;

88 
AT91_REG
 
	mDBGU_FNTR
;

89 
AT91_REG
 
	mRe£rved4
[45];

90 
AT91_REG
 
	mDBGU_RPR
;

91 
AT91_REG
 
	mDBGU_RCR
;

92 
AT91_REG
 
	mDBGU_TPR
;

93 
AT91_REG
 
	mDBGU_TCR
;

94 
AT91_REG
 
	mDBGU_RNPR
;

95 
AT91_REG
 
	mDBGU_RNCR
;

96 
AT91_REG
 
	mDBGU_TNPR
;

97 
AT91_REG
 
	mDBGU_TNCR
;

98 
AT91_REG
 
	mDBGU_PTCR
;

99 
AT91_REG
 
	mDBGU_PTSR
;

100 
AT91_REG
 
	mRe£rved5
[54];

101 
AT91_REG
 
	mPIOA_PER
;

102 
AT91_REG
 
	mPIOA_PDR
;

103 
AT91_REG
 
	mPIOA_PSR
;

104 
AT91_REG
 
	mRe£rved6
[1];

105 
AT91_REG
 
	mPIOA_OER
;

106 
AT91_REG
 
	mPIOA_ODR
;

107 
AT91_REG
 
	mPIOA_OSR
;

108 
AT91_REG
 
	mRe£rved7
[1];

109 
AT91_REG
 
	mPIOA_IFER
;

110 
AT91_REG
 
	mPIOA_IFDR
;

111 
AT91_REG
 
	mPIOA_IFSR
;

112 
AT91_REG
 
	mRe£rved8
[1];

113 
AT91_REG
 
	mPIOA_SODR
;

114 
AT91_REG
 
	mPIOA_CODR
;

115 
AT91_REG
 
	mPIOA_ODSR
;

116 
AT91_REG
 
	mPIOA_PDSR
;

117 
AT91_REG
 
	mPIOA_IER
;

118 
AT91_REG
 
	mPIOA_IDR
;

119 
AT91_REG
 
	mPIOA_IMR
;

120 
AT91_REG
 
	mPIOA_ISR
;

121 
AT91_REG
 
	mPIOA_MDER
;

122 
AT91_REG
 
	mPIOA_MDDR
;

123 
AT91_REG
 
	mPIOA_MDSR
;

124 
AT91_REG
 
	mRe£rved9
[1];

125 
AT91_REG
 
	mPIOA_PPUDR
;

126 
AT91_REG
 
	mPIOA_PPUER
;

127 
AT91_REG
 
	mPIOA_PPUSR
;

128 
AT91_REG
 
	mRe£rved10
[1];

129 
AT91_REG
 
	mPIOA_ASR
;

130 
AT91_REG
 
	mPIOA_BSR
;

131 
AT91_REG
 
	mPIOA_ABSR
;

132 
AT91_REG
 
	mRe£rved11
[9];

133 
AT91_REG
 
	mPIOA_OWER
;

134 
AT91_REG
 
	mPIOA_OWDR
;

135 
AT91_REG
 
	mPIOA_OWSR
;

136 
AT91_REG
 
	mRe£rved12
[85];

137 
AT91_REG
 
	mPIOB_PER
;

138 
AT91_REG
 
	mPIOB_PDR
;

139 
AT91_REG
 
	mPIOB_PSR
;

140 
AT91_REG
 
	mRe£rved13
[1];

141 
AT91_REG
 
	mPIOB_OER
;

142 
AT91_REG
 
	mPIOB_ODR
;

143 
AT91_REG
 
	mPIOB_OSR
;

144 
AT91_REG
 
	mRe£rved14
[1];

145 
AT91_REG
 
	mPIOB_IFER
;

146 
AT91_REG
 
	mPIOB_IFDR
;

147 
AT91_REG
 
	mPIOB_IFSR
;

148 
AT91_REG
 
	mRe£rved15
[1];

149 
AT91_REG
 
	mPIOB_SODR
;

150 
AT91_REG
 
	mPIOB_CODR
;

151 
AT91_REG
 
	mPIOB_ODSR
;

152 
AT91_REG
 
	mPIOB_PDSR
;

153 
AT91_REG
 
	mPIOB_IER
;

154 
AT91_REG
 
	mPIOB_IDR
;

155 
AT91_REG
 
	mPIOB_IMR
;

156 
AT91_REG
 
	mPIOB_ISR
;

157 
AT91_REG
 
	mPIOB_MDER
;

158 
AT91_REG
 
	mPIOB_MDDR
;

159 
AT91_REG
 
	mPIOB_MDSR
;

160 
AT91_REG
 
	mRe£rved16
[1];

161 
AT91_REG
 
	mPIOB_PPUDR
;

162 
AT91_REG
 
	mPIOB_PPUER
;

163 
AT91_REG
 
	mPIOB_PPUSR
;

164 
AT91_REG
 
	mRe£rved17
[1];

165 
AT91_REG
 
	mPIOB_ASR
;

166 
AT91_REG
 
	mPIOB_BSR
;

167 
AT91_REG
 
	mPIOB_ABSR
;

168 
AT91_REG
 
	mRe£rved18
[9];

169 
AT91_REG
 
	mPIOB_OWER
;

170 
AT91_REG
 
	mPIOB_OWDR
;

171 
AT91_REG
 
	mPIOB_OWSR
;

172 
AT91_REG
 
	mRe£rved19
[341];

173 
AT91_REG
 
	mPMC_SCER
;

174 
AT91_REG
 
	mPMC_SCDR
;

175 
AT91_REG
 
	mPMC_SCSR
;

176 
AT91_REG
 
	mRe£rved20
[1];

177 
AT91_REG
 
	mPMC_PCER
;

178 
AT91_REG
 
	mPMC_PCDR
;

179 
AT91_REG
 
	mPMC_PCSR
;

180 
AT91_REG
 
	mRe£rved21
[1];

181 
AT91_REG
 
	mPMC_MOR
;

182 
AT91_REG
 
	mPMC_MCFR
;

183 
AT91_REG
 
	mRe£rved22
[1];

184 
AT91_REG
 
	mPMC_PLLR
;

185 
AT91_REG
 
	mPMC_MCKR
;

186 
AT91_REG
 
	mRe£rved23
[3];

187 
AT91_REG
 
	mPMC_PCKR
[4];

188 
AT91_REG
 
	mRe£rved24
[4];

189 
AT91_REG
 
	mPMC_IER
;

190 
AT91_REG
 
	mPMC_IDR
;

191 
AT91_REG
 
	mPMC_SR
;

192 
AT91_REG
 
	mPMC_IMR
;

193 
AT91_REG
 
	mRe£rved25
[36];

194 
AT91_REG
 
	mRSTC_RCR
;

195 
AT91_REG
 
	mRSTC_RSR
;

196 
AT91_REG
 
	mRSTC_RMR
;

197 
AT91_REG
 
	mRe£rved26
[5];

198 
AT91_REG
 
	mRTTC_RTMR
;

199 
AT91_REG
 
	mRTTC_RTAR
;

200 
AT91_REG
 
	mRTTC_RTVR
;

201 
AT91_REG
 
	mRTTC_RTSR
;

202 
AT91_REG
 
	mPITC_PIMR
;

203 
AT91_REG
 
	mPITC_PISR
;

204 
AT91_REG
 
	mPITC_PIVR
;

205 
AT91_REG
 
	mPITC_PIIR
;

206 
AT91_REG
 
	mWDTC_WDCR
;

207 
AT91_REG
 
	mWDTC_WDMR
;

208 
AT91_REG
 
	mWDTC_WDSR
;

209 
AT91_REG
 
	mRe£rved27
[5];

210 
AT91_REG
 
	mVREG_MR
;

211 } 
	tAT91S_SYS
, *
	tAT91PS_SYS
;

217 
	s_AT91S_AIC
 {

218 
AT91_REG
 
	mAIC_SMR
[32];

219 
AT91_REG
 
	mAIC_SVR
[32];

220 
AT91_REG
 
	mAIC_IVR
;

221 
AT91_REG
 
	mAIC_FVR
;

222 
AT91_REG
 
	mAIC_ISR
;

223 
AT91_REG
 
	mAIC_IPR
;

224 
AT91_REG
 
	mAIC_IMR
;

225 
AT91_REG
 
	mAIC_CISR
;

226 
AT91_REG
 
	mRe£rved0
[2];

227 
AT91_REG
 
	mAIC_IECR
;

228 
AT91_REG
 
	mAIC_IDCR
;

229 
AT91_REG
 
	mAIC_ICCR
;

230 
AT91_REG
 
	mAIC_ISCR
;

231 
AT91_REG
 
	mAIC_EOICR
;

232 
AT91_REG
 
	mAIC_SPU
;

233 
AT91_REG
 
	mAIC_DCR
;

234 
AT91_REG
 
	mRe£rved1
[1];

235 
AT91_REG
 
	mAIC_FFER
;

236 
AT91_REG
 
	mAIC_FFDR
;

237 
AT91_REG
 
	mAIC_FFSR
;

238 } 
	tAT91S_AIC
, *
	tAT91PS_AIC
;

241 
	#AT91C_AIC_PRIOR
 (() 0x7 << 0)

242 
	#AT91C_AIC_PRIOR_LOWEST
 (() 0x0)

243 
	#AT91C_AIC_PRIOR_HIGHEST
 (() 0x7)

244 
	#AT91C_AIC_SRCTYPE
 (() 0x3 << 5)

245 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (() 0x0 << 5)

246 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (() 0x0 << 5)

247 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (() 0x1 << 5)

248 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (() 0x1 << 5)

249 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (() 0x2 << 5)

250 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (() 0x3 << 5)

252 
	#AT91C_AIC_NFIQ
 (() 0x1 << 0)

253 
	#AT91C_AIC_NIRQ
 (() 0x1 << 1)

255 
	#AT91C_AIC_DCR_PROT
 (() 0x1 << 0)

256 
	#AT91C_AIC_DCR_GMSK
 (() 0x1 << 1)

257 

	)

261 
	s_AT91S_PDC
 {

262 
AT91_REG
 
	mPDC_RPR
;

263 
AT91_REG
 
	mPDC_RCR
;

264 
AT91_REG
 
	mPDC_TPR
;

265 
AT91_REG
 
	mPDC_TCR
;

266 
AT91_REG
 
	mPDC_RNPR
;

267 
AT91_REG
 
	mPDC_RNCR
;

268 
AT91_REG
 
	mPDC_TNPR
;

269 
AT91_REG
 
	mPDC_TNCR
;

270 
AT91_REG
 
	mPDC_PTCR
;

271 
AT91_REG
 
	mPDC_PTSR
;

272 } 
	tAT91S_PDC
, *
	tAT91PS_PDC
;

275 
	#AT91C_PDC_RXTEN
 (() 0x1 << 0)

276 
	#AT91C_PDC_RXTDIS
 (() 0x1 << 1)

277 
	#AT91C_PDC_TXTEN
 (() 0x1 << 8)

278 
	#AT91C_PDC_TXTDIS
 (() 0x1 << 9)

280 

	)

284 
	s_AT91S_DBGU
 {

285 
AT91_REG
 
	mDBGU_CR
;

286 
AT91_REG
 
	mDBGU_MR
;

287 
AT91_REG
 
	mDBGU_IER
;

288 
AT91_REG
 
	mDBGU_IDR
;

289 
AT91_REG
 
	mDBGU_IMR
;

290 
AT91_REG
 
	mDBGU_CSR
;

291 
AT91_REG
 
	mDBGU_RHR
;

292 
AT91_REG
 
	mDBGU_THR
;

293 
AT91_REG
 
	mDBGU_BRGR
;

294 
AT91_REG
 
	mRe£rved0
[7];

295 
AT91_REG
 
	mDBGU_CIDR
;

296 
AT91_REG
 
	mDBGU_EXID
;

297 
AT91_REG
 
	mDBGU_FNTR
;

298 
AT91_REG
 
	mRe£rved1
[45];

299 
AT91_REG
 
	mDBGU_RPR
;

300 
AT91_REG
 
	mDBGU_RCR
;

301 
AT91_REG
 
	mDBGU_TPR
;

302 
AT91_REG
 
	mDBGU_TCR
;

303 
AT91_REG
 
	mDBGU_RNPR
;

304 
AT91_REG
 
	mDBGU_RNCR
;

305 
AT91_REG
 
	mDBGU_TNPR
;

306 
AT91_REG
 
	mDBGU_TNCR
;

307 
AT91_REG
 
	mDBGU_PTCR
;

308 
AT91_REG
 
	mDBGU_PTSR
;

309 } 
	tAT91S_DBGU
, *
	tAT91PS_DBGU
;

312 
	#AT91C_US_RSTRX
 (() 0x1 << 2)

313 
	#AT91C_US_RSTTX
 (() 0x1 << 3)

314 
	#AT91C_US_RXEN
 (() 0x1 << 4)

315 
	#AT91C_US_RXDIS
 (() 0x1 << 5)

316 
	#AT91C_US_TXEN
 (() 0x1 << 6)

317 
	#AT91C_US_TXDIS
 (() 0x1 << 7)

318 
	#AT91C_US_RSTSTA
 (() 0x1 << 8)

320 
	#AT91C_US_PAR
 (() 0x7 << 9)

321 
	#AT91C_US_PAR_EVEN
 (() 0x0 << 9)

322 
	#AT91C_US_PAR_ODD
 (() 0x1 << 9)

323 
	#AT91C_US_PAR_SPACE
 (() 0x2 << 9)

324 
	#AT91C_US_PAR_MARK
 (() 0x3 << 9)

325 
	#AT91C_US_PAR_NONE
 (() 0x4 << 9)

326 
	#AT91C_US_PAR_MULTI_DROP
 (() 0x6 << 9)

327 
	#AT91C_US_CHMODE
 (() 0x3 << 14)

328 
	#AT91C_US_CHMODE_NORMAL
 (() 0x0 << 14)

329 
	#AT91C_US_CHMODE_AUTO
 (() 0x1 << 14)

330 
	#AT91C_US_CHMODE_LOCAL
 (() 0x2 << 14)

331 
	#AT91C_US_CHMODE_REMOTE
 (() 0x3 << 14)

333 
	#AT91C_US_RXRDY
 (() 0x1 << 0)

334 
	#AT91C_US_TXRDY
 (() 0x1 << 1)

335 
	#AT91C_US_ENDRX
 (() 0x1 << 3)

336 
	#AT91C_US_ENDTX
 (() 0x1 << 4)

337 
	#AT91C_US_OVRE
 (() 0x1 << 5)

338 
	#AT91C_US_FRAME
 (() 0x1 << 6)

339 
	#AT91C_US_PARE
 (() 0x1 << 7)

340 
	#AT91C_US_TXEMPTY
 (() 0x1 << 9)

341 
	#AT91C_US_TXBUFE
 (() 0x1 << 11)

342 
	#AT91C_US_RXBUFF
 (() 0x1 << 12)

343 
	#AT91C_US_COMM_TX
 (() 0x1 << 30)

344 
	#AT91C_US_COMM_RX
 (() 0x1 << 31)

349 
	#AT91C_US_FORCE_NTRST
 (() 0x1 << 0)

350 

	)

354 
	s_AT91S_PIO
 {

355 
AT91_REG
 
	mPIO_PER
;

356 
AT91_REG
 
	mPIO_PDR
;

357 
AT91_REG
 
	mPIO_PSR
;

358 
AT91_REG
 
	mRe£rved0
[1];

359 
AT91_REG
 
	mPIO_OER
;

360 
AT91_REG
 
	mPIO_ODR
;

361 
AT91_REG
 
	mPIO_OSR
;

362 
AT91_REG
 
	mRe£rved1
[1];

363 
AT91_REG
 
	mPIO_IFER
;

364 
AT91_REG
 
	mPIO_IFDR
;

365 
AT91_REG
 
	mPIO_IFSR
;

366 
AT91_REG
 
	mRe£rved2
[1];

367 
AT91_REG
 
	mPIO_SODR
;

368 
AT91_REG
 
	mPIO_CODR
;

369 
AT91_REG
 
	mPIO_ODSR
;

370 
AT91_REG
 
	mPIO_PDSR
;

371 
AT91_REG
 
	mPIO_IER
;

372 
AT91_REG
 
	mPIO_IDR
;

373 
AT91_REG
 
	mPIO_IMR
;

374 
AT91_REG
 
	mPIO_ISR
;

375 
AT91_REG
 
	mPIO_MDER
;

376 
AT91_REG
 
	mPIO_MDDR
;

377 
AT91_REG
 
	mPIO_MDSR
;

378 
AT91_REG
 
	mRe£rved3
[1];

379 
AT91_REG
 
	mPIO_PPUDR
;

380 
AT91_REG
 
	mPIO_PPUER
;

381 
AT91_REG
 
	mPIO_PPUSR
;

382 
AT91_REG
 
	mRe£rved4
[1];

383 
AT91_REG
 
	mPIO_ASR
;

384 
AT91_REG
 
	mPIO_BSR
;

385 
AT91_REG
 
	mPIO_ABSR
;

386 
AT91_REG
 
	mRe£rved5
[9];

387 
AT91_REG
 
	mPIO_OWER
;

388 
AT91_REG
 
	mPIO_OWDR
;

389 
AT91_REG
 
	mPIO_OWSR
;

390 } 
	tAT91S_PIO
, *
	tAT91PS_PIO
;

396 
	s_AT91S_CKGR
 {

397 
AT91_REG
 
	mCKGR_MOR
;

398 
AT91_REG
 
	mCKGR_MCFR
;

399 
AT91_REG
 
	mRe£rved0
[1];

400 
AT91_REG
 
	mCKGR_PLLR
;

401 } 
	tAT91S_CKGR
, *
	tAT91PS_CKGR
;

404 
	#AT91C_CKGR_MOSCEN
 (() 0x1 << 0)

405 
	#AT91C_CKGR_OSCBYPASS
 (() 0x1 << 1)

406 
	#AT91C_CKGR_OSCOUNT
 (() 0xFF << 8)

408 
	#AT91C_CKGR_MAINF
 (() 0xFFFF << 0)

409 
	#AT91C_CKGR_MAINRDY
 (() 0x1 << 16)

411 
	#AT91C_CKGR_DIV
 (() 0xFF << 0)

412 
	#AT91C_CKGR_DIV_0
 (() 0x0)

413 
	#AT91C_CKGR_DIV_BYPASS
 (() 0x1)

414 
	#AT91C_CKGR_PLLCOUNT
 (() 0x3F << 8)

415 
	#AT91C_CKGR_OUT
 (() 0x3 << 14)

416 
	#AT91C_CKGR_OUT_0
 (() 0x0 << 14)

417 
	#AT91C_CKGR_OUT_1
 (() 0x1 << 14)

418 
	#AT91C_CKGR_OUT_2
 (() 0x2 << 14)

419 
	#AT91C_CKGR_OUT_3
 (() 0x3 << 14)

420 
	#AT91C_CKGR_MUL
 (() 0x7FF << 16)

421 
	#AT91C_CKGR_USBDIV
 (() 0x3 << 28)

422 
	#AT91C_CKGR_USBDIV_0
 (() 0x0 << 28)

423 
	#AT91C_CKGR_USBDIV_1
 (() 0x1 << 28)

424 
	#AT91C_CKGR_USBDIV_2
 (() 0x2 << 28)

425 

	)

429 
	s_AT91S_PMC
 {

430 
AT91_REG
 
	mPMC_SCER
;

431 
AT91_REG
 
	mPMC_SCDR
;

432 
AT91_REG
 
	mPMC_SCSR
;

433 
AT91_REG
 
	mRe£rved0
[1];

434 
AT91_REG
 
	mPMC_PCER
;

435 
AT91_REG
 
	mPMC_PCDR
;

436 
AT91_REG
 
	mPMC_PCSR
;

437 
AT91_REG
 
	mRe£rved1
[1];

438 
AT91_REG
 
	mPMC_MOR
;

439 
AT91_REG
 
	mPMC_MCFR
;

440 
AT91_REG
 
	mRe£rved2
[1];

441 
AT91_REG
 
	mPMC_PLLR
;

442 
AT91_REG
 
	mPMC_MCKR
;

443 
AT91_REG
 
	mRe£rved3
[3];

444 
AT91_REG
 
	mPMC_PCKR
[4];

445 
AT91_REG
 
	mRe£rved4
[4];

446 
AT91_REG
 
	mPMC_IER
;

447 
AT91_REG
 
	mPMC_IDR
;

448 
AT91_REG
 
	mPMC_SR
;

449 
AT91_REG
 
	mPMC_IMR
;

450 } 
	tAT91S_PMC
, *
	tAT91PS_PMC
;

453 
	#AT91C_PMC_PCK
 (() 0x1 << 0)

454 
	#AT91C_PMC_UDP
 (() 0x1 << 7)

455 
	#AT91C_PMC_PCK0
 (() 0x1 << 8)

456 
	#AT91C_PMC_PCK1
 (() 0x1 << 9)

457 
	#AT91C_PMC_PCK2
 (() 0x1 << 10)

458 
	#AT91C_PMC_PCK3
 (() 0x1 << 11)

465 
	#AT91C_PMC_CSS
 (() 0x3 << 0)

466 
	#AT91C_PMC_CSS_SLOW_CLK
 (() 0x0)

467 
	#AT91C_PMC_CSS_MAIN_CLK
 (() 0x1)

468 
	#AT91C_PMC_CSS_PLL_CLK
 (() 0x3)

469 
	#AT91C_PMC_PRES
 (() 0x7 << 2)

470 
	#AT91C_PMC_PRES_CLK
 (() 0x0 << 2)

471 
	#AT91C_PMC_PRES_CLK_2
 (() 0x1 << 2)

472 
	#AT91C_PMC_PRES_CLK_4
 (() 0x2 << 2)

473 
	#AT91C_PMC_PRES_CLK_8
 (() 0x3 << 2)

474 
	#AT91C_PMC_PRES_CLK_16
 (() 0x4 << 2)

475 
	#AT91C_PMC_PRES_CLK_32
 (() 0x5 << 2)

476 
	#AT91C_PMC_PRES_CLK_64
 (() 0x6 << 2)

479 
	#AT91C_PMC_MOSCS
 (() 0x1 << 0)

480 
	#AT91C_PMC_LOCK
 (() 0x1 << 2)

481 
	#AT91C_PMC_MCKRDY
 (() 0x1 << 3)

482 
	#AT91C_PMC_PCK0RDY
 (() 0x1 << 8)

483 
	#AT91C_PMC_PCK1RDY
 (() 0x1 << 9)

484 
	#AT91C_PMC_PCK2RDY
 (() 0x1 << 10)

485 
	#AT91C_PMC_PCK3RDY
 (() 0x1 << 11)

489 

	)

493 
	s_AT91S_RSTC
 {

494 
AT91_REG
 
	mRSTC_RCR
;

495 
AT91_REG
 
	mRSTC_RSR
;

496 
AT91_REG
 
	mRSTC_RMR
;

497 } 
	tAT91S_RSTC
, *
	tAT91PS_RSTC
;

500 
	#AT91C_RSTC_PROCRST
 (() 0x1 << 0)

501 
	#AT91C_RSTC_PERRST
 (() 0x1 << 2)

502 
	#AT91C_RSTC_EXTRST
 (() 0x1 << 3)

503 
	#AT91C_RSTC_KEY
 (() 0xFF << 24)

505 
	#AT91C_RSTC_URSTS
 (() 0x1 << 0)

506 
	#AT91C_RSTC_BODSTS
 (() 0x1 << 1)

507 
	#AT91C_RSTC_RSTTYP
 (() 0x7 << 8)

508 
	#AT91C_RSTC_RSTTYP_POWERUP
 (() 0x0 << 8)

509 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (() 0x1 << 8)

510 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (() 0x2 << 8)

511 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (() 0x3 << 8)

512 
	#AT91C_RSTC_RSTTYP_USER
 (() 0x4 << 8)

513 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (() 0x5 << 8)

514 
	#AT91C_RSTC_NRSTL
 (() 0x1 << 16)

515 
	#AT91C_RSTC_SRCMP
 (() 0x1 << 17)

517 
	#AT91C_RSTC_URSTEN
 (() 0x1 << 0)

518 
	#AT91C_RSTC_URSTIEN
 (() 0x1 << 4)

519 
	#AT91C_RSTC_ERSTL
 (() 0xF << 8)

520 
	#AT91C_RSTC_BODIEN
 (() 0x1 << 16)

521 

	)

525 
	s_AT91S_RTTC
 {

526 
AT91_REG
 
	mRTTC_RTMR
;

527 
AT91_REG
 
	mRTTC_RTAR
;

528 
AT91_REG
 
	mRTTC_RTVR
;

529 
AT91_REG
 
	mRTTC_RTSR
;

530 } 
	tAT91S_RTTC
, *
	tAT91PS_RTTC
;

533 
	#AT91C_RTTC_RTPRES
 (() 0xFFFF << 0)

534 
	#AT91C_RTTC_ALMIEN
 (() 0x1 << 16)

535 
	#AT91C_RTTC_RTTINCIEN
 (() 0x1 << 17)

536 
	#AT91C_RTTC_RTTRST
 (() 0x1 << 18)

538 
	#AT91C_RTTC_ALMV
 (() 0x0 << 0)

540 
	#AT91C_RTTC_CRTV
 (() 0x0 << 0)

542 
	#AT91C_RTTC_ALMS
 (() 0x1 << 0)

543 
	#AT91C_RTTC_RTTINC
 (() 0x1 << 1)

544 

	)

548 
	s_AT91S_PITC
 {

549 
AT91_REG
 
	mPITC_PIMR
;

550 
AT91_REG
 
	mPITC_PISR
;

551 
AT91_REG
 
	mPITC_PIVR
;

552 
AT91_REG
 
	mPITC_PIIR
;

553 } 
	tAT91S_PITC
, *
	tAT91PS_PITC
;

556 
	#AT91C_PITC_PIV
 (() 0xFFFFF << 0)

557 
	#AT91C_PITC_PITEN
 (() 0x1 << 24)

558 
	#AT91C_PITC_PITIEN
 (() 0x1 << 25)

560 
	#AT91C_PITC_PITS
 (() 0x1 << 0)

562 
	#AT91C_PITC_CPIV
 (() 0xFFFFF << 0)

563 
	#AT91C_PITC_PICNT
 (() 0xFFF << 20)

565 

	)

569 
	s_AT91S_WDTC
 {

570 
AT91_REG
 
	mWDTC_WDCR
;

571 
AT91_REG
 
	mWDTC_WDMR
;

572 
AT91_REG
 
	mWDTC_WDSR
;

573 } 
	tAT91S_WDTC
, *
	tAT91PS_WDTC
;

576 
	#AT91C_WDTC_WDRSTT
 (() 0x1 << 0)

577 
	#AT91C_WDTC_KEY
 (() 0xFF << 24)

579 
	#AT91C_WDTC_WDV
 (() 0xFFF << 0)

580 
	#AT91C_WDTC_WDFIEN
 (() 0x1 << 12)

581 
	#AT91C_WDTC_WDRSTEN
 (() 0x1 << 13)

582 
	#AT91C_WDTC_WDRPROC
 (() 0x1 << 14)

583 
	#AT91C_WDTC_WDDIS
 (() 0x1 << 15)

584 
	#AT91C_WDTC_WDD
 (() 0xFFF << 16)

585 
	#AT91C_WDTC_WDDBGHLT
 (() 0x1 << 28)

586 
	#AT91C_WDTC_WDIDLEHLT
 (() 0x1 << 29)

588 
	#AT91C_WDTC_WDUNF
 (() 0x1 << 0)

589 
	#AT91C_WDTC_WDERR
 (() 0x1 << 1)

590 

	)

594 
	s_AT91S_VREG
 {

595 
AT91_REG
 
	mVREG_MR
;

596 } 
	tAT91S_VREG
, *
	tAT91PS_VREG
;

599 
	#AT91C_VREG_PSTDBY
 (() 0x1 << 0)

600 

	)

604 
	s_AT91S_MC
 {

605 
AT91_REG
 
	mMC_RCR
;

606 
AT91_REG
 
	mMC_ASR
;

607 
AT91_REG
 
	mMC_AASR
;

608 
AT91_REG
 
	mRe£rved0
[21];

609 
AT91_REG
 
	mMC_FMR
;

610 
AT91_REG
 
	mMC_FCR
;

611 
AT91_REG
 
	mMC_FSR
;

612 } 
	tAT91S_MC
, *
	tAT91PS_MC
;

615 
	#AT91C_MC_RCB
 (() 0x1 << 0)

617 
	#AT91C_MC_UNDADD
 (() 0x1 << 0)

618 
	#AT91C_MC_MISADD
 (() 0x1 << 1)

619 
	#AT91C_MC_ABTSZ
 (() 0x3 << 8)

620 
	#AT91C_MC_ABTSZ_BYTE
 (() 0x0 << 8)

621 
	#AT91C_MC_ABTSZ_HWORD
 (() 0x1 << 8)

622 
	#AT91C_MC_ABTSZ_WORD
 (() 0x2 << 8)

623 
	#AT91C_MC_ABTTYP
 (() 0x3 << 10)

624 
	#AT91C_MC_ABTTYP_DATAR
 (() 0x0 << 10)

625 
	#AT91C_MC_ABTTYP_DATAW
 (() 0x1 << 10)

626 
	#AT91C_MC_ABTTYP_FETCH
 (() 0x2 << 10)

627 
	#AT91C_MC_MST0
 (() 0x1 << 16)

628 
	#AT91C_MC_MST1
 (() 0x1 << 17)

629 
	#AT91C_MC_SVMST0
 (() 0x1 << 24)

630 
	#AT91C_MC_SVMST1
 (() 0x1 << 25)

632 
	#AT91C_MC_FRDY
 (() 0x1 << 0)

633 
	#AT91C_MC_LOCKE
 (() 0x1 << 2)

634 
	#AT91C_MC_PROGE
 (() 0x1 << 3)

635 
	#AT91C_MC_NEBP
 (() 0x1 << 7)

636 
	#AT91C_MC_FWS
 (() 0x3 << 8)

637 
	#AT91C_MC_FWS_0FWS
 (() 0x0 << 8)

638 
	#AT91C_MC_FWS_1FWS
 (() 0x1 << 8)

639 
	#AT91C_MC_FWS_2FWS
 (() 0x2 << 8)

640 
	#AT91C_MC_FWS_3FWS
 (() 0x3 << 8)

641 
	#AT91C_MC_FMCN
 (() 0xFF << 16)

643 
	#AT91C_MC_FCMD
 (() 0xF << 0)

644 
	#AT91C_MC_FCMD_START_PROG
 (() 0x1)

645 
	#AT91C_MC_FCMD_LOCK
 (() 0x2)

646 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (() 0x3)

647 
	#AT91C_MC_FCMD_UNLOCK
 (() 0x4)

648 
	#AT91C_MC_FCMD_ERASE_ALL
 (() 0x8)

649 
	#AT91C_MC_FCMD_SET_GP_NVM
 (() 0xB)

650 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (() 0xD)

651 
	#AT91C_MC_FCMD_SET_SECURITY
 (() 0xF)

652 
	#AT91C_MC_PAGEN
 (() 0x3FF << 8)

653 
	#AT91C_MC_KEY
 (() 0xFF << 24)

655 
	#AT91C_MC_SECURITY
 (() 0x1 << 4)

656 
	#AT91C_MC_GPNVM0
 (() 0x1 << 8)

657 
	#AT91C_MC_GPNVM1
 (() 0x1 << 9)

658 
	#AT91C_MC_GPNVM2
 (() 0x1 << 10)

659 
	#AT91C_MC_GPNVM3
 (() 0x1 << 11)

660 
	#AT91C_MC_GPNVM4
 (() 0x1 << 12)

661 
	#AT91C_MC_GPNVM5
 (() 0x1 << 13)

662 
	#AT91C_MC_GPNVM6
 (() 0x1 << 14)

663 
	#AT91C_MC_GPNVM7
 (() 0x1 << 15)

664 
	#AT91C_MC_LOCKS0
 (() 0x1 << 16)

665 
	#AT91C_MC_LOCKS1
 (() 0x1 << 17)

666 
	#AT91C_MC_LOCKS2
 (() 0x1 << 18)

667 
	#AT91C_MC_LOCKS3
 (() 0x1 << 19)

668 
	#AT91C_MC_LOCKS4
 (() 0x1 << 20)

669 
	#AT91C_MC_LOCKS5
 (() 0x1 << 21)

670 
	#AT91C_MC_LOCKS6
 (() 0x1 << 22)

671 
	#AT91C_MC_LOCKS7
 (() 0x1 << 23)

672 
	#AT91C_MC_LOCKS8
 (() 0x1 << 24)

673 
	#AT91C_MC_LOCKS9
 (() 0x1 << 25)

674 
	#AT91C_MC_LOCKS10
 (() 0x1 << 26)

675 
	#AT91C_MC_LOCKS11
 (() 0x1 << 27)

676 
	#AT91C_MC_LOCKS12
 (() 0x1 << 28)

677 
	#AT91C_MC_LOCKS13
 (() 0x1 << 29)

678 
	#AT91C_MC_LOCKS14
 (() 0x1 << 30)

679 
	#AT91C_MC_LOCKS15
 (() 0x1 << 31)

680 

	)

684 
	s_AT91S_SPI
 {

685 
AT91_REG
 
	mSPI_CR
;

686 
AT91_REG
 
	mSPI_MR
;

687 
AT91_REG
 
	mSPI_RDR
;

688 
AT91_REG
 
	mSPI_TDR
;

689 
AT91_REG
 
	mSPI_SR
;

690 
AT91_REG
 
	mSPI_IER
;

691 
AT91_REG
 
	mSPI_IDR
;

692 
AT91_REG
 
	mSPI_IMR
;

693 
AT91_REG
 
	mRe£rved0
[4];

694 
AT91_REG
 
	mSPI_CSR
[4];

695 
AT91_REG
 
	mRe£rved1
[48];

696 
AT91_REG
 
	mSPI_RPR
;

697 
AT91_REG
 
	mSPI_RCR
;

698 
AT91_REG
 
	mSPI_TPR
;

699 
AT91_REG
 
	mSPI_TCR
;

700 
AT91_REG
 
	mSPI_RNPR
;

701 
AT91_REG
 
	mSPI_RNCR
;

702 
AT91_REG
 
	mSPI_TNPR
;

703 
AT91_REG
 
	mSPI_TNCR
;

704 
AT91_REG
 
	mSPI_PTCR
;

705 
AT91_REG
 
	mSPI_PTSR
;

706 } 
	tAT91S_SPI
, *
	tAT91PS_SPI
;

709 
	#AT91C_SPI_SPIEN
 (() 0x1 << 0)

710 
	#AT91C_SPI_SPIDIS
 (() 0x1 << 1)

711 
	#AT91C_SPI_SWRST
 (() 0x1 << 7)

712 
	#AT91C_SPI_LASTXFER
 (() 0x1 << 24)

714 
	#AT91C_SPI_MSTR
 (() 0x1 << 0)

715 
	#AT91C_SPI_PS
 (() 0x1 << 1)

716 
	#AT91C_SPI_PS_FIXED
 (() 0x0 << 1)

717 
	#AT91C_SPI_PS_VARIABLE
 (() 0x1 << 1)

718 
	#AT91C_SPI_PCSDEC
 (() 0x1 << 2)

719 
	#AT91C_SPI_FDIV
 (() 0x1 << 3)

720 
	#AT91C_SPI_MODFDIS
 (() 0x1 << 4)

721 
	#AT91C_SPI_LLB
 (() 0x1 << 7)

722 
	#AT91C_SPI_PCS
 (() 0xF << 16)

723 
	#AT91C_SPI_DLYBCS
 (() 0xFF << 24)

725 
	#AT91C_SPI_RD
 (() 0xFFFF << 0)

726 
	#AT91C_SPI_RPCS
 (() 0xF << 16)

728 
	#AT91C_SPI_TD
 (() 0xFFFF << 0)

729 
	#AT91C_SPI_TPCS
 (() 0xF << 16)

731 
	#AT91C_SPI_RDRF
 (() 0x1 << 0)

732 
	#AT91C_SPI_TDRE
 (() 0x1 << 1)

733 
	#AT91C_SPI_MODF
 (() 0x1 << 2)

734 
	#AT91C_SPI_OVRES
 (() 0x1 << 3)

735 
	#AT91C_SPI_ENDRX
 (() 0x1 << 4)

736 
	#AT91C_SPI_ENDTX
 (() 0x1 << 5)

737 
	#AT91C_SPI_RXBUFF
 (() 0x1 << 6)

738 
	#AT91C_SPI_TXBUFE
 (() 0x1 << 7)

739 
	#AT91C_SPI_NSSR
 (() 0x1 << 8)

740 
	#AT91C_SPI_TXEMPTY
 (() 0x1 << 9)

741 
	#AT91C_SPI_SPIENS
 (() 0x1 << 16)

746 
	#AT91C_SPI_CPOL
 (() 0x1 << 0)

747 
	#AT91C_SPI_NCPHA
 (() 0x1 << 1)

748 
	#AT91C_SPI_CSAAT
 (() 0x1 << 3)

749 
	#AT91C_SPI_BITS
 (() 0xF << 4)

750 
	#AT91C_SPI_BITS_8
 (() 0x0 << 4)

751 
	#AT91C_SPI_BITS_9
 (() 0x1 << 4)

752 
	#AT91C_SPI_BITS_10
 (() 0x2 << 4)

753 
	#AT91C_SPI_BITS_11
 (() 0x3 << 4)

754 
	#AT91C_SPI_BITS_12
 (() 0x4 << 4)

755 
	#AT91C_SPI_BITS_13
 (() 0x5 << 4)

756 
	#AT91C_SPI_BITS_14
 (() 0x6 << 4)

757 
	#AT91C_SPI_BITS_15
 (() 0x7 << 4)

758 
	#AT91C_SPI_BITS_16
 (() 0x8 << 4)

759 
	#AT91C_SPI_SCBR
 (() 0xFF << 8)

760 
	#AT91C_SPI_DLYBS
 (() 0xFF << 16)

761 
	#AT91C_SPI_DLYBCT
 (() 0xFF << 24)

762 

	)

766 
	s_AT91S_USART
 {

767 
AT91_REG
 
	mUS_CR
;

768 
AT91_REG
 
	mUS_MR
;

769 
AT91_REG
 
	mUS_IER
;

770 
AT91_REG
 
	mUS_IDR
;

771 
AT91_REG
 
	mUS_IMR
;

772 
AT91_REG
 
	mUS_CSR
;

773 
AT91_REG
 
	mUS_RHR
;

774 
AT91_REG
 
	mUS_THR
;

775 
AT91_REG
 
	mUS_BRGR
;

776 
AT91_REG
 
	mUS_RTOR
;

777 
AT91_REG
 
	mUS_TTGR
;

778 
AT91_REG
 
	mRe£rved0
[5];

779 
AT91_REG
 
	mUS_FIDI
;

780 
AT91_REG
 
	mUS_NER
;

781 
AT91_REG
 
	mRe£rved1
[1];

782 
AT91_REG
 
	mUS_IF
;

783 
AT91_REG
 
	mRe£rved2
[44];

784 
AT91_REG
 
	mUS_RPR
;

785 
AT91_REG
 
	mUS_RCR
;

786 
AT91_REG
 
	mUS_TPR
;

787 
AT91_REG
 
	mUS_TCR
;

788 
AT91_REG
 
	mUS_RNPR
;

789 
AT91_REG
 
	mUS_RNCR
;

790 
AT91_REG
 
	mUS_TNPR
;

791 
AT91_REG
 
	mUS_TNCR
;

792 
AT91_REG
 
	mUS_PTCR
;

793 
AT91_REG
 
	mUS_PTSR
;

794 } 
	tAT91S_USART
, *
	tAT91PS_USART
;

797 
	#AT91C_US_STTBRK
 (() 0x1 << 9)

798 
	#AT91C_US_STPBRK
 (() 0x1 << 10)

799 
	#AT91C_US_STTTO
 (() 0x1 << 11)

800 
	#AT91C_US_SENDA
 (() 0x1 << 12)

801 
	#AT91C_US_RSTIT
 (() 0x1 << 13)

802 
	#AT91C_US_RSTNACK
 (() 0x1 << 14)

803 
	#AT91C_US_RETTO
 (() 0x1 << 15)

804 
	#AT91C_US_DTREN
 (() 0x1 << 16)

805 
	#AT91C_US_DTRDIS
 (() 0x1 << 17)

806 
	#AT91C_US_RTSEN
 (() 0x1 << 18)

807 
	#AT91C_US_RTSDIS
 (() 0x1 << 19)

809 
	#AT91C_US_USMODE
 (() 0xF << 0)

810 
	#AT91C_US_USMODE_NORMAL
 (() 0x0)

811 
	#AT91C_US_USMODE_RS485
 (() 0x1)

812 
	#AT91C_US_USMODE_HWHSH
 (() 0x2)

813 
	#AT91C_US_USMODE_MODEM
 (() 0x3)

814 
	#AT91C_US_USMODE_ISO7816_0
 (() 0x4)

815 
	#AT91C_US_USMODE_ISO7816_1
 (() 0x6)

816 
	#AT91C_US_USMODE_IRDA
 (() 0x8)

817 
	#AT91C_US_USMODE_SWHSH
 (() 0xC)

818 
	#AT91C_US_CLKS
 (() 0x3 << 4)

819 
	#AT91C_US_CLKS_CLOCK
 (() 0x0 << 4)

820 
	#AT91C_US_CLKS_FDIV1
 (() 0x1 << 4)

821 
	#AT91C_US_CLKS_SLOW
 (() 0x2 << 4)

822 
	#AT91C_US_CLKS_EXT
 (() 0x3 << 4)

823 
	#AT91C_US_CHRL
 (() 0x3 << 6)

824 
	#AT91C_US_CHRL_5_BITS
 (() 0x0 << 6)

825 
	#AT91C_US_CHRL_6_BITS
 (() 0x1 << 6)

826 
	#AT91C_US_CHRL_7_BITS
 (() 0x2 << 6)

827 
	#AT91C_US_CHRL_8_BITS
 (() 0x3 << 6)

828 
	#AT91C_US_SYNC
 (() 0x1 << 8)

829 
	#AT91C_US_NBSTOP
 (() 0x3 << 12)

830 
	#AT91C_US_NBSTOP_1_BIT
 (() 0x0 << 12)

831 
	#AT91C_US_NBSTOP_15_BIT
 (() 0x1 << 12)

832 
	#AT91C_US_NBSTOP_2_BIT
 (() 0x2 << 12)

833 
	#AT91C_US_MSBF
 (() 0x1 << 16)

834 
	#AT91C_US_MODE9
 (() 0x1 << 17)

835 
	#AT91C_US_CKLO
 (() 0x1 << 18)

836 
	#AT91C_US_OVER
 (() 0x1 << 19)

837 
	#AT91C_US_INACK
 (() 0x1 << 20)

838 
	#AT91C_US_DSNACK
 (() 0x1 << 21)

839 
	#AT91C_US_MAX_ITER
 (() 0x1 << 24)

840 
	#AT91C_US_FILTER
 (() 0x1 << 28)

842 
	#AT91C_US_RXBRK
 (() 0x1 << 2)

843 
	#AT91C_US_TIMEOUT
 (() 0x1 << 8)

844 
	#AT91C_US_ITERATION
 (() 0x1 << 10)

845 
	#AT91C_US_NACK
 (() 0x1 << 13)

846 
	#AT91C_US_RIIC
 (() 0x1 << 16)

847 
	#AT91C_US_DSRIC
 (() 0x1 << 17)

848 
	#AT91C_US_DCDIC
 (() 0x1 << 18)

849 
	#AT91C_US_CTSIC
 (() 0x1 << 19)

853 
	#AT91C_US_RI
 (() 0x1 << 20)

854 
	#AT91C_US_DSR
 (() 0x1 << 21)

855 
	#AT91C_US_DCD
 (() 0x1 << 22)

856 
	#AT91C_US_CTS
 (() 0x1 << 23)

857 

	)

861 
	s_AT91S_SSC
 {

862 
AT91_REG
 
	mSSC_CR
;

863 
AT91_REG
 
	mSSC_CMR
;

864 
AT91_REG
 
	mRe£rved0
[2];

865 
AT91_REG
 
	mSSC_RCMR
;

866 
AT91_REG
 
	mSSC_RFMR
;

867 
AT91_REG
 
	mSSC_TCMR
;

868 
AT91_REG
 
	mSSC_TFMR
;

869 
AT91_REG
 
	mSSC_RHR
;

870 
AT91_REG
 
	mSSC_THR
;

871 
AT91_REG
 
	mRe£rved1
[2];

872 
AT91_REG
 
	mSSC_RSHR
;

873 
AT91_REG
 
	mSSC_TSHR
;

874 
AT91_REG
 
	mRe£rved2
[2];

875 
AT91_REG
 
	mSSC_SR
;

876 
AT91_REG
 
	mSSC_IER
;

877 
AT91_REG
 
	mSSC_IDR
;

878 
AT91_REG
 
	mSSC_IMR
;

879 
AT91_REG
 
	mRe£rved3
[44];

880 
AT91_REG
 
	mSSC_RPR
;

881 
AT91_REG
 
	mSSC_RCR
;

882 
AT91_REG
 
	mSSC_TPR
;

883 
AT91_REG
 
	mSSC_TCR
;

884 
AT91_REG
 
	mSSC_RNPR
;

885 
AT91_REG
 
	mSSC_RNCR
;

886 
AT91_REG
 
	mSSC_TNPR
;

887 
AT91_REG
 
	mSSC_TNCR
;

888 
AT91_REG
 
	mSSC_PTCR
;

889 
AT91_REG
 
	mSSC_PTSR
;

890 } 
	tAT91S_SSC
, *
	tAT91PS_SSC
;

893 
	#AT91C_SSC_RXEN
 (() 0x1 << 0)

894 
	#AT91C_SSC_RXDIS
 (() 0x1 << 1)

895 
	#AT91C_SSC_TXEN
 (() 0x1 << 8)

896 
	#AT91C_SSC_TXDIS
 (() 0x1 << 9)

897 
	#AT91C_SSC_SWRST
 (() 0x1 << 15)

899 
	#AT91C_SSC_CKS
 (() 0x3 << 0)

900 
	#AT91C_SSC_CKS_DIV
 (() 0x0)

901 
	#AT91C_SSC_CKS_TK
 (() 0x1)

902 
	#AT91C_SSC_CKS_RK
 (() 0x2)

903 
	#AT91C_SSC_CKO
 (() 0x7 << 2)

904 
	#AT91C_SSC_CKO_NONE
 (() 0x0 << 2)

905 
	#AT91C_SSC_CKO_CONTINOUS
 (() 0x1 << 2)

906 
	#AT91C_SSC_CKO_DATA_TX
 (() 0x2 << 2)

907 
	#AT91C_SSC_CKI
 (() 0x1 << 5)

908 
	#AT91C_SSC_START
 (() 0xF << 8)

909 
	#AT91C_SSC_START_CONTINOUS
 (() 0x0 << 8)

910 
	#AT91C_SSC_START_TX
 (() 0x1 << 8)

911 
	#AT91C_SSC_START_LOW_RF
 (() 0x2 << 8)

912 
	#AT91C_SSC_START_HIGH_RF
 (() 0x3 << 8)

913 
	#AT91C_SSC_START_FALL_RF
 (() 0x4 << 8)

914 
	#AT91C_SSC_START_RISE_RF
 (() 0x5 << 8)

915 
	#AT91C_SSC_START_LEVEL_RF
 (() 0x6 << 8)

916 
	#AT91C_SSC_START_EDGE_RF
 (() 0x7 << 8)

917 
	#AT91C_SSC_START_0
 (() 0x8 << 8)

918 
	#AT91C_SSC_STTDLY
 (() 0xFF << 16)

919 
	#AT91C_SSC_PERIOD
 (() 0xFF << 24)

921 
	#AT91C_SSC_DATLEN
 (() 0x1F << 0)

922 
	#AT91C_SSC_LOOP
 (() 0x1 << 5)

923 
	#AT91C_SSC_MSBF
 (() 0x1 << 7)

924 
	#AT91C_SSC_DATNB
 (() 0xF << 8)

925 
	#AT91C_SSC_FSLEN
 (() 0xF << 16)

926 
	#AT91C_SSC_FSOS
 (() 0x7 << 20)

927 
	#AT91C_SSC_FSOS_NONE
 (() 0x0 << 20)

928 
	#AT91C_SSC_FSOS_NEGATIVE
 (() 0x1 << 20)

929 
	#AT91C_SSC_FSOS_POSITIVE
 (() 0x2 << 20)

930 
	#AT91C_SSC_FSOS_LOW
 (() 0x3 << 20)

931 
	#AT91C_SSC_FSOS_HIGH
 (() 0x4 << 20)

932 
	#AT91C_SSC_FSOS_TOGGLE
 (() 0x5 << 20)

933 
	#AT91C_SSC_FSEDGE
 (() 0x1 << 24)

936 
	#AT91C_SSC_DATDEF
 (() 0x1 << 5)

937 
	#AT91C_SSC_FSDEN
 (() 0x1 << 23)

939 
	#AT91C_SSC_TXRDY
 (() 0x1 << 0)

940 
	#AT91C_SSC_TXEMPTY
 (() 0x1 << 1)

941 
	#AT91C_SSC_ENDTX
 (() 0x1 << 2)

942 
	#AT91C_SSC_TXBUFE
 (() 0x1 << 3)

943 
	#AT91C_SSC_RXRDY
 (() 0x1 << 4)

944 
	#AT91C_SSC_OVRUN
 (() 0x1 << 5)

945 
	#AT91C_SSC_ENDRX
 (() 0x1 << 6)

946 
	#AT91C_SSC_RXBUFF
 (() 0x1 << 7)

947 
	#AT91C_SSC_TXSYN
 (() 0x1 << 10)

948 
	#AT91C_SSC_RXSYN
 (() 0x1 << 11)

949 
	#AT91C_SSC_TXENA
 (() 0x1 << 16)

950 
	#AT91C_SSC_RXENA
 (() 0x1 << 17)

954 

	)

958 
	s_AT91S_TWI
 {

959 
AT91_REG
 
	mTWI_CR
;

960 
AT91_REG
 
	mTWI_MMR
;

961 
AT91_REG
 
	mRe£rved0
[1];

962 
AT91_REG
 
	mTWI_IADR
;

963 
AT91_REG
 
	mTWI_CWGR
;

964 
AT91_REG
 
	mRe£rved1
[3];

965 
AT91_REG
 
	mTWI_SR
;

966 
AT91_REG
 
	mTWI_IER
;

967 
AT91_REG
 
	mTWI_IDR
;

968 
AT91_REG
 
	mTWI_IMR
;

969 
AT91_REG
 
	mTWI_RHR
;

970 
AT91_REG
 
	mTWI_THR
;

971 } 
	tAT91S_TWI
, *
	tAT91PS_TWI
;

974 
	#AT91C_TWI_START
 (() 0x1 << 0)

975 
	#AT91C_TWI_STOP
 (() 0x1 << 1)

976 
	#AT91C_TWI_MSEN
 (() 0x1 << 2)

977 
	#AT91C_TWI_MSDIS
 (() 0x1 << 3)

978 
	#AT91C_TWI_SWRST
 (() 0x1 << 7)

980 
	#AT91C_TWI_IADRSZ
 (() 0x3 << 8)

981 
	#AT91C_TWI_IADRSZ_NO
 (() 0x0 << 8)

982 
	#AT91C_TWI_IADRSZ_1_BYTE
 (() 0x1 << 8)

983 
	#AT91C_TWI_IADRSZ_2_BYTE
 (() 0x2 << 8)

984 
	#AT91C_TWI_IADRSZ_3_BYTE
 (() 0x3 << 8)

985 
	#AT91C_TWI_MREAD
 (() 0x1 << 12)

986 
	#AT91C_TWI_DADR
 (() 0x7F << 16)

988 
	#AT91C_TWI_CLDIV
 (() 0xFF << 0)

989 
	#AT91C_TWI_CHDIV
 (() 0xFF << 8)

990 
	#AT91C_TWI_CKDIV
 (() 0x7 << 16)

992 
	#AT91C_TWI_TXCOMP
 (() 0x1 << 0)

993 
	#AT91C_TWI_RXRDY
 (() 0x1 << 1)

994 
	#AT91C_TWI_TXRDY
 (() 0x1 << 2)

995 
	#AT91C_TWI_OVRE
 (() 0x1 << 6)

996 
	#AT91C_TWI_UNRE
 (() 0x1 << 7)

997 
	#AT91C_TWI_NACK
 (() 0x1 << 8)

1001 

	)

1005 
	s_AT91S_PWMC_CH
 {

1006 
AT91_REG
 
	mPWMC_CMR
;

1007 
AT91_REG
 
	mPWMC_CDTYR
;

1008 
AT91_REG
 
	mPWMC_CPRDR
;

1009 
AT91_REG
 
	mPWMC_CCNTR
;

1010 
AT91_REG
 
	mPWMC_CUPDR
;

1011 
AT91_REG
 
	mPWMC_Re£rved
[3];

1012 } 
	tAT91S_PWMC_CH
, *
	tAT91PS_PWMC_CH
;

1015 
	#AT91C_PWMC_CPRE
 (() 0xF << 0)

1016 
	#AT91C_PWMC_CPRE_MCK
 (() 0x0)

1017 
	#AT91C_PWMC_CPRE_MCKA
 (() 0xB)

1018 
	#AT91C_PWMC_CPRE_MCKB
 (() 0xC)

1019 
	#AT91C_PWMC_CALG
 (() 0x1 << 8)

1020 
	#AT91C_PWMC_CPOL
 (() 0x1 << 9)

1021 
	#AT91C_PWMC_CPD
 (() 0x1 << 10)

1023 
	#AT91C_PWMC_CDTY
 (() 0x0 << 0)

1025 
	#AT91C_PWMC_CPRD
 (() 0x0 << 0)

1027 
	#AT91C_PWMC_CCNT
 (() 0x0 << 0)

1029 
	#AT91C_PWMC_CUPD
 (() 0x0 << 0)

1030 

	)

1034 
	s_AT91S_PWMC
 {

1035 
AT91_REG
 
	mPWMC_MR
;

1036 
AT91_REG
 
	mPWMC_ENA
;

1037 
AT91_REG
 
	mPWMC_DIS
;

1038 
AT91_REG
 
	mPWMC_SR
;

1039 
AT91_REG
 
	mPWMC_IER
;

1040 
AT91_REG
 
	mPWMC_IDR
;

1041 
AT91_REG
 
	mPWMC_IMR
;

1042 
AT91_REG
 
	mPWMC_ISR
;

1043 
AT91_REG
 
	mRe£rved0
[55];

1044 
AT91_REG
 
	mPWMC_VR
;

1045 
AT91_REG
 
	mRe£rved1
[64];

1046 
AT91S_PWMC_CH
 
	mPWMC_CH
[4];

1047 } 
	tAT91S_PWMC
, *
	tAT91PS_PWMC
;

1050 
	#AT91C_PWMC_DIVA
 (() 0xFF << 0)

1051 
	#AT91C_PWMC_PREA
 (() 0xF << 8)

1052 
	#AT91C_PWMC_PREA_MCK
 (() 0x0 << 8)

1053 
	#AT91C_PWMC_DIVB
 (() 0xFF << 16)

1054 
	#AT91C_PWMC_PREB
 (() 0xF << 24)

1055 
	#AT91C_PWMC_PREB_MCK
 (() 0x0 << 24)

1057 
	#AT91C_PWMC_CHID0
 (() 0x1 << 0)

1058 
	#AT91C_PWMC_CHID1
 (() 0x1 << 1)

1059 
	#AT91C_PWMC_CHID2
 (() 0x1 << 2)

1060 
	#AT91C_PWMC_CHID3
 (() 0x1 << 3)

1067 

	)

1071 
	s_AT91S_UDP
 {

1072 
AT91_REG
 
	mUDP_NUM
;

1073 
AT91_REG
 
	mUDP_GLBSTATE
;

1074 
AT91_REG
 
	mUDP_FADDR
;

1075 
AT91_REG
 
	mRe£rved0
[1];

1076 
AT91_REG
 
	mUDP_IER
;

1077 
AT91_REG
 
	mUDP_IDR
;

1078 
AT91_REG
 
	mUDP_IMR
;

1079 
AT91_REG
 
	mUDP_ISR
;

1080 
AT91_REG
 
	mUDP_ICR
;

1081 
AT91_REG
 
	mRe£rved1
[1];

1082 
AT91_REG
 
	mUDP_RSTEP
;

1083 
AT91_REG
 
	mRe£rved2
[1];

1084 
AT91_REG
 
	mUDP_CSR
[6];

1085 
AT91_REG
 
	mRe£rved3
[2];

1086 
AT91_REG
 
	mUDP_FDR
[6];

1087 
AT91_REG
 
	mRe£rved4
[3];

1088 
AT91_REG
 
	mUDP_TXVC
;

1089 } 
	tAT91S_UDP
, *
	tAT91PS_UDP
;

1092 
	#AT91C_UDP_FRM_NUM
 (() 0x7FF << 0)

1093 
	#AT91C_UDP_FRM_ERR
 (() 0x1 << 16)

1094 
	#AT91C_UDP_FRM_OK
 (() 0x1 << 17)

1096 
	#AT91C_UDP_FADDEN
 (() 0x1 << 0)

1097 
	#AT91C_UDP_CONFG
 (() 0x1 << 1)

1098 
	#AT91C_UDP_ESR
 (() 0x1 << 2)

1099 
	#AT91C_UDP_RSMINPR
 (() 0x1 << 3)

1100 
	#AT91C_UDP_RMWUPE
 (() 0x1 << 4)

1102 
	#AT91C_UDP_FADD
 (() 0xFF << 0)

1103 
	#AT91C_UDP_FEN
 (() 0x1 << 8)

1105 
	#AT91C_UDP_EPINT0
 (() 0x1 << 0)

1106 
	#AT91C_UDP_EPINT1
 (() 0x1 << 1)

1107 
	#AT91C_UDP_EPINT2
 (() 0x1 << 2)

1108 
	#AT91C_UDP_EPINT3
 (() 0x1 << 3)

1109 
	#AT91C_UDP_EPINT4
 (() 0x1 << 4)

1110 
	#AT91C_UDP_EPINT5
 (() 0x1 << 5)

1111 
	#AT91C_UDP_RXSUSP
 (() 0x1 << 8)

1112 
	#AT91C_UDP_RXRSM
 (() 0x1 << 9)

1113 
	#AT91C_UDP_EXTRSM
 (() 0x1 << 10)

1114 
	#AT91C_UDP_SOFINT
 (() 0x1 << 11)

1115 
	#AT91C_UDP_WAKEUP
 (() 0x1 << 13)

1119 
	#AT91C_UDP_ENDBUSRES
 (() 0x1 << 12)

1122 
	#AT91C_UDP_EP0
 (() 0x1 << 0)

1123 
	#AT91C_UDP_EP1
 (() 0x1 << 1)

1124 
	#AT91C_UDP_EP2
 (() 0x1 << 2)

1125 
	#AT91C_UDP_EP3
 (() 0x1 << 3)

1126 
	#AT91C_UDP_EP4
 (() 0x1 << 4)

1127 
	#AT91C_UDP_EP5
 (() 0x1 << 5)

1129 
	#AT91C_UDP_TXCOMP
 (() 0x1 << 0)

1130 
	#AT91C_UDP_RX_DATA_BK0
 (() 0x1 << 1)

1131 
	#AT91C_UDP_RXSETUP
 (() 0x1 << 2)

1132 
	#AT91C_UDP_ISOERROR
 (() 0x1 << 3)

1133 
	#AT91C_UDP_TXPKTRDY
 (() 0x1 << 4)

1134 
	#AT91C_UDP_FORCESTALL
 (() 0x1 << 5)

1135 
	#AT91C_UDP_RX_DATA_BK1
 (() 0x1 << 6)

1136 
	#AT91C_UDP_DIR
 (() 0x1 << 7)

1137 
	#AT91C_UDP_EPTYPE
 (() 0x7 << 8)

1138 
	#AT91C_UDP_EPTYPE_CTRL
 (() 0x0 << 8)

1139 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (() 0x1 << 8)

1140 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (() 0x2 << 8)

1141 
	#AT91C_UDP_EPTYPE_INT_OUT
 (() 0x3 << 8)

1142 
	#AT91C_UDP_EPTYPE_ISO_IN
 (() 0x5 << 8)

1143 
	#AT91C_UDP_EPTYPE_BULK_IN
 (() 0x6 << 8)

1144 
	#AT91C_UDP_EPTYPE_INT_IN
 (() 0x7 << 8)

1145 
	#AT91C_UDP_DTGLE
 (() 0x1 << 11)

1146 
	#AT91C_UDP_EPEDS
 (() 0x1 << 15)

1147 
	#AT91C_UDP_RXBYTECNT
 (() 0x7FF << 16)

1149 
	#AT91C_UDP_TXVDIS
 (() 0x1 << 8)

1150 
	#AT91C_UDP_PUON
 (() 0x1 << 9)

1151 

	)

1155 
	s_AT91S_TC
 {

1156 
AT91_REG
 
	mTC_CCR
;

1157 
AT91_REG
 
	mTC_CMR
;

1158 
AT91_REG
 
	mRe£rved0
[2];

1159 
AT91_REG
 
	mTC_CV
;

1160 
AT91_REG
 
	mTC_RA
;

1161 
AT91_REG
 
	mTC_RB
;

1162 
AT91_REG
 
	mTC_RC
;

1163 
AT91_REG
 
	mTC_SR
;

1164 
AT91_REG
 
	mTC_IER
;

1165 
AT91_REG
 
	mTC_IDR
;

1166 
AT91_REG
 
	mTC_IMR
;

1167 } 
	tAT91S_TC
, *
	tAT91PS_TC
;

1170 
	#AT91C_TC_CLKEN
 (() 0x1 << 0)

1171 
	#AT91C_TC_CLKDIS
 (() 0x1 << 1)

1172 
	#AT91C_TC_SWTRG
 (() 0x1 << 2)

1174 
	#AT91C_TC_CLKS
 (() 0x7 << 0)

1175 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (() 0x0)

1176 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (() 0x1)

1177 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (() 0x2)

1178 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (() 0x3)

1179 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (() 0x4)

1180 
	#AT91C_TC_CLKS_XC0
 (() 0x5)

1181 
	#AT91C_TC_CLKS_XC1
 (() 0x6)

1182 
	#AT91C_TC_CLKS_XC2
 (() 0x7)

1183 
	#AT91C_TC_CLKI
 (() 0x1 << 3)

1184 
	#AT91C_TC_BURST
 (() 0x3 << 4)

1185 
	#AT91C_TC_BURST_NONE
 (() 0x0 << 4)

1186 
	#AT91C_TC_BURST_XC0
 (() 0x1 << 4)

1187 
	#AT91C_TC_BURST_XC1
 (() 0x2 << 4)

1188 
	#AT91C_TC_BURST_XC2
 (() 0x3 << 4)

1189 
	#AT91C_TC_CPCSTOP
 (() 0x1 << 6)

1190 
	#AT91C_TC_LDBSTOP
 (() 0x1 << 6)

1191 
	#AT91C_TC_CPCDIS
 (() 0x1 << 7)

1192 
	#AT91C_TC_LDBDIS
 (() 0x1 << 7)

1193 
	#AT91C_TC_ETRGEDG
 (() 0x3 << 8)

1194 
	#AT91C_TC_ETRGEDG_NONE
 (() 0x0 << 8)

1195 
	#AT91C_TC_ETRGEDG_RISING
 (() 0x1 << 8)

1196 
	#AT91C_TC_ETRGEDG_FALLING
 (() 0x2 << 8)

1197 
	#AT91C_TC_ETRGEDG_BOTH
 (() 0x3 << 8)

1198 
	#AT91C_TC_EEVTEDG
 (() 0x3 << 8)

1199 
	#AT91C_TC_EEVTEDG_NONE
 (() 0x0 << 8)

1200 
	#AT91C_TC_EEVTEDG_RISING
 (() 0x1 << 8)

1201 
	#AT91C_TC_EEVTEDG_FALLING
 (() 0x2 << 8)

1202 
	#AT91C_TC_EEVTEDG_BOTH
 (() 0x3 << 8)

1203 
	#AT91C_TC_EEVT
 (() 0x3 << 10)

1204 
	#AT91C_TC_EEVT_TIOB
 (() 0x0 << 10)

1205 
	#AT91C_TC_EEVT_XC0
 (() 0x1 << 10)

1206 
	#AT91C_TC_EEVT_XC1
 (() 0x2 << 10)

1207 
	#AT91C_TC_EEVT_XC2
 (() 0x3 << 10)

1208 
	#AT91C_TC_ABETRG
 (() 0x1 << 10)

1209 
	#AT91C_TC_ENETRG
 (() 0x1 << 12)

1210 
	#AT91C_TC_WAVESEL
 (() 0x3 << 13)

1211 
	#AT91C_TC_WAVESEL_UP
 (() 0x0 << 13)

1212 
	#AT91C_TC_WAVESEL_UPDOWN
 (() 0x1 << 13)

1213 
	#AT91C_TC_WAVESEL_UP_AUTO
 (() 0x2 << 13)

1214 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (() 0x3 << 13)

1215 
	#AT91C_TC_CPCTRG
 (() 0x1 << 14)

1216 
	#AT91C_TC_WAVE
 (() 0x1 << 15)

1217 
	#AT91C_TC_ACPA
 (() 0x3 << 16)

1218 
	#AT91C_TC_ACPA_NONE
 (() 0x0 << 16)

1219 
	#AT91C_TC_ACPA_SET
 (() 0x1 << 16)

1220 
	#AT91C_TC_ACPA_CLEAR
 (() 0x2 << 16)

1221 
	#AT91C_TC_ACPA_TOGGLE
 (() 0x3 << 16)

1222 
	#AT91C_TC_LDRA
 (() 0x3 << 16)

1223 
	#AT91C_TC_LDRA_NONE
 (() 0x0 << 16)

1224 
	#AT91C_TC_LDRA_RISING
 (() 0x1 << 16)

1225 
	#AT91C_TC_LDRA_FALLING
 (() 0x2 << 16)

1226 
	#AT91C_TC_LDRA_BOTH
 (() 0x3 << 16)

1227 
	#AT91C_TC_ACPC
 (() 0x3 << 18)

1228 
	#AT91C_TC_ACPC_NONE
 (() 0x0 << 18)

1229 
	#AT91C_TC_ACPC_SET
 (() 0x1 << 18)

1230 
	#AT91C_TC_ACPC_CLEAR
 (() 0x2 << 18)

1231 
	#AT91C_TC_ACPC_TOGGLE
 (() 0x3 << 18)

1232 
	#AT91C_TC_LDRB
 (() 0x3 << 18)

1233 
	#AT91C_TC_LDRB_NONE
 (() 0x0 << 18)

1234 
	#AT91C_TC_LDRB_RISING
 (() 0x1 << 18)

1235 
	#AT91C_TC_LDRB_FALLING
 (() 0x2 << 18)

1236 
	#AT91C_TC_LDRB_BOTH
 (() 0x3 << 18)

1237 
	#AT91C_TC_AEEVT
 (() 0x3 << 20)

1238 
	#AT91C_TC_AEEVT_NONE
 (() 0x0 << 20)

1239 
	#AT91C_TC_AEEVT_SET
 (() 0x1 << 20)

1240 
	#AT91C_TC_AEEVT_CLEAR
 (() 0x2 << 20)

1241 
	#AT91C_TC_AEEVT_TOGGLE
 (() 0x3 << 20)

1242 
	#AT91C_TC_ASWTRG
 (() 0x3 << 22)

1243 
	#AT91C_TC_ASWTRG_NONE
 (() 0x0 << 22)

1244 
	#AT91C_TC_ASWTRG_SET
 (() 0x1 << 22)

1245 
	#AT91C_TC_ASWTRG_CLEAR
 (() 0x2 << 22)

1246 
	#AT91C_TC_ASWTRG_TOGGLE
 (() 0x3 << 22)

1247 
	#AT91C_TC_BCPB
 (() 0x3 << 24)

1248 
	#AT91C_TC_BCPB_NONE
 (() 0x0 << 24)

1249 
	#AT91C_TC_BCPB_SET
 (() 0x1 << 24)

1250 
	#AT91C_TC_BCPB_CLEAR
 (() 0x2 << 24)

1251 
	#AT91C_TC_BCPB_TOGGLE
 (() 0x3 << 24)

1252 
	#AT91C_TC_BCPC
 (() 0x3 << 26)

1253 
	#AT91C_TC_BCPC_NONE
 (() 0x0 << 26)

1254 
	#AT91C_TC_BCPC_SET
 (() 0x1 << 26)

1255 
	#AT91C_TC_BCPC_CLEAR
 (() 0x2 << 26)

1256 
	#AT91C_TC_BCPC_TOGGLE
 (() 0x3 << 26)

1257 
	#AT91C_TC_BEEVT
 (() 0x3 << 28)

1258 
	#AT91C_TC_BEEVT_NONE
 (() 0x0 << 28)

1259 
	#AT91C_TC_BEEVT_SET
 (() 0x1 << 28)

1260 
	#AT91C_TC_BEEVT_CLEAR
 (() 0x2 << 28)

1261 
	#AT91C_TC_BEEVT_TOGGLE
 (() 0x3 << 28)

1262 
	#AT91C_TC_BSWTRG
 (() 0x3 << 30)

1263 
	#AT91C_TC_BSWTRG_NONE
 (() 0x0 << 30)

1264 
	#AT91C_TC_BSWTRG_SET
 (() 0x1 << 30)

1265 
	#AT91C_TC_BSWTRG_CLEAR
 (() 0x2 << 30)

1266 
	#AT91C_TC_BSWTRG_TOGGLE
 (() 0x3 << 30)

1268 
	#AT91C_TC_COVFS
 (() 0x1 << 0)

1269 
	#AT91C_TC_LOVRS
 (() 0x1 << 1)

1270 
	#AT91C_TC_CPAS
 (() 0x1 << 2)

1271 
	#AT91C_TC_CPBS
 (() 0x1 << 3)

1272 
	#AT91C_TC_CPCS
 (() 0x1 << 4)

1273 
	#AT91C_TC_LDRAS
 (() 0x1 << 5)

1274 
	#AT91C_TC_LDRBS
 (() 0x1 << 6)

1275 
	#AT91C_TC_ETRGS
 (() 0x1 << 7)

1276 
	#AT91C_TC_CLKSTA
 (() 0x1 << 16)

1277 
	#AT91C_TC_MTIOA
 (() 0x1 << 17)

1278 
	#AT91C_TC_MTIOB
 (() 0x1 << 18)

1282 

	)

1286 
	s_AT91S_TCB
 {

1287 
AT91S_TC
 
	mTCB_TC0
;

1288 
AT91_REG
 
	mRe£rved0
[4];

1289 
AT91S_TC
 
	mTCB_TC1
;

1290 
AT91_REG
 
	mRe£rved1
[4];

1291 
AT91S_TC
 
	mTCB_TC2
;

1292 
AT91_REG
 
	mRe£rved2
[4];

1293 
AT91_REG
 
	mTCB_BCR
;

1294 
AT91_REG
 
	mTCB_BMR
;

1295 } 
	tAT91S_TCB
, *
	tAT91PS_TCB
;

1298 
	#AT91C_TCB_SYNC
 (() 0x1 << 0)

1300 
	#AT91C_TCB_TC0XC0S
 (() 0x3 << 0)

1301 
	#AT91C_TCB_TC0XC0S_TCLK0
 (() 0x0)

1302 
	#AT91C_TCB_TC0XC0S_NONE
 (() 0x1)

1303 
	#AT91C_TCB_TC0XC0S_TIOA1
 (() 0x2)

1304 
	#AT91C_TCB_TC0XC0S_TIOA2
 (() 0x3)

1305 
	#AT91C_TCB_TC1XC1S
 (() 0x3 << 2)

1306 
	#AT91C_TCB_TC1XC1S_TCLK1
 (() 0x0 << 2)

1307 
	#AT91C_TCB_TC1XC1S_NONE
 (() 0x1 << 2)

1308 
	#AT91C_TCB_TC1XC1S_TIOA0
 (() 0x2 << 2)

1309 
	#AT91C_TCB_TC1XC1S_TIOA2
 (() 0x3 << 2)

1310 
	#AT91C_TCB_TC2XC2S
 (() 0x3 << 4)

1311 
	#AT91C_TCB_TC2XC2S_TCLK2
 (() 0x0 << 4)

1312 
	#AT91C_TCB_TC2XC2S_NONE
 (() 0x1 << 4)

1313 
	#AT91C_TCB_TC2XC2S_TIOA0
 (() 0x2 << 4)

1314 
	#AT91C_TCB_TC2XC2S_TIOA1
 (() 0x3 << 4)

1315 

	)

1319 
	s_AT91S_CAN_MB
 {

1320 
AT91_REG
 
	mCAN_MB_MMR
;

1321 
AT91_REG
 
	mCAN_MB_MAM
;

1322 
AT91_REG
 
	mCAN_MB_MID
;

1323 
AT91_REG
 
	mCAN_MB_MFID
;

1324 
AT91_REG
 
	mCAN_MB_MSR
;

1325 
AT91_REG
 
	mCAN_MB_MDL
;

1326 
AT91_REG
 
	mCAN_MB_MDH
;

1327 
AT91_REG
 
	mCAN_MB_MCR
;

1328 } 
	tAT91S_CAN_MB
, *
	tAT91PS_CAN_MB
;

1331 
	#AT91C_CAN_MTIMEMARK
 (() 0xFFFF << 0)

1332 
	#AT91C_CAN_PRIOR
 (() 0xF << 16)

1333 
	#AT91C_CAN_MOT
 (() 0x7 << 24)

1334 
	#AT91C_CAN_MOT_DIS
 (() 0x0 << 24)

1335 
	#AT91C_CAN_MOT_RX
 (() 0x1 << 24)

1336 
	#AT91C_CAN_MOT_RXOVERWRITE
 (() 0x2 << 24)

1337 
	#AT91C_CAN_MOT_TX
 (() 0x3 << 24)

1338 
	#AT91C_CAN_MOT_CONSUMER
 (() 0x4 << 24)

1339 
	#AT91C_CAN_MOT_PRODUCER
 (() 0x5 << 24)

1341 
	#AT91C_CAN_MIDvB
 (() 0x3FFFF << 0)

1342 
	#AT91C_CAN_MIDvA
 (() 0x7FF << 18)

1343 
	#AT91C_CAN_MIDE
 (() 0x1 << 29)

1347 
	#AT91C_CAN_MTIMESTAMP
 (() 0xFFFF << 0)

1348 
	#AT91C_CAN_MDLC
 (() 0xF << 16)

1349 
	#AT91C_CAN_MRTR
 (() 0x1 << 20)

1350 
	#AT91C_CAN_MABT
 (() 0x1 << 22)

1351 
	#AT91C_CAN_MRDY
 (() 0x1 << 23)

1352 
	#AT91C_CAN_MMI
 (() 0x1 << 24)

1356 
	#AT91C_CAN_MACR
 (() 0x1 << 22)

1357 
	#AT91C_CAN_MTCR
 (() 0x1 << 23)

1358 

	)

1362 
	s_AT91S_CAN
 {

1363 
AT91_REG
 
	mCAN_MR
;

1364 
AT91_REG
 
	mCAN_IER
;

1365 
AT91_REG
 
	mCAN_IDR
;

1366 
AT91_REG
 
	mCAN_IMR
;

1367 
AT91_REG
 
	mCAN_SR
;

1368 
AT91_REG
 
	mCAN_BR
;

1369 
AT91_REG
 
	mCAN_TIM
;

1370 
AT91_REG
 
	mCAN_TIMESTP
;

1371 
AT91_REG
 
	mCAN_ECR
;

1372 
AT91_REG
 
	mCAN_TCR
;

1373 
AT91_REG
 
	mCAN_ACR
;

1374 
AT91_REG
 
	mRe£rved0
[52];

1375 
AT91_REG
 
	mCAN_VR
;

1376 
AT91_REG
 
	mRe£rved1
[64];

1377 
AT91S_CAN_MB
 
	mCAN_MB0
;

1378 
AT91S_CAN_MB
 
	mCAN_MB1
;

1379 
AT91S_CAN_MB
 
	mCAN_MB2
;

1380 
AT91S_CAN_MB
 
	mCAN_MB3
;

1381 
AT91S_CAN_MB
 
	mCAN_MB4
;

1382 
AT91S_CAN_MB
 
	mCAN_MB5
;

1383 
AT91S_CAN_MB
 
	mCAN_MB6
;

1384 
AT91S_CAN_MB
 
	mCAN_MB7
;

1385 
AT91S_CAN_MB
 
	mCAN_MB8
;

1386 
AT91S_CAN_MB
 
	mCAN_MB9
;

1387 
AT91S_CAN_MB
 
	mCAN_MB10
;

1388 
AT91S_CAN_MB
 
	mCAN_MB11
;

1389 
AT91S_CAN_MB
 
	mCAN_MB12
;

1390 
AT91S_CAN_MB
 
	mCAN_MB13
;

1391 
AT91S_CAN_MB
 
	mCAN_MB14
;

1392 
AT91S_CAN_MB
 
	mCAN_MB15
;

1393 } 
	tAT91S_CAN
, *
	tAT91PS_CAN
;

1396 
	#AT91C_CAN_CANEN
 (() 0x1 << 0)

1397 
	#AT91C_CAN_LPM
 (() 0x1 << 1)

1398 
	#AT91C_CAN_ABM
 (() 0x1 << 2)

1399 
	#AT91C_CAN_OVL
 (() 0x1 << 3)

1400 
	#AT91C_CAN_TEOF
 (() 0x1 << 4)

1401 
	#AT91C_CAN_TTM
 (() 0x1 << 5)

1402 
	#AT91C_CAN_TIMFRZ
 (() 0x1 << 6)

1403 
	#AT91C_CAN_DRPT
 (() 0x1 << 7)

1405 
	#AT91C_CAN_MB0
 (() 0x1 << 0)

1406 
	#AT91C_CAN_MB1
 (() 0x1 << 1)

1407 
	#AT91C_CAN_MB2
 (() 0x1 << 2)

1408 
	#AT91C_CAN_MB3
 (() 0x1 << 3)

1409 
	#AT91C_CAN_MB4
 (() 0x1 << 4)

1410 
	#AT91C_CAN_MB5
 (() 0x1 << 5)

1411 
	#AT91C_CAN_MB6
 (() 0x1 << 6)

1412 
	#AT91C_CAN_MB7
 (() 0x1 << 7)

1413 
	#AT91C_CAN_MB8
 (() 0x1 << 8)

1414 
	#AT91C_CAN_MB9
 (() 0x1 << 9)

1415 
	#AT91C_CAN_MB10
 (() 0x1 << 10)

1416 
	#AT91C_CAN_MB11
 (() 0x1 << 11)

1417 
	#AT91C_CAN_MB12
 (() 0x1 << 12)

1418 
	#AT91C_CAN_MB13
 (() 0x1 << 13)

1419 
	#AT91C_CAN_MB14
 (() 0x1 << 14)

1420 
	#AT91C_CAN_MB15
 (() 0x1 << 15)

1421 
	#AT91C_CAN_ERRA
 (() 0x1 << 16)

1422 
	#AT91C_CAN_WARN
 (() 0x1 << 17)

1423 
	#AT91C_CAN_ERRP
 (() 0x1 << 18)

1424 
	#AT91C_CAN_BOFF
 (() 0x1 << 19)

1425 
	#AT91C_CAN_SLEEP
 (() 0x1 << 20)

1426 
	#AT91C_CAN_WAKEUP
 (() 0x1 << 21)

1427 
	#AT91C_CAN_TOVF
 (() 0x1 << 22)

1428 
	#AT91C_CAN_TSTP
 (() 0x1 << 23)

1429 
	#AT91C_CAN_CERR
 (() 0x1 << 24)

1430 
	#AT91C_CAN_SERR
 (() 0x1 << 25)

1431 
	#AT91C_CAN_AERR
 (() 0x1 << 26)

1432 
	#AT91C_CAN_FERR
 (() 0x1 << 27)

1433 
	#AT91C_CAN_BERR
 (() 0x1 << 28)

1437 
	#AT91C_CAN_RBSY
 (() 0x1 << 29)

1438 
	#AT91C_CAN_TBSY
 (() 0x1 << 30)

1439 
	#AT91C_CAN_OVLY
 (() 0x1 << 31)

1441 
	#AT91C_CAN_PHASE2
 (() 0x7 << 0)

1442 
	#AT91C_CAN_PHASE1
 (() 0x7 << 4)

1443 
	#AT91C_CAN_PROPAG
 (() 0x7 << 8)

1444 
	#AT91C_CAN_SYNC
 (() 0x3 << 12)

1445 
	#AT91C_CAN_BRP
 (() 0x7F << 16)

1446 
	#AT91C_CAN_SMP
 (() 0x1 << 24)

1448 
	#AT91C_CAN_TIMER
 (() 0xFFFF << 0)

1451 
	#AT91C_CAN_REC
 (() 0xFF << 0)

1452 
	#AT91C_CAN_TEC
 (() 0xFF << 16)

1454 
	#AT91C_CAN_TIMRST
 (() 0x1 << 31)

1456 

	)

1460 
	s_AT91S_EMAC
 {

1461 
AT91_REG
 
	mEMAC_NCR
;

1462 
AT91_REG
 
	mEMAC_NCFGR
;

1463 
AT91_REG
 
	mEMAC_NSR
;

1464 
AT91_REG
 
	mRe£rved0
[2];

1465 
AT91_REG
 
	mEMAC_TSR
;

1466 
AT91_REG
 
	mEMAC_RBQP
;

1467 
AT91_REG
 
	mEMAC_TBQP
;

1468 
AT91_REG
 
	mEMAC_RSR
;

1469 
AT91_REG
 
	mEMAC_ISR
;

1470 
AT91_REG
 
	mEMAC_IER
;

1471 
AT91_REG
 
	mEMAC_IDR
;

1472 
AT91_REG
 
	mEMAC_IMR
;

1473 
AT91_REG
 
	mEMAC_MAN
;

1474 
AT91_REG
 
	mEMAC_PTR
;

1475 
AT91_REG
 
	mEMAC_PFR
;

1476 
AT91_REG
 
	mEMAC_FTO
;

1477 
AT91_REG
 
	mEMAC_SCF
;

1478 
AT91_REG
 
	mEMAC_MCF
;

1479 
AT91_REG
 
	mEMAC_FRO
;

1480 
AT91_REG
 
	mEMAC_FCSE
;

1481 
AT91_REG
 
	mEMAC_ALE
;

1482 
AT91_REG
 
	mEMAC_DTF
;

1483 
AT91_REG
 
	mEMAC_LCOL
;

1484 
AT91_REG
 
	mEMAC_ECOL
;

1485 
AT91_REG
 
	mEMAC_TUND
;

1486 
AT91_REG
 
	mEMAC_CSE
;

1487 
AT91_REG
 
	mEMAC_RRE
;

1488 
AT91_REG
 
	mEMAC_ROV
;

1489 
AT91_REG
 
	mEMAC_RSE
;

1490 
AT91_REG
 
	mEMAC_ELE
;

1491 
AT91_REG
 
	mEMAC_RJA
;

1492 
AT91_REG
 
	mEMAC_USF
;

1493 
AT91_REG
 
	mEMAC_STE
;

1494 
AT91_REG
 
	mEMAC_RLE
;

1495 
AT91_REG
 
	mEMAC_TPF
;

1496 
AT91_REG
 
	mEMAC_HRB
;

1497 
AT91_REG
 
	mEMAC_HRT
;

1498 
AT91_REG
 
	mEMAC_SA1L
;

1499 
AT91_REG
 
	mEMAC_SA1H
;

1500 
AT91_REG
 
	mEMAC_SA2L
;

1501 
AT91_REG
 
	mEMAC_SA2H
;

1502 
AT91_REG
 
	mEMAC_SA3L
;

1503 
AT91_REG
 
	mEMAC_SA3H
;

1504 
AT91_REG
 
	mEMAC_SA4L
;

1505 
AT91_REG
 
	mEMAC_SA4H
;

1506 
AT91_REG
 
	mEMAC_TID
;

1507 
AT91_REG
 
	mEMAC_TPQ
;

1508 
AT91_REG
 
	mEMAC_USRIO
;

1509 
AT91_REG
 
	mEMAC_WOL
;

1510 
AT91_REG
 
	mRe£rved1
[13];

1511 
AT91_REG
 
	mEMAC_REV
;

1512 } 
	tAT91S_EMAC
, *
	tAT91PS_EMAC
;

1515 
	#AT91C_EMAC_LB
 (() 0x1 << 0)

1516 
	#AT91C_EMAC_LLB
 (() 0x1 << 1)

1517 
	#AT91C_EMAC_RE
 (() 0x1 << 2)

1518 
	#AT91C_EMAC_TE
 (() 0x1 << 3)

1519 
	#AT91C_EMAC_MPE
 (() 0x1 << 4)

1520 
	#AT91C_EMAC_CLRSTAT
 (() 0x1 << 5)

1521 
	#AT91C_EMAC_INCSTAT
 (() 0x1 << 6)

1522 
	#AT91C_EMAC_WESTAT
 (() 0x1 << 7)

1523 
	#AT91C_EMAC_BP
 (() 0x1 << 8)

1524 
	#AT91C_EMAC_TSTART
 (() 0x1 << 9)

1525 
	#AT91C_EMAC_THALT
 (() 0x1 << 10)

1526 
	#AT91C_EMAC_TPFR
 (() 0x1 << 11)

1527 
	#AT91C_EMAC_TZQ
 (() 0x1 << 12)

1529 
	#AT91C_EMAC_SPD
 (() 0x1 << 0)

1530 
	#AT91C_EMAC_FD
 (() 0x1 << 1)

1531 
	#AT91C_EMAC_JFRAME
 (() 0x1 << 3)

1532 
	#AT91C_EMAC_CAF
 (() 0x1 << 4)

1533 
	#AT91C_EMAC_NBC
 (() 0x1 << 5)

1534 
	#AT91C_EMAC_MTI
 (() 0x1 << 6)

1535 
	#AT91C_EMAC_UNI
 (() 0x1 << 7)

1536 
	#AT91C_EMAC_BIG
 (() 0x1 << 8)

1537 
	#AT91C_EMAC_EAE
 (() 0x1 << 9)

1538 
	#AT91C_EMAC_CLK
 (() 0x3 << 10)

1539 
	#AT91C_EMAC_CLK_HCLK_8
 (() 0x0 << 10)

1540 
	#AT91C_EMAC_CLK_HCLK_16
 (() 0x1 << 10)

1541 
	#AT91C_EMAC_CLK_HCLK_32
 (() 0x2 << 10)

1542 
	#AT91C_EMAC_CLK_HCLK_64
 (() 0x3 << 10)

1543 
	#AT91C_EMAC_RTY
 (() 0x1 << 12)

1544 
	#AT91C_EMAC_PAE
 (() 0x1 << 13)

1545 
	#AT91C_EMAC_RBOF
 (() 0x3 << 14)

1546 
	#AT91C_EMAC_RBOF_OFFSET_0
 (() 0x0 << 14)

1547 
	#AT91C_EMAC_RBOF_OFFSET_1
 (() 0x1 << 14)

1548 
	#AT91C_EMAC_RBOF_OFFSET_2
 (() 0x2 << 14)

1549 
	#AT91C_EMAC_RBOF_OFFSET_3
 (() 0x3 << 14)

1550 
	#AT91C_EMAC_RLCE
 (() 0x1 << 16)

1551 
	#AT91C_EMAC_DRFCS
 (() 0x1 << 17)

1552 
	#AT91C_EMAC_EFRHD
 (() 0x1 << 18)

1553 
	#AT91C_EMAC_IRXFCS
 (() 0x1 << 19)

1555 
	#AT91C_EMAC_LINKR
 (() 0x1 << 0)

1556 
	#AT91C_EMAC_MDIO
 (() 0x1 << 1)

1557 
	#AT91C_EMAC_IDLE
 (() 0x1 << 2)

1559 
	#AT91C_EMAC_UBR
 (() 0x1 << 0)

1560 
	#AT91C_EMAC_COL
 (() 0x1 << 1)

1561 
	#AT91C_EMAC_RLES
 (() 0x1 << 2)

1562 
	#AT91C_EMAC_TGO
 (() 0x1 << 3)

1563 
	#AT91C_EMAC_BEX
 (() 0x1 << 4)

1564 
	#AT91C_EMAC_COMP
 (() 0x1 << 5)

1565 
	#AT91C_EMAC_UND
 (() 0x1 << 6)

1567 
	#AT91C_EMAC_BNA
 (() 0x1 << 0)

1568 
	#AT91C_EMAC_REC
 (() 0x1 << 1)

1569 
	#AT91C_EMAC_OVR
 (() 0x1 << 2)

1571 
	#AT91C_EMAC_MFD
 (() 0x1 << 0)

1572 
	#AT91C_EMAC_RCOMP
 (() 0x1 << 1)

1573 
	#AT91C_EMAC_RXUBR
 (() 0x1 << 2)

1574 
	#AT91C_EMAC_TXUBR
 (() 0x1 << 3)

1575 
	#AT91C_EMAC_TUNDR
 (() 0x1 << 4)

1576 
	#AT91C_EMAC_RLEX
 (() 0x1 << 5)

1577 
	#AT91C_EMAC_TXERR
 (() 0x1 << 6)

1578 
	#AT91C_EMAC_TCOMP
 (() 0x1 << 7)

1579 
	#AT91C_EMAC_LINK
 (() 0x1 << 9)

1580 
	#AT91C_EMAC_ROVR
 (() 0x1 << 10)

1581 
	#AT91C_EMAC_HRESP
 (() 0x1 << 11)

1582 
	#AT91C_EMAC_PFRE
 (() 0x1 << 12)

1583 
	#AT91C_EMAC_PTZ
 (() 0x1 << 13)

1588 
	#AT91C_EMAC_DATA
 (() 0xFFFF << 0)

1589 
	#AT91C_EMAC_CODE
 (() 0x3 << 16)

1590 
	#AT91C_EMAC_REGA
 (() 0x1F << 18)

1591 
	#AT91C_EMAC_PHYA
 (() 0x1F << 23)

1592 
	#AT91C_EMAC_RW
 (() 0x3 << 28)

1593 
	#AT91C_EMAC_SOF
 (() 0x3 << 30)

1595 
	#AT91C_EMAC_RMII
 (() 0x1 << 0)

1597 
	#AT91C_EMAC_IP
 (() 0xFFFF << 0)

1598 
	#AT91C_EMAC_MAG
 (() 0x1 << 16)

1599 
	#AT91C_EMAC_ARP
 (() 0x1 << 17)

1600 
	#AT91C_EMAC_SA1
 (() 0x1 << 18)

1602 
	#AT91C_EMAC_REVREF
 (() 0xFFFF << 0)

1603 
	#AT91C_EMAC_PARTREF
 (() 0xFFFF << 16)

1604 

	)

1608 
	s_AT91S_ADC
 {

1609 
AT91_REG
 
	mADC_CR
;

1610 
AT91_REG
 
	mADC_MR
;

1611 
AT91_REG
 
	mRe£rved0
[2];

1612 
AT91_REG
 
	mADC_CHER
;

1613 
AT91_REG
 
	mADC_CHDR
;

1614 
AT91_REG
 
	mADC_CHSR
;

1615 
AT91_REG
 
	mADC_SR
;

1616 
AT91_REG
 
	mADC_LCDR
;

1617 
AT91_REG
 
	mADC_IER
;

1618 
AT91_REG
 
	mADC_IDR
;

1619 
AT91_REG
 
	mADC_IMR
;

1620 
AT91_REG
 
	mADC_CDR0
;

1621 
AT91_REG
 
	mADC_CDR1
;

1622 
AT91_REG
 
	mADC_CDR2
;

1623 
AT91_REG
 
	mADC_CDR3
;

1624 
AT91_REG
 
	mADC_CDR4
;

1625 
AT91_REG
 
	mADC_CDR5
;

1626 
AT91_REG
 
	mADC_CDR6
;

1627 
AT91_REG
 
	mADC_CDR7
;

1628 
AT91_REG
 
	mRe£rved1
[44];

1629 
AT91_REG
 
	mADC_RPR
;

1630 
AT91_REG
 
	mADC_RCR
;

1631 
AT91_REG
 
	mADC_TPR
;

1632 
AT91_REG
 
	mADC_TCR
;

1633 
AT91_REG
 
	mADC_RNPR
;

1634 
AT91_REG
 
	mADC_RNCR
;

1635 
AT91_REG
 
	mADC_TNPR
;

1636 
AT91_REG
 
	mADC_TNCR
;

1637 
AT91_REG
 
	mADC_PTCR
;

1638 
AT91_REG
 
	mADC_PTSR
;

1639 } 
	tAT91S_ADC
, *
	tAT91PS_ADC
;

1642 
	#AT91C_ADC_SWRST
 (() 0x1 << 0)

1643 
	#AT91C_ADC_START
 (() 0x1 << 1)

1645 
	#AT91C_ADC_TRGEN
 (() 0x1 << 0)

1646 
	#AT91C_ADC_TRGEN_DIS
 (() 0x0)

1647 
	#AT91C_ADC_TRGEN_EN
 (() 0x1)

1648 
	#AT91C_ADC_TRGSEL
 (() 0x7 << 1)

1649 
	#AT91C_ADC_TRGSEL_TIOA0
 (() 0x0 << 1)

1650 
	#AT91C_ADC_TRGSEL_TIOA1
 (() 0x1 << 1)

1651 
	#AT91C_ADC_TRGSEL_TIOA2
 (() 0x2 << 1)

1652 
	#AT91C_ADC_TRGSEL_TIOA3
 (() 0x3 << 1)

1653 
	#AT91C_ADC_TRGSEL_TIOA4
 (() 0x4 << 1)

1654 
	#AT91C_ADC_TRGSEL_TIOA5
 (() 0x5 << 1)

1655 
	#AT91C_ADC_TRGSEL_EXT
 (() 0x6 << 1)

1656 
	#AT91C_ADC_LOWRES
 (() 0x1 << 4)

1657 
	#AT91C_ADC_LOWRES_10_BIT
 (() 0x0 << 4)

1658 
	#AT91C_ADC_LOWRES_8_BIT
 (() 0x1 << 4)

1659 
	#AT91C_ADC_SLEEP
 (() 0x1 << 5)

1660 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (() 0x0 << 5)

1661 
	#AT91C_ADC_SLEEP_MODE
 (() 0x1 << 5)

1662 
	#AT91C_ADC_PRESCAL
 (() 0x3F << 8)

1663 
	#AT91C_ADC_STARTUP
 (() 0x1F << 16)

1664 
	#AT91C_ADC_SHTIM
 (() 0xF << 24)

1666 
	#AT91C_ADC_CH0
 (() 0x1 << 0)

1667 
	#AT91C_ADC_CH1
 (() 0x1 << 1)

1668 
	#AT91C_ADC_CH2
 (() 0x1 << 2)

1669 
	#AT91C_ADC_CH3
 (() 0x1 << 3)

1670 
	#AT91C_ADC_CH4
 (() 0x1 << 4)

1671 
	#AT91C_ADC_CH5
 (() 0x1 << 5)

1672 
	#AT91C_ADC_CH6
 (() 0x1 << 6)

1673 
	#AT91C_ADC_CH7
 (() 0x1 << 7)

1677 
	#AT91C_ADC_EOC0
 (() 0x1 << 0)

1678 
	#AT91C_ADC_EOC1
 (() 0x1 << 1)

1679 
	#AT91C_ADC_EOC2
 (() 0x1 << 2)

1680 
	#AT91C_ADC_EOC3
 (() 0x1 << 3)

1681 
	#AT91C_ADC_EOC4
 (() 0x1 << 4)

1682 
	#AT91C_ADC_EOC5
 (() 0x1 << 5)

1683 
	#AT91C_ADC_EOC6
 (() 0x1 << 6)

1684 
	#AT91C_ADC_EOC7
 (() 0x1 << 7)

1685 
	#AT91C_ADC_OVRE0
 (() 0x1 << 8)

1686 
	#AT91C_ADC_OVRE1
 (() 0x1 << 9)

1687 
	#AT91C_ADC_OVRE2
 (() 0x1 << 10)

1688 
	#AT91C_ADC_OVRE3
 (() 0x1 << 11)

1689 
	#AT91C_ADC_OVRE4
 (() 0x1 << 12)

1690 
	#AT91C_ADC_OVRE5
 (() 0x1 << 13)

1691 
	#AT91C_ADC_OVRE6
 (() 0x1 << 14)

1692 
	#AT91C_ADC_OVRE7
 (() 0x1 << 15)

1693 
	#AT91C_ADC_DRDY
 (() 0x1 << 16)

1694 
	#AT91C_ADC_GOVRE
 (() 0x1 << 17)

1695 
	#AT91C_ADC_ENDRX
 (() 0x1 << 18)

1696 
	#AT91C_ADC_RXBUFF
 (() 0x1 << 19)

1698 
	#AT91C_ADC_LDATA
 (() 0x3FF << 0)

1703 
	#AT91C_ADC_DATA
 (() 0x3FF << 0)

1711 

	)

1715 
	s_AT91S_AES
 {

1716 
AT91_REG
 
	mAES_CR
;

1717 
AT91_REG
 
	mAES_MR
;

1718 
AT91_REG
 
	mRe£rved0
[2];

1719 
AT91_REG
 
	mAES_IER
;

1720 
AT91_REG
 
	mAES_IDR
;

1721 
AT91_REG
 
	mAES_IMR
;

1722 
AT91_REG
 
	mAES_ISR
;

1723 
AT91_REG
 
	mAES_KEYWxR
[4];

1724 
AT91_REG
 
	mRe£rved1
[4];

1725 
AT91_REG
 
	mAES_IDATAxR
[4];

1726 
AT91_REG
 
	mAES_ODATAxR
[4];

1727 
AT91_REG
 
	mAES_IVxR
[4];

1728 
AT91_REG
 
	mRe£rved2
[35];

1729 
AT91_REG
 
	mAES_VR
;

1730 
AT91_REG
 
	mAES_RPR
;

1731 
AT91_REG
 
	mAES_RCR
;

1732 
AT91_REG
 
	mAES_TPR
;

1733 
AT91_REG
 
	mAES_TCR
;

1734 
AT91_REG
 
	mAES_RNPR
;

1735 
AT91_REG
 
	mAES_RNCR
;

1736 
AT91_REG
 
	mAES_TNPR
;

1737 
AT91_REG
 
	mAES_TNCR
;

1738 
AT91_REG
 
	mAES_PTCR
;

1739 
AT91_REG
 
	mAES_PTSR
;

1740 } 
	tAT91S_AES
, *
	tAT91PS_AES
;

1743 
	#AT91C_AES_START
 (() 0x1 << 0)

1744 
	#AT91C_AES_SWRST
 (() 0x1 << 8)

1745 
	#AT91C_AES_LOADSEED
 (() 0x1 << 16)

1747 
	#AT91C_AES_CIPHER
 (() 0x1 << 0)

1748 
	#AT91C_AES_PROCDLY
 (() 0xF << 4)

1749 
	#AT91C_AES_SMOD
 (() 0x3 << 8)

1750 
	#AT91C_AES_SMOD_MANUAL
 (() 0x0 << 8)

1751 
	#AT91C_AES_SMOD_AUTO
 (() 0x1 << 8)

1752 
	#AT91C_AES_SMOD_PDC
 (() 0x2 << 8)

1753 
	#AT91C_AES_OPMOD
 (() 0x7 << 12)

1754 
	#AT91C_AES_OPMOD_ECB
 (() 0x0 << 12)

1755 
	#AT91C_AES_OPMOD_CBC
 (() 0x1 << 12)

1756 
	#AT91C_AES_OPMOD_OFB
 (() 0x2 << 12)

1757 
	#AT91C_AES_OPMOD_CFB
 (() 0x3 << 12)

1758 
	#AT91C_AES_OPMOD_CTR
 (() 0x4 << 12)

1759 
	#AT91C_AES_LOD
 (() 0x1 << 15)

1760 
	#AT91C_AES_CFBS
 (() 0x7 << 16)

1761 
	#AT91C_AES_CFBS_128_BIT
 (() 0x0 << 16)

1762 
	#AT91C_AES_CFBS_64_BIT
 (() 0x1 << 16)

1763 
	#AT91C_AES_CFBS_32_BIT
 (() 0x2 << 16)

1764 
	#AT91C_AES_CFBS_16_BIT
 (() 0x3 << 16)

1765 
	#AT91C_AES_CFBS_8_BIT
 (() 0x4 << 16)

1766 
	#AT91C_AES_CKEY
 (() 0xF << 20)

1767 
	#AT91C_AES_CTYPE
 (() 0x1F << 24)

1768 
	#AT91C_AES_CTYPE_TYPE1_EN
 (() 0x1 << 24)

1769 
	#AT91C_AES_CTYPE_TYPE2_EN
 (() 0x2 << 24)

1770 
	#AT91C_AES_CTYPE_TYPE3_EN
 (() 0x4 << 24)

1771 
	#AT91C_AES_CTYPE_TYPE4_EN
 (() 0x8 << 24)

1772 
	#AT91C_AES_CTYPE_TYPE5_EN
 (() 0x10 << 24)

1774 
	#AT91C_AES_DATRDY
 (() 0x1 << 0)

1775 
	#AT91C_AES_ENDRX
 (() 0x1 << 1)

1776 
	#AT91C_AES_ENDTX
 (() 0x1 << 2)

1777 
	#AT91C_AES_RXBUFF
 (() 0x1 << 3)

1778 
	#AT91C_AES_TXBUFE
 (() 0x1 << 4)

1779 
	#AT91C_AES_URAD
 (() 0x1 << 8)

1783 
	#AT91C_AES_URAT
 (() 0x7 << 12)

1784 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1785 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1786 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1787 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (() 0x3 << 12)

1788 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (() 0x4 << 12)

1789 
	#AT91C_AES_URAT_WO_REG_READ
 (() 0x5 << 12)

1790 

	)

1794 
	s_AT91S_TDES
 {

1795 
AT91_REG
 
	mTDES_CR
;

1796 
AT91_REG
 
	mTDES_MR
;

1797 
AT91_REG
 
	mRe£rved0
[2];

1798 
AT91_REG
 
	mTDES_IER
;

1799 
AT91_REG
 
	mTDES_IDR
;

1800 
AT91_REG
 
	mTDES_IMR
;

1801 
AT91_REG
 
	mTDES_ISR
;

1802 
AT91_REG
 
	mTDES_KEY1WxR
[2];

1803 
AT91_REG
 
	mTDES_KEY2WxR
[2];

1804 
AT91_REG
 
	mTDES_KEY3WxR
[2];

1805 
AT91_REG
 
	mRe£rved1
[2];

1806 
AT91_REG
 
	mTDES_IDATAxR
[2];

1807 
AT91_REG
 
	mRe£rved2
[2];

1808 
AT91_REG
 
	mTDES_ODATAxR
[2];

1809 
AT91_REG
 
	mRe£rved3
[2];

1810 
AT91_REG
 
	mTDES_IVxR
[2];

1811 
AT91_REG
 
	mRe£rved4
[37];

1812 
AT91_REG
 
	mTDES_VR
;

1813 
AT91_REG
 
	mTDES_RPR
;

1814 
AT91_REG
 
	mTDES_RCR
;

1815 
AT91_REG
 
	mTDES_TPR
;

1816 
AT91_REG
 
	mTDES_TCR
;

1817 
AT91_REG
 
	mTDES_RNPR
;

1818 
AT91_REG
 
	mTDES_RNCR
;

1819 
AT91_REG
 
	mTDES_TNPR
;

1820 
AT91_REG
 
	mTDES_TNCR
;

1821 
AT91_REG
 
	mTDES_PTCR
;

1822 
AT91_REG
 
	mTDES_PTSR
;

1823 } 
	tAT91S_TDES
, *
	tAT91PS_TDES
;

1826 
	#AT91C_TDES_START
 (() 0x1 << 0)

1827 
	#AT91C_TDES_SWRST
 (() 0x1 << 8)

1829 
	#AT91C_TDES_CIPHER
 (() 0x1 << 0)

1830 
	#AT91C_TDES_TDESMOD
 (() 0x1 << 1)

1831 
	#AT91C_TDES_KEYMOD
 (() 0x1 << 4)

1832 
	#AT91C_TDES_SMOD
 (() 0x3 << 8)

1833 
	#AT91C_TDES_SMOD_MANUAL
 (() 0x0 << 8)

1834 
	#AT91C_TDES_SMOD_AUTO
 (() 0x1 << 8)

1835 
	#AT91C_TDES_SMOD_PDC
 (() 0x2 << 8)

1836 
	#AT91C_TDES_OPMOD
 (() 0x3 << 12)

1837 
	#AT91C_TDES_OPMOD_ECB
 (() 0x0 << 12)

1838 
	#AT91C_TDES_OPMOD_CBC
 (() 0x1 << 12)

1839 
	#AT91C_TDES_OPMOD_OFB
 (() 0x2 << 12)

1840 
	#AT91C_TDES_OPMOD_CFB
 (() 0x3 << 12)

1841 
	#AT91C_TDES_LOD
 (() 0x1 << 15)

1842 
	#AT91C_TDES_CFBS
 (() 0x3 << 16)

1843 
	#AT91C_TDES_CFBS_64_BIT
 (() 0x0 << 16)

1844 
	#AT91C_TDES_CFBS_32_BIT
 (() 0x1 << 16)

1845 
	#AT91C_TDES_CFBS_16_BIT
 (() 0x2 << 16)

1846 
	#AT91C_TDES_CFBS_8_BIT
 (() 0x3 << 16)

1848 
	#AT91C_TDES_DATRDY
 (() 0x1 << 0)

1849 
	#AT91C_TDES_ENDRX
 (() 0x1 << 1)

1850 
	#AT91C_TDES_ENDTX
 (() 0x1 << 2)

1851 
	#AT91C_TDES_RXBUFF
 (() 0x1 << 3)

1852 
	#AT91C_TDES_TXBUFE
 (() 0x1 << 4)

1853 
	#AT91C_TDES_URAD
 (() 0x1 << 8)

1857 
	#AT91C_TDES_URAT
 (() 0x3 << 12)

1858 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (() 0x0 << 12)

1859 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (() 0x1 << 12)

1860 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (() 0x2 << 12)

1861 
	#AT91C_TDES_URAT_WO_REG_READ
 (() 0x3 << 12)

1862 

	)

1868 
	#AT91C_AIC_IVR
 ((
AT91_REG
 *) 0xFFFFF100)

1869 
	#AT91C_AIC_SMR
 ((
AT91_REG
 *) 0xFFFFF000)

1870 
	#AT91C_AIC_FVR
 ((
AT91_REG
 *) 0xFFFFF104)

1871 
	#AT91C_AIC_DCR
 ((
AT91_REG
 *) 0xFFFFF138)

1872 
	#AT91C_AIC_EOICR
 ((
AT91_REG
 *) 0xFFFFF130)

1873 
	#AT91C_AIC_SVR
 ((
AT91_REG
 *) 0xFFFFF080)

1874 
	#AT91C_AIC_FFSR
 ((
AT91_REG
 *) 0xFFFFF148)

1875 
	#AT91C_AIC_ICCR
 ((
AT91_REG
 *) 0xFFFFF128)

1876 
	#AT91C_AIC_ISR
 ((
AT91_REG
 *) 0xFFFFF108)

1877 
	#AT91C_AIC_IMR
 ((
AT91_REG
 *) 0xFFFFF110)

1878 
	#AT91C_AIC_IPR
 ((
AT91_REG
 *) 0xFFFFF10C)

1879 
	#AT91C_AIC_FFER
 ((
AT91_REG
 *) 0xFFFFF140)

1880 
	#AT91C_AIC_IECR
 ((
AT91_REG
 *) 0xFFFFF120)

1881 
	#AT91C_AIC_ISCR
 ((
AT91_REG
 *) 0xFFFFF12C)

1882 
	#AT91C_AIC_FFDR
 ((
AT91_REG
 *) 0xFFFFF144)

1883 
	#AT91C_AIC_CISR
 ((
AT91_REG
 *) 0xFFFFF114)

1884 
	#AT91C_AIC_IDCR
 ((
AT91_REG
 *) 0xFFFFF124)

1885 
	#AT91C_AIC_SPU
 ((
AT91_REG
 *) 0xFFFFF134)

1887 
	#AT91C_DBGU_TCR
 ((
AT91_REG
 *) 0xFFFFF30C)

1888 
	#AT91C_DBGU_RNPR
 ((
AT91_REG
 *) 0xFFFFF310)

1889 
	#AT91C_DBGU_TNPR
 ((
AT91_REG
 *) 0xFFFFF318)

1890 
	#AT91C_DBGU_TPR
 ((
AT91_REG
 *) 0xFFFFF308)

1891 
	#AT91C_DBGU_RPR
 ((
AT91_REG
 *) 0xFFFFF300)

1892 
	#AT91C_DBGU_RCR
 ((
AT91_REG
 *) 0xFFFFF304)

1893 
	#AT91C_DBGU_RNCR
 ((
AT91_REG
 *) 0xFFFFF314)

1894 
	#AT91C_DBGU_PTCR
 ((
AT91_REG
 *) 0xFFFFF320)

1895 
	#AT91C_DBGU_PTSR
 ((
AT91_REG
 *) 0xFFFFF324)

1896 
	#AT91C_DBGU_TNCR
 ((
AT91_REG
 *) 0xFFFFF31C)

1898 
	#AT91C_DBGU_EXID
 ((
AT91_REG
 *) 0xFFFFF244)

1899 
	#AT91C_DBGU_BRGR
 ((
AT91_REG
 *) 0xFFFFF220)

1900 
	#AT91C_DBGU_IDR
 ((
AT91_REG
 *) 0xFFFFF20C)

1901 
	#AT91C_DBGU_CSR
 ((
AT91_REG
 *) 0xFFFFF214)

1902 
	#AT91C_DBGU_CIDR
 ((
AT91_REG
 *) 0xFFFFF240)

1903 
	#AT91C_DBGU_MR
 ((
AT91_REG
 *) 0xFFFFF204)

1904 
	#AT91C_DBGU_IMR
 ((
AT91_REG
 *) 0xFFFFF210)

1905 
	#AT91C_DBGU_CR
 ((
AT91_REG
 *) 0xFFFFF200)

1906 
	#AT91C_DBGU_FNTR
 ((
AT91_REG
 *) 0xFFFFF248)

1907 
	#AT91C_DBGU_THR
 ((
AT91_REG
 *) 0xFFFFF21C)

1908 
	#AT91C_DBGU_RHR
 ((
AT91_REG
 *) 0xFFFFF218)

1909 
	#AT91C_DBGU_IER
 ((
AT91_REG
 *) 0xFFFFF208)

1911 
	#AT91C_PIOA_ODR
 ((
AT91_REG
 *) 0xFFFFF414)

1912 
	#AT91C_PIOA_SODR
 ((
AT91_REG
 *) 0xFFFFF430)

1913 
	#AT91C_PIOA_ISR
 ((
AT91_REG
 *) 0xFFFFF44C)

1914 
	#AT91C_PIOA_ABSR
 ((
AT91_REG
 *) 0xFFFFF478)

1915 
	#AT91C_PIOA_IER
 ((
AT91_REG
 *) 0xFFFFF440)

1916 
	#AT91C_PIOA_PPUDR
 ((
AT91_REG
 *) 0xFFFFF460)

1917 
	#AT91C_PIOA_IMR
 ((
AT91_REG
 *) 0xFFFFF448)

1918 
	#AT91C_PIOA_PER
 ((
AT91_REG
 *) 0xFFFFF400)

1919 
	#AT91C_PIOA_IFDR
 ((
AT91_REG
 *) 0xFFFFF424)

1920 
	#AT91C_PIOA_OWDR
 ((
AT91_REG
 *) 0xFFFFF4A4)

1921 
	#AT91C_PIOA_MDSR
 ((
AT91_REG
 *) 0xFFFFF458)

1922 
	#AT91C_PIOA_IDR
 ((
AT91_REG
 *) 0xFFFFF444)

1923 
	#AT91C_PIOA_ODSR
 ((
AT91_REG
 *) 0xFFFFF438)

1924 
	#AT91C_PIOA_PPUSR
 ((
AT91_REG
 *) 0xFFFFF468)

1925 
	#AT91C_PIOA_OWSR
 ((
AT91_REG
 *) 0xFFFFF4A8)

1926 
	#AT91C_PIOA_BSR
 ((
AT91_REG
 *) 0xFFFFF474)

1927 
	#AT91C_PIOA_OWER
 ((
AT91_REG
 *) 0xFFFFF4A0)

1928 
	#AT91C_PIOA_IFER
 ((
AT91_REG
 *) 0xFFFFF420)

1929 
	#AT91C_PIOA_PDSR
 ((
AT91_REG
 *) 0xFFFFF43C)

1930 
	#AT91C_PIOA_PPUER
 ((
AT91_REG
 *) 0xFFFFF464)

1931 
	#AT91C_PIOA_OSR
 ((
AT91_REG
 *) 0xFFFFF418)

1932 
	#AT91C_PIOA_ASR
 ((
AT91_REG
 *) 0xFFFFF470)

1933 
	#AT91C_PIOA_MDDR
 ((
AT91_REG
 *) 0xFFFFF454)

1934 
	#AT91C_PIOA_CODR
 ((
AT91_REG
 *) 0xFFFFF434)

1935 
	#AT91C_PIOA_MDER
 ((
AT91_REG
 *) 0xFFFFF450)

1936 
	#AT91C_PIOA_PDR
 ((
AT91_REG
 *) 0xFFFFF404)

1937 
	#AT91C_PIOA_IFSR
 ((
AT91_REG
 *) 0xFFFFF428)

1938 
	#AT91C_PIOA_OER
 ((
AT91_REG
 *) 0xFFFFF410)

1939 
	#AT91C_PIOA_PSR
 ((
AT91_REG
 *) 0xFFFFF408)

1941 
	#AT91C_PIOB_OWDR
 ((
AT91_REG
 *) 0xFFFFF6A4)

1942 
	#AT91C_PIOB_MDER
 ((
AT91_REG
 *) 0xFFFFF650)

1943 
	#AT91C_PIOB_PPUSR
 ((
AT91_REG
 *) 0xFFFFF668)

1944 
	#AT91C_PIOB_IMR
 ((
AT91_REG
 *) 0xFFFFF648)

1945 
	#AT91C_PIOB_ASR
 ((
AT91_REG
 *) 0xFFFFF670)

1946 
	#AT91C_PIOB_PPUDR
 ((
AT91_REG
 *) 0xFFFFF660)

1947 
	#AT91C_PIOB_PSR
 ((
AT91_REG
 *) 0xFFFFF608)

1948 
	#AT91C_PIOB_IER
 ((
AT91_REG
 *) 0xFFFFF640)

1949 
	#AT91C_PIOB_CODR
 ((
AT91_REG
 *) 0xFFFFF634)

1950 
	#AT91C_PIOB_OWER
 ((
AT91_REG
 *) 0xFFFFF6A0)

1951 
	#AT91C_PIOB_ABSR
 ((
AT91_REG
 *) 0xFFFFF678)

1952 
	#AT91C_PIOB_IFDR
 ((
AT91_REG
 *) 0xFFFFF624)

1953 
	#AT91C_PIOB_PDSR
 ((
AT91_REG
 *) 0xFFFFF63C)

1954 
	#AT91C_PIOB_IDR
 ((
AT91_REG
 *) 0xFFFFF644)

1955 
	#AT91C_PIOB_OWSR
 ((
AT91_REG
 *) 0xFFFFF6A8)

1956 
	#AT91C_PIOB_PDR
 ((
AT91_REG
 *) 0xFFFFF604)

1957 
	#AT91C_PIOB_ODR
 ((
AT91_REG
 *) 0xFFFFF614)

1958 
	#AT91C_PIOB_IFSR
 ((
AT91_REG
 *) 0xFFFFF628)

1959 
	#AT91C_PIOB_PPUER
 ((
AT91_REG
 *) 0xFFFFF664)

1960 
	#AT91C_PIOB_SODR
 ((
AT91_REG
 *) 0xFFFFF630)

1961 
	#AT91C_PIOB_ISR
 ((
AT91_REG
 *) 0xFFFFF64C)

1962 
	#AT91C_PIOB_ODSR
 ((
AT91_REG
 *) 0xFFFFF638)

1963 
	#AT91C_PIOB_OSR
 ((
AT91_REG
 *) 0xFFFFF618)

1964 
	#AT91C_PIOB_MDSR
 ((
AT91_REG
 *) 0xFFFFF658)

1965 
	#AT91C_PIOB_IFER
 ((
AT91_REG
 *) 0xFFFFF620)

1966 
	#AT91C_PIOB_BSR
 ((
AT91_REG
 *) 0xFFFFF674)

1967 
	#AT91C_PIOB_MDDR
 ((
AT91_REG
 *) 0xFFFFF654)

1968 
	#AT91C_PIOB_OER
 ((
AT91_REG
 *) 0xFFFFF610)

1969 
	#AT91C_PIOB_PER
 ((
AT91_REG
 *) 0xFFFFF600)

1971 
	#AT91C_CKGR_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1972 
	#AT91C_CKGR_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1973 
	#AT91C_CKGR_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1975 
	#AT91C_PMC_IDR
 ((
AT91_REG
 *) 0xFFFFFC64)

1976 
	#AT91C_PMC_MOR
 ((
AT91_REG
 *) 0xFFFFFC20)

1977 
	#AT91C_PMC_PLLR
 ((
AT91_REG
 *) 0xFFFFFC2C)

1978 
	#AT91C_PMC_PCER
 ((
AT91_REG
 *) 0xFFFFFC10)

1979 
	#AT91C_PMC_PCKR
 ((
AT91_REG
 *) 0xFFFFFC40)

1980 
	#AT91C_PMC_MCKR
 ((
AT91_REG
 *) 0xFFFFFC30)

1981 
	#AT91C_PMC_SCDR
 ((
AT91_REG
 *) 0xFFFFFC04)

1982 
	#AT91C_PMC_PCDR
 ((
AT91_REG
 *) 0xFFFFFC14)

1983 
	#AT91C_PMC_SCSR
 ((
AT91_REG
 *) 0xFFFFFC08)

1984 
	#AT91C_PMC_PCSR
 ((
AT91_REG
 *) 0xFFFFFC18)

1985 
	#AT91C_PMC_MCFR
 ((
AT91_REG
 *) 0xFFFFFC24)

1986 
	#AT91C_PMC_SCER
 ((
AT91_REG
 *) 0xFFFFFC00)

1987 
	#AT91C_PMC_IMR
 ((
AT91_REG
 *) 0xFFFFFC6C)

1988 
	#AT91C_PMC_IER
 ((
AT91_REG
 *) 0xFFFFFC60)

1989 
	#AT91C_PMC_SR
 ((
AT91_REG
 *) 0xFFFFFC68)

1991 
	#AT91C_RSTC_RCR
 ((
AT91_REG
 *) 0xFFFFFD00)

1992 
	#AT91C_RSTC_RMR
 ((
AT91_REG
 *) 0xFFFFFD08)

1993 
	#AT91C_RSTC_RSR
 ((
AT91_REG
 *) 0xFFFFFD04)

1995 
	#AT91C_RTTC_RTSR
 ((
AT91_REG
 *) 0xFFFFFD2C)

1996 
	#AT91C_RTTC_RTMR
 ((
AT91_REG
 *) 0xFFFFFD20)

1997 
	#AT91C_RTTC_RTVR
 ((
AT91_REG
 *) 0xFFFFFD28)

1998 
	#AT91C_RTTC_RTAR
 ((
AT91_REG
 *) 0xFFFFFD24)

2000 
	#AT91C_PITC_PIVR
 ((
AT91_REG
 *) 0xFFFFFD38)

2001 
	#AT91C_PITC_PISR
 ((
AT91_REG
 *) 0xFFFFFD34)

2002 
	#AT91C_PITC_PIIR
 ((
AT91_REG
 *) 0xFFFFFD3C)

2003 
	#AT91C_PITC_PIMR
 ((
AT91_REG
 *) 0xFFFFFD30)

2005 
	#AT91C_WDTC_WDCR
 ((
AT91_REG
 *) 0xFFFFFD40)

2006 
	#AT91C_WDTC_WDSR
 ((
AT91_REG
 *) 0xFFFFFD48)

2007 
	#AT91C_WDTC_WDMR
 ((
AT91_REG
 *) 0xFFFFFD44)

2009 
	#AT91C_VREG_MR
 ((
AT91_REG
 *) 0xFFFFFD60)

2011 
	#AT91C_MC_ASR
 ((
AT91_REG
 *) 0xFFFFFF04)

2012 
	#AT91C_MC_RCR
 ((
AT91_REG
 *) 0xFFFFFF00)

2013 
	#AT91C_MC_FCR
 ((
AT91_REG
 *) 0xFFFFFF64)

2014 
	#AT91C_MC_AASR
 ((
AT91_REG
 *) 0xFFFFFF08)

2015 
	#AT91C_MC_FSR
 ((
AT91_REG
 *) 0xFFFFFF68)

2016 
	#AT91C_MC_FMR
 ((
AT91_REG
 *) 0xFFFFFF60)

2018 
	#AT91C_SPI1_PTCR
 ((
AT91_REG
 *) 0xFFFE4120)

2019 
	#AT91C_SPI1_RPR
 ((
AT91_REG
 *) 0xFFFE4100)

2020 
	#AT91C_SPI1_TNCR
 ((
AT91_REG
 *) 0xFFFE411C)

2021 
	#AT91C_SPI1_TPR
 ((
AT91_REG
 *) 0xFFFE4108)

2022 
	#AT91C_SPI1_TNPR
 ((
AT91_REG
 *) 0xFFFE4118)

2023 
	#AT91C_SPI1_TCR
 ((
AT91_REG
 *) 0xFFFE410C)

2024 
	#AT91C_SPI1_RCR
 ((
AT91_REG
 *) 0xFFFE4104)

2025 
	#AT91C_SPI1_RNPR
 ((
AT91_REG
 *) 0xFFFE4110)

2026 
	#AT91C_SPI1_RNCR
 ((
AT91_REG
 *) 0xFFFE4114)

2027 
	#AT91C_SPI1_PTSR
 ((
AT91_REG
 *) 0xFFFE4124)

2029 
	#AT91C_SPI1_IMR
 ((
AT91_REG
 *) 0xFFFE401C)

2030 
	#AT91C_SPI1_IER
 ((
AT91_REG
 *) 0xFFFE4014)

2031 
	#AT91C_SPI1_MR
 ((
AT91_REG
 *) 0xFFFE4004)

2032 
	#AT91C_SPI1_RDR
 ((
AT91_REG
 *) 0xFFFE4008)

2033 
	#AT91C_SPI1_IDR
 ((
AT91_REG
 *) 0xFFFE4018)

2034 
	#AT91C_SPI1_SR
 ((
AT91_REG
 *) 0xFFFE4010)

2035 
	#AT91C_SPI1_TDR
 ((
AT91_REG
 *) 0xFFFE400C)

2036 
	#AT91C_SPI1_CR
 ((
AT91_REG
 *) 0xFFFE4000)

2037 
	#AT91C_SPI1_CSR
 ((
AT91_REG
 *) 0xFFFE4030)

2039 
	#AT91C_SPI0_PTCR
 ((
AT91_REG
 *) 0xFFFE0120)

2040 
	#AT91C_SPI0_TPR
 ((
AT91_REG
 *) 0xFFFE0108)

2041 
	#AT91C_SPI0_TCR
 ((
AT91_REG
 *) 0xFFFE010C)

2042 
	#AT91C_SPI0_RCR
 ((
AT91_REG
 *) 0xFFFE0104)

2043 
	#AT91C_SPI0_PTSR
 ((
AT91_REG
 *) 0xFFFE0124)

2044 
	#AT91C_SPI0_RNPR
 ((
AT91_REG
 *) 0xFFFE0110)

2045 
	#AT91C_SPI0_RPR
 ((
AT91_REG
 *) 0xFFFE0100)

2046 
	#AT91C_SPI0_TNCR
 ((
AT91_REG
 *) 0xFFFE011C)

2047 
	#AT91C_SPI0_RNCR
 ((
AT91_REG
 *) 0xFFFE0114)

2048 
	#AT91C_SPI0_TNPR
 ((
AT91_REG
 *) 0xFFFE0118)

2050 
	#AT91C_SPI0_IER
 ((
AT91_REG
 *) 0xFFFE0014)

2051 
	#AT91C_SPI0_SR
 ((
AT91_REG
 *) 0xFFFE0010)

2052 
	#AT91C_SPI0_IDR
 ((
AT91_REG
 *) 0xFFFE0018)

2053 
	#AT91C_SPI0_CR
 ((
AT91_REG
 *) 0xFFFE0000)

2054 
	#AT91C_SPI0_MR
 ((
AT91_REG
 *) 0xFFFE0004)

2055 
	#AT91C_SPI0_IMR
 ((
AT91_REG
 *) 0xFFFE001C)

2056 
	#AT91C_SPI0_TDR
 ((
AT91_REG
 *) 0xFFFE000C)

2057 
	#AT91C_SPI0_RDR
 ((
AT91_REG
 *) 0xFFFE0008)

2058 
	#AT91C_SPI0_CSR
 ((
AT91_REG
 *) 0xFFFE0030)

2060 
	#AT91C_US1_RNCR
 ((
AT91_REG
 *) 0xFFFC4114)

2061 
	#AT91C_US1_PTCR
 ((
AT91_REG
 *) 0xFFFC4120)

2062 
	#AT91C_US1_TCR
 ((
AT91_REG
 *) 0xFFFC410C)

2063 
	#AT91C_US1_PTSR
 ((
AT91_REG
 *) 0xFFFC4124)

2064 
	#AT91C_US1_TNPR
 ((
AT91_REG
 *) 0xFFFC4118)

2065 
	#AT91C_US1_RCR
 ((
AT91_REG
 *) 0xFFFC4104)

2066 
	#AT91C_US1_RNPR
 ((
AT91_REG
 *) 0xFFFC4110)

2067 
	#AT91C_US1_RPR
 ((
AT91_REG
 *) 0xFFFC4100)

2068 
	#AT91C_US1_TNCR
 ((
AT91_REG
 *) 0xFFFC411C)

2069 
	#AT91C_US1_TPR
 ((
AT91_REG
 *) 0xFFFC4108)

2071 
	#AT91C_US1_IF
 ((
AT91_REG
 *) 0xFFFC404C)

2072 
	#AT91C_US1_NER
 ((
AT91_REG
 *) 0xFFFC4044)

2073 
	#AT91C_US1_RTOR
 ((
AT91_REG
 *) 0xFFFC4024)

2074 
	#AT91C_US1_CSR
 ((
AT91_REG
 *) 0xFFFC4014)

2075 
	#AT91C_US1_IDR
 ((
AT91_REG
 *) 0xFFFC400C)

2076 
	#AT91C_US1_IER
 ((
AT91_REG
 *) 0xFFFC4008)

2077 
	#AT91C_US1_THR
 ((
AT91_REG
 *) 0xFFFC401C)

2078 
	#AT91C_US1_TTGR
 ((
AT91_REG
 *) 0xFFFC4028)

2079 
	#AT91C_US1_RHR
 ((
AT91_REG
 *) 0xFFFC4018)

2080 
	#AT91C_US1_BRGR
 ((
AT91_REG
 *) 0xFFFC4020)

2081 
	#AT91C_US1_IMR
 ((
AT91_REG
 *) 0xFFFC4010)

2082 
	#AT91C_US1_FIDI
 ((
AT91_REG
 *) 0xFFFC4040)

2083 
	#AT91C_US1_CR
 ((
AT91_REG
 *) 0xFFFC4000)

2084 
	#AT91C_US1_MR
 ((
AT91_REG
 *) 0xFFFC4004)

2086 
	#AT91C_US0_TNPR
 ((
AT91_REG
 *) 0xFFFC0118)

2087 
	#AT91C_US0_RNPR
 ((
AT91_REG
 *) 0xFFFC0110)

2088 
	#AT91C_US0_TCR
 ((
AT91_REG
 *) 0xFFFC010C)

2089 
	#AT91C_US0_PTCR
 ((
AT91_REG
 *) 0xFFFC0120)

2090 
	#AT91C_US0_PTSR
 ((
AT91_REG
 *) 0xFFFC0124)

2091 
	#AT91C_US0_TNCR
 ((
AT91_REG
 *) 0xFFFC011C)

2092 
	#AT91C_US0_TPR
 ((
AT91_REG
 *) 0xFFFC0108)

2093 
	#AT91C_US0_RCR
 ((
AT91_REG
 *) 0xFFFC0104)

2094 
	#AT91C_US0_RPR
 ((
AT91_REG
 *) 0xFFFC0100)

2095 
	#AT91C_US0_RNCR
 ((
AT91_REG
 *) 0xFFFC0114)

2097 
	#AT91C_US0_BRGR
 ((
AT91_REG
 *) 0xFFFC0020)

2098 
	#AT91C_US0_NER
 ((
AT91_REG
 *) 0xFFFC0044)

2099 
	#AT91C_US0_CR
 ((
AT91_REG
 *) 0xFFFC0000)

2100 
	#AT91C_US0_IMR
 ((
AT91_REG
 *) 0xFFFC0010)

2101 
	#AT91C_US0_FIDI
 ((
AT91_REG
 *) 0xFFFC0040)

2102 
	#AT91C_US0_TTGR
 ((
AT91_REG
 *) 0xFFFC0028)

2103 
	#AT91C_US0_MR
 ((
AT91_REG
 *) 0xFFFC0004)

2104 
	#AT91C_US0_RTOR
 ((
AT91_REG
 *) 0xFFFC0024)

2105 
	#AT91C_US0_CSR
 ((
AT91_REG
 *) 0xFFFC0014)

2106 
	#AT91C_US0_RHR
 ((
AT91_REG
 *) 0xFFFC0018)

2107 
	#AT91C_US0_IDR
 ((
AT91_REG
 *) 0xFFFC000C)

2108 
	#AT91C_US0_THR
 ((
AT91_REG
 *) 0xFFFC001C)

2109 
	#AT91C_US0_IF
 ((
AT91_REG
 *) 0xFFFC004C)

2110 
	#AT91C_US0_IER
 ((
AT91_REG
 *) 0xFFFC0008)

2112 
	#AT91C_SSC_TNCR
 ((
AT91_REG
 *) 0xFFFD411C)

2113 
	#AT91C_SSC_RPR
 ((
AT91_REG
 *) 0xFFFD4100)

2114 
	#AT91C_SSC_RNCR
 ((
AT91_REG
 *) 0xFFFD4114)

2115 
	#AT91C_SSC_TPR
 ((
AT91_REG
 *) 0xFFFD4108)

2116 
	#AT91C_SSC_PTCR
 ((
AT91_REG
 *) 0xFFFD4120)

2117 
	#AT91C_SSC_TCR
 ((
AT91_REG
 *) 0xFFFD410C)

2118 
	#AT91C_SSC_RCR
 ((
AT91_REG
 *) 0xFFFD4104)

2119 
	#AT91C_SSC_RNPR
 ((
AT91_REG
 *) 0xFFFD4110)

2120 
	#AT91C_SSC_TNPR
 ((
AT91_REG
 *) 0xFFFD4118)

2121 
	#AT91C_SSC_PTSR
 ((
AT91_REG
 *) 0xFFFD4124)

2123 
	#AT91C_SSC_RHR
 ((
AT91_REG
 *) 0xFFFD4020)

2124 
	#AT91C_SSC_RSHR
 ((
AT91_REG
 *) 0xFFFD4030)

2125 
	#AT91C_SSC_TFMR
 ((
AT91_REG
 *) 0xFFFD401C)

2126 
	#AT91C_SSC_IDR
 ((
AT91_REG
 *) 0xFFFD4048)

2127 
	#AT91C_SSC_THR
 ((
AT91_REG
 *) 0xFFFD4024)

2128 
	#AT91C_SSC_RCMR
 ((
AT91_REG
 *) 0xFFFD4010)

2129 
	#AT91C_SSC_IER
 ((
AT91_REG
 *) 0xFFFD4044)

2130 
	#AT91C_SSC_TSHR
 ((
AT91_REG
 *) 0xFFFD4034)

2131 
	#AT91C_SSC_SR
 ((
AT91_REG
 *) 0xFFFD4040)

2132 
	#AT91C_SSC_CMR
 ((
AT91_REG
 *) 0xFFFD4004)

2133 
	#AT91C_SSC_TCMR
 ((
AT91_REG
 *) 0xFFFD4018)

2134 
	#AT91C_SSC_CR
 ((
AT91_REG
 *) 0xFFFD4000)

2135 
	#AT91C_SSC_IMR
 ((
AT91_REG
 *) 0xFFFD404C)

2136 
	#AT91C_SSC_RFMR
 ((
AT91_REG
 *) 0xFFFD4014)

2138 
	#AT91C_TWI_IER
 ((
AT91_REG
 *) 0xFFFB8024)

2139 
	#AT91C_TWI_CR
 ((
AT91_REG
 *) 0xFFFB8000)

2140 
	#AT91C_TWI_SR
 ((
AT91_REG
 *) 0xFFFB8020)

2141 
	#AT91C_TWI_IMR
 ((
AT91_REG
 *) 0xFFFB802C)

2142 
	#AT91C_TWI_THR
 ((
AT91_REG
 *) 0xFFFB8034)

2143 
	#AT91C_TWI_IDR
 ((
AT91_REG
 *) 0xFFFB8028)

2144 
	#AT91C_TWI_IADR
 ((
AT91_REG
 *) 0xFFFB800C)

2145 
	#AT91C_TWI_MMR
 ((
AT91_REG
 *) 0xFFFB8004)

2146 
	#AT91C_TWI_CWGR
 ((
AT91_REG
 *) 0xFFFB8010)

2147 
	#AT91C_TWI_RHR
 ((
AT91_REG
 *) 0xFFFB8030)

2149 
	#AT91C_PWMC_CH3_CUPDR
 ((
AT91_REG
 *) 0xFFFCC270)

2150 
	#AT91C_PWMC_CH3_Re£rved
 ((
AT91_REG
 *) 0xFFFCC274)

2151 
	#AT91C_PWMC_CH3_CPRDR
 ((
AT91_REG
 *) 0xFFFCC268)

2152 
	#AT91C_PWMC_CH3_CDTYR
 ((
AT91_REG
 *) 0xFFFCC264)

2153 
	#AT91C_PWMC_CH3_CCNTR
 ((
AT91_REG
 *) 0xFFFCC26C)

2154 
	#AT91C_PWMC_CH3_CMR
 ((
AT91_REG
 *) 0xFFFCC260)

2156 
	#AT91C_PWMC_CH2_Re£rved
 ((
AT91_REG
 *) 0xFFFCC254)

2157 
	#AT91C_PWMC_CH2_CMR
 ((
AT91_REG
 *) 0xFFFCC240)

2158 
	#AT91C_PWMC_CH2_CCNTR
 ((
AT91_REG
 *) 0xFFFCC24C)

2159 
	#AT91C_PWMC_CH2_CPRDR
 ((
AT91_REG
 *) 0xFFFCC248)

2160 
	#AT91C_PWMC_CH2_CUPDR
 ((
AT91_REG
 *) 0xFFFCC250)

2161 
	#AT91C_PWMC_CH2_CDTYR
 ((
AT91_REG
 *) 0xFFFCC244)

2163 
	#AT91C_PWMC_CH1_Re£rved
 ((
AT91_REG
 *) 0xFFFCC234)

2164 
	#AT91C_PWMC_CH1_CUPDR
 ((
AT91_REG
 *) 0xFFFCC230)

2165 
	#AT91C_PWMC_CH1_CPRDR
 ((
AT91_REG
 *) 0xFFFCC228)

2166 
	#AT91C_PWMC_CH1_CCNTR
 ((
AT91_REG
 *) 0xFFFCC22C)

2167 
	#AT91C_PWMC_CH1_CDTYR
 ((
AT91_REG
 *) 0xFFFCC224)

2168 
	#AT91C_PWMC_CH1_CMR
 ((
AT91_REG
 *) 0xFFFCC220)

2170 
	#AT91C_PWMC_CH0_Re£rved
 ((
AT91_REG
 *) 0xFFFCC214)

2171 
	#AT91C_PWMC_CH0_CPRDR
 ((
AT91_REG
 *) 0xFFFCC208)

2172 
	#AT91C_PWMC_CH0_CDTYR
 ((
AT91_REG
 *) 0xFFFCC204)

2173 
	#AT91C_PWMC_CH0_CMR
 ((
AT91_REG
 *) 0xFFFCC200)

2174 
	#AT91C_PWMC_CH0_CUPDR
 ((
AT91_REG
 *) 0xFFFCC210)

2175 
	#AT91C_PWMC_CH0_CCNTR
 ((
AT91_REG
 *) 0xFFFCC20C)

2177 
	#AT91C_PWMC_IDR
 ((
AT91_REG
 *) 0xFFFCC014)

2178 
	#AT91C_PWMC_DIS
 ((
AT91_REG
 *) 0xFFFCC008)

2179 
	#AT91C_PWMC_IER
 ((
AT91_REG
 *) 0xFFFCC010)

2180 
	#AT91C_PWMC_VR
 ((
AT91_REG
 *) 0xFFFCC0FC)

2181 
	#AT91C_PWMC_ISR
 ((
AT91_REG
 *) 0xFFFCC01C)

2182 
	#AT91C_PWMC_SR
 ((
AT91_REG
 *) 0xFFFCC00C)

2183 
	#AT91C_PWMC_IMR
 ((
AT91_REG
 *) 0xFFFCC018)

2184 
	#AT91C_PWMC_MR
 ((
AT91_REG
 *) 0xFFFCC000)

2185 
	#AT91C_PWMC_ENA
 ((
AT91_REG
 *) 0xFFFCC004)

2187 
	#AT91C_UDP_IMR
 ((
AT91_REG
 *) 0xFFFB0018)

2188 
	#AT91C_UDP_FADDR
 ((
AT91_REG
 *) 0xFFFB0008)

2189 
	#AT91C_UDP_NUM
 ((
AT91_REG
 *) 0xFFFB0000)

2190 
	#AT91C_UDP_FDR
 ((
AT91_REG
 *) 0xFFFB0050)

2191 
	#AT91C_UDP_ISR
 ((
AT91_REG
 *) 0xFFFB001C)

2192 
	#AT91C_UDP_CSR
 ((
AT91_REG
 *) 0xFFFB0030)

2193 
	#AT91C_UDP_IDR
 ((
AT91_REG
 *) 0xFFFB0014)

2194 
	#AT91C_UDP_ICR
 ((
AT91_REG
 *) 0xFFFB0020)

2195 
	#AT91C_UDP_RSTEP
 ((
AT91_REG
 *) 0xFFFB0028)

2196 
	#AT91C_UDP_TXVC
 ((
AT91_REG
 *) 0xFFFB0074)

2197 
	#AT91C_UDP_GLBSTATE
 ((
AT91_REG
 *) 0xFFFB0004)

2198 
	#AT91C_UDP_IER
 ((
AT91_REG
 *) 0xFFFB0010)

2200 
	#AT91C_TC0_SR
 ((
AT91_REG
 *) 0xFFFA0020)

2201 
	#AT91C_TC0_RC
 ((
AT91_REG
 *) 0xFFFA001C)

2202 
	#AT91C_TC0_RB
 ((
AT91_REG
 *) 0xFFFA0018)

2203 
	#AT91C_TC0_CCR
 ((
AT91_REG
 *) 0xFFFA0000)

2204 
	#AT91C_TC0_CMR
 ((
AT91_REG
 *) 0xFFFA0004)

2205 
	#AT91C_TC0_IER
 ((
AT91_REG
 *) 0xFFFA0024)

2206 
	#AT91C_TC0_RA
 ((
AT91_REG
 *) 0xFFFA0014)

2207 
	#AT91C_TC0_IDR
 ((
AT91_REG
 *) 0xFFFA0028)

2208 
	#AT91C_TC0_CV
 ((
AT91_REG
 *) 0xFFFA0010)

2209 
	#AT91C_TC0_IMR
 ((
AT91_REG
 *) 0xFFFA002C)

2211 
	#AT91C_TC1_RB
 ((
AT91_REG
 *) 0xFFFA0058)

2212 
	#AT91C_TC1_CCR
 ((
AT91_REG
 *) 0xFFFA0040)

2213 
	#AT91C_TC1_IER
 ((
AT91_REG
 *) 0xFFFA0064)

2214 
	#AT91C_TC1_IDR
 ((
AT91_REG
 *) 0xFFFA0068)

2215 
	#AT91C_TC1_SR
 ((
AT91_REG
 *) 0xFFFA0060)

2216 
	#AT91C_TC1_CMR
 ((
AT91_REG
 *) 0xFFFA0044)

2217 
	#AT91C_TC1_RA
 ((
AT91_REG
 *) 0xFFFA0054)

2218 
	#AT91C_TC1_RC
 ((
AT91_REG
 *) 0xFFFA005C)

2219 
	#AT91C_TC1_IMR
 ((
AT91_REG
 *) 0xFFFA006C)

2220 
	#AT91C_TC1_CV
 ((
AT91_REG
 *) 0xFFFA0050)

2222 
	#AT91C_TC2_CMR
 ((
AT91_REG
 *) 0xFFFA0084)

2223 
	#AT91C_TC2_CCR
 ((
AT91_REG
 *) 0xFFFA0080)

2224 
	#AT91C_TC2_CV
 ((
AT91_REG
 *) 0xFFFA0090)

2225 
	#AT91C_TC2_RA
 ((
AT91_REG
 *) 0xFFFA0094)

2226 
	#AT91C_TC2_RB
 ((
AT91_REG
 *) 0xFFFA0098)

2227 
	#AT91C_TC2_IDR
 ((
AT91_REG
 *) 0xFFFA00A8)

2228 
	#AT91C_TC2_IMR
 ((
AT91_REG
 *) 0xFFFA00AC)

2229 
	#AT91C_TC2_RC
 ((
AT91_REG
 *) 0xFFFA009C)

2230 
	#AT91C_TC2_IER
 ((
AT91_REG
 *) 0xFFFA00A4)

2231 
	#AT91C_TC2_SR
 ((
AT91_REG
 *) 0xFFFA00A0)

2233 
	#AT91C_TCB_BMR
 ((
AT91_REG
 *) 0xFFFA00C4)

2234 
	#AT91C_TCB_BCR
 ((
AT91_REG
 *) 0xFFFA00C0)

2236 
	#AT91C_CAN_MB0_MDL
 ((
AT91_REG
 *) 0xFFFD0214)

2237 
	#AT91C_CAN_MB0_MAM
 ((
AT91_REG
 *) 0xFFFD0204)

2238 
	#AT91C_CAN_MB0_MCR
 ((
AT91_REG
 *) 0xFFFD021C)

2239 
	#AT91C_CAN_MB0_MID
 ((
AT91_REG
 *) 0xFFFD0208)

2240 
	#AT91C_CAN_MB0_MSR
 ((
AT91_REG
 *) 0xFFFD0210)

2241 
	#AT91C_CAN_MB0_MFID
 ((
AT91_REG
 *) 0xFFFD020C)

2242 
	#AT91C_CAN_MB0_MDH
 ((
AT91_REG
 *) 0xFFFD0218)

2243 
	#AT91C_CAN_MB0_MMR
 ((
AT91_REG
 *) 0xFFFD0200)

2245 
	#AT91C_CAN_MB1_MDL
 ((
AT91_REG
 *) 0xFFFD0234)

2246 
	#AT91C_CAN_MB1_MID
 ((
AT91_REG
 *) 0xFFFD0228)

2247 
	#AT91C_CAN_MB1_MMR
 ((
AT91_REG
 *) 0xFFFD0220)

2248 
	#AT91C_CAN_MB1_MSR
 ((
AT91_REG
 *) 0xFFFD0230)

2249 
	#AT91C_CAN_MB1_MAM
 ((
AT91_REG
 *) 0xFFFD0224)

2250 
	#AT91C_CAN_MB1_MDH
 ((
AT91_REG
 *) 0xFFFD0238)

2251 
	#AT91C_CAN_MB1_MCR
 ((
AT91_REG
 *) 0xFFFD023C)

2252 
	#AT91C_CAN_MB1_MFID
 ((
AT91_REG
 *) 0xFFFD022C)

2254 
	#AT91C_CAN_MB2_MCR
 ((
AT91_REG
 *) 0xFFFD025C)

2255 
	#AT91C_CAN_MB2_MDH
 ((
AT91_REG
 *) 0xFFFD0258)

2256 
	#AT91C_CAN_MB2_MID
 ((
AT91_REG
 *) 0xFFFD0248)

2257 
	#AT91C_CAN_MB2_MDL
 ((
AT91_REG
 *) 0xFFFD0254)

2258 
	#AT91C_CAN_MB2_MMR
 ((
AT91_REG
 *) 0xFFFD0240)

2259 
	#AT91C_CAN_MB2_MAM
 ((
AT91_REG
 *) 0xFFFD0244)

2260 
	#AT91C_CAN_MB2_MFID
 ((
AT91_REG
 *) 0xFFFD024C)

2261 
	#AT91C_CAN_MB2_MSR
 ((
AT91_REG
 *) 0xFFFD0250)

2263 
	#AT91C_CAN_MB3_MFID
 ((
AT91_REG
 *) 0xFFFD026C)

2264 
	#AT91C_CAN_MB3_MAM
 ((
AT91_REG
 *) 0xFFFD0264)

2265 
	#AT91C_CAN_MB3_MID
 ((
AT91_REG
 *) 0xFFFD0268)

2266 
	#AT91C_CAN_MB3_MCR
 ((
AT91_REG
 *) 0xFFFD027C)

2267 
	#AT91C_CAN_MB3_MMR
 ((
AT91_REG
 *) 0xFFFD0260)

2268 
	#AT91C_CAN_MB3_MSR
 ((
AT91_REG
 *) 0xFFFD0270)

2269 
	#AT91C_CAN_MB3_MDL
 ((
AT91_REG
 *) 0xFFFD0274)

2270 
	#AT91C_CAN_MB3_MDH
 ((
AT91_REG
 *) 0xFFFD0278)

2272 
	#AT91C_CAN_MB4_MID
 ((
AT91_REG
 *) 0xFFFD0288)

2273 
	#AT91C_CAN_MB4_MMR
 ((
AT91_REG
 *) 0xFFFD0280)

2274 
	#AT91C_CAN_MB4_MDH
 ((
AT91_REG
 *) 0xFFFD0298)

2275 
	#AT91C_CAN_MB4_MFID
 ((
AT91_REG
 *) 0xFFFD028C)

2276 
	#AT91C_CAN_MB4_MSR
 ((
AT91_REG
 *) 0xFFFD0290)

2277 
	#AT91C_CAN_MB4_MCR
 ((
AT91_REG
 *) 0xFFFD029C)

2278 
	#AT91C_CAN_MB4_MDL
 ((
AT91_REG
 *) 0xFFFD0294)

2279 
	#AT91C_CAN_MB4_MAM
 ((
AT91_REG
 *) 0xFFFD0284)

2281 
	#AT91C_CAN_MB5_MSR
 ((
AT91_REG
 *) 0xFFFD02B0)

2282 
	#AT91C_CAN_MB5_MCR
 ((
AT91_REG
 *) 0xFFFD02BC)

2283 
	#AT91C_CAN_MB5_MFID
 ((
AT91_REG
 *) 0xFFFD02AC)

2284 
	#AT91C_CAN_MB5_MDH
 ((
AT91_REG
 *) 0xFFFD02B8)

2285 
	#AT91C_CAN_MB5_MID
 ((
AT91_REG
 *) 0xFFFD02A8)

2286 
	#AT91C_CAN_MB5_MMR
 ((
AT91_REG
 *) 0xFFFD02A0)

2287 
	#AT91C_CAN_MB5_MDL
 ((
AT91_REG
 *) 0xFFFD02B4)

2288 
	#AT91C_CAN_MB5_MAM
 ((
AT91_REG
 *) 0xFFFD02A4)

2290 
	#AT91C_CAN_MB6_MFID
 ((
AT91_REG
 *) 0xFFFD02CC)

2291 
	#AT91C_CAN_MB6_MID
 ((
AT91_REG
 *) 0xFFFD02C8)

2292 
	#AT91C_CAN_MB6_MAM
 ((
AT91_REG
 *) 0xFFFD02C4)

2293 
	#AT91C_CAN_MB6_MSR
 ((
AT91_REG
 *) 0xFFFD02D0)

2294 
	#AT91C_CAN_MB6_MDL
 ((
AT91_REG
 *) 0xFFFD02D4)

2295 
	#AT91C_CAN_MB6_MCR
 ((
AT91_REG
 *) 0xFFFD02DC)

2296 
	#AT91C_CAN_MB6_MDH
 ((
AT91_REG
 *) 0xFFFD02D8)

2297 
	#AT91C_CAN_MB6_MMR
 ((
AT91_REG
 *) 0xFFFD02C0)

2299 
	#AT91C_CAN_MB7_MCR
 ((
AT91_REG
 *) 0xFFFD02FC)

2300 
	#AT91C_CAN_MB7_MDH
 ((
AT91_REG
 *) 0xFFFD02F8)

2301 
	#AT91C_CAN_MB7_MFID
 ((
AT91_REG
 *) 0xFFFD02EC)

2302 
	#AT91C_CAN_MB7_MDL
 ((
AT91_REG
 *) 0xFFFD02F4)

2303 
	#AT91C_CAN_MB7_MID
 ((
AT91_REG
 *) 0xFFFD02E8)

2304 
	#AT91C_CAN_MB7_MMR
 ((
AT91_REG
 *) 0xFFFD02E0)

2305 
	#AT91C_CAN_MB7_MAM
 ((
AT91_REG
 *) 0xFFFD02E4)

2306 
	#AT91C_CAN_MB7_MSR
 ((
AT91_REG
 *) 0xFFFD02F0)

2308 
	#AT91C_CAN_TCR
 ((
AT91_REG
 *) 0xFFFD0024)

2309 
	#AT91C_CAN_IMR
 ((
AT91_REG
 *) 0xFFFD000C)

2310 
	#AT91C_CAN_IER
 ((
AT91_REG
 *) 0xFFFD0004)

2311 
	#AT91C_CAN_ECR
 ((
AT91_REG
 *) 0xFFFD0020)

2312 
	#AT91C_CAN_TIMESTP
 ((
AT91_REG
 *) 0xFFFD001C)

2313 
	#AT91C_CAN_MR
 ((
AT91_REG
 *) 0xFFFD0000)

2314 
	#AT91C_CAN_IDR
 ((
AT91_REG
 *) 0xFFFD0008)

2315 
	#AT91C_CAN_ACR
 ((
AT91_REG
 *) 0xFFFD0028)

2316 
	#AT91C_CAN_TIM
 ((
AT91_REG
 *) 0xFFFD0018)

2317 
	#AT91C_CAN_SR
 ((
AT91_REG
 *) 0xFFFD0010)

2318 
	#AT91C_CAN_BR
 ((
AT91_REG
 *) 0xFFFD0014)

2319 
	#AT91C_CAN_VR
 ((
AT91_REG
 *) 0xFFFD00FC)

2321 
	#AT91C_EMAC_ISR
 ((
AT91_REG
 *) 0xFFFDC024)

2322 
	#AT91C_EMAC_SA4H
 ((
AT91_REG
 *) 0xFFFDC0B4)

2323 
	#AT91C_EMAC_SA1L
 ((
AT91_REG
 *) 0xFFFDC098)

2324 
	#AT91C_EMAC_ELE
 ((
AT91_REG
 *) 0xFFFDC078)

2325 
	#AT91C_EMAC_LCOL
 ((
AT91_REG
 *) 0xFFFDC05C)

2326 
	#AT91C_EMAC_RLE
 ((
AT91_REG
 *) 0xFFFDC088)

2327 
	#AT91C_EMAC_WOL
 ((
AT91_REG
 *) 0xFFFDC0C4)

2328 
	#AT91C_EMAC_DTF
 ((
AT91_REG
 *) 0xFFFDC058)

2329 
	#AT91C_EMAC_TUND
 ((
AT91_REG
 *) 0xFFFDC064)

2330 
	#AT91C_EMAC_NCR
 ((
AT91_REG
 *) 0xFFFDC000)

2331 
	#AT91C_EMAC_SA4L
 ((
AT91_REG
 *) 0xFFFDC0B0)

2332 
	#AT91C_EMAC_RSR
 ((
AT91_REG
 *) 0xFFFDC020)

2333 
	#AT91C_EMAC_SA3L
 ((
AT91_REG
 *) 0xFFFDC0A8)

2334 
	#AT91C_EMAC_TSR
 ((
AT91_REG
 *) 0xFFFDC014)

2335 
	#AT91C_EMAC_IDR
 ((
AT91_REG
 *) 0xFFFDC02C)

2336 
	#AT91C_EMAC_RSE
 ((
AT91_REG
 *) 0xFFFDC074)

2337 
	#AT91C_EMAC_ECOL
 ((
AT91_REG
 *) 0xFFFDC060)

2338 
	#AT91C_EMAC_TID
 ((
AT91_REG
 *) 0xFFFDC0B8)

2339 
	#AT91C_EMAC_HRB
 ((
AT91_REG
 *) 0xFFFDC090)

2340 
	#AT91C_EMAC_TBQP
 ((
AT91_REG
 *) 0xFFFDC01C)

2341 
	#AT91C_EMAC_USRIO
 ((
AT91_REG
 *) 0xFFFDC0C0)

2342 
	#AT91C_EMAC_PTR
 ((
AT91_REG
 *) 0xFFFDC038)

2343 
	#AT91C_EMAC_SA2H
 ((
AT91_REG
 *) 0xFFFDC0A4)

2344 
	#AT91C_EMAC_ROV
 ((
AT91_REG
 *) 0xFFFDC070)

2345 
	#AT91C_EMAC_ALE
 ((
AT91_REG
 *) 0xFFFDC054)

2346 
	#AT91C_EMAC_RJA
 ((
AT91_REG
 *) 0xFFFDC07C)

2347 
	#AT91C_EMAC_RBQP
 ((
AT91_REG
 *) 0xFFFDC018)

2348 
	#AT91C_EMAC_TPF
 ((
AT91_REG
 *) 0xFFFDC08C)

2349 
	#AT91C_EMAC_NCFGR
 ((
AT91_REG
 *) 0xFFFDC004)

2350 
	#AT91C_EMAC_HRT
 ((
AT91_REG
 *) 0xFFFDC094)

2351 
	#AT91C_EMAC_USF
 ((
AT91_REG
 *) 0xFFFDC080)

2352 
	#AT91C_EMAC_FCSE
 ((
AT91_REG
 *) 0xFFFDC050)

2353 
	#AT91C_EMAC_TPQ
 ((
AT91_REG
 *) 0xFFFDC0BC)

2354 
	#AT91C_EMAC_MAN
 ((
AT91_REG
 *) 0xFFFDC034)

2355 
	#AT91C_EMAC_FTO
 ((
AT91_REG
 *) 0xFFFDC040)

2356 
	#AT91C_EMAC_REV
 ((
AT91_REG
 *) 0xFFFDC0FC)

2357 
	#AT91C_EMAC_IMR
 ((
AT91_REG
 *) 0xFFFDC030)

2358 
	#AT91C_EMAC_SCF
 ((
AT91_REG
 *) 0xFFFDC044)

2359 
	#AT91C_EMAC_PFR
 ((
AT91_REG
 *) 0xFFFDC03C)

2360 
	#AT91C_EMAC_MCF
 ((
AT91_REG
 *) 0xFFFDC048)

2361 
	#AT91C_EMAC_NSR
 ((
AT91_REG
 *) 0xFFFDC008)

2362 
	#AT91C_EMAC_SA2L
 ((
AT91_REG
 *) 0xFFFDC0A0)

2363 
	#AT91C_EMAC_FRO
 ((
AT91_REG
 *) 0xFFFDC04C)

2364 
	#AT91C_EMAC_IER
 ((
AT91_REG
 *) 0xFFFDC028)

2365 
	#AT91C_EMAC_SA1H
 ((
AT91_REG
 *) 0xFFFDC09C)

2366 
	#AT91C_EMAC_CSE
 ((
AT91_REG
 *) 0xFFFDC068)

2367 
	#AT91C_EMAC_SA3H
 ((
AT91_REG
 *) 0xFFFDC0AC)

2368 
	#AT91C_EMAC_RRE
 ((
AT91_REG
 *) 0xFFFDC06C)

2369 
	#AT91C_EMAC_STE
 ((
AT91_REG
 *) 0xFFFDC084)

2371 
	#AT91C_ADC_PTSR
 ((
AT91_REG
 *) 0xFFFD8124)

2372 
	#AT91C_ADC_PTCR
 ((
AT91_REG
 *) 0xFFFD8120)

2373 
	#AT91C_ADC_TNPR
 ((
AT91_REG
 *) 0xFFFD8118)

2374 
	#AT91C_ADC_TNCR
 ((
AT91_REG
 *) 0xFFFD811C)

2375 
	#AT91C_ADC_RNPR
 ((
AT91_REG
 *) 0xFFFD8110)

2376 
	#AT91C_ADC_RNCR
 ((
AT91_REG
 *) 0xFFFD8114)

2377 
	#AT91C_ADC_RPR
 ((
AT91_REG
 *) 0xFFFD8100)

2378 
	#AT91C_ADC_TCR
 ((
AT91_REG
 *) 0xFFFD810C)

2379 
	#AT91C_ADC_TPR
 ((
AT91_REG
 *) 0xFFFD8108)

2380 
	#AT91C_ADC_RCR
 ((
AT91_REG
 *) 0xFFFD8104)

2382 
	#AT91C_ADC_CDR2
 ((
AT91_REG
 *) 0xFFFD8038)

2383 
	#AT91C_ADC_CDR3
 ((
AT91_REG
 *) 0xFFFD803C)

2384 
	#AT91C_ADC_CDR0
 ((
AT91_REG
 *) 0xFFFD8030)

2385 
	#AT91C_ADC_CDR5
 ((
AT91_REG
 *) 0xFFFD8044)

2386 
	#AT91C_ADC_CHDR
 ((
AT91_REG
 *) 0xFFFD8014)

2387 
	#AT91C_ADC_SR
 ((
AT91_REG
 *) 0xFFFD801C)

2388 
	#AT91C_ADC_CDR4
 ((
AT91_REG
 *) 0xFFFD8040)

2389 
	#AT91C_ADC_CDR1
 ((
AT91_REG
 *) 0xFFFD8034)

2390 
	#AT91C_ADC_LCDR
 ((
AT91_REG
 *) 0xFFFD8020)

2391 
	#AT91C_ADC_IDR
 ((
AT91_REG
 *) 0xFFFD8028)

2392 
	#AT91C_ADC_CR
 ((
AT91_REG
 *) 0xFFFD8000)

2393 
	#AT91C_ADC_CDR7
 ((
AT91_REG
 *) 0xFFFD804C)

2394 
	#AT91C_ADC_CDR6
 ((
AT91_REG
 *) 0xFFFD8048)

2395 
	#AT91C_ADC_IER
 ((
AT91_REG
 *) 0xFFFD8024)

2396 
	#AT91C_ADC_CHER
 ((
AT91_REG
 *) 0xFFFD8010)

2397 
	#AT91C_ADC_CHSR
 ((
AT91_REG
 *) 0xFFFD8018)

2398 
	#AT91C_ADC_MR
 ((
AT91_REG
 *) 0xFFFD8004)

2399 
	#AT91C_ADC_IMR
 ((
AT91_REG
 *) 0xFFFD802C)

2401 
	#AT91C_AES_TPR
 ((
AT91_REG
 *) 0xFFFA4108)

2402 
	#AT91C_AES_PTCR
 ((
AT91_REG
 *) 0xFFFA4120)

2403 
	#AT91C_AES_RNPR
 ((
AT91_REG
 *) 0xFFFA4110)

2404 
	#AT91C_AES_TNCR
 ((
AT91_REG
 *) 0xFFFA411C)

2405 
	#AT91C_AES_TCR
 ((
AT91_REG
 *) 0xFFFA410C)

2406 
	#AT91C_AES_RCR
 ((
AT91_REG
 *) 0xFFFA4104)

2407 
	#AT91C_AES_RNCR
 ((
AT91_REG
 *) 0xFFFA4114)

2408 
	#AT91C_AES_TNPR
 ((
AT91_REG
 *) 0xFFFA4118)

2409 
	#AT91C_AES_RPR
 ((
AT91_REG
 *) 0xFFFA4100)

2410 
	#AT91C_AES_PTSR
 ((
AT91_REG
 *) 0xFFFA4124)

2412 
	#AT91C_AES_IVxR
 ((
AT91_REG
 *) 0xFFFA4060)

2413 
	#AT91C_AES_MR
 ((
AT91_REG
 *) 0xFFFA4004)

2414 
	#AT91C_AES_VR
 ((
AT91_REG
 *) 0xFFFA40FC)

2415 
	#AT91C_AES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA4050)

2416 
	#AT91C_AES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA4040)

2417 
	#AT91C_AES_CR
 ((
AT91_REG
 *) 0xFFFA4000)

2418 
	#AT91C_AES_IDR
 ((
AT91_REG
 *) 0xFFFA4014)

2419 
	#AT91C_AES_IMR
 ((
AT91_REG
 *) 0xFFFA4018)

2420 
	#AT91C_AES_IER
 ((
AT91_REG
 *) 0xFFFA4010)

2421 
	#AT91C_AES_KEYWxR
 ((
AT91_REG
 *) 0xFFFA4020)

2422 
	#AT91C_AES_ISR
 ((
AT91_REG
 *) 0xFFFA401C)

2424 
	#AT91C_TDES_RNCR
 ((
AT91_REG
 *) 0xFFFA8114)

2425 
	#AT91C_TDES_TCR
 ((
AT91_REG
 *) 0xFFFA810C)

2426 
	#AT91C_TDES_RCR
 ((
AT91_REG
 *) 0xFFFA8104)

2427 
	#AT91C_TDES_TNPR
 ((
AT91_REG
 *) 0xFFFA8118)

2428 
	#AT91C_TDES_RNPR
 ((
AT91_REG
 *) 0xFFFA8110)

2429 
	#AT91C_TDES_RPR
 ((
AT91_REG
 *) 0xFFFA8100)

2430 
	#AT91C_TDES_TNCR
 ((
AT91_REG
 *) 0xFFFA811C)

2431 
	#AT91C_TDES_TPR
 ((
AT91_REG
 *) 0xFFFA8108)

2432 
	#AT91C_TDES_PTSR
 ((
AT91_REG
 *) 0xFFFA8124)

2433 
	#AT91C_TDES_PTCR
 ((
AT91_REG
 *) 0xFFFA8120)

2435 
	#AT91C_TDES_KEY2WxR
 ((
AT91_REG
 *) 0xFFFA8028)

2436 
	#AT91C_TDES_KEY3WxR
 ((
AT91_REG
 *) 0xFFFA8030)

2437 
	#AT91C_TDES_IDR
 ((
AT91_REG
 *) 0xFFFA8014)

2438 
	#AT91C_TDES_VR
 ((
AT91_REG
 *) 0xFFFA80FC)

2439 
	#AT91C_TDES_IVxR
 ((
AT91_REG
 *) 0xFFFA8060)

2440 
	#AT91C_TDES_ODATAxR
 ((
AT91_REG
 *) 0xFFFA8050)

2441 
	#AT91C_TDES_IMR
 ((
AT91_REG
 *) 0xFFFA8018)

2442 
	#AT91C_TDES_MR
 ((
AT91_REG
 *) 0xFFFA8004)

2443 
	#AT91C_TDES_CR
 ((
AT91_REG
 *) 0xFFFA8000)

2444 
	#AT91C_TDES_IER
 ((
AT91_REG
 *) 0xFFFA8010)

2445 
	#AT91C_TDES_ISR
 ((
AT91_REG
 *) 0xFFFA801C)

2446 
	#AT91C_TDES_IDATAxR
 ((
AT91_REG
 *) 0xFFFA8040)

2447 
	#AT91C_TDES_KEY1WxR
 ((
AT91_REG
 *) 0xFFFA8020)

2448 

	)

2452 
	#AT91C_PIO_PA0
 (() 1 << 0)

2453 
	#AT91C_PA0_RXD0
 ((Ë
AT91C_PIO_PA0
)

2454 
	#AT91C_PIO_PA1
 (() 1 << 1)

2455 
	#AT91C_PA1_TXD0
 ((Ë
AT91C_PIO_PA1
)

2456 
	#AT91C_PIO_PA10
 (() 1 << 10)

2457 
	#AT91C_PA10_TWD
 ((Ë
AT91C_PIO_PA10
)

2458 
	#AT91C_PIO_PA11
 (() 1 << 11)

2459 
	#AT91C_PA11_TWCK
 ((Ë
AT91C_PIO_PA11
)

2460 
	#AT91C_PIO_PA12
 (() 1 << 12)

2461 
	#AT91C_PA12_NPCS00
 ((Ë
AT91C_PIO_PA12
)

2462 
	#AT91C_PIO_PA13
 (() 1 << 13)

2463 
	#AT91C_PA13_NPCS01
 ((Ë
AT91C_PIO_PA13
)

2464 
	#AT91C_PA13_PCK1
 ((Ë
AT91C_PIO_PA13
)

2465 
	#AT91C_PIO_PA14
 (() 1 << 14)

2466 
	#AT91C_PA14_NPCS02
 ((Ë
AT91C_PIO_PA14
)

2467 
	#AT91C_PA14_IRQ1
 ((Ë
AT91C_PIO_PA14
)

2468 
	#AT91C_PIO_PA15
 (() 1 << 15)

2469 
	#AT91C_PA15_NPCS03
 ((Ë
AT91C_PIO_PA15
)

2470 
	#AT91C_PA15_TCLK2
 ((Ë
AT91C_PIO_PA15
)

2471 
	#AT91C_PIO_PA16
 (() 1 << 16)

2472 
	#AT91C_PA16_MISO0
 ((Ë
AT91C_PIO_PA16
)

2473 
	#AT91C_PIO_PA17
 (() 1 << 17)

2474 
	#AT91C_PA17_MOSI0
 ((Ë
AT91C_PIO_PA17
)

2475 
	#AT91C_PIO_PA18
 (() 1 << 18)

2476 
	#AT91C_PA18_SPCK0
 ((Ë
AT91C_PIO_PA18
)

2477 
	#AT91C_PIO_PA19
 (() 1 << 19)

2478 
	#AT91C_PA19_CANRX
 ((Ë
AT91C_PIO_PA19
)

2479 
	#AT91C_PIO_PA2
 (() 1 << 2)

2480 
	#AT91C_PA2_SCK0
 ((Ë
AT91C_PIO_PA2
)

2481 
	#AT91C_PA2_NPCS11
 ((Ë
AT91C_PIO_PA2
)

2482 
	#AT91C_PIO_PA20
 (() 1 << 20)

2483 
	#AT91C_PA20_CANTX
 ((Ë
AT91C_PIO_PA20
)

2484 
	#AT91C_PIO_PA21
 (() 1 << 21)

2485 
	#AT91C_PA21_TF
 ((Ë
AT91C_PIO_PA21
)

2486 
	#AT91C_PA21_NPCS10
 ((Ë
AT91C_PIO_PA21
)

2487 
	#AT91C_PIO_PA22
 (() 1 << 22)

2488 
	#AT91C_PA22_TK
 ((Ë
AT91C_PIO_PA22
)

2489 
	#AT91C_PA22_SPCK1
 ((Ë
AT91C_PIO_PA22
)

2490 
	#AT91C_PIO_PA23
 (() 1 << 23)

2491 
	#AT91C_PA23_TD
 ((Ë
AT91C_PIO_PA23
)

2492 
	#AT91C_PA23_MOSI1
 ((Ë
AT91C_PIO_PA23
)

2493 
	#AT91C_PIO_PA24
 (() 1 << 24)

2494 
	#AT91C_PA24_RD
 ((Ë
AT91C_PIO_PA24
)

2495 
	#AT91C_PA24_MISO1
 ((Ë
AT91C_PIO_PA24
)

2496 
	#AT91C_PIO_PA25
 (() 1 << 25)

2497 
	#AT91C_PA25_RK
 ((Ë
AT91C_PIO_PA25
)

2498 
	#AT91C_PA25_NPCS11
 ((Ë
AT91C_PIO_PA25
)

2499 
	#AT91C_PIO_PA26
 (() 1 << 26)

2500 
	#AT91C_PA26_RF
 ((Ë
AT91C_PIO_PA26
)

2501 
	#AT91C_PA26_NPCS12
 ((Ë
AT91C_PIO_PA26
)

2502 
	#AT91C_PIO_PA27
 (() 1 << 27)

2503 
	#AT91C_PA27_DRXD
 ((Ë
AT91C_PIO_PA27
)

2504 
	#AT91C_PA27_PCK3
 ((Ë
AT91C_PIO_PA27
)

2505 
	#AT91C_PIO_PA28
 (() 1 << 28)

2506 
	#AT91C_PA28_DTXD
 ((Ë
AT91C_PIO_PA28
)

2507 
	#AT91C_PIO_PA29
 (() 1 << 29)

2508 
	#AT91C_PA29_FIQ
 ((Ë
AT91C_PIO_PA29
)

2509 
	#AT91C_PA29_NPCS13
 ((Ë
AT91C_PIO_PA29
)

2510 
	#AT91C_PIO_PA3
 (() 1 << 3)

2511 
	#AT91C_PA3_RTS0
 ((Ë
AT91C_PIO_PA3
)

2512 
	#AT91C_PA3_NPCS12
 ((Ë
AT91C_PIO_PA3
)

2513 
	#AT91C_PIO_PA30
 (() 1 << 30)

2514 
	#AT91C_PA30_IRQ0
 ((Ë
AT91C_PIO_PA30
)

2515 
	#AT91C_PA30_PCK2
 ((Ë
AT91C_PIO_PA30
)

2516 
	#AT91C_PIO_PA4
 (() 1 << 4)

2517 
	#AT91C_PA4_CTS0
 ((Ë
AT91C_PIO_PA4
)

2518 
	#AT91C_PA4_NPCS13
 ((Ë
AT91C_PIO_PA4
)

2519 
	#AT91C_PIO_PA5
 (() 1 << 5)

2520 
	#AT91C_PA5_RXD1
 ((Ë
AT91C_PIO_PA5
)

2521 
	#AT91C_PIO_PA6
 (() 1 << 6)

2522 
	#AT91C_PA6_TXD1
 ((Ë
AT91C_PIO_PA6
)

2523 
	#AT91C_PIO_PA7
 (() 1 << 7)

2524 
	#AT91C_PA7_SCK1
 ((Ë
AT91C_PIO_PA7
)

2525 
	#AT91C_PA7_NPCS01
 ((Ë
AT91C_PIO_PA7
)

2526 
	#AT91C_PIO_PA8
 (() 1 << 8)

2527 
	#AT91C_PA8_RTS1
 ((Ë
AT91C_PIO_PA8
)

2528 
	#AT91C_PA8_NPCS02
 ((Ë
AT91C_PIO_PA8
)

2529 
	#AT91C_PIO_PA9
 (() 1 << 9)

2530 
	#AT91C_PA9_CTS1
 ((Ë
AT91C_PIO_PA9
)

2531 
	#AT91C_PA9_NPCS03
 ((Ë
AT91C_PIO_PA9
)

2532 
	#AT91C_PIO_PB0
 (() 1 << 0)

2533 
	#AT91C_PB0_ETXCK_EREFCK
 ((Ë
AT91C_PIO_PB0
)

2534 
	#AT91C_PB0_PCK0
 ((Ë
AT91C_PIO_PB0
)

2535 
	#AT91C_PIO_PB1
 (() 1 << 1)

2536 
	#AT91C_PB1_ETXEN
 ((Ë
AT91C_PIO_PB1
)

2537 
	#AT91C_PIO_PB10
 (() 1 << 10)

2538 
	#AT91C_PB10_ETX2
 ((Ë
AT91C_PIO_PB10
)

2539 
	#AT91C_PB10_NPCS11
 ((Ë
AT91C_PIO_PB10
)

2540 
	#AT91C_PIO_PB11
 (() 1 << 11)

2541 
	#AT91C_PB11_ETX3
 ((Ë
AT91C_PIO_PB11
)

2542 
	#AT91C_PB11_NPCS12
 ((Ë
AT91C_PIO_PB11
)

2543 
	#AT91C_PIO_PB12
 (() 1 << 12)

2544 
	#AT91C_PB12_ETXER
 ((Ë
AT91C_PIO_PB12
)

2545 
	#AT91C_PB12_TCLK0
 ((Ë
AT91C_PIO_PB12
)

2546 
	#AT91C_PIO_PB13
 (() 1 << 13)

2547 
	#AT91C_PB13_ERX2
 ((Ë
AT91C_PIO_PB13
)

2548 
	#AT91C_PB13_NPCS01
 ((Ë
AT91C_PIO_PB13
)

2549 
	#AT91C_PIO_PB14
 (() 1 << 14)

2550 
	#AT91C_PB14_ERX3
 ((Ë
AT91C_PIO_PB14
)

2551 
	#AT91C_PB14_NPCS02
 ((Ë
AT91C_PIO_PB14
)

2552 
	#AT91C_PIO_PB15
 (() 1 << 15)

2553 
	#AT91C_PB15_ERXDV
 ((Ë
AT91C_PIO_PB15
)

2554 
	#AT91C_PIO_PB16
 (() 1 << 16)

2555 
	#AT91C_PB16_ECOL
 ((Ë
AT91C_PIO_PB16
)

2556 
	#AT91C_PB16_NPCS13
 ((Ë
AT91C_PIO_PB16
)

2557 
	#AT91C_PIO_PB17
 (() 1 << 17)

2558 
	#AT91C_PB17_ERXCK
 ((Ë
AT91C_PIO_PB17
)

2559 
	#AT91C_PB17_NPCS03
 ((Ë
AT91C_PIO_PB17
)

2560 
	#AT91C_PIO_PB18
 (() 1 << 18)

2561 
	#AT91C_PB18_EF100
 ((Ë
AT91C_PIO_PB18
)

2562 
	#AT91C_PB18_ADTRG
 ((Ë
AT91C_PIO_PB18
)

2563 
	#AT91C_PIO_PB19
 (() 1 << 19)

2564 
	#AT91C_PB19_PWM0
 ((Ë
AT91C_PIO_PB19
)

2565 
	#AT91C_PB19_TCLK1
 ((Ë
AT91C_PIO_PB19
)

2566 
	#AT91C_PIO_PB2
 (() 1 << 2)

2567 
	#AT91C_PB2_ETX0
 ((Ë
AT91C_PIO_PB2
)

2568 
	#AT91C_PIO_PB20
 (() 1 << 20)

2569 
	#AT91C_PB20_PWM1
 ((Ë
AT91C_PIO_PB20
)

2570 
	#AT91C_PB20_PCK0
 ((Ë
AT91C_PIO_PB20
)

2571 
	#AT91C_PIO_PB21
 (() 1 << 21)

2572 
	#AT91C_PB21_PWM2
 ((Ë
AT91C_PIO_PB21
)

2573 
	#AT91C_PB21_PCK1
 ((Ë
AT91C_PIO_PB21
)

2574 
	#AT91C_PIO_PB22
 (() 1 << 22)

2575 
	#AT91C_PB22_PWM3
 ((Ë
AT91C_PIO_PB22
)

2576 
	#AT91C_PB22_PCK2
 ((Ë
AT91C_PIO_PB22
)

2577 
	#AT91C_PIO_PB23
 (() 1 << 23)

2578 
	#AT91C_PB23_TIOA0
 ((Ë
AT91C_PIO_PB23
)

2579 
	#AT91C_PB23_DCD1
 ((Ë
AT91C_PIO_PB23
)

2580 
	#AT91C_PIO_PB24
 (() 1 << 24)

2581 
	#AT91C_PB24_TIOB0
 ((Ë
AT91C_PIO_PB24
)

2582 
	#AT91C_PB24_DSR1
 ((Ë
AT91C_PIO_PB24
)

2583 
	#AT91C_PIO_PB25
 (() 1 << 25)

2584 
	#AT91C_PB25_TIOA1
 ((Ë
AT91C_PIO_PB25
)

2585 
	#AT91C_PB25_DTR1
 ((Ë
AT91C_PIO_PB25
)

2586 
	#AT91C_PIO_PB26
 (() 1 << 26)

2587 
	#AT91C_PB26_TIOB1
 ((Ë
AT91C_PIO_PB26
)

2588 
	#AT91C_PB26_RI1
 ((Ë
AT91C_PIO_PB26
)

2589 
	#AT91C_PIO_PB27
 (() 1 << 27)

2590 
	#AT91C_PB27_TIOA2
 ((Ë
AT91C_PIO_PB27
)

2591 
	#AT91C_PB27_PWM0
 ((Ë
AT91C_PIO_PB27
)

2592 
	#AT91C_PIO_PB28
 (() 1 << 28)

2593 
	#AT91C_PB28_TIOB2
 ((Ë
AT91C_PIO_PB28
)

2594 
	#AT91C_PB28_PWM1
 ((Ë
AT91C_PIO_PB28
)

2595 
	#AT91C_PIO_PB29
 (() 1 << 29)

2596 
	#AT91C_PB29_PCK1
 ((Ë
AT91C_PIO_PB29
)

2597 
	#AT91C_PB29_PWM2
 ((Ë
AT91C_PIO_PB29
)

2598 
	#AT91C_PIO_PB3
 (() 1 << 3)

2599 
	#AT91C_PB3_ETX1
 ((Ë
AT91C_PIO_PB3
)

2600 
	#AT91C_PIO_PB30
 (() 1 << 30)

2601 
	#AT91C_PB30_PCK2
 ((Ë
AT91C_PIO_PB30
)

2602 
	#AT91C_PB30_PWM3
 ((Ë
AT91C_PIO_PB30
)

2603 
	#AT91C_PIO_PB4
 (() 1 << 4)

2604 
	#AT91C_PB4_ECRS_ECRSDV
 ((Ë
AT91C_PIO_PB4
)

2605 
	#AT91C_PIO_PB5
 (() 1 << 5)

2606 
	#AT91C_PB5_ERX0
 ((Ë
AT91C_PIO_PB5
)

2607 
	#AT91C_PIO_PB6
 (() 1 << 6)

2608 
	#AT91C_PB6_ERX1
 ((Ë
AT91C_PIO_PB6
)

2609 
	#AT91C_PIO_PB7
 (() 1 << 7)

2610 
	#AT91C_PB7_ERXER
 ((Ë
AT91C_PIO_PB7
)

2611 
	#AT91C_PIO_PB8
 (() 1 << 8)

2612 
	#AT91C_PB8_EMDC
 ((Ë
AT91C_PIO_PB8
)

2613 
	#AT91C_PIO_PB9
 (() 1 << 9)

2614 
	#AT91C_PB9_EMDIO
 ((Ë
AT91C_PIO_PB9
)

2615 

	)

2619 
	#AT91C_ID_FIQ
 (() 0)

2620 
	#AT91C_ID_SYS
 (() 1)

2621 
	#AT91C_ID_PIOA
 (() 2)

2622 
	#AT91C_ID_PIOB
 (() 3)

2623 
	#AT91C_ID_SPI0
 (() 4)

2624 
	#AT91C_ID_SPI1
 (() 5)

2625 
	#AT91C_ID_US0
 (() 6)

2626 
	#AT91C_ID_US1
 (() 7)

2627 
	#AT91C_ID_SSC
 (() 8)

2628 
	#AT91C_ID_TWI
 (() 9)

2629 
	#AT91C_ID_PWMC
 (() 10)

2630 
	#AT91C_ID_UDP
 (() 11)

2631 
	#AT91C_ID_TC0
 (() 12)

2632 
	#AT91C_ID_TC1
 (() 13)

2633 
	#AT91C_ID_TC2
 (() 14)

2634 
	#AT91C_ID_CAN
 (() 15)

2635 
	#AT91C_ID_EMAC
 (() 16)

2636 
	#AT91C_ID_ADC
 (() 17)

2637 
	#AT91C_ID_AES
 (() 18)

2638 
	#AT91C_ID_TDES
 (() 19)

2639 
	#AT91C_ID_20_Re£rved
 (() 20)

2640 
	#AT91C_ID_21_Re£rved
 (() 21)

2641 
	#AT91C_ID_22_Re£rved
 (() 22)

2642 
	#AT91C_ID_23_Re£rved
 (() 23)

2643 
	#AT91C_ID_24_Re£rved
 (() 24)

2644 
	#AT91C_ID_25_Re£rved
 (() 25)

2645 
	#AT91C_ID_26_Re£rved
 (() 26)

2646 
	#AT91C_ID_27_Re£rved
 (() 27)

2647 
	#AT91C_ID_28_Re£rved
 (() 28)

2648 
	#AT91C_ID_29_Re£rved
 (() 29)

2649 
	#AT91C_ID_IRQ0
 (() 30)

2650 
	#AT91C_ID_IRQ1
 (() 31)

2651 

	)

2655 
	#AT91C_BASE_SYS
 ((
AT91PS_SYS
) 0xFFFFF000)

2656 
	#AT91C_BASE_AIC
 ((
AT91PS_AIC
) 0xFFFFF000)

2657 
	#AT91C_BASE_PDC_DBGU
 ((
AT91PS_PDC
) 0xFFFFF300)

2658 
	#AT91C_BASE_DBGU
 ((
AT91PS_DBGU
) 0xFFFFF200)

2659 
	#AT91C_BASE_PIOA
 ((
AT91PS_PIO
) 0xFFFFF400)

2660 
	#AT91C_BASE_PIOB
 ((
AT91PS_PIO
) 0xFFFFF600)

2661 
	#AT91C_BASE_CKGR
 ((
AT91PS_CKGR
) 0xFFFFFC20)

2662 
	#AT91C_BASE_PMC
 ((
AT91PS_PMC
) 0xFFFFFC00)

2663 
	#AT91C_BASE_RSTC
 ((
AT91PS_RSTC
) 0xFFFFFD00)

2664 
	#AT91C_BASE_RTTC
 ((
AT91PS_RTTC
) 0xFFFFFD20)

2665 
	#AT91C_BASE_PITC
 ((
AT91PS_PITC
) 0xFFFFFD30)

2666 
	#AT91C_BASE_WDTC
 ((
AT91PS_WDTC
) 0xFFFFFD40)

2667 
	#AT91C_BASE_VREG
 ((
AT91PS_VREG
) 0xFFFFFD60)

2668 
	#AT91C_BASE_MC
 ((
AT91PS_MC
) 0xFFFFFF00)

2669 
	#AT91C_BASE_PDC_SPI1
 ((
AT91PS_PDC
) 0xFFFE4100)

2670 
	#AT91C_BASE_SPI1
 ((
AT91PS_SPI
) 0xFFFE4000)

2671 
	#AT91C_BASE_PDC_SPI0
 ((
AT91PS_PDC
) 0xFFFE0100)

2672 
	#AT91C_BASE_SPI0
 ((
AT91PS_SPI
) 0xFFFE0000)

2673 
	#AT91C_BASE_PDC_US1
 ((
AT91PS_PDC
) 0xFFFC4100)

2674 
	#AT91C_BASE_US1
 ((
AT91PS_USART
) 0xFFFC4000)

2675 
	#AT91C_BASE_PDC_US0
 ((
AT91PS_PDC
) 0xFFFC0100)

2676 
	#AT91C_BASE_US0
 ((
AT91PS_USART
) 0xFFFC0000)

2677 
	#AT91C_BASE_PDC_SSC
 ((
AT91PS_PDC
) 0xFFFD4100)

2678 
	#AT91C_BASE_SSC
 ((
AT91PS_SSC
) 0xFFFD4000)

2679 
	#AT91C_BASE_TWI
 ((
AT91PS_TWI
) 0xFFFB8000)

2680 
	#AT91C_BASE_PWMC_CH3
 ((
AT91PS_PWMC_CH
) 0xFFFCC260)

2681 
	#AT91C_BASE_PWMC_CH2
 ((
AT91PS_PWMC_CH
) 0xFFFCC240)

2682 
	#AT91C_BASE_PWMC_CH1
 ((
AT91PS_PWMC_CH
) 0xFFFCC220)

2683 
	#AT91C_BASE_PWMC_CH0
 ((
AT91PS_PWMC_CH
) 0xFFFCC200)

2684 
	#AT91C_BASE_PWMC
 ((
AT91PS_PWMC
) 0xFFFCC000)

2685 
	#AT91C_BASE_UDP
 ((
AT91PS_UDP
) 0xFFFB0000)

2686 
	#AT91C_BASE_TC0
 ((
AT91PS_TC
) 0xFFFA0000)

2687 
	#AT91C_BASE_TC1
 ((
AT91PS_TC
) 0xFFFA0040)

2688 
	#AT91C_BASE_TC2
 ((
AT91PS_TC
) 0xFFFA0080)

2689 
	#AT91C_BASE_TCB
 ((
AT91PS_TCB
) 0xFFFA0000)

2690 
	#AT91C_BASE_CAN_MB0
 ((
AT91PS_CAN_MB
) 0xFFFD0200)

2691 
	#AT91C_BASE_CAN_MB1
 ((
AT91PS_CAN_MB
) 0xFFFD0220)

2692 
	#AT91C_BASE_CAN_MB2
 ((
AT91PS_CAN_MB
) 0xFFFD0240)

2693 
	#AT91C_BASE_CAN_MB3
 ((
AT91PS_CAN_MB
) 0xFFFD0260)

2694 
	#AT91C_BASE_CAN_MB4
 ((
AT91PS_CAN_MB
) 0xFFFD0280)

2695 
	#AT91C_BASE_CAN_MB5
 ((
AT91PS_CAN_MB
) 0xFFFD02A0)

2696 
	#AT91C_BASE_CAN_MB6
 ((
AT91PS_CAN_MB
) 0xFFFD02C0)

2697 
	#AT91C_BASE_CAN_MB7
 ((
AT91PS_CAN_MB
) 0xFFFD02E0)

2698 
	#AT91C_BASE_CAN
 ((
AT91PS_CAN
) 0xFFFD0000)

2699 
	#AT91C_BASE_EMAC
 ((
AT91PS_EMAC
) 0xFFFDC000)

2700 
	#AT91C_BASE_PDC_ADC
 ((
AT91PS_PDC
) 0xFFFD8100)

2701 
	#AT91C_BASE_ADC
 ((
AT91PS_ADC
) 0xFFFD8000)

2702 
	#AT91C_BASE_PDC_AES
 ((
AT91PS_PDC
) 0xFFFA4100)

2703 
	#AT91C_BASE_AES
 ((
AT91PS_AES
) 0xFFFA4000)

2704 
	#AT91C_BASE_PDC_TDES
 ((
AT91PS_PDC
) 0xFFFA8100)

2705 
	#AT91C_BASE_TDES
 ((
AT91PS_TDES
) 0xFFFA8000)

2706 

	)

2710 
	#AT91C_ISRAM
 ((*) 0x00200000)

2711 
	#AT91C_ISRAM_SIZE
 (() 0x00010000)

2712 
	#AT91C_IFLASH
 ((*) 0x00100000)

2713 
	#AT91C_IFLASH_SIZE
 (() 0x00040000)

2714 

	)

	@portable/IAR/AtmelSAM7S64/AT91SAM7X256_inc.h

56 
	#AIC_SMR
 ( 0)

57 
	#AIC_SVR
 (128)

58 
	#AIC_IVR
 (256)

59 
	#AIC_FVR
 (260)

60 
	#AIC_ISR
 (264)

61 
	#AIC_IPR
 (268)

62 
	#AIC_IMR
 (272)

63 
	#AIC_CISR
 (276)

64 
	#AIC_IECR
 (288)

65 
	#AIC_IDCR
 (292)

66 
	#AIC_ICCR
 (296)

67 
	#AIC_ISCR
 (300)

68 
	#AIC_EOICR
 (304)

69 
	#AIC_SPU
 (308)

70 
	#AIC_DCR
 (312)

71 
	#AIC_FFER
 (320)

72 
	#AIC_FFDR
 (324)

73 
	#AIC_FFSR
 (328)

75 
	#AT91C_AIC_PRIOR
 (0x7 << 0)

76 
	#AT91C_AIC_PRIOR_LOWEST
 (0x0)

77 
	#AT91C_AIC_PRIOR_HIGHEST
 (0x7)

78 
	#AT91C_AIC_SRCTYPE
 (0x3 << 5)

79 
	#AT91C_AIC_SRCTYPE_INT_HIGH_LEVEL
 (0x0 << 5)

80 
	#AT91C_AIC_SRCTYPE_EXT_LOW_LEVEL
 (0x0 << 5)

81 
	#AT91C_AIC_SRCTYPE_INT_POSITIVE_EDGE
 (0x1 << 5)

82 
	#AT91C_AIC_SRCTYPE_EXT_NEGATIVE_EDGE
 (0x1 << 5)

83 
	#AT91C_AIC_SRCTYPE_HIGH_LEVEL
 (0x2 << 5)

84 
	#AT91C_AIC_SRCTYPE_POSITIVE_EDGE
 (0x3 << 5)

86 
	#AT91C_AIC_NFIQ
 (0x1 << 0)

87 
	#AT91C_AIC_NIRQ
 (0x1 << 1)

89 
	#AT91C_AIC_DCR_PROT
 (0x1 << 0)

90 
	#AT91C_AIC_DCR_GMSK
 (0x1 << 1)

91 

	)

96 
	#PDC_RPR
 ( 0)

97 
	#PDC_RCR
 ( 4)

98 
	#PDC_TPR
 ( 8)

99 
	#PDC_TCR
 (12)

100 
	#PDC_RNPR
 (16)

101 
	#PDC_RNCR
 (20)

102 
	#PDC_TNPR
 (24)

103 
	#PDC_TNCR
 (28)

104 
	#PDC_PTCR
 (32)

105 
	#PDC_PTSR
 (36)

107 
	#AT91C_PDC_RXTEN
 (0x1 << 0)

108 
	#AT91C_PDC_RXTDIS
 (0x1 << 1)

109 
	#AT91C_PDC_TXTEN
 (0x1 << 8)

110 
	#AT91C_PDC_TXTDIS
 (0x1 << 9)

112 

	)

117 
	#DBGU_CR
 ( 0)

118 
	#DBGU_MR
 ( 4)

119 
	#DBGU_IER
 ( 8)

120 
	#DBGU_IDR
 (12)

121 
	#DBGU_IMR
 (16)

122 
	#DBGU_CSR
 (20)

123 
	#DBGU_RHR
 (24)

124 
	#DBGU_THR
 (28)

125 
	#DBGU_BRGR
 (32)

126 
	#DBGU_CIDR
 (64)

127 
	#DBGU_EXID
 (68)

128 
	#DBGU_FNTR
 (72)

129 
	#DBGU_RPR
 (256)

130 
	#DBGU_RCR
 (260)

131 
	#DBGU_TPR
 (264)

132 
	#DBGU_TCR
 (268)

133 
	#DBGU_RNPR
 (272)

134 
	#DBGU_RNCR
 (276)

135 
	#DBGU_TNPR
 (280)

136 
	#DBGU_TNCR
 (284)

137 
	#DBGU_PTCR
 (288)

138 
	#DBGU_PTSR
 (292)

140 
	#AT91C_US_RSTRX
 (0x1 << 2)

141 
	#AT91C_US_RSTTX
 (0x1 << 3)

142 
	#AT91C_US_RXEN
 (0x1 << 4)

143 
	#AT91C_US_RXDIS
 (0x1 << 5)

144 
	#AT91C_US_TXEN
 (0x1 << 6)

145 
	#AT91C_US_TXDIS
 (0x1 << 7)

146 
	#AT91C_US_RSTSTA
 (0x1 << 8)

148 
	#AT91C_US_PAR
 (0x7 << 9)

149 
	#AT91C_US_PAR_EVEN
 (0x0 << 9)

150 
	#AT91C_US_PAR_ODD
 (0x1 << 9)

151 
	#AT91C_US_PAR_SPACE
 (0x2 << 9)

152 
	#AT91C_US_PAR_MARK
 (0x3 << 9)

153 
	#AT91C_US_PAR_NONE
 (0x4 << 9)

154 
	#AT91C_US_PAR_MULTI_DROP
 (0x6 << 9)

155 
	#AT91C_US_CHMODE
 (0x3 << 14)

156 
	#AT91C_US_CHMODE_NORMAL
 (0x0 << 14)

157 
	#AT91C_US_CHMODE_AUTO
 (0x1 << 14)

158 
	#AT91C_US_CHMODE_LOCAL
 (0x2 << 14)

159 
	#AT91C_US_CHMODE_REMOTE
 (0x3 << 14)

161 
	#AT91C_US_RXRDY
 (0x1 << 0)

162 
	#AT91C_US_TXRDY
 (0x1 << 1)

163 
	#AT91C_US_ENDRX
 (0x1 << 3)

164 
	#AT91C_US_ENDTX
 (0x1 << 4)

165 
	#AT91C_US_OVRE
 (0x1 << 5)

166 
	#AT91C_US_FRAME
 (0x1 << 6)

167 
	#AT91C_US_PARE
 (0x1 << 7)

168 
	#AT91C_US_TXEMPTY
 (0x1 << 9)

169 
	#AT91C_US_TXBUFE
 (0x1 << 11)

170 
	#AT91C_US_RXBUFF
 (0x1 << 12)

171 
	#AT91C_US_COMM_TX
 (0x1 << 30)

172 
	#AT91C_US_COMM_RX
 (0x1 << 31)

177 
	#AT91C_US_FORCE_NTRST
 (0x1 << 0)

178 

	)

183 
	#PIO_PER
 ( 0)

184 
	#PIO_PDR
 ( 4)

185 
	#PIO_PSR
 ( 8)

186 
	#PIO_OER
 (16)

187 
	#PIO_ODR
 (20)

188 
	#PIO_OSR
 (24)

189 
	#PIO_IFER
 (32)

190 
	#PIO_IFDR
 (36)

191 
	#PIO_IFSR
 (40)

192 
	#PIO_SODR
 (48)

193 
	#PIO_CODR
 (52)

194 
	#PIO_ODSR
 (56)

195 
	#PIO_PDSR
 (60)

196 
	#PIO_IER
 (64)

197 
	#PIO_IDR
 (68)

198 
	#PIO_IMR
 (72)

199 
	#PIO_ISR
 (76)

200 
	#PIO_MDER
 (80)

201 
	#PIO_MDDR
 (84)

202 
	#PIO_MDSR
 (88)

203 
	#PIO_PPUDR
 (96)

204 
	#PIO_PPUER
 (100)

205 
	#PIO_PPUSR
 (104)

206 
	#PIO_ASR
 (112)

207 
	#PIO_BSR
 (116)

208 
	#PIO_ABSR
 (120)

209 
	#PIO_OWER
 (160)

210 
	#PIO_OWDR
 (164)

211 
	#PIO_OWSR
 (168)

212 

	)

217 
	#CKGR_MOR
 ( 0)

218 
	#CKGR_MCFR
 ( 4)

219 
	#CKGR_PLLR
 (12)

221 
	#AT91C_CKGR_MOSCEN
 (0x1 << 0)

222 
	#AT91C_CKGR_OSCBYPASS
 (0x1 << 1)

223 
	#AT91C_CKGR_OSCOUNT
 (0xFF << 8)

225 
	#AT91C_CKGR_MAINF
 (0xFFFF << 0)

226 
	#AT91C_CKGR_MAINRDY
 (0x1 << 16)

228 
	#AT91C_CKGR_DIV
 (0xFF << 0)

229 
	#AT91C_CKGR_DIV_0
 (0x0)

230 
	#AT91C_CKGR_DIV_BYPASS
 (0x1)

231 
	#AT91C_CKGR_PLLCOUNT
 (0x3F << 8)

232 
	#AT91C_CKGR_OUT
 (0x3 << 14)

233 
	#AT91C_CKGR_OUT_0
 (0x0 << 14)

234 
	#AT91C_CKGR_OUT_1
 (0x1 << 14)

235 
	#AT91C_CKGR_OUT_2
 (0x2 << 14)

236 
	#AT91C_CKGR_OUT_3
 (0x3 << 14)

237 
	#AT91C_CKGR_MUL
 (0x7FF << 16)

238 
	#AT91C_CKGR_USBDIV
 (0x3 << 28)

239 
	#AT91C_CKGR_USBDIV_0
 (0x0 << 28)

240 
	#AT91C_CKGR_USBDIV_1
 (0x1 << 28)

241 
	#AT91C_CKGR_USBDIV_2
 (0x2 << 28)

242 

	)

247 
	#PMC_SCER
 ( 0)

248 
	#PMC_SCDR
 ( 4)

249 
	#PMC_SCSR
 ( 8)

250 
	#PMC_PCER
 (16)

251 
	#PMC_PCDR
 (20)

252 
	#PMC_PCSR
 (24)

253 
	#PMC_MOR
 (32)

254 
	#PMC_MCFR
 (36)

255 
	#PMC_PLLR
 (44)

256 
	#PMC_MCKR
 (48)

257 
	#PMC_PCKR
 (64)

258 
	#PMC_IER
 (96)

259 
	#PMC_IDR
 (100)

260 
	#PMC_SR
 (104)

261 
	#PMC_IMR
 (108)

263 
	#AT91C_PMC_PCK
 (0x1 << 0)

264 
	#AT91C_PMC_UDP
 (0x1 << 7)

265 
	#AT91C_PMC_PCK0
 (0x1 << 8)

266 
	#AT91C_PMC_PCK1
 (0x1 << 9)

267 
	#AT91C_PMC_PCK2
 (0x1 << 10)

268 
	#AT91C_PMC_PCK3
 (0x1 << 11)

275 
	#AT91C_PMC_CSS
 (0x3 << 0)

276 
	#AT91C_PMC_CSS_SLOW_CLK
 (0x0)

277 
	#AT91C_PMC_CSS_MAIN_CLK
 (0x1)

278 
	#AT91C_PMC_CSS_PLL_CLK
 (0x3)

279 
	#AT91C_PMC_PRES
 (0x7 << 2)

280 
	#AT91C_PMC_PRES_CLK
 (0x0 << 2)

281 
	#AT91C_PMC_PRES_CLK_2
 (0x1 << 2)

282 
	#AT91C_PMC_PRES_CLK_4
 (0x2 << 2)

283 
	#AT91C_PMC_PRES_CLK_8
 (0x3 << 2)

284 
	#AT91C_PMC_PRES_CLK_16
 (0x4 << 2)

285 
	#AT91C_PMC_PRES_CLK_32
 (0x5 << 2)

286 
	#AT91C_PMC_PRES_CLK_64
 (0x6 << 2)

289 
	#AT91C_PMC_MOSCS
 (0x1 << 0)

290 
	#AT91C_PMC_LOCK
 (0x1 << 2)

291 
	#AT91C_PMC_MCKRDY
 (0x1 << 3)

292 
	#AT91C_PMC_PCK0RDY
 (0x1 << 8)

293 
	#AT91C_PMC_PCK1RDY
 (0x1 << 9)

294 
	#AT91C_PMC_PCK2RDY
 (0x1 << 10)

295 
	#AT91C_PMC_PCK3RDY
 (0x1 << 11)

299 

	)

304 
	#RSTC_RCR
 ( 0)

305 
	#RSTC_RSR
 ( 4)

306 
	#RSTC_RMR
 ( 8)

308 
	#AT91C_RSTC_PROCRST
 (0x1 << 0)

309 
	#AT91C_RSTC_PERRST
 (0x1 << 2)

310 
	#AT91C_RSTC_EXTRST
 (0x1 << 3)

311 
	#AT91C_RSTC_KEY
 (0xFF << 24)

313 
	#AT91C_RSTC_URSTS
 (0x1 << 0)

314 
	#AT91C_RSTC_BODSTS
 (0x1 << 1)

315 
	#AT91C_RSTC_RSTTYP
 (0x7 << 8)

316 
	#AT91C_RSTC_RSTTYP_POWERUP
 (0x0 << 8)

317 
	#AT91C_RSTC_RSTTYP_WAKEUP
 (0x1 << 8)

318 
	#AT91C_RSTC_RSTTYP_WATCHDOG
 (0x2 << 8)

319 
	#AT91C_RSTC_RSTTYP_SOFTWARE
 (0x3 << 8)

320 
	#AT91C_RSTC_RSTTYP_USER
 (0x4 << 8)

321 
	#AT91C_RSTC_RSTTYP_BROWNOUT
 (0x5 << 8)

322 
	#AT91C_RSTC_NRSTL
 (0x1 << 16)

323 
	#AT91C_RSTC_SRCMP
 (0x1 << 17)

325 
	#AT91C_RSTC_URSTEN
 (0x1 << 0)

326 
	#AT91C_RSTC_URSTIEN
 (0x1 << 4)

327 
	#AT91C_RSTC_ERSTL
 (0xF << 8)

328 
	#AT91C_RSTC_BODIEN
 (0x1 << 16)

329 

	)

334 
	#RTTC_RTMR
 ( 0)

335 
	#RTTC_RTAR
 ( 4)

336 
	#RTTC_RTVR
 ( 8)

337 
	#RTTC_RTSR
 (12)

339 
	#AT91C_RTTC_RTPRES
 (0xFFFF << 0)

340 
	#AT91C_RTTC_ALMIEN
 (0x1 << 16)

341 
	#AT91C_RTTC_RTTINCIEN
 (0x1 << 17)

342 
	#AT91C_RTTC_RTTRST
 (0x1 << 18)

344 
	#AT91C_RTTC_ALMV
 (0x0 << 0)

346 
	#AT91C_RTTC_CRTV
 (0x0 << 0)

348 
	#AT91C_RTTC_ALMS
 (0x1 << 0)

349 
	#AT91C_RTTC_RTTINC
 (0x1 << 1)

350 

	)

355 
	#PITC_PIMR
 ( 0)

356 
	#PITC_PISR
 ( 4)

357 
	#PITC_PIVR
 ( 8)

358 
	#PITC_PIIR
 (12)

360 
	#AT91C_PITC_PIV
 (0xFFFFF << 0)

361 
	#AT91C_PITC_PITEN
 (0x1 << 24)

362 
	#AT91C_PITC_PITIEN
 (0x1 << 25)

364 
	#AT91C_PITC_PITS
 (0x1 << 0)

366 
	#AT91C_PITC_CPIV
 (0xFFFFF << 0)

367 
	#AT91C_PITC_PICNT
 (0xFFF << 20)

369 

	)

374 
	#WDTC_WDCR
 ( 0)

375 
	#WDTC_WDMR
 ( 4)

376 
	#WDTC_WDSR
 ( 8)

378 
	#AT91C_WDTC_WDRSTT
 (0x1 << 0)

379 
	#AT91C_WDTC_KEY
 (0xFF << 24)

381 
	#AT91C_WDTC_WDV
 (0xFFF << 0)

382 
	#AT91C_WDTC_WDFIEN
 (0x1 << 12)

383 
	#AT91C_WDTC_WDRSTEN
 (0x1 << 13)

384 
	#AT91C_WDTC_WDRPROC
 (0x1 << 14)

385 
	#AT91C_WDTC_WDDIS
 (0x1 << 15)

386 
	#AT91C_WDTC_WDD
 (0xFFF << 16)

387 
	#AT91C_WDTC_WDDBGHLT
 (0x1 << 28)

388 
	#AT91C_WDTC_WDIDLEHLT
 (0x1 << 29)

390 
	#AT91C_WDTC_WDUNF
 (0x1 << 0)

391 
	#AT91C_WDTC_WDERR
 (0x1 << 1)

392 

	)

397 
	#VREG_MR
 ( 0)

399 
	#AT91C_VREG_PSTDBY
 (0x1 << 0)

400 

	)

405 
	#MC_RCR
 ( 0)

406 
	#MC_ASR
 ( 4)

407 
	#MC_AASR
 ( 8)

408 
	#MC_FMR
 (96)

409 
	#MC_FCR
 (100)

410 
	#MC_FSR
 (104)

412 
	#AT91C_MC_RCB
 (0x1 << 0)

414 
	#AT91C_MC_UNDADD
 (0x1 << 0)

415 
	#AT91C_MC_MISADD
 (0x1 << 1)

416 
	#AT91C_MC_ABTSZ
 (0x3 << 8)

417 
	#AT91C_MC_ABTSZ_BYTE
 (0x0 << 8)

418 
	#AT91C_MC_ABTSZ_HWORD
 (0x1 << 8)

419 
	#AT91C_MC_ABTSZ_WORD
 (0x2 << 8)

420 
	#AT91C_MC_ABTTYP
 (0x3 << 10)

421 
	#AT91C_MC_ABTTYP_DATAR
 (0x0 << 10)

422 
	#AT91C_MC_ABTTYP_DATAW
 (0x1 << 10)

423 
	#AT91C_MC_ABTTYP_FETCH
 (0x2 << 10)

424 
	#AT91C_MC_MST0
 (0x1 << 16)

425 
	#AT91C_MC_MST1
 (0x1 << 17)

426 
	#AT91C_MC_SVMST0
 (0x1 << 24)

427 
	#AT91C_MC_SVMST1
 (0x1 << 25)

429 
	#AT91C_MC_FRDY
 (0x1 << 0)

430 
	#AT91C_MC_LOCKE
 (0x1 << 2)

431 
	#AT91C_MC_PROGE
 (0x1 << 3)

432 
	#AT91C_MC_NEBP
 (0x1 << 7)

433 
	#AT91C_MC_FWS
 (0x3 << 8)

434 
	#AT91C_MC_FWS_0FWS
 (0x0 << 8)

435 
	#AT91C_MC_FWS_1FWS
 (0x1 << 8)

436 
	#AT91C_MC_FWS_2FWS
 (0x2 << 8)

437 
	#AT91C_MC_FWS_3FWS
 (0x3 << 8)

438 
	#AT91C_MC_FMCN
 (0xFF << 16)

440 
	#AT91C_MC_FCMD
 (0xF << 0)

441 
	#AT91C_MC_FCMD_START_PROG
 (0x1)

442 
	#AT91C_MC_FCMD_LOCK
 (0x2)

443 
	#AT91C_MC_FCMD_PROG_AND_LOCK
 (0x3)

444 
	#AT91C_MC_FCMD_UNLOCK
 (0x4)

445 
	#AT91C_MC_FCMD_ERASE_ALL
 (0x8)

446 
	#AT91C_MC_FCMD_SET_GP_NVM
 (0xB)

447 
	#AT91C_MC_FCMD_CLR_GP_NVM
 (0xD)

448 
	#AT91C_MC_FCMD_SET_SECURITY
 (0xF)

449 
	#AT91C_MC_PAGEN
 (0x3FF << 8)

450 
	#AT91C_MC_KEY
 (0xFF << 24)

452 
	#AT91C_MC_SECURITY
 (0x1 << 4)

453 
	#AT91C_MC_GPNVM0
 (0x1 << 8)

454 
	#AT91C_MC_GPNVM1
 (0x1 << 9)

455 
	#AT91C_MC_GPNVM2
 (0x1 << 10)

456 
	#AT91C_MC_GPNVM3
 (0x1 << 11)

457 
	#AT91C_MC_GPNVM4
 (0x1 << 12)

458 
	#AT91C_MC_GPNVM5
 (0x1 << 13)

459 
	#AT91C_MC_GPNVM6
 (0x1 << 14)

460 
	#AT91C_MC_GPNVM7
 (0x1 << 15)

461 
	#AT91C_MC_LOCKS0
 (0x1 << 16)

462 
	#AT91C_MC_LOCKS1
 (0x1 << 17)

463 
	#AT91C_MC_LOCKS2
 (0x1 << 18)

464 
	#AT91C_MC_LOCKS3
 (0x1 << 19)

465 
	#AT91C_MC_LOCKS4
 (0x1 << 20)

466 
	#AT91C_MC_LOCKS5
 (0x1 << 21)

467 
	#AT91C_MC_LOCKS6
 (0x1 << 22)

468 
	#AT91C_MC_LOCKS7
 (0x1 << 23)

469 
	#AT91C_MC_LOCKS8
 (0x1 << 24)

470 
	#AT91C_MC_LOCKS9
 (0x1 << 25)

471 
	#AT91C_MC_LOCKS10
 (0x1 << 26)

472 
	#AT91C_MC_LOCKS11
 (0x1 << 27)

473 
	#AT91C_MC_LOCKS12
 (0x1 << 28)

474 
	#AT91C_MC_LOCKS13
 (0x1 << 29)

475 
	#AT91C_MC_LOCKS14
 (0x1 << 30)

476 
	#AT91C_MC_LOCKS15
 (0x1 << 31)

477 

	)

482 
	#SPI_CR
 ( 0)

483 
	#SPI_MR
 ( 4)

484 
	#SPI_RDR
 ( 8)

485 
	#SPI_TDR
 (12)

486 
	#SPI_SR
 (16)

487 
	#SPI_IER
 (20)

488 
	#SPI_IDR
 (24)

489 
	#SPI_IMR
 (28)

490 
	#SPI_CSR
 (48)

491 
	#SPI_RPR
 (256)

492 
	#SPI_RCR
 (260)

493 
	#SPI_TPR
 (264)

494 
	#SPI_TCR
 (268)

495 
	#SPI_RNPR
 (272)

496 
	#SPI_RNCR
 (276)

497 
	#SPI_TNPR
 (280)

498 
	#SPI_TNCR
 (284)

499 
	#SPI_PTCR
 (288)

500 
	#SPI_PTSR
 (292)

502 
	#AT91C_SPI_SPIEN
 (0x1 << 0)

503 
	#AT91C_SPI_SPIDIS
 (0x1 << 1)

504 
	#AT91C_SPI_SWRST
 (0x1 << 7)

505 
	#AT91C_SPI_LASTXFER
 (0x1 << 24)

507 
	#AT91C_SPI_MSTR
 (0x1 << 0)

508 
	#AT91C_SPI_PS
 (0x1 << 1)

509 
	#AT91C_SPI_PS_FIXED
 (0x0 << 1)

510 
	#AT91C_SPI_PS_VARIABLE
 (0x1 << 1)

511 
	#AT91C_SPI_PCSDEC
 (0x1 << 2)

512 
	#AT91C_SPI_FDIV
 (0x1 << 3)

513 
	#AT91C_SPI_MODFDIS
 (0x1 << 4)

514 
	#AT91C_SPI_LLB
 (0x1 << 7)

515 
	#AT91C_SPI_PCS
 (0xF << 16)

516 
	#AT91C_SPI_DLYBCS
 (0xFF << 24)

518 
	#AT91C_SPI_RD
 (0xFFFF << 0)

519 
	#AT91C_SPI_RPCS
 (0xF << 16)

521 
	#AT91C_SPI_TD
 (0xFFFF << 0)

522 
	#AT91C_SPI_TPCS
 (0xF << 16)

524 
	#AT91C_SPI_RDRF
 (0x1 << 0)

525 
	#AT91C_SPI_TDRE
 (0x1 << 1)

526 
	#AT91C_SPI_MODF
 (0x1 << 2)

527 
	#AT91C_SPI_OVRES
 (0x1 << 3)

528 
	#AT91C_SPI_ENDRX
 (0x1 << 4)

529 
	#AT91C_SPI_ENDTX
 (0x1 << 5)

530 
	#AT91C_SPI_RXBUFF
 (0x1 << 6)

531 
	#AT91C_SPI_TXBUFE
 (0x1 << 7)

532 
	#AT91C_SPI_NSSR
 (0x1 << 8)

533 
	#AT91C_SPI_TXEMPTY
 (0x1 << 9)

534 
	#AT91C_SPI_SPIENS
 (0x1 << 16)

539 
	#AT91C_SPI_CPOL
 (0x1 << 0)

540 
	#AT91C_SPI_NCPHA
 (0x1 << 1)

541 
	#AT91C_SPI_CSAAT
 (0x1 << 3)

542 
	#AT91C_SPI_BITS
 (0xF << 4)

543 
	#AT91C_SPI_BITS_8
 (0x0 << 4)

544 
	#AT91C_SPI_BITS_9
 (0x1 << 4)

545 
	#AT91C_SPI_BITS_10
 (0x2 << 4)

546 
	#AT91C_SPI_BITS_11
 (0x3 << 4)

547 
	#AT91C_SPI_BITS_12
 (0x4 << 4)

548 
	#AT91C_SPI_BITS_13
 (0x5 << 4)

549 
	#AT91C_SPI_BITS_14
 (0x6 << 4)

550 
	#AT91C_SPI_BITS_15
 (0x7 << 4)

551 
	#AT91C_SPI_BITS_16
 (0x8 << 4)

552 
	#AT91C_SPI_SCBR
 (0xFF << 8)

553 
	#AT91C_SPI_DLYBS
 (0xFF << 16)

554 
	#AT91C_SPI_DLYBCT
 (0xFF << 24)

555 

	)

560 
	#US_CR
 ( 0)

561 
	#US_MR
 ( 4)

562 
	#US_IER
 ( 8)

563 
	#US_IDR
 (12)

564 
	#US_IMR
 (16)

565 
	#US_CSR
 (20)

566 
	#US_RHR
 (24)

567 
	#US_THR
 (28)

568 
	#US_BRGR
 (32)

569 
	#US_RTOR
 (36)

570 
	#US_TTGR
 (40)

571 
	#US_FIDI
 (64)

572 
	#US_NER
 (68)

573 
	#US_IF
 (76)

574 
	#US_RPR
 (256)

575 
	#US_RCR
 (260)

576 
	#US_TPR
 (264)

577 
	#US_TCR
 (268)

578 
	#US_RNPR
 (272)

579 
	#US_RNCR
 (276)

580 
	#US_TNPR
 (280)

581 
	#US_TNCR
 (284)

582 
	#US_PTCR
 (288)

583 
	#US_PTSR
 (292)

585 
	#AT91C_US_STTBRK
 (0x1 << 9)

586 
	#AT91C_US_STPBRK
 (0x1 << 10)

587 
	#AT91C_US_STTTO
 (0x1 << 11)

588 
	#AT91C_US_SENDA
 (0x1 << 12)

589 
	#AT91C_US_RSTIT
 (0x1 << 13)

590 
	#AT91C_US_RSTNACK
 (0x1 << 14)

591 
	#AT91C_US_RETTO
 (0x1 << 15)

592 
	#AT91C_US_DTREN
 (0x1 << 16)

593 
	#AT91C_US_DTRDIS
 (0x1 << 17)

594 
	#AT91C_US_RTSEN
 (0x1 << 18)

595 
	#AT91C_US_RTSDIS
 (0x1 << 19)

597 
	#AT91C_US_USMODE
 (0xF << 0)

598 
	#AT91C_US_USMODE_NORMAL
 (0x0)

599 
	#AT91C_US_USMODE_RS485
 (0x1)

600 
	#AT91C_US_USMODE_HWHSH
 (0x2)

601 
	#AT91C_US_USMODE_MODEM
 (0x3)

602 
	#AT91C_US_USMODE_ISO7816_0
 (0x4)

603 
	#AT91C_US_USMODE_ISO7816_1
 (0x6)

604 
	#AT91C_US_USMODE_IRDA
 (0x8)

605 
	#AT91C_US_USMODE_SWHSH
 (0xC)

606 
	#AT91C_US_CLKS
 (0x3 << 4)

607 
	#AT91C_US_CLKS_CLOCK
 (0x0 << 4)

608 
	#AT91C_US_CLKS_FDIV1
 (0x1 << 4)

609 
	#AT91C_US_CLKS_SLOW
 (0x2 << 4)

610 
	#AT91C_US_CLKS_EXT
 (0x3 << 4)

611 
	#AT91C_US_CHRL
 (0x3 << 6)

612 
	#AT91C_US_CHRL_5_BITS
 (0x0 << 6)

613 
	#AT91C_US_CHRL_6_BITS
 (0x1 << 6)

614 
	#AT91C_US_CHRL_7_BITS
 (0x2 << 6)

615 
	#AT91C_US_CHRL_8_BITS
 (0x3 << 6)

616 
	#AT91C_US_SYNC
 (0x1 << 8)

617 
	#AT91C_US_NBSTOP
 (0x3 << 12)

618 
	#AT91C_US_NBSTOP_1_BIT
 (0x0 << 12)

619 
	#AT91C_US_NBSTOP_15_BIT
 (0x1 << 12)

620 
	#AT91C_US_NBSTOP_2_BIT
 (0x2 << 12)

621 
	#AT91C_US_MSBF
 (0x1 << 16)

622 
	#AT91C_US_MODE9
 (0x1 << 17)

623 
	#AT91C_US_CKLO
 (0x1 << 18)

624 
	#AT91C_US_OVER
 (0x1 << 19)

625 
	#AT91C_US_INACK
 (0x1 << 20)

626 
	#AT91C_US_DSNACK
 (0x1 << 21)

627 
	#AT91C_US_MAX_ITER
 (0x1 << 24)

628 
	#AT91C_US_FILTER
 (0x1 << 28)

630 
	#AT91C_US_RXBRK
 (0x1 << 2)

631 
	#AT91C_US_TIMEOUT
 (0x1 << 8)

632 
	#AT91C_US_ITERATION
 (0x1 << 10)

633 
	#AT91C_US_NACK
 (0x1 << 13)

634 
	#AT91C_US_RIIC
 (0x1 << 16)

635 
	#AT91C_US_DSRIC
 (0x1 << 17)

636 
	#AT91C_US_DCDIC
 (0x1 << 18)

637 
	#AT91C_US_CTSIC
 (0x1 << 19)

641 
	#AT91C_US_RI
 (0x1 << 20)

642 
	#AT91C_US_DSR
 (0x1 << 21)

643 
	#AT91C_US_DCD
 (0x1 << 22)

644 
	#AT91C_US_CTS
 (0x1 << 23)

645 

	)

650 
	#SSC_CR
 ( 0)

651 
	#SSC_CMR
 ( 4)

652 
	#SSC_RCMR
 (16)

653 
	#SSC_RFMR
 (20)

654 
	#SSC_TCMR
 (24)

655 
	#SSC_TFMR
 (28)

656 
	#SSC_RHR
 (32)

657 
	#SSC_THR
 (36)

658 
	#SSC_RSHR
 (48)

659 
	#SSC_TSHR
 (52)

660 
	#SSC_SR
 (64)

661 
	#SSC_IER
 (68)

662 
	#SSC_IDR
 (72)

663 
	#SSC_IMR
 (76)

664 
	#SSC_RPR
 (256)

665 
	#SSC_RCR
 (260)

666 
	#SSC_TPR
 (264)

667 
	#SSC_TCR
 (268)

668 
	#SSC_RNPR
 (272)

669 
	#SSC_RNCR
 (276)

670 
	#SSC_TNPR
 (280)

671 
	#SSC_TNCR
 (284)

672 
	#SSC_PTCR
 (288)

673 
	#SSC_PTSR
 (292)

675 
	#AT91C_SSC_RXEN
 (0x1 << 0)

676 
	#AT91C_SSC_RXDIS
 (0x1 << 1)

677 
	#AT91C_SSC_TXEN
 (0x1 << 8)

678 
	#AT91C_SSC_TXDIS
 (0x1 << 9)

679 
	#AT91C_SSC_SWRST
 (0x1 << 15)

681 
	#AT91C_SSC_CKS
 (0x3 << 0)

682 
	#AT91C_SSC_CKS_DIV
 (0x0)

683 
	#AT91C_SSC_CKS_TK
 (0x1)

684 
	#AT91C_SSC_CKS_RK
 (0x2)

685 
	#AT91C_SSC_CKO
 (0x7 << 2)

686 
	#AT91C_SSC_CKO_NONE
 (0x0 << 2)

687 
	#AT91C_SSC_CKO_CONTINOUS
 (0x1 << 2)

688 
	#AT91C_SSC_CKO_DATA_TX
 (0x2 << 2)

689 
	#AT91C_SSC_CKI
 (0x1 << 5)

690 
	#AT91C_SSC_START
 (0xF << 8)

691 
	#AT91C_SSC_START_CONTINOUS
 (0x0 << 8)

692 
	#AT91C_SSC_START_TX
 (0x1 << 8)

693 
	#AT91C_SSC_START_LOW_RF
 (0x2 << 8)

694 
	#AT91C_SSC_START_HIGH_RF
 (0x3 << 8)

695 
	#AT91C_SSC_START_FALL_RF
 (0x4 << 8)

696 
	#AT91C_SSC_START_RISE_RF
 (0x5 << 8)

697 
	#AT91C_SSC_START_LEVEL_RF
 (0x6 << 8)

698 
	#AT91C_SSC_START_EDGE_RF
 (0x7 << 8)

699 
	#AT91C_SSC_START_0
 (0x8 << 8)

700 
	#AT91C_SSC_STTDLY
 (0xFF << 16)

701 
	#AT91C_SSC_PERIOD
 (0xFF << 24)

703 
	#AT91C_SSC_DATLEN
 (0x1F << 0)

704 
	#AT91C_SSC_LOOP
 (0x1 << 5)

705 
	#AT91C_SSC_MSBF
 (0x1 << 7)

706 
	#AT91C_SSC_DATNB
 (0xF << 8)

707 
	#AT91C_SSC_FSLEN
 (0xF << 16)

708 
	#AT91C_SSC_FSOS
 (0x7 << 20)

709 
	#AT91C_SSC_FSOS_NONE
 (0x0 << 20)

710 
	#AT91C_SSC_FSOS_NEGATIVE
 (0x1 << 20)

711 
	#AT91C_SSC_FSOS_POSITIVE
 (0x2 << 20)

712 
	#AT91C_SSC_FSOS_LOW
 (0x3 << 20)

713 
	#AT91C_SSC_FSOS_HIGH
 (0x4 << 20)

714 
	#AT91C_SSC_FSOS_TOGGLE
 (0x5 << 20)

715 
	#AT91C_SSC_FSEDGE
 (0x1 << 24)

718 
	#AT91C_SSC_DATDEF
 (0x1 << 5)

719 
	#AT91C_SSC_FSDEN
 (0x1 << 23)

721 
	#AT91C_SSC_TXRDY
 (0x1 << 0)

722 
	#AT91C_SSC_TXEMPTY
 (0x1 << 1)

723 
	#AT91C_SSC_ENDTX
 (0x1 << 2)

724 
	#AT91C_SSC_TXBUFE
 (0x1 << 3)

725 
	#AT91C_SSC_RXRDY
 (0x1 << 4)

726 
	#AT91C_SSC_OVRUN
 (0x1 << 5)

727 
	#AT91C_SSC_ENDRX
 (0x1 << 6)

728 
	#AT91C_SSC_RXBUFF
 (0x1 << 7)

729 
	#AT91C_SSC_TXSYN
 (0x1 << 10)

730 
	#AT91C_SSC_RXSYN
 (0x1 << 11)

731 
	#AT91C_SSC_TXENA
 (0x1 << 16)

732 
	#AT91C_SSC_RXENA
 (0x1 << 17)

736 

	)

741 
	#TWI_CR
 ( 0)

742 
	#TWI_MMR
 ( 4)

743 
	#TWI_IADR
 (12)

744 
	#TWI_CWGR
 (16)

745 
	#TWI_SR
 (32)

746 
	#TWI_IER
 (36)

747 
	#TWI_IDR
 (40)

748 
	#TWI_IMR
 (44)

749 
	#TWI_RHR
 (48)

750 
	#TWI_THR
 (52)

752 
	#AT91C_TWI_START
 (0x1 << 0)

753 
	#AT91C_TWI_STOP
 (0x1 << 1)

754 
	#AT91C_TWI_MSEN
 (0x1 << 2)

755 
	#AT91C_TWI_MSDIS
 (0x1 << 3)

756 
	#AT91C_TWI_SWRST
 (0x1 << 7)

758 
	#AT91C_TWI_IADRSZ
 (0x3 << 8)

759 
	#AT91C_TWI_IADRSZ_NO
 (0x0 << 8)

760 
	#AT91C_TWI_IADRSZ_1_BYTE
 (0x1 << 8)

761 
	#AT91C_TWI_IADRSZ_2_BYTE
 (0x2 << 8)

762 
	#AT91C_TWI_IADRSZ_3_BYTE
 (0x3 << 8)

763 
	#AT91C_TWI_MREAD
 (0x1 << 12)

764 
	#AT91C_TWI_DADR
 (0x7F << 16)

766 
	#AT91C_TWI_CLDIV
 (0xFF << 0)

767 
	#AT91C_TWI_CHDIV
 (0xFF << 8)

768 
	#AT91C_TWI_CKDIV
 (0x7 << 16)

770 
	#AT91C_TWI_TXCOMP
 (0x1 << 0)

771 
	#AT91C_TWI_RXRDY
 (0x1 << 1)

772 
	#AT91C_TWI_TXRDY
 (0x1 << 2)

773 
	#AT91C_TWI_OVRE
 (0x1 << 6)

774 
	#AT91C_TWI_UNRE
 (0x1 << 7)

775 
	#AT91C_TWI_NACK
 (0x1 << 8)

779 

	)

784 
	#PWMC_CMR
 ( 0)

785 
	#PWMC_CDTYR
 ( 4)

786 
	#PWMC_CPRDR
 ( 8)

787 
	#PWMC_CCNTR
 (12)

788 
	#PWMC_CUPDR
 (16)

789 
	#PWMC_Re£rved
 (20)

791 
	#AT91C_PWMC_CPRE
 (0xF << 0)

792 
	#AT91C_PWMC_CPRE_MCK
 (0x0)

793 
	#AT91C_PWMC_CPRE_MCKA
 (0xB)

794 
	#AT91C_PWMC_CPRE_MCKB
 (0xC)

795 
	#AT91C_PWMC_CALG
 (0x1 << 8)

796 
	#AT91C_PWMC_CPOL
 (0x1 << 9)

797 
	#AT91C_PWMC_CPD
 (0x1 << 10)

799 
	#AT91C_PWMC_CDTY
 (0x0 << 0)

801 
	#AT91C_PWMC_CPRD
 (0x0 << 0)

803 
	#AT91C_PWMC_CCNT
 (0x0 << 0)

805 
	#AT91C_PWMC_CUPD
 (0x0 << 0)

806 

	)

811 
	#PWMC_MR
 ( 0)

812 
	#PWMC_ENA
 ( 4)

813 
	#PWMC_DIS
 ( 8)

814 
	#PWMC_SR
 (12)

815 
	#PWMC_IER
 (16)

816 
	#PWMC_IDR
 (20)

817 
	#PWMC_IMR
 (24)

818 
	#PWMC_ISR
 (28)

819 
	#PWMC_VR
 (252)

820 
	#PWMC_CH
 (512)

822 
	#AT91C_PWMC_DIVA
 (0xFF << 0)

823 
	#AT91C_PWMC_PREA
 (0xF << 8)

824 
	#AT91C_PWMC_PREA_MCK
 (0x0 << 8)

825 
	#AT91C_PWMC_DIVB
 (0xFF << 16)

826 
	#AT91C_PWMC_PREB
 (0xF << 24)

827 
	#AT91C_PWMC_PREB_MCK
 (0x0 << 24)

829 
	#AT91C_PWMC_CHID0
 (0x1 << 0)

830 
	#AT91C_PWMC_CHID1
 (0x1 << 1)

831 
	#AT91C_PWMC_CHID2
 (0x1 << 2)

832 
	#AT91C_PWMC_CHID3
 (0x1 << 3)

839 

	)

844 
	#UDP_NUM
 ( 0)

845 
	#UDP_GLBSTATE
 ( 4)

846 
	#UDP_FADDR
 ( 8)

847 
	#UDP_IER
 (16)

848 
	#UDP_IDR
 (20)

849 
	#UDP_IMR
 (24)

850 
	#UDP_ISR
 (28)

851 
	#UDP_ICR
 (32)

852 
	#UDP_RSTEP
 (40)

853 
	#UDP_CSR
 (48)

854 
	#UDP_FDR
 (80)

855 
	#UDP_TXVC
 (116)

857 
	#AT91C_UDP_FRM_NUM
 (0x7FF << 0)

858 
	#AT91C_UDP_FRM_ERR
 (0x1 << 16)

859 
	#AT91C_UDP_FRM_OK
 (0x1 << 17)

861 
	#AT91C_UDP_FADDEN
 (0x1 << 0)

862 
	#AT91C_UDP_CONFG
 (0x1 << 1)

863 
	#AT91C_UDP_ESR
 (0x1 << 2)

864 
	#AT91C_UDP_RSMINPR
 (0x1 << 3)

865 
	#AT91C_UDP_RMWUPE
 (0x1 << 4)

867 
	#AT91C_UDP_FADD
 (0xFF << 0)

868 
	#AT91C_UDP_FEN
 (0x1 << 8)

870 
	#AT91C_UDP_EPINT0
 (0x1 << 0)

871 
	#AT91C_UDP_EPINT1
 (0x1 << 1)

872 
	#AT91C_UDP_EPINT2
 (0x1 << 2)

873 
	#AT91C_UDP_EPINT3
 (0x1 << 3)

874 
	#AT91C_UDP_EPINT4
 (0x1 << 4)

875 
	#AT91C_UDP_EPINT5
 (0x1 << 5)

876 
	#AT91C_UDP_RXSUSP
 (0x1 << 8)

877 
	#AT91C_UDP_RXRSM
 (0x1 << 9)

878 
	#AT91C_UDP_EXTRSM
 (0x1 << 10)

879 
	#AT91C_UDP_SOFINT
 (0x1 << 11)

880 
	#AT91C_UDP_WAKEUP
 (0x1 << 13)

884 
	#AT91C_UDP_ENDBUSRES
 (0x1 << 12)

887 
	#AT91C_UDP_EP0
 (0x1 << 0)

888 
	#AT91C_UDP_EP1
 (0x1 << 1)

889 
	#AT91C_UDP_EP2
 (0x1 << 2)

890 
	#AT91C_UDP_EP3
 (0x1 << 3)

891 
	#AT91C_UDP_EP4
 (0x1 << 4)

892 
	#AT91C_UDP_EP5
 (0x1 << 5)

894 
	#AT91C_UDP_TXCOMP
 (0x1 << 0)

895 
	#AT91C_UDP_RX_DATA_BK0
 (0x1 << 1)

896 
	#AT91C_UDP_RXSETUP
 (0x1 << 2)

897 
	#AT91C_UDP_ISOERROR
 (0x1 << 3)

898 
	#AT91C_UDP_TXPKTRDY
 (0x1 << 4)

899 
	#AT91C_UDP_FORCESTALL
 (0x1 << 5)

900 
	#AT91C_UDP_RX_DATA_BK1
 (0x1 << 6)

901 
	#AT91C_UDP_DIR
 (0x1 << 7)

902 
	#AT91C_UDP_EPTYPE
 (0x7 << 8)

903 
	#AT91C_UDP_EPTYPE_CTRL
 (0x0 << 8)

904 
	#AT91C_UDP_EPTYPE_ISO_OUT
 (0x1 << 8)

905 
	#AT91C_UDP_EPTYPE_BULK_OUT
 (0x2 << 8)

906 
	#AT91C_UDP_EPTYPE_INT_OUT
 (0x3 << 8)

907 
	#AT91C_UDP_EPTYPE_ISO_IN
 (0x5 << 8)

908 
	#AT91C_UDP_EPTYPE_BULK_IN
 (0x6 << 8)

909 
	#AT91C_UDP_EPTYPE_INT_IN
 (0x7 << 8)

910 
	#AT91C_UDP_DTGLE
 (0x1 << 11)

911 
	#AT91C_UDP_EPEDS
 (0x1 << 15)

912 
	#AT91C_UDP_RXBYTECNT
 (0x7FF << 16)

914 
	#AT91C_UDP_TXVDIS
 (0x1 << 8)

915 
	#AT91C_UDP_PUON
 (0x1 << 9)

916 

	)

921 
	#TC_CCR
 ( 0)

922 
	#TC_CMR
 ( 4)

923 
	#TC_CV
 (16)

924 
	#TC_RA
 (20)

925 
	#TC_RB
 (24)

926 
	#TC_RC
 (28)

927 
	#TC_SR
 (32)

928 
	#TC_IER
 (36)

929 
	#TC_IDR
 (40)

930 
	#TC_IMR
 (44)

932 
	#AT91C_TC_CLKEN
 (0x1 << 0)

933 
	#AT91C_TC_CLKDIS
 (0x1 << 1)

934 
	#AT91C_TC_SWTRG
 (0x1 << 2)

936 
	#AT91C_TC_CLKS
 (0x7 << 0)

937 
	#AT91C_TC_CLKS_TIMER_DIV1_CLOCK
 (0x0)

938 
	#AT91C_TC_CLKS_TIMER_DIV2_CLOCK
 (0x1)

939 
	#AT91C_TC_CLKS_TIMER_DIV3_CLOCK
 (0x2)

940 
	#AT91C_TC_CLKS_TIMER_DIV4_CLOCK
 (0x3)

941 
	#AT91C_TC_CLKS_TIMER_DIV5_CLOCK
 (0x4)

942 
	#AT91C_TC_CLKS_XC0
 (0x5)

943 
	#AT91C_TC_CLKS_XC1
 (0x6)

944 
	#AT91C_TC_CLKS_XC2
 (0x7)

945 
	#AT91C_TC_CLKI
 (0x1 << 3)

946 
	#AT91C_TC_BURST
 (0x3 << 4)

947 
	#AT91C_TC_BURST_NONE
 (0x0 << 4)

948 
	#AT91C_TC_BURST_XC0
 (0x1 << 4)

949 
	#AT91C_TC_BURST_XC1
 (0x2 << 4)

950 
	#AT91C_TC_BURST_XC2
 (0x3 << 4)

951 
	#AT91C_TC_CPCSTOP
 (0x1 << 6)

952 
	#AT91C_TC_LDBSTOP
 (0x1 << 6)

953 
	#AT91C_TC_CPCDIS
 (0x1 << 7)

954 
	#AT91C_TC_LDBDIS
 (0x1 << 7)

955 
	#AT91C_TC_ETRGEDG
 (0x3 << 8)

956 
	#AT91C_TC_ETRGEDG_NONE
 (0x0 << 8)

957 
	#AT91C_TC_ETRGEDG_RISING
 (0x1 << 8)

958 
	#AT91C_TC_ETRGEDG_FALLING
 (0x2 << 8)

959 
	#AT91C_TC_ETRGEDG_BOTH
 (0x3 << 8)

960 
	#AT91C_TC_EEVTEDG
 (0x3 << 8)

961 
	#AT91C_TC_EEVTEDG_NONE
 (0x0 << 8)

962 
	#AT91C_TC_EEVTEDG_RISING
 (0x1 << 8)

963 
	#AT91C_TC_EEVTEDG_FALLING
 (0x2 << 8)

964 
	#AT91C_TC_EEVTEDG_BOTH
 (0x3 << 8)

965 
	#AT91C_TC_EEVT
 (0x3 << 10)

966 
	#AT91C_TC_EEVT_TIOB
 (0x0 << 10)

967 
	#AT91C_TC_EEVT_XC0
 (0x1 << 10)

968 
	#AT91C_TC_EEVT_XC1
 (0x2 << 10)

969 
	#AT91C_TC_EEVT_XC2
 (0x3 << 10)

970 
	#AT91C_TC_ABETRG
 (0x1 << 10)

971 
	#AT91C_TC_ENETRG
 (0x1 << 12)

972 
	#AT91C_TC_WAVESEL
 (0x3 << 13)

973 
	#AT91C_TC_WAVESEL_UP
 (0x0 << 13)

974 
	#AT91C_TC_WAVESEL_UPDOWN
 (0x1 << 13)

975 
	#AT91C_TC_WAVESEL_UP_AUTO
 (0x2 << 13)

976 
	#AT91C_TC_WAVESEL_UPDOWN_AUTO
 (0x3 << 13)

977 
	#AT91C_TC_CPCTRG
 (0x1 << 14)

978 
	#AT91C_TC_WAVE
 (0x1 << 15)

979 
	#AT91C_TC_ACPA
 (0x3 << 16)

980 
	#AT91C_TC_ACPA_NONE
 (0x0 << 16)

981 
	#AT91C_TC_ACPA_SET
 (0x1 << 16)

982 
	#AT91C_TC_ACPA_CLEAR
 (0x2 << 16)

983 
	#AT91C_TC_ACPA_TOGGLE
 (0x3 << 16)

984 
	#AT91C_TC_LDRA
 (0x3 << 16)

985 
	#AT91C_TC_LDRA_NONE
 (0x0 << 16)

986 
	#AT91C_TC_LDRA_RISING
 (0x1 << 16)

987 
	#AT91C_TC_LDRA_FALLING
 (0x2 << 16)

988 
	#AT91C_TC_LDRA_BOTH
 (0x3 << 16)

989 
	#AT91C_TC_ACPC
 (0x3 << 18)

990 
	#AT91C_TC_ACPC_NONE
 (0x0 << 18)

991 
	#AT91C_TC_ACPC_SET
 (0x1 << 18)

992 
	#AT91C_TC_ACPC_CLEAR
 (0x2 << 18)

993 
	#AT91C_TC_ACPC_TOGGLE
 (0x3 << 18)

994 
	#AT91C_TC_LDRB
 (0x3 << 18)

995 
	#AT91C_TC_LDRB_NONE
 (0x0 << 18)

996 
	#AT91C_TC_LDRB_RISING
 (0x1 << 18)

997 
	#AT91C_TC_LDRB_FALLING
 (0x2 << 18)

998 
	#AT91C_TC_LDRB_BOTH
 (0x3 << 18)

999 
	#AT91C_TC_AEEVT
 (0x3 << 20)

1000 
	#AT91C_TC_AEEVT_NONE
 (0x0 << 20)

1001 
	#AT91C_TC_AEEVT_SET
 (0x1 << 20)

1002 
	#AT91C_TC_AEEVT_CLEAR
 (0x2 << 20)

1003 
	#AT91C_TC_AEEVT_TOGGLE
 (0x3 << 20)

1004 
	#AT91C_TC_ASWTRG
 (0x3 << 22)

1005 
	#AT91C_TC_ASWTRG_NONE
 (0x0 << 22)

1006 
	#AT91C_TC_ASWTRG_SET
 (0x1 << 22)

1007 
	#AT91C_TC_ASWTRG_CLEAR
 (0x2 << 22)

1008 
	#AT91C_TC_ASWTRG_TOGGLE
 (0x3 << 22)

1009 
	#AT91C_TC_BCPB
 (0x3 << 24)

1010 
	#AT91C_TC_BCPB_NONE
 (0x0 << 24)

1011 
	#AT91C_TC_BCPB_SET
 (0x1 << 24)

1012 
	#AT91C_TC_BCPB_CLEAR
 (0x2 << 24)

1013 
	#AT91C_TC_BCPB_TOGGLE
 (0x3 << 24)

1014 
	#AT91C_TC_BCPC
 (0x3 << 26)

1015 
	#AT91C_TC_BCPC_NONE
 (0x0 << 26)

1016 
	#AT91C_TC_BCPC_SET
 (0x1 << 26)

1017 
	#AT91C_TC_BCPC_CLEAR
 (0x2 << 26)

1018 
	#AT91C_TC_BCPC_TOGGLE
 (0x3 << 26)

1019 
	#AT91C_TC_BEEVT
 (0x3 << 28)

1020 
	#AT91C_TC_BEEVT_NONE
 (0x0 << 28)

1021 
	#AT91C_TC_BEEVT_SET
 (0x1 << 28)

1022 
	#AT91C_TC_BEEVT_CLEAR
 (0x2 << 28)

1023 
	#AT91C_TC_BEEVT_TOGGLE
 (0x3 << 28)

1024 
	#AT91C_TC_BSWTRG
 (0x3 << 30)

1025 
	#AT91C_TC_BSWTRG_NONE
 (0x0 << 30)

1026 
	#AT91C_TC_BSWTRG_SET
 (0x1 << 30)

1027 
	#AT91C_TC_BSWTRG_CLEAR
 (0x2 << 30)

1028 
	#AT91C_TC_BSWTRG_TOGGLE
 (0x3 << 30)

1030 
	#AT91C_TC_COVFS
 (0x1 << 0)

1031 
	#AT91C_TC_LOVRS
 (0x1 << 1)

1032 
	#AT91C_TC_CPAS
 (0x1 << 2)

1033 
	#AT91C_TC_CPBS
 (0x1 << 3)

1034 
	#AT91C_TC_CPCS
 (0x1 << 4)

1035 
	#AT91C_TC_LDRAS
 (0x1 << 5)

1036 
	#AT91C_TC_LDRBS
 (0x1 << 6)

1037 
	#AT91C_TC_ETRGS
 (0x1 << 7)

1038 
	#AT91C_TC_CLKSTA
 (0x1 << 16)

1039 
	#AT91C_TC_MTIOA
 (0x1 << 17)

1040 
	#AT91C_TC_MTIOB
 (0x1 << 18)

1044 

	)

1049 
	#TCB_TC0
 ( 0)

1050 
	#TCB_TC1
 (64)

1051 
	#TCB_TC2
 (128)

1052 
	#TCB_BCR
 (192)

1053 
	#TCB_BMR
 (196)

1055 
	#AT91C_TCB_SYNC
 (0x1 << 0)

1057 
	#AT91C_TCB_TC0XC0S
 (0x3 << 0)

1058 
	#AT91C_TCB_TC0XC0S_TCLK0
 (0x0)

1059 
	#AT91C_TCB_TC0XC0S_NONE
 (0x1)

1060 
	#AT91C_TCB_TC0XC0S_TIOA1
 (0x2)

1061 
	#AT91C_TCB_TC0XC0S_TIOA2
 (0x3)

1062 
	#AT91C_TCB_TC1XC1S
 (0x3 << 2)

1063 
	#AT91C_TCB_TC1XC1S_TCLK1
 (0x0 << 2)

1064 
	#AT91C_TCB_TC1XC1S_NONE
 (0x1 << 2)

1065 
	#AT91C_TCB_TC1XC1S_TIOA0
 (0x2 << 2)

1066 
	#AT91C_TCB_TC1XC1S_TIOA2
 (0x3 << 2)

1067 
	#AT91C_TCB_TC2XC2S
 (0x3 << 4)

1068 
	#AT91C_TCB_TC2XC2S_TCLK2
 (0x0 << 4)

1069 
	#AT91C_TCB_TC2XC2S_NONE
 (0x1 << 4)

1070 
	#AT91C_TCB_TC2XC2S_TIOA0
 (0x2 << 4)

1071 
	#AT91C_TCB_TC2XC2S_TIOA1
 (0x3 << 4)

1072 

	)

1077 
	#CAN_MB_MMR
 ( 0)

1078 
	#CAN_MB_MAM
 ( 4)

1079 
	#CAN_MB_MID
 ( 8)

1080 
	#CAN_MB_MFID
 (12)

1081 
	#CAN_MB_MSR
 (16)

1082 
	#CAN_MB_MDL
 (20)

1083 
	#CAN_MB_MDH
 (24)

1084 
	#CAN_MB_MCR
 (28)

1086 
	#AT91C_CAN_MTIMEMARK
 (0xFFFF << 0)

1087 
	#AT91C_CAN_PRIOR
 (0xF << 16)

1088 
	#AT91C_CAN_MOT
 (0x7 << 24)

1089 
	#AT91C_CAN_MOT_DIS
 (0x0 << 24)

1090 
	#AT91C_CAN_MOT_RX
 (0x1 << 24)

1091 
	#AT91C_CAN_MOT_RXOVERWRITE
 (0x2 << 24)

1092 
	#AT91C_CAN_MOT_TX
 (0x3 << 24)

1093 
	#AT91C_CAN_MOT_CONSUMER
 (0x4 << 24)

1094 
	#AT91C_CAN_MOT_PRODUCER
 (0x5 << 24)

1096 
	#AT91C_CAN_MIDvB
 (0x3FFFF << 0)

1097 
	#AT91C_CAN_MIDvA
 (0x7FF << 18)

1098 
	#AT91C_CAN_MIDE
 (0x1 << 29)

1102 
	#AT91C_CAN_MTIMESTAMP
 (0xFFFF << 0)

1103 
	#AT91C_CAN_MDLC
 (0xF << 16)

1104 
	#AT91C_CAN_MRTR
 (0x1 << 20)

1105 
	#AT91C_CAN_MABT
 (0x1 << 22)

1106 
	#AT91C_CAN_MRDY
 (0x1 << 23)

1107 
	#AT91C_CAN_MMI
 (0x1 << 24)

1111 
	#AT91C_CAN_MACR
 (0x1 << 22)

1112 
	#AT91C_CAN_MTCR
 (0x1 << 23)

1113 

	)

1118 
	#CAN_MR
 ( 0)

1119 
	#CAN_IER
 ( 4)

1120 
	#CAN_IDR
 ( 8)

1121 
	#CAN_IMR
 (12)

1122 
	#CAN_SR
 (16)

1123 
	#CAN_BR
 (20)

1124 
	#CAN_TIM
 (24)

1125 
	#CAN_TIMESTP
 (28)

1126 
	#CAN_ECR
 (32)

1127 
	#CAN_TCR
 (36)

1128 
	#CAN_ACR
 (40)

1129 
	#CAN_VR
 (252)

1130 
	#CAN_MB0
 (512)

1131 
	#CAN_MB1
 (544)

1132 
	#CAN_MB2
 (576)

1133 
	#CAN_MB3
 (608)

1134 
	#CAN_MB4
 (640)

1135 
	#CAN_MB5
 (672)

1136 
	#CAN_MB6
 (704)

1137 
	#CAN_MB7
 (736)

1138 
	#CAN_MB8
 (768)

1139 
	#CAN_MB9
 (800)

1140 
	#CAN_MB10
 (832)

1141 
	#CAN_MB11
 (864)

1142 
	#CAN_MB12
 (896)

1143 
	#CAN_MB13
 (928)

1144 
	#CAN_MB14
 (960)

1145 
	#CAN_MB15
 (992)

1147 
	#AT91C_CAN_CANEN
 (0x1 << 0)

1148 
	#AT91C_CAN_LPM
 (0x1 << 1)

1149 
	#AT91C_CAN_ABM
 (0x1 << 2)

1150 
	#AT91C_CAN_OVL
 (0x1 << 3)

1151 
	#AT91C_CAN_TEOF
 (0x1 << 4)

1152 
	#AT91C_CAN_TTM
 (0x1 << 5)

1153 
	#AT91C_CAN_TIMFRZ
 (0x1 << 6)

1154 
	#AT91C_CAN_DRPT
 (0x1 << 7)

1156 
	#AT91C_CAN_MB0
 (0x1 << 0)

1157 
	#AT91C_CAN_MB1
 (0x1 << 1)

1158 
	#AT91C_CAN_MB2
 (0x1 << 2)

1159 
	#AT91C_CAN_MB3
 (0x1 << 3)

1160 
	#AT91C_CAN_MB4
 (0x1 << 4)

1161 
	#AT91C_CAN_MB5
 (0x1 << 5)

1162 
	#AT91C_CAN_MB6
 (0x1 << 6)

1163 
	#AT91C_CAN_MB7
 (0x1 << 7)

1164 
	#AT91C_CAN_MB8
 (0x1 << 8)

1165 
	#AT91C_CAN_MB9
 (0x1 << 9)

1166 
	#AT91C_CAN_MB10
 (0x1 << 10)

1167 
	#AT91C_CAN_MB11
 (0x1 << 11)

1168 
	#AT91C_CAN_MB12
 (0x1 << 12)

1169 
	#AT91C_CAN_MB13
 (0x1 << 13)

1170 
	#AT91C_CAN_MB14
 (0x1 << 14)

1171 
	#AT91C_CAN_MB15
 (0x1 << 15)

1172 
	#AT91C_CAN_ERRA
 (0x1 << 16)

1173 
	#AT91C_CAN_WARN
 (0x1 << 17)

1174 
	#AT91C_CAN_ERRP
 (0x1 << 18)

1175 
	#AT91C_CAN_BOFF
 (0x1 << 19)

1176 
	#AT91C_CAN_SLEEP
 (0x1 << 20)

1177 
	#AT91C_CAN_WAKEUP
 (0x1 << 21)

1178 
	#AT91C_CAN_TOVF
 (0x1 << 22)

1179 
	#AT91C_CAN_TSTP
 (0x1 << 23)

1180 
	#AT91C_CAN_CERR
 (0x1 << 24)

1181 
	#AT91C_CAN_SERR
 (0x1 << 25)

1182 
	#AT91C_CAN_AERR
 (0x1 << 26)

1183 
	#AT91C_CAN_FERR
 (0x1 << 27)

1184 
	#AT91C_CAN_BERR
 (0x1 << 28)

1188 
	#AT91C_CAN_RBSY
 (0x1 << 29)

1189 
	#AT91C_CAN_TBSY
 (0x1 << 30)

1190 
	#AT91C_CAN_OVLY
 (0x1 << 31)

1192 
	#AT91C_CAN_PHASE2
 (0x7 << 0)

1193 
	#AT91C_CAN_PHASE1
 (0x7 << 4)

1194 
	#AT91C_CAN_PROPAG
 (0x7 << 8)

1195 
	#AT91C_CAN_SYNC
 (0x3 << 12)

1196 
	#AT91C_CAN_BRP
 (0x7F << 16)

1197 
	#AT91C_CAN_SMP
 (0x1 << 24)

1199 
	#AT91C_CAN_TIMER
 (0xFFFF << 0)

1202 
	#AT91C_CAN_REC
 (0xFF << 0)

1203 
	#AT91C_CAN_TEC
 (0xFF << 16)

1205 
	#AT91C_CAN_TIMRST
 (0x1 << 31)

1207 

	)

1212 
	#EMAC_NCR
 ( 0)

1213 
	#EMAC_NCFGR
 ( 4)

1214 
	#EMAC_NSR
 ( 8)

1215 
	#EMAC_TSR
 (20)

1216 
	#EMAC_RBQP
 (24)

1217 
	#EMAC_TBQP
 (28)

1218 
	#EMAC_RSR
 (32)

1219 
	#EMAC_ISR
 (36)

1220 
	#EMAC_IER
 (40)

1221 
	#EMAC_IDR
 (44)

1222 
	#EMAC_IMR
 (48)

1223 
	#EMAC_MAN
 (52)

1224 
	#EMAC_PTR
 (56)

1225 
	#EMAC_PFR
 (60)

1226 
	#EMAC_FTO
 (64)

1227 
	#EMAC_SCF
 (68)

1228 
	#EMAC_MCF
 (72)

1229 
	#EMAC_FRO
 (76)

1230 
	#EMAC_FCSE
 (80)

1231 
	#EMAC_ALE
 (84)

1232 
	#EMAC_DTF
 (88)

1233 
	#EMAC_LCOL
 (92)

1234 
	#EMAC_ECOL
 (96)

1235 
	#EMAC_TUND
 (100)

1236 
	#EMAC_CSE
 (104)

1237 
	#EMAC_RRE
 (108)

1238 
	#EMAC_ROV
 (112)

1239 
	#EMAC_RSE
 (116)

1240 
	#EMAC_ELE
 (120)

1241 
	#EMAC_RJA
 (124)

1242 
	#EMAC_USF
 (128)

1243 
	#EMAC_STE
 (132)

1244 
	#EMAC_RLE
 (136)

1245 
	#EMAC_TPF
 (140)

1246 
	#EMAC_HRB
 (144)

1247 
	#EMAC_HRT
 (148)

1248 
	#EMAC_SA1L
 (152)

1249 
	#EMAC_SA1H
 (156)

1250 
	#EMAC_SA2L
 (160)

1251 
	#EMAC_SA2H
 (164)

1252 
	#EMAC_SA3L
 (168)

1253 
	#EMAC_SA3H
 (172)

1254 
	#EMAC_SA4L
 (176)

1255 
	#EMAC_SA4H
 (180)

1256 
	#EMAC_TID
 (184)

1257 
	#EMAC_TPQ
 (188)

1258 
	#EMAC_USRIO
 (192)

1259 
	#EMAC_WOL
 (196)

1260 
	#EMAC_REV
 (252)

1262 
	#AT91C_EMAC_LB
 (0x1 << 0)

1263 
	#AT91C_EMAC_LLB
 (0x1 << 1)

1264 
	#AT91C_EMAC_RE
 (0x1 << 2)

1265 
	#AT91C_EMAC_TE
 (0x1 << 3)

1266 
	#AT91C_EMAC_MPE
 (0x1 << 4)

1267 
	#AT91C_EMAC_CLRSTAT
 (0x1 << 5)

1268 
	#AT91C_EMAC_INCSTAT
 (0x1 << 6)

1269 
	#AT91C_EMAC_WESTAT
 (0x1 << 7)

1270 
	#AT91C_EMAC_BP
 (0x1 << 8)

1271 
	#AT91C_EMAC_TSTART
 (0x1 << 9)

1272 
	#AT91C_EMAC_THALT
 (0x1 << 10)

1273 
	#AT91C_EMAC_TPFR
 (0x1 << 11)

1274 
	#AT91C_EMAC_TZQ
 (0x1 << 12)

1276 
	#AT91C_EMAC_SPD
 (0x1 << 0)

1277 
	#AT91C_EMAC_FD
 (0x1 << 1)

1278 
	#AT91C_EMAC_JFRAME
 (0x1 << 3)

1279 
	#AT91C_EMAC_CAF
 (0x1 << 4)

1280 
	#AT91C_EMAC_NBC
 (0x1 << 5)

1281 
	#AT91C_EMAC_MTI
 (0x1 << 6)

1282 
	#AT91C_EMAC_UNI
 (0x1 << 7)

1283 
	#AT91C_EMAC_BIG
 (0x1 << 8)

1284 
	#AT91C_EMAC_EAE
 (0x1 << 9)

1285 
	#AT91C_EMAC_CLK
 (0x3 << 10)

1286 
	#AT91C_EMAC_CLK_HCLK_8
 (0x0 << 10)

1287 
	#AT91C_EMAC_CLK_HCLK_16
 (0x1 << 10)

1288 
	#AT91C_EMAC_CLK_HCLK_32
 (0x2 << 10)

1289 
	#AT91C_EMAC_CLK_HCLK_64
 (0x3 << 10)

1290 
	#AT91C_EMAC_RTY
 (0x1 << 12)

1291 
	#AT91C_EMAC_PAE
 (0x1 << 13)

1292 
	#AT91C_EMAC_RBOF
 (0x3 << 14)

1293 
	#AT91C_EMAC_RBOF_OFFSET_0
 (0x0 << 14)

1294 
	#AT91C_EMAC_RBOF_OFFSET_1
 (0x1 << 14)

1295 
	#AT91C_EMAC_RBOF_OFFSET_2
 (0x2 << 14)

1296 
	#AT91C_EMAC_RBOF_OFFSET_3
 (0x3 << 14)

1297 
	#AT91C_EMAC_RLCE
 (0x1 << 16)

1298 
	#AT91C_EMAC_DRFCS
 (0x1 << 17)

1299 
	#AT91C_EMAC_EFRHD
 (0x1 << 18)

1300 
	#AT91C_EMAC_IRXFCS
 (0x1 << 19)

1302 
	#AT91C_EMAC_LINKR
 (0x1 << 0)

1303 
	#AT91C_EMAC_MDIO
 (0x1 << 1)

1304 
	#AT91C_EMAC_IDLE
 (0x1 << 2)

1306 
	#AT91C_EMAC_UBR
 (0x1 << 0)

1307 
	#AT91C_EMAC_COL
 (0x1 << 1)

1308 
	#AT91C_EMAC_RLES
 (0x1 << 2)

1309 
	#AT91C_EMAC_TGO
 (0x1 << 3)

1310 
	#AT91C_EMAC_BEX
 (0x1 << 4)

1311 
	#AT91C_EMAC_COMP
 (0x1 << 5)

1312 
	#AT91C_EMAC_UND
 (0x1 << 6)

1314 
	#AT91C_EMAC_BNA
 (0x1 << 0)

1315 
	#AT91C_EMAC_REC
 (0x1 << 1)

1316 
	#AT91C_EMAC_OVR
 (0x1 << 2)

1318 
	#AT91C_EMAC_MFD
 (0x1 << 0)

1319 
	#AT91C_EMAC_RCOMP
 (0x1 << 1)

1320 
	#AT91C_EMAC_RXUBR
 (0x1 << 2)

1321 
	#AT91C_EMAC_TXUBR
 (0x1 << 3)

1322 
	#AT91C_EMAC_TUNDR
 (0x1 << 4)

1323 
	#AT91C_EMAC_RLEX
 (0x1 << 5)

1324 
	#AT91C_EMAC_TXERR
 (0x1 << 6)

1325 
	#AT91C_EMAC_TCOMP
 (0x1 << 7)

1326 
	#AT91C_EMAC_LINK
 (0x1 << 9)

1327 
	#AT91C_EMAC_ROVR
 (0x1 << 10)

1328 
	#AT91C_EMAC_HRESP
 (0x1 << 11)

1329 
	#AT91C_EMAC_PFRE
 (0x1 << 12)

1330 
	#AT91C_EMAC_PTZ
 (0x1 << 13)

1335 
	#AT91C_EMAC_DATA
 (0xFFFF << 0)

1336 
	#AT91C_EMAC_CODE
 (0x3 << 16)

1337 
	#AT91C_EMAC_REGA
 (0x1F << 18)

1338 
	#AT91C_EMAC_PHYA
 (0x1F << 23)

1339 
	#AT91C_EMAC_RW
 (0x3 << 28)

1340 
	#AT91C_EMAC_SOF
 (0x3 << 30)

1342 
	#AT91C_EMAC_RMII
 (0x1 << 0)

1344 
	#AT91C_EMAC_IP
 (0xFFFF << 0)

1345 
	#AT91C_EMAC_MAG
 (0x1 << 16)

1346 
	#AT91C_EMAC_ARP
 (0x1 << 17)

1347 
	#AT91C_EMAC_SA1
 (0x1 << 18)

1349 
	#AT91C_EMAC_REVREF
 (0xFFFF << 0)

1350 
	#AT91C_EMAC_PARTREF
 (0xFFFF << 16)

1351 

	)

1356 
	#ADC_CR
 ( 0)

1357 
	#ADC_MR
 ( 4)

1358 
	#ADC_CHER
 (16)

1359 
	#ADC_CHDR
 (20)

1360 
	#ADC_CHSR
 (24)

1361 
	#ADC_SR
 (28)

1362 
	#ADC_LCDR
 (32)

1363 
	#ADC_IER
 (36)

1364 
	#ADC_IDR
 (40)

1365 
	#ADC_IMR
 (44)

1366 
	#ADC_CDR0
 (48)

1367 
	#ADC_CDR1
 (52)

1368 
	#ADC_CDR2
 (56)

1369 
	#ADC_CDR3
 (60)

1370 
	#ADC_CDR4
 (64)

1371 
	#ADC_CDR5
 (68)

1372 
	#ADC_CDR6
 (72)

1373 
	#ADC_CDR7
 (76)

1374 
	#ADC_RPR
 (256)

1375 
	#ADC_RCR
 (260)

1376 
	#ADC_TPR
 (264)

1377 
	#ADC_TCR
 (268)

1378 
	#ADC_RNPR
 (272)

1379 
	#ADC_RNCR
 (276)

1380 
	#ADC_TNPR
 (280)

1381 
	#ADC_TNCR
 (284)

1382 
	#ADC_PTCR
 (288)

1383 
	#ADC_PTSR
 (292)

1385 
	#AT91C_ADC_SWRST
 (0x1 << 0)

1386 
	#AT91C_ADC_START
 (0x1 << 1)

1388 
	#AT91C_ADC_TRGEN
 (0x1 << 0)

1389 
	#AT91C_ADC_TRGEN_DIS
 (0x0)

1390 
	#AT91C_ADC_TRGEN_EN
 (0x1)

1391 
	#AT91C_ADC_TRGSEL
 (0x7 << 1)

1392 
	#AT91C_ADC_TRGSEL_TIOA0
 (0x0 << 1)

1393 
	#AT91C_ADC_TRGSEL_TIOA1
 (0x1 << 1)

1394 
	#AT91C_ADC_TRGSEL_TIOA2
 (0x2 << 1)

1395 
	#AT91C_ADC_TRGSEL_TIOA3
 (0x3 << 1)

1396 
	#AT91C_ADC_TRGSEL_TIOA4
 (0x4 << 1)

1397 
	#AT91C_ADC_TRGSEL_TIOA5
 (0x5 << 1)

1398 
	#AT91C_ADC_TRGSEL_EXT
 (0x6 << 1)

1399 
	#AT91C_ADC_LOWRES
 (0x1 << 4)

1400 
	#AT91C_ADC_LOWRES_10_BIT
 (0x0 << 4)

1401 
	#AT91C_ADC_LOWRES_8_BIT
 (0x1 << 4)

1402 
	#AT91C_ADC_SLEEP
 (0x1 << 5)

1403 
	#AT91C_ADC_SLEEP_NORMAL_MODE
 (0x0 << 5)

1404 
	#AT91C_ADC_SLEEP_MODE
 (0x1 << 5)

1405 
	#AT91C_ADC_PRESCAL
 (0x3F << 8)

1406 
	#AT91C_ADC_STARTUP
 (0x1F << 16)

1407 
	#AT91C_ADC_SHTIM
 (0xF << 24)

1409 
	#AT91C_ADC_CH0
 (0x1 << 0)

1410 
	#AT91C_ADC_CH1
 (0x1 << 1)

1411 
	#AT91C_ADC_CH2
 (0x1 << 2)

1412 
	#AT91C_ADC_CH3
 (0x1 << 3)

1413 
	#AT91C_ADC_CH4
 (0x1 << 4)

1414 
	#AT91C_ADC_CH5
 (0x1 << 5)

1415 
	#AT91C_ADC_CH6
 (0x1 << 6)

1416 
	#AT91C_ADC_CH7
 (0x1 << 7)

1420 
	#AT91C_ADC_EOC0
 (0x1 << 0)

1421 
	#AT91C_ADC_EOC1
 (0x1 << 1)

1422 
	#AT91C_ADC_EOC2
 (0x1 << 2)

1423 
	#AT91C_ADC_EOC3
 (0x1 << 3)

1424 
	#AT91C_ADC_EOC4
 (0x1 << 4)

1425 
	#AT91C_ADC_EOC5
 (0x1 << 5)

1426 
	#AT91C_ADC_EOC6
 (0x1 << 6)

1427 
	#AT91C_ADC_EOC7
 (0x1 << 7)

1428 
	#AT91C_ADC_OVRE0
 (0x1 << 8)

1429 
	#AT91C_ADC_OVRE1
 (0x1 << 9)

1430 
	#AT91C_ADC_OVRE2
 (0x1 << 10)

1431 
	#AT91C_ADC_OVRE3
 (0x1 << 11)

1432 
	#AT91C_ADC_OVRE4
 (0x1 << 12)

1433 
	#AT91C_ADC_OVRE5
 (0x1 << 13)

1434 
	#AT91C_ADC_OVRE6
 (0x1 << 14)

1435 
	#AT91C_ADC_OVRE7
 (0x1 << 15)

1436 
	#AT91C_ADC_DRDY
 (0x1 << 16)

1437 
	#AT91C_ADC_GOVRE
 (0x1 << 17)

1438 
	#AT91C_ADC_ENDRX
 (0x1 << 18)

1439 
	#AT91C_ADC_RXBUFF
 (0x1 << 19)

1441 
	#AT91C_ADC_LDATA
 (0x3FF << 0)

1446 
	#AT91C_ADC_DATA
 (0x3FF << 0)

1454 

	)

1459 
	#AES_CR
 ( 0)

1460 
	#AES_MR
 ( 4)

1461 
	#AES_IER
 (16)

1462 
	#AES_IDR
 (20)

1463 
	#AES_IMR
 (24)

1464 
	#AES_ISR
 (28)

1465 
	#AES_KEYWxR
 (32)

1466 
	#AES_IDATAxR
 (64)

1467 
	#AES_ODATAxR
 (80)

1468 
	#AES_IVxR
 (96)

1469 
	#AES_VR
 (252)

1470 
	#AES_RPR
 (256)

1471 
	#AES_RCR
 (260)

1472 
	#AES_TPR
 (264)

1473 
	#AES_TCR
 (268)

1474 
	#AES_RNPR
 (272)

1475 
	#AES_RNCR
 (276)

1476 
	#AES_TNPR
 (280)

1477 
	#AES_TNCR
 (284)

1478 
	#AES_PTCR
 (288)

1479 
	#AES_PTSR
 (292)

1481 
	#AT91C_AES_START
 (0x1 << 0)

1482 
	#AT91C_AES_SWRST
 (0x1 << 8)

1483 
	#AT91C_AES_LOADSEED
 (0x1 << 16)

1485 
	#AT91C_AES_CIPHER
 (0x1 << 0)

1486 
	#AT91C_AES_PROCDLY
 (0xF << 4)

1487 
	#AT91C_AES_SMOD
 (0x3 << 8)

1488 
	#AT91C_AES_SMOD_MANUAL
 (0x0 << 8)

1489 
	#AT91C_AES_SMOD_AUTO
 (0x1 << 8)

1490 
	#AT91C_AES_SMOD_PDC
 (0x2 << 8)

1491 
	#AT91C_AES_OPMOD
 (0x7 << 12)

1492 
	#AT91C_AES_OPMOD_ECB
 (0x0 << 12)

1493 
	#AT91C_AES_OPMOD_CBC
 (0x1 << 12)

1494 
	#AT91C_AES_OPMOD_OFB
 (0x2 << 12)

1495 
	#AT91C_AES_OPMOD_CFB
 (0x3 << 12)

1496 
	#AT91C_AES_OPMOD_CTR
 (0x4 << 12)

1497 
	#AT91C_AES_LOD
 (0x1 << 15)

1498 
	#AT91C_AES_CFBS
 (0x7 << 16)

1499 
	#AT91C_AES_CFBS_128_BIT
 (0x0 << 16)

1500 
	#AT91C_AES_CFBS_64_BIT
 (0x1 << 16)

1501 
	#AT91C_AES_CFBS_32_BIT
 (0x2 << 16)

1502 
	#AT91C_AES_CFBS_16_BIT
 (0x3 << 16)

1503 
	#AT91C_AES_CFBS_8_BIT
 (0x4 << 16)

1504 
	#AT91C_AES_CKEY
 (0xF << 20)

1505 
	#AT91C_AES_CTYPE
 (0x1F << 24)

1506 
	#AT91C_AES_CTYPE_TYPE1_EN
 (0x1 << 24)

1507 
	#AT91C_AES_CTYPE_TYPE2_EN
 (0x2 << 24)

1508 
	#AT91C_AES_CTYPE_TYPE3_EN
 (0x4 << 24)

1509 
	#AT91C_AES_CTYPE_TYPE4_EN
 (0x8 << 24)

1510 
	#AT91C_AES_CTYPE_TYPE5_EN
 (0x10 << 24)

1512 
	#AT91C_AES_DATRDY
 (0x1 << 0)

1513 
	#AT91C_AES_ENDRX
 (0x1 << 1)

1514 
	#AT91C_AES_ENDTX
 (0x1 << 2)

1515 
	#AT91C_AES_RXBUFF
 (0x1 << 3)

1516 
	#AT91C_AES_TXBUFE
 (0x1 << 4)

1517 
	#AT91C_AES_URAD
 (0x1 << 8)

1521 
	#AT91C_AES_URAT
 (0x7 << 12)

1522 
	#AT91C_AES_URAT_IN_DAT_WRITE_DATPROC
 (0x0 << 12)

1523 
	#AT91C_AES_URAT_OUT_DAT_READ_DATPROC
 (0x1 << 12)

1524 
	#AT91C_AES_URAT_MODEREG_WRITE_DATPROC
 (0x2 << 12)

1525 
	#AT91C_AES_URAT_OUT_DAT_READ_SUBKEY
 (0x3 << 12)

1526 
	#AT91C_AES_URAT_MODEREG_WRITE_SUBKEY
 (0x4 << 12)

1527 
	#AT91C_AES_URAT_WO_REG_READ
 (0x5 << 12)

1528 

	)

1533 
	#TDES_CR
 ( 0)

1534 
	#TDES_MR
 ( 4)

1535 
	#TDES_IER
 (16)

1536 
	#TDES_IDR
 (20)

1537 
	#TDES_IMR
 (24)

1538 
	#TDES_ISR
 (28)

1539 
	#TDES_KEY1WxR
 (32)

1540 
	#TDES_KEY2WxR
 (40)

1541 
	#TDES_KEY3WxR
 (48)

1542 
	#TDES_IDATAxR
 (64)

1543 
	#TDES_ODATAxR
 (80)

1544 
	#TDES_IVxR
 (96)

1545 
	#TDES_VR
 (252)

1546 
	#TDES_RPR
 (256)

1547 
	#TDES_RCR
 (260)

1548 
	#TDES_TPR
 (264)

1549 
	#TDES_TCR
 (268)

1550 
	#TDES_RNPR
 (272)

1551 
	#TDES_RNCR
 (276)

1552 
	#TDES_TNPR
 (280)

1553 
	#TDES_TNCR
 (284)

1554 
	#TDES_PTCR
 (288)

1555 
	#TDES_PTSR
 (292)

1557 
	#AT91C_TDES_START
 (0x1 << 0)

1558 
	#AT91C_TDES_SWRST
 (0x1 << 8)

1560 
	#AT91C_TDES_CIPHER
 (0x1 << 0)

1561 
	#AT91C_TDES_TDESMOD
 (0x1 << 1)

1562 
	#AT91C_TDES_KEYMOD
 (0x1 << 4)

1563 
	#AT91C_TDES_SMOD
 (0x3 << 8)

1564 
	#AT91C_TDES_SMOD_MANUAL
 (0x0 << 8)

1565 
	#AT91C_TDES_SMOD_AUTO
 (0x1 << 8)

1566 
	#AT91C_TDES_SMOD_PDC
 (0x2 << 8)

1567 
	#AT91C_TDES_OPMOD
 (0x3 << 12)

1568 
	#AT91C_TDES_OPMOD_ECB
 (0x0 << 12)

1569 
	#AT91C_TDES_OPMOD_CBC
 (0x1 << 12)

1570 
	#AT91C_TDES_OPMOD_OFB
 (0x2 << 12)

1571 
	#AT91C_TDES_OPMOD_CFB
 (0x3 << 12)

1572 
	#AT91C_TDES_LOD
 (0x1 << 15)

1573 
	#AT91C_TDES_CFBS
 (0x3 << 16)

1574 
	#AT91C_TDES_CFBS_64_BIT
 (0x0 << 16)

1575 
	#AT91C_TDES_CFBS_32_BIT
 (0x1 << 16)

1576 
	#AT91C_TDES_CFBS_16_BIT
 (0x2 << 16)

1577 
	#AT91C_TDES_CFBS_8_BIT
 (0x3 << 16)

1579 
	#AT91C_TDES_DATRDY
 (0x1 << 0)

1580 
	#AT91C_TDES_ENDRX
 (0x1 << 1)

1581 
	#AT91C_TDES_ENDTX
 (0x1 << 2)

1582 
	#AT91C_TDES_RXBUFF
 (0x1 << 3)

1583 
	#AT91C_TDES_TXBUFE
 (0x1 << 4)

1584 
	#AT91C_TDES_URAD
 (0x1 << 8)

1588 
	#AT91C_TDES_URAT
 (0x3 << 12)

1589 
	#AT91C_TDES_URAT_IN_DAT_WRITE_DATPROC
 (0x0 << 12)

1590 
	#AT91C_TDES_URAT_OUT_DAT_READ_DATPROC
 (0x1 << 12)

1591 
	#AT91C_TDES_URAT_MODEREG_WRITE_DATPROC
 (0x2 << 12)

1592 
	#AT91C_TDES_URAT_WO_REG_READ
 (0x3 << 12)

1593 

	)

1599 
	#AT91C_AIC_IVR
 (0xFFFFF100)

1600 
	#AT91C_AIC_SMR
 (0xFFFFF000)

1601 
	#AT91C_AIC_FVR
 (0xFFFFF104)

1602 
	#AT91C_AIC_DCR
 (0xFFFFF138)

1603 
	#AT91C_AIC_EOICR
 (0xFFFFF130)

1604 
	#AT91C_AIC_SVR
 (0xFFFFF080)

1605 
	#AT91C_AIC_FFSR
 (0xFFFFF148)

1606 
	#AT91C_AIC_ICCR
 (0xFFFFF128)

1607 
	#AT91C_AIC_ISR
 (0xFFFFF108)

1608 
	#AT91C_AIC_IMR
 (0xFFFFF110)

1609 
	#AT91C_AIC_IPR
 (0xFFFFF10C)

1610 
	#AT91C_AIC_FFER
 (0xFFFFF140)

1611 
	#AT91C_AIC_IECR
 (0xFFFFF120)

1612 
	#AT91C_AIC_ISCR
 (0xFFFFF12C)

1613 
	#AT91C_AIC_FFDR
 (0xFFFFF144)

1614 
	#AT91C_AIC_CISR
 (0xFFFFF114)

1615 
	#AT91C_AIC_IDCR
 (0xFFFFF124)

1616 
	#AT91C_AIC_SPU
 (0xFFFFF134)

1618 
	#AT91C_DBGU_TCR
 (0xFFFFF30C)

1619 
	#AT91C_DBGU_RNPR
 (0xFFFFF310)

1620 
	#AT91C_DBGU_TNPR
 (0xFFFFF318)

1621 
	#AT91C_DBGU_TPR
 (0xFFFFF308)

1622 
	#AT91C_DBGU_RPR
 (0xFFFFF300)

1623 
	#AT91C_DBGU_RCR
 (0xFFFFF304)

1624 
	#AT91C_DBGU_RNCR
 (0xFFFFF314)

1625 
	#AT91C_DBGU_PTCR
 (0xFFFFF320)

1626 
	#AT91C_DBGU_PTSR
 (0xFFFFF324)

1627 
	#AT91C_DBGU_TNCR
 (0xFFFFF31C)

1629 
	#AT91C_DBGU_EXID
 (0xFFFFF244)

1630 
	#AT91C_DBGU_BRGR
 (0xFFFFF220)

1631 
	#AT91C_DBGU_IDR
 (0xFFFFF20C)

1632 
	#AT91C_DBGU_CSR
 (0xFFFFF214)

1633 
	#AT91C_DBGU_CIDR
 (0xFFFFF240)

1634 
	#AT91C_DBGU_MR
 (0xFFFFF204)

1635 
	#AT91C_DBGU_IMR
 (0xFFFFF210)

1636 
	#AT91C_DBGU_CR
 (0xFFFFF200)

1637 
	#AT91C_DBGU_FNTR
 (0xFFFFF248)

1638 
	#AT91C_DBGU_THR
 (0xFFFFF21C)

1639 
	#AT91C_DBGU_RHR
 (0xFFFFF218)

1640 
	#AT91C_DBGU_IER
 (0xFFFFF208)

1642 
	#AT91C_PIOA_ODR
 (0xFFFFF414)

1643 
	#AT91C_PIOA_SODR
 (0xFFFFF430)

1644 
	#AT91C_PIOA_ISR
 (0xFFFFF44C)

1645 
	#AT91C_PIOA_ABSR
 (0xFFFFF478)

1646 
	#AT91C_PIOA_IER
 (0xFFFFF440)

1647 
	#AT91C_PIOA_PPUDR
 (0xFFFFF460)

1648 
	#AT91C_PIOA_IMR
 (0xFFFFF448)

1649 
	#AT91C_PIOA_PER
 (0xFFFFF400)

1650 
	#AT91C_PIOA_IFDR
 (0xFFFFF424)

1651 
	#AT91C_PIOA_OWDR
 (0xFFFFF4A4)

1652 
	#AT91C_PIOA_MDSR
 (0xFFFFF458)

1653 
	#AT91C_PIOA_IDR
 (0xFFFFF444)

1654 
	#AT91C_PIOA_ODSR
 (0xFFFFF438)

1655 
	#AT91C_PIOA_PPUSR
 (0xFFFFF468)

1656 
	#AT91C_PIOA_OWSR
 (0xFFFFF4A8)

1657 
	#AT91C_PIOA_BSR
 (0xFFFFF474)

1658 
	#AT91C_PIOA_OWER
 (0xFFFFF4A0)

1659 
	#AT91C_PIOA_IFER
 (0xFFFFF420)

1660 
	#AT91C_PIOA_PDSR
 (0xFFFFF43C)

1661 
	#AT91C_PIOA_PPUER
 (0xFFFFF464)

1662 
	#AT91C_PIOA_OSR
 (0xFFFFF418)

1663 
	#AT91C_PIOA_ASR
 (0xFFFFF470)

1664 
	#AT91C_PIOA_MDDR
 (0xFFFFF454)

1665 
	#AT91C_PIOA_CODR
 (0xFFFFF434)

1666 
	#AT91C_PIOA_MDER
 (0xFFFFF450)

1667 
	#AT91C_PIOA_PDR
 (0xFFFFF404)

1668 
	#AT91C_PIOA_IFSR
 (0xFFFFF428)

1669 
	#AT91C_PIOA_OER
 (0xFFFFF410)

1670 
	#AT91C_PIOA_PSR
 (0xFFFFF408)

1672 
	#AT91C_PIOB_OWDR
 (0xFFFFF6A4)

1673 
	#AT91C_PIOB_MDER
 (0xFFFFF650)

1674 
	#AT91C_PIOB_PPUSR
 (0xFFFFF668)

1675 
	#AT91C_PIOB_IMR
 (0xFFFFF648)

1676 
	#AT91C_PIOB_ASR
 (0xFFFFF670)

1677 
	#AT91C_PIOB_PPUDR
 (0xFFFFF660)

1678 
	#AT91C_PIOB_PSR
 (0xFFFFF608)

1679 
	#AT91C_PIOB_IER
 (0xFFFFF640)

1680 
	#AT91C_PIOB_CODR
 (0xFFFFF634)

1681 
	#AT91C_PIOB_OWER
 (0xFFFFF6A0)

1682 
	#AT91C_PIOB_ABSR
 (0xFFFFF678)

1683 
	#AT91C_PIOB_IFDR
 (0xFFFFF624)

1684 
	#AT91C_PIOB_PDSR
 (0xFFFFF63C)

1685 
	#AT91C_PIOB_IDR
 (0xFFFFF644)

1686 
	#AT91C_PIOB_OWSR
 (0xFFFFF6A8)

1687 
	#AT91C_PIOB_PDR
 (0xFFFFF604)

1688 
	#AT91C_PIOB_ODR
 (0xFFFFF614)

1689 
	#AT91C_PIOB_IFSR
 (0xFFFFF628)

1690 
	#AT91C_PIOB_PPUER
 (0xFFFFF664)

1691 
	#AT91C_PIOB_SODR
 (0xFFFFF630)

1692 
	#AT91C_PIOB_ISR
 (0xFFFFF64C)

1693 
	#AT91C_PIOB_ODSR
 (0xFFFFF638)

1694 
	#AT91C_PIOB_OSR
 (0xFFFFF618)

1695 
	#AT91C_PIOB_MDSR
 (0xFFFFF658)

1696 
	#AT91C_PIOB_IFER
 (0xFFFFF620)

1697 
	#AT91C_PIOB_BSR
 (0xFFFFF674)

1698 
	#AT91C_PIOB_MDDR
 (0xFFFFF654)

1699 
	#AT91C_PIOB_OER
 (0xFFFFF610)

1700 
	#AT91C_PIOB_PER
 (0xFFFFF600)

1702 
	#AT91C_CKGR_MOR
 (0xFFFFFC20)

1703 
	#AT91C_CKGR_PLLR
 (0xFFFFFC2C)

1704 
	#AT91C_CKGR_MCFR
 (0xFFFFFC24)

1706 
	#AT91C_PMC_IDR
 (0xFFFFFC64)

1707 
	#AT91C_PMC_MOR
 (0xFFFFFC20)

1708 
	#AT91C_PMC_PLLR
 (0xFFFFFC2C)

1709 
	#AT91C_PMC_PCER
 (0xFFFFFC10)

1710 
	#AT91C_PMC_PCKR
 (0xFFFFFC40)

1711 
	#AT91C_PMC_MCKR
 (0xFFFFFC30)

1712 
	#AT91C_PMC_SCDR
 (0xFFFFFC04)

1713 
	#AT91C_PMC_PCDR
 (0xFFFFFC14)

1714 
	#AT91C_PMC_SCSR
 (0xFFFFFC08)

1715 
	#AT91C_PMC_PCSR
 (0xFFFFFC18)

1716 
	#AT91C_PMC_MCFR
 (0xFFFFFC24)

1717 
	#AT91C_PMC_SCER
 (0xFFFFFC00)

1718 
	#AT91C_PMC_IMR
 (0xFFFFFC6C)

1719 
	#AT91C_PMC_IER
 (0xFFFFFC60)

1720 
	#AT91C_PMC_SR
 (0xFFFFFC68)

1722 
	#AT91C_RSTC_RCR
 (0xFFFFFD00)

1723 
	#AT91C_RSTC_RMR
 (0xFFFFFD08)

1724 
	#AT91C_RSTC_RSR
 (0xFFFFFD04)

1726 
	#AT91C_RTTC_RTSR
 (0xFFFFFD2C)

1727 
	#AT91C_RTTC_RTMR
 (0xFFFFFD20)

1728 
	#AT91C_RTTC_RTVR
 (0xFFFFFD28)

1729 
	#AT91C_RTTC_RTAR
 (0xFFFFFD24)

1731 
	#AT91C_PITC_PIVR
 (0xFFFFFD38)

1732 
	#AT91C_PITC_PISR
 (0xFFFFFD34)

1733 
	#AT91C_PITC_PIIR
 (0xFFFFFD3C)

1734 
	#AT91C_PITC_PIMR
 (0xFFFFFD30)

1736 
	#AT91C_WDTC_WDCR
 (0xFFFFFD40)

1737 
	#AT91C_WDTC_WDSR
 (0xFFFFFD48)

1738 
	#AT91C_WDTC_WDMR
 (0xFFFFFD44)

1740 
	#AT91C_VREG_MR
 (0xFFFFFD60)

1742 
	#AT91C_MC_ASR
 (0xFFFFFF04)

1743 
	#AT91C_MC_RCR
 (0xFFFFFF00)

1744 
	#AT91C_MC_FCR
 (0xFFFFFF64)

1745 
	#AT91C_MC_AASR
 (0xFFFFFF08)

1746 
	#AT91C_MC_FSR
 (0xFFFFFF68)

1747 
	#AT91C_MC_FMR
 (0xFFFFFF60)

1749 
	#AT91C_SPI1_PTCR
 (0xFFFE4120)

1750 
	#AT91C_SPI1_RPR
 (0xFFFE4100)

1751 
	#AT91C_SPI1_TNCR
 (0xFFFE411C)

1752 
	#AT91C_SPI1_TPR
 (0xFFFE4108)

1753 
	#AT91C_SPI1_TNPR
 (0xFFFE4118)

1754 
	#AT91C_SPI1_TCR
 (0xFFFE410C)

1755 
	#AT91C_SPI1_RCR
 (0xFFFE4104)

1756 
	#AT91C_SPI1_RNPR
 (0xFFFE4110)

1757 
	#AT91C_SPI1_RNCR
 (0xFFFE4114)

1758 
	#AT91C_SPI1_PTSR
 (0xFFFE4124)

1760 
	#AT91C_SPI1_IMR
 (0xFFFE401C)

1761 
	#AT91C_SPI1_IER
 (0xFFFE4014)

1762 
	#AT91C_SPI1_MR
 (0xFFFE4004)

1763 
	#AT91C_SPI1_RDR
 (0xFFFE4008)

1764 
	#AT91C_SPI1_IDR
 (0xFFFE4018)

1765 
	#AT91C_SPI1_SR
 (0xFFFE4010)

1766 
	#AT91C_SPI1_TDR
 (0xFFFE400C)

1767 
	#AT91C_SPI1_CR
 (0xFFFE4000)

1768 
	#AT91C_SPI1_CSR
 (0xFFFE4030)

1770 
	#AT91C_SPI0_PTCR
 (0xFFFE0120)

1771 
	#AT91C_SPI0_TPR
 (0xFFFE0108)

1772 
	#AT91C_SPI0_TCR
 (0xFFFE010C)

1773 
	#AT91C_SPI0_RCR
 (0xFFFE0104)

1774 
	#AT91C_SPI0_PTSR
 (0xFFFE0124)

1775 
	#AT91C_SPI0_RNPR
 (0xFFFE0110)

1776 
	#AT91C_SPI0_RPR
 (0xFFFE0100)

1777 
	#AT91C_SPI0_TNCR
 (0xFFFE011C)

1778 
	#AT91C_SPI0_RNCR
 (0xFFFE0114)

1779 
	#AT91C_SPI0_TNPR
 (0xFFFE0118)

1781 
	#AT91C_SPI0_IER
 (0xFFFE0014)

1782 
	#AT91C_SPI0_SR
 (0xFFFE0010)

1783 
	#AT91C_SPI0_IDR
 (0xFFFE0018)

1784 
	#AT91C_SPI0_CR
 (0xFFFE0000)

1785 
	#AT91C_SPI0_MR
 (0xFFFE0004)

1786 
	#AT91C_SPI0_IMR
 (0xFFFE001C)

1787 
	#AT91C_SPI0_TDR
 (0xFFFE000C)

1788 
	#AT91C_SPI0_RDR
 (0xFFFE0008)

1789 
	#AT91C_SPI0_CSR
 (0xFFFE0030)

1791 
	#AT91C_US1_RNCR
 (0xFFFC4114)

1792 
	#AT91C_US1_PTCR
 (0xFFFC4120)

1793 
	#AT91C_US1_TCR
 (0xFFFC410C)

1794 
	#AT91C_US1_PTSR
 (0xFFFC4124)

1795 
	#AT91C_US1_TNPR
 (0xFFFC4118)

1796 
	#AT91C_US1_RCR
 (0xFFFC4104)

1797 
	#AT91C_US1_RNPR
 (0xFFFC4110)

1798 
	#AT91C_US1_RPR
 (0xFFFC4100)

1799 
	#AT91C_US1_TNCR
 (0xFFFC411C)

1800 
	#AT91C_US1_TPR
 (0xFFFC4108)

1802 
	#AT91C_US1_IF
 (0xFFFC404C)

1803 
	#AT91C_US1_NER
 (0xFFFC4044)

1804 
	#AT91C_US1_RTOR
 (0xFFFC4024)

1805 
	#AT91C_US1_CSR
 (0xFFFC4014)

1806 
	#AT91C_US1_IDR
 (0xFFFC400C)

1807 
	#AT91C_US1_IER
 (0xFFFC4008)

1808 
	#AT91C_US1_THR
 (0xFFFC401C)

1809 
	#AT91C_US1_TTGR
 (0xFFFC4028)

1810 
	#AT91C_US1_RHR
 (0xFFFC4018)

1811 
	#AT91C_US1_BRGR
 (0xFFFC4020)

1812 
	#AT91C_US1_IMR
 (0xFFFC4010)

1813 
	#AT91C_US1_FIDI
 (0xFFFC4040)

1814 
	#AT91C_US1_CR
 (0xFFFC4000)

1815 
	#AT91C_US1_MR
 (0xFFFC4004)

1817 
	#AT91C_US0_TNPR
 (0xFFFC0118)

1818 
	#AT91C_US0_RNPR
 (0xFFFC0110)

1819 
	#AT91C_US0_TCR
 (0xFFFC010C)

1820 
	#AT91C_US0_PTCR
 (0xFFFC0120)

1821 
	#AT91C_US0_PTSR
 (0xFFFC0124)

1822 
	#AT91C_US0_TNCR
 (0xFFFC011C)

1823 
	#AT91C_US0_TPR
 (0xFFFC0108)

1824 
	#AT91C_US0_RCR
 (0xFFFC0104)

1825 
	#AT91C_US0_RPR
 (0xFFFC0100)

1826 
	#AT91C_US0_RNCR
 (0xFFFC0114)

1828 
	#AT91C_US0_BRGR
 (0xFFFC0020)

1829 
	#AT91C_US0_NER
 (0xFFFC0044)

1830 
	#AT91C_US0_CR
 (0xFFFC0000)

1831 
	#AT91C_US0_IMR
 (0xFFFC0010)

1832 
	#AT91C_US0_FIDI
 (0xFFFC0040)

1833 
	#AT91C_US0_TTGR
 (0xFFFC0028)

1834 
	#AT91C_US0_MR
 (0xFFFC0004)

1835 
	#AT91C_US0_RTOR
 (0xFFFC0024)

1836 
	#AT91C_US0_CSR
 (0xFFFC0014)

1837 
	#AT91C_US0_RHR
 (0xFFFC0018)

1838 
	#AT91C_US0_IDR
 (0xFFFC000C)

1839 
	#AT91C_US0_THR
 (0xFFFC001C)

1840 
	#AT91C_US0_IF
 (0xFFFC004C)

1841 
	#AT91C_US0_IER
 (0xFFFC0008)

1843 
	#AT91C_SSC_TNCR
 (0xFFFD411C)

1844 
	#AT91C_SSC_RPR
 (0xFFFD4100)

1845 
	#AT91C_SSC_RNCR
 (0xFFFD4114)

1846 
	#AT91C_SSC_TPR
 (0xFFFD4108)

1847 
	#AT91C_SSC_PTCR
 (0xFFFD4120)

1848 
	#AT91C_SSC_TCR
 (0xFFFD410C)

1849 
	#AT91C_SSC_RCR
 (0xFFFD4104)

1850 
	#AT91C_SSC_RNPR
 (0xFFFD4110)

1851 
	#AT91C_SSC_TNPR
 (0xFFFD4118)

1852 
	#AT91C_SSC_PTSR
 (0xFFFD4124)

1854 
	#AT91C_SSC_RHR
 (0xFFFD4020)

1855 
	#AT91C_SSC_RSHR
 (0xFFFD4030)

1856 
	#AT91C_SSC_TFMR
 (0xFFFD401C)

1857 
	#AT91C_SSC_IDR
 (0xFFFD4048)

1858 
	#AT91C_SSC_THR
 (0xFFFD4024)

1859 
	#AT91C_SSC_RCMR
 (0xFFFD4010)

1860 
	#AT91C_SSC_IER
 (0xFFFD4044)

1861 
	#AT91C_SSC_TSHR
 (0xFFFD4034)

1862 
	#AT91C_SSC_SR
 (0xFFFD4040)

1863 
	#AT91C_SSC_CMR
 (0xFFFD4004)

1864 
	#AT91C_SSC_TCMR
 (0xFFFD4018)

1865 
	#AT91C_SSC_CR
 (0xFFFD4000)

1866 
	#AT91C_SSC_IMR
 (0xFFFD404C)

1867 
	#AT91C_SSC_RFMR
 (0xFFFD4014)

1869 
	#AT91C_TWI_IER
 (0xFFFB8024)

1870 
	#AT91C_TWI_CR
 (0xFFFB8000)

1871 
	#AT91C_TWI_SR
 (0xFFFB8020)

1872 
	#AT91C_TWI_IMR
 (0xFFFB802C)

1873 
	#AT91C_TWI_THR
 (0xFFFB8034)

1874 
	#AT91C_TWI_IDR
 (0xFFFB8028)

1875 
	#AT91C_TWI_IADR
 (0xFFFB800C)

1876 
	#AT91C_TWI_MMR
 (0xFFFB8004)

1877 
	#AT91C_TWI_CWGR
 (0xFFFB8010)

1878 
	#AT91C_TWI_RHR
 (0xFFFB8030)

1880 
	#AT91C_PWMC_CH3_CUPDR
 (0xFFFCC270)

1881 
	#AT91C_PWMC_CH3_Re£rved
 (0xFFFCC274)

1882 
	#AT91C_PWMC_CH3_CPRDR
 (0xFFFCC268)

1883 
	#AT91C_PWMC_CH3_CDTYR
 (0xFFFCC264)

1884 
	#AT91C_PWMC_CH3_CCNTR
 (0xFFFCC26C)

1885 
	#AT91C_PWMC_CH3_CMR
 (0xFFFCC260)

1887 
	#AT91C_PWMC_CH2_Re£rved
 (0xFFFCC254)

1888 
	#AT91C_PWMC_CH2_CMR
 (0xFFFCC240)

1889 
	#AT91C_PWMC_CH2_CCNTR
 (0xFFFCC24C)

1890 
	#AT91C_PWMC_CH2_CPRDR
 (0xFFFCC248)

1891 
	#AT91C_PWMC_CH2_CUPDR
 (0xFFFCC250)

1892 
	#AT91C_PWMC_CH2_CDTYR
 (0xFFFCC244)

1894 
	#AT91C_PWMC_CH1_Re£rved
 (0xFFFCC234)

1895 
	#AT91C_PWMC_CH1_CUPDR
 (0xFFFCC230)

1896 
	#AT91C_PWMC_CH1_CPRDR
 (0xFFFCC228)

1897 
	#AT91C_PWMC_CH1_CCNTR
 (0xFFFCC22C)

1898 
	#AT91C_PWMC_CH1_CDTYR
 (0xFFFCC224)

1899 
	#AT91C_PWMC_CH1_CMR
 (0xFFFCC220)

1901 
	#AT91C_PWMC_CH0_Re£rved
 (0xFFFCC214)

1902 
	#AT91C_PWMC_CH0_CPRDR
 (0xFFFCC208)

1903 
	#AT91C_PWMC_CH0_CDTYR
 (0xFFFCC204)

1904 
	#AT91C_PWMC_CH0_CMR
 (0xFFFCC200)

1905 
	#AT91C_PWMC_CH0_CUPDR
 (0xFFFCC210)

1906 
	#AT91C_PWMC_CH0_CCNTR
 (0xFFFCC20C)

1908 
	#AT91C_PWMC_IDR
 (0xFFFCC014)

1909 
	#AT91C_PWMC_DIS
 (0xFFFCC008)

1910 
	#AT91C_PWMC_IER
 (0xFFFCC010)

1911 
	#AT91C_PWMC_VR
 (0xFFFCC0FC)

1912 
	#AT91C_PWMC_ISR
 (0xFFFCC01C)

1913 
	#AT91C_PWMC_SR
 (0xFFFCC00C)

1914 
	#AT91C_PWMC_IMR
 (0xFFFCC018)

1915 
	#AT91C_PWMC_MR
 (0xFFFCC000)

1916 
	#AT91C_PWMC_ENA
 (0xFFFCC004)

1918 
	#AT91C_UDP_IMR
 (0xFFFB0018)

1919 
	#AT91C_UDP_FADDR
 (0xFFFB0008)

1920 
	#AT91C_UDP_NUM
 (0xFFFB0000)

1921 
	#AT91C_UDP_FDR
 (0xFFFB0050)

1922 
	#AT91C_UDP_ISR
 (0xFFFB001C)

1923 
	#AT91C_UDP_CSR
 (0xFFFB0030)

1924 
	#AT91C_UDP_IDR
 (0xFFFB0014)

1925 
	#AT91C_UDP_ICR
 (0xFFFB0020)

1926 
	#AT91C_UDP_RSTEP
 (0xFFFB0028)

1927 
	#AT91C_UDP_TXVC
 (0xFFFB0074)

1928 
	#AT91C_UDP_GLBSTATE
 (0xFFFB0004)

1929 
	#AT91C_UDP_IER
 (0xFFFB0010)

1931 
	#AT91C_TC0_SR
 (0xFFFA0020)

1932 
	#AT91C_TC0_RC
 (0xFFFA001C)

1933 
	#AT91C_TC0_RB
 (0xFFFA0018)

1934 
	#AT91C_TC0_CCR
 (0xFFFA0000)

1935 
	#AT91C_TC0_CMR
 (0xFFFA0004)

1936 
	#AT91C_TC0_IER
 (0xFFFA0024)

1937 
	#AT91C_TC0_RA
 (0xFFFA0014)

1938 
	#AT91C_TC0_IDR
 (0xFFFA0028)

1939 
	#AT91C_TC0_CV
 (0xFFFA0010)

1940 
	#AT91C_TC0_IMR
 (0xFFFA002C)

1942 
	#AT91C_TC1_RB
 (0xFFFA0058)

1943 
	#AT91C_TC1_CCR
 (0xFFFA0040)

1944 
	#AT91C_TC1_IER
 (0xFFFA0064)

1945 
	#AT91C_TC1_IDR
 (0xFFFA0068)

1946 
	#AT91C_TC1_SR
 (0xFFFA0060)

1947 
	#AT91C_TC1_CMR
 (0xFFFA0044)

1948 
	#AT91C_TC1_RA
 (0xFFFA0054)

1949 
	#AT91C_TC1_RC
 (0xFFFA005C)

1950 
	#AT91C_TC1_IMR
 (0xFFFA006C)

1951 
	#AT91C_TC1_CV
 (0xFFFA0050)

1953 
	#AT91C_TC2_CMR
 (0xFFFA0084)

1954 
	#AT91C_TC2_CCR
 (0xFFFA0080)

1955 
	#AT91C_TC2_CV
 (0xFFFA0090)

1956 
	#AT91C_TC2_RA
 (0xFFFA0094)

1957 
	#AT91C_TC2_RB
 (0xFFFA0098)

1958 
	#AT91C_TC2_IDR
 (0xFFFA00A8)

1959 
	#AT91C_TC2_IMR
 (0xFFFA00AC)

1960 
	#AT91C_TC2_RC
 (0xFFFA009C)

1961 
	#AT91C_TC2_IER
 (0xFFFA00A4)

1962 
	#AT91C_TC2_SR
 (0xFFFA00A0)

1964 
	#AT91C_TCB_BMR
 (0xFFFA00C4)

1965 
	#AT91C_TCB_BCR
 (0xFFFA00C0)

1967 
	#AT91C_CAN_MB0_MDL
 (0xFFFD0214)

1968 
	#AT91C_CAN_MB0_MAM
 (0xFFFD0204)

1969 
	#AT91C_CAN_MB0_MCR
 (0xFFFD021C)

1970 
	#AT91C_CAN_MB0_MID
 (0xFFFD0208)

1971 
	#AT91C_CAN_MB0_MSR
 (0xFFFD0210)

1972 
	#AT91C_CAN_MB0_MFID
 (0xFFFD020C)

1973 
	#AT91C_CAN_MB0_MDH
 (0xFFFD0218)

1974 
	#AT91C_CAN_MB0_MMR
 (0xFFFD0200)

1976 
	#AT91C_CAN_MB1_MDL
 (0xFFFD0234)

1977 
	#AT91C_CAN_MB1_MID
 (0xFFFD0228)

1978 
	#AT91C_CAN_MB1_MMR
 (0xFFFD0220)

1979 
	#AT91C_CAN_MB1_MSR
 (0xFFFD0230)

1980 
	#AT91C_CAN_MB1_MAM
 (0xFFFD0224)

1981 
	#AT91C_CAN_MB1_MDH
 (0xFFFD0238)

1982 
	#AT91C_CAN_MB1_MCR
 (0xFFFD023C)

1983 
	#AT91C_CAN_MB1_MFID
 (0xFFFD022C)

1985 
	#AT91C_CAN_MB2_MCR
 (0xFFFD025C)

1986 
	#AT91C_CAN_MB2_MDH
 (0xFFFD0258)

1987 
	#AT91C_CAN_MB2_MID
 (0xFFFD0248)

1988 
	#AT91C_CAN_MB2_MDL
 (0xFFFD0254)

1989 
	#AT91C_CAN_MB2_MMR
 (0xFFFD0240)

1990 
	#AT91C_CAN_MB2_MAM
 (0xFFFD0244)

1991 
	#AT91C_CAN_MB2_MFID
 (0xFFFD024C)

1992 
	#AT91C_CAN_MB2_MSR
 (0xFFFD0250)

1994 
	#AT91C_CAN_MB3_MFID
 (0xFFFD026C)

1995 
	#AT91C_CAN_MB3_MAM
 (0xFFFD0264)

1996 
	#AT91C_CAN_MB3_MID
 (0xFFFD0268)

1997 
	#AT91C_CAN_MB3_MCR
 (0xFFFD027C)

1998 
	#AT91C_CAN_MB3_MMR
 (0xFFFD0260)

1999 
	#AT91C_CAN_MB3_MSR
 (0xFFFD0270)

2000 
	#AT91C_CAN_MB3_MDL
 (0xFFFD0274)

2001 
	#AT91C_CAN_MB3_MDH
 (0xFFFD0278)

2003 
	#AT91C_CAN_MB4_MID
 (0xFFFD0288)

2004 
	#AT91C_CAN_MB4_MMR
 (0xFFFD0280)

2005 
	#AT91C_CAN_MB4_MDH
 (0xFFFD0298)

2006 
	#AT91C_CAN_MB4_MFID
 (0xFFFD028C)

2007 
	#AT91C_CAN_MB4_MSR
 (0xFFFD0290)

2008 
	#AT91C_CAN_MB4_MCR
 (0xFFFD029C)

2009 
	#AT91C_CAN_MB4_MDL
 (0xFFFD0294)

2010 
	#AT91C_CAN_MB4_MAM
 (0xFFFD0284)

2012 
	#AT91C_CAN_MB5_MSR
 (0xFFFD02B0)

2013 
	#AT91C_CAN_MB5_MCR
 (0xFFFD02BC)

2014 
	#AT91C_CAN_MB5_MFID
 (0xFFFD02AC)

2015 
	#AT91C_CAN_MB5_MDH
 (0xFFFD02B8)

2016 
	#AT91C_CAN_MB5_MID
 (0xFFFD02A8)

2017 
	#AT91C_CAN_MB5_MMR
 (0xFFFD02A0)

2018 
	#AT91C_CAN_MB5_MDL
 (0xFFFD02B4)

2019 
	#AT91C_CAN_MB5_MAM
 (0xFFFD02A4)

2021 
	#AT91C_CAN_MB6_MFID
 (0xFFFD02CC)

2022 
	#AT91C_CAN_MB6_MID
 (0xFFFD02C8)

2023 
	#AT91C_CAN_MB6_MAM
 (0xFFFD02C4)

2024 
	#AT91C_CAN_MB6_MSR
 (0xFFFD02D0)

2025 
	#AT91C_CAN_MB6_MDL
 (0xFFFD02D4)

2026 
	#AT91C_CAN_MB6_MCR
 (0xFFFD02DC)

2027 
	#AT91C_CAN_MB6_MDH
 (0xFFFD02D8)

2028 
	#AT91C_CAN_MB6_MMR
 (0xFFFD02C0)

2030 
	#AT91C_CAN_MB7_MCR
 (0xFFFD02FC)

2031 
	#AT91C_CAN_MB7_MDH
 (0xFFFD02F8)

2032 
	#AT91C_CAN_MB7_MFID
 (0xFFFD02EC)

2033 
	#AT91C_CAN_MB7_MDL
 (0xFFFD02F4)

2034 
	#AT91C_CAN_MB7_MID
 (0xFFFD02E8)

2035 
	#AT91C_CAN_MB7_MMR
 (0xFFFD02E0)

2036 
	#AT91C_CAN_MB7_MAM
 (0xFFFD02E4)

2037 
	#AT91C_CAN_MB7_MSR
 (0xFFFD02F0)

2039 
	#AT91C_CAN_TCR
 (0xFFFD0024)

2040 
	#AT91C_CAN_IMR
 (0xFFFD000C)

2041 
	#AT91C_CAN_IER
 (0xFFFD0004)

2042 
	#AT91C_CAN_ECR
 (0xFFFD0020)

2043 
	#AT91C_CAN_TIMESTP
 (0xFFFD001C)

2044 
	#AT91C_CAN_MR
 (0xFFFD0000)

2045 
	#AT91C_CAN_IDR
 (0xFFFD0008)

2046 
	#AT91C_CAN_ACR
 (0xFFFD0028)

2047 
	#AT91C_CAN_TIM
 (0xFFFD0018)

2048 
	#AT91C_CAN_SR
 (0xFFFD0010)

2049 
	#AT91C_CAN_BR
 (0xFFFD0014)

2050 
	#AT91C_CAN_VR
 (0xFFFD00FC)

2052 
	#AT91C_EMAC_ISR
 (0xFFFDC024)

2053 
	#AT91C_EMAC_SA4H
 (0xFFFDC0B4)

2054 
	#AT91C_EMAC_SA1L
 (0xFFFDC098)

2055 
	#AT91C_EMAC_ELE
 (0xFFFDC078)

2056 
	#AT91C_EMAC_LCOL
 (0xFFFDC05C)

2057 
	#AT91C_EMAC_RLE
 (0xFFFDC088)

2058 
	#AT91C_EMAC_WOL
 (0xFFFDC0C4)

2059 
	#AT91C_EMAC_DTF
 (0xFFFDC058)

2060 
	#AT91C_EMAC_TUND
 (0xFFFDC064)

2061 
	#AT91C_EMAC_NCR
 (0xFFFDC000)

2062 
	#AT91C_EMAC_SA4L
 (0xFFFDC0B0)

2063 
	#AT91C_EMAC_RSR
 (0xFFFDC020)

2064 
	#AT91C_EMAC_SA3L
 (0xFFFDC0A8)

2065 
	#AT91C_EMAC_TSR
 (0xFFFDC014)

2066 
	#AT91C_EMAC_IDR
 (0xFFFDC02C)

2067 
	#AT91C_EMAC_RSE
 (0xFFFDC074)

2068 
	#AT91C_EMAC_ECOL
 (0xFFFDC060)

2069 
	#AT91C_EMAC_TID
 (0xFFFDC0B8)

2070 
	#AT91C_EMAC_HRB
 (0xFFFDC090)

2071 
	#AT91C_EMAC_TBQP
 (0xFFFDC01C)

2072 
	#AT91C_EMAC_USRIO
 (0xFFFDC0C0)

2073 
	#AT91C_EMAC_PTR
 (0xFFFDC038)

2074 
	#AT91C_EMAC_SA2H
 (0xFFFDC0A4)

2075 
	#AT91C_EMAC_ROV
 (0xFFFDC070)

2076 
	#AT91C_EMAC_ALE
 (0xFFFDC054)

2077 
	#AT91C_EMAC_RJA
 (0xFFFDC07C)

2078 
	#AT91C_EMAC_RBQP
 (0xFFFDC018)

2079 
	#AT91C_EMAC_TPF
 (0xFFFDC08C)

2080 
	#AT91C_EMAC_NCFGR
 (0xFFFDC004)

2081 
	#AT91C_EMAC_HRT
 (0xFFFDC094)

2082 
	#AT91C_EMAC_USF
 (0xFFFDC080)

2083 
	#AT91C_EMAC_FCSE
 (0xFFFDC050)

2084 
	#AT91C_EMAC_TPQ
 (0xFFFDC0BC)

2085 
	#AT91C_EMAC_MAN
 (0xFFFDC034)

2086 
	#AT91C_EMAC_FTO
 (0xFFFDC040)

2087 
	#AT91C_EMAC_REV
 (0xFFFDC0FC)

2088 
	#AT91C_EMAC_IMR
 (0xFFFDC030)

2089 
	#AT91C_EMAC_SCF
 (0xFFFDC044)

2090 
	#AT91C_EMAC_PFR
 (0xFFFDC03C)

2091 
	#AT91C_EMAC_MCF
 (0xFFFDC048)

2092 
	#AT91C_EMAC_NSR
 (0xFFFDC008)

2093 
	#AT91C_EMAC_SA2L
 (0xFFFDC0A0)

2094 
	#AT91C_EMAC_FRO
 (0xFFFDC04C)

2095 
	#AT91C_EMAC_IER
 (0xFFFDC028)

2096 
	#AT91C_EMAC_SA1H
 (0xFFFDC09C)

2097 
	#AT91C_EMAC_CSE
 (0xFFFDC068)

2098 
	#AT91C_EMAC_SA3H
 (0xFFFDC0AC)

2099 
	#AT91C_EMAC_RRE
 (0xFFFDC06C)

2100 
	#AT91C_EMAC_STE
 (0xFFFDC084)

2102 
	#AT91C_ADC_PTSR
 (0xFFFD8124)

2103 
	#AT91C_ADC_PTCR
 (0xFFFD8120)

2104 
	#AT91C_ADC_TNPR
 (0xFFFD8118)

2105 
	#AT91C_ADC_TNCR
 (0xFFFD811C)

2106 
	#AT91C_ADC_RNPR
 (0xFFFD8110)

2107 
	#AT91C_ADC_RNCR
 (0xFFFD8114)

2108 
	#AT91C_ADC_RPR
 (0xFFFD8100)

2109 
	#AT91C_ADC_TCR
 (0xFFFD810C)

2110 
	#AT91C_ADC_TPR
 (0xFFFD8108)

2111 
	#AT91C_ADC_RCR
 (0xFFFD8104)

2113 
	#AT91C_ADC_CDR2
 (0xFFFD8038)

2114 
	#AT91C_ADC_CDR3
 (0xFFFD803C)

2115 
	#AT91C_ADC_CDR0
 (0xFFFD8030)

2116 
	#AT91C_ADC_CDR5
 (0xFFFD8044)

2117 
	#AT91C_ADC_CHDR
 (0xFFFD8014)

2118 
	#AT91C_ADC_SR
 (0xFFFD801C)

2119 
	#AT91C_ADC_CDR4
 (0xFFFD8040)

2120 
	#AT91C_ADC_CDR1
 (0xFFFD8034)

2121 
	#AT91C_ADC_LCDR
 (0xFFFD8020)

2122 
	#AT91C_ADC_IDR
 (0xFFFD8028)

2123 
	#AT91C_ADC_CR
 (0xFFFD8000)

2124 
	#AT91C_ADC_CDR7
 (0xFFFD804C)

2125 
	#AT91C_ADC_CDR6
 (0xFFFD8048)

2126 
	#AT91C_ADC_IER
 (0xFFFD8024)

2127 
	#AT91C_ADC_CHER
 (0xFFFD8010)

2128 
	#AT91C_ADC_CHSR
 (0xFFFD8018)

2129 
	#AT91C_ADC_MR
 (0xFFFD8004)

2130 
	#AT91C_ADC_IMR
 (0xFFFD802C)

2132 
	#AT91C_AES_TPR
 (0xFFFA4108)

2133 
	#AT91C_AES_PTCR
 (0xFFFA4120)

2134 
	#AT91C_AES_RNPR
 (0xFFFA4110)

2135 
	#AT91C_AES_TNCR
 (0xFFFA411C)

2136 
	#AT91C_AES_TCR
 (0xFFFA410C)

2137 
	#AT91C_AES_RCR
 (0xFFFA4104)

2138 
	#AT91C_AES_RNCR
 (0xFFFA4114)

2139 
	#AT91C_AES_TNPR
 (0xFFFA4118)

2140 
	#AT91C_AES_RPR
 (0xFFFA4100)

2141 
	#AT91C_AES_PTSR
 (0xFFFA4124)

2143 
	#AT91C_AES_IVxR
 (0xFFFA4060)

2144 
	#AT91C_AES_MR
 (0xFFFA4004)

2145 
	#AT91C_AES_VR
 (0xFFFA40FC)

2146 
	#AT91C_AES_ODATAxR
 (0xFFFA4050)

2147 
	#AT91C_AES_IDATAxR
 (0xFFFA4040)

2148 
	#AT91C_AES_CR
 (0xFFFA4000)

2149 
	#AT91C_AES_IDR
 (0xFFFA4014)

2150 
	#AT91C_AES_IMR
 (0xFFFA4018)

2151 
	#AT91C_AES_IER
 (0xFFFA4010)

2152 
	#AT91C_AES_KEYWxR
 (0xFFFA4020)

2153 
	#AT91C_AES_ISR
 (0xFFFA401C)

2155 
	#AT91C_TDES_RNCR
 (0xFFFA8114)

2156 
	#AT91C_TDES_TCR
 (0xFFFA810C)

2157 
	#AT91C_TDES_RCR
 (0xFFFA8104)

2158 
	#AT91C_TDES_TNPR
 (0xFFFA8118)

2159 
	#AT91C_TDES_RNPR
 (0xFFFA8110)

2160 
	#AT91C_TDES_RPR
 (0xFFFA8100)

2161 
	#AT91C_TDES_TNCR
 (0xFFFA811C)

2162 
	#AT91C_TDES_TPR
 (0xFFFA8108)

2163 
	#AT91C_TDES_PTSR
 (0xFFFA8124)

2164 
	#AT91C_TDES_PTCR
 (0xFFFA8120)

2166 
	#AT91C_TDES_KEY2WxR
 (0xFFFA8028)

2167 
	#AT91C_TDES_KEY3WxR
 (0xFFFA8030)

2168 
	#AT91C_TDES_IDR
 (0xFFFA8014)

2169 
	#AT91C_TDES_VR
 (0xFFFA80FC)

2170 
	#AT91C_TDES_IVxR
 (0xFFFA8060)

2171 
	#AT91C_TDES_ODATAxR
 (0xFFFA8050)

2172 
	#AT91C_TDES_IMR
 (0xFFFA8018)

2173 
	#AT91C_TDES_MR
 (0xFFFA8004)

2174 
	#AT91C_TDES_CR
 (0xFFFA8000)

2175 
	#AT91C_TDES_IER
 (0xFFFA8010)

2176 
	#AT91C_TDES_ISR
 (0xFFFA801C)

2177 
	#AT91C_TDES_IDATAxR
 (0xFFFA8040)

2178 
	#AT91C_TDES_KEY1WxR
 (0xFFFA8020)

2179 

	)

2183 
	#AT91C_PIO_PA0
 (1 << 0)

2184 
	#AT91C_PA0_RXD0
 (
AT91C_PIO_PA0
)

2185 
	#AT91C_PIO_PA1
 (1 << 1)

2186 
	#AT91C_PA1_TXD0
 (
AT91C_PIO_PA1
)

2187 
	#AT91C_PIO_PA10
 (1 << 10)

2188 
	#AT91C_PA10_TWD
 (
AT91C_PIO_PA10
)

2189 
	#AT91C_PIO_PA11
 (1 << 11)

2190 
	#AT91C_PA11_TWCK
 (
AT91C_PIO_PA11
)

2191 
	#AT91C_PIO_PA12
 (1 << 12)

2192 
	#AT91C_PA12_NPCS00
 (
AT91C_PIO_PA12
)

2193 
	#AT91C_PIO_PA13
 (1 << 13)

2194 
	#AT91C_PA13_NPCS01
 (
AT91C_PIO_PA13
)

2195 
	#AT91C_PA13_PCK1
 (
AT91C_PIO_PA13
)

2196 
	#AT91C_PIO_PA14
 (1 << 14)

2197 
	#AT91C_PA14_NPCS02
 (
AT91C_PIO_PA14
)

2198 
	#AT91C_PA14_IRQ1
 (
AT91C_PIO_PA14
)

2199 
	#AT91C_PIO_PA15
 (1 << 15)

2200 
	#AT91C_PA15_NPCS03
 (
AT91C_PIO_PA15
)

2201 
	#AT91C_PA15_TCLK2
 (
AT91C_PIO_PA15
)

2202 
	#AT91C_PIO_PA16
 (1 << 16)

2203 
	#AT91C_PA16_MISO0
 (
AT91C_PIO_PA16
)

2204 
	#AT91C_PIO_PA17
 (1 << 17)

2205 
	#AT91C_PA17_MOSI0
 (
AT91C_PIO_PA17
)

2206 
	#AT91C_PIO_PA18
 (1 << 18)

2207 
	#AT91C_PA18_SPCK0
 (
AT91C_PIO_PA18
)

2208 
	#AT91C_PIO_PA19
 (1 << 19)

2209 
	#AT91C_PA19_CANRX
 (
AT91C_PIO_PA19
)

2210 
	#AT91C_PIO_PA2
 (1 << 2)

2211 
	#AT91C_PA2_SCK0
 (
AT91C_PIO_PA2
)

2212 
	#AT91C_PA2_NPCS11
 (
AT91C_PIO_PA2
)

2213 
	#AT91C_PIO_PA20
 (1 << 20)

2214 
	#AT91C_PA20_CANTX
 (
AT91C_PIO_PA20
)

2215 
	#AT91C_PIO_PA21
 (1 << 21)

2216 
	#AT91C_PA21_TF
 (
AT91C_PIO_PA21
)

2217 
	#AT91C_PA21_NPCS10
 (
AT91C_PIO_PA21
)

2218 
	#AT91C_PIO_PA22
 (1 << 22)

2219 
	#AT91C_PA22_TK
 (
AT91C_PIO_PA22
)

2220 
	#AT91C_PA22_SPCK1
 (
AT91C_PIO_PA22
)

2221 
	#AT91C_PIO_PA23
 (1 << 23)

2222 
	#AT91C_PA23_TD
 (
AT91C_PIO_PA23
)

2223 
	#AT91C_PA23_MOSI1
 (
AT91C_PIO_PA23
)

2224 
	#AT91C_PIO_PA24
 (1 << 24)

2225 
	#AT91C_PA24_RD
 (
AT91C_PIO_PA24
)

2226 
	#AT91C_PA24_MISO1
 (
AT91C_PIO_PA24
)

2227 
	#AT91C_PIO_PA25
 (1 << 25)

2228 
	#AT91C_PA25_RK
 (
AT91C_PIO_PA25
)

2229 
	#AT91C_PA25_NPCS11
 (
AT91C_PIO_PA25
)

2230 
	#AT91C_PIO_PA26
 (1 << 26)

2231 
	#AT91C_PA26_RF
 (
AT91C_PIO_PA26
)

2232 
	#AT91C_PA26_NPCS12
 (
AT91C_PIO_PA26
)

2233 
	#AT91C_PIO_PA27
 (1 << 27)

2234 
	#AT91C_PA27_DRXD
 (
AT91C_PIO_PA27
)

2235 
	#AT91C_PA27_PCK3
 (
AT91C_PIO_PA27
)

2236 
	#AT91C_PIO_PA28
 (1 << 28)

2237 
	#AT91C_PA28_DTXD
 (
AT91C_PIO_PA28
)

2238 
	#AT91C_PIO_PA29
 (1 << 29)

2239 
	#AT91C_PA29_FIQ
 (
AT91C_PIO_PA29
)

2240 
	#AT91C_PA29_NPCS13
 (
AT91C_PIO_PA29
)

2241 
	#AT91C_PIO_PA3
 (1 << 3)

2242 
	#AT91C_PA3_RTS0
 (
AT91C_PIO_PA3
)

2243 
	#AT91C_PA3_NPCS12
 (
AT91C_PIO_PA3
)

2244 
	#AT91C_PIO_PA30
 (1 << 30)

2245 
	#AT91C_PA30_IRQ0
 (
AT91C_PIO_PA30
)

2246 
	#AT91C_PA30_PCK2
 (
AT91C_PIO_PA30
)

2247 
	#AT91C_PIO_PA4
 (1 << 4)

2248 
	#AT91C_PA4_CTS0
 (
AT91C_PIO_PA4
)

2249 
	#AT91C_PA4_NPCS13
 (
AT91C_PIO_PA4
)

2250 
	#AT91C_PIO_PA5
 (1 << 5)

2251 
	#AT91C_PA5_RXD1
 (
AT91C_PIO_PA5
)

2252 
	#AT91C_PIO_PA6
 (1 << 6)

2253 
	#AT91C_PA6_TXD1
 (
AT91C_PIO_PA6
)

2254 
	#AT91C_PIO_PA7
 (1 << 7)

2255 
	#AT91C_PA7_SCK1
 (
AT91C_PIO_PA7
)

2256 
	#AT91C_PA7_NPCS01
 (
AT91C_PIO_PA7
)

2257 
	#AT91C_PIO_PA8
 (1 << 8)

2258 
	#AT91C_PA8_RTS1
 (
AT91C_PIO_PA8
)

2259 
	#AT91C_PA8_NPCS02
 (
AT91C_PIO_PA8
)

2260 
	#AT91C_PIO_PA9
 (1 << 9)

2261 
	#AT91C_PA9_CTS1
 (
AT91C_PIO_PA9
)

2262 
	#AT91C_PA9_NPCS03
 (
AT91C_PIO_PA9
)

2263 
	#AT91C_PIO_PB0
 (1 << 0)

2264 
	#AT91C_PB0_ETXCK_EREFCK
 (
AT91C_PIO_PB0
)

2265 
	#AT91C_PB0_PCK0
 (
AT91C_PIO_PB0
)

2266 
	#AT91C_PIO_PB1
 (1 << 1)

2267 
	#AT91C_PB1_ETXEN
 (
AT91C_PIO_PB1
)

2268 
	#AT91C_PIO_PB10
 (1 << 10)

2269 
	#AT91C_PB10_ETX2
 (
AT91C_PIO_PB10
)

2270 
	#AT91C_PB10_NPCS11
 (
AT91C_PIO_PB10
)

2271 
	#AT91C_PIO_PB11
 (1 << 11)

2272 
	#AT91C_PB11_ETX3
 (
AT91C_PIO_PB11
)

2273 
	#AT91C_PB11_NPCS12
 (
AT91C_PIO_PB11
)

2274 
	#AT91C_PIO_PB12
 (1 << 12)

2275 
	#AT91C_PB12_ETXER
 (
AT91C_PIO_PB12
)

2276 
	#AT91C_PB12_TCLK0
 (
AT91C_PIO_PB12
)

2277 
	#AT91C_PIO_PB13
 (1 << 13)

2278 
	#AT91C_PB13_ERX2
 (
AT91C_PIO_PB13
)

2279 
	#AT91C_PB13_NPCS01
 (
AT91C_PIO_PB13
)

2280 
	#AT91C_PIO_PB14
 (1 << 14)

2281 
	#AT91C_PB14_ERX3
 (
AT91C_PIO_PB14
)

2282 
	#AT91C_PB14_NPCS02
 (
AT91C_PIO_PB14
)

2283 
	#AT91C_PIO_PB15
 (1 << 15)

2284 
	#AT91C_PB15_ERXDV
 (
AT91C_PIO_PB15
)

2285 
	#AT91C_PIO_PB16
 (1 << 16)

2286 
	#AT91C_PB16_ECOL
 (
AT91C_PIO_PB16
)

2287 
	#AT91C_PB16_NPCS13
 (
AT91C_PIO_PB16
)

2288 
	#AT91C_PIO_PB17
 (1 << 17)

2289 
	#AT91C_PB17_ERXCK
 (
AT91C_PIO_PB17
)

2290 
	#AT91C_PB17_NPCS03
 (
AT91C_PIO_PB17
)

2291 
	#AT91C_PIO_PB18
 (1 << 18)

2292 
	#AT91C_PB18_EF100
 (
AT91C_PIO_PB18
)

2293 
	#AT91C_PB18_ADTRG
 (
AT91C_PIO_PB18
)

2294 
	#AT91C_PIO_PB19
 (1 << 19)

2295 
	#AT91C_PB19_PWM0
 (
AT91C_PIO_PB19
)

2296 
	#AT91C_PB19_TCLK1
 (
AT91C_PIO_PB19
)

2297 
	#AT91C_PIO_PB2
 (1 << 2)

2298 
	#AT91C_PB2_ETX0
 (
AT91C_PIO_PB2
)

2299 
	#AT91C_PIO_PB20
 (1 << 20)

2300 
	#AT91C_PB20_PWM1
 (
AT91C_PIO_PB20
)

2301 
	#AT91C_PB20_PCK0
 (
AT91C_PIO_PB20
)

2302 
	#AT91C_PIO_PB21
 (1 << 21)

2303 
	#AT91C_PB21_PWM2
 (
AT91C_PIO_PB21
)

2304 
	#AT91C_PB21_PCK1
 (
AT91C_PIO_PB21
)

2305 
	#AT91C_PIO_PB22
 (1 << 22)

2306 
	#AT91C_PB22_PWM3
 (
AT91C_PIO_PB22
)

2307 
	#AT91C_PB22_PCK2
 (
AT91C_PIO_PB22
)

2308 
	#AT91C_PIO_PB23
 (1 << 23)

2309 
	#AT91C_PB23_TIOA0
 (
AT91C_PIO_PB23
)

2310 
	#AT91C_PB23_DCD1
 (
AT91C_PIO_PB23
)

2311 
	#AT91C_PIO_PB24
 (1 << 24)

2312 
	#AT91C_PB24_TIOB0
 (
AT91C_PIO_PB24
)

2313 
	#AT91C_PB24_DSR1
 (
AT91C_PIO_PB24
)

2314 
	#AT91C_PIO_PB25
 (1 << 25)

2315 
	#AT91C_PB25_TIOA1
 (
AT91C_PIO_PB25
)

2316 
	#AT91C_PB25_DTR1
 (
AT91C_PIO_PB25
)

2317 
	#AT91C_PIO_PB26
 (1 << 26)

2318 
	#AT91C_PB26_TIOB1
 (
AT91C_PIO_PB26
)

2319 
	#AT91C_PB26_RI1
 (
AT91C_PIO_PB26
)

2320 
	#AT91C_PIO_PB27
 (1 << 27)

2321 
	#AT91C_PB27_TIOA2
 (
AT91C_PIO_PB27
)

2322 
	#AT91C_PB27_PWM0
 (
AT91C_PIO_PB27
)

2323 
	#AT91C_PIO_PB28
 (1 << 28)

2324 
	#AT91C_PB28_TIOB2
 (
AT91C_PIO_PB28
)

2325 
	#AT91C_PB28_PWM1
 (
AT91C_PIO_PB28
)

2326 
	#AT91C_PIO_PB29
 (1 << 29)

2327 
	#AT91C_PB29_PCK1
 (
AT91C_PIO_PB29
)

2328 
	#AT91C_PB29_PWM2
 (
AT91C_PIO_PB29
)

2329 
	#AT91C_PIO_PB3
 (1 << 3)

2330 
	#AT91C_PB3_ETX1
 (
AT91C_PIO_PB3
)

2331 
	#AT91C_PIO_PB30
 (1 << 30)

2332 
	#AT91C_PB30_PCK2
 (
AT91C_PIO_PB30
)

2333 
	#AT91C_PB30_PWM3
 (
AT91C_PIO_PB30
)

2334 
	#AT91C_PIO_PB4
 (1 << 4)

2335 
	#AT91C_PB4_ECRS_ECRSDV
 (
AT91C_PIO_PB4
)

2336 
	#AT91C_PIO_PB5
 (1 << 5)

2337 
	#AT91C_PB5_ERX0
 (
AT91C_PIO_PB5
)

2338 
	#AT91C_PIO_PB6
 (1 << 6)

2339 
	#AT91C_PB6_ERX1
 (
AT91C_PIO_PB6
)

2340 
	#AT91C_PIO_PB7
 (1 << 7)

2341 
	#AT91C_PB7_ERXER
 (
AT91C_PIO_PB7
)

2342 
	#AT91C_PIO_PB8
 (1 << 8)

2343 
	#AT91C_PB8_EMDC
 (
AT91C_PIO_PB8
)

2344 
	#AT91C_PIO_PB9
 (1 << 9)

2345 
	#AT91C_PB9_EMDIO
 (
AT91C_PIO_PB9
)

2346 

	)

2350 
	#AT91C_ID_FIQ
 ( 0)

2351 
	#AT91C_ID_SYS
 ( 1)

2352 
	#AT91C_ID_PIOA
 ( 2)

2353 
	#AT91C_ID_PIOB
 ( 3)

2354 
	#AT91C_ID_SPI0
 ( 4)

2355 
	#AT91C_ID_SPI1
 ( 5)

2356 
	#AT91C_ID_US0
 ( 6)

2357 
	#AT91C_ID_US1
 ( 7)

2358 
	#AT91C_ID_SSC
 ( 8)

2359 
	#AT91C_ID_TWI
 ( 9)

2360 
	#AT91C_ID_PWMC
 (10)

2361 
	#AT91C_ID_UDP
 (11)

2362 
	#AT91C_ID_TC0
 (12)

2363 
	#AT91C_ID_TC1
 (13)

2364 
	#AT91C_ID_TC2
 (14)

2365 
	#AT91C_ID_CAN
 (15)

2366 
	#AT91C_ID_EMAC
 (16)

2367 
	#AT91C_ID_ADC
 (17)

2368 
	#AT91C_ID_AES
 (18)

2369 
	#AT91C_ID_TDES
 (19)

2370 
	#AT91C_ID_20_Re£rved
 (20)

2371 
	#AT91C_ID_21_Re£rved
 (21)

2372 
	#AT91C_ID_22_Re£rved
 (22)

2373 
	#AT91C_ID_23_Re£rved
 (23)

2374 
	#AT91C_ID_24_Re£rved
 (24)

2375 
	#AT91C_ID_25_Re£rved
 (25)

2376 
	#AT91C_ID_26_Re£rved
 (26)

2377 
	#AT91C_ID_27_Re£rved
 (27)

2378 
	#AT91C_ID_28_Re£rved
 (28)

2379 
	#AT91C_ID_29_Re£rved
 (29)

2380 
	#AT91C_ID_IRQ0
 (30)

2381 
	#AT91C_ID_IRQ1
 (31)

2382 

	)

2386 
	#AT91C_BASE_SYS
 (0xFFFFF000)

2387 
	#AT91C_BASE_AIC
 (0xFFFFF000)

2388 
	#AT91C_BASE_PDC_DBGU
 (0xFFFFF300)

2389 
	#AT91C_BASE_DBGU
 (0xFFFFF200)

2390 
	#AT91C_BASE_PIOA
 (0xFFFFF400)

2391 
	#AT91C_BASE_PIOB
 (0xFFFFF600)

2392 
	#AT91C_BASE_CKGR
 (0xFFFFFC20)

2393 
	#AT91C_BASE_PMC
 (0xFFFFFC00)

2394 
	#AT91C_BASE_RSTC
 (0xFFFFFD00)

2395 
	#AT91C_BASE_RTTC
 (0xFFFFFD20)

2396 
	#AT91C_BASE_PITC
 (0xFFFFFD30)

2397 
	#AT91C_BASE_WDTC
 (0xFFFFFD40)

2398 
	#AT91C_BASE_VREG
 (0xFFFFFD60)

2399 
	#AT91C_BASE_MC
 (0xFFFFFF00)

2400 
	#AT91C_BASE_PDC_SPI1
 (0xFFFE4100)

2401 
	#AT91C_BASE_SPI1
 (0xFFFE4000)

2402 
	#AT91C_BASE_PDC_SPI0
 (0xFFFE0100)

2403 
	#AT91C_BASE_SPI0
 (0xFFFE0000)

2404 
	#AT91C_BASE_PDC_US1
 (0xFFFC4100)

2405 
	#AT91C_BASE_US1
 (0xFFFC4000)

2406 
	#AT91C_BASE_PDC_US0
 (0xFFFC0100)

2407 
	#AT91C_BASE_US0
 (0xFFFC0000)

2408 
	#AT91C_BASE_PDC_SSC
 (0xFFFD4100)

2409 
	#AT91C_BASE_SSC
 (0xFFFD4000)

2410 
	#AT91C_BASE_TWI
 (0xFFFB8000)

2411 
	#AT91C_BASE_PWMC_CH3
 (0xFFFCC260)

2412 
	#AT91C_BASE_PWMC_CH2
 (0xFFFCC240)

2413 
	#AT91C_BASE_PWMC_CH1
 (0xFFFCC220)

2414 
	#AT91C_BASE_PWMC_CH0
 (0xFFFCC200)

2415 
	#AT91C_BASE_PWMC
 (0xFFFCC000)

2416 
	#AT91C_BASE_UDP
 (0xFFFB0000)

2417 
	#AT91C_BASE_TC0
 (0xFFFA0000)

2418 
	#AT91C_BASE_TC1
 (0xFFFA0040)

2419 
	#AT91C_BASE_TC2
 (0xFFFA0080)

2420 
	#AT91C_BASE_TCB
 (0xFFFA0000)

2421 
	#AT91C_BASE_CAN_MB0
 (0xFFFD0200)

2422 
	#AT91C_BASE_CAN_MB1
 (0xFFFD0220)

2423 
	#AT91C_BASE_CAN_MB2
 (0xFFFD0240)

2424 
	#AT91C_BASE_CAN_MB3
 (0xFFFD0260)

2425 
	#AT91C_BASE_CAN_MB4
 (0xFFFD0280)

2426 
	#AT91C_BASE_CAN_MB5
 (0xFFFD02A0)

2427 
	#AT91C_BASE_CAN_MB6
 (0xFFFD02C0)

2428 
	#AT91C_BASE_CAN_MB7
 (0xFFFD02E0)

2429 
	#AT91C_BASE_CAN
 (0xFFFD0000)

2430 
	#AT91C_BASE_EMAC
 (0xFFFDC000)

2431 
	#AT91C_BASE_PDC_ADC
 (0xFFFD8100)

2432 
	#AT91C_BASE_ADC
 (0xFFFD8000)

2433 
	#AT91C_BASE_PDC_AES
 (0xFFFA4100)

2434 
	#AT91C_BASE_AES
 (0xFFFA4000)

2435 
	#AT91C_BASE_PDC_TDES
 (0xFFFA8100)

2436 
	#AT91C_BASE_TDES
 (0xFFFA8000)

2437 

	)

2441 
	#AT91C_ISRAM
 (0x00200000)

2442 
	#AT91C_ISRAM_SIZE
 (0x00010000)

2443 
	#AT91C_IFLASH
 (0x00100000)

2444 
	#AT91C_IFLASH_SIZE
 (0x00040000)

2445 

	)

	@portable/IAR/AtmelSAM7S64/ISR_Support.h

54 
EXTERN
 
pxCuºítTCB


55 
EXTERN
 
	gulCrôiˇlNe°ög


58 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


61 
p‹tSAVE_CONTEXT
 
	gMACRO


63 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

64 
STMDB
 
	gSP
!, {
	gR0
}

66 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

67 
STMDB
 
	gSP
, {SP}^

68 
NOP


69 
SUB
 
	gSP
, SP, #4

70 
LDMIA
 
	gSP
!, {
	gR0
}

72 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

73 
STMDB
 
	gR0
!, {
	gLR
}

75 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

76 
MOV
 
	gLR
, 
	gR0


78 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

79 
LDMIA
 
	gSP
!, {
	gR0
}

81 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

82 
STMDB
 
	gLR
, {
	gR0
-LR}^

83 
NOP


84 
SUB
 
	gLR
, LR, #60

86 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

87 
MRS
 
	gR0
, 
SPSR


88 
STMDB
 
	gLR
!, {
	gR0
}

90 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


91 
LDR
 
R0
, [R0]

92 
STMDB
 
	gLR
!, {
	gR0
}

94 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

95 
LDR
 
	gR1
, =
pxCuºítTCB


96 
LDR
 
R0
, [
R1
]

97 
STR
 
	gLR
, [
R0
]

99 
ENDM


102 
p‹tRESTORE_CONTEXT
 
	gMACRO


104 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

105 
LDR
 
	gR1
, =
pxCuºítTCB


106 
LDR
 
R0
, [
R1
]

107 
LDR
 
	gLR
, [
R0
]

109 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

110 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

111 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


112 
LDMFD
 
LR
!, {
	gR1
}

113 
STR
 
	gR1
, [
R0
]

115 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

116 
LDMFD
 
	gLR
!, {
	gR0
}

117 
MSR
 
	gSPSR_cxsf
, 
	gR0


119 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

120 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

121 
	gNOP


123 ; 
Re°‹e
 
the
  
	gaddªss
.

124 
LDR
 
	gLR
, [
LR
, #+60]

126 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


127 ; 
c‹ª˘
 
	gaddªss
.

128 
SUBS
 
	gPC
, 
	gLR
, #4

130 
	gENDM


	@portable/IAR/AtmelSAM7S64/lib_AT91SAM7S64.h

30 #i‚de‡
lib_AT91SAM7S64_H


31 
	#lib_AT91SAM7S64_H


	)

37 
	#AT91C_MC_CORRECT_KEY
 (() 0x5A << 24)

38 

	)

43 
__ölöe
 
	$AT91F_MC_Rem≠
 ()

45 
AT91PS_MC
 
pMC
 = (AT91PS_MCË
AT91C_BASE_MC
;

47 
pMC
->
MC_RCR
 = 
AT91C_MC_RCB
;

48 
	}
}

54 
__ölöe
 
	$AT91F_MC_EFC_CfgModeReg
 (

55 
AT91PS_MC
 
pMC
,

56 
mode
)

59 
pMC
->
MC_FMR
 = 
mode
;

60 
	}
}

66 
__ölöe
 
	$AT91F_MC_EFC_GëModeReg
(

67 
AT91PS_MC
 
pMC
)

69  
pMC
->
MC_FMR
;

70 
	}
}

76 
__ölöe
 
	$AT91F_MC_EFC_CompuãFMCN
(

77 
ma°î_˛ock
)

79  (
ma°î_˛ock
/1000000 +2);

80 
	}
}

86 
__ölöe
 
	$AT91F_MC_EFC_Pîf‹mCmd
 (

87 
AT91PS_MC
 
pMC
,

88 
å™s„r_cmd
)

90 
pMC
->
MC_FCR
 = 
å™s„r_cmd
;

91 
	}
}

97 
__ölöe
 
	$AT91F_MC_EFC_GëSètus
(

98 
AT91PS_MC
 
pMC
)

100  
pMC
->
MC_FSR
;

101 
	}
}

107 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Masked
(

108 
AT91PS_MC
 
pMC
,

109 
Êag
)

111  (
	`AT91F_MC_EFC_GëModeReg
(
pMC
Ë& 
Êag
);

112 
	}
}

118 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Së
(

119 
AT91PS_MC
 
pMC
,

120 
Êag
)

122  (
	`AT91F_MC_EFC_GëSètus
(
pMC
Ë& 
Êag
);

123 
	}
}

132 
__ölöe
 
	$AT91F_PDC_SëNextRx
 (

133 
AT91PS_PDC
 
pPDC
,

134 *
addªss
,

135 
byãs
)

137 
pPDC
->
PDC_RNPR
 = (Ë
addªss
;

138 
pPDC
->
PDC_RNCR
 = 
byãs
;

139 
	}
}

145 
__ölöe
 
	$AT91F_PDC_SëNextTx
 (

146 
AT91PS_PDC
 
pPDC
,

147 *
addªss
,

148 
byãs
)

150 
pPDC
->
PDC_TNPR
 = (Ë
addªss
;

151 
pPDC
->
PDC_TNCR
 = 
byãs
;

152 
	}
}

158 
__ölöe
 
	$AT91F_PDC_SëRx
 (

159 
AT91PS_PDC
 
pPDC
,

160 *
addªss
,

161 
byãs
)

163 
pPDC
->
PDC_RPR
 = (Ë
addªss
;

164 
pPDC
->
PDC_RCR
 = 
byãs
;

165 
	}
}

171 
__ölöe
 
	$AT91F_PDC_SëTx
 (

172 
AT91PS_PDC
 
pPDC
,

173 *
addªss
,

174 
byãs
)

176 
pPDC
->
PDC_TPR
 = (Ë
addªss
;

177 
pPDC
->
PDC_TCR
 = 
byãs
;

178 
	}
}

184 
__ölöe
 
	$AT91F_PDC_E«bÀTx
 (

185 
AT91PS_PDC
 
pPDC
 )

187 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTEN
;

188 
	}
}

194 
__ölöe
 
	$AT91F_PDC_E«bÀRx
 (

195 
AT91PS_PDC
 
pPDC
 )

197 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTEN
;

198 
	}
}

204 
__ölöe
 
	$AT91F_PDC_DißbÀTx
 (

205 
AT91PS_PDC
 
pPDC
 )

207 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTDIS
;

208 
	}
}

214 
__ölöe
 
	$AT91F_PDC_DißbÀRx
 (

215 
AT91PS_PDC
 
pPDC
 )

217 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTDIS
;

218 
	}
}

224 
__ölöe
 
	$AT91F_PDC_IsTxEm±y
 (

225 
AT91PS_PDC
 
pPDC
 )

227  !(
pPDC
->
PDC_TCR
);

228 
	}
}

234 
__ölöe
 
	$AT91F_PDC_IsNextTxEm±y
 (

235 
AT91PS_PDC
 
pPDC
 )

237  !(
pPDC
->
PDC_TNCR
);

238 
	}
}

244 
__ölöe
 
	$AT91F_PDC_IsRxEm±y
 (

245 
AT91PS_PDC
 
pPDC
 )

247  !(
pPDC
->
PDC_RCR
);

248 
	}
}

254 
__ölöe
 
	$AT91F_PDC_IsNextRxEm±y
 (

255 
AT91PS_PDC
 
pPDC
 )

257  !(
pPDC
->
PDC_RNCR
);

258 
	}
}

264 
__ölöe
 
	$AT91F_PDC_O≥n
 (

265 
AT91PS_PDC
 
pPDC
)

268 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

269 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

272 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

273 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

274 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

275 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

278 
	`AT91F_PDC_E«bÀRx
(
pPDC
);

279 
	`AT91F_PDC_E«bÀTx
(
pPDC
);

280 
	}
}

286 
__ölöe
 
	$AT91F_PDC_Clo£
 (

287 
AT91PS_PDC
 
pPDC
)

290 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

291 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

294 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

295 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

296 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

297 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

299 
	}
}

305 
__ölöe
 
	$AT91F_PDC_SídFøme
(

306 
AT91PS_PDC
 
pPDC
,

307 *
pBuf„r
,

308 
szBuf„r
,

309 *
pNextBuf„r
,

310 
szNextBuf„r
 )

312 i‡(
	`AT91F_PDC_IsTxEm±y
(
pPDC
)) {

314 
	`AT91F_PDC_SëTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

315 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

318 i‡(
	`AT91F_PDC_IsNextTxEm±y
(
pPDC
)) {

320 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

327 
	}
}

333 
__ölöe
 
	$AT91F_PDC_Re˚iveFøme
 (

334 
AT91PS_PDC
 
pPDC
,

335 *
pBuf„r
,

336 
szBuf„r
,

337 *
pNextBuf„r
,

338 
szNextBuf„r
 )

340 i‡(
	`AT91F_PDC_IsRxEm±y
(
pPDC
)) {

342 
	`AT91F_PDC_SëRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

343 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

346 i‡(
	`AT91F_PDC_IsNextRxEm±y
(
pPDC
)) {

348 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

355 
	}
}

363 
__ölöe
 
	$AT91F_DBGU_I¡îru±E«bÀ
(

364 
AT91PS_DBGU
 
pDbgu
,

365 
Êag
)

367 
pDbgu
->
DBGU_IER
 = 
Êag
;

368 
	}
}

374 
__ölöe
 
	$AT91F_DBGU_I¡îru±DißbÀ
(

375 
AT91PS_DBGU
 
pDbgu
,

376 
Êag
)

378 
pDbgu
->
DBGU_IDR
 = 
Êag
;

379 
	}
}

385 
__ölöe
 
	$AT91F_DBGU_GëI¡îru±MaskSètus
(

386 
AT91PS_DBGU
 
pDbgu
)

388  
pDbgu
->
DBGU_IMR
;

389 
	}
}

395 
__ölöe
 
	$AT91F_DBGU_IsI¡îru±Masked
(

396 
AT91PS_DBGU
 
pDbgu
,

397 
Êag
)

399  (
	`AT91F_DBGU_GëI¡îru±MaskSètus
(
pDbgu
Ë& 
Êag
);

400 
	}
}

410 
	#AT91C_I2S_ASY_MASTER_TX_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)–+\

	)

411 
	gAT91C_SSC_CKS_DIV
 +\

412 
	gAT91C_SSC_CKO_CONTINOUS
 +\

413 
	gAT91C_SSC_CKG_NONE
 +\

414 
	gAT91C_SSC_START_FALL_RF
 +\

415 
	gAT91C_SSC_STTOUT
 +\

416 ((1<<16Ë& 
	gAT91C_SSC_STTDLY
) +\

417 ((((
nb_bô_by_¶Ÿ
*
	gnb_¶Ÿ_by_‰ame
)/2)-1) <<24))

423 
	#AT91C_I2S_ASY_TX_FRAME_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)–+\

	)

424 (
	gnb_bô_by_¶Ÿ
-1) +\

425 
	gAT91C_SSC_MSBF
 +\

426 (((
	gnb_¶Ÿ_by_‰ame
-1)<<8Ë& 
	gAT91C_SSC_DATNB
) +\

427 (((
	gnb_bô_by_¶Ÿ
-1)<<16Ë& 
	gAT91C_SSC_FSLEN
) +\

428 
	gAT91C_SSC_FSOS_NEGATIVE
)

435 
__ölöe
 
	$AT91F_SSC_SëBaudøã
 (

436 
AT91PS_SSC
 
pSSC
,

437 
maöClock
,

438 
•ìd
)

440 
baud_vÆue
;

442 i‡(
•ìd
 == 0)

443 
baud_vÆue
 = 0;

446 
baud_vÆue
 = (Ë(
maöClock
 * 10)/(2*
•ìd
);

447 i‡((
baud_vÆue
 % 10) >= 5)

448 
baud_vÆue
 = (baud_value / 10) + 1;

450 
baud_vÆue
 /= 10;

453 
pSSC
->
SSC_CMR
 = 
baud_vÆue
;

454 
	}
}

460 
__ölöe
 
	$AT91F_SSC_C⁄figuª
 (

461 
AT91PS_SSC
 
pSSC
,

462 
sy°_˛ock
,

463 
baud_øã
,

464 
˛ock_rx
,

465 
mode_rx
,

466 
˛ock_tx
,

467 
mode_tx
)

470 
pSSC
->
SSC_IDR
 = () -1;

473 
pSSC
->
SSC_CR
 = 
AT91C_SSC_SWRST
 | 
AT91C_SSC_RXDIS
 | 
AT91C_SSC_TXDIS
 ;

476 
	`AT91F_SSC_SëBaudøã
(
pSSC
, 
sy°_˛ock
, 
baud_øã
);

479 
pSSC
->
SSC_RCMR
 = 
˛ock_rx
;

482 
pSSC
->
SSC_TCMR
 = 
˛ock_tx
;

485 
pSSC
->
SSC_RFMR
 = 
mode_rx
;

488 
pSSC
->
SSC_TFMR
 = 
mode_tx
;

491 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
));

494 
	}
}

500 
__ölöe
 
	$AT91F_SSC_E«bÀRx
 (

501 
AT91PS_SSC
 
pSSC
)

504 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXEN
;

505 
	}
}

511 
__ölöe
 
	$AT91F_SSC_DißbÀRx
 (

512 
AT91PS_SSC
 
pSSC
)

515 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXDIS
;

516 
	}
}

522 
__ölöe
 
	$AT91F_SSC_E«bÀTx
 (

523 
AT91PS_SSC
 
pSSC
)

526 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXEN
;

527 
	}
}

533 
__ölöe
 
	$AT91F_SSC_DißbÀTx
 (

534 
AT91PS_SSC
 
pSSC
)

537 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXDIS
;

538 
	}
}

544 
__ölöe
 
	$AT91F_SSC_E«bÀIt
 (

545 
AT91PS_SSC
 
pSSC
,

546 
Êag
)

549 
pSSC
->
SSC_IER
 = 
Êag
;

550 
	}
}

556 
__ölöe
 
	$AT91F_SSC_DißbÀIt
 (

557 
AT91PS_SSC
 
pSSC
,

558 
Êag
)

561 
pSSC
->
SSC_IDR
 = 
Êag
;

562 
	}
}

568 
__ölöe
 
	$AT91F_SSC_Re˚iveFøme
 (

569 
AT91PS_SSC
 
pSSC
,

570 *
pBuf„r
,

571 
szBuf„r
,

572 *
pNextBuf„r
,

573 
szNextBuf„r
 )

575  
	`AT91F_PDC_Re˚iveFøme
(

576 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

577 
pBuf„r
,

578 
szBuf„r
,

579 
pNextBuf„r
,

580 
szNextBuf„r
);

581 
	}
}

587 
__ölöe
 
	$AT91F_SSC_SídFøme
(

588 
AT91PS_SSC
 
pSSC
,

589 *
pBuf„r
,

590 
szBuf„r
,

591 *
pNextBuf„r
,

592 
szNextBuf„r
 )

594  
	`AT91F_PDC_SídFøme
(

595 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

596 
pBuf„r
,

597 
szBuf„r
,

598 
pNextBuf„r
,

599 
szNextBuf„r
);

600 
	}
}

606 
__ölöe
 
	$AT91F_SSC_GëI¡îru±MaskSètus
(

607 
AT91PS_SSC
 
pSsc
)

609  
pSsc
->
SSC_IMR
;

610 
	}
}

616 
__ölöe
 
	$AT91F_SSC_IsI¡îru±Masked
(

617 
AT91PS_SSC
 
pSsc
,

618 
Êag
)

620  (
	`AT91F_SSC_GëI¡îru±MaskSètus
(
pSsc
Ë& 
Êag
);

621 
	}
}

630 
__ölöe
 
	$AT91F_SPI_O≥n
 (

631 c⁄° 
nuŒ
)

635 
	}
}

641 
__ölöe
 
	$AT91F_SPI_CfgCs
 (

642 
AT91PS_SPI
 
pSPI
,

643 
cs
,

644 
vÆ
)

647 *(
pSPI
->
SPI_CSR
 + 
cs
Ë
vÆ
;

648 
	}
}

654 
__ölöe
 
	$AT91F_SPI_E«bÀIt
 (

655 
AT91PS_SPI
 
pSPI
,

656 
Êag
)

659 
pSPI
->
SPI_IER
 = 
Êag
;

660 
	}
}

666 
__ölöe
 
	$AT91F_SPI_DißbÀIt
 (

667 
AT91PS_SPI
 
pSPI
,

668 
Êag
)

671 
pSPI
->
SPI_IDR
 = 
Êag
;

672 
	}
}

678 
__ölöe
 
	$AT91F_SPI_Re£t
 (

679 
AT91PS_SPI
 
pSPI


683 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SWRST
;

684 
	}
}

690 
__ölöe
 
	$AT91F_SPI_E«bÀ
 (

691 
AT91PS_SPI
 
pSPI


695 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIEN
;

696 
	}
}

702 
__ölöe
 
	$AT91F_SPI_DißbÀ
 (

703 
AT91PS_SPI
 
pSPI


707 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

708 
	}
}

714 
__ölöe
 
	$AT91F_SPI_CfgMode
 (

715 
AT91PS_SPI
 
pSPI
,

716 
mode
)

719 
pSPI
->
SPI_MR
 = 
mode
;

720 
	}
}

726 
__ölöe
 
	$AT91F_SPI_CfgPCS
 (

727 
AT91PS_SPI
 
pSPI
,

728 
PCS_Devi˚
)

731 
pSPI
->
SPI_MR
 &= 0xFFF0FFFF;

732 
pSPI
->
SPI_MR
 |–(
PCS_Devi˚
<<16Ë& 
AT91C_SPI_PCS
 );

733 
	}
}

739 
__ölöe
 
	$AT91F_SPI_Re˚iveFøme
 (

740 
AT91PS_SPI
 
pSPI
,

741 *
pBuf„r
,

742 
szBuf„r
,

743 *
pNextBuf„r
,

744 
szNextBuf„r
 )

746  
	`AT91F_PDC_Re˚iveFøme
(

747 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

748 
pBuf„r
,

749 
szBuf„r
,

750 
pNextBuf„r
,

751 
szNextBuf„r
);

752 
	}
}

758 
__ölöe
 
	$AT91F_SPI_SídFøme
(

759 
AT91PS_SPI
 
pSPI
,

760 *
pBuf„r
,

761 
szBuf„r
,

762 *
pNextBuf„r
,

763 
szNextBuf„r
 )

765  
	`AT91F_PDC_SídFøme
(

766 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

767 
pBuf„r
,

768 
szBuf„r
,

769 
pNextBuf„r
,

770 
szNextBuf„r
);

771 
	}
}

777 
__ölöe
 
	$AT91F_SPI_Clo£
 (

778 
AT91PS_SPI
 
pSPI
)

781 
pSPI
->
SPI_CSR
[0] = 0 ;

782 
pSPI
->
SPI_CSR
[1] = 0 ;

783 
pSPI
->
SPI_CSR
[2] = 0 ;

784 
pSPI
->
SPI_CSR
[3] = 0 ;

787 
pSPI
->
SPI_MR
 = 0 ;

790 
pSPI
->
SPI_IDR
 = 0xFFFFFFFF ;

793 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
));

796 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

797 
	}
}

803 
__ölöe
 
	$AT91F_SPI_PutCh¨
 (

804 
AT91PS_SPI
 
pSPI
,

805 
ch¨a˘î
,

806 
cs_numbî
 )

808 
vÆue_f‹_cs
;

809 
vÆue_f‹_cs
 = (~(1 << 
cs_numbî
)) & 0xF;

810 
pSPI
->
SPI_TDR
 = (
ch¨a˘î
 & 0xFFFFË| (
vÆue_f‹_cs
 << 16);

811 
	}
}

817 
__ölöe
 
	$AT91F_SPI_GëCh¨
 (

818 c⁄° 
AT91PS_SPI
 
pSPI
)

820 ((
pSPI
->
SPI_RDR
) & 0xFFFF);

821 
	}
}

827 
__ölöe
 
	$AT91F_SPI_GëI¡îru±MaskSètus
(

828 
AT91PS_SPI
 
pSpi
)

830  
pSpi
->
SPI_IMR
;

831 
	}
}

837 
__ölöe
 
	$AT91F_SPI_IsI¡îru±Masked
(

838 
AT91PS_SPI
 
pSpi
,

839 
Êag
)

841  (
	`AT91F_SPI_GëI¡îru±MaskSètus
(
pSpi
Ë& 
Êag
);

842 
	}
}

851 
__ölöe
 
	$AT91F_PWMC_GëSètus
(

852 
AT91PS_PWMC
 
pPWM
)

854  
pPWM
->
PWMC_SR
;

855 
	}
}

861 
__ölöe
 
	$AT91F_PWMC_I¡îru±E«bÀ
(

862 
AT91PS_PWMC
 
pPwm
,

863 
Êag
)

865 
pPwm
->
PWMC_IER
 = 
Êag
;

866 
	}
}

872 
__ölöe
 
	$AT91F_PWMC_I¡îru±DißbÀ
(

873 
AT91PS_PWMC
 
pPwm
,

874 
Êag
)

876 
pPwm
->
PWMC_IDR
 = 
Êag
;

877 
	}
}

883 
__ölöe
 
	$AT91F_PWMC_GëI¡îru±MaskSètus
(

884 
AT91PS_PWMC
 
pPwm
)

886  
pPwm
->
PWMC_IMR
;

887 
	}
}

893 
__ölöe
 
	$AT91F_PWMC_IsI¡îru±Masked
(

894 
AT91PS_PWMC
 
pPWM
,

895 
Êag
)

897  (
	`AT91F_PWMC_GëI¡îru±MaskSètus
(
pPWM
Ë& 
Êag
);

898 
	}
}

904 
__ölöe
 
	$AT91F_PWMC_IsSètusSë
(

905 
AT91PS_PWMC
 
pPWM
,

906 
Êag
)

908  (
	`AT91F_PWMC_GëSètus
(
pPWM
Ë& 
Êag
);

909 
	}
}

915 
__ölöe
 
	$AT91F_PWMC_CfgCh™√l
(

916 
AT91PS_PWMC
 
pPWM
,

917 
ch™√lId
,

918 
mode
,

919 
≥riod
,

920 
duty
)

922 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CMR
 = 
mode
;

923 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CDTYR
 = 
duty
;

924 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CPRDR
 = 
≥riod
;

925 
	}
}

931 
__ölöe
 
	$AT91F_PWMC_SèπCh™√l
(

932 
AT91PS_PWMC
 
pPWM
,

933 
Êag
)

935 
pPWM
->
PWMC_ENA
 = 
Êag
;

936 
	}
}

942 
__ölöe
 
	$AT91F_PWMC_St›Ch™√l
(

943 
AT91PS_PWMC
 
pPWM
,

944 
Êag
)

946 
pPWM
->
PWMC_DIS
 = 
Êag
;

947 
	}
}

953 
__ölöe
 
	$AT91F_PWMC_Upd©eCh™√l
(

954 
AT91PS_PWMC
 
pPWM
,

955 
ch™√lId
,

956 
upd©e
)

958 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CUPDR
 = 
upd©e
;

959 
	}
}

968 
__ölöe
 
	$AT91F_TC_I¡îru±E«bÀ
(

969 
AT91PS_TC
 
pTc
,

970 
Êag
)

972 
pTc
->
TC_IER
 = 
Êag
;

973 
	}
}

979 
__ölöe
 
	$AT91F_TC_I¡îru±DißbÀ
(

980 
AT91PS_TC
 
pTc
,

981 
Êag
)

983 
pTc
->
TC_IDR
 = 
Êag
;

984 
	}
}

990 
__ölöe
 
	$AT91F_TC_GëI¡îru±MaskSètus
(

991 
AT91PS_TC
 
pTc
)

993  
pTc
->
TC_IMR
;

994 
	}
}

1000 
__ölöe
 
	$AT91F_TC_IsI¡îru±Masked
(

1001 
AT91PS_TC
 
pTc
,

1002 
Êag
)

1004  (
	`AT91F_TC_GëI¡îru±MaskSètus
(
pTc
Ë& 
Êag
);

1005 
	}
}

1014 
__ölöe
 
	$AT91F_PMC_CfgSysClkE«bÀReg
 (

1015 
AT91PS_PMC
 
pPMC
,

1016 
mode
)

1019 
pPMC
->
PMC_SCER
 = 
mode
;

1020 
	}
}

1026 
__ölöe
 
	$AT91F_PMC_CfgSysClkDißbÀReg
 (

1027 
AT91PS_PMC
 
pPMC
,

1028 
mode
)

1031 
pPMC
->
PMC_SCDR
 = 
mode
;

1032 
	}
}

1038 
__ölöe
 
	$AT91F_PMC_GëSysClkSètusReg
 (

1039 
AT91PS_PMC
 
pPMC


1042  
pPMC
->
PMC_SCSR
;

1043 
	}
}

1049 
__ölöe
 
	$AT91F_PMC_E«bÀPîùhClock
 (

1050 
AT91PS_PMC
 
pPMC
,

1051 
≥rùhIds
)

1053 
pPMC
->
PMC_PCER
 = 
≥rùhIds
;

1054 
	}
}

1060 
__ölöe
 
	$AT91F_PMC_DißbÀPîùhClock
 (

1061 
AT91PS_PMC
 
pPMC
,

1062 
≥rùhIds
)

1064 
pPMC
->
PMC_PCDR
 = 
≥rùhIds
;

1065 
	}
}

1071 
__ölöe
 
	$AT91F_PMC_GëPîùhClock
 (

1072 
AT91PS_PMC
 
pPMC
)

1074  
pPMC
->
PMC_PCSR
;

1075 
	}
}

1081 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscûœt‹Reg
 (

1082 
AT91PS_CKGR
 
pCKGR
,

1083 
mode
)

1085 
pCKGR
->
CKGR_MOR
 = 
mode
;

1086 
	}
}

1092 
__ölöe
 
	$AT91F_CKGR_GëMaöOscûœt‹Reg
 (

1093 
AT91PS_CKGR
 
pCKGR
)

1095  
pCKGR
->
CKGR_MOR
;

1096 
	}
}

1102 
__ölöe
 
	$AT91F_CKGR_E«bÀMaöOscûœt‹
(

1103 
AT91PS_CKGR
 
pCKGR
)

1105 
pCKGR
->
CKGR_MOR
 |
AT91C_CKGR_MOSCEN
;

1106 
	}
}

1112 
__ölöe
 
	$AT91F_CKGR_DißbÀMaöOscûœt‹
 (

1113 
AT91PS_CKGR
 
pCKGR
)

1115 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_MOSCEN
;

1116 
	}
}

1122 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscSèπUpTime
 (

1123 
AT91PS_CKGR
 
pCKGR
,

1124 
°¨tup_time
,

1125 
¶owClock
)

1127 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_OSCOUNT
;

1128 
pCKGR
->
CKGR_MOR
 |((
¶owClock
 * 
°¨tup_time
)/(8*1000000)) << 8;

1129 
	}
}

1135 
__ölöe
 
	$AT91F_CKGR_GëMaöClockFªqReg
 (

1136 
AT91PS_CKGR
 
pCKGR
)

1138  
pCKGR
->
CKGR_MCFR
;

1139 
	}
}

1145 
__ölöe
 
	$AT91F_CKGR_GëMaöClock
 (

1146 
AT91PS_CKGR
 
pCKGR
,

1147 
¶owClock
)

1149  ((
pCKGR
->
CKGR_MCFR
 & 
AT91C_CKGR_MAINF
Ë* 
¶owClock
) >> 4;

1150 
	}
}

1156 
__ölöe
 
	$AT91F_PMC_CfgMCKReg
 (

1157 
AT91PS_PMC
 
pPMC
,

1158 
mode
)

1160 
pPMC
->
PMC_MCKR
 = 
mode
;

1161 
	}
}

1167 
__ölöe
 
	$AT91F_PMC_GëMCKReg
(

1168 
AT91PS_PMC
 
pPMC
)

1170  
pPMC
->
PMC_MCKR
;

1171 
	}
}

1177 
__ölöe
 
	$AT91F_PMC_GëMa°îClock
 (

1178 
AT91PS_PMC
 
pPMC
,

1179 
AT91PS_CKGR
 
pCKGR
,

1180 
¶owClock
)

1182 
ªg
 = 
pPMC
->
PMC_MCKR
;

1183 
¥esˇÀr
 = (1 << ((
ªg
 & 
AT91C_PMC_PRES
) >> 2));

1184 
∂lDividî
, 
∂lMu…ùlõr
;

1186 
ªg
 & 
AT91C_PMC_CSS
) {

1187 
AT91C_PMC_CSS_SLOW_CLK
:

1188  
¶owClock
 / 
¥esˇÀr
;

1189 
AT91C_PMC_CSS_MAIN_CLK
:

1190  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
¥esˇÀr
;

1191 
AT91C_PMC_CSS_PLL_CLK
:

1192 
ªg
 = 
pCKGR
->
CKGR_PLLR
;

1193 
∂lDividî
 = (
ªg
 & 
AT91C_CKGR_DIV
);

1194 
∂lMu…ùlõr
 = ((
ªg
 & 
AT91C_CKGR_MUL
) >> 16) + 1;

1195  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
∂lDividî
 * 
∂lMu…ùlõr
 / 
¥esˇÀr
;

1198 
	}
}

1204 
__ölöe
 
	$AT91F_PMC_E«bÀPCK
 (

1205 
AT91PS_PMC
 
pPMC
,

1206 
pck
,

1207 
mode
)

1209 
pPMC
->
PMC_PCKR
[
pck
] = 
mode
;

1210 
pPMC
->
PMC_SCER
 = (1 << 
pck
) << 8;

1211 
	}
}

1217 
__ölöe
 
	$AT91F_PMC_DißbÀPCK
 (

1218 
AT91PS_PMC
 
pPMC
,

1219 
pck
)

1221 
pPMC
->
PMC_SCDR
 = (1 << 
pck
) << 8;

1222 
	}
}

1228 
__ölöe
 
	$AT91F_PMC_E«bÀIt
 (

1229 
AT91PS_PMC
 
pPMC
,

1230 
Êag
)

1233 
pPMC
->
PMC_IER
 = 
Êag
;

1234 
	}
}

1240 
__ölöe
 
	$AT91F_PMC_DißbÀIt
 (

1241 
AT91PS_PMC
 
pPMC
,

1242 
Êag
)

1245 
pPMC
->
PMC_IDR
 = 
Êag
;

1246 
	}
}

1252 
__ölöe
 
	$AT91F_PMC_GëSètus
(

1253 
AT91PS_PMC
 
pPMC
)

1255  
pPMC
->
PMC_SR
;

1256 
	}
}

1262 
__ölöe
 
	$AT91F_PMC_GëI¡îru±MaskSètus
(

1263 
AT91PS_PMC
 
pPMC
)

1265  
pPMC
->
PMC_IMR
;

1266 
	}
}

1272 
__ölöe
 
	$AT91F_PMC_IsI¡îru±Masked
(

1273 
AT91PS_PMC
 
pPMC
,

1274 
Êag
)

1276  (
	`AT91F_PMC_GëI¡îru±MaskSètus
(
pPMC
Ë& 
Êag
);

1277 
	}
}

1283 
__ölöe
 
	$AT91F_PMC_IsSètusSë
(

1284 
AT91PS_PMC
 
pPMC
,

1285 
Êag
)

1287  (
	`AT91F_PMC_GëSètus
(
pPMC
Ë& 
Êag
);

1288 
	}
}

1295 
__ölöe
 
	$AT91F_ADC_E«bÀIt
 (

1296 
AT91PS_ADC
 
pADC
,

1297 
Êag
)

1300 
pADC
->
ADC_IER
 = 
Êag
;

1301 
	}
}

1307 
__ölöe
 
	$AT91F_ADC_DißbÀIt
 (

1308 
AT91PS_ADC
 
pADC
,

1309 
Êag
)

1312 
pADC
->
ADC_IDR
 = 
Êag
;

1313 
	}
}

1319 
__ölöe
 
	$AT91F_ADC_GëSètus
(

1320 
AT91PS_ADC
 
pADC
)

1322  
pADC
->
ADC_SR
;

1323 
	}
}

1329 
__ölöe
 
	$AT91F_ADC_GëI¡îru±MaskSètus
(

1330 
AT91PS_ADC
 
pADC
)

1332  
pADC
->
ADC_IMR
;

1333 
	}
}

1339 
__ölöe
 
	$AT91F_ADC_IsI¡îru±Masked
(

1340 
AT91PS_ADC
 
pADC
,

1341 
Êag
)

1343  (
	`AT91F_ADC_GëI¡îru±MaskSètus
(
pADC
Ë& 
Êag
);

1344 
	}
}

1350 
__ölöe
 
	$AT91F_ADC_IsSètusSë
(

1351 
AT91PS_ADC
 
pADC
,

1352 
Êag
)

1354  (
	`AT91F_ADC_GëSètus
(
pADC
Ë& 
Êag
);

1355 
	}
}

1361 
__ölöe
 
	$AT91F_ADC_CfgModeReg
 (

1362 
AT91PS_ADC
 
pADC
,

1363 
mode
)

1366 
pADC
->
ADC_MR
 = 
mode
;

1367 
	}
}

1373 
__ölöe
 
	$AT91F_ADC_GëModeReg
 (

1374 
AT91PS_ADC
 
pADC


1377  
pADC
->
ADC_MR
;

1378 
	}
}

1384 
__ölöe
 
	$AT91F_ADC_CfgTimögs
 (

1385 
AT91PS_ADC
 
pADC
,

1386 
mck_˛ock
,

1387 
adc_˛ock
,

1388 
°¨tup_time
,

1389 
ßm∂e_™d_hﬁd_time
)

1391 
¥esˇl
,
°¨tup
,
shtim
;

1393 
¥esˇl
 = 
mck_˛ock
/(2*
adc_˛ock
) - 1;

1394 
°¨tup
 = 
adc_˛ock
*
°¨tup_time
/8 - 1;

1395 
shtim
 = 
adc_˛ock
*
ßm∂e_™d_hﬁd_time
/1000 - 1;

1398 
pADC
->
ADC_MR
 = ( (
¥esˇl
<<8Ë& 
AT91C_ADC_PRESCAL
Ë| ( (
°¨tup
<<16Ë& 
AT91C_ADC_STARTUP
Ë| ( (
shtim
<<24Ë& 
AT91C_ADC_SHTIM
);

1399 
	}
}

1405 
__ölöe
 
	$AT91F_ADC_E«bÀCh™√l
 (

1406 
AT91PS_ADC
 
pADC
,

1407 
ch™√l
)

1410 
pADC
->
ADC_CHER
 = 
ch™√l
;

1411 
	}
}

1417 
__ölöe
 
	$AT91F_ADC_DißbÀCh™√l
 (

1418 
AT91PS_ADC
 
pADC
,

1419 
ch™√l
)

1422 
pADC
->
ADC_CHDR
 = 
ch™√l
;

1423 
	}
}

1429 
__ölöe
 
	$AT91F_ADC_GëCh™√lSètus
 (

1430 
AT91PS_ADC
 
pADC


1433  
pADC
->
ADC_CHSR
;

1434 
	}
}

1440 
__ölöe
 
	$AT91F_ADC_SèπC⁄vîsi⁄
 (

1441 
AT91PS_ADC
 
pADC


1444 
pADC
->
ADC_CR
 = 
AT91C_ADC_START
;

1445 
	}
}

1451 
__ölöe
 
	$AT91F_ADC_So·Re£t
 (

1452 
AT91PS_ADC
 
pADC


1455 
pADC
->
ADC_CR
 = 
AT91C_ADC_SWRST
;

1456 
	}
}

1462 
__ölöe
 
	$AT91F_ADC_GëLa°C⁄vîãdD©a
 (

1463 
AT91PS_ADC
 
pADC


1466  
pADC
->
ADC_LCDR
;

1467 
	}
}

1473 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH0
 (

1474 
AT91PS_ADC
 
pADC


1477  
pADC
->
ADC_CDR0
;

1478 
	}
}

1484 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH1
 (

1485 
AT91PS_ADC
 
pADC


1488  
pADC
->
ADC_CDR1
;

1489 
	}
}

1495 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH2
 (

1496 
AT91PS_ADC
 
pADC


1499  
pADC
->
ADC_CDR2
;

1500 
	}
}

1506 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH3
 (

1507 
AT91PS_ADC
 
pADC


1510  
pADC
->
ADC_CDR3
;

1511 
	}
}

1517 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH4
 (

1518 
AT91PS_ADC
 
pADC


1521  
pADC
->
ADC_CDR4
;

1522 
	}
}

1528 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH5
 (

1529 
AT91PS_ADC
 
pADC


1532  
pADC
->
ADC_CDR5
;

1533 
	}
}

1539 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH6
 (

1540 
AT91PS_ADC
 
pADC


1543  
pADC
->
ADC_CDR6
;

1544 
	}
}

1550 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH7
 (

1551 
AT91PS_ADC
 
pADC


1554  
pADC
->
ADC_CDR7
;

1555 
	}
}

1564 
__ölöe
 
	$AT91F_PIO_CfgPîùh
(

1565 
AT91PS_PIO
 
pPio
,

1566 
≥rùhAE«bÀ
,

1567 
≥rùhBE«bÀ
)

1570 
pPio
->
PIO_ASR
 = 
≥rùhAE«bÀ
;

1571 
pPio
->
PIO_BSR
 = 
≥rùhBE«bÀ
;

1572 
pPio
->
PIO_PDR
 = (
≥rùhAE«bÀ
 | 
≥rùhBE«bÀ
);

1573 
	}
}

1579 
__ölöe
 
	$AT91F_PIO_CfgOuçut
(

1580 
AT91PS_PIO
 
pPio
,

1581 
pioE«bÀ
)

1583 
pPio
->
PIO_PER
 = 
pioE«bÀ
;

1584 
pPio
->
PIO_OER
 = 
pioE«bÀ
;

1585 
	}
}

1591 
__ölöe
 
	$AT91F_PIO_CfgI≈ut
(

1592 
AT91PS_PIO
 
pPio
,

1593 
öputE«bÀ
)

1596 
pPio
->
PIO_ODR
 = 
öputE«bÀ
;

1597 
pPio
->
PIO_PER
 = 
öputE«bÀ
;

1598 
	}
}

1604 
__ölöe
 
	$AT91F_PIO_CfgO≥ndøö
(

1605 
AT91PS_PIO
 
pPio
,

1606 
mu…iDrvE«bÀ
)

1609 
pPio
->
PIO_MDDR
 = ~
mu…iDrvE«bÀ
;

1610 
pPio
->
PIO_MDER
 = 
mu…iDrvE«bÀ
;

1611 
	}
}

1617 
__ölöe
 
	$AT91F_PIO_CfgPuŒup
(

1618 
AT91PS_PIO
 
pPio
,

1619 
puŒupE«bÀ
)

1622 
pPio
->
PIO_PPUDR
 = ~
puŒupE«bÀ
;

1623 
pPio
->
PIO_PPUER
 = 
puŒupE«bÀ
;

1624 
	}
}

1630 
__ölöe
 
	$AT91F_PIO_CfgDúe˘Drive
(

1631 
AT91PS_PIO
 
pPio
,

1632 
dúe˘Drive
)

1636 
pPio
->
PIO_OWDR
 = ~
dúe˘Drive
;

1637 
pPio
->
PIO_OWER
 = 
dúe˘Drive
;

1638 
	}
}

1644 
__ölöe
 
	$AT91F_PIO_CfgI≈utFûãr
(

1645 
AT91PS_PIO
 
pPio
,

1646 
öputFûãr
)

1650 
pPio
->
PIO_IFDR
 = ~
öputFûãr
;

1651 
pPio
->
PIO_IFER
 = 
öputFûãr
;

1652 
	}
}

1658 
__ölöe
 
	$AT91F_PIO_GëI≈ut
(

1659 
AT91PS_PIO
 
pPio
)

1661  
pPio
->
PIO_PDSR
;

1662 
	}
}

1668 
__ölöe
 
	$AT91F_PIO_IsI≈utSë
(

1669 
AT91PS_PIO
 
pPio
,

1670 
Êag
)

1672  (
	`AT91F_PIO_GëI≈ut
(
pPio
Ë& 
Êag
);

1673 
	}
}

1680 
__ölöe
 
	$AT91F_PIO_SëOuçut
(

1681 
AT91PS_PIO
 
pPio
,

1682 
Êag
)

1684 
pPio
->
PIO_SODR
 = 
Êag
;

1685 
	}
}

1691 
__ölöe
 
	$AT91F_PIO_CÀ¨Ouçut
(

1692 
AT91PS_PIO
 
pPio
,

1693 
Êag
)

1695 
pPio
->
PIO_CODR
 = 
Êag
;

1696 
	}
}

1702 
__ölöe
 
	$AT91F_PIO_F‹˚Ouçut
(

1703 
AT91PS_PIO
 
pPio
,

1704 
Êag
)

1706 
pPio
->
PIO_ODSR
 = 
Êag
;

1707 
	}
}

1713 
__ölöe
 
	$AT91F_PIO_E«bÀ
(

1714 
AT91PS_PIO
 
pPio
,

1715 
Êag
)

1717 
pPio
->
PIO_PER
 = 
Êag
;

1718 
	}
}

1724 
__ölöe
 
	$AT91F_PIO_DißbÀ
(

1725 
AT91PS_PIO
 
pPio
,

1726 
Êag
)

1728 
pPio
->
PIO_PDR
 = 
Êag
;

1729 
	}
}

1735 
__ölöe
 
	$AT91F_PIO_GëSètus
(

1736 
AT91PS_PIO
 
pPio
)

1738  
pPio
->
PIO_PSR
;

1739 
	}
}

1745 
__ölöe
 
	$AT91F_PIO_IsSë
(

1746 
AT91PS_PIO
 
pPio
,

1747 
Êag
)

1749  (
	`AT91F_PIO_GëSètus
(
pPio
Ë& 
Êag
);

1750 
	}
}

1756 
__ölöe
 
	$AT91F_PIO_OuçutE«bÀ
(

1757 
AT91PS_PIO
 
pPio
,

1758 
Êag
)

1760 
pPio
->
PIO_OER
 = 
Êag
;

1761 
	}
}

1767 
__ölöe
 
	$AT91F_PIO_OuçutDißbÀ
(

1768 
AT91PS_PIO
 
pPio
,

1769 
Êag
)

1771 
pPio
->
PIO_ODR
 = 
Êag
;

1772 
	}
}

1778 
__ölöe
 
	$AT91F_PIO_GëOuçutSètus
(

1779 
AT91PS_PIO
 
pPio
)

1781  
pPio
->
PIO_OSR
;

1782 
	}
}

1788 
__ölöe
 
	$AT91F_PIO_IsOuçutSë
(

1789 
AT91PS_PIO
 
pPio
,

1790 
Êag
)

1792  (
	`AT91F_PIO_GëOuçutSètus
(
pPio
Ë& 
Êag
);

1793 
	}
}

1799 
__ölöe
 
	$AT91F_PIO_I≈utFûãrE«bÀ
(

1800 
AT91PS_PIO
 
pPio
,

1801 
Êag
)

1803 
pPio
->
PIO_IFER
 = 
Êag
;

1804 
	}
}

1810 
__ölöe
 
	$AT91F_PIO_I≈utFûãrDißbÀ
(

1811 
AT91PS_PIO
 
pPio
,

1812 
Êag
)

1814 
pPio
->
PIO_IFDR
 = 
Êag
;

1815 
	}
}

1821 
__ölöe
 
	$AT91F_PIO_GëI≈utFûãrSètus
(

1822 
AT91PS_PIO
 
pPio
)

1824  
pPio
->
PIO_IFSR
;

1825 
	}
}

1831 
__ölöe
 
	$AT91F_PIO_IsI≈utFûãrSë
(

1832 
AT91PS_PIO
 
pPio
,

1833 
Êag
)

1835  (
	`AT91F_PIO_GëI≈utFûãrSètus
(
pPio
Ë& 
Êag
);

1836 
	}
}

1842 
__ölöe
 
	$AT91F_PIO_GëOuçutD©aSètus
(

1843 
AT91PS_PIO
 
pPio
)

1845  
pPio
->
PIO_ODSR
;

1846 
	}
}

1852 
__ölöe
 
	$AT91F_PIO_I¡îru±E«bÀ
(

1853 
AT91PS_PIO
 
pPio
,

1854 
Êag
)

1856 
pPio
->
PIO_IER
 = 
Êag
;

1857 
	}
}

1863 
__ölöe
 
	$AT91F_PIO_I¡îru±DißbÀ
(

1864 
AT91PS_PIO
 
pPio
,

1865 
Êag
)

1867 
pPio
->
PIO_IDR
 = 
Êag
;

1868 
	}
}

1874 
__ölöe
 
	$AT91F_PIO_GëI¡îru±MaskSètus
(

1875 
AT91PS_PIO
 
pPio
)

1877  
pPio
->
PIO_IMR
;

1878 
	}
}

1884 
__ölöe
 
	$AT91F_PIO_GëI¡îru±Sètus
(

1885 
AT91PS_PIO
 
pPio
)

1887  
pPio
->
PIO_ISR
;

1888 
	}
}

1894 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Masked
(

1895 
AT91PS_PIO
 
pPio
,

1896 
Êag
)

1898  (
	`AT91F_PIO_GëI¡îru±MaskSètus
(
pPio
Ë& 
Êag
);

1899 
	}
}

1905 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Së
(

1906 
AT91PS_PIO
 
pPio
,

1907 
Êag
)

1909  (
	`AT91F_PIO_GëI¡îru±Sètus
(
pPio
Ë& 
Êag
);

1910 
	}
}

1916 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîE«bÀ
(

1917 
AT91PS_PIO
 
pPio
,

1918 
Êag
)

1920 
pPio
->
PIO_MDER
 = 
Êag
;

1921 
	}
}

1927 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîDißbÀ
(

1928 
AT91PS_PIO
 
pPio
,

1929 
Êag
)

1931 
pPio
->
PIO_MDDR
 = 
Êag
;

1932 
	}
}

1938 
__ölöe
 
	$AT91F_PIO_GëMu…iDrivîSètus
(

1939 
AT91PS_PIO
 
pPio
)

1941  
pPio
->
PIO_MDSR
;

1942 
	}
}

1948 
__ölöe
 
	$AT91F_PIO_IsMu…iDrivîSë
(

1949 
AT91PS_PIO
 
pPio
,

1950 
Êag
)

1952  (
	`AT91F_PIO_GëMu…iDrivîSètus
(
pPio
Ë& 
Êag
);

1953 
	}
}

1959 
__ölöe
 
	$AT91F_PIO_A_Regi°îSñe˘i⁄
(

1960 
AT91PS_PIO
 
pPio
,

1961 
Êag
)

1963 
pPio
->
PIO_ASR
 = 
Êag
;

1964 
	}
}

1970 
__ölöe
 
	$AT91F_PIO_B_Regi°îSñe˘i⁄
(

1971 
AT91PS_PIO
 
pPio
,

1972 
Êag
)

1974 
pPio
->
PIO_BSR
 = 
Êag
;

1975 
	}
}

1981 
__ölöe
 
	$AT91F_PIO_Gë_AB_Regi°îSètus
(

1982 
AT91PS_PIO
 
pPio
)

1984  
pPio
->
PIO_ABSR
;

1985 
	}
}

1991 
__ölöe
 
	$AT91F_PIO_IsAB_Regi°îSë
(

1992 
AT91PS_PIO
 
pPio
,

1993 
Êag
)

1995  (
	`AT91F_PIO_Gë_AB_Regi°îSètus
(
pPio
Ë& 
Êag
);

1996 
	}
}

2002 
__ölöe
 
	$AT91F_PIO_OuçutWrôeE«bÀ
(

2003 
AT91PS_PIO
 
pPio
,

2004 
Êag
)

2006 
pPio
->
PIO_OWER
 = 
Êag
;

2007 
	}
}

2013 
__ölöe
 
	$AT91F_PIO_OuçutWrôeDißbÀ
(

2014 
AT91PS_PIO
 
pPio
,

2015 
Êag
)

2017 
pPio
->
PIO_OWDR
 = 
Êag
;

2018 
	}
}

2024 
__ölöe
 
	$AT91F_PIO_GëOuçutWrôeSètus
(

2025 
AT91PS_PIO
 
pPio
)

2027  
pPio
->
PIO_OWSR
;

2028 
	}
}

2034 
__ölöe
 
	$AT91F_PIO_IsOuçutWrôeSë
(

2035 
AT91PS_PIO
 
pPio
,

2036 
Êag
)

2038  (
	`AT91F_PIO_GëOuçutWrôeSètus
(
pPio
Ë& 
Êag
);

2039 
	}
}

2045 
__ölöe
 
	$AT91F_PIO_GëCfgPuŒup
(

2046 
AT91PS_PIO
 
pPio
)

2048  
pPio
->
PIO_PPUSR
;

2049 
	}
}

2055 
__ölöe
 
	$AT91F_PIO_IsOuçutD©aSètusSë
(

2056 
AT91PS_PIO
 
pPio
,

2057 
Êag
)

2059  (
	`AT91F_PIO_GëOuçutD©aSètus
(
pPio
Ë& 
Êag
);

2060 
	}
}

2066 
__ölöe
 
	$AT91F_PIO_IsCfgPuŒupSètusSë
(

2067 
AT91PS_PIO
 
pPio
,

2068 
Êag
)

2070  (~
	`AT91F_PIO_GëCfgPuŒup
(
pPio
Ë& 
Êag
);

2071 
	}
}

2080 
__ölöe
 
	$AT91F_TWI_E«bÀIt
 (

2081 
AT91PS_TWI
 
pTWI
,

2082 
Êag
)

2085 
pTWI
->
TWI_IER
 = 
Êag
;

2086 
	}
}

2092 
__ölöe
 
	$AT91F_TWI_DißbÀIt
 (

2093 
AT91PS_TWI
 
pTWI
,

2094 
Êag
)

2097 
pTWI
->
TWI_IDR
 = 
Êag
;

2098 
	}
}

2104 
__ölöe
 
	$AT91F_TWI_C⁄figuª
 ( 
AT91PS_TWI
 
pTWI
 )

2107 
pTWI
->
TWI_IDR
 = () -1;

2110 
pTWI
->
TWI_CR
 = 
AT91C_TWI_SWRST
;

2113 
pTWI
->
TWI_CR
 = 
AT91C_TWI_MSEN
 | 
AT91C_TWI_SVDIS
;

2115 
	}
}

2121 
__ölöe
 
	$AT91F_TWI_GëI¡îru±MaskSètus
(

2122 
AT91PS_TWI
 
pTwi
)

2124  
pTwi
->
TWI_IMR
;

2125 
	}
}

2131 
__ölöe
 
	$AT91F_TWI_IsI¡îru±Masked
(

2132 
AT91PS_TWI
 
pTwi
,

2133 
Êag
)

2135  (
	`AT91F_TWI_GëI¡îru±MaskSètus
(
pTwi
Ë& 
Êag
);

2136 
	}
}

2145 
	#AT91C_US_ASYNC_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

	)

2146 
	gAT91C_US_NBSTOP_1_BIT
 + \

2147 
	gAT91C_US_PAR_NONE
 + \

2148 
	gAT91C_US_CHRL_8_BITS
 + \

2149 
	gAT91C_US_CLKS_CLOCK
 )

2152 
	#AT91C_US_ASYNC_SCK_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

	)

2153 
	gAT91C_US_NBSTOP_1_BIT
 + \

2154 
	gAT91C_US_PAR_NONE
 + \

2155 
	gAT91C_US_CHRL_8_BITS
 + \

2156 
	gAT91C_US_CLKS_EXT
 )

2159 
	#AT91C_US_SYNC_MODE
 ( 
AT91C_US_SYNC
 + \

	)

2160 
	gAT91C_US_USMODE_NORMAL
 + \

2161 
	gAT91C_US_NBSTOP_1_BIT
 + \

2162 
	gAT91C_US_PAR_NONE
 + \

2163 
	gAT91C_US_CHRL_8_BITS
 + \

2164 
	gAT91C_US_CLKS_CLOCK
 )

2167 
	#AT91C_US_SCK_USED
 (
AT91C_US_CKLO
 | 
AT91C_US_CLKS_EXT
)

	)

2170 
	#AT91C_US_ISO_READER_MODE
 ( 
AT91C_US_USMODE_ISO7816_0
 + \

	)

2171 
	gAT91C_US_CLKS_CLOCK
 +\

2172 
	gAT91C_US_NBSTOP_1_BIT
 + \

2173 
	gAT91C_US_PAR_EVEN
 + \

2174 
	gAT91C_US_CHRL_8_BITS
 + \

2175 
	gAT91C_US_CKLO
 +\

2176 
	gAT91C_US_OVER
)

2179 
	#AT91C_US_ASYNC_IRDA_MODE
 ( 
AT91C_US_USMODE_IRDA
 + \

	)

2180 
	gAT91C_US_NBSTOP_1_BIT
 + \

2181 
	gAT91C_US_PAR_NONE
 + \

2182 
	gAT91C_US_CHRL_8_BITS
 + \

2183 
	gAT91C_US_CLKS_CLOCK
 )

2189 
__ölöe
 
	$AT91F_US_Baudøã
 (

2190 c⁄° 
maö_˛ock
,

2191 c⁄° 
baud_øã
)

2193 
baud_vÆue
 = ((
maö_˛ock
*10)/(
baud_øã
 * 16));

2194 i‡((
baud_vÆue
 % 10) >= 5)

2195 
baud_vÆue
 = (baud_value / 10) + 1;

2197 
baud_vÆue
 /= 10;

2198  
baud_vÆue
;

2199 
	}
}

2205 
__ölöe
 
	$AT91F_US_SëBaudøã
 (

2206 
AT91PS_USART
 
pUSART
,

2207 
maöClock
,

2208 
•ìd
)

2211 
pUSART
->
US_BRGR
 = 
	`AT91F_US_Baudøã
(
maöClock
, 
•ìd
);

2212 
	}
}

2218 
__ölöe
 
	$AT91F_US_SëTimegu¨d
 (

2219 
AT91PS_USART
 
pUSART
,

2220 
timegu¨d
)

2223 
pUSART
->
US_TTGR
 = 
timegu¨d
 ;

2224 
	}
}

2230 
__ölöe
 
	$AT91F_US_E«bÀIt
 (

2231 
AT91PS_USART
 
pUSART
,

2232 
Êag
)

2235 
pUSART
->
US_IER
 = 
Êag
;

2236 
	}
}

2242 
__ölöe
 
	$AT91F_US_DißbÀIt
 (

2243 
AT91PS_USART
 
pUSART
,

2244 
Êag
)

2247 
pUSART
->
US_IDR
 = 
Êag
;

2248 
	}
}

2254 
__ölöe
 
	$AT91F_US_C⁄figuª
 (

2255 
AT91PS_USART
 
pUSART
,

2256 
maöClock
,

2257 
mode
 ,

2258 
baudR©e
 ,

2259 
timegu¨d
 )

2262 
pUSART
->
US_IDR
 = () -1;

2265 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RXDIS
 | 
AT91C_US_TXDIS
 ;

2268 
	`AT91F_US_SëBaudøã
(
pUSART
, 
maöClock
, 
baudR©e
);

2271 
	`AT91F_US_SëTimegu¨d
(
pUSART
, 
timegu¨d
);

2274 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2277 
pUSART
->
US_MR
 = 
mode
 ;

2279 
	}
}

2285 
__ölöe
 
	$AT91F_US_E«bÀRx
 (

2286 
AT91PS_USART
 
pUSART
)

2289 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2290 
	}
}

2296 
__ölöe
 
	$AT91F_US_E«bÀTx
 (

2297 
AT91PS_USART
 
pUSART
)

2300 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2301 
	}
}

2307 
__ölöe
 
	$AT91F_US_Re£tRx
 (

2308 
AT91PS_USART
 
pUSART
)

2311 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
;

2313 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2314 
	}
}

2320 
__ölöe
 
	$AT91F_US_Re£tTx
 (

2321 
AT91PS_USART
 
pUSART
)

2324 
pUSART
->
US_CR
 = 
AT91C_US_RSTTX
;

2326 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2327 
	}
}

2333 
__ölöe
 
	$AT91F_US_DißbÀRx
 (

2334 
AT91PS_USART
 
pUSART
)

2337 
pUSART
->
US_CR
 = 
AT91C_US_RXDIS
;

2338 
	}
}

2344 
__ölöe
 
	$AT91F_US_DißbÀTx
 (

2345 
AT91PS_USART
 
pUSART
)

2348 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
;

2349 
	}
}

2355 
__ölöe
 
	$AT91F_US_Clo£
 (

2356 
AT91PS_USART
 
pUSART
)

2359 
pUSART
->
US_BRGR
 = 0 ;

2362 
pUSART
->
US_MR
 = 0 ;

2365 
pUSART
->
US_TTGR
 = 0;

2368 
pUSART
->
US_IDR
 = 0xFFFFFFFF ;

2371 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2374 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
 | 
AT91C_US_RXDIS
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RSTRX
 ;

2375 
	}
}

2381 
__ölöe
 
	$AT91F_US_TxRódy
 (

2382 
AT91PS_USART
 
pUSART
 )

2384  (
pUSART
->
US_CSR
 & 
AT91C_US_TXRDY
);

2385 
	}
}

2391 
__ölöe
 
	$AT91F_US_RxRódy
 (

2392 
AT91PS_USART
 
pUSART
 )

2394  (
pUSART
->
US_CSR
 & 
AT91C_US_RXRDY
);

2395 
	}
}

2401 
__ölöe
 
	$AT91F_US_Eº‹
 (

2402 
AT91PS_USART
 
pUSART
 )

2404  (
pUSART
->
US_CSR
 &

2405 (
AT91C_US_OVRE
 |

2406 
AT91C_US_FRAME
 |

2407 
AT91C_US_PARE
));

2408 
	}
}

2414 
__ölöe
 
	$AT91F_US_PutCh¨
 (

2415 
AT91PS_USART
 
pUSART
,

2416 
ch¨a˘î
 )

2418 
pUSART
->
US_THR
 = (
ch¨a˘î
 & 0x1FF);

2419 
	}
}

2425 
__ölöe
 
	$AT91F_US_GëCh¨
 (

2426 c⁄° 
AT91PS_USART
 
pUSART
)

2428 ((
pUSART
->
US_RHR
) & 0x1FF);

2429 
	}
}

2435 
__ölöe
 
	$AT91F_US_SídFøme
(

2436 
AT91PS_USART
 
pUSART
,

2437 *
pBuf„r
,

2438 
szBuf„r
,

2439 *
pNextBuf„r
,

2440 
szNextBuf„r
 )

2442  
	`AT91F_PDC_SídFøme
(

2443 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2444 
pBuf„r
,

2445 
szBuf„r
,

2446 
pNextBuf„r
,

2447 
szNextBuf„r
);

2448 
	}
}

2454 
__ölöe
 
	$AT91F_US_Re˚iveFøme
 (

2455 
AT91PS_USART
 
pUSART
,

2456 *
pBuf„r
,

2457 
szBuf„r
,

2458 *
pNextBuf„r
,

2459 
szNextBuf„r
 )

2461  
	`AT91F_PDC_Re˚iveFøme
(

2462 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2463 
pBuf„r
,

2464 
szBuf„r
,

2465 
pNextBuf„r
,

2466 
szNextBuf„r
);

2467 
	}
}

2473 
__ölöe
 
	$AT91F_US_SëIrdaFûãr
 (

2474 
AT91PS_USART
 
pUSART
,

2475 
vÆue


2478 
pUSART
->
US_IF
 = 
vÆue
;

2479 
	}
}

2488 
__ölöe
 
	$AT91F_UDP_E«bÀIt
 (

2489 
AT91PS_UDP
 
pUDP
,

2490 
Êag
)

2493 
pUDP
->
UDP_IER
 = 
Êag
;

2494 
	}
}

2500 
__ölöe
 
	$AT91F_UDP_DißbÀIt
 (

2501 
AT91PS_UDP
 
pUDP
,

2502 
Êag
)

2505 
pUDP
->
UDP_IDR
 = 
Êag
;

2506 
	}
}

2512 
__ölöe
 
	$AT91F_UDP_SëAddªss
 (

2513 
AT91PS_UDP
 
pUDP
,

2514 
addªss
)

2516 
pUDP
->
UDP_FADDR
 = (
AT91C_UDP_FEN
 | 
addªss
);

2517 
	}
}

2523 
__ölöe
 
	$AT91F_UDP_E«bÀEp
 (

2524 
AT91PS_UDP
 
pUDP
,

2525 
Êag
)

2527 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2528 
	}
}

2534 
__ölöe
 
	$AT91F_UDP_DißbÀEp
 (

2535 
AT91PS_UDP
 
pUDP
,

2536 
Êag
)

2538 
pUDP
->
UDP_GLBSTATE
 &~(
Êag
);

2539 
	}
}

2545 
__ölöe
 
	$AT91F_UDP_SëSèã
 (

2546 
AT91PS_UDP
 
pUDP
,

2547 
Êag
)

2549 
pUDP
->
UDP_GLBSTATE
 &~(
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
);

2550 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2551 
	}
}

2557 
__ölöe
 
	$AT91F_UDP_GëSèã
 (

2558 
AT91PS_UDP
 
pUDP
)

2560  (
pUDP
->
UDP_GLBSTATE
 & (
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
));

2561 
	}
}

2567 
__ölöe
 
	$AT91F_UDP_Re£tEp
 (

2568 
AT91PS_UDP
 
pUDP
,

2569 
Êag
)

2571 
pUDP
->
UDP_RSTEP
 = 
Êag
;

2572 
	}
}

2578 
__ölöe
 
	$AT91F_UDP_EpSèŒ
(

2579 
AT91PS_UDP
 
pUDP
,

2580 
ídpoöt
)

2582 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_FORCESTALL
;

2583 
	}
}

2589 
__ölöe
 
	$AT91F_UDP_EpWrôe
(

2590 
AT91PS_UDP
 
pUDP
,

2591 
ídpoöt
,

2592 
vÆue
)

2594 
pUDP
->
UDP_FDR
[
ídpoöt
] = 
vÆue
;

2595 
	}
}

2601 
__ölöe
 
	$AT91F_UDP_EpRód
(

2602 
AT91PS_UDP
 
pUDP
,

2603 
ídpoöt
)

2605  
pUDP
->
UDP_FDR
[
ídpoöt
];

2606 
	}
}

2612 
__ölöe
 
	$AT91F_UDP_EpEndOfWr
(

2613 
AT91PS_UDP
 
pUDP
,

2614 
ídpoöt
)

2616 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_TXPKTRDY
;

2617 
	}
}

2623 
__ölöe
 
	$AT91F_UDP_EpCÀ¨
(

2624 
AT91PS_UDP
 
pUDP
,

2625 
ídpoöt
,

2626 
Êag
)

2628 
pUDP
->
UDP_CSR
[
ídpoöt
] &~(
Êag
);

2629 
	}
}

2635 
__ölöe
 
	$AT91F_UDP_EpSë
(

2636 
AT91PS_UDP
 
pUDP
,

2637 
ídpoöt
,

2638 
Êag
)

2640 
pUDP
->
UDP_CSR
[
ídpoöt
] |
Êag
;

2641 
	}
}

2647 
__ölöe
 
	$AT91F_UDP_EpSètus
(

2648 
AT91PS_UDP
 
pUDP
,

2649 
ídpoöt
)

2651  
pUDP
->
UDP_CSR
[
ídpoöt
];

2652 
	}
}

2658 
__ölöe
 
	$AT91F_UDP_GëI¡îru±MaskSètus
(

2659 
AT91PS_UDP
 
pUdp
)

2661  
pUdp
->
UDP_IMR
;

2662 
	}
}

2668 
__ölöe
 
	$AT91F_UDP_IsI¡îru±Masked
(

2669 
AT91PS_UDP
 
pUdp
,

2670 
Êag
)

2672  (
	`AT91F_UDP_GëI¡îru±MaskSètus
(
pUdp
Ë& 
Êag
);

2673 
	}
}

2678 
	#AT91C_AIC_BRANCH_OPCODE
 (((*) ()) 0xE51FFF20)

2679 

	)

2684 
__ölöe
 
AT91F_AIC_C⁄figuªIt
 (

2685 
AT91PS_AIC
 
pAic
,

2686 
úq_id
,

2687 
¥i‹ôy
,

2688 
§c_ty≥
,

2689 (*
√wH™dÀr
) () )

2691 
ﬁdH™dÀr
;

2692 
mask
 ;

2694 
ﬁdH™dÀr
 = 
pAic
->
AIC_SVR
[
úq_id
];

2696 
mask
 = 0x1 << 
úq_id
 ;

2698 
pAic
->
AIC_IDCR
 = 
mask
 ;

2700 
pAic
->
AIC_SVR
[
úq_id
] = (Ë
√wH™dÀr
 ;

2702 
pAic
->
AIC_SMR
[
úq_id
] = 
§c_ty≥
 | 
¥i‹ôy
 ;

2704 
pAic
->
AIC_ICCR
 = 
mask
 ;

2706  
ﬁdH™dÀr
;

2707 
	}
}

2713 
__ölöe
 
	$AT91F_AIC_E«bÀIt
 (

2714 
AT91PS_AIC
 
pAic
,

2715 
úq_id
 )

2718 
pAic
->
AIC_IECR
 = 0x1 << 
úq_id
 ;

2719 
	}
}

2725 
__ölöe
 
	$AT91F_AIC_DißbÀIt
 (

2726 
AT91PS_AIC
 
pAic
,

2727 
úq_id
 )

2729 
mask
 = 0x1 << 
úq_id
;

2731 
pAic
->
AIC_IDCR
 = 
mask
 ;

2733 
pAic
->
AIC_ICCR
 = 
mask
 ;

2734 
	}
}

2740 
__ölöe
 
	$AT91F_AIC_CÀ¨It
 (

2741 
AT91PS_AIC
 
pAic
,

2742 
úq_id
)

2745 
pAic
->
AIC_ICCR
 = (0x1 << 
úq_id
);

2746 
	}
}

2752 
__ölöe
 
	$AT91F_AIC_AcknowÀdgeIt
 (

2753 
AT91PS_AIC
 
pAic
)

2755 
pAic
->
AIC_EOICR
 =ÖAic->AIC_EOICR;

2756 
	}
}

2762 
__ölöe
 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
 (

2763 *
pVe˘‹
,

2764 (*
H™dÀr
) () )

2766 
ﬁdVe˘‹
 = *
pVe˘‹
;

2768 i‡((Ë
H™dÀr
 =(Ë
AT91C_AIC_BRANCH_OPCODE
)

2769 *
pVe˘‹
 = (Ë
AT91C_AIC_BRANCH_OPCODE
;

2771 *
pVe˘‹
 = (((((Ë
H™dÀr
) - (()ÖVector) - 0x8) >> 2) & 0x00FFFFFF) | 0xEA000000;

2773  
ﬁdVe˘‹
;

2774 
	}
}

2780 
__ölöe
 
	$AT91F_AIC_Trig
 (

2781 
AT91PS_AIC
 
pAic
,

2782 
úq_id
)

2784 
pAic
->
AIC_ISCR
 = (0x1 << 
úq_id
) ;

2785 
	}
}

2791 
__ölöe
 
	$AT91F_AIC_IsA˘ive
 (

2792 
AT91PS_AIC
 
pAic
,

2793 
úq_id
)

2795  (
pAic
->
AIC_ISR
 & (0x1 << 
úq_id
));

2796 
	}
}

2802 
__ölöe
 
	$AT91F_AIC_IsPídög
 (

2803 
AT91PS_AIC
 
pAic
,

2804 
úq_id
)

2806  (
pAic
->
AIC_IPR
 & (0x1 << 
úq_id
));

2807 
	}
}

2813 
__ölöe
 
AT91F_AIC_O≥n
(

2814 
AT91PS_AIC
 
pAic
,

2815 (*
IrqH™dÀr
) (),

2816 (*
FiqH™dÀr
) (),

2817 (*
DeÁu…H™dÀr
) (),

2818 (*
SpuriousH™dÀr
) (),

2819 
¥Ÿe˘Mode
)

2821 
	gi
;

2824 
	gi
 = 0; i < 32; ++i) {

2825 
AT91F_AIC_DißbÀIt
(
pAic
, 
i
);

2826 
AT91F_AIC_C⁄figuªIt
(
pAic
, 
i
, 
AT91C_AIC_PRIOR_LOWEST
, 
AT91C_AIC_SRCTYPE_INT_LEVEL_SENSITIVE
, 
DeÁu…H™dÀr
);

2830 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x18, 
IrqH™dÀr
);

2832 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x1C, 
FiqH™dÀr
);

2834 
	gpAic
->
	gAIC_SPU
 = (Ë
SpuriousH™dÀr
;

2835 
	gpAic
->
	gAIC_DCR
 = 
¥Ÿe˘Mode
;

2841 
__ölöe
 
	$AT91F_MC_CfgPMC
 ()

2843 
	`AT91F_PMC_E«bÀPîùhClock
(

2844 
AT91C_BASE_PMC
,

2845 ((Ë1 << 
AT91C_ID_SYS
));

2846 
	}
}

2852 
__ölöe
 
	$AT91F_DBGU_CfgPMC
 ()

2854 
	`AT91F_PMC_E«bÀPîùhClock
(

2855 
AT91C_BASE_PMC
,

2856 ((Ë1 << 
AT91C_ID_SYS
));

2857 
	}
}

2863 
__ölöe
 
	$AT91F_DBGU_CfgPIO
 ()

2866 
	`AT91F_PIO_CfgPîùh
(

2867 
AT91C_BASE_PIOA
,

2868 ((Ë
AT91C_PA10_DTXD
 ) |

2869 ((Ë
AT91C_PA9_DRXD
 ),

2871 
	}
}

2877 
__ölöe
 
	$AT91F_PWMC_CH3_CfgPIO
 ()

2880 
	`AT91F_PIO_CfgPîùh
(

2881 
AT91C_BASE_PIOA
,

2883 ((Ë
AT91C_PA14_PWM3
 ) |

2884 ((Ë
AT91C_PA7_PWM3
 ));

2885 
	}
}

2891 
__ölöe
 
	$AT91F_PWMC_CH2_CfgPIO
 ()

2894 
	`AT91F_PIO_CfgPîùh
(

2895 
AT91C_BASE_PIOA
,

2896 ((Ë
AT91C_PA2_PWM2
 ),

2897 ((Ë
AT91C_PA25_PWM2
 ) |

2898 ((Ë
AT91C_PA13_PWM2
 ));

2899 
	}
}

2905 
__ölöe
 
	$AT91F_PWMC_CH1_CfgPIO
 ()

2908 
	`AT91F_PIO_CfgPîùh
(

2909 
AT91C_BASE_PIOA
,

2910 ((Ë
AT91C_PA1_PWM1
 ),

2911 ((Ë
AT91C_PA24_PWM1
 ) |

2912 ((Ë
AT91C_PA12_PWM1
 ));

2913 
	}
}

2919 
__ölöe
 
	$AT91F_PWMC_CH0_CfgPIO
 ()

2922 
	`AT91F_PIO_CfgPîùh
(

2923 
AT91C_BASE_PIOA
,

2924 ((Ë
AT91C_PA0_PWM0
 ),

2925 ((Ë
AT91C_PA23_PWM0
 ) |

2926 ((Ë
AT91C_PA11_PWM0
 ));

2927 
	}
}

2933 
__ölöe
 
	$AT91F_SSC_CfgPMC
 ()

2935 
	`AT91F_PMC_E«bÀPîùhClock
(

2936 
AT91C_BASE_PMC
,

2937 ((Ë1 << 
AT91C_ID_SSC
));

2938 
	}
}

2944 
__ölöe
 
	$AT91F_SSC_CfgPIO
 ()

2947 
	`AT91F_PIO_CfgPîùh
(

2948 
AT91C_BASE_PIOA
,

2949 ((Ë
AT91C_PA17_TD
 ) |

2950 ((Ë
AT91C_PA15_TF
 ) |

2951 ((Ë
AT91C_PA19_RK
 ) |

2952 ((Ë
AT91C_PA18_RD
 ) |

2953 ((Ë
AT91C_PA20_RF
 ) |

2954 ((Ë
AT91C_PA16_TK
 ),

2956 
	}
}

2962 
__ölöe
 
	$AT91F_SPI_CfgPMC
 ()

2964 
	`AT91F_PMC_E«bÀPîùhClock
(

2965 
AT91C_BASE_PMC
,

2966 ((Ë1 << 
AT91C_ID_SPI
));

2967 
	}
}

2973 
__ölöe
 
	$AT91F_SPI_CfgPIO
 ()

2976 
	`AT91F_PIO_CfgPîùh
(

2977 
AT91C_BASE_PIOA
,

2978 ((Ë
AT91C_PA11_NPCS0
 ) |

2979 ((Ë
AT91C_PA13_MOSI
 ) |

2980 ((Ë
AT91C_PA31_NPCS1
 ) |

2981 ((Ë
AT91C_PA12_MISO
 ) |

2982 ((Ë
AT91C_PA14_SPCK
 ),

2983 ((Ë
AT91C_PA9_NPCS1
 ) |

2984 ((Ë
AT91C_PA30_NPCS2
 ) |

2985 ((Ë
AT91C_PA10_NPCS2
 ) |

2986 ((Ë
AT91C_PA22_NPCS3
 ) |

2987 ((Ë
AT91C_PA3_NPCS3
 ) |

2988 ((Ë
AT91C_PA5_NPCS3
 ));

2989 
	}
}

2995 
__ölöe
 
	$AT91F_PWMC_CfgPMC
 ()

2997 
	`AT91F_PMC_E«bÀPîùhClock
(

2998 
AT91C_BASE_PMC
,

2999 ((Ë1 << 
AT91C_ID_PWMC
));

3000 
	}
}

3006 
__ölöe
 
	$AT91F_TC2_CfgPMC
 ()

3008 
	`AT91F_PMC_E«bÀPîùhClock
(

3009 
AT91C_BASE_PMC
,

3010 ((Ë1 << 
AT91C_ID_TC2
));

3011 
	}
}

3017 
__ölöe
 
	$AT91F_TC2_CfgPIO
 ()

3020 
	`AT91F_PIO_CfgPîùh
(

3021 
AT91C_BASE_PIOA
,

3023 ((Ë
AT91C_PA26_TIOA2
 ) |

3024 ((Ë
AT91C_PA27_TIOB2
 ) |

3025 ((Ë
AT91C_PA29_TCLK2
 ));

3026 
	}
}

3032 
__ölöe
 
	$AT91F_TC1_CfgPMC
 ()

3034 
	`AT91F_PMC_E«bÀPîùhClock
(

3035 
AT91C_BASE_PMC
,

3036 ((Ë1 << 
AT91C_ID_TC1
));

3037 
	}
}

3043 
__ölöe
 
	$AT91F_TC1_CfgPIO
 ()

3046 
	`AT91F_PIO_CfgPîùh
(

3047 
AT91C_BASE_PIOA
,

3049 ((Ë
AT91C_PA15_TIOA1
 ) |

3050 ((Ë
AT91C_PA16_TIOB1
 ) |

3051 ((Ë
AT91C_PA28_TCLK1
 ));

3052 
	}
}

3058 
__ölöe
 
	$AT91F_TC0_CfgPMC
 ()

3060 
	`AT91F_PMC_E«bÀPîùhClock
(

3061 
AT91C_BASE_PMC
,

3062 ((Ë1 << 
AT91C_ID_TC0
));

3063 
	}
}

3069 
__ölöe
 
	$AT91F_TC0_CfgPIO
 ()

3072 
	`AT91F_PIO_CfgPîùh
(

3073 
AT91C_BASE_PIOA
,

3075 ((Ë
AT91C_PA0_TIOA0
 ) |

3076 ((Ë
AT91C_PA1_TIOB0
 ) |

3077 ((Ë
AT91C_PA4_TCLK0
 ));

3078 
	}
}

3084 
__ölöe
 
	$AT91F_PMC_CfgPMC
 ()

3086 
	`AT91F_PMC_E«bÀPîùhClock
(

3087 
AT91C_BASE_PMC
,

3088 ((Ë1 << 
AT91C_ID_SYS
));

3089 
	}
}

3095 
__ölöe
 
	$AT91F_PMC_CfgPIO
 ()

3098 
	`AT91F_PIO_CfgPîùh
(

3099 
AT91C_BASE_PIOA
,

3101 ((Ë
AT91C_PA17_PCK1
 ) |

3102 ((Ë
AT91C_PA21_PCK1
 ) |

3103 ((Ë
AT91C_PA31_PCK2
 ) |

3104 ((Ë
AT91C_PA18_PCK2
 ) |

3105 ((Ë
AT91C_PA6_PCK0
 ));

3106 
	}
}

3112 
__ölöe
 
	$AT91F_ADC_CfgPMC
 ()

3114 
	`AT91F_PMC_E«bÀPîùhClock
(

3115 
AT91C_BASE_PMC
,

3116 ((Ë1 << 
AT91C_ID_ADC
));

3117 
	}
}

3123 
__ölöe
 
	$AT91F_ADC_CfgPIO
 ()

3126 
	`AT91F_PIO_CfgPîùh
(

3127 
AT91C_BASE_PIOA
,

3129 ((Ë
AT91C_PA8_ADTRG
 ));

3130 
	}
}

3136 
__ölöe
 
	$AT91F_PIOA_CfgPMC
 ()

3138 
	`AT91F_PMC_E«bÀPîùhClock
(

3139 
AT91C_BASE_PMC
,

3140 ((Ë1 << 
AT91C_ID_PIOA
));

3141 
	}
}

3147 
__ölöe
 
	$AT91F_TWI_CfgPMC
 ()

3149 
	`AT91F_PMC_E«bÀPîùhClock
(

3150 
AT91C_BASE_PMC
,

3151 ((Ë1 << 
AT91C_ID_TWI
));

3152 
	}
}

3158 
__ölöe
 
	$AT91F_TWI_CfgPIO
 ()

3161 
	`AT91F_PIO_CfgPîùh
(

3162 
AT91C_BASE_PIOA
,

3163 ((Ë
AT91C_PA3_TWD
 ) |

3164 ((Ë
AT91C_PA4_TWCK
 ),

3166 
	}
}

3172 
__ölöe
 
	$AT91F_US1_CfgPMC
 ()

3174 
	`AT91F_PMC_E«bÀPîùhClock
(

3175 
AT91C_BASE_PMC
,

3176 ((Ë1 << 
AT91C_ID_US1
));

3177 
	}
}

3183 
__ölöe
 
	$AT91F_US1_CfgPIO
 ()

3186 
	`AT91F_PIO_CfgPîùh
(

3187 
AT91C_BASE_PIOA
,

3188 ((Ë
AT91C_PA21_RXD1
 ) |

3189 ((Ë
AT91C_PA27_DTR1
 ) |

3190 ((Ë
AT91C_PA26_DCD1
 ) |

3191 ((Ë
AT91C_PA22_TXD1
 ) |

3192 ((Ë
AT91C_PA24_RTS1
 ) |

3193 ((Ë
AT91C_PA23_SCK1
 ) |

3194 ((Ë
AT91C_PA28_DSR1
 ) |

3195 ((Ë
AT91C_PA29_RI1
 ) |

3196 ((Ë
AT91C_PA25_CTS1
 ),

3198 
	}
}

3204 
__ölöe
 
	$AT91F_US0_CfgPMC
 ()

3206 
	`AT91F_PMC_E«bÀPîùhClock
(

3207 
AT91C_BASE_PMC
,

3208 ((Ë1 << 
AT91C_ID_US0
));

3209 
	}
}

3215 
__ölöe
 
	$AT91F_US0_CfgPIO
 ()

3218 
	`AT91F_PIO_CfgPîùh
(

3219 
AT91C_BASE_PIOA
,

3220 ((Ë
AT91C_PA5_RXD0
 ) |

3221 ((Ë
AT91C_PA6_TXD0
 ) |

3222 ((Ë
AT91C_PA7_RTS0
 ) |

3223 ((Ë
AT91C_PA8_CTS0
 ),

3224 ((Ë
AT91C_PA2_SCK0
 ));

3225 
	}
}

3231 
__ölöe
 
	$AT91F_UDP_CfgPMC
 ()

3233 
	`AT91F_PMC_E«bÀPîùhClock
(

3234 
AT91C_BASE_PMC
,

3235 ((Ë1 << 
AT91C_ID_UDP
));

3236 
	}
}

3242 
__ölöe
 
	$AT91F_AIC_CfgPMC
 ()

3244 
	`AT91F_PMC_E«bÀPîùhClock
(

3245 
AT91C_BASE_PMC
,

3246 ((Ë1 << 
AT91C_ID_IRQ0
) |

3247 ((Ë1 << 
AT91C_ID_FIQ
) |

3248 ((Ë1 << 
AT91C_ID_IRQ1
));

3249 
	}
}

3255 
__ölöe
 
	$AT91F_AIC_CfgPIO
 ()

3258 
	`AT91F_PIO_CfgPîùh
(

3259 
AT91C_BASE_PIOA
,

3260 ((Ë
AT91C_PA30_IRQ1
 ),

3261 ((Ë
AT91C_PA20_IRQ0
 ) |

3262 ((Ë
AT91C_PA19_FIQ
 ));

3263 
	}
}

	@portable/IAR/AtmelSAM7S64/lib_AT91SAM7X128.h

43 #i‚de‡
lib_AT91SAM7X128_H


44 
	#lib_AT91SAM7X128_H


	)

49 
	#AT91C_AIC_BRANCH_OPCODE
 (((*) ()) 0xE51FFF20)

50 

	)

55 
__ölöe
 
AT91F_AIC_C⁄figuªIt
 (

56 
AT91PS_AIC
 
pAic
,

57 
úq_id
,

58 
¥i‹ôy
,

59 
§c_ty≥
,

60 (*
√wH™dÀr
) () )

62 
ﬁdH™dÀr
;

63 
mask
 ;

65 
ﬁdH™dÀr
 = 
pAic
->
AIC_SVR
[
úq_id
];

67 
mask
 = 0x1 << 
úq_id
 ;

69 
pAic
->
AIC_IDCR
 = 
mask
 ;

71 
pAic
->
AIC_SVR
[
úq_id
] = (Ë
√wH™dÀr
 ;

73 
pAic
->
AIC_SMR
[
úq_id
] = 
§c_ty≥
 | 
¥i‹ôy
 ;

75 
pAic
->
AIC_ICCR
 = 
mask
 ;

77  
ﬁdH™dÀr
;

78 
	}
}

84 
__ölöe
 
	$AT91F_AIC_E«bÀIt
 (

85 
AT91PS_AIC
 
pAic
,

86 
úq_id
 )

89 
pAic
->
AIC_IECR
 = 0x1 << 
úq_id
 ;

90 
	}
}

96 
__ölöe
 
	$AT91F_AIC_DißbÀIt
 (

97 
AT91PS_AIC
 
pAic
,

98 
úq_id
 )

100 
mask
 = 0x1 << 
úq_id
;

102 
pAic
->
AIC_IDCR
 = 
mask
 ;

104 
pAic
->
AIC_ICCR
 = 
mask
 ;

105 
	}
}

111 
__ölöe
 
	$AT91F_AIC_CÀ¨It
 (

112 
AT91PS_AIC
 
pAic
,

113 
úq_id
)

116 
pAic
->
AIC_ICCR
 = (0x1 << 
úq_id
);

117 
	}
}

123 
__ölöe
 
	$AT91F_AIC_AcknowÀdgeIt
 (

124 
AT91PS_AIC
 
pAic
)

126 
pAic
->
AIC_EOICR
 =ÖAic->AIC_EOICR;

127 
	}
}

133 
__ölöe
 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
 (

134 *
pVe˘‹
,

135 (*
H™dÀr
) () )

137 
ﬁdVe˘‹
 = *
pVe˘‹
;

139 i‡((Ë
H™dÀr
 =(Ë
AT91C_AIC_BRANCH_OPCODE
)

140 *
pVe˘‹
 = (Ë
AT91C_AIC_BRANCH_OPCODE
;

142 *
pVe˘‹
 = (((((Ë
H™dÀr
) - (()ÖVector) - 0x8) >> 2) & 0x00FFFFFF) | 0xEA000000;

144  
ﬁdVe˘‹
;

145 
	}
}

151 
__ölöe
 
	$AT91F_AIC_Trig
 (

152 
AT91PS_AIC
 
pAic
,

153 
úq_id
)

155 
pAic
->
AIC_ISCR
 = (0x1 << 
úq_id
) ;

156 
	}
}

162 
__ölöe
 
	$AT91F_AIC_IsA˘ive
 (

163 
AT91PS_AIC
 
pAic
,

164 
úq_id
)

166  (
pAic
->
AIC_ISR
 & (0x1 << 
úq_id
));

167 
	}
}

173 
__ölöe
 
	$AT91F_AIC_IsPídög
 (

174 
AT91PS_AIC
 
pAic
,

175 
úq_id
)

177  (
pAic
->
AIC_IPR
 & (0x1 << 
úq_id
));

178 
	}
}

184 
__ölöe
 
AT91F_AIC_O≥n
(

185 
AT91PS_AIC
 
pAic
,

186 (*
IrqH™dÀr
) (),

187 (*
FiqH™dÀr
) (),

188 (*
DeÁu…H™dÀr
) (),

189 (*
SpuriousH™dÀr
) (),

190 
¥Ÿe˘Mode
)

192 
	gi
;

195 
	gi
 = 0; i < 32; ++i) {

196 
AT91F_AIC_DißbÀIt
(
pAic
, 
i
);

197 
AT91F_AIC_C⁄figuªIt
(
pAic
, 
i
, 
AT91C_AIC_PRIOR_LOWEST
, 
AT91C_AIC_SRCTYPE_HIGH_LEVEL
, 
DeÁu…H™dÀr
);

201 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x18, 
IrqH™dÀr
);

203 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x1C, 
FiqH™dÀr
);

205 
	gpAic
->
	gAIC_SPU
 = (Ë
SpuriousH™dÀr
;

206 
	gpAic
->
	gAIC_DCR
 = 
¥Ÿe˘Mode
;

215 
__ölöe
 
	$AT91F_PDC_SëNextRx
 (

216 
AT91PS_PDC
 
pPDC
,

217 *
addªss
,

218 
byãs
)

220 
pPDC
->
PDC_RNPR
 = (Ë
addªss
;

221 
pPDC
->
PDC_RNCR
 = 
byãs
;

222 
	}
}

228 
__ölöe
 
	$AT91F_PDC_SëNextTx
 (

229 
AT91PS_PDC
 
pPDC
,

230 *
addªss
,

231 
byãs
)

233 
pPDC
->
PDC_TNPR
 = (Ë
addªss
;

234 
pPDC
->
PDC_TNCR
 = 
byãs
;

235 
	}
}

241 
__ölöe
 
	$AT91F_PDC_SëRx
 (

242 
AT91PS_PDC
 
pPDC
,

243 *
addªss
,

244 
byãs
)

246 
pPDC
->
PDC_RPR
 = (Ë
addªss
;

247 
pPDC
->
PDC_RCR
 = 
byãs
;

248 
	}
}

254 
__ölöe
 
	$AT91F_PDC_SëTx
 (

255 
AT91PS_PDC
 
pPDC
,

256 *
addªss
,

257 
byãs
)

259 
pPDC
->
PDC_TPR
 = (Ë
addªss
;

260 
pPDC
->
PDC_TCR
 = 
byãs
;

261 
	}
}

267 
__ölöe
 
	$AT91F_PDC_E«bÀTx
 (

268 
AT91PS_PDC
 
pPDC
 )

270 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTEN
;

271 
	}
}

277 
__ölöe
 
	$AT91F_PDC_E«bÀRx
 (

278 
AT91PS_PDC
 
pPDC
 )

280 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTEN
;

281 
	}
}

287 
__ölöe
 
	$AT91F_PDC_DißbÀTx
 (

288 
AT91PS_PDC
 
pPDC
 )

290 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTDIS
;

291 
	}
}

297 
__ölöe
 
	$AT91F_PDC_DißbÀRx
 (

298 
AT91PS_PDC
 
pPDC
 )

300 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTDIS
;

301 
	}
}

307 
__ölöe
 
	$AT91F_PDC_IsTxEm±y
 (

308 
AT91PS_PDC
 
pPDC
 )

310  !(
pPDC
->
PDC_TCR
);

311 
	}
}

317 
__ölöe
 
	$AT91F_PDC_IsNextTxEm±y
 (

318 
AT91PS_PDC
 
pPDC
 )

320  !(
pPDC
->
PDC_TNCR
);

321 
	}
}

327 
__ölöe
 
	$AT91F_PDC_IsRxEm±y
 (

328 
AT91PS_PDC
 
pPDC
 )

330  !(
pPDC
->
PDC_RCR
);

331 
	}
}

337 
__ölöe
 
	$AT91F_PDC_IsNextRxEm±y
 (

338 
AT91PS_PDC
 
pPDC
 )

340  !(
pPDC
->
PDC_RNCR
);

341 
	}
}

347 
__ölöe
 
	$AT91F_PDC_O≥n
 (

348 
AT91PS_PDC
 
pPDC
)

351 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

352 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

355 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

356 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

357 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

358 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

361 
	`AT91F_PDC_E«bÀRx
(
pPDC
);

362 
	`AT91F_PDC_E«bÀTx
(
pPDC
);

363 
	}
}

369 
__ölöe
 
	$AT91F_PDC_Clo£
 (

370 
AT91PS_PDC
 
pPDC
)

373 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

374 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

377 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

378 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

379 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

380 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

382 
	}
}

388 
__ölöe
 
	$AT91F_PDC_SídFøme
(

389 
AT91PS_PDC
 
pPDC
,

390 *
pBuf„r
,

391 
szBuf„r
,

392 *
pNextBuf„r
,

393 
szNextBuf„r
 )

395 i‡(
	`AT91F_PDC_IsTxEm±y
(
pPDC
)) {

397 
	`AT91F_PDC_SëTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

398 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

401 i‡(
	`AT91F_PDC_IsNextTxEm±y
(
pPDC
)) {

403 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

410 
	}
}

416 
__ölöe
 
	$AT91F_PDC_Re˚iveFøme
 (

417 
AT91PS_PDC
 
pPDC
,

418 *
pBuf„r
,

419 
szBuf„r
,

420 *
pNextBuf„r
,

421 
szNextBuf„r
 )

423 i‡(
	`AT91F_PDC_IsRxEm±y
(
pPDC
)) {

425 
	`AT91F_PDC_SëRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

426 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

429 i‡(
	`AT91F_PDC_IsNextRxEm±y
(
pPDC
)) {

431 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

438 
	}
}

446 
__ölöe
 
	$AT91F_DBGU_I¡îru±E«bÀ
(

447 
AT91PS_DBGU
 
pDbgu
,

448 
Êag
)

450 
pDbgu
->
DBGU_IER
 = 
Êag
;

451 
	}
}

457 
__ölöe
 
	$AT91F_DBGU_I¡îru±DißbÀ
(

458 
AT91PS_DBGU
 
pDbgu
,

459 
Êag
)

461 
pDbgu
->
DBGU_IDR
 = 
Êag
;

462 
	}
}

468 
__ölöe
 
	$AT91F_DBGU_GëI¡îru±MaskSètus
(

469 
AT91PS_DBGU
 
pDbgu
)

471  
pDbgu
->
DBGU_IMR
;

472 
	}
}

478 
__ölöe
 
	$AT91F_DBGU_IsI¡îru±Masked
(

479 
AT91PS_DBGU
 
pDbgu
,

480 
Êag
)

482  (
	`AT91F_DBGU_GëI¡îru±MaskSètus
(
pDbgu
Ë& 
Êag
);

483 
	}
}

492 
__ölöe
 
	$AT91F_PIO_CfgPîùh
(

493 
AT91PS_PIO
 
pPio
,

494 
≥rùhAE«bÀ
,

495 
≥rùhBE«bÀ
)

498 
pPio
->
PIO_ASR
 = 
≥rùhAE«bÀ
;

499 
pPio
->
PIO_BSR
 = 
≥rùhBE«bÀ
;

500 
pPio
->
PIO_PDR
 = (
≥rùhAE«bÀ
 | 
≥rùhBE«bÀ
);

501 
	}
}

507 
__ölöe
 
	$AT91F_PIO_CfgOuçut
(

508 
AT91PS_PIO
 
pPio
,

509 
pioE«bÀ
)

511 
pPio
->
PIO_PER
 = 
pioE«bÀ
;

512 
pPio
->
PIO_OER
 = 
pioE«bÀ
;

513 
	}
}

519 
__ölöe
 
	$AT91F_PIO_CfgI≈ut
(

520 
AT91PS_PIO
 
pPio
,

521 
öputE«bÀ
)

524 
pPio
->
PIO_ODR
 = 
öputE«bÀ
;

525 
pPio
->
PIO_PER
 = 
öputE«bÀ
;

526 
	}
}

532 
__ölöe
 
	$AT91F_PIO_CfgO≥ndøö
(

533 
AT91PS_PIO
 
pPio
,

534 
mu…iDrvE«bÀ
)

537 
pPio
->
PIO_MDDR
 = ~
mu…iDrvE«bÀ
;

538 
pPio
->
PIO_MDER
 = 
mu…iDrvE«bÀ
;

539 
	}
}

545 
__ölöe
 
	$AT91F_PIO_CfgPuŒup
(

546 
AT91PS_PIO
 
pPio
,

547 
puŒupE«bÀ
)

550 
pPio
->
PIO_PPUDR
 = ~
puŒupE«bÀ
;

551 
pPio
->
PIO_PPUER
 = 
puŒupE«bÀ
;

552 
	}
}

558 
__ölöe
 
	$AT91F_PIO_CfgDúe˘Drive
(

559 
AT91PS_PIO
 
pPio
,

560 
dúe˘Drive
)

564 
pPio
->
PIO_OWDR
 = ~
dúe˘Drive
;

565 
pPio
->
PIO_OWER
 = 
dúe˘Drive
;

566 
	}
}

572 
__ölöe
 
	$AT91F_PIO_CfgI≈utFûãr
(

573 
AT91PS_PIO
 
pPio
,

574 
öputFûãr
)

578 
pPio
->
PIO_IFDR
 = ~
öputFûãr
;

579 
pPio
->
PIO_IFER
 = 
öputFûãr
;

580 
	}
}

586 
__ölöe
 
	$AT91F_PIO_GëI≈ut
(

587 
AT91PS_PIO
 
pPio
)

589  
pPio
->
PIO_PDSR
;

590 
	}
}

596 
__ölöe
 
	$AT91F_PIO_IsI≈utSë
(

597 
AT91PS_PIO
 
pPio
,

598 
Êag
)

600  (
	`AT91F_PIO_GëI≈ut
(
pPio
Ë& 
Êag
);

601 
	}
}

608 
__ölöe
 
	$AT91F_PIO_SëOuçut
(

609 
AT91PS_PIO
 
pPio
,

610 
Êag
)

612 
pPio
->
PIO_SODR
 = 
Êag
;

613 
	}
}

619 
__ölöe
 
	$AT91F_PIO_CÀ¨Ouçut
(

620 
AT91PS_PIO
 
pPio
,

621 
Êag
)

623 
pPio
->
PIO_CODR
 = 
Êag
;

624 
	}
}

630 
__ölöe
 
	$AT91F_PIO_F‹˚Ouçut
(

631 
AT91PS_PIO
 
pPio
,

632 
Êag
)

634 
pPio
->
PIO_ODSR
 = 
Êag
;

635 
	}
}

641 
__ölöe
 
	$AT91F_PIO_E«bÀ
(

642 
AT91PS_PIO
 
pPio
,

643 
Êag
)

645 
pPio
->
PIO_PER
 = 
Êag
;

646 
	}
}

652 
__ölöe
 
	$AT91F_PIO_DißbÀ
(

653 
AT91PS_PIO
 
pPio
,

654 
Êag
)

656 
pPio
->
PIO_PDR
 = 
Êag
;

657 
	}
}

663 
__ölöe
 
	$AT91F_PIO_GëSètus
(

664 
AT91PS_PIO
 
pPio
)

666  
pPio
->
PIO_PSR
;

667 
	}
}

673 
__ölöe
 
	$AT91F_PIO_IsSë
(

674 
AT91PS_PIO
 
pPio
,

675 
Êag
)

677  (
	`AT91F_PIO_GëSètus
(
pPio
Ë& 
Êag
);

678 
	}
}

684 
__ölöe
 
	$AT91F_PIO_OuçutE«bÀ
(

685 
AT91PS_PIO
 
pPio
,

686 
Êag
)

688 
pPio
->
PIO_OER
 = 
Êag
;

689 
	}
}

695 
__ölöe
 
	$AT91F_PIO_OuçutDißbÀ
(

696 
AT91PS_PIO
 
pPio
,

697 
Êag
)

699 
pPio
->
PIO_ODR
 = 
Êag
;

700 
	}
}

706 
__ölöe
 
	$AT91F_PIO_GëOuçutSètus
(

707 
AT91PS_PIO
 
pPio
)

709  
pPio
->
PIO_OSR
;

710 
	}
}

716 
__ölöe
 
	$AT91F_PIO_IsOuçutSë
(

717 
AT91PS_PIO
 
pPio
,

718 
Êag
)

720  (
	`AT91F_PIO_GëOuçutSètus
(
pPio
Ë& 
Êag
);

721 
	}
}

727 
__ölöe
 
	$AT91F_PIO_I≈utFûãrE«bÀ
(

728 
AT91PS_PIO
 
pPio
,

729 
Êag
)

731 
pPio
->
PIO_IFER
 = 
Êag
;

732 
	}
}

738 
__ölöe
 
	$AT91F_PIO_I≈utFûãrDißbÀ
(

739 
AT91PS_PIO
 
pPio
,

740 
Êag
)

742 
pPio
->
PIO_IFDR
 = 
Êag
;

743 
	}
}

749 
__ölöe
 
	$AT91F_PIO_GëI≈utFûãrSètus
(

750 
AT91PS_PIO
 
pPio
)

752  
pPio
->
PIO_IFSR
;

753 
	}
}

759 
__ölöe
 
	$AT91F_PIO_IsI≈utFûãrSë
(

760 
AT91PS_PIO
 
pPio
,

761 
Êag
)

763  (
	`AT91F_PIO_GëI≈utFûãrSètus
(
pPio
Ë& 
Êag
);

764 
	}
}

770 
__ölöe
 
	$AT91F_PIO_GëOuçutD©aSètus
(

771 
AT91PS_PIO
 
pPio
)

773  
pPio
->
PIO_ODSR
;

774 
	}
}

780 
__ölöe
 
	$AT91F_PIO_I¡îru±E«bÀ
(

781 
AT91PS_PIO
 
pPio
,

782 
Êag
)

784 
pPio
->
PIO_IER
 = 
Êag
;

785 
	}
}

791 
__ölöe
 
	$AT91F_PIO_I¡îru±DißbÀ
(

792 
AT91PS_PIO
 
pPio
,

793 
Êag
)

795 
pPio
->
PIO_IDR
 = 
Êag
;

796 
	}
}

802 
__ölöe
 
	$AT91F_PIO_GëI¡îru±MaskSètus
(

803 
AT91PS_PIO
 
pPio
)

805  
pPio
->
PIO_IMR
;

806 
	}
}

812 
__ölöe
 
	$AT91F_PIO_GëI¡îru±Sètus
(

813 
AT91PS_PIO
 
pPio
)

815  
pPio
->
PIO_ISR
;

816 
	}
}

822 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Masked
(

823 
AT91PS_PIO
 
pPio
,

824 
Êag
)

826  (
	`AT91F_PIO_GëI¡îru±MaskSètus
(
pPio
Ë& 
Êag
);

827 
	}
}

833 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Së
(

834 
AT91PS_PIO
 
pPio
,

835 
Êag
)

837  (
	`AT91F_PIO_GëI¡îru±Sètus
(
pPio
Ë& 
Êag
);

838 
	}
}

844 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîE«bÀ
(

845 
AT91PS_PIO
 
pPio
,

846 
Êag
)

848 
pPio
->
PIO_MDER
 = 
Êag
;

849 
	}
}

855 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîDißbÀ
(

856 
AT91PS_PIO
 
pPio
,

857 
Êag
)

859 
pPio
->
PIO_MDDR
 = 
Êag
;

860 
	}
}

866 
__ölöe
 
	$AT91F_PIO_GëMu…iDrivîSètus
(

867 
AT91PS_PIO
 
pPio
)

869  
pPio
->
PIO_MDSR
;

870 
	}
}

876 
__ölöe
 
	$AT91F_PIO_IsMu…iDrivîSë
(

877 
AT91PS_PIO
 
pPio
,

878 
Êag
)

880  (
	`AT91F_PIO_GëMu…iDrivîSètus
(
pPio
Ë& 
Êag
);

881 
	}
}

887 
__ölöe
 
	$AT91F_PIO_A_Regi°îSñe˘i⁄
(

888 
AT91PS_PIO
 
pPio
,

889 
Êag
)

891 
pPio
->
PIO_ASR
 = 
Êag
;

892 
	}
}

898 
__ölöe
 
	$AT91F_PIO_B_Regi°îSñe˘i⁄
(

899 
AT91PS_PIO
 
pPio
,

900 
Êag
)

902 
pPio
->
PIO_BSR
 = 
Êag
;

903 
	}
}

909 
__ölöe
 
	$AT91F_PIO_Gë_AB_Regi°îSètus
(

910 
AT91PS_PIO
 
pPio
)

912  
pPio
->
PIO_ABSR
;

913 
	}
}

919 
__ölöe
 
	$AT91F_PIO_IsAB_Regi°îSë
(

920 
AT91PS_PIO
 
pPio
,

921 
Êag
)

923  (
	`AT91F_PIO_Gë_AB_Regi°îSètus
(
pPio
Ë& 
Êag
);

924 
	}
}

930 
__ölöe
 
	$AT91F_PIO_OuçutWrôeE«bÀ
(

931 
AT91PS_PIO
 
pPio
,

932 
Êag
)

934 
pPio
->
PIO_OWER
 = 
Êag
;

935 
	}
}

941 
__ölöe
 
	$AT91F_PIO_OuçutWrôeDißbÀ
(

942 
AT91PS_PIO
 
pPio
,

943 
Êag
)

945 
pPio
->
PIO_OWDR
 = 
Êag
;

946 
	}
}

952 
__ölöe
 
	$AT91F_PIO_GëOuçutWrôeSètus
(

953 
AT91PS_PIO
 
pPio
)

955  
pPio
->
PIO_OWSR
;

956 
	}
}

962 
__ölöe
 
	$AT91F_PIO_IsOuçutWrôeSë
(

963 
AT91PS_PIO
 
pPio
,

964 
Êag
)

966  (
	`AT91F_PIO_GëOuçutWrôeSètus
(
pPio
Ë& 
Êag
);

967 
	}
}

973 
__ölöe
 
	$AT91F_PIO_GëCfgPuŒup
(

974 
AT91PS_PIO
 
pPio
)

976  
pPio
->
PIO_PPUSR
;

977 
	}
}

983 
__ölöe
 
	$AT91F_PIO_IsOuçutD©aSètusSë
(

984 
AT91PS_PIO
 
pPio
,

985 
Êag
)

987  (
	`AT91F_PIO_GëOuçutD©aSètus
(
pPio
Ë& 
Êag
);

988 
	}
}

994 
__ölöe
 
	$AT91F_PIO_IsCfgPuŒupSètusSë
(

995 
AT91PS_PIO
 
pPio
,

996 
Êag
)

998  (~
	`AT91F_PIO_GëCfgPuŒup
(
pPio
Ë& 
Êag
);

999 
	}
}

1008 
__ölöe
 
	$AT91F_PMC_CfgSysClkE«bÀReg
 (

1009 
AT91PS_PMC
 
pPMC
,

1010 
mode
)

1013 
pPMC
->
PMC_SCER
 = 
mode
;

1014 
	}
}

1020 
__ölöe
 
	$AT91F_PMC_CfgSysClkDißbÀReg
 (

1021 
AT91PS_PMC
 
pPMC
,

1022 
mode
)

1025 
pPMC
->
PMC_SCDR
 = 
mode
;

1026 
	}
}

1032 
__ölöe
 
	$AT91F_PMC_GëSysClkSètusReg
 (

1033 
AT91PS_PMC
 
pPMC


1036  
pPMC
->
PMC_SCSR
;

1037 
	}
}

1043 
__ölöe
 
	$AT91F_PMC_E«bÀPîùhClock
 (

1044 
AT91PS_PMC
 
pPMC
,

1045 
≥rùhIds
)

1047 
pPMC
->
PMC_PCER
 = 
≥rùhIds
;

1048 
	}
}

1054 
__ölöe
 
	$AT91F_PMC_DißbÀPîùhClock
 (

1055 
AT91PS_PMC
 
pPMC
,

1056 
≥rùhIds
)

1058 
pPMC
->
PMC_PCDR
 = 
≥rùhIds
;

1059 
	}
}

1065 
__ölöe
 
	$AT91F_PMC_GëPîùhClock
 (

1066 
AT91PS_PMC
 
pPMC
)

1068  
pPMC
->
PMC_PCSR
;

1069 
	}
}

1075 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscûœt‹Reg
 (

1076 
AT91PS_CKGR
 
pCKGR
,

1077 
mode
)

1079 
pCKGR
->
CKGR_MOR
 = 
mode
;

1080 
	}
}

1086 
__ölöe
 
	$AT91F_CKGR_GëMaöOscûœt‹Reg
 (

1087 
AT91PS_CKGR
 
pCKGR
)

1089  
pCKGR
->
CKGR_MOR
;

1090 
	}
}

1096 
__ölöe
 
	$AT91F_CKGR_E«bÀMaöOscûœt‹
(

1097 
AT91PS_CKGR
 
pCKGR
)

1099 
pCKGR
->
CKGR_MOR
 |
AT91C_CKGR_MOSCEN
;

1100 
	}
}

1106 
__ölöe
 
	$AT91F_CKGR_DißbÀMaöOscûœt‹
 (

1107 
AT91PS_CKGR
 
pCKGR
)

1109 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_MOSCEN
;

1110 
	}
}

1116 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscSèπUpTime
 (

1117 
AT91PS_CKGR
 
pCKGR
,

1118 
°¨tup_time
,

1119 
¶owClock
)

1121 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_OSCOUNT
;

1122 
pCKGR
->
CKGR_MOR
 |((
¶owClock
 * 
°¨tup_time
)/(8*1000000)) << 8;

1123 
	}
}

1129 
__ölöe
 
	$AT91F_CKGR_GëMaöClockFªqReg
 (

1130 
AT91PS_CKGR
 
pCKGR
)

1132  
pCKGR
->
CKGR_MCFR
;

1133 
	}
}

1139 
__ölöe
 
	$AT91F_CKGR_GëMaöClock
 (

1140 
AT91PS_CKGR
 
pCKGR
,

1141 
¶owClock
)

1143  ((
pCKGR
->
CKGR_MCFR
 & 
AT91C_CKGR_MAINF
Ë* 
¶owClock
) >> 4;

1144 
	}
}

1150 
__ölöe
 
	$AT91F_PMC_CfgMCKReg
 (

1151 
AT91PS_PMC
 
pPMC
,

1152 
mode
)

1154 
pPMC
->
PMC_MCKR
 = 
mode
;

1155 
	}
}

1161 
__ölöe
 
	$AT91F_PMC_GëMCKReg
(

1162 
AT91PS_PMC
 
pPMC
)

1164  
pPMC
->
PMC_MCKR
;

1165 
	}
}

1171 
__ölöe
 
	$AT91F_PMC_GëMa°îClock
 (

1172 
AT91PS_PMC
 
pPMC
,

1173 
AT91PS_CKGR
 
pCKGR
,

1174 
¶owClock
)

1176 
ªg
 = 
pPMC
->
PMC_MCKR
;

1177 
¥esˇÀr
 = (1 << ((
ªg
 & 
AT91C_PMC_PRES
) >> 2));

1178 
∂lDividî
, 
∂lMu…ùlõr
;

1180 
ªg
 & 
AT91C_PMC_CSS
) {

1181 
AT91C_PMC_CSS_SLOW_CLK
:

1182  
¶owClock
 / 
¥esˇÀr
;

1183 
AT91C_PMC_CSS_MAIN_CLK
:

1184  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
¥esˇÀr
;

1185 
AT91C_PMC_CSS_PLL_CLK
:

1186 
ªg
 = 
pCKGR
->
CKGR_PLLR
;

1187 
∂lDividî
 = (
ªg
 & 
AT91C_CKGR_DIV
);

1188 
∂lMu…ùlõr
 = ((
ªg
 & 
AT91C_CKGR_MUL
) >> 16) + 1;

1189  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
∂lDividî
 * 
∂lMu…ùlõr
 / 
¥esˇÀr
;

1192 
	}
}

1198 
__ölöe
 
	$AT91F_PMC_E«bÀPCK
 (

1199 
AT91PS_PMC
 
pPMC
,

1200 
pck
,

1201 
mode
)

1203 
pPMC
->
PMC_PCKR
[
pck
] = 
mode
;

1204 
pPMC
->
PMC_SCER
 = (1 << 
pck
) << 8;

1205 
	}
}

1211 
__ölöe
 
	$AT91F_PMC_DißbÀPCK
 (

1212 
AT91PS_PMC
 
pPMC
,

1213 
pck
)

1215 
pPMC
->
PMC_SCDR
 = (1 << 
pck
) << 8;

1216 
	}
}

1222 
__ölöe
 
	$AT91F_PMC_E«bÀIt
 (

1223 
AT91PS_PMC
 
pPMC
,

1224 
Êag
)

1227 
pPMC
->
PMC_IER
 = 
Êag
;

1228 
	}
}

1234 
__ölöe
 
	$AT91F_PMC_DißbÀIt
 (

1235 
AT91PS_PMC
 
pPMC
,

1236 
Êag
)

1239 
pPMC
->
PMC_IDR
 = 
Êag
;

1240 
	}
}

1246 
__ölöe
 
	$AT91F_PMC_GëSètus
(

1247 
AT91PS_PMC
 
pPMC
)

1249  
pPMC
->
PMC_SR
;

1250 
	}
}

1256 
__ölöe
 
	$AT91F_PMC_GëI¡îru±MaskSètus
(

1257 
AT91PS_PMC
 
pPMC
)

1259  
pPMC
->
PMC_IMR
;

1260 
	}
}

1266 
__ölöe
 
	$AT91F_PMC_IsI¡îru±Masked
(

1267 
AT91PS_PMC
 
pPMC
,

1268 
Êag
)

1270  (
	`AT91F_PMC_GëI¡îru±MaskSètus
(
pPMC
Ë& 
Êag
);

1271 
	}
}

1277 
__ölöe
 
	$AT91F_PMC_IsSètusSë
(

1278 
AT91PS_PMC
 
pPMC
,

1279 
Êag
)

1281  (
	`AT91F_PMC_GëSètus
(
pPMC
Ë& 
Êag
);

1282 
	}
}

1289 
__ölöe
 
	$AT91F_RSTSo·Re£t
(

1290 
AT91PS_RSTC
 
pRSTC
,

1291 
ª£t
)

1293 
pRSTC
->
RSTC_RCR
 = (0xA5000000 | 
ª£t
);

1294 
	}
}

1300 
__ölöe
 
	$AT91F_RSTSëMode
(

1301 
AT91PS_RSTC
 
pRSTC
,

1302 
mode
)

1304 
pRSTC
->
RSTC_RMR
 = (0xA5000000 | 
mode
);

1305 
	}
}

1311 
__ölöe
 
	$AT91F_RSTGëMode
(

1312 
AT91PS_RSTC
 
pRSTC
)

1314  (
pRSTC
->
RSTC_RMR
);

1315 
	}
}

1321 
__ölöe
 
	$AT91F_RSTGëSètus
(

1322 
AT91PS_RSTC
 
pRSTC
)

1324  (
pRSTC
->
RSTC_RSR
);

1325 
	}
}

1331 
__ölöe
 
	$AT91F_RSTIsSo·R°A˘ive
(

1332 
AT91PS_RSTC
 
pRSTC
)

1334  ((
pRSTC
->
RSTC_RSR
Ë& 
AT91C_RSTC_SRCMP
);

1335 
	}
}

1343 
__ölöe
 
	$AT91F_RTTSëTimeBa£
(

1344 
AT91PS_RTTC
 
pRTTC
,

1345 
ms
)

1347 i‡(
ms
 > 2000)

1349 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1350 
pRTTC
->
RTTC_RTMR
 |(((
ms
 << 15) /1000) & 0xFFFF);

1352 
	}
}

1358 
__ölöe
 
	$AT91F_RTTSëPªsˇÀr
(

1359 
AT91PS_RTTC
 
pRTTC
,

1360 
π¥es
)

1362 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1363 
pRTTC
->
RTTC_RTMR
 |(
π¥es
 & 0xFFFF);

1364  (
pRTTC
->
RTTC_RTMR
);

1365 
	}
}

1371 
__ölöe
 
	$AT91F_RTTRe°¨t
(

1372 
AT91PS_RTTC
 
pRTTC
)

1374 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTRST
;

1375 
	}
}

1382 
__ölöe
 
	$AT91F_RTTSëAœrmINT
(

1383 
AT91PS_RTTC
 
pRTTC
)

1385 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_ALMIEN
;

1386 
	}
}

1392 
__ölöe
 
	$AT91F_RTTCÀ¨AœrmINT
(

1393 
AT91PS_RTTC
 
pRTTC
)

1395 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_ALMIEN
;

1396 
	}
}

1402 
__ölöe
 
	$AT91F_RTTSëRâIncINT
(

1403 
AT91PS_RTTC
 
pRTTC
)

1405 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTINCIEN
;

1406 
	}
}

1412 
__ölöe
 
	$AT91F_RTTCÀ¨RâIncINT
(

1413 
AT91PS_RTTC
 
pRTTC
)

1415 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_RTTINCIEN
;

1416 
	}
}

1422 
__ölöe
 
	$AT91F_RTTSëAœrmVÆue
(

1423 
AT91PS_RTTC
 
pRTTC
, 
Æ¨m
)

1425 
pRTTC
->
RTTC_RTAR
 = 
Æ¨m
;

1426 
	}
}

1432 
__ölöe
 
	$AT91F_RTTGëAœrmVÆue
(

1433 
AT91PS_RTTC
 
pRTTC
)

1435 (
pRTTC
->
RTTC_RTAR
);

1436 
	}
}

1442 
__ölöe
 
	$AT91F_RTTGëSètus
(

1443 
AT91PS_RTTC
 
pRTTC
)

1445 (
pRTTC
->
RTTC_RTSR
);

1446 
	}
}

1452 
__ölöe
 
	$AT91F_RTTRódVÆue
(

1453 
AT91PS_RTTC
 
pRTTC
)

1455 vﬁ©ûê
vÆ1
,
vÆ2
;

1458 
vÆ1
 = 
pRTTC
->
RTTC_RTVR
;

1459 
vÆ2
 = 
pRTTC
->
RTTC_RTVR
;

1461 
vÆ1
 !
vÆ2
);

1462 (
vÆ1
);

1463 
	}
}

1471 
__ölöe
 
	$AT91F_PITInô
(

1472 
AT91PS_PITC
 
pPITC
,

1473 
≥riod
,

1474 
pô_‰equícy
)

1476 
pPITC
->
PITC_PIMR
 = 
≥riod
? (≥riod * 
pô_‰equícy
 + 8) >> 4 : 0;

1477 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITEN
;

1478 
	}
}

1484 
__ölöe
 
	$AT91F_PITSëPIV
(

1485 
AT91PS_PITC
 
pPITC
,

1486 
piv
)

1488 
pPITC
->
PITC_PIMR
 = 
piv
 | (pPITC->PITC_PIMR & (
AT91C_PITC_PITEN
 | 
AT91C_PITC_PITIEN
));

1489 
	}
}

1495 
__ölöe
 
	$AT91F_PITE«bÀI¡
(

1496 
AT91PS_PITC
 
pPITC
)

1498 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITIEN
;

1499 
	}
}

1505 
__ölöe
 
	$AT91F_PITDißbÀI¡
(

1506 
AT91PS_PITC
 
pPITC
)

1508 
pPITC
->
PITC_PIMR
 &~
AT91C_PITC_PITIEN
;

1509 
	}
}

1515 
__ölöe
 
	$AT91F_PITGëMode
(

1516 
AT91PS_PITC
 
pPITC
)

1518 (
pPITC
->
PITC_PIMR
);

1519 
	}
}

1525 
__ölöe
 
	$AT91F_PITGëSètus
(

1526 
AT91PS_PITC
 
pPITC
)

1528 (
pPITC
->
PITC_PISR
);

1529 
	}
}

1535 
__ölöe
 
	$AT91F_PITGëPIIR
(

1536 
AT91PS_PITC
 
pPITC
)

1538 (
pPITC
->
PITC_PIIR
);

1539 
	}
}

1545 
__ölöe
 
	$AT91F_PITGëPIVR
(

1546 
AT91PS_PITC
 
pPITC
)

1548 (
pPITC
->
PITC_PIVR
);

1549 
	}
}

1557 
__ölöe
 
	$AT91F_WDTSëMode
(

1558 
AT91PS_WDTC
 
pWDTC
,

1559 
Mode
)

1561 
pWDTC
->
WDTC_WDMR
 = 
Mode
;

1562 
	}
}

1568 
__ölöe
 
	$AT91F_WDTRe°¨t
(

1569 
AT91PS_WDTC
 
pWDTC
)

1571 
pWDTC
->
WDTC_WDCR
 = 0xA5000001;

1572 
	}
}

1578 
__ölöe
 
	$AT91F_WDTSGëètus
(

1579 
AT91PS_WDTC
 
pWDTC
)

1581 (
pWDTC
->
WDTC_WDSR
 & 0x3);

1582 
	}
}

1588 
__ölöe
 
	$AT91F_WDTGëPîiod
(
ms
)

1590 i‡((
ms
 < 4) || (ms > 16000))

1592 ((
ms
 << 8) / 1000);

1593 
	}
}

1601 
__ölöe
 
	$AT91F_VREG_E«bÀ_LowPowîMode
(

1602 
AT91PS_VREG
 
pVREG
)

1604 
pVREG
->
VREG_MR
 |
AT91C_VREG_PSTDBY
;

1605 
	}
}

1611 
__ölöe
 
	$AT91F_VREG_DißbÀ_LowPowîMode
(

1612 
AT91PS_VREG
 
pVREG
)

1614 
pVREG
->
VREG_MR
 &~
AT91C_VREG_PSTDBY
;

1615 
	}
}

1619 
	#AT91C_MC_CORRECT_KEY
 (() 0x5A << 24)

1620 

	)

1625 
__ölöe
 
	$AT91F_MC_Rem≠
 ()

1627 
AT91PS_MC
 
pMC
 = (AT91PS_MCË
AT91C_BASE_MC
;

1629 
pMC
->
MC_RCR
 = 
AT91C_MC_RCB
;

1630 
	}
}

1636 
__ölöe
 
	$AT91F_MC_EFC_CfgModeReg
 (

1637 
AT91PS_MC
 
pMC
,

1638 
mode
)

1641 
pMC
->
MC_FMR
 = 
mode
;

1642 
	}
}

1648 
__ölöe
 
	$AT91F_MC_EFC_GëModeReg
(

1649 
AT91PS_MC
 
pMC
)

1651  
pMC
->
MC_FMR
;

1652 
	}
}

1658 
__ölöe
 
	$AT91F_MC_EFC_CompuãFMCN
(

1659 
ma°î_˛ock
)

1661  (
ma°î_˛ock
/1000000 +2);

1662 
	}
}

1668 
__ölöe
 
	$AT91F_MC_EFC_Pîf‹mCmd
 (

1669 
AT91PS_MC
 
pMC
,

1670 
å™s„r_cmd
)

1672 
pMC
->
MC_FCR
 = 
å™s„r_cmd
;

1673 
	}
}

1679 
__ölöe
 
	$AT91F_MC_EFC_GëSètus
(

1680 
AT91PS_MC
 
pMC
)

1682  
pMC
->
MC_FSR
;

1683 
	}
}

1689 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Masked
(

1690 
AT91PS_MC
 
pMC
,

1691 
Êag
)

1693  (
	`AT91F_MC_EFC_GëModeReg
(
pMC
Ë& 
Êag
);

1694 
	}
}

1700 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Së
(

1701 
AT91PS_MC
 
pMC
,

1702 
Êag
)

1704  (
	`AT91F_MC_EFC_GëSètus
(
pMC
Ë& 
Êag
);

1705 
	}
}

1714 
__ölöe
 
	$AT91F_SPI_O≥n
 (

1715 c⁄° 
nuŒ
)

1719 
	}
}

1725 
__ölöe
 
	$AT91F_SPI_CfgCs
 (

1726 
AT91PS_SPI
 
pSPI
,

1727 
cs
,

1728 
vÆ
)

1731 *(
pSPI
->
SPI_CSR
 + 
cs
Ë
vÆ
;

1732 
	}
}

1738 
__ölöe
 
	$AT91F_SPI_E«bÀIt
 (

1739 
AT91PS_SPI
 
pSPI
,

1740 
Êag
)

1743 
pSPI
->
SPI_IER
 = 
Êag
;

1744 
	}
}

1750 
__ölöe
 
	$AT91F_SPI_DißbÀIt
 (

1751 
AT91PS_SPI
 
pSPI
,

1752 
Êag
)

1755 
pSPI
->
SPI_IDR
 = 
Êag
;

1756 
	}
}

1762 
__ölöe
 
	$AT91F_SPI_Re£t
 (

1763 
AT91PS_SPI
 
pSPI


1767 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SWRST
;

1768 
	}
}

1774 
__ölöe
 
	$AT91F_SPI_E«bÀ
 (

1775 
AT91PS_SPI
 
pSPI


1779 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIEN
;

1780 
	}
}

1786 
__ölöe
 
	$AT91F_SPI_DißbÀ
 (

1787 
AT91PS_SPI
 
pSPI


1791 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1792 
	}
}

1798 
__ölöe
 
	$AT91F_SPI_CfgMode
 (

1799 
AT91PS_SPI
 
pSPI
,

1800 
mode
)

1803 
pSPI
->
SPI_MR
 = 
mode
;

1804 
	}
}

1810 
__ölöe
 
	$AT91F_SPI_CfgPCS
 (

1811 
AT91PS_SPI
 
pSPI
,

1812 
PCS_Devi˚
)

1815 
pSPI
->
SPI_MR
 &= 0xFFF0FFFF;

1816 
pSPI
->
SPI_MR
 |–(
PCS_Devi˚
<<16Ë& 
AT91C_SPI_PCS
 );

1817 
	}
}

1823 
__ölöe
 
	$AT91F_SPI_Re˚iveFøme
 (

1824 
AT91PS_SPI
 
pSPI
,

1825 *
pBuf„r
,

1826 
szBuf„r
,

1827 *
pNextBuf„r
,

1828 
szNextBuf„r
 )

1830  
	`AT91F_PDC_Re˚iveFøme
(

1831 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1832 
pBuf„r
,

1833 
szBuf„r
,

1834 
pNextBuf„r
,

1835 
szNextBuf„r
);

1836 
	}
}

1842 
__ölöe
 
	$AT91F_SPI_SídFøme
(

1843 
AT91PS_SPI
 
pSPI
,

1844 *
pBuf„r
,

1845 
szBuf„r
,

1846 *
pNextBuf„r
,

1847 
szNextBuf„r
 )

1849  
	`AT91F_PDC_SídFøme
(

1850 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1851 
pBuf„r
,

1852 
szBuf„r
,

1853 
pNextBuf„r
,

1854 
szNextBuf„r
);

1855 
	}
}

1861 
__ölöe
 
	$AT91F_SPI_Clo£
 (

1862 
AT91PS_SPI
 
pSPI
)

1865 
pSPI
->
SPI_CSR
[0] = 0 ;

1866 
pSPI
->
SPI_CSR
[1] = 0 ;

1867 
pSPI
->
SPI_CSR
[2] = 0 ;

1868 
pSPI
->
SPI_CSR
[3] = 0 ;

1871 
pSPI
->
SPI_MR
 = 0 ;

1874 
pSPI
->
SPI_IDR
 = 0xFFFFFFFF ;

1877 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
));

1880 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1881 
	}
}

1887 
__ölöe
 
	$AT91F_SPI_PutCh¨
 (

1888 
AT91PS_SPI
 
pSPI
,

1889 
ch¨a˘î
,

1890 
cs_numbî
 )

1892 
vÆue_f‹_cs
;

1893 
vÆue_f‹_cs
 = (~(1 << 
cs_numbî
)) & 0xF;

1894 
pSPI
->
SPI_TDR
 = (
ch¨a˘î
 & 0xFFFFË| (
vÆue_f‹_cs
 << 16);

1895 
	}
}

1901 
__ölöe
 
	$AT91F_SPI_GëCh¨
 (

1902 c⁄° 
AT91PS_SPI
 
pSPI
)

1904 ((
pSPI
->
SPI_RDR
) & 0xFFFF);

1905 
	}
}

1911 
__ölöe
 
	$AT91F_SPI_GëI¡îru±MaskSètus
(

1912 
AT91PS_SPI
 
pSpi
)

1914  
pSpi
->
SPI_IMR
;

1915 
	}
}

1921 
__ölöe
 
	$AT91F_SPI_IsI¡îru±Masked
(

1922 
AT91PS_SPI
 
pSpi
,

1923 
Êag
)

1925  (
	`AT91F_SPI_GëI¡îru±MaskSètus
(
pSpi
Ë& 
Êag
);

1926 
	}
}

1935 
	#AT91C_US_ASYNC_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

	)

1936 
	gAT91C_US_NBSTOP_1_BIT
 + \

1937 
	gAT91C_US_PAR_NONE
 + \

1938 
	gAT91C_US_CHRL_8_BITS
 + \

1939 
	gAT91C_US_CLKS_CLOCK
 )

1942 
	#AT91C_US_ASYNC_SCK_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

	)

1943 
	gAT91C_US_NBSTOP_1_BIT
 + \

1944 
	gAT91C_US_PAR_NONE
 + \

1945 
	gAT91C_US_CHRL_8_BITS
 + \

1946 
	gAT91C_US_CLKS_EXT
 )

1949 
	#AT91C_US_SYNC_MODE
 ( 
AT91C_US_SYNC
 + \

	)

1950 
	gAT91C_US_USMODE_NORMAL
 + \

1951 
	gAT91C_US_NBSTOP_1_BIT
 + \

1952 
	gAT91C_US_PAR_NONE
 + \

1953 
	gAT91C_US_CHRL_8_BITS
 + \

1954 
	gAT91C_US_CLKS_CLOCK
 )

1957 
	#AT91C_US_SCK_USED
 (
AT91C_US_CKLO
 | 
AT91C_US_CLKS_EXT
)

	)

1960 
	#AT91C_US_ISO_READER_MODE
 ( 
AT91C_US_USMODE_ISO7816_0
 + \

	)

1961 
	gAT91C_US_CLKS_CLOCK
 +\

1962 
	gAT91C_US_NBSTOP_1_BIT
 + \

1963 
	gAT91C_US_PAR_EVEN
 + \

1964 
	gAT91C_US_CHRL_8_BITS
 + \

1965 
	gAT91C_US_CKLO
 +\

1966 
	gAT91C_US_OVER
)

1969 
	#AT91C_US_ASYNC_IRDA_MODE
 ( 
AT91C_US_USMODE_IRDA
 + \

	)

1970 
	gAT91C_US_NBSTOP_1_BIT
 + \

1971 
	gAT91C_US_PAR_NONE
 + \

1972 
	gAT91C_US_CHRL_8_BITS
 + \

1973 
	gAT91C_US_CLKS_CLOCK
 )

1979 
__ölöe
 
	$AT91F_US_Baudøã
 (

1980 c⁄° 
maö_˛ock
,

1981 c⁄° 
baud_øã
)

1983 
baud_vÆue
 = ((
maö_˛ock
*10)/(
baud_øã
 * 16));

1984 i‡((
baud_vÆue
 % 10) >= 5)

1985 
baud_vÆue
 = (baud_value / 10) + 1;

1987 
baud_vÆue
 /= 10;

1988  
baud_vÆue
;

1989 
	}
}

1995 
__ölöe
 
	$AT91F_US_SëBaudøã
 (

1996 
AT91PS_USART
 
pUSART
,

1997 
maöClock
,

1998 
•ìd
)

2001 
pUSART
->
US_BRGR
 = 
	`AT91F_US_Baudøã
(
maöClock
, 
•ìd
);

2002 
	}
}

2008 
__ölöe
 
	$AT91F_US_SëTimegu¨d
 (

2009 
AT91PS_USART
 
pUSART
,

2010 
timegu¨d
)

2013 
pUSART
->
US_TTGR
 = 
timegu¨d
 ;

2014 
	}
}

2020 
__ölöe
 
	$AT91F_US_E«bÀIt
 (

2021 
AT91PS_USART
 
pUSART
,

2022 
Êag
)

2025 
pUSART
->
US_IER
 = 
Êag
;

2026 
	}
}

2032 
__ölöe
 
	$AT91F_US_DißbÀIt
 (

2033 
AT91PS_USART
 
pUSART
,

2034 
Êag
)

2037 
pUSART
->
US_IDR
 = 
Êag
;

2038 
	}
}

2044 
__ölöe
 
	$AT91F_US_C⁄figuª
 (

2045 
AT91PS_USART
 
pUSART
,

2046 
maöClock
,

2047 
mode
 ,

2048 
baudR©e
 ,

2049 
timegu¨d
 )

2052 
pUSART
->
US_IDR
 = () -1;

2055 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RXDIS
 | 
AT91C_US_TXDIS
 ;

2058 
	`AT91F_US_SëBaudøã
(
pUSART
, 
maöClock
, 
baudR©e
);

2061 
	`AT91F_US_SëTimegu¨d
(
pUSART
, 
timegu¨d
);

2064 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2067 
pUSART
->
US_MR
 = 
mode
 ;

2069 
	}
}

2075 
__ölöe
 
	$AT91F_US_E«bÀRx
 (

2076 
AT91PS_USART
 
pUSART
)

2079 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2080 
	}
}

2086 
__ölöe
 
	$AT91F_US_E«bÀTx
 (

2087 
AT91PS_USART
 
pUSART
)

2090 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2091 
	}
}

2097 
__ölöe
 
	$AT91F_US_Re£tRx
 (

2098 
AT91PS_USART
 
pUSART
)

2101 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
;

2103 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2104 
	}
}

2110 
__ölöe
 
	$AT91F_US_Re£tTx
 (

2111 
AT91PS_USART
 
pUSART
)

2114 
pUSART
->
US_CR
 = 
AT91C_US_RSTTX
;

2116 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2117 
	}
}

2123 
__ölöe
 
	$AT91F_US_DißbÀRx
 (

2124 
AT91PS_USART
 
pUSART
)

2127 
pUSART
->
US_CR
 = 
AT91C_US_RXDIS
;

2128 
	}
}

2134 
__ölöe
 
	$AT91F_US_DißbÀTx
 (

2135 
AT91PS_USART
 
pUSART
)

2138 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
;

2139 
	}
}

2145 
__ölöe
 
	$AT91F_US_Clo£
 (

2146 
AT91PS_USART
 
pUSART
)

2149 
pUSART
->
US_BRGR
 = 0 ;

2152 
pUSART
->
US_MR
 = 0 ;

2155 
pUSART
->
US_TTGR
 = 0;

2158 
pUSART
->
US_IDR
 = 0xFFFFFFFF ;

2161 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2164 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
 | 
AT91C_US_RXDIS
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RSTRX
 ;

2165 
	}
}

2171 
__ölöe
 
	$AT91F_US_TxRódy
 (

2172 
AT91PS_USART
 
pUSART
 )

2174  (
pUSART
->
US_CSR
 & 
AT91C_US_TXRDY
);

2175 
	}
}

2181 
__ölöe
 
	$AT91F_US_RxRódy
 (

2182 
AT91PS_USART
 
pUSART
 )

2184  (
pUSART
->
US_CSR
 & 
AT91C_US_RXRDY
);

2185 
	}
}

2191 
__ölöe
 
	$AT91F_US_Eº‹
 (

2192 
AT91PS_USART
 
pUSART
 )

2194  (
pUSART
->
US_CSR
 &

2195 (
AT91C_US_OVRE
 |

2196 
AT91C_US_FRAME
 |

2197 
AT91C_US_PARE
));

2198 
	}
}

2204 
__ölöe
 
	$AT91F_US_PutCh¨
 (

2205 
AT91PS_USART
 
pUSART
,

2206 
ch¨a˘î
 )

2208 
pUSART
->
US_THR
 = (
ch¨a˘î
 & 0x1FF);

2209 
	}
}

2215 
__ölöe
 
	$AT91F_US_GëCh¨
 (

2216 c⁄° 
AT91PS_USART
 
pUSART
)

2218 ((
pUSART
->
US_RHR
) & 0x1FF);

2219 
	}
}

2225 
__ölöe
 
	$AT91F_US_SídFøme
(

2226 
AT91PS_USART
 
pUSART
,

2227 *
pBuf„r
,

2228 
szBuf„r
,

2229 *
pNextBuf„r
,

2230 
szNextBuf„r
 )

2232  
	`AT91F_PDC_SídFøme
(

2233 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2234 
pBuf„r
,

2235 
szBuf„r
,

2236 
pNextBuf„r
,

2237 
szNextBuf„r
);

2238 
	}
}

2244 
__ölöe
 
	$AT91F_US_Re˚iveFøme
 (

2245 
AT91PS_USART
 
pUSART
,

2246 *
pBuf„r
,

2247 
szBuf„r
,

2248 *
pNextBuf„r
,

2249 
szNextBuf„r
 )

2251  
	`AT91F_PDC_Re˚iveFøme
(

2252 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2253 
pBuf„r
,

2254 
szBuf„r
,

2255 
pNextBuf„r
,

2256 
szNextBuf„r
);

2257 
	}
}

2263 
__ölöe
 
	$AT91F_US_SëIrdaFûãr
 (

2264 
AT91PS_USART
 
pUSART
,

2265 
vÆue


2268 
pUSART
->
US_IF
 = 
vÆue
;

2269 
	}
}

2279 
	#AT91C_I2S_ASY_MASTER_TX_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)–+\

	)

2280 
	gAT91C_SSC_CKS_DIV
 +\

2281 
	gAT91C_SSC_CKO_CONTINOUS
 +\

2282 
	gAT91C_SSC_CKG_NONE
 +\

2283 
	gAT91C_SSC_START_FALL_RF
 +\

2284 
	gAT91C_SSC_STTOUT
 +\

2285 ((1<<16Ë& 
	gAT91C_SSC_STTDLY
) +\

2286 ((((
nb_bô_by_¶Ÿ
*
	gnb_¶Ÿ_by_‰ame
)/2)-1) <<24))

2292 
	#AT91C_I2S_ASY_TX_FRAME_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)–+\

	)

2293 (
	gnb_bô_by_¶Ÿ
-1) +\

2294 
	gAT91C_SSC_MSBF
 +\

2295 (((
	gnb_¶Ÿ_by_‰ame
-1)<<8Ë& 
	gAT91C_SSC_DATNB
) +\

2296 (((
	gnb_bô_by_¶Ÿ
-1)<<16Ë& 
	gAT91C_SSC_FSLEN
) +\

2297 
	gAT91C_SSC_FSOS_NEGATIVE
)

2304 
__ölöe
 
	$AT91F_SSC_SëBaudøã
 (

2305 
AT91PS_SSC
 
pSSC
,

2306 
maöClock
,

2307 
•ìd
)

2309 
baud_vÆue
;

2311 i‡(
•ìd
 == 0)

2312 
baud_vÆue
 = 0;

2315 
baud_vÆue
 = (Ë(
maöClock
 * 10)/(2*
•ìd
);

2316 i‡((
baud_vÆue
 % 10) >= 5)

2317 
baud_vÆue
 = (baud_value / 10) + 1;

2319 
baud_vÆue
 /= 10;

2322 
pSSC
->
SSC_CMR
 = 
baud_vÆue
;

2323 
	}
}

2329 
__ölöe
 
	$AT91F_SSC_C⁄figuª
 (

2330 
AT91PS_SSC
 
pSSC
,

2331 
sy°_˛ock
,

2332 
baud_øã
,

2333 
˛ock_rx
,

2334 
mode_rx
,

2335 
˛ock_tx
,

2336 
mode_tx
)

2339 
pSSC
->
SSC_IDR
 = () -1;

2342 
pSSC
->
SSC_CR
 = 
AT91C_SSC_SWRST
 | 
AT91C_SSC_RXDIS
 | 
AT91C_SSC_TXDIS
 ;

2345 
	`AT91F_SSC_SëBaudøã
(
pSSC
, 
sy°_˛ock
, 
baud_øã
);

2348 
pSSC
->
SSC_RCMR
 = 
˛ock_rx
;

2351 
pSSC
->
SSC_TCMR
 = 
˛ock_tx
;

2354 
pSSC
->
SSC_RFMR
 = 
mode_rx
;

2357 
pSSC
->
SSC_TFMR
 = 
mode_tx
;

2360 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
));

2363 
	}
}

2369 
__ölöe
 
	$AT91F_SSC_E«bÀRx
 (

2370 
AT91PS_SSC
 
pSSC
)

2373 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXEN
;

2374 
	}
}

2380 
__ölöe
 
	$AT91F_SSC_DißbÀRx
 (

2381 
AT91PS_SSC
 
pSSC
)

2384 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXDIS
;

2385 
	}
}

2391 
__ölöe
 
	$AT91F_SSC_E«bÀTx
 (

2392 
AT91PS_SSC
 
pSSC
)

2395 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXEN
;

2396 
	}
}

2402 
__ölöe
 
	$AT91F_SSC_DißbÀTx
 (

2403 
AT91PS_SSC
 
pSSC
)

2406 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXDIS
;

2407 
	}
}

2413 
__ölöe
 
	$AT91F_SSC_E«bÀIt
 (

2414 
AT91PS_SSC
 
pSSC
,

2415 
Êag
)

2418 
pSSC
->
SSC_IER
 = 
Êag
;

2419 
	}
}

2425 
__ölöe
 
	$AT91F_SSC_DißbÀIt
 (

2426 
AT91PS_SSC
 
pSSC
,

2427 
Êag
)

2430 
pSSC
->
SSC_IDR
 = 
Êag
;

2431 
	}
}

2437 
__ölöe
 
	$AT91F_SSC_Re˚iveFøme
 (

2438 
AT91PS_SSC
 
pSSC
,

2439 *
pBuf„r
,

2440 
szBuf„r
,

2441 *
pNextBuf„r
,

2442 
szNextBuf„r
 )

2444  
	`AT91F_PDC_Re˚iveFøme
(

2445 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2446 
pBuf„r
,

2447 
szBuf„r
,

2448 
pNextBuf„r
,

2449 
szNextBuf„r
);

2450 
	}
}

2456 
__ölöe
 
	$AT91F_SSC_SídFøme
(

2457 
AT91PS_SSC
 
pSSC
,

2458 *
pBuf„r
,

2459 
szBuf„r
,

2460 *
pNextBuf„r
,

2461 
szNextBuf„r
 )

2463  
	`AT91F_PDC_SídFøme
(

2464 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2465 
pBuf„r
,

2466 
szBuf„r
,

2467 
pNextBuf„r
,

2468 
szNextBuf„r
);

2469 
	}
}

2475 
__ölöe
 
	$AT91F_SSC_GëI¡îru±MaskSètus
(

2476 
AT91PS_SSC
 
pSsc
)

2478  
pSsc
->
SSC_IMR
;

2479 
	}
}

2485 
__ölöe
 
	$AT91F_SSC_IsI¡îru±Masked
(

2486 
AT91PS_SSC
 
pSsc
,

2487 
Êag
)

2489  (
	`AT91F_SSC_GëI¡îru±MaskSètus
(
pSsc
Ë& 
Êag
);

2490 
	}
}

2499 
__ölöe
 
	$AT91F_TWI_E«bÀIt
 (

2500 
AT91PS_TWI
 
pTWI
,

2501 
Êag
)

2504 
pTWI
->
TWI_IER
 = 
Êag
;

2505 
	}
}

2511 
__ölöe
 
	$AT91F_TWI_DißbÀIt
 (

2512 
AT91PS_TWI
 
pTWI
,

2513 
Êag
)

2516 
pTWI
->
TWI_IDR
 = 
Êag
;

2517 
	}
}

2523 
__ölöe
 
	$AT91F_TWI_C⁄figuª
 ( 
AT91PS_TWI
 
pTWI
 )

2526 
pTWI
->
TWI_IDR
 = () -1;

2529 
pTWI
->
TWI_CR
 = 
AT91C_TWI_SWRST
;

2532 
pTWI
->
TWI_CR
 = 
AT91C_TWI_MSEN
;

2534 
	}
}

2540 
__ölöe
 
	$AT91F_TWI_GëI¡îru±MaskSètus
(

2541 
AT91PS_TWI
 
pTwi
)

2543  
pTwi
->
TWI_IMR
;

2544 
	}
}

2550 
__ölöe
 
	$AT91F_TWI_IsI¡îru±Masked
(

2551 
AT91PS_TWI
 
pTwi
,

2552 
Êag
)

2554  (
	`AT91F_TWI_GëI¡îru±MaskSètus
(
pTwi
Ë& 
Êag
);

2555 
	}
}

2564 
__ölöe
 
	$AT91F_PWMC_GëSètus
(

2565 
AT91PS_PWMC
 
pPWM
)

2567  
pPWM
->
PWMC_SR
;

2568 
	}
}

2574 
__ölöe
 
	$AT91F_PWMC_I¡îru±E«bÀ
(

2575 
AT91PS_PWMC
 
pPwm
,

2576 
Êag
)

2578 
pPwm
->
PWMC_IER
 = 
Êag
;

2579 
	}
}

2585 
__ölöe
 
	$AT91F_PWMC_I¡îru±DißbÀ
(

2586 
AT91PS_PWMC
 
pPwm
,

2587 
Êag
)

2589 
pPwm
->
PWMC_IDR
 = 
Êag
;

2590 
	}
}

2596 
__ölöe
 
	$AT91F_PWMC_GëI¡îru±MaskSètus
(

2597 
AT91PS_PWMC
 
pPwm
)

2599  
pPwm
->
PWMC_IMR
;

2600 
	}
}

2606 
__ölöe
 
	$AT91F_PWMC_IsI¡îru±Masked
(

2607 
AT91PS_PWMC
 
pPWM
,

2608 
Êag
)

2610  (
	`AT91F_PWMC_GëI¡îru±MaskSètus
(
pPWM
Ë& 
Êag
);

2611 
	}
}

2617 
__ölöe
 
	$AT91F_PWMC_IsSètusSë
(

2618 
AT91PS_PWMC
 
pPWM
,

2619 
Êag
)

2621  (
	`AT91F_PWMC_GëSètus
(
pPWM
Ë& 
Êag
);

2622 
	}
}

2628 
__ölöe
 
	$AT91F_PWMC_CfgCh™√l
(

2629 
AT91PS_PWMC
 
pPWM
,

2630 
ch™√lId
,

2631 
mode
,

2632 
≥riod
,

2633 
duty
)

2635 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CMR
 = 
mode
;

2636 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CDTYR
 = 
duty
;

2637 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CPRDR
 = 
≥riod
;

2638 
	}
}

2644 
__ölöe
 
	$AT91F_PWMC_SèπCh™√l
(

2645 
AT91PS_PWMC
 
pPWM
,

2646 
Êag
)

2648 
pPWM
->
PWMC_ENA
 = 
Êag
;

2649 
	}
}

2655 
__ölöe
 
	$AT91F_PWMC_St›Ch™√l
(

2656 
AT91PS_PWMC
 
pPWM
,

2657 
Êag
)

2659 
pPWM
->
PWMC_DIS
 = 
Êag
;

2660 
	}
}

2666 
__ölöe
 
	$AT91F_PWMC_Upd©eCh™√l
(

2667 
AT91PS_PWMC
 
pPWM
,

2668 
ch™√lId
,

2669 
upd©e
)

2671 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CUPDR
 = 
upd©e
;

2672 
	}
}

2681 
__ölöe
 
	$AT91F_UDP_E«bÀIt
 (

2682 
AT91PS_UDP
 
pUDP
,

2683 
Êag
)

2686 
pUDP
->
UDP_IER
 = 
Êag
;

2687 
	}
}

2693 
__ölöe
 
	$AT91F_UDP_DißbÀIt
 (

2694 
AT91PS_UDP
 
pUDP
,

2695 
Êag
)

2698 
pUDP
->
UDP_IDR
 = 
Êag
;

2699 
	}
}

2705 
__ölöe
 
	$AT91F_UDP_SëAddªss
 (

2706 
AT91PS_UDP
 
pUDP
,

2707 
addªss
)

2709 
pUDP
->
UDP_FADDR
 = (
AT91C_UDP_FEN
 | 
addªss
);

2710 
	}
}

2716 
__ölöe
 
	$AT91F_UDP_E«bÀEp
 (

2717 
AT91PS_UDP
 
pUDP
,

2718 
ídpoöt
)

2720 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_EPEDS
;

2721 
	}
}

2727 
__ölöe
 
	$AT91F_UDP_DißbÀEp
 (

2728 
AT91PS_UDP
 
pUDP
,

2729 
ídpoöt
)

2731 
pUDP
->
UDP_CSR
[
ídpoöt
] &~
AT91C_UDP_EPEDS
;

2732 
	}
}

2738 
__ölöe
 
	$AT91F_UDP_SëSèã
 (

2739 
AT91PS_UDP
 
pUDP
,

2740 
Êag
)

2742 
pUDP
->
UDP_GLBSTATE
 &~(
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
);

2743 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2744 
	}
}

2750 
__ölöe
 
	$AT91F_UDP_GëSèã
 (

2751 
AT91PS_UDP
 
pUDP
)

2753  (
pUDP
->
UDP_GLBSTATE
 & (
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
));

2754 
	}
}

2760 
__ölöe
 
	$AT91F_UDP_Re£tEp
 (

2761 
AT91PS_UDP
 
pUDP
,

2762 
Êag
)

2764 
pUDP
->
UDP_RSTEP
 = 
Êag
;

2765 
pUDP
->
UDP_RSTEP
 = 0;

2766 
	}
}

2772 
__ölöe
 
	$AT91F_UDP_EpSèŒ
(

2773 
AT91PS_UDP
 
pUDP
,

2774 
ídpoöt
)

2776 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_FORCESTALL
;

2777 
	}
}

2783 
__ölöe
 
	$AT91F_UDP_EpWrôe
(

2784 
AT91PS_UDP
 
pUDP
,

2785 
ídpoöt
,

2786 
vÆue
)

2788 
pUDP
->
UDP_FDR
[
ídpoöt
] = 
vÆue
;

2789 
	}
}

2795 
__ölöe
 
	$AT91F_UDP_EpRód
(

2796 
AT91PS_UDP
 
pUDP
,

2797 
ídpoöt
)

2799  
pUDP
->
UDP_FDR
[
ídpoöt
];

2800 
	}
}

2806 
__ölöe
 
	$AT91F_UDP_EpEndOfWr
(

2807 
AT91PS_UDP
 
pUDP
,

2808 
ídpoöt
)

2810 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_TXPKTRDY
;

2811 
	}
}

2817 
__ölöe
 
	$AT91F_UDP_EpCÀ¨
(

2818 
AT91PS_UDP
 
pUDP
,

2819 
ídpoöt
,

2820 
Êag
)

2822 
pUDP
->
UDP_CSR
[
ídpoöt
] &~(
Êag
);

2823 
	}
}

2829 
__ölöe
 
	$AT91F_UDP_EpSë
(

2830 
AT91PS_UDP
 
pUDP
,

2831 
ídpoöt
,

2832 
Êag
)

2834 
pUDP
->
UDP_CSR
[
ídpoöt
] |
Êag
;

2835 
	}
}

2841 
__ölöe
 
	$AT91F_UDP_EpSètus
(

2842 
AT91PS_UDP
 
pUDP
,

2843 
ídpoöt
)

2845  
pUDP
->
UDP_CSR
[
ídpoöt
];

2846 
	}
}

2852 
__ölöe
 
	$AT91F_UDP_GëI¡îru±MaskSètus
(

2853 
AT91PS_UDP
 
pUdp
)

2855  
pUdp
->
UDP_IMR
;

2856 
	}
}

2862 
__ölöe
 
	$AT91F_UDP_IsI¡îru±Masked
(

2863 
AT91PS_UDP
 
pUdp
,

2864 
Êag
)

2866  (
	`AT91F_UDP_GëI¡îru±MaskSètus
(
pUdp
Ë& 
Êag
);

2867 
	}
}

2876 
__ölöe
 
	$AT91F_TC_I¡îru±E«bÀ
(

2877 
AT91PS_TC
 
pTc
,

2878 
Êag
)

2880 
pTc
->
TC_IER
 = 
Êag
;

2881 
	}
}

2887 
__ölöe
 
	$AT91F_TC_I¡îru±DißbÀ
(

2888 
AT91PS_TC
 
pTc
,

2889 
Êag
)

2891 
pTc
->
TC_IDR
 = 
Êag
;

2892 
	}
}

2898 
__ölöe
 
	$AT91F_TC_GëI¡îru±MaskSètus
(

2899 
AT91PS_TC
 
pTc
)

2901  
pTc
->
TC_IMR
;

2902 
	}
}

2908 
__ölöe
 
	$AT91F_TC_IsI¡îru±Masked
(

2909 
AT91PS_TC
 
pTc
,

2910 
Êag
)

2912  (
	`AT91F_TC_GëI¡îru±MaskSètus
(
pTc
Ë& 
Êag
);

2913 
	}
}

2918 
	#STANDARD_FORMAT
 0

	)

2919 
	#EXTENDED_FORMAT
 1

	)

2925 
__ölöe
 
	$AT91F_InôMaûboxRegi°îs
(
AT91PS_CAN_MB
 
CAN_Maûbox
,

2926 
mode_ªg
,

2927 
ac˚±™˚_mask_ªg
,

2928 
id_ªg
,

2929 
d©a_low_ªg
,

2930 
d©a_high_ªg
,

2931 
c⁄åﬁ_ªg
)

2933 
CAN_Maûbox
->
CAN_MB_MCR
 = 0x0;

2934 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode_ªg
;

2935 
CAN_Maûbox
->
CAN_MB_MAM
 = 
ac˚±™˚_mask_ªg
;

2936 
CAN_Maûbox
->
CAN_MB_MID
 = 
id_ªg
;

2937 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a_low_ªg
;

2938 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a_high_ªg
;

2939 
CAN_Maûbox
->
CAN_MB_MCR
 = 
c⁄åﬁ_ªg
;

2940 
	}
}

2946 
__ölöe
 
	$AT91F_E«bÀCAN
(

2947 
AT91PS_CAN
 
pCAN
)

2949 
pCAN
->
CAN_MR
 |
AT91C_CAN_CANEN
;

2952  (
pCAN
->
CAN_SR
 & 
AT91C_CAN_WAKEUP
) != AT91C_CAN_WAKEUP );

2953 
	}
}

2959 
__ölöe
 
	$AT91F_DißbÀCAN
(

2960 
AT91PS_CAN
 
pCAN
)

2962 
pCAN
->
CAN_MR
 &~
AT91C_CAN_CANEN
;

2963 
	}
}

2969 
__ölöe
 
	$AT91F_CAN_E«bÀIt
 (

2970 
AT91PS_CAN
 
pCAN
,

2971 
Êag
)

2974 
pCAN
->
CAN_IER
 = 
Êag
;

2975 
	}
}

2981 
__ölöe
 
	$AT91F_CAN_DißbÀIt
 (

2982 
AT91PS_CAN
 
pCAN
,

2983 
Êag
)

2986 
pCAN
->
CAN_IDR
 = 
Êag
;

2987 
	}
}

2993 
__ölöe
 
	$AT91F_CAN_GëSètus
(

2994 
AT91PS_CAN
 
pCAN
)

2996  
pCAN
->
CAN_SR
;

2997 
	}
}

3003 
__ölöe
 
	$AT91F_CAN_GëI¡îru±MaskSètus
(

3004 
AT91PS_CAN
 
pCAN
)

3006  
pCAN
->
CAN_IMR
;

3007 
	}
}

3013 
__ölöe
 
	$AT91F_CAN_IsI¡îru±Masked
(

3014 
AT91PS_CAN
 
pCAN
,

3015 
Êag
)

3017  (
	`AT91F_CAN_GëI¡îru±MaskSètus
(
pCAN
Ë& 
Êag
);

3018 
	}
}

3024 
__ölöe
 
	$AT91F_CAN_IsSètusSë
(

3025 
AT91PS_CAN
 
pCAN
,

3026 
Êag
)

3028  (
	`AT91F_CAN_GëSètus
(
pCAN
Ë& 
Êag
);

3029 
	}
}

3035 
__ölöe
 
	$AT91F_CAN_CfgModeReg
 (

3036 
AT91PS_CAN
 
pCAN
,

3037 
mode
)

3040 
pCAN
->
CAN_MR
 = 
mode
;

3041 
	}
}

3047 
__ölöe
 
	$AT91F_CAN_GëModeReg
 (

3048 
AT91PS_CAN
 
pCAN


3051  
pCAN
->
CAN_MR
;

3052 
	}
}

3058 
__ölöe
 
	$AT91F_CAN_CfgBaudøãReg
 (

3059 
AT91PS_CAN
 
pCAN
,

3060 
baudøã_cfg
)

3063 
pCAN
->
CAN_BR
 = 
baudøã_cfg
;

3064 
	}
}

3070 
__ölöe
 
	$AT91F_CAN_GëBaudøã
 (

3071 
AT91PS_CAN
 
pCAN


3074  
pCAN
->
CAN_BR
;

3075 
	}
}

3081 
__ölöe
 
	$AT91F_CAN_GëI¡î«lCou¡î
 (

3082 
AT91PS_CAN
 
pCAN


3085  
pCAN
->
CAN_TIM
;

3086 
	}
}

3092 
__ölöe
 
	$AT91F_CAN_GëTime°amp
 (

3093 
AT91PS_CAN
 
pCAN


3096  
pCAN
->
CAN_TIMESTP
;

3097 
	}
}

3103 
__ölöe
 
	$AT91F_CAN_GëEº‹Cou¡î
 (

3104 
AT91PS_CAN
 
pCAN


3107  
pCAN
->
CAN_ECR
;

3108 
	}
}

3114 
__ölöe
 
	$AT91F_CAN_InôTøns„rReque°
 (

3115 
AT91PS_CAN
 
pCAN
,

3116 
å™s„r_cmd
)

3118 
pCAN
->
CAN_TCR
 = 
å™s„r_cmd
;

3119 
	}
}

3125 
__ölöe
 
	$AT91F_CAN_InôAb‹tReque°
 (

3126 
AT91PS_CAN
 
pCAN
,

3127 
ab‹t_cmd
)

3129 
pCAN
->
CAN_ACR
 = 
ab‹t_cmd
;

3130 
	}
}

3136 
__ölöe
 
	$AT91F_CAN_CfgMesßgeModeReg
 (

3137 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3138 
mode
)

3140 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode
;

3141 
	}
}

3147 
__ölöe
 
	$AT91F_CAN_GëMesßgeModeReg
 (

3148 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3150  
CAN_Maûbox
->
CAN_MB_MMR
;

3151 
	}
}

3158 
__ölöe
 
	$AT91F_CAN_CfgMesßgeIDReg
 (

3159 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3160 
id
,

3161 
vîsi⁄
)

3163 if(
vîsi⁄
==0)

3164 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
<<18;

3166 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
 | (1<<29);

3167 
	}
}

3173 
__ölöe
 
	$AT91F_CAN_GëMesßgeIDReg
 (

3174 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3176  
CAN_Maûbox
->
CAN_MB_MID
;

3177 
	}
}

3183 
__ölöe
 
	$AT91F_CAN_CfgMesßgeAc˚±™˚MaskReg
 (

3184 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3185 
mask
)

3187 
CAN_Maûbox
->
CAN_MB_MAM
 = 
mask
;

3188 
	}
}

3194 
__ölöe
 
	$AT91F_CAN_GëMesßgeAc˚±™˚MaskReg
 (

3195 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3197  
CAN_Maûbox
->
CAN_MB_MAM
;

3198 
	}
}

3204 
__ölöe
 
	$AT91F_CAN_GëFamûyID
 (

3205 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3207  
CAN_Maûbox
->
CAN_MB_MFID
;

3208 
	}
}

3214 
__ölöe
 
	$AT91F_CAN_CfgMesßgeCålReg
 (

3215 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3216 
mesßge_˘æ_cmd
)

3218 
CAN_Maûbox
->
CAN_MB_MCR
 = 
mesßge_˘æ_cmd
;

3219 
	}
}

3225 
__ölöe
 
	$AT91F_CAN_GëMesßgeSètus
 (

3226 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3228  
CAN_Maûbox
->
CAN_MB_MSR
;

3229 
	}
}

3235 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aLow
 (

3236 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3237 
d©a
)

3239 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a
;

3240 
	}
}

3246 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aLow
 (

3247 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3249  
CAN_Maûbox
->
CAN_MB_MDL
;

3250 
	}
}

3256 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aHigh
 (

3257 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3258 
d©a
)

3260 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a
;

3261 
	}
}

3267 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aHigh
 (

3268 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3270  
CAN_Maûbox
->
CAN_MB_MDH
;

3271 
	}
}

3277 
__ölöe
 
	$AT91F_CAN_O≥n
 (

3278 c⁄° 
nuŒ
)

3282 
	}
}

3290 
__ölöe
 
	$AT91F_ADC_E«bÀIt
 (

3291 
AT91PS_ADC
 
pADC
,

3292 
Êag
)

3295 
pADC
->
ADC_IER
 = 
Êag
;

3296 
	}
}

3302 
__ölöe
 
	$AT91F_ADC_DißbÀIt
 (

3303 
AT91PS_ADC
 
pADC
,

3304 
Êag
)

3307 
pADC
->
ADC_IDR
 = 
Êag
;

3308 
	}
}

3314 
__ölöe
 
	$AT91F_ADC_GëSètus
(

3315 
AT91PS_ADC
 
pADC
)

3317  
pADC
->
ADC_SR
;

3318 
	}
}

3324 
__ölöe
 
	$AT91F_ADC_GëI¡îru±MaskSètus
(

3325 
AT91PS_ADC
 
pADC
)

3327  
pADC
->
ADC_IMR
;

3328 
	}
}

3334 
__ölöe
 
	$AT91F_ADC_IsI¡îru±Masked
(

3335 
AT91PS_ADC
 
pADC
,

3336 
Êag
)

3338  (
	`AT91F_ADC_GëI¡îru±MaskSètus
(
pADC
Ë& 
Êag
);

3339 
	}
}

3345 
__ölöe
 
	$AT91F_ADC_IsSètusSë
(

3346 
AT91PS_ADC
 
pADC
,

3347 
Êag
)

3349  (
	`AT91F_ADC_GëSètus
(
pADC
Ë& 
Êag
);

3350 
	}
}

3356 
__ölöe
 
	$AT91F_ADC_CfgModeReg
 (

3357 
AT91PS_ADC
 
pADC
,

3358 
mode
)

3361 
pADC
->
ADC_MR
 = 
mode
;

3362 
	}
}

3368 
__ölöe
 
	$AT91F_ADC_GëModeReg
 (

3369 
AT91PS_ADC
 
pADC


3372  
pADC
->
ADC_MR
;

3373 
	}
}

3379 
__ölöe
 
	$AT91F_ADC_CfgTimögs
 (

3380 
AT91PS_ADC
 
pADC
,

3381 
mck_˛ock
,

3382 
adc_˛ock
,

3383 
°¨tup_time
,

3384 
ßm∂e_™d_hﬁd_time
)

3386 
¥esˇl
,
°¨tup
,
shtim
;

3388 
¥esˇl
 = 
mck_˛ock
/(2*
adc_˛ock
) - 1;

3389 
°¨tup
 = 
adc_˛ock
*
°¨tup_time
/8 - 1;

3390 
shtim
 = 
adc_˛ock
*
ßm∂e_™d_hﬁd_time
/1000 - 1;

3393 
pADC
->
ADC_MR
 = ( (
¥esˇl
<<8Ë& 
AT91C_ADC_PRESCAL
Ë| ( (
°¨tup
<<16Ë& 
AT91C_ADC_STARTUP
Ë| ( (
shtim
<<24Ë& 
AT91C_ADC_SHTIM
);

3394 
	}
}

3400 
__ölöe
 
	$AT91F_ADC_E«bÀCh™√l
 (

3401 
AT91PS_ADC
 
pADC
,

3402 
ch™√l
)

3405 
pADC
->
ADC_CHER
 = 
ch™√l
;

3406 
	}
}

3412 
__ölöe
 
	$AT91F_ADC_DißbÀCh™√l
 (

3413 
AT91PS_ADC
 
pADC
,

3414 
ch™√l
)

3417 
pADC
->
ADC_CHDR
 = 
ch™√l
;

3418 
	}
}

3424 
__ölöe
 
	$AT91F_ADC_GëCh™√lSètus
 (

3425 
AT91PS_ADC
 
pADC


3428  
pADC
->
ADC_CHSR
;

3429 
	}
}

3435 
__ölöe
 
	$AT91F_ADC_SèπC⁄vîsi⁄
 (

3436 
AT91PS_ADC
 
pADC


3439 
pADC
->
ADC_CR
 = 
AT91C_ADC_START
;

3440 
	}
}

3446 
__ölöe
 
	$AT91F_ADC_So·Re£t
 (

3447 
AT91PS_ADC
 
pADC


3450 
pADC
->
ADC_CR
 = 
AT91C_ADC_SWRST
;

3451 
	}
}

3457 
__ölöe
 
	$AT91F_ADC_GëLa°C⁄vîãdD©a
 (

3458 
AT91PS_ADC
 
pADC


3461  
pADC
->
ADC_LCDR
;

3462 
	}
}

3468 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH0
 (

3469 
AT91PS_ADC
 
pADC


3472  
pADC
->
ADC_CDR0
;

3473 
	}
}

3479 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH1
 (

3480 
AT91PS_ADC
 
pADC


3483  
pADC
->
ADC_CDR1
;

3484 
	}
}

3490 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH2
 (

3491 
AT91PS_ADC
 
pADC


3494  
pADC
->
ADC_CDR2
;

3495 
	}
}

3501 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH3
 (

3502 
AT91PS_ADC
 
pADC


3505  
pADC
->
ADC_CDR3
;

3506 
	}
}

3512 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH4
 (

3513 
AT91PS_ADC
 
pADC


3516  
pADC
->
ADC_CDR4
;

3517 
	}
}

3523 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH5
 (

3524 
AT91PS_ADC
 
pADC


3527  
pADC
->
ADC_CDR5
;

3528 
	}
}

3534 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH6
 (

3535 
AT91PS_ADC
 
pADC


3538  
pADC
->
ADC_CDR6
;

3539 
	}
}

3545 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH7
 (

3546 
AT91PS_ADC
 
pADC


3549  
pADC
->
ADC_CDR7
;

3550 
	}
}

3559 
__ölöe
 
	$AT91F_AES_E«bÀIt
 (

3560 
AT91PS_AES
 
pAES
,

3561 
Êag
)

3564 
pAES
->
AES_IER
 = 
Êag
;

3565 
	}
}

3571 
__ölöe
 
	$AT91F_AES_DißbÀIt
 (

3572 
AT91PS_AES
 
pAES
,

3573 
Êag
)

3576 
pAES
->
AES_IDR
 = 
Êag
;

3577 
	}
}

3583 
__ölöe
 
	$AT91F_AES_GëSètus
(

3584 
AT91PS_AES
 
pAES
)

3586  
pAES
->
AES_ISR
;

3587 
	}
}

3593 
__ölöe
 
	$AT91F_AES_GëI¡îru±MaskSètus
(

3594 
AT91PS_AES
 
pAES
)

3596  
pAES
->
AES_IMR
;

3597 
	}
}

3603 
__ölöe
 
	$AT91F_AES_IsI¡îru±Masked
(

3604 
AT91PS_AES
 
pAES
,

3605 
Êag
)

3607  (
	`AT91F_AES_GëI¡îru±MaskSètus
(
pAES
Ë& 
Êag
);

3608 
	}
}

3614 
__ölöe
 
	$AT91F_AES_IsSètusSë
(

3615 
AT91PS_AES
 
pAES
,

3616 
Êag
)

3618  (
	`AT91F_AES_GëSètus
(
pAES
Ë& 
Êag
);

3619 
	}
}

3625 
__ölöe
 
	$AT91F_AES_CfgModeReg
 (

3626 
AT91PS_AES
 
pAES
,

3627 
mode
)

3630 
pAES
->
AES_MR
 = 
mode
;

3631 
	}
}

3637 
__ölöe
 
	$AT91F_AES_GëModeReg
 (

3638 
AT91PS_AES
 
pAES


3641  
pAES
->
AES_MR
;

3642 
	}
}

3648 
__ölöe
 
	$AT91F_AES_SèπPro˚ssög
 (

3649 
AT91PS_AES
 
pAES


3652 
pAES
->
AES_CR
 = 
AT91C_AES_START
;

3653 
	}
}

3659 
__ölöe
 
	$AT91F_AES_So·Re£t
 (

3660 
AT91PS_AES
 
pAES


3663 
pAES
->
AES_CR
 = 
AT91C_AES_SWRST
;

3664 
	}
}

3670 
__ölöe
 
	$AT91F_AES_LﬂdNewSìd
 (

3671 
AT91PS_AES
 
pAES


3674 
pAES
->
AES_CR
 = 
AT91C_AES_LOADSEED
;

3675 
	}
}

3681 
__ölöe
 
	$AT91F_AES_SëCry±oKey
 (

3682 
AT91PS_AES
 
pAES
,

3683 
ödex
,

3684 
keyw‹d


3687 
pAES
->
AES_KEYWxR
[
ödex
] = 
keyw‹d
;

3688 
	}
}

3694 
__ölöe
 
	$AT91F_AES_I≈utD©a
 (

3695 
AT91PS_AES
 
pAES
,

3696 
ödex
,

3697 
öd©a


3700 
pAES
->
AES_IDATAxR
[
ödex
] = 
öd©a
;

3701 
	}
}

3707 
__ölöe
 
	$AT91F_AES_GëOuçutD©a
 (

3708 
AT91PS_AES
 
pAES
,

3709 
ödex


3712  
pAES
->
AES_ODATAxR
[
ödex
];

3713 
	}
}

3719 
__ölöe
 
	$AT91F_AES_SëInôüliz©i⁄Ve˘‹
 (

3720 
AT91PS_AES
 
pAES
,

3721 
ödex
,

3722 
öôve˘‹


3725 
pAES
->
AES_IVxR
[
ödex
] = 
öôve˘‹
;

3726 
	}
}

3735 
__ölöe
 
	$AT91F_TDES_E«bÀIt
 (

3736 
AT91PS_TDES
 
pTDES
,

3737 
Êag
)

3740 
pTDES
->
TDES_IER
 = 
Êag
;

3741 
	}
}

3747 
__ölöe
 
	$AT91F_TDES_DißbÀIt
 (

3748 
AT91PS_TDES
 
pTDES
,

3749 
Êag
)

3752 
pTDES
->
TDES_IDR
 = 
Êag
;

3753 
	}
}

3759 
__ölöe
 
	$AT91F_TDES_GëSètus
(

3760 
AT91PS_TDES
 
pTDES
)

3762  
pTDES
->
TDES_ISR
;

3763 
	}
}

3769 
__ölöe
 
	$AT91F_TDES_GëI¡îru±MaskSètus
(

3770 
AT91PS_TDES
 
pTDES
)

3772  
pTDES
->
TDES_IMR
;

3773 
	}
}

3779 
__ölöe
 
	$AT91F_TDES_IsI¡îru±Masked
(

3780 
AT91PS_TDES
 
pTDES
,

3781 
Êag
)

3783  (
	`AT91F_TDES_GëI¡îru±MaskSètus
(
pTDES
Ë& 
Êag
);

3784 
	}
}

3790 
__ölöe
 
	$AT91F_TDES_IsSètusSë
(

3791 
AT91PS_TDES
 
pTDES
,

3792 
Êag
)

3794  (
	`AT91F_TDES_GëSètus
(
pTDES
Ë& 
Êag
);

3795 
	}
}

3801 
__ölöe
 
	$AT91F_TDES_CfgModeReg
 (

3802 
AT91PS_TDES
 
pTDES
,

3803 
mode
)

3806 
pTDES
->
TDES_MR
 = 
mode
;

3807 
	}
}

3813 
__ölöe
 
	$AT91F_TDES_GëModeReg
 (

3814 
AT91PS_TDES
 
pTDES


3817  
pTDES
->
TDES_MR
;

3818 
	}
}

3824 
__ölöe
 
	$AT91F_TDES_SèπPro˚ssög
 (

3825 
AT91PS_TDES
 
pTDES


3828 
pTDES
->
TDES_CR
 = 
AT91C_TDES_START
;

3829 
	}
}

3835 
__ölöe
 
	$AT91F_TDES_So·Re£t
 (

3836 
AT91PS_TDES
 
pTDES


3839 
pTDES
->
TDES_CR
 = 
AT91C_TDES_SWRST
;

3840 
	}
}

3846 
__ölöe
 
	$AT91F_TDES_SëCry±oKey1
 (

3847 
AT91PS_TDES
 
pTDES
,

3848 
ödex
,

3849 
keyw‹d


3852 
pTDES
->
TDES_KEY1WxR
[
ödex
] = 
keyw‹d
;

3853 
	}
}

3859 
__ölöe
 
	$AT91F_TDES_SëCry±oKey2
 (

3860 
AT91PS_TDES
 
pTDES
,

3861 
ödex
,

3862 
keyw‹d


3865 
pTDES
->
TDES_KEY2WxR
[
ödex
] = 
keyw‹d
;

3866 
	}
}

3872 
__ölöe
 
	$AT91F_TDES_SëCry±oKey3
 (

3873 
AT91PS_TDES
 
pTDES
,

3874 
ödex
,

3875 
keyw‹d


3878 
pTDES
->
TDES_KEY3WxR
[
ödex
] = 
keyw‹d
;

3879 
	}
}

3885 
__ölöe
 
	$AT91F_TDES_I≈utD©a
 (

3886 
AT91PS_TDES
 
pTDES
,

3887 
ödex
,

3888 
öd©a


3891 
pTDES
->
TDES_IDATAxR
[
ödex
] = 
öd©a
;

3892 
	}
}

3898 
__ölöe
 
	$AT91F_TDES_GëOuçutD©a
 (

3899 
AT91PS_TDES
 
pTDES
,

3900 
ödex


3903  
pTDES
->
TDES_ODATAxR
[
ödex
];

3904 
	}
}

3910 
__ölöe
 
	$AT91F_TDES_SëInôüliz©i⁄Ve˘‹
 (

3911 
AT91PS_TDES
 
pTDES
,

3912 
ödex
,

3913 
öôve˘‹


3916 
pTDES
->
TDES_IVxR
[
ödex
] = 
öôve˘‹
;

3917 
	}
}

3923 
__ölöe
 
	$AT91F_DBGU_CfgPMC
 ()

3925 
	`AT91F_PMC_E«bÀPîùhClock
(

3926 
AT91C_BASE_PMC
,

3927 ((Ë1 << 
AT91C_ID_SYS
));

3928 
	}
}

3934 
__ölöe
 
	$AT91F_DBGU_CfgPIO
 ()

3937 
	`AT91F_PIO_CfgPîùh
(

3938 
AT91C_BASE_PIOA
,

3939 ((Ë
AT91C_PA27_DRXD
 ) |

3940 ((Ë
AT91C_PA28_DTXD
 ),

3942 
	}
}

3948 
__ölöe
 
	$AT91F_PMC_CfgPMC
 ()

3950 
	`AT91F_PMC_E«bÀPîùhClock
(

3951 
AT91C_BASE_PMC
,

3952 ((Ë1 << 
AT91C_ID_SYS
));

3953 
	}
}

3959 
__ölöe
 
	$AT91F_PMC_CfgPIO
 ()

3962 
	`AT91F_PIO_CfgPîùh
(

3963 
AT91C_BASE_PIOB
,

3964 ((Ë
AT91C_PB30_PCK2
 ) |

3965 ((Ë
AT91C_PB29_PCK1
 ),

3966 ((Ë
AT91C_PB20_PCK0
 ) |

3967 ((Ë
AT91C_PB0_PCK0
 ) |

3968 ((Ë
AT91C_PB22_PCK2
 ) |

3969 ((Ë
AT91C_PB21_PCK1
 ));

3971 
	`AT91F_PIO_CfgPîùh
(

3972 
AT91C_BASE_PIOA
,

3974 ((Ë
AT91C_PA30_PCK2
 ) |

3975 ((Ë
AT91C_PA13_PCK1
 ) |

3976 ((Ë
AT91C_PA27_PCK3
 ));

3977 
	}
}

3983 
__ölöe
 
	$AT91F_VREG_CfgPMC
 ()

3985 
	`AT91F_PMC_E«bÀPîùhClock
(

3986 
AT91C_BASE_PMC
,

3987 ((Ë1 << 
AT91C_ID_SYS
));

3988 
	}
}

3994 
__ölöe
 
	$AT91F_RSTC_CfgPMC
 ()

3996 
	`AT91F_PMC_E«bÀPîùhClock
(

3997 
AT91C_BASE_PMC
,

3998 ((Ë1 << 
AT91C_ID_SYS
));

3999 
	}
}

4005 
__ölöe
 
	$AT91F_SSC_CfgPMC
 ()

4007 
	`AT91F_PMC_E«bÀPîùhClock
(

4008 
AT91C_BASE_PMC
,

4009 ((Ë1 << 
AT91C_ID_SSC
));

4010 
	}
}

4016 
__ölöe
 
	$AT91F_SSC_CfgPIO
 ()

4019 
	`AT91F_PIO_CfgPîùh
(

4020 
AT91C_BASE_PIOA
,

4021 ((Ë
AT91C_PA25_RK
 ) |

4022 ((Ë
AT91C_PA22_TK
 ) |

4023 ((Ë
AT91C_PA21_TF
 ) |

4024 ((Ë
AT91C_PA24_RD
 ) |

4025 ((Ë
AT91C_PA26_RF
 ) |

4026 ((Ë
AT91C_PA23_TD
 ),

4028 
	}
}

4034 
__ölöe
 
	$AT91F_WDTC_CfgPMC
 ()

4036 
	`AT91F_PMC_E«bÀPîùhClock
(

4037 
AT91C_BASE_PMC
,

4038 ((Ë1 << 
AT91C_ID_SYS
));

4039 
	}
}

4045 
__ölöe
 
	$AT91F_US1_CfgPMC
 ()

4047 
	`AT91F_PMC_E«bÀPîùhClock
(

4048 
AT91C_BASE_PMC
,

4049 ((Ë1 << 
AT91C_ID_US1
));

4050 
	}
}

4056 
__ölöe
 
	$AT91F_US1_CfgPIO
 ()

4059 
	`AT91F_PIO_CfgPîùh
(

4060 
AT91C_BASE_PIOB
,

4062 ((Ë
AT91C_PB26_RI1
 ) |

4063 ((Ë
AT91C_PB24_DSR1
 ) |

4064 ((Ë
AT91C_PB23_DCD1
 ) |

4065 ((Ë
AT91C_PB25_DTR1
 ));

4067 
	`AT91F_PIO_CfgPîùh
(

4068 
AT91C_BASE_PIOA
,

4069 ((Ë
AT91C_PA7_SCK1
 ) |

4070 ((Ë
AT91C_PA8_RTS1
 ) |

4071 ((Ë
AT91C_PA6_TXD1
 ) |

4072 ((Ë
AT91C_PA5_RXD1
 ) |

4073 ((Ë
AT91C_PA9_CTS1
 ),

4075 
	}
}

4081 
__ölöe
 
	$AT91F_US0_CfgPMC
 ()

4083 
	`AT91F_PMC_E«bÀPîùhClock
(

4084 
AT91C_BASE_PMC
,

4085 ((Ë1 << 
AT91C_ID_US0
));

4086 
	}
}

4092 
__ölöe
 
	$AT91F_US0_CfgPIO
 ()

4095 
	`AT91F_PIO_CfgPîùh
(

4096 
AT91C_BASE_PIOA
,

4097 ((Ë
AT91C_PA0_RXD0
 ) |

4098 ((Ë
AT91C_PA4_CTS0
 ) |

4099 ((Ë
AT91C_PA3_RTS0
 ) |

4100 ((Ë
AT91C_PA2_SCK0
 ) |

4101 ((Ë
AT91C_PA1_TXD0
 ),

4103 
	}
}

4109 
__ölöe
 
	$AT91F_SPI1_CfgPMC
 ()

4111 
	`AT91F_PMC_E«bÀPîùhClock
(

4112 
AT91C_BASE_PMC
,

4113 ((Ë1 << 
AT91C_ID_SPI1
));

4114 
	}
}

4120 
__ölöe
 
	$AT91F_SPI1_CfgPIO
 ()

4123 
	`AT91F_PIO_CfgPîùh
(

4124 
AT91C_BASE_PIOB
,

4126 ((Ë
AT91C_PB16_NPCS13
 ) |

4127 ((Ë
AT91C_PB10_NPCS11
 ) |

4128 ((Ë
AT91C_PB11_NPCS12
 ));

4130 
	`AT91F_PIO_CfgPîùh
(

4131 
AT91C_BASE_PIOA
,

4133 ((Ë
AT91C_PA4_NPCS13
 ) |

4134 ((Ë
AT91C_PA29_NPCS13
 ) |

4135 ((Ë
AT91C_PA21_NPCS10
 ) |

4136 ((Ë
AT91C_PA22_SPCK1
 ) |

4137 ((Ë
AT91C_PA25_NPCS11
 ) |

4138 ((Ë
AT91C_PA2_NPCS11
 ) |

4139 ((Ë
AT91C_PA24_MISO1
 ) |

4140 ((Ë
AT91C_PA3_NPCS12
 ) |

4141 ((Ë
AT91C_PA26_NPCS12
 ) |

4142 ((Ë
AT91C_PA23_MOSI1
 ));

4143 
	}
}

4149 
__ölöe
 
	$AT91F_SPI0_CfgPMC
 ()

4151 
	`AT91F_PMC_E«bÀPîùhClock
(

4152 
AT91C_BASE_PMC
,

4153 ((Ë1 << 
AT91C_ID_SPI0
));

4154 
	}
}

4160 
__ölöe
 
	$AT91F_SPI0_CfgPIO
 ()

4163 
	`AT91F_PIO_CfgPîùh
(

4164 
AT91C_BASE_PIOB
,

4166 ((Ë
AT91C_PB13_NPCS01
 ) |

4167 ((Ë
AT91C_PB17_NPCS03
 ) |

4168 ((Ë
AT91C_PB14_NPCS02
 ));

4170 
	`AT91F_PIO_CfgPîùh
(

4171 
AT91C_BASE_PIOA
,

4172 ((Ë
AT91C_PA16_MISO0
 ) |

4173 ((Ë
AT91C_PA13_NPCS01
 ) |

4174 ((Ë
AT91C_PA15_NPCS03
 ) |

4175 ((Ë
AT91C_PA17_MOSI0
 ) |

4176 ((Ë
AT91C_PA18_SPCK0
 ) |

4177 ((Ë
AT91C_PA14_NPCS02
 ) |

4178 ((Ë
AT91C_PA12_NPCS00
 ),

4179 ((Ë
AT91C_PA7_NPCS01
 ) |

4180 ((Ë
AT91C_PA9_NPCS03
 ) |

4181 ((Ë
AT91C_PA8_NPCS02
 ));

4182 
	}
}

4188 
__ölöe
 
	$AT91F_PITC_CfgPMC
 ()

4190 
	`AT91F_PMC_E«bÀPîùhClock
(

4191 
AT91C_BASE_PMC
,

4192 ((Ë1 << 
AT91C_ID_SYS
));

4193 
	}
}

4199 
__ölöe
 
	$AT91F_AIC_CfgPMC
 ()

4201 
	`AT91F_PMC_E«bÀPîùhClock
(

4202 
AT91C_BASE_PMC
,

4203 ((Ë1 << 
AT91C_ID_FIQ
) |

4204 ((Ë1 << 
AT91C_ID_IRQ0
) |

4205 ((Ë1 << 
AT91C_ID_IRQ1
));

4206 
	}
}

4212 
__ölöe
 
	$AT91F_AIC_CfgPIO
 ()

4215 
	`AT91F_PIO_CfgPîùh
(

4216 
AT91C_BASE_PIOA
,

4217 ((Ë
AT91C_PA30_IRQ0
 ) |

4218 ((Ë
AT91C_PA29_FIQ
 ),

4219 ((Ë
AT91C_PA14_IRQ1
 ));

4220 
	}
}

4226 
__ölöe
 
	$AT91F_AES_CfgPMC
 ()

4228 
	`AT91F_PMC_E«bÀPîùhClock
(

4229 
AT91C_BASE_PMC
,

4230 ((Ë1 << 
AT91C_ID_AES
));

4231 
	}
}

4237 
__ölöe
 
	$AT91F_TWI_CfgPMC
 ()

4239 
	`AT91F_PMC_E«bÀPîùhClock
(

4240 
AT91C_BASE_PMC
,

4241 ((Ë1 << 
AT91C_ID_TWI
));

4242 
	}
}

4248 
__ölöe
 
	$AT91F_TWI_CfgPIO
 ()

4251 
	`AT91F_PIO_CfgPîùh
(

4252 
AT91C_BASE_PIOA
,

4253 ((Ë
AT91C_PA11_TWCK
 ) |

4254 ((Ë
AT91C_PA10_TWD
 ),

4256 
	}
}

4262 
__ölöe
 
	$AT91F_ADC_CfgPMC
 ()

4264 
	`AT91F_PMC_E«bÀPîùhClock
(

4265 
AT91C_BASE_PMC
,

4266 ((Ë1 << 
AT91C_ID_ADC
));

4267 
	}
}

4273 
__ölöe
 
	$AT91F_ADC_CfgPIO
 ()

4276 
	`AT91F_PIO_CfgPîùh
(

4277 
AT91C_BASE_PIOB
,

4279 ((Ë
AT91C_PB18_ADTRG
 ));

4280 
	}
}

4286 
__ölöe
 
	$AT91F_PWMC_CH3_CfgPIO
 ()

4289 
	`AT91F_PIO_CfgPîùh
(

4290 
AT91C_BASE_PIOB
,

4291 ((Ë
AT91C_PB22_PWM3
 ),

4292 ((Ë
AT91C_PB30_PWM3
 ));

4293 
	}
}

4299 
__ölöe
 
	$AT91F_PWMC_CH2_CfgPIO
 ()

4302 
	`AT91F_PIO_CfgPîùh
(

4303 
AT91C_BASE_PIOB
,

4304 ((Ë
AT91C_PB21_PWM2
 ),

4305 ((Ë
AT91C_PB29_PWM2
 ));

4306 
	}
}

4312 
__ölöe
 
	$AT91F_PWMC_CH1_CfgPIO
 ()

4315 
	`AT91F_PIO_CfgPîùh
(

4316 
AT91C_BASE_PIOB
,

4317 ((Ë
AT91C_PB20_PWM1
 ),

4318 ((Ë
AT91C_PB28_PWM1
 ));

4319 
	}
}

4325 
__ölöe
 
	$AT91F_PWMC_CH0_CfgPIO
 ()

4328 
	`AT91F_PIO_CfgPîùh
(

4329 
AT91C_BASE_PIOB
,

4330 ((Ë
AT91C_PB19_PWM0
 ),

4331 ((Ë
AT91C_PB27_PWM0
 ));

4332 
	}
}

4338 
__ölöe
 
	$AT91F_RTTC_CfgPMC
 ()

4340 
	`AT91F_PMC_E«bÀPîùhClock
(

4341 
AT91C_BASE_PMC
,

4342 ((Ë1 << 
AT91C_ID_SYS
));

4343 
	}
}

4349 
__ölöe
 
	$AT91F_UDP_CfgPMC
 ()

4351 
	`AT91F_PMC_E«bÀPîùhClock
(

4352 
AT91C_BASE_PMC
,

4353 ((Ë1 << 
AT91C_ID_UDP
));

4354 
	}
}

4360 
__ölöe
 
	$AT91F_TDES_CfgPMC
 ()

4362 
	`AT91F_PMC_E«bÀPîùhClock
(

4363 
AT91C_BASE_PMC
,

4364 ((Ë1 << 
AT91C_ID_TDES
));

4365 
	}
}

4371 
__ölöe
 
	$AT91F_EMAC_CfgPMC
 ()

4373 
	`AT91F_PMC_E«bÀPîùhClock
(

4374 
AT91C_BASE_PMC
,

4375 ((Ë1 << 
AT91C_ID_EMAC
));

4376 
	}
}

4382 
__ölöe
 
	$AT91F_EMAC_CfgPIO
 ()

4385 
	`AT91F_PIO_CfgPîùh
(

4386 
AT91C_BASE_PIOB
,

4387 ((Ë
AT91C_PB2_ETX0
 ) |

4388 ((Ë
AT91C_PB12_ETXER
 ) |

4389 ((Ë
AT91C_PB16_ECOL
 ) |

4390 ((Ë
AT91C_PB11_ETX3
 ) |

4391 ((Ë
AT91C_PB6_ERX1
 ) |

4392 ((Ë
AT91C_PB15_ERXDV
 ) |

4393 ((Ë
AT91C_PB13_ERX2
 ) |

4394 ((Ë
AT91C_PB3_ETX1
 ) |

4395 ((Ë
AT91C_PB8_EMDC
 ) |

4396 ((Ë
AT91C_PB5_ERX0
 ) |

4398 ((Ë
AT91C_PB14_ERX3
 ) |

4399 ((Ë
AT91C_PB4_ECRS_ECRSDV
) |

4400 ((Ë
AT91C_PB1_ETXEN
 ) |

4401 ((Ë
AT91C_PB10_ETX2
 ) |

4402 ((Ë
AT91C_PB0_ETXCK_EREFCK
) |

4403 ((Ë
AT91C_PB9_EMDIO
 ) |

4404 ((Ë
AT91C_PB7_ERXER
 ) |

4405 ((Ë
AT91C_PB17_ERXCK
 ),

4407 
	}
}

4413 
__ölöe
 
	$AT91F_TC0_CfgPMC
 ()

4415 
	`AT91F_PMC_E«bÀPîùhClock
(

4416 
AT91C_BASE_PMC
,

4417 ((Ë1 << 
AT91C_ID_TC0
));

4418 
	}
}

4424 
__ölöe
 
	$AT91F_TC0_CfgPIO
 ()

4427 
	`AT91F_PIO_CfgPîùh
(

4428 
AT91C_BASE_PIOB
,

4429 ((Ë
AT91C_PB23_TIOA0
 ) |

4430 ((Ë
AT91C_PB24_TIOB0
 ),

4431 ((Ë
AT91C_PB12_TCLK0
 ));

4432 
	}
}

4438 
__ölöe
 
	$AT91F_TC1_CfgPMC
 ()

4440 
	`AT91F_PMC_E«bÀPîùhClock
(

4441 
AT91C_BASE_PMC
,

4442 ((Ë1 << 
AT91C_ID_TC1
));

4443 
	}
}

4449 
__ölöe
 
	$AT91F_TC1_CfgPIO
 ()

4452 
	`AT91F_PIO_CfgPîùh
(

4453 
AT91C_BASE_PIOB
,

4454 ((Ë
AT91C_PB25_TIOA1
 ) |

4455 ((Ë
AT91C_PB26_TIOB1
 ),

4456 ((Ë
AT91C_PB19_TCLK1
 ));

4457 
	}
}

4463 
__ölöe
 
	$AT91F_TC2_CfgPMC
 ()

4465 
	`AT91F_PMC_E«bÀPîùhClock
(

4466 
AT91C_BASE_PMC
,

4467 ((Ë1 << 
AT91C_ID_TC2
));

4468 
	}
}

4474 
__ölöe
 
	$AT91F_TC2_CfgPIO
 ()

4477 
	`AT91F_PIO_CfgPîùh
(

4478 
AT91C_BASE_PIOB
,

4479 ((Ë
AT91C_PB28_TIOB2
 ) |

4480 ((Ë
AT91C_PB27_TIOA2
 ),

4483 
	`AT91F_PIO_CfgPîùh
(

4484 
AT91C_BASE_PIOA
,

4486 ((Ë
AT91C_PA15_TCLK2
 ));

4487 
	}
}

4493 
__ölöe
 
	$AT91F_MC_CfgPMC
 ()

4495 
	`AT91F_PMC_E«bÀPîùhClock
(

4496 
AT91C_BASE_PMC
,

4497 ((Ë1 << 
AT91C_ID_SYS
));

4498 
	}
}

4504 
__ölöe
 
	$AT91F_PIOA_CfgPMC
 ()

4506 
	`AT91F_PMC_E«bÀPîùhClock
(

4507 
AT91C_BASE_PMC
,

4508 ((Ë1 << 
AT91C_ID_PIOA
));

4509 
	}
}

4515 
__ölöe
 
	$AT91F_PIOB_CfgPMC
 ()

4517 
	`AT91F_PMC_E«bÀPîùhClock
(

4518 
AT91C_BASE_PMC
,

4519 ((Ë1 << 
AT91C_ID_PIOB
));

4520 
	}
}

4526 
__ölöe
 
	$AT91F_CAN_CfgPMC
 ()

4528 
	`AT91F_PMC_E«bÀPîùhClock
(

4529 
AT91C_BASE_PMC
,

4530 ((Ë1 << 
AT91C_ID_CAN
));

4531 
	}
}

4537 
__ölöe
 
	$AT91F_CAN_CfgPIO
 ()

4540 
	`AT91F_PIO_CfgPîùh
(

4541 
AT91C_BASE_PIOA
,

4542 ((Ë
AT91C_PA20_CANTX
 ) |

4543 ((Ë
AT91C_PA19_CANRX
 ),

4545 
	}
}

4551 
__ölöe
 
	$AT91F_PWMC_CfgPMC
 ()

4553 
	`AT91F_PMC_E«bÀPîùhClock
(

4554 
AT91C_BASE_PMC
,

4555 ((Ë1 << 
AT91C_ID_PWMC
));

4556 
	}
}

	@portable/IAR/AtmelSAM7S64/lib_AT91SAM7X256.h

43 #i‚de‡
lib_AT91SAM7X256_H


44 
	#lib_AT91SAM7X256_H


	)

49 
	#AT91C_AIC_BRANCH_OPCODE
 (((*) ()) 0xE51FFF20)

50 

	)

55 
__ölöe
 
AT91F_AIC_C⁄figuªIt
 (

56 
AT91PS_AIC
 
pAic
,

57 
úq_id
,

58 
¥i‹ôy
,

59 
§c_ty≥
,

60 (*
√wH™dÀr
) () )

62 
ﬁdH™dÀr
;

63 
mask
 ;

65 
ﬁdH™dÀr
 = 
pAic
->
AIC_SVR
[
úq_id
];

67 
mask
 = 0x1 << 
úq_id
 ;

69 
pAic
->
AIC_IDCR
 = 
mask
 ;

71 
pAic
->
AIC_SVR
[
úq_id
] = (Ë
√wH™dÀr
 ;

73 
pAic
->
AIC_SMR
[
úq_id
] = 
§c_ty≥
 | 
¥i‹ôy
 ;

75 
pAic
->
AIC_ICCR
 = 
mask
 ;

77  
ﬁdH™dÀr
;

78 
	}
}

84 
__ölöe
 
	$AT91F_AIC_E«bÀIt
 (

85 
AT91PS_AIC
 
pAic
,

86 
úq_id
 )

89 
pAic
->
AIC_IECR
 = 0x1 << 
úq_id
 ;

90 
	}
}

96 
__ölöe
 
	$AT91F_AIC_DißbÀIt
 (

97 
AT91PS_AIC
 
pAic
,

98 
úq_id
 )

100 
mask
 = 0x1 << 
úq_id
;

102 
pAic
->
AIC_IDCR
 = 
mask
 ;

104 
pAic
->
AIC_ICCR
 = 
mask
 ;

105 
	}
}

111 
__ölöe
 
	$AT91F_AIC_CÀ¨It
 (

112 
AT91PS_AIC
 
pAic
,

113 
úq_id
)

116 
pAic
->
AIC_ICCR
 = (0x1 << 
úq_id
);

117 
	}
}

123 
__ölöe
 
	$AT91F_AIC_AcknowÀdgeIt
 (

124 
AT91PS_AIC
 
pAic
)

126 
pAic
->
AIC_EOICR
 =ÖAic->AIC_EOICR;

127 
	}
}

133 
__ölöe
 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
 (

134 *
pVe˘‹
,

135 (*
H™dÀr
) () )

137 
ﬁdVe˘‹
 = *
pVe˘‹
;

139 i‡((Ë
H™dÀr
 =(Ë
AT91C_AIC_BRANCH_OPCODE
)

140 *
pVe˘‹
 = (Ë
AT91C_AIC_BRANCH_OPCODE
;

142 *
pVe˘‹
 = (((((Ë
H™dÀr
) - (()ÖVector) - 0x8) >> 2) & 0x00FFFFFF) | 0xEA000000;

144  
ﬁdVe˘‹
;

145 
	}
}

151 
__ölöe
 
	$AT91F_AIC_Trig
 (

152 
AT91PS_AIC
 
pAic
,

153 
úq_id
)

155 
pAic
->
AIC_ISCR
 = (0x1 << 
úq_id
) ;

156 
	}
}

162 
__ölöe
 
	$AT91F_AIC_IsA˘ive
 (

163 
AT91PS_AIC
 
pAic
,

164 
úq_id
)

166  (
pAic
->
AIC_ISR
 & (0x1 << 
úq_id
));

167 
	}
}

173 
__ölöe
 
	$AT91F_AIC_IsPídög
 (

174 
AT91PS_AIC
 
pAic
,

175 
úq_id
)

177  (
pAic
->
AIC_IPR
 & (0x1 << 
úq_id
));

178 
	}
}

184 
__ölöe
 
AT91F_AIC_O≥n
(

185 
AT91PS_AIC
 
pAic
,

186 (*
IrqH™dÀr
) (),

187 (*
FiqH™dÀr
) (),

188 (*
DeÁu…H™dÀr
) (),

189 (*
SpuriousH™dÀr
) (),

190 
¥Ÿe˘Mode
)

192 
	gi
;

195 
	gi
 = 0; i < 32; ++i) {

196 
AT91F_AIC_DißbÀIt
(
pAic
, 
i
);

197 
AT91F_AIC_C⁄figuªIt
(
pAic
, 
i
, 
AT91C_AIC_PRIOR_LOWEST
, 
AT91C_AIC_SRCTYPE_HIGH_LEVEL
, 
DeÁu…H™dÀr
);

201 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x18, 
IrqH™dÀr
);

203 
AT91F_AIC_SëEx˚±i⁄Ve˘‹
((*Ë0x1C, 
FiqH™dÀr
);

205 
	gpAic
->
	gAIC_SPU
 = (Ë
SpuriousH™dÀr
;

206 
	gpAic
->
	gAIC_DCR
 = 
¥Ÿe˘Mode
;

215 
__ölöe
 
	$AT91F_PDC_SëNextRx
 (

216 
AT91PS_PDC
 
pPDC
,

217 *
addªss
,

218 
byãs
)

220 
pPDC
->
PDC_RNPR
 = (Ë
addªss
;

221 
pPDC
->
PDC_RNCR
 = 
byãs
;

222 
	}
}

228 
__ölöe
 
	$AT91F_PDC_SëNextTx
 (

229 
AT91PS_PDC
 
pPDC
,

230 *
addªss
,

231 
byãs
)

233 
pPDC
->
PDC_TNPR
 = (Ë
addªss
;

234 
pPDC
->
PDC_TNCR
 = 
byãs
;

235 
	}
}

241 
__ölöe
 
	$AT91F_PDC_SëRx
 (

242 
AT91PS_PDC
 
pPDC
,

243 *
addªss
,

244 
byãs
)

246 
pPDC
->
PDC_RPR
 = (Ë
addªss
;

247 
pPDC
->
PDC_RCR
 = 
byãs
;

248 
	}
}

254 
__ölöe
 
	$AT91F_PDC_SëTx
 (

255 
AT91PS_PDC
 
pPDC
,

256 *
addªss
,

257 
byãs
)

259 
pPDC
->
PDC_TPR
 = (Ë
addªss
;

260 
pPDC
->
PDC_TCR
 = 
byãs
;

261 
	}
}

267 
__ölöe
 
	$AT91F_PDC_E«bÀTx
 (

268 
AT91PS_PDC
 
pPDC
 )

270 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTEN
;

271 
	}
}

277 
__ölöe
 
	$AT91F_PDC_E«bÀRx
 (

278 
AT91PS_PDC
 
pPDC
 )

280 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTEN
;

281 
	}
}

287 
__ölöe
 
	$AT91F_PDC_DißbÀTx
 (

288 
AT91PS_PDC
 
pPDC
 )

290 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_TXTDIS
;

291 
	}
}

297 
__ölöe
 
	$AT91F_PDC_DißbÀRx
 (

298 
AT91PS_PDC
 
pPDC
 )

300 
pPDC
->
PDC_PTCR
 = 
AT91C_PDC_RXTDIS
;

301 
	}
}

307 
__ölöe
 
	$AT91F_PDC_IsTxEm±y
 (

308 
AT91PS_PDC
 
pPDC
 )

310  !(
pPDC
->
PDC_TCR
);

311 
	}
}

317 
__ölöe
 
	$AT91F_PDC_IsNextTxEm±y
 (

318 
AT91PS_PDC
 
pPDC
 )

320  !(
pPDC
->
PDC_TNCR
);

321 
	}
}

327 
__ölöe
 
	$AT91F_PDC_IsRxEm±y
 (

328 
AT91PS_PDC
 
pPDC
 )

330  !(
pPDC
->
PDC_RCR
);

331 
	}
}

337 
__ölöe
 
	$AT91F_PDC_IsNextRxEm±y
 (

338 
AT91PS_PDC
 
pPDC
 )

340  !(
pPDC
->
PDC_RNCR
);

341 
	}
}

347 
__ölöe
 
	$AT91F_PDC_O≥n
 (

348 
AT91PS_PDC
 
pPDC
)

351 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

352 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

355 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

356 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

357 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

358 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

361 
	`AT91F_PDC_E«bÀRx
(
pPDC
);

362 
	`AT91F_PDC_E«bÀTx
(
pPDC
);

363 
	}
}

369 
__ölöe
 
	$AT91F_PDC_Clo£
 (

370 
AT91PS_PDC
 
pPDC
)

373 
	`AT91F_PDC_DißbÀRx
(
pPDC
);

374 
	`AT91F_PDC_DißbÀTx
(
pPDC
);

377 
	`AT91F_PDC_SëNextTx
(
pPDC
, (*) 0, 0);

378 
	`AT91F_PDC_SëNextRx
(
pPDC
, (*) 0, 0);

379 
	`AT91F_PDC_SëTx
(
pPDC
, (*) 0, 0);

380 
	`AT91F_PDC_SëRx
(
pPDC
, (*) 0, 0);

382 
	}
}

388 
__ölöe
 
	$AT91F_PDC_SídFøme
(

389 
AT91PS_PDC
 
pPDC
,

390 *
pBuf„r
,

391 
szBuf„r
,

392 *
pNextBuf„r
,

393 
szNextBuf„r
 )

395 i‡(
	`AT91F_PDC_IsTxEm±y
(
pPDC
)) {

397 
	`AT91F_PDC_SëTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

398 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

401 i‡(
	`AT91F_PDC_IsNextTxEm±y
(
pPDC
)) {

403 
	`AT91F_PDC_SëNextTx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

410 
	}
}

416 
__ölöe
 
	$AT91F_PDC_Re˚iveFøme
 (

417 
AT91PS_PDC
 
pPDC
,

418 *
pBuf„r
,

419 
szBuf„r
,

420 *
pNextBuf„r
,

421 
szNextBuf„r
 )

423 i‡(
	`AT91F_PDC_IsRxEm±y
(
pPDC
)) {

425 
	`AT91F_PDC_SëRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

426 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pNextBuf„r
, 
szNextBuf„r
);

429 i‡(
	`AT91F_PDC_IsNextRxEm±y
(
pPDC
)) {

431 
	`AT91F_PDC_SëNextRx
(
pPDC
, 
pBuf„r
, 
szBuf„r
);

438 
	}
}

446 
__ölöe
 
	$AT91F_DBGU_I¡îru±E«bÀ
(

447 
AT91PS_DBGU
 
pDbgu
,

448 
Êag
)

450 
pDbgu
->
DBGU_IER
 = 
Êag
;

451 
	}
}

457 
__ölöe
 
	$AT91F_DBGU_I¡îru±DißbÀ
(

458 
AT91PS_DBGU
 
pDbgu
,

459 
Êag
)

461 
pDbgu
->
DBGU_IDR
 = 
Êag
;

462 
	}
}

468 
__ölöe
 
	$AT91F_DBGU_GëI¡îru±MaskSètus
(

469 
AT91PS_DBGU
 
pDbgu
)

471  
pDbgu
->
DBGU_IMR
;

472 
	}
}

478 
__ölöe
 
	$AT91F_DBGU_IsI¡îru±Masked
(

479 
AT91PS_DBGU
 
pDbgu
,

480 
Êag
)

482  (
	`AT91F_DBGU_GëI¡îru±MaskSètus
(
pDbgu
Ë& 
Êag
);

483 
	}
}

492 
__ölöe
 
	$AT91F_PIO_CfgPîùh
(

493 
AT91PS_PIO
 
pPio
,

494 
≥rùhAE«bÀ
,

495 
≥rùhBE«bÀ
)

498 
pPio
->
PIO_ASR
 = 
≥rùhAE«bÀ
;

499 
pPio
->
PIO_BSR
 = 
≥rùhBE«bÀ
;

500 
pPio
->
PIO_PDR
 = (
≥rùhAE«bÀ
 | 
≥rùhBE«bÀ
);

501 
	}
}

507 
__ölöe
 
	$AT91F_PIO_CfgOuçut
(

508 
AT91PS_PIO
 
pPio
,

509 
pioE«bÀ
)

511 
pPio
->
PIO_PER
 = 
pioE«bÀ
;

512 
pPio
->
PIO_OER
 = 
pioE«bÀ
;

513 
	}
}

519 
__ölöe
 
	$AT91F_PIO_CfgI≈ut
(

520 
AT91PS_PIO
 
pPio
,

521 
öputE«bÀ
)

524 
pPio
->
PIO_ODR
 = 
öputE«bÀ
;

525 
pPio
->
PIO_PER
 = 
öputE«bÀ
;

526 
	}
}

532 
__ölöe
 
	$AT91F_PIO_CfgO≥ndøö
(

533 
AT91PS_PIO
 
pPio
,

534 
mu…iDrvE«bÀ
)

537 
pPio
->
PIO_MDDR
 = ~
mu…iDrvE«bÀ
;

538 
pPio
->
PIO_MDER
 = 
mu…iDrvE«bÀ
;

539 
	}
}

545 
__ölöe
 
	$AT91F_PIO_CfgPuŒup
(

546 
AT91PS_PIO
 
pPio
,

547 
puŒupE«bÀ
)

550 
pPio
->
PIO_PPUDR
 = ~
puŒupE«bÀ
;

551 
pPio
->
PIO_PPUER
 = 
puŒupE«bÀ
;

552 
	}
}

558 
__ölöe
 
	$AT91F_PIO_CfgDúe˘Drive
(

559 
AT91PS_PIO
 
pPio
,

560 
dúe˘Drive
)

564 
pPio
->
PIO_OWDR
 = ~
dúe˘Drive
;

565 
pPio
->
PIO_OWER
 = 
dúe˘Drive
;

566 
	}
}

572 
__ölöe
 
	$AT91F_PIO_CfgI≈utFûãr
(

573 
AT91PS_PIO
 
pPio
,

574 
öputFûãr
)

578 
pPio
->
PIO_IFDR
 = ~
öputFûãr
;

579 
pPio
->
PIO_IFER
 = 
öputFûãr
;

580 
	}
}

586 
__ölöe
 
	$AT91F_PIO_GëI≈ut
(

587 
AT91PS_PIO
 
pPio
)

589  
pPio
->
PIO_PDSR
;

590 
	}
}

596 
__ölöe
 
	$AT91F_PIO_IsI≈utSë
(

597 
AT91PS_PIO
 
pPio
,

598 
Êag
)

600  (
	`AT91F_PIO_GëI≈ut
(
pPio
Ë& 
Êag
);

601 
	}
}

608 
__ölöe
 
	$AT91F_PIO_SëOuçut
(

609 
AT91PS_PIO
 
pPio
,

610 
Êag
)

612 
pPio
->
PIO_SODR
 = 
Êag
;

613 
	}
}

619 
__ölöe
 
	$AT91F_PIO_CÀ¨Ouçut
(

620 
AT91PS_PIO
 
pPio
,

621 
Êag
)

623 
pPio
->
PIO_CODR
 = 
Êag
;

624 
	}
}

630 
__ölöe
 
	$AT91F_PIO_F‹˚Ouçut
(

631 
AT91PS_PIO
 
pPio
,

632 
Êag
)

634 
pPio
->
PIO_ODSR
 = 
Êag
;

635 
	}
}

641 
__ölöe
 
	$AT91F_PIO_E«bÀ
(

642 
AT91PS_PIO
 
pPio
,

643 
Êag
)

645 
pPio
->
PIO_PER
 = 
Êag
;

646 
	}
}

652 
__ölöe
 
	$AT91F_PIO_DißbÀ
(

653 
AT91PS_PIO
 
pPio
,

654 
Êag
)

656 
pPio
->
PIO_PDR
 = 
Êag
;

657 
	}
}

663 
__ölöe
 
	$AT91F_PIO_GëSètus
(

664 
AT91PS_PIO
 
pPio
)

666  
pPio
->
PIO_PSR
;

667 
	}
}

673 
__ölöe
 
	$AT91F_PIO_IsSë
(

674 
AT91PS_PIO
 
pPio
,

675 
Êag
)

677  (
	`AT91F_PIO_GëSètus
(
pPio
Ë& 
Êag
);

678 
	}
}

684 
__ölöe
 
	$AT91F_PIO_OuçutE«bÀ
(

685 
AT91PS_PIO
 
pPio
,

686 
Êag
)

688 
pPio
->
PIO_OER
 = 
Êag
;

689 
	}
}

695 
__ölöe
 
	$AT91F_PIO_OuçutDißbÀ
(

696 
AT91PS_PIO
 
pPio
,

697 
Êag
)

699 
pPio
->
PIO_ODR
 = 
Êag
;

700 
	}
}

706 
__ölöe
 
	$AT91F_PIO_GëOuçutSètus
(

707 
AT91PS_PIO
 
pPio
)

709  
pPio
->
PIO_OSR
;

710 
	}
}

716 
__ölöe
 
	$AT91F_PIO_IsOuçutSë
(

717 
AT91PS_PIO
 
pPio
,

718 
Êag
)

720  (
	`AT91F_PIO_GëOuçutSètus
(
pPio
Ë& 
Êag
);

721 
	}
}

727 
__ölöe
 
	$AT91F_PIO_I≈utFûãrE«bÀ
(

728 
AT91PS_PIO
 
pPio
,

729 
Êag
)

731 
pPio
->
PIO_IFER
 = 
Êag
;

732 
	}
}

738 
__ölöe
 
	$AT91F_PIO_I≈utFûãrDißbÀ
(

739 
AT91PS_PIO
 
pPio
,

740 
Êag
)

742 
pPio
->
PIO_IFDR
 = 
Êag
;

743 
	}
}

749 
__ölöe
 
	$AT91F_PIO_GëI≈utFûãrSètus
(

750 
AT91PS_PIO
 
pPio
)

752  
pPio
->
PIO_IFSR
;

753 
	}
}

759 
__ölöe
 
	$AT91F_PIO_IsI≈utFûãrSë
(

760 
AT91PS_PIO
 
pPio
,

761 
Êag
)

763  (
	`AT91F_PIO_GëI≈utFûãrSètus
(
pPio
Ë& 
Êag
);

764 
	}
}

770 
__ölöe
 
	$AT91F_PIO_GëOuçutD©aSètus
(

771 
AT91PS_PIO
 
pPio
)

773  
pPio
->
PIO_ODSR
;

774 
	}
}

780 
__ölöe
 
	$AT91F_PIO_I¡îru±E«bÀ
(

781 
AT91PS_PIO
 
pPio
,

782 
Êag
)

784 
pPio
->
PIO_IER
 = 
Êag
;

785 
	}
}

791 
__ölöe
 
	$AT91F_PIO_I¡îru±DißbÀ
(

792 
AT91PS_PIO
 
pPio
,

793 
Êag
)

795 
pPio
->
PIO_IDR
 = 
Êag
;

796 
	}
}

802 
__ölöe
 
	$AT91F_PIO_GëI¡îru±MaskSètus
(

803 
AT91PS_PIO
 
pPio
)

805  
pPio
->
PIO_IMR
;

806 
	}
}

812 
__ölöe
 
	$AT91F_PIO_GëI¡îru±Sètus
(

813 
AT91PS_PIO
 
pPio
)

815  
pPio
->
PIO_ISR
;

816 
	}
}

822 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Masked
(

823 
AT91PS_PIO
 
pPio
,

824 
Êag
)

826  (
	`AT91F_PIO_GëI¡îru±MaskSètus
(
pPio
Ë& 
Êag
);

827 
	}
}

833 
__ölöe
 
	$AT91F_PIO_IsI¡îru±Së
(

834 
AT91PS_PIO
 
pPio
,

835 
Êag
)

837  (
	`AT91F_PIO_GëI¡îru±Sètus
(
pPio
Ë& 
Êag
);

838 
	}
}

844 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîE«bÀ
(

845 
AT91PS_PIO
 
pPio
,

846 
Êag
)

848 
pPio
->
PIO_MDER
 = 
Êag
;

849 
	}
}

855 
__ölöe
 
	$AT91F_PIO_Mu…iDrivîDißbÀ
(

856 
AT91PS_PIO
 
pPio
,

857 
Êag
)

859 
pPio
->
PIO_MDDR
 = 
Êag
;

860 
	}
}

866 
__ölöe
 
	$AT91F_PIO_GëMu…iDrivîSètus
(

867 
AT91PS_PIO
 
pPio
)

869  
pPio
->
PIO_MDSR
;

870 
	}
}

876 
__ölöe
 
	$AT91F_PIO_IsMu…iDrivîSë
(

877 
AT91PS_PIO
 
pPio
,

878 
Êag
)

880  (
	`AT91F_PIO_GëMu…iDrivîSètus
(
pPio
Ë& 
Êag
);

881 
	}
}

887 
__ölöe
 
	$AT91F_PIO_A_Regi°îSñe˘i⁄
(

888 
AT91PS_PIO
 
pPio
,

889 
Êag
)

891 
pPio
->
PIO_ASR
 = 
Êag
;

892 
	}
}

898 
__ölöe
 
	$AT91F_PIO_B_Regi°îSñe˘i⁄
(

899 
AT91PS_PIO
 
pPio
,

900 
Êag
)

902 
pPio
->
PIO_BSR
 = 
Êag
;

903 
	}
}

909 
__ölöe
 
	$AT91F_PIO_Gë_AB_Regi°îSètus
(

910 
AT91PS_PIO
 
pPio
)

912  
pPio
->
PIO_ABSR
;

913 
	}
}

919 
__ölöe
 
	$AT91F_PIO_IsAB_Regi°îSë
(

920 
AT91PS_PIO
 
pPio
,

921 
Êag
)

923  (
	`AT91F_PIO_Gë_AB_Regi°îSètus
(
pPio
Ë& 
Êag
);

924 
	}
}

930 
__ölöe
 
	$AT91F_PIO_OuçutWrôeE«bÀ
(

931 
AT91PS_PIO
 
pPio
,

932 
Êag
)

934 
pPio
->
PIO_OWER
 = 
Êag
;

935 
	}
}

941 
__ölöe
 
	$AT91F_PIO_OuçutWrôeDißbÀ
(

942 
AT91PS_PIO
 
pPio
,

943 
Êag
)

945 
pPio
->
PIO_OWDR
 = 
Êag
;

946 
	}
}

952 
__ölöe
 
	$AT91F_PIO_GëOuçutWrôeSètus
(

953 
AT91PS_PIO
 
pPio
)

955  
pPio
->
PIO_OWSR
;

956 
	}
}

962 
__ölöe
 
	$AT91F_PIO_IsOuçutWrôeSë
(

963 
AT91PS_PIO
 
pPio
,

964 
Êag
)

966  (
	`AT91F_PIO_GëOuçutWrôeSètus
(
pPio
Ë& 
Êag
);

967 
	}
}

973 
__ölöe
 
	$AT91F_PIO_GëCfgPuŒup
(

974 
AT91PS_PIO
 
pPio
)

976  
pPio
->
PIO_PPUSR
;

977 
	}
}

983 
__ölöe
 
	$AT91F_PIO_IsOuçutD©aSètusSë
(

984 
AT91PS_PIO
 
pPio
,

985 
Êag
)

987  (
	`AT91F_PIO_GëOuçutD©aSètus
(
pPio
Ë& 
Êag
);

988 
	}
}

994 
__ölöe
 
	$AT91F_PIO_IsCfgPuŒupSètusSë
(

995 
AT91PS_PIO
 
pPio
,

996 
Êag
)

998  (~
	`AT91F_PIO_GëCfgPuŒup
(
pPio
Ë& 
Êag
);

999 
	}
}

1008 
__ölöe
 
	$AT91F_PMC_CfgSysClkE«bÀReg
 (

1009 
AT91PS_PMC
 
pPMC
,

1010 
mode
)

1013 
pPMC
->
PMC_SCER
 = 
mode
;

1014 
	}
}

1020 
__ölöe
 
	$AT91F_PMC_CfgSysClkDißbÀReg
 (

1021 
AT91PS_PMC
 
pPMC
,

1022 
mode
)

1025 
pPMC
->
PMC_SCDR
 = 
mode
;

1026 
	}
}

1032 
__ölöe
 
	$AT91F_PMC_GëSysClkSètusReg
 (

1033 
AT91PS_PMC
 
pPMC


1036  
pPMC
->
PMC_SCSR
;

1037 
	}
}

1043 
__ölöe
 
	$AT91F_PMC_E«bÀPîùhClock
 (

1044 
AT91PS_PMC
 
pPMC
,

1045 
≥rùhIds
)

1047 
pPMC
->
PMC_PCER
 = 
≥rùhIds
;

1048 
	}
}

1054 
__ölöe
 
	$AT91F_PMC_DißbÀPîùhClock
 (

1055 
AT91PS_PMC
 
pPMC
,

1056 
≥rùhIds
)

1058 
pPMC
->
PMC_PCDR
 = 
≥rùhIds
;

1059 
	}
}

1065 
__ölöe
 
	$AT91F_PMC_GëPîùhClock
 (

1066 
AT91PS_PMC
 
pPMC
)

1068  
pPMC
->
PMC_PCSR
;

1069 
	}
}

1075 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscûœt‹Reg
 (

1076 
AT91PS_CKGR
 
pCKGR
,

1077 
mode
)

1079 
pCKGR
->
CKGR_MOR
 = 
mode
;

1080 
	}
}

1086 
__ölöe
 
	$AT91F_CKGR_GëMaöOscûœt‹Reg
 (

1087 
AT91PS_CKGR
 
pCKGR
)

1089  
pCKGR
->
CKGR_MOR
;

1090 
	}
}

1096 
__ölöe
 
	$AT91F_CKGR_E«bÀMaöOscûœt‹
(

1097 
AT91PS_CKGR
 
pCKGR
)

1099 
pCKGR
->
CKGR_MOR
 |
AT91C_CKGR_MOSCEN
;

1100 
	}
}

1106 
__ölöe
 
	$AT91F_CKGR_DißbÀMaöOscûœt‹
 (

1107 
AT91PS_CKGR
 
pCKGR
)

1109 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_MOSCEN
;

1110 
	}
}

1116 
__ölöe
 
	$AT91F_CKGR_CfgMaöOscSèπUpTime
 (

1117 
AT91PS_CKGR
 
pCKGR
,

1118 
°¨tup_time
,

1119 
¶owClock
)

1121 
pCKGR
->
CKGR_MOR
 &~
AT91C_CKGR_OSCOUNT
;

1122 
pCKGR
->
CKGR_MOR
 |((
¶owClock
 * 
°¨tup_time
)/(8*1000000)) << 8;

1123 
	}
}

1129 
__ölöe
 
	$AT91F_CKGR_GëMaöClockFªqReg
 (

1130 
AT91PS_CKGR
 
pCKGR
)

1132  
pCKGR
->
CKGR_MCFR
;

1133 
	}
}

1139 
__ölöe
 
	$AT91F_CKGR_GëMaöClock
 (

1140 
AT91PS_CKGR
 
pCKGR
,

1141 
¶owClock
)

1143  ((
pCKGR
->
CKGR_MCFR
 & 
AT91C_CKGR_MAINF
Ë* 
¶owClock
) >> 4;

1144 
	}
}

1150 
__ölöe
 
	$AT91F_PMC_CfgMCKReg
 (

1151 
AT91PS_PMC
 
pPMC
,

1152 
mode
)

1154 
pPMC
->
PMC_MCKR
 = 
mode
;

1155 
	}
}

1161 
__ölöe
 
	$AT91F_PMC_GëMCKReg
(

1162 
AT91PS_PMC
 
pPMC
)

1164  
pPMC
->
PMC_MCKR
;

1165 
	}
}

1171 
__ölöe
 
	$AT91F_PMC_GëMa°îClock
 (

1172 
AT91PS_PMC
 
pPMC
,

1173 
AT91PS_CKGR
 
pCKGR
,

1174 
¶owClock
)

1176 
ªg
 = 
pPMC
->
PMC_MCKR
;

1177 
¥esˇÀr
 = (1 << ((
ªg
 & 
AT91C_PMC_PRES
) >> 2));

1178 
∂lDividî
, 
∂lMu…ùlõr
;

1180 
ªg
 & 
AT91C_PMC_CSS
) {

1181 
AT91C_PMC_CSS_SLOW_CLK
:

1182  
¶owClock
 / 
¥esˇÀr
;

1183 
AT91C_PMC_CSS_MAIN_CLK
:

1184  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
¥esˇÀr
;

1185 
AT91C_PMC_CSS_PLL_CLK
:

1186 
ªg
 = 
pCKGR
->
CKGR_PLLR
;

1187 
∂lDividî
 = (
ªg
 & 
AT91C_CKGR_DIV
);

1188 
∂lMu…ùlõr
 = ((
ªg
 & 
AT91C_CKGR_MUL
) >> 16) + 1;

1189  
	`AT91F_CKGR_GëMaöClock
(
pCKGR
, 
¶owClock
Ë/ 
∂lDividî
 * 
∂lMu…ùlõr
 / 
¥esˇÀr
;

1192 
	}
}

1198 
__ölöe
 
	$AT91F_PMC_E«bÀPCK
 (

1199 
AT91PS_PMC
 
pPMC
,

1200 
pck
,

1201 
mode
)

1203 
pPMC
->
PMC_PCKR
[
pck
] = 
mode
;

1204 
pPMC
->
PMC_SCER
 = (1 << 
pck
) << 8;

1205 
	}
}

1211 
__ölöe
 
	$AT91F_PMC_DißbÀPCK
 (

1212 
AT91PS_PMC
 
pPMC
,

1213 
pck
)

1215 
pPMC
->
PMC_SCDR
 = (1 << 
pck
) << 8;

1216 
	}
}

1222 
__ölöe
 
	$AT91F_PMC_E«bÀIt
 (

1223 
AT91PS_PMC
 
pPMC
,

1224 
Êag
)

1227 
pPMC
->
PMC_IER
 = 
Êag
;

1228 
	}
}

1234 
__ölöe
 
	$AT91F_PMC_DißbÀIt
 (

1235 
AT91PS_PMC
 
pPMC
,

1236 
Êag
)

1239 
pPMC
->
PMC_IDR
 = 
Êag
;

1240 
	}
}

1246 
__ölöe
 
	$AT91F_PMC_GëSètus
(

1247 
AT91PS_PMC
 
pPMC
)

1249  
pPMC
->
PMC_SR
;

1250 
	}
}

1256 
__ölöe
 
	$AT91F_PMC_GëI¡îru±MaskSètus
(

1257 
AT91PS_PMC
 
pPMC
)

1259  
pPMC
->
PMC_IMR
;

1260 
	}
}

1266 
__ölöe
 
	$AT91F_PMC_IsI¡îru±Masked
(

1267 
AT91PS_PMC
 
pPMC
,

1268 
Êag
)

1270  (
	`AT91F_PMC_GëI¡îru±MaskSètus
(
pPMC
Ë& 
Êag
);

1271 
	}
}

1277 
__ölöe
 
	$AT91F_PMC_IsSètusSë
(

1278 
AT91PS_PMC
 
pPMC
,

1279 
Êag
)

1281  (
	`AT91F_PMC_GëSètus
(
pPMC
Ë& 
Êag
);

1282 
	}
}

1289 
__ölöe
 
	$AT91F_RSTSo·Re£t
(

1290 
AT91PS_RSTC
 
pRSTC
,

1291 
ª£t
)

1293 
pRSTC
->
RSTC_RCR
 = (0xA5000000 | 
ª£t
);

1294 
	}
}

1300 
__ölöe
 
	$AT91F_RSTSëMode
(

1301 
AT91PS_RSTC
 
pRSTC
,

1302 
mode
)

1304 
pRSTC
->
RSTC_RMR
 = (0xA5000000 | 
mode
);

1305 
	}
}

1311 
__ölöe
 
	$AT91F_RSTGëMode
(

1312 
AT91PS_RSTC
 
pRSTC
)

1314  (
pRSTC
->
RSTC_RMR
);

1315 
	}
}

1321 
__ölöe
 
	$AT91F_RSTGëSètus
(

1322 
AT91PS_RSTC
 
pRSTC
)

1324  (
pRSTC
->
RSTC_RSR
);

1325 
	}
}

1331 
__ölöe
 
	$AT91F_RSTIsSo·R°A˘ive
(

1332 
AT91PS_RSTC
 
pRSTC
)

1334  ((
pRSTC
->
RSTC_RSR
Ë& 
AT91C_RSTC_SRCMP
);

1335 
	}
}

1343 
__ölöe
 
	$AT91F_RTTSëTimeBa£
(

1344 
AT91PS_RTTC
 
pRTTC
,

1345 
ms
)

1347 i‡(
ms
 > 2000)

1349 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1350 
pRTTC
->
RTTC_RTMR
 |(((
ms
 << 15) /1000) & 0xFFFF);

1352 
	}
}

1358 
__ölöe
 
	$AT91F_RTTSëPªsˇÀr
(

1359 
AT91PS_RTTC
 
pRTTC
,

1360 
π¥es
)

1362 
pRTTC
->
RTTC_RTMR
 &= ~0xFFFF;

1363 
pRTTC
->
RTTC_RTMR
 |(
π¥es
 & 0xFFFF);

1364  (
pRTTC
->
RTTC_RTMR
);

1365 
	}
}

1371 
__ölöe
 
	$AT91F_RTTRe°¨t
(

1372 
AT91PS_RTTC
 
pRTTC
)

1374 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTRST
;

1375 
	}
}

1382 
__ölöe
 
	$AT91F_RTTSëAœrmINT
(

1383 
AT91PS_RTTC
 
pRTTC
)

1385 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_ALMIEN
;

1386 
	}
}

1392 
__ölöe
 
	$AT91F_RTTCÀ¨AœrmINT
(

1393 
AT91PS_RTTC
 
pRTTC
)

1395 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_ALMIEN
;

1396 
	}
}

1402 
__ölöe
 
	$AT91F_RTTSëRâIncINT
(

1403 
AT91PS_RTTC
 
pRTTC
)

1405 
pRTTC
->
RTTC_RTMR
 |
AT91C_RTTC_RTTINCIEN
;

1406 
	}
}

1412 
__ölöe
 
	$AT91F_RTTCÀ¨RâIncINT
(

1413 
AT91PS_RTTC
 
pRTTC
)

1415 
pRTTC
->
RTTC_RTMR
 &~
AT91C_RTTC_RTTINCIEN
;

1416 
	}
}

1422 
__ölöe
 
	$AT91F_RTTSëAœrmVÆue
(

1423 
AT91PS_RTTC
 
pRTTC
, 
Æ¨m
)

1425 
pRTTC
->
RTTC_RTAR
 = 
Æ¨m
;

1426 
	}
}

1432 
__ölöe
 
	$AT91F_RTTGëAœrmVÆue
(

1433 
AT91PS_RTTC
 
pRTTC
)

1435 (
pRTTC
->
RTTC_RTAR
);

1436 
	}
}

1442 
__ölöe
 
	$AT91F_RTTGëSètus
(

1443 
AT91PS_RTTC
 
pRTTC
)

1445 (
pRTTC
->
RTTC_RTSR
);

1446 
	}
}

1452 
__ölöe
 
	$AT91F_RTTRódVÆue
(

1453 
AT91PS_RTTC
 
pRTTC
)

1455 vﬁ©ûê
vÆ1
,
vÆ2
;

1458 
vÆ1
 = 
pRTTC
->
RTTC_RTVR
;

1459 
vÆ2
 = 
pRTTC
->
RTTC_RTVR
;

1461 
vÆ1
 !
vÆ2
);

1462 (
vÆ1
);

1463 
	}
}

1471 
__ölöe
 
	$AT91F_PITInô
(

1472 
AT91PS_PITC
 
pPITC
,

1473 
≥riod
,

1474 
pô_‰equícy
)

1476 
pPITC
->
PITC_PIMR
 = 
≥riod
? (≥riod * 
pô_‰equícy
 + 8) >> 4 : 0;

1477 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITEN
;

1478 
	}
}

1484 
__ölöe
 
	$AT91F_PITSëPIV
(

1485 
AT91PS_PITC
 
pPITC
,

1486 
piv
)

1488 
pPITC
->
PITC_PIMR
 = 
piv
 | (pPITC->PITC_PIMR & (
AT91C_PITC_PITEN
 | 
AT91C_PITC_PITIEN
));

1489 
	}
}

1495 
__ölöe
 
	$AT91F_PITE«bÀI¡
(

1496 
AT91PS_PITC
 
pPITC
)

1498 
pPITC
->
PITC_PIMR
 |
AT91C_PITC_PITIEN
;

1499 
	}
}

1505 
__ölöe
 
	$AT91F_PITDißbÀI¡
(

1506 
AT91PS_PITC
 
pPITC
)

1508 
pPITC
->
PITC_PIMR
 &~
AT91C_PITC_PITIEN
;

1509 
	}
}

1515 
__ölöe
 
	$AT91F_PITGëMode
(

1516 
AT91PS_PITC
 
pPITC
)

1518 (
pPITC
->
PITC_PIMR
);

1519 
	}
}

1525 
__ölöe
 
	$AT91F_PITGëSètus
(

1526 
AT91PS_PITC
 
pPITC
)

1528 (
pPITC
->
PITC_PISR
);

1529 
	}
}

1535 
__ölöe
 
	$AT91F_PITGëPIIR
(

1536 
AT91PS_PITC
 
pPITC
)

1538 (
pPITC
->
PITC_PIIR
);

1539 
	}
}

1545 
__ölöe
 
	$AT91F_PITGëPIVR
(

1546 
AT91PS_PITC
 
pPITC
)

1548 (
pPITC
->
PITC_PIVR
);

1549 
	}
}

1557 
__ölöe
 
	$AT91F_WDTSëMode
(

1558 
AT91PS_WDTC
 
pWDTC
,

1559 
Mode
)

1561 
pWDTC
->
WDTC_WDMR
 = 
Mode
;

1562 
	}
}

1568 
__ölöe
 
	$AT91F_WDTRe°¨t
(

1569 
AT91PS_WDTC
 
pWDTC
)

1571 
pWDTC
->
WDTC_WDCR
 = 0xA5000001;

1572 
	}
}

1578 
__ölöe
 
	$AT91F_WDTSGëètus
(

1579 
AT91PS_WDTC
 
pWDTC
)

1581 (
pWDTC
->
WDTC_WDSR
 & 0x3);

1582 
	}
}

1588 
__ölöe
 
	$AT91F_WDTGëPîiod
(
ms
)

1590 i‡((
ms
 < 4) || (ms > 16000))

1592 ((
ms
 << 8) / 1000);

1593 
	}
}

1601 
__ölöe
 
	$AT91F_VREG_E«bÀ_LowPowîMode
(

1602 
AT91PS_VREG
 
pVREG
)

1604 
pVREG
->
VREG_MR
 |
AT91C_VREG_PSTDBY
;

1605 
	}
}

1611 
__ölöe
 
	$AT91F_VREG_DißbÀ_LowPowîMode
(

1612 
AT91PS_VREG
 
pVREG
)

1614 
pVREG
->
VREG_MR
 &~
AT91C_VREG_PSTDBY
;

1615 
	}
}

1619 
	#AT91C_MC_CORRECT_KEY
 (() 0x5A << 24)

1620 

	)

1625 
__ölöe
 
	$AT91F_MC_Rem≠
 ()

1627 
AT91PS_MC
 
pMC
 = (AT91PS_MCË
AT91C_BASE_MC
;

1629 
pMC
->
MC_RCR
 = 
AT91C_MC_RCB
;

1630 
	}
}

1636 
__ölöe
 
	$AT91F_MC_EFC_CfgModeReg
 (

1637 
AT91PS_MC
 
pMC
,

1638 
mode
)

1641 
pMC
->
MC_FMR
 = 
mode
;

1642 
	}
}

1648 
__ölöe
 
	$AT91F_MC_EFC_GëModeReg
(

1649 
AT91PS_MC
 
pMC
)

1651  
pMC
->
MC_FMR
;

1652 
	}
}

1658 
__ölöe
 
	$AT91F_MC_EFC_CompuãFMCN
(

1659 
ma°î_˛ock
)

1661  (
ma°î_˛ock
/1000000 +2);

1662 
	}
}

1668 
__ölöe
 
	$AT91F_MC_EFC_Pîf‹mCmd
 (

1669 
AT91PS_MC
 
pMC
,

1670 
å™s„r_cmd
)

1672 
pMC
->
MC_FCR
 = 
å™s„r_cmd
;

1673 
	}
}

1679 
__ölöe
 
	$AT91F_MC_EFC_GëSètus
(

1680 
AT91PS_MC
 
pMC
)

1682  
pMC
->
MC_FSR
;

1683 
	}
}

1689 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Masked
(

1690 
AT91PS_MC
 
pMC
,

1691 
Êag
)

1693  (
	`AT91F_MC_EFC_GëModeReg
(
pMC
Ë& 
Êag
);

1694 
	}
}

1700 
__ölöe
 
	$AT91F_MC_EFC_IsI¡îru±Së
(

1701 
AT91PS_MC
 
pMC
,

1702 
Êag
)

1704  (
	`AT91F_MC_EFC_GëSètus
(
pMC
Ë& 
Êag
);

1705 
	}
}

1714 
__ölöe
 
	$AT91F_SPI_O≥n
 (

1715 c⁄° 
nuŒ
)

1719 
	}
}

1725 
__ölöe
 
	$AT91F_SPI_CfgCs
 (

1726 
AT91PS_SPI
 
pSPI
,

1727 
cs
,

1728 
vÆ
)

1731 *(
pSPI
->
SPI_CSR
 + 
cs
Ë
vÆ
;

1732 
	}
}

1738 
__ölöe
 
	$AT91F_SPI_E«bÀIt
 (

1739 
AT91PS_SPI
 
pSPI
,

1740 
Êag
)

1743 
pSPI
->
SPI_IER
 = 
Êag
;

1744 
	}
}

1750 
__ölöe
 
	$AT91F_SPI_DißbÀIt
 (

1751 
AT91PS_SPI
 
pSPI
,

1752 
Êag
)

1755 
pSPI
->
SPI_IDR
 = 
Êag
;

1756 
	}
}

1762 
__ölöe
 
	$AT91F_SPI_Re£t
 (

1763 
AT91PS_SPI
 
pSPI


1767 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SWRST
;

1768 
	}
}

1774 
__ölöe
 
	$AT91F_SPI_E«bÀ
 (

1775 
AT91PS_SPI
 
pSPI


1779 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIEN
;

1780 
	}
}

1786 
__ölöe
 
	$AT91F_SPI_DißbÀ
 (

1787 
AT91PS_SPI
 
pSPI


1791 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1792 
	}
}

1798 
__ölöe
 
	$AT91F_SPI_CfgMode
 (

1799 
AT91PS_SPI
 
pSPI
,

1800 
mode
)

1803 
pSPI
->
SPI_MR
 = 
mode
;

1804 
	}
}

1810 
__ölöe
 
	$AT91F_SPI_CfgPCS
 (

1811 
AT91PS_SPI
 
pSPI
,

1812 
PCS_Devi˚
)

1815 
pSPI
->
SPI_MR
 &= 0xFFF0FFFF;

1816 
pSPI
->
SPI_MR
 |–(
PCS_Devi˚
<<16Ë& 
AT91C_SPI_PCS
 );

1817 
	}
}

1823 
__ölöe
 
	$AT91F_SPI_Re˚iveFøme
 (

1824 
AT91PS_SPI
 
pSPI
,

1825 *
pBuf„r
,

1826 
szBuf„r
,

1827 *
pNextBuf„r
,

1828 
szNextBuf„r
 )

1830  
	`AT91F_PDC_Re˚iveFøme
(

1831 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1832 
pBuf„r
,

1833 
szBuf„r
,

1834 
pNextBuf„r
,

1835 
szNextBuf„r
);

1836 
	}
}

1842 
__ölöe
 
	$AT91F_SPI_SídFøme
(

1843 
AT91PS_SPI
 
pSPI
,

1844 *
pBuf„r
,

1845 
szBuf„r
,

1846 *
pNextBuf„r
,

1847 
szNextBuf„r
 )

1849  
	`AT91F_PDC_SídFøme
(

1850 (
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
),

1851 
pBuf„r
,

1852 
szBuf„r
,

1853 
pNextBuf„r
,

1854 
szNextBuf„r
);

1855 
	}
}

1861 
__ölöe
 
	$AT91F_SPI_Clo£
 (

1862 
AT91PS_SPI
 
pSPI
)

1865 
pSPI
->
SPI_CSR
[0] = 0 ;

1866 
pSPI
->
SPI_CSR
[1] = 0 ;

1867 
pSPI
->
SPI_CSR
[2] = 0 ;

1868 
pSPI
->
SPI_CSR
[3] = 0 ;

1871 
pSPI
->
SPI_MR
 = 0 ;

1874 
pSPI
->
SPI_IDR
 = 0xFFFFFFFF ;

1877 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pSPI
->
SPI_RPR
));

1880 
pSPI
->
SPI_CR
 = 
AT91C_SPI_SPIDIS
;

1881 
	}
}

1887 
__ölöe
 
	$AT91F_SPI_PutCh¨
 (

1888 
AT91PS_SPI
 
pSPI
,

1889 
ch¨a˘î
,

1890 
cs_numbî
 )

1892 
vÆue_f‹_cs
;

1893 
vÆue_f‹_cs
 = (~(1 << 
cs_numbî
)) & 0xF;

1894 
pSPI
->
SPI_TDR
 = (
ch¨a˘î
 & 0xFFFFË| (
vÆue_f‹_cs
 << 16);

1895 
	}
}

1901 
__ölöe
 
	$AT91F_SPI_GëCh¨
 (

1902 c⁄° 
AT91PS_SPI
 
pSPI
)

1904 ((
pSPI
->
SPI_RDR
) & 0xFFFF);

1905 
	}
}

1911 
__ölöe
 
	$AT91F_SPI_GëI¡îru±MaskSètus
(

1912 
AT91PS_SPI
 
pSpi
)

1914  
pSpi
->
SPI_IMR
;

1915 
	}
}

1921 
__ölöe
 
	$AT91F_SPI_IsI¡îru±Masked
(

1922 
AT91PS_SPI
 
pSpi
,

1923 
Êag
)

1925  (
	`AT91F_SPI_GëI¡îru±MaskSètus
(
pSpi
Ë& 
Êag
);

1926 
	}
}

1935 
	#AT91C_US_ASYNC_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

	)

1936 
	gAT91C_US_NBSTOP_1_BIT
 + \

1937 
	gAT91C_US_PAR_NONE
 + \

1938 
	gAT91C_US_CHRL_8_BITS
 + \

1939 
	gAT91C_US_CLKS_CLOCK
 )

1942 
	#AT91C_US_ASYNC_SCK_MODE
 ( 
AT91C_US_USMODE_NORMAL
 + \

	)

1943 
	gAT91C_US_NBSTOP_1_BIT
 + \

1944 
	gAT91C_US_PAR_NONE
 + \

1945 
	gAT91C_US_CHRL_8_BITS
 + \

1946 
	gAT91C_US_CLKS_EXT
 )

1949 
	#AT91C_US_SYNC_MODE
 ( 
AT91C_US_SYNC
 + \

	)

1950 
	gAT91C_US_USMODE_NORMAL
 + \

1951 
	gAT91C_US_NBSTOP_1_BIT
 + \

1952 
	gAT91C_US_PAR_NONE
 + \

1953 
	gAT91C_US_CHRL_8_BITS
 + \

1954 
	gAT91C_US_CLKS_CLOCK
 )

1957 
	#AT91C_US_SCK_USED
 (
AT91C_US_CKLO
 | 
AT91C_US_CLKS_EXT
)

	)

1960 
	#AT91C_US_ISO_READER_MODE
 ( 
AT91C_US_USMODE_ISO7816_0
 + \

	)

1961 
	gAT91C_US_CLKS_CLOCK
 +\

1962 
	gAT91C_US_NBSTOP_1_BIT
 + \

1963 
	gAT91C_US_PAR_EVEN
 + \

1964 
	gAT91C_US_CHRL_8_BITS
 + \

1965 
	gAT91C_US_CKLO
 +\

1966 
	gAT91C_US_OVER
)

1969 
	#AT91C_US_ASYNC_IRDA_MODE
 ( 
AT91C_US_USMODE_IRDA
 + \

	)

1970 
	gAT91C_US_NBSTOP_1_BIT
 + \

1971 
	gAT91C_US_PAR_NONE
 + \

1972 
	gAT91C_US_CHRL_8_BITS
 + \

1973 
	gAT91C_US_CLKS_CLOCK
 )

1979 
__ölöe
 
	$AT91F_US_Baudøã
 (

1980 c⁄° 
maö_˛ock
,

1981 c⁄° 
baud_øã
)

1983 
baud_vÆue
 = ((
maö_˛ock
*10)/(
baud_øã
 * 16));

1984 i‡((
baud_vÆue
 % 10) >= 5)

1985 
baud_vÆue
 = (baud_value / 10) + 1;

1987 
baud_vÆue
 /= 10;

1988  
baud_vÆue
;

1989 
	}
}

1995 
__ölöe
 
	$AT91F_US_SëBaudøã
 (

1996 
AT91PS_USART
 
pUSART
,

1997 
maöClock
,

1998 
•ìd
)

2001 
pUSART
->
US_BRGR
 = 
	`AT91F_US_Baudøã
(
maöClock
, 
•ìd
);

2002 
	}
}

2008 
__ölöe
 
	$AT91F_US_SëTimegu¨d
 (

2009 
AT91PS_USART
 
pUSART
,

2010 
timegu¨d
)

2013 
pUSART
->
US_TTGR
 = 
timegu¨d
 ;

2014 
	}
}

2020 
__ölöe
 
	$AT91F_US_E«bÀIt
 (

2021 
AT91PS_USART
 
pUSART
,

2022 
Êag
)

2025 
pUSART
->
US_IER
 = 
Êag
;

2026 
	}
}

2032 
__ölöe
 
	$AT91F_US_DißbÀIt
 (

2033 
AT91PS_USART
 
pUSART
,

2034 
Êag
)

2037 
pUSART
->
US_IDR
 = 
Êag
;

2038 
	}
}

2044 
__ölöe
 
	$AT91F_US_C⁄figuª
 (

2045 
AT91PS_USART
 
pUSART
,

2046 
maöClock
,

2047 
mode
 ,

2048 
baudR©e
 ,

2049 
timegu¨d
 )

2052 
pUSART
->
US_IDR
 = () -1;

2055 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RXDIS
 | 
AT91C_US_TXDIS
 ;

2058 
	`AT91F_US_SëBaudøã
(
pUSART
, 
maöClock
, 
baudR©e
);

2061 
	`AT91F_US_SëTimegu¨d
(
pUSART
, 
timegu¨d
);

2064 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2067 
pUSART
->
US_MR
 = 
mode
 ;

2069 
	}
}

2075 
__ölöe
 
	$AT91F_US_E«bÀRx
 (

2076 
AT91PS_USART
 
pUSART
)

2079 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2080 
	}
}

2086 
__ölöe
 
	$AT91F_US_E«bÀTx
 (

2087 
AT91PS_USART
 
pUSART
)

2090 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2091 
	}
}

2097 
__ölöe
 
	$AT91F_US_Re£tRx
 (

2098 
AT91PS_USART
 
pUSART
)

2101 
pUSART
->
US_CR
 = 
AT91C_US_RSTRX
;

2103 
pUSART
->
US_CR
 = 
AT91C_US_RXEN
;

2104 
	}
}

2110 
__ölöe
 
	$AT91F_US_Re£tTx
 (

2111 
AT91PS_USART
 
pUSART
)

2114 
pUSART
->
US_CR
 = 
AT91C_US_RSTTX
;

2116 
pUSART
->
US_CR
 = 
AT91C_US_TXEN
;

2117 
	}
}

2123 
__ölöe
 
	$AT91F_US_DißbÀRx
 (

2124 
AT91PS_USART
 
pUSART
)

2127 
pUSART
->
US_CR
 = 
AT91C_US_RXDIS
;

2128 
	}
}

2134 
__ölöe
 
	$AT91F_US_DißbÀTx
 (

2135 
AT91PS_USART
 
pUSART
)

2138 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
;

2139 
	}
}

2145 
__ölöe
 
	$AT91F_US_Clo£
 (

2146 
AT91PS_USART
 
pUSART
)

2149 
pUSART
->
US_BRGR
 = 0 ;

2152 
pUSART
->
US_MR
 = 0 ;

2155 
pUSART
->
US_TTGR
 = 0;

2158 
pUSART
->
US_IDR
 = 0xFFFFFFFF ;

2161 
	`AT91F_PDC_Clo£
((
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
));

2164 
pUSART
->
US_CR
 = 
AT91C_US_TXDIS
 | 
AT91C_US_RXDIS
 | 
AT91C_US_RSTTX
 | 
AT91C_US_RSTRX
 ;

2165 
	}
}

2171 
__ölöe
 
	$AT91F_US_TxRódy
 (

2172 
AT91PS_USART
 
pUSART
 )

2174  (
pUSART
->
US_CSR
 & 
AT91C_US_TXRDY
);

2175 
	}
}

2181 
__ölöe
 
	$AT91F_US_RxRódy
 (

2182 
AT91PS_USART
 
pUSART
 )

2184  (
pUSART
->
US_CSR
 & 
AT91C_US_RXRDY
);

2185 
	}
}

2191 
__ölöe
 
	$AT91F_US_Eº‹
 (

2192 
AT91PS_USART
 
pUSART
 )

2194  (
pUSART
->
US_CSR
 &

2195 (
AT91C_US_OVRE
 |

2196 
AT91C_US_FRAME
 |

2197 
AT91C_US_PARE
));

2198 
	}
}

2204 
__ölöe
 
	$AT91F_US_PutCh¨
 (

2205 
AT91PS_USART
 
pUSART
,

2206 
ch¨a˘î
 )

2208 
pUSART
->
US_THR
 = (
ch¨a˘î
 & 0x1FF);

2209 
	}
}

2215 
__ölöe
 
	$AT91F_US_GëCh¨
 (

2216 c⁄° 
AT91PS_USART
 
pUSART
)

2218 ((
pUSART
->
US_RHR
) & 0x1FF);

2219 
	}
}

2225 
__ölöe
 
	$AT91F_US_SídFøme
(

2226 
AT91PS_USART
 
pUSART
,

2227 *
pBuf„r
,

2228 
szBuf„r
,

2229 *
pNextBuf„r
,

2230 
szNextBuf„r
 )

2232  
	`AT91F_PDC_SídFøme
(

2233 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2234 
pBuf„r
,

2235 
szBuf„r
,

2236 
pNextBuf„r
,

2237 
szNextBuf„r
);

2238 
	}
}

2244 
__ölöe
 
	$AT91F_US_Re˚iveFøme
 (

2245 
AT91PS_USART
 
pUSART
,

2246 *
pBuf„r
,

2247 
szBuf„r
,

2248 *
pNextBuf„r
,

2249 
szNextBuf„r
 )

2251  
	`AT91F_PDC_Re˚iveFøme
(

2252 (
AT91PS_PDC
Ë&(
pUSART
->
US_RPR
),

2253 
pBuf„r
,

2254 
szBuf„r
,

2255 
pNextBuf„r
,

2256 
szNextBuf„r
);

2257 
	}
}

2263 
__ölöe
 
	$AT91F_US_SëIrdaFûãr
 (

2264 
AT91PS_USART
 
pUSART
,

2265 
vÆue


2268 
pUSART
->
US_IF
 = 
vÆue
;

2269 
	}
}

2279 
	#AT91C_I2S_ASY_MASTER_TX_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)–+\

	)

2280 
	gAT91C_SSC_CKS_DIV
 +\

2281 
	gAT91C_SSC_CKO_CONTINOUS
 +\

2282 
	gAT91C_SSC_CKG_NONE
 +\

2283 
	gAT91C_SSC_START_FALL_RF
 +\

2284 
	gAT91C_SSC_STTOUT
 +\

2285 ((1<<16Ë& 
	gAT91C_SSC_STTDLY
) +\

2286 ((((
nb_bô_by_¶Ÿ
*
	gnb_¶Ÿ_by_‰ame
)/2)-1) <<24))

2292 
	#AT91C_I2S_ASY_TX_FRAME_SETTING
(
nb_bô_by_¶Ÿ
, 
nb_¶Ÿ_by_‰ame
)–+\

	)

2293 (
	gnb_bô_by_¶Ÿ
-1) +\

2294 
	gAT91C_SSC_MSBF
 +\

2295 (((
	gnb_¶Ÿ_by_‰ame
-1)<<8Ë& 
	gAT91C_SSC_DATNB
) +\

2296 (((
	gnb_bô_by_¶Ÿ
-1)<<16Ë& 
	gAT91C_SSC_FSLEN
) +\

2297 
	gAT91C_SSC_FSOS_NEGATIVE
)

2304 
__ölöe
 
	$AT91F_SSC_SëBaudøã
 (

2305 
AT91PS_SSC
 
pSSC
,

2306 
maöClock
,

2307 
•ìd
)

2309 
baud_vÆue
;

2311 i‡(
•ìd
 == 0)

2312 
baud_vÆue
 = 0;

2315 
baud_vÆue
 = (Ë(
maöClock
 * 10)/(2*
•ìd
);

2316 i‡((
baud_vÆue
 % 10) >= 5)

2317 
baud_vÆue
 = (baud_value / 10) + 1;

2319 
baud_vÆue
 /= 10;

2322 
pSSC
->
SSC_CMR
 = 
baud_vÆue
;

2323 
	}
}

2329 
__ölöe
 
	$AT91F_SSC_C⁄figuª
 (

2330 
AT91PS_SSC
 
pSSC
,

2331 
sy°_˛ock
,

2332 
baud_øã
,

2333 
˛ock_rx
,

2334 
mode_rx
,

2335 
˛ock_tx
,

2336 
mode_tx
)

2339 
pSSC
->
SSC_IDR
 = () -1;

2342 
pSSC
->
SSC_CR
 = 
AT91C_SSC_SWRST
 | 
AT91C_SSC_RXDIS
 | 
AT91C_SSC_TXDIS
 ;

2345 
	`AT91F_SSC_SëBaudøã
(
pSSC
, 
sy°_˛ock
, 
baud_øã
);

2348 
pSSC
->
SSC_RCMR
 = 
˛ock_rx
;

2351 
pSSC
->
SSC_TCMR
 = 
˛ock_tx
;

2354 
pSSC
->
SSC_RFMR
 = 
mode_rx
;

2357 
pSSC
->
SSC_TFMR
 = 
mode_tx
;

2360 
	`AT91F_PDC_O≥n
((
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
));

2363 
	}
}

2369 
__ölöe
 
	$AT91F_SSC_E«bÀRx
 (

2370 
AT91PS_SSC
 
pSSC
)

2373 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXEN
;

2374 
	}
}

2380 
__ölöe
 
	$AT91F_SSC_DißbÀRx
 (

2381 
AT91PS_SSC
 
pSSC
)

2384 
pSSC
->
SSC_CR
 = 
AT91C_SSC_RXDIS
;

2385 
	}
}

2391 
__ölöe
 
	$AT91F_SSC_E«bÀTx
 (

2392 
AT91PS_SSC
 
pSSC
)

2395 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXEN
;

2396 
	}
}

2402 
__ölöe
 
	$AT91F_SSC_DißbÀTx
 (

2403 
AT91PS_SSC
 
pSSC
)

2406 
pSSC
->
SSC_CR
 = 
AT91C_SSC_TXDIS
;

2407 
	}
}

2413 
__ölöe
 
	$AT91F_SSC_E«bÀIt
 (

2414 
AT91PS_SSC
 
pSSC
,

2415 
Êag
)

2418 
pSSC
->
SSC_IER
 = 
Êag
;

2419 
	}
}

2425 
__ölöe
 
	$AT91F_SSC_DißbÀIt
 (

2426 
AT91PS_SSC
 
pSSC
,

2427 
Êag
)

2430 
pSSC
->
SSC_IDR
 = 
Êag
;

2431 
	}
}

2437 
__ölöe
 
	$AT91F_SSC_Re˚iveFøme
 (

2438 
AT91PS_SSC
 
pSSC
,

2439 *
pBuf„r
,

2440 
szBuf„r
,

2441 *
pNextBuf„r
,

2442 
szNextBuf„r
 )

2444  
	`AT91F_PDC_Re˚iveFøme
(

2445 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2446 
pBuf„r
,

2447 
szBuf„r
,

2448 
pNextBuf„r
,

2449 
szNextBuf„r
);

2450 
	}
}

2456 
__ölöe
 
	$AT91F_SSC_SídFøme
(

2457 
AT91PS_SSC
 
pSSC
,

2458 *
pBuf„r
,

2459 
szBuf„r
,

2460 *
pNextBuf„r
,

2461 
szNextBuf„r
 )

2463  
	`AT91F_PDC_SídFøme
(

2464 (
AT91PS_PDC
Ë&(
pSSC
->
SSC_RPR
),

2465 
pBuf„r
,

2466 
szBuf„r
,

2467 
pNextBuf„r
,

2468 
szNextBuf„r
);

2469 
	}
}

2475 
__ölöe
 
	$AT91F_SSC_GëI¡îru±MaskSètus
(

2476 
AT91PS_SSC
 
pSsc
)

2478  
pSsc
->
SSC_IMR
;

2479 
	}
}

2485 
__ölöe
 
	$AT91F_SSC_IsI¡îru±Masked
(

2486 
AT91PS_SSC
 
pSsc
,

2487 
Êag
)

2489  (
	`AT91F_SSC_GëI¡îru±MaskSètus
(
pSsc
Ë& 
Êag
);

2490 
	}
}

2499 
__ölöe
 
	$AT91F_TWI_E«bÀIt
 (

2500 
AT91PS_TWI
 
pTWI
,

2501 
Êag
)

2504 
pTWI
->
TWI_IER
 = 
Êag
;

2505 
	}
}

2511 
__ölöe
 
	$AT91F_TWI_DißbÀIt
 (

2512 
AT91PS_TWI
 
pTWI
,

2513 
Êag
)

2516 
pTWI
->
TWI_IDR
 = 
Êag
;

2517 
	}
}

2523 
__ölöe
 
	$AT91F_TWI_C⁄figuª
 ( 
AT91PS_TWI
 
pTWI
 )

2526 
pTWI
->
TWI_IDR
 = () -1;

2529 
pTWI
->
TWI_CR
 = 
AT91C_TWI_SWRST
;

2532 
pTWI
->
TWI_CR
 = 
AT91C_TWI_MSEN
;

2534 
	}
}

2540 
__ölöe
 
	$AT91F_TWI_GëI¡îru±MaskSètus
(

2541 
AT91PS_TWI
 
pTwi
)

2543  
pTwi
->
TWI_IMR
;

2544 
	}
}

2550 
__ölöe
 
	$AT91F_TWI_IsI¡îru±Masked
(

2551 
AT91PS_TWI
 
pTwi
,

2552 
Êag
)

2554  (
	`AT91F_TWI_GëI¡îru±MaskSètus
(
pTwi
Ë& 
Êag
);

2555 
	}
}

2564 
__ölöe
 
	$AT91F_PWMC_GëSètus
(

2565 
AT91PS_PWMC
 
pPWM
)

2567  
pPWM
->
PWMC_SR
;

2568 
	}
}

2574 
__ölöe
 
	$AT91F_PWMC_I¡îru±E«bÀ
(

2575 
AT91PS_PWMC
 
pPwm
,

2576 
Êag
)

2578 
pPwm
->
PWMC_IER
 = 
Êag
;

2579 
	}
}

2585 
__ölöe
 
	$AT91F_PWMC_I¡îru±DißbÀ
(

2586 
AT91PS_PWMC
 
pPwm
,

2587 
Êag
)

2589 
pPwm
->
PWMC_IDR
 = 
Êag
;

2590 
	}
}

2596 
__ölöe
 
	$AT91F_PWMC_GëI¡îru±MaskSètus
(

2597 
AT91PS_PWMC
 
pPwm
)

2599  
pPwm
->
PWMC_IMR
;

2600 
	}
}

2606 
__ölöe
 
	$AT91F_PWMC_IsI¡îru±Masked
(

2607 
AT91PS_PWMC
 
pPWM
,

2608 
Êag
)

2610  (
	`AT91F_PWMC_GëI¡îru±MaskSètus
(
pPWM
Ë& 
Êag
);

2611 
	}
}

2617 
__ölöe
 
	$AT91F_PWMC_IsSètusSë
(

2618 
AT91PS_PWMC
 
pPWM
,

2619 
Êag
)

2621  (
	`AT91F_PWMC_GëSètus
(
pPWM
Ë& 
Êag
);

2622 
	}
}

2628 
__ölöe
 
	$AT91F_PWMC_CfgCh™√l
(

2629 
AT91PS_PWMC
 
pPWM
,

2630 
ch™√lId
,

2631 
mode
,

2632 
≥riod
,

2633 
duty
)

2635 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CMR
 = 
mode
;

2636 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CDTYR
 = 
duty
;

2637 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CPRDR
 = 
≥riod
;

2638 
	}
}

2644 
__ölöe
 
	$AT91F_PWMC_SèπCh™√l
(

2645 
AT91PS_PWMC
 
pPWM
,

2646 
Êag
)

2648 
pPWM
->
PWMC_ENA
 = 
Êag
;

2649 
	}
}

2655 
__ölöe
 
	$AT91F_PWMC_St›Ch™√l
(

2656 
AT91PS_PWMC
 
pPWM
,

2657 
Êag
)

2659 
pPWM
->
PWMC_DIS
 = 
Êag
;

2660 
	}
}

2666 
__ölöe
 
	$AT91F_PWMC_Upd©eCh™√l
(

2667 
AT91PS_PWMC
 
pPWM
,

2668 
ch™√lId
,

2669 
upd©e
)

2671 
pPWM
->
PWMC_CH
[
ch™√lId
].
PWMC_CUPDR
 = 
upd©e
;

2672 
	}
}

2681 
__ölöe
 
	$AT91F_UDP_E«bÀIt
 (

2682 
AT91PS_UDP
 
pUDP
,

2683 
Êag
)

2686 
pUDP
->
UDP_IER
 = 
Êag
;

2687 
	}
}

2693 
__ölöe
 
	$AT91F_UDP_DißbÀIt
 (

2694 
AT91PS_UDP
 
pUDP
,

2695 
Êag
)

2698 
pUDP
->
UDP_IDR
 = 
Êag
;

2699 
	}
}

2705 
__ölöe
 
	$AT91F_UDP_SëAddªss
 (

2706 
AT91PS_UDP
 
pUDP
,

2707 
addªss
)

2709 
pUDP
->
UDP_FADDR
 = (
AT91C_UDP_FEN
 | 
addªss
);

2710 
	}
}

2716 
__ölöe
 
	$AT91F_UDP_E«bÀEp
 (

2717 
AT91PS_UDP
 
pUDP
,

2718 
ídpoöt
)

2720 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_EPEDS
;

2721 
	}
}

2727 
__ölöe
 
	$AT91F_UDP_DißbÀEp
 (

2728 
AT91PS_UDP
 
pUDP
,

2729 
ídpoöt
)

2731 
pUDP
->
UDP_CSR
[
ídpoöt
] &~
AT91C_UDP_EPEDS
;

2732 
	}
}

2738 
__ölöe
 
	$AT91F_UDP_SëSèã
 (

2739 
AT91PS_UDP
 
pUDP
,

2740 
Êag
)

2742 
pUDP
->
UDP_GLBSTATE
 &~(
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
);

2743 
pUDP
->
UDP_GLBSTATE
 |
Êag
;

2744 
	}
}

2750 
__ölöe
 
	$AT91F_UDP_GëSèã
 (

2751 
AT91PS_UDP
 
pUDP
)

2753  (
pUDP
->
UDP_GLBSTATE
 & (
AT91C_UDP_FADDEN
 | 
AT91C_UDP_CONFG
));

2754 
	}
}

2760 
__ölöe
 
	$AT91F_UDP_Re£tEp
 (

2761 
AT91PS_UDP
 
pUDP
,

2762 
Êag
)

2764 
pUDP
->
UDP_RSTEP
 = 
Êag
;

2765 
pUDP
->
UDP_RSTEP
 = 0;

2766 
	}
}

2772 
__ölöe
 
	$AT91F_UDP_EpSèŒ
(

2773 
AT91PS_UDP
 
pUDP
,

2774 
ídpoöt
)

2776 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_FORCESTALL
;

2777 
	}
}

2783 
__ölöe
 
	$AT91F_UDP_EpWrôe
(

2784 
AT91PS_UDP
 
pUDP
,

2785 
ídpoöt
,

2786 
vÆue
)

2788 
pUDP
->
UDP_FDR
[
ídpoöt
] = 
vÆue
;

2789 
	}
}

2795 
__ölöe
 
	$AT91F_UDP_EpRód
(

2796 
AT91PS_UDP
 
pUDP
,

2797 
ídpoöt
)

2799  
pUDP
->
UDP_FDR
[
ídpoöt
];

2800 
	}
}

2806 
__ölöe
 
	$AT91F_UDP_EpEndOfWr
(

2807 
AT91PS_UDP
 
pUDP
,

2808 
ídpoöt
)

2810 
pUDP
->
UDP_CSR
[
ídpoöt
] |
AT91C_UDP_TXPKTRDY
;

2811 
	}
}

2817 
__ölöe
 
	$AT91F_UDP_EpCÀ¨
(

2818 
AT91PS_UDP
 
pUDP
,

2819 
ídpoöt
,

2820 
Êag
)

2822 
pUDP
->
UDP_CSR
[
ídpoöt
] &~(
Êag
);

2823 
	}
}

2829 
__ölöe
 
	$AT91F_UDP_EpSë
(

2830 
AT91PS_UDP
 
pUDP
,

2831 
ídpoöt
,

2832 
Êag
)

2834 
pUDP
->
UDP_CSR
[
ídpoöt
] |
Êag
;

2835 
	}
}

2841 
__ölöe
 
	$AT91F_UDP_EpSètus
(

2842 
AT91PS_UDP
 
pUDP
,

2843 
ídpoöt
)

2845  
pUDP
->
UDP_CSR
[
ídpoöt
];

2846 
	}
}

2852 
__ölöe
 
	$AT91F_UDP_GëI¡îru±MaskSètus
(

2853 
AT91PS_UDP
 
pUdp
)

2855  
pUdp
->
UDP_IMR
;

2856 
	}
}

2862 
__ölöe
 
	$AT91F_UDP_IsI¡îru±Masked
(

2863 
AT91PS_UDP
 
pUdp
,

2864 
Êag
)

2866  (
	`AT91F_UDP_GëI¡îru±MaskSètus
(
pUdp
Ë& 
Êag
);

2867 
	}
}

2876 
__ölöe
 
	$AT91F_TC_I¡îru±E«bÀ
(

2877 
AT91PS_TC
 
pTc
,

2878 
Êag
)

2880 
pTc
->
TC_IER
 = 
Êag
;

2881 
	}
}

2887 
__ölöe
 
	$AT91F_TC_I¡îru±DißbÀ
(

2888 
AT91PS_TC
 
pTc
,

2889 
Êag
)

2891 
pTc
->
TC_IDR
 = 
Êag
;

2892 
	}
}

2898 
__ölöe
 
	$AT91F_TC_GëI¡îru±MaskSètus
(

2899 
AT91PS_TC
 
pTc
)

2901  
pTc
->
TC_IMR
;

2902 
	}
}

2908 
__ölöe
 
	$AT91F_TC_IsI¡îru±Masked
(

2909 
AT91PS_TC
 
pTc
,

2910 
Êag
)

2912  (
	`AT91F_TC_GëI¡îru±MaskSètus
(
pTc
Ë& 
Êag
);

2913 
	}
}

2918 
	#STANDARD_FORMAT
 0

	)

2919 
	#EXTENDED_FORMAT
 1

	)

2925 
__ölöe
 
	$AT91F_InôMaûboxRegi°îs
(
AT91PS_CAN_MB
 
CAN_Maûbox
,

2926 
mode_ªg
,

2927 
ac˚±™˚_mask_ªg
,

2928 
id_ªg
,

2929 
d©a_low_ªg
,

2930 
d©a_high_ªg
,

2931 
c⁄åﬁ_ªg
)

2933 
CAN_Maûbox
->
CAN_MB_MCR
 = 0x0;

2934 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode_ªg
;

2935 
CAN_Maûbox
->
CAN_MB_MAM
 = 
ac˚±™˚_mask_ªg
;

2936 
CAN_Maûbox
->
CAN_MB_MID
 = 
id_ªg
;

2937 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a_low_ªg
;

2938 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a_high_ªg
;

2939 
CAN_Maûbox
->
CAN_MB_MCR
 = 
c⁄åﬁ_ªg
;

2940 
	}
}

2946 
__ölöe
 
	$AT91F_E«bÀCAN
(

2947 
AT91PS_CAN
 
pCAN
)

2949 
pCAN
->
CAN_MR
 |
AT91C_CAN_CANEN
;

2952  (
pCAN
->
CAN_SR
 & 
AT91C_CAN_WAKEUP
) != AT91C_CAN_WAKEUP );

2953 
	}
}

2959 
__ölöe
 
	$AT91F_DißbÀCAN
(

2960 
AT91PS_CAN
 
pCAN
)

2962 
pCAN
->
CAN_MR
 &~
AT91C_CAN_CANEN
;

2963 
	}
}

2969 
__ölöe
 
	$AT91F_CAN_E«bÀIt
 (

2970 
AT91PS_CAN
 
pCAN
,

2971 
Êag
)

2974 
pCAN
->
CAN_IER
 = 
Êag
;

2975 
	}
}

2981 
__ölöe
 
	$AT91F_CAN_DißbÀIt
 (

2982 
AT91PS_CAN
 
pCAN
,

2983 
Êag
)

2986 
pCAN
->
CAN_IDR
 = 
Êag
;

2987 
	}
}

2993 
__ölöe
 
	$AT91F_CAN_GëSètus
(

2994 
AT91PS_CAN
 
pCAN
)

2996  
pCAN
->
CAN_SR
;

2997 
	}
}

3003 
__ölöe
 
	$AT91F_CAN_GëI¡îru±MaskSètus
(

3004 
AT91PS_CAN
 
pCAN
)

3006  
pCAN
->
CAN_IMR
;

3007 
	}
}

3013 
__ölöe
 
	$AT91F_CAN_IsI¡îru±Masked
(

3014 
AT91PS_CAN
 
pCAN
,

3015 
Êag
)

3017  (
	`AT91F_CAN_GëI¡îru±MaskSètus
(
pCAN
Ë& 
Êag
);

3018 
	}
}

3024 
__ölöe
 
	$AT91F_CAN_IsSètusSë
(

3025 
AT91PS_CAN
 
pCAN
,

3026 
Êag
)

3028  (
	`AT91F_CAN_GëSètus
(
pCAN
Ë& 
Êag
);

3029 
	}
}

3035 
__ölöe
 
	$AT91F_CAN_CfgModeReg
 (

3036 
AT91PS_CAN
 
pCAN
,

3037 
mode
)

3040 
pCAN
->
CAN_MR
 = 
mode
;

3041 
	}
}

3047 
__ölöe
 
	$AT91F_CAN_GëModeReg
 (

3048 
AT91PS_CAN
 
pCAN


3051  
pCAN
->
CAN_MR
;

3052 
	}
}

3058 
__ölöe
 
	$AT91F_CAN_CfgBaudøãReg
 (

3059 
AT91PS_CAN
 
pCAN
,

3060 
baudøã_cfg
)

3063 
pCAN
->
CAN_BR
 = 
baudøã_cfg
;

3064 
	}
}

3070 
__ölöe
 
	$AT91F_CAN_GëBaudøã
 (

3071 
AT91PS_CAN
 
pCAN


3074  
pCAN
->
CAN_BR
;

3075 
	}
}

3081 
__ölöe
 
	$AT91F_CAN_GëI¡î«lCou¡î
 (

3082 
AT91PS_CAN
 
pCAN


3085  
pCAN
->
CAN_TIM
;

3086 
	}
}

3092 
__ölöe
 
	$AT91F_CAN_GëTime°amp
 (

3093 
AT91PS_CAN
 
pCAN


3096  
pCAN
->
CAN_TIMESTP
;

3097 
	}
}

3103 
__ölöe
 
	$AT91F_CAN_GëEº‹Cou¡î
 (

3104 
AT91PS_CAN
 
pCAN


3107  
pCAN
->
CAN_ECR
;

3108 
	}
}

3114 
__ölöe
 
	$AT91F_CAN_InôTøns„rReque°
 (

3115 
AT91PS_CAN
 
pCAN
,

3116 
å™s„r_cmd
)

3118 
pCAN
->
CAN_TCR
 = 
å™s„r_cmd
;

3119 
	}
}

3125 
__ölöe
 
	$AT91F_CAN_InôAb‹tReque°
 (

3126 
AT91PS_CAN
 
pCAN
,

3127 
ab‹t_cmd
)

3129 
pCAN
->
CAN_ACR
 = 
ab‹t_cmd
;

3130 
	}
}

3136 
__ölöe
 
	$AT91F_CAN_CfgMesßgeModeReg
 (

3137 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3138 
mode
)

3140 
CAN_Maûbox
->
CAN_MB_MMR
 = 
mode
;

3141 
	}
}

3147 
__ölöe
 
	$AT91F_CAN_GëMesßgeModeReg
 (

3148 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3150  
CAN_Maûbox
->
CAN_MB_MMR
;

3151 
	}
}

3158 
__ölöe
 
	$AT91F_CAN_CfgMesßgeIDReg
 (

3159 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3160 
id
,

3161 
vîsi⁄
)

3163 if(
vîsi⁄
==0)

3164 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
<<18;

3166 
CAN_Maûbox
->
CAN_MB_MID
 = 
id
 | (1<<29);

3167 
	}
}

3173 
__ölöe
 
	$AT91F_CAN_GëMesßgeIDReg
 (

3174 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3176  
CAN_Maûbox
->
CAN_MB_MID
;

3177 
	}
}

3183 
__ölöe
 
	$AT91F_CAN_CfgMesßgeAc˚±™˚MaskReg
 (

3184 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3185 
mask
)

3187 
CAN_Maûbox
->
CAN_MB_MAM
 = 
mask
;

3188 
	}
}

3194 
__ölöe
 
	$AT91F_CAN_GëMesßgeAc˚±™˚MaskReg
 (

3195 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3197  
CAN_Maûbox
->
CAN_MB_MAM
;

3198 
	}
}

3204 
__ölöe
 
	$AT91F_CAN_GëFamûyID
 (

3205 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3207  
CAN_Maûbox
->
CAN_MB_MFID
;

3208 
	}
}

3214 
__ölöe
 
	$AT91F_CAN_CfgMesßgeCålReg
 (

3215 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3216 
mesßge_˘æ_cmd
)

3218 
CAN_Maûbox
->
CAN_MB_MCR
 = 
mesßge_˘æ_cmd
;

3219 
	}
}

3225 
__ölöe
 
	$AT91F_CAN_GëMesßgeSètus
 (

3226 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3228  
CAN_Maûbox
->
CAN_MB_MSR
;

3229 
	}
}

3235 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aLow
 (

3236 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3237 
d©a
)

3239 
CAN_Maûbox
->
CAN_MB_MDL
 = 
d©a
;

3240 
	}
}

3246 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aLow
 (

3247 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3249  
CAN_Maûbox
->
CAN_MB_MDL
;

3250 
	}
}

3256 
__ölöe
 
	$AT91F_CAN_CfgMesßgeD©aHigh
 (

3257 
AT91PS_CAN_MB
 
CAN_Maûbox
,

3258 
d©a
)

3260 
CAN_Maûbox
->
CAN_MB_MDH
 = 
d©a
;

3261 
	}
}

3267 
__ölöe
 
	$AT91F_CAN_GëMesßgeD©aHigh
 (

3268 
AT91PS_CAN_MB
 
CAN_Maûbox
)

3270  
CAN_Maûbox
->
CAN_MB_MDH
;

3271 
	}
}

3277 
__ölöe
 
	$AT91F_CAN_O≥n
 (

3278 c⁄° 
nuŒ
)

3282 
	}
}

3290 
__ölöe
 
	$AT91F_ADC_E«bÀIt
 (

3291 
AT91PS_ADC
 
pADC
,

3292 
Êag
)

3295 
pADC
->
ADC_IER
 = 
Êag
;

3296 
	}
}

3302 
__ölöe
 
	$AT91F_ADC_DißbÀIt
 (

3303 
AT91PS_ADC
 
pADC
,

3304 
Êag
)

3307 
pADC
->
ADC_IDR
 = 
Êag
;

3308 
	}
}

3314 
__ölöe
 
	$AT91F_ADC_GëSètus
(

3315 
AT91PS_ADC
 
pADC
)

3317  
pADC
->
ADC_SR
;

3318 
	}
}

3324 
__ölöe
 
	$AT91F_ADC_GëI¡îru±MaskSètus
(

3325 
AT91PS_ADC
 
pADC
)

3327  
pADC
->
ADC_IMR
;

3328 
	}
}

3334 
__ölöe
 
	$AT91F_ADC_IsI¡îru±Masked
(

3335 
AT91PS_ADC
 
pADC
,

3336 
Êag
)

3338  (
	`AT91F_ADC_GëI¡îru±MaskSètus
(
pADC
Ë& 
Êag
);

3339 
	}
}

3345 
__ölöe
 
	$AT91F_ADC_IsSètusSë
(

3346 
AT91PS_ADC
 
pADC
,

3347 
Êag
)

3349  (
	`AT91F_ADC_GëSètus
(
pADC
Ë& 
Êag
);

3350 
	}
}

3356 
__ölöe
 
	$AT91F_ADC_CfgModeReg
 (

3357 
AT91PS_ADC
 
pADC
,

3358 
mode
)

3361 
pADC
->
ADC_MR
 = 
mode
;

3362 
	}
}

3368 
__ölöe
 
	$AT91F_ADC_GëModeReg
 (

3369 
AT91PS_ADC
 
pADC


3372  
pADC
->
ADC_MR
;

3373 
	}
}

3379 
__ölöe
 
	$AT91F_ADC_CfgTimögs
 (

3380 
AT91PS_ADC
 
pADC
,

3381 
mck_˛ock
,

3382 
adc_˛ock
,

3383 
°¨tup_time
,

3384 
ßm∂e_™d_hﬁd_time
)

3386 
¥esˇl
,
°¨tup
,
shtim
;

3388 
¥esˇl
 = 
mck_˛ock
/(2*
adc_˛ock
) - 1;

3389 
°¨tup
 = 
adc_˛ock
*
°¨tup_time
/8 - 1;

3390 
shtim
 = 
adc_˛ock
*
ßm∂e_™d_hﬁd_time
/1000 - 1;

3393 
pADC
->
ADC_MR
 = ( (
¥esˇl
<<8Ë& 
AT91C_ADC_PRESCAL
Ë| ( (
°¨tup
<<16Ë& 
AT91C_ADC_STARTUP
Ë| ( (
shtim
<<24Ë& 
AT91C_ADC_SHTIM
);

3394 
	}
}

3400 
__ölöe
 
	$AT91F_ADC_E«bÀCh™√l
 (

3401 
AT91PS_ADC
 
pADC
,

3402 
ch™√l
)

3405 
pADC
->
ADC_CHER
 = 
ch™√l
;

3406 
	}
}

3412 
__ölöe
 
	$AT91F_ADC_DißbÀCh™√l
 (

3413 
AT91PS_ADC
 
pADC
,

3414 
ch™√l
)

3417 
pADC
->
ADC_CHDR
 = 
ch™√l
;

3418 
	}
}

3424 
__ölöe
 
	$AT91F_ADC_GëCh™√lSètus
 (

3425 
AT91PS_ADC
 
pADC


3428  
pADC
->
ADC_CHSR
;

3429 
	}
}

3435 
__ölöe
 
	$AT91F_ADC_SèπC⁄vîsi⁄
 (

3436 
AT91PS_ADC
 
pADC


3439 
pADC
->
ADC_CR
 = 
AT91C_ADC_START
;

3440 
	}
}

3446 
__ölöe
 
	$AT91F_ADC_So·Re£t
 (

3447 
AT91PS_ADC
 
pADC


3450 
pADC
->
ADC_CR
 = 
AT91C_ADC_SWRST
;

3451 
	}
}

3457 
__ölöe
 
	$AT91F_ADC_GëLa°C⁄vîãdD©a
 (

3458 
AT91PS_ADC
 
pADC


3461  
pADC
->
ADC_LCDR
;

3462 
	}
}

3468 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH0
 (

3469 
AT91PS_ADC
 
pADC


3472  
pADC
->
ADC_CDR0
;

3473 
	}
}

3479 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH1
 (

3480 
AT91PS_ADC
 
pADC


3483  
pADC
->
ADC_CDR1
;

3484 
	}
}

3490 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH2
 (

3491 
AT91PS_ADC
 
pADC


3494  
pADC
->
ADC_CDR2
;

3495 
	}
}

3501 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH3
 (

3502 
AT91PS_ADC
 
pADC


3505  
pADC
->
ADC_CDR3
;

3506 
	}
}

3512 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH4
 (

3513 
AT91PS_ADC
 
pADC


3516  
pADC
->
ADC_CDR4
;

3517 
	}
}

3523 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH5
 (

3524 
AT91PS_ADC
 
pADC


3527  
pADC
->
ADC_CDR5
;

3528 
	}
}

3534 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH6
 (

3535 
AT91PS_ADC
 
pADC


3538  
pADC
->
ADC_CDR6
;

3539 
	}
}

3545 
__ölöe
 
	$AT91F_ADC_GëC⁄vîãdD©aCH7
 (

3546 
AT91PS_ADC
 
pADC


3549  
pADC
->
ADC_CDR7
;

3550 
	}
}

3559 
__ölöe
 
	$AT91F_AES_E«bÀIt
 (

3560 
AT91PS_AES
 
pAES
,

3561 
Êag
)

3564 
pAES
->
AES_IER
 = 
Êag
;

3565 
	}
}

3571 
__ölöe
 
	$AT91F_AES_DißbÀIt
 (

3572 
AT91PS_AES
 
pAES
,

3573 
Êag
)

3576 
pAES
->
AES_IDR
 = 
Êag
;

3577 
	}
}

3583 
__ölöe
 
	$AT91F_AES_GëSètus
(

3584 
AT91PS_AES
 
pAES
)

3586  
pAES
->
AES_ISR
;

3587 
	}
}

3593 
__ölöe
 
	$AT91F_AES_GëI¡îru±MaskSètus
(

3594 
AT91PS_AES
 
pAES
)

3596  
pAES
->
AES_IMR
;

3597 
	}
}

3603 
__ölöe
 
	$AT91F_AES_IsI¡îru±Masked
(

3604 
AT91PS_AES
 
pAES
,

3605 
Êag
)

3607  (
	`AT91F_AES_GëI¡îru±MaskSètus
(
pAES
Ë& 
Êag
);

3608 
	}
}

3614 
__ölöe
 
	$AT91F_AES_IsSètusSë
(

3615 
AT91PS_AES
 
pAES
,

3616 
Êag
)

3618  (
	`AT91F_AES_GëSètus
(
pAES
Ë& 
Êag
);

3619 
	}
}

3625 
__ölöe
 
	$AT91F_AES_CfgModeReg
 (

3626 
AT91PS_AES
 
pAES
,

3627 
mode
)

3630 
pAES
->
AES_MR
 = 
mode
;

3631 
	}
}

3637 
__ölöe
 
	$AT91F_AES_GëModeReg
 (

3638 
AT91PS_AES
 
pAES


3641  
pAES
->
AES_MR
;

3642 
	}
}

3648 
__ölöe
 
	$AT91F_AES_SèπPro˚ssög
 (

3649 
AT91PS_AES
 
pAES


3652 
pAES
->
AES_CR
 = 
AT91C_AES_START
;

3653 
	}
}

3659 
__ölöe
 
	$AT91F_AES_So·Re£t
 (

3660 
AT91PS_AES
 
pAES


3663 
pAES
->
AES_CR
 = 
AT91C_AES_SWRST
;

3664 
	}
}

3670 
__ölöe
 
	$AT91F_AES_LﬂdNewSìd
 (

3671 
AT91PS_AES
 
pAES


3674 
pAES
->
AES_CR
 = 
AT91C_AES_LOADSEED
;

3675 
	}
}

3681 
__ölöe
 
	$AT91F_AES_SëCry±oKey
 (

3682 
AT91PS_AES
 
pAES
,

3683 
ödex
,

3684 
keyw‹d


3687 
pAES
->
AES_KEYWxR
[
ödex
] = 
keyw‹d
;

3688 
	}
}

3694 
__ölöe
 
	$AT91F_AES_I≈utD©a
 (

3695 
AT91PS_AES
 
pAES
,

3696 
ödex
,

3697 
öd©a


3700 
pAES
->
AES_IDATAxR
[
ödex
] = 
öd©a
;

3701 
	}
}

3707 
__ölöe
 
	$AT91F_AES_GëOuçutD©a
 (

3708 
AT91PS_AES
 
pAES
,

3709 
ödex


3712  
pAES
->
AES_ODATAxR
[
ödex
];

3713 
	}
}

3719 
__ölöe
 
	$AT91F_AES_SëInôüliz©i⁄Ve˘‹
 (

3720 
AT91PS_AES
 
pAES
,

3721 
ödex
,

3722 
öôve˘‹


3725 
pAES
->
AES_IVxR
[
ödex
] = 
öôve˘‹
;

3726 
	}
}

3735 
__ölöe
 
	$AT91F_TDES_E«bÀIt
 (

3736 
AT91PS_TDES
 
pTDES
,

3737 
Êag
)

3740 
pTDES
->
TDES_IER
 = 
Êag
;

3741 
	}
}

3747 
__ölöe
 
	$AT91F_TDES_DißbÀIt
 (

3748 
AT91PS_TDES
 
pTDES
,

3749 
Êag
)

3752 
pTDES
->
TDES_IDR
 = 
Êag
;

3753 
	}
}

3759 
__ölöe
 
	$AT91F_TDES_GëSètus
(

3760 
AT91PS_TDES
 
pTDES
)

3762  
pTDES
->
TDES_ISR
;

3763 
	}
}

3769 
__ölöe
 
	$AT91F_TDES_GëI¡îru±MaskSètus
(

3770 
AT91PS_TDES
 
pTDES
)

3772  
pTDES
->
TDES_IMR
;

3773 
	}
}

3779 
__ölöe
 
	$AT91F_TDES_IsI¡îru±Masked
(

3780 
AT91PS_TDES
 
pTDES
,

3781 
Êag
)

3783  (
	`AT91F_TDES_GëI¡îru±MaskSètus
(
pTDES
Ë& 
Êag
);

3784 
	}
}

3790 
__ölöe
 
	$AT91F_TDES_IsSètusSë
(

3791 
AT91PS_TDES
 
pTDES
,

3792 
Êag
)

3794  (
	`AT91F_TDES_GëSètus
(
pTDES
Ë& 
Êag
);

3795 
	}
}

3801 
__ölöe
 
	$AT91F_TDES_CfgModeReg
 (

3802 
AT91PS_TDES
 
pTDES
,

3803 
mode
)

3806 
pTDES
->
TDES_MR
 = 
mode
;

3807 
	}
}

3813 
__ölöe
 
	$AT91F_TDES_GëModeReg
 (

3814 
AT91PS_TDES
 
pTDES


3817  
pTDES
->
TDES_MR
;

3818 
	}
}

3824 
__ölöe
 
	$AT91F_TDES_SèπPro˚ssög
 (

3825 
AT91PS_TDES
 
pTDES


3828 
pTDES
->
TDES_CR
 = 
AT91C_TDES_START
;

3829 
	}
}

3835 
__ölöe
 
	$AT91F_TDES_So·Re£t
 (

3836 
AT91PS_TDES
 
pTDES


3839 
pTDES
->
TDES_CR
 = 
AT91C_TDES_SWRST
;

3840 
	}
}

3846 
__ölöe
 
	$AT91F_TDES_SëCry±oKey1
 (

3847 
AT91PS_TDES
 
pTDES
,

3848 
ödex
,

3849 
keyw‹d


3852 
pTDES
->
TDES_KEY1WxR
[
ödex
] = 
keyw‹d
;

3853 
	}
}

3859 
__ölöe
 
	$AT91F_TDES_SëCry±oKey2
 (

3860 
AT91PS_TDES
 
pTDES
,

3861 
ödex
,

3862 
keyw‹d


3865 
pTDES
->
TDES_KEY2WxR
[
ödex
] = 
keyw‹d
;

3866 
	}
}

3872 
__ölöe
 
	$AT91F_TDES_SëCry±oKey3
 (

3873 
AT91PS_TDES
 
pTDES
,

3874 
ödex
,

3875 
keyw‹d


3878 
pTDES
->
TDES_KEY3WxR
[
ödex
] = 
keyw‹d
;

3879 
	}
}

3885 
__ölöe
 
	$AT91F_TDES_I≈utD©a
 (

3886 
AT91PS_TDES
 
pTDES
,

3887 
ödex
,

3888 
öd©a


3891 
pTDES
->
TDES_IDATAxR
[
ödex
] = 
öd©a
;

3892 
	}
}

3898 
__ölöe
 
	$AT91F_TDES_GëOuçutD©a
 (

3899 
AT91PS_TDES
 
pTDES
,

3900 
ödex


3903  
pTDES
->
TDES_ODATAxR
[
ödex
];

3904 
	}
}

3910 
__ölöe
 
	$AT91F_TDES_SëInôüliz©i⁄Ve˘‹
 (

3911 
AT91PS_TDES
 
pTDES
,

3912 
ödex
,

3913 
öôve˘‹


3916 
pTDES
->
TDES_IVxR
[
ödex
] = 
öôve˘‹
;

3917 
	}
}

3923 
__ölöe
 
	$AT91F_DBGU_CfgPMC
 ()

3925 
	`AT91F_PMC_E«bÀPîùhClock
(

3926 
AT91C_BASE_PMC
,

3927 ((Ë1 << 
AT91C_ID_SYS
));

3928 
	}
}

3934 
__ölöe
 
	$AT91F_DBGU_CfgPIO
 ()

3937 
	`AT91F_PIO_CfgPîùh
(

3938 
AT91C_BASE_PIOA
,

3939 ((Ë
AT91C_PA27_DRXD
 ) |

3940 ((Ë
AT91C_PA28_DTXD
 ),

3942 
	}
}

3948 
__ölöe
 
	$AT91F_PMC_CfgPMC
 ()

3950 
	`AT91F_PMC_E«bÀPîùhClock
(

3951 
AT91C_BASE_PMC
,

3952 ((Ë1 << 
AT91C_ID_SYS
));

3953 
	}
}

3959 
__ölöe
 
	$AT91F_PMC_CfgPIO
 ()

3962 
	`AT91F_PIO_CfgPîùh
(

3963 
AT91C_BASE_PIOB
,

3964 ((Ë
AT91C_PB30_PCK2
 ) |

3965 ((Ë
AT91C_PB29_PCK1
 ),

3966 ((Ë
AT91C_PB20_PCK0
 ) |

3967 ((Ë
AT91C_PB0_PCK0
 ) |

3968 ((Ë
AT91C_PB22_PCK2
 ) |

3969 ((Ë
AT91C_PB21_PCK1
 ));

3971 
	`AT91F_PIO_CfgPîùh
(

3972 
AT91C_BASE_PIOA
,

3974 ((Ë
AT91C_PA30_PCK2
 ) |

3975 ((Ë
AT91C_PA13_PCK1
 ) |

3976 ((Ë
AT91C_PA27_PCK3
 ));

3977 
	}
}

3983 
__ölöe
 
	$AT91F_VREG_CfgPMC
 ()

3985 
	`AT91F_PMC_E«bÀPîùhClock
(

3986 
AT91C_BASE_PMC
,

3987 ((Ë1 << 
AT91C_ID_SYS
));

3988 
	}
}

3994 
__ölöe
 
	$AT91F_RSTC_CfgPMC
 ()

3996 
	`AT91F_PMC_E«bÀPîùhClock
(

3997 
AT91C_BASE_PMC
,

3998 ((Ë1 << 
AT91C_ID_SYS
));

3999 
	}
}

4005 
__ölöe
 
	$AT91F_SSC_CfgPMC
 ()

4007 
	`AT91F_PMC_E«bÀPîùhClock
(

4008 
AT91C_BASE_PMC
,

4009 ((Ë1 << 
AT91C_ID_SSC
));

4010 
	}
}

4016 
__ölöe
 
	$AT91F_SSC_CfgPIO
 ()

4019 
	`AT91F_PIO_CfgPîùh
(

4020 
AT91C_BASE_PIOA
,

4021 ((Ë
AT91C_PA25_RK
 ) |

4022 ((Ë
AT91C_PA22_TK
 ) |

4023 ((Ë
AT91C_PA21_TF
 ) |

4024 ((Ë
AT91C_PA24_RD
 ) |

4025 ((Ë
AT91C_PA26_RF
 ) |

4026 ((Ë
AT91C_PA23_TD
 ),

4028 
	}
}

4034 
__ölöe
 
	$AT91F_WDTC_CfgPMC
 ()

4036 
	`AT91F_PMC_E«bÀPîùhClock
(

4037 
AT91C_BASE_PMC
,

4038 ((Ë1 << 
AT91C_ID_SYS
));

4039 
	}
}

4045 
__ölöe
 
	$AT91F_US1_CfgPMC
 ()

4047 
	`AT91F_PMC_E«bÀPîùhClock
(

4048 
AT91C_BASE_PMC
,

4049 ((Ë1 << 
AT91C_ID_US1
));

4050 
	}
}

4056 
__ölöe
 
	$AT91F_US1_CfgPIO
 ()

4059 
	`AT91F_PIO_CfgPîùh
(

4060 
AT91C_BASE_PIOB
,

4062 ((Ë
AT91C_PB26_RI1
 ) |

4063 ((Ë
AT91C_PB24_DSR1
 ) |

4064 ((Ë
AT91C_PB23_DCD1
 ) |

4065 ((Ë
AT91C_PB25_DTR1
 ));

4067 
	`AT91F_PIO_CfgPîùh
(

4068 
AT91C_BASE_PIOA
,

4069 ((Ë
AT91C_PA7_SCK1
 ) |

4070 ((Ë
AT91C_PA8_RTS1
 ) |

4071 ((Ë
AT91C_PA6_TXD1
 ) |

4072 ((Ë
AT91C_PA5_RXD1
 ) |

4073 ((Ë
AT91C_PA9_CTS1
 ),

4075 
	}
}

4081 
__ölöe
 
	$AT91F_US0_CfgPMC
 ()

4083 
	`AT91F_PMC_E«bÀPîùhClock
(

4084 
AT91C_BASE_PMC
,

4085 ((Ë1 << 
AT91C_ID_US0
));

4086 
	}
}

4092 
__ölöe
 
	$AT91F_US0_CfgPIO
 ()

4095 
	`AT91F_PIO_CfgPîùh
(

4096 
AT91C_BASE_PIOA
,

4097 ((Ë
AT91C_PA0_RXD0
 ) |

4098 ((Ë
AT91C_PA4_CTS0
 ) |

4099 ((Ë
AT91C_PA3_RTS0
 ) |

4100 ((Ë
AT91C_PA2_SCK0
 ) |

4101 ((Ë
AT91C_PA1_TXD0
 ),

4103 
	}
}

4109 
__ölöe
 
	$AT91F_SPI1_CfgPMC
 ()

4111 
	`AT91F_PMC_E«bÀPîùhClock
(

4112 
AT91C_BASE_PMC
,

4113 ((Ë1 << 
AT91C_ID_SPI1
));

4114 
	}
}

4120 
__ölöe
 
	$AT91F_SPI1_CfgPIO
 ()

4123 
	`AT91F_PIO_CfgPîùh
(

4124 
AT91C_BASE_PIOB
,

4126 ((Ë
AT91C_PB16_NPCS13
 ) |

4127 ((Ë
AT91C_PB10_NPCS11
 ) |

4128 ((Ë
AT91C_PB11_NPCS12
 ));

4130 
	`AT91F_PIO_CfgPîùh
(

4131 
AT91C_BASE_PIOA
,

4133 ((Ë
AT91C_PA4_NPCS13
 ) |

4134 ((Ë
AT91C_PA29_NPCS13
 ) |

4135 ((Ë
AT91C_PA21_NPCS10
 ) |

4136 ((Ë
AT91C_PA22_SPCK1
 ) |

4137 ((Ë
AT91C_PA25_NPCS11
 ) |

4138 ((Ë
AT91C_PA2_NPCS11
 ) |

4139 ((Ë
AT91C_PA24_MISO1
 ) |

4140 ((Ë
AT91C_PA3_NPCS12
 ) |

4141 ((Ë
AT91C_PA26_NPCS12
 ) |

4142 ((Ë
AT91C_PA23_MOSI1
 ));

4143 
	}
}

4149 
__ölöe
 
	$AT91F_SPI0_CfgPMC
 ()

4151 
	`AT91F_PMC_E«bÀPîùhClock
(

4152 
AT91C_BASE_PMC
,

4153 ((Ë1 << 
AT91C_ID_SPI0
));

4154 
	}
}

4160 
__ölöe
 
	$AT91F_SPI0_CfgPIO
 ()

4163 
	`AT91F_PIO_CfgPîùh
(

4164 
AT91C_BASE_PIOB
,

4166 ((Ë
AT91C_PB13_NPCS01
 ) |

4167 ((Ë
AT91C_PB17_NPCS03
 ) |

4168 ((Ë
AT91C_PB14_NPCS02
 ));

4170 
	`AT91F_PIO_CfgPîùh
(

4171 
AT91C_BASE_PIOA
,

4172 ((Ë
AT91C_PA16_MISO0
 ) |

4173 ((Ë
AT91C_PA13_NPCS01
 ) |

4174 ((Ë
AT91C_PA15_NPCS03
 ) |

4175 ((Ë
AT91C_PA17_MOSI0
 ) |

4176 ((Ë
AT91C_PA18_SPCK0
 ) |

4177 ((Ë
AT91C_PA14_NPCS02
 ) |

4178 ((Ë
AT91C_PA12_NPCS00
 ),

4179 ((Ë
AT91C_PA7_NPCS01
 ) |

4180 ((Ë
AT91C_PA9_NPCS03
 ) |

4181 ((Ë
AT91C_PA8_NPCS02
 ));

4182 
	}
}

4188 
__ölöe
 
	$AT91F_PITC_CfgPMC
 ()

4190 
	`AT91F_PMC_E«bÀPîùhClock
(

4191 
AT91C_BASE_PMC
,

4192 ((Ë1 << 
AT91C_ID_SYS
));

4193 
	}
}

4199 
__ölöe
 
	$AT91F_AIC_CfgPMC
 ()

4201 
	`AT91F_PMC_E«bÀPîùhClock
(

4202 
AT91C_BASE_PMC
,

4203 ((Ë1 << 
AT91C_ID_FIQ
) |

4204 ((Ë1 << 
AT91C_ID_IRQ0
) |

4205 ((Ë1 << 
AT91C_ID_IRQ1
));

4206 
	}
}

4212 
__ölöe
 
	$AT91F_AIC_CfgPIO
 ()

4215 
	`AT91F_PIO_CfgPîùh
(

4216 
AT91C_BASE_PIOA
,

4217 ((Ë
AT91C_PA30_IRQ0
 ) |

4218 ((Ë
AT91C_PA29_FIQ
 ),

4219 ((Ë
AT91C_PA14_IRQ1
 ));

4220 
	}
}

4226 
__ölöe
 
	$AT91F_AES_CfgPMC
 ()

4228 
	`AT91F_PMC_E«bÀPîùhClock
(

4229 
AT91C_BASE_PMC
,

4230 ((Ë1 << 
AT91C_ID_AES
));

4231 
	}
}

4237 
__ölöe
 
	$AT91F_TWI_CfgPMC
 ()

4239 
	`AT91F_PMC_E«bÀPîùhClock
(

4240 
AT91C_BASE_PMC
,

4241 ((Ë1 << 
AT91C_ID_TWI
));

4242 
	}
}

4248 
__ölöe
 
	$AT91F_TWI_CfgPIO
 ()

4251 
	`AT91F_PIO_CfgPîùh
(

4252 
AT91C_BASE_PIOA
,

4253 ((Ë
AT91C_PA11_TWCK
 ) |

4254 ((Ë
AT91C_PA10_TWD
 ),

4256 
	}
}

4262 
__ölöe
 
	$AT91F_ADC_CfgPMC
 ()

4264 
	`AT91F_PMC_E«bÀPîùhClock
(

4265 
AT91C_BASE_PMC
,

4266 ((Ë1 << 
AT91C_ID_ADC
));

4267 
	}
}

4273 
__ölöe
 
	$AT91F_ADC_CfgPIO
 ()

4276 
	`AT91F_PIO_CfgPîùh
(

4277 
AT91C_BASE_PIOB
,

4279 ((Ë
AT91C_PB18_ADTRG
 ));

4280 
	}
}

4286 
__ölöe
 
	$AT91F_PWMC_CH3_CfgPIO
 ()

4289 
	`AT91F_PIO_CfgPîùh
(

4290 
AT91C_BASE_PIOB
,

4291 ((Ë
AT91C_PB22_PWM3
 ),

4292 ((Ë
AT91C_PB30_PWM3
 ));

4293 
	}
}

4299 
__ölöe
 
	$AT91F_PWMC_CH2_CfgPIO
 ()

4302 
	`AT91F_PIO_CfgPîùh
(

4303 
AT91C_BASE_PIOB
,

4304 ((Ë
AT91C_PB21_PWM2
 ),

4305 ((Ë
AT91C_PB29_PWM2
 ));

4306 
	}
}

4312 
__ölöe
 
	$AT91F_PWMC_CH1_CfgPIO
 ()

4315 
	`AT91F_PIO_CfgPîùh
(

4316 
AT91C_BASE_PIOB
,

4317 ((Ë
AT91C_PB20_PWM1
 ),

4318 ((Ë
AT91C_PB28_PWM1
 ));

4319 
	}
}

4325 
__ölöe
 
	$AT91F_PWMC_CH0_CfgPIO
 ()

4328 
	`AT91F_PIO_CfgPîùh
(

4329 
AT91C_BASE_PIOB
,

4330 ((Ë
AT91C_PB19_PWM0
 ),

4331 ((Ë
AT91C_PB27_PWM0
 ));

4332 
	}
}

4338 
__ölöe
 
	$AT91F_RTTC_CfgPMC
 ()

4340 
	`AT91F_PMC_E«bÀPîùhClock
(

4341 
AT91C_BASE_PMC
,

4342 ((Ë1 << 
AT91C_ID_SYS
));

4343 
	}
}

4349 
__ölöe
 
	$AT91F_UDP_CfgPMC
 ()

4351 
	`AT91F_PMC_E«bÀPîùhClock
(

4352 
AT91C_BASE_PMC
,

4353 ((Ë1 << 
AT91C_ID_UDP
));

4354 
	}
}

4360 
__ölöe
 
	$AT91F_TDES_CfgPMC
 ()

4362 
	`AT91F_PMC_E«bÀPîùhClock
(

4363 
AT91C_BASE_PMC
,

4364 ((Ë1 << 
AT91C_ID_TDES
));

4365 
	}
}

4371 
__ölöe
 
	$AT91F_EMAC_CfgPMC
 ()

4373 
	`AT91F_PMC_E«bÀPîùhClock
(

4374 
AT91C_BASE_PMC
,

4375 ((Ë1 << 
AT91C_ID_EMAC
));

4376 
	}
}

4382 
__ölöe
 
	$AT91F_EMAC_CfgPIO
 ()

4385 
	`AT91F_PIO_CfgPîùh
(

4386 
AT91C_BASE_PIOB
,

4387 ((Ë
AT91C_PB2_ETX0
 ) |

4388 ((Ë
AT91C_PB12_ETXER
 ) |

4389 ((Ë
AT91C_PB16_ECOL
 ) |

4390 ((Ë
AT91C_PB11_ETX3
 ) |

4391 ((Ë
AT91C_PB6_ERX1
 ) |

4392 ((Ë
AT91C_PB15_ERXDV
 ) |

4393 ((Ë
AT91C_PB13_ERX2
 ) |

4394 ((Ë
AT91C_PB3_ETX1
 ) |

4395 ((Ë
AT91C_PB8_EMDC
 ) |

4396 ((Ë
AT91C_PB5_ERX0
 ) |

4398 ((Ë
AT91C_PB14_ERX3
 ) |

4399 ((Ë
AT91C_PB4_ECRS_ECRSDV
) |

4400 ((Ë
AT91C_PB1_ETXEN
 ) |

4401 ((Ë
AT91C_PB10_ETX2
 ) |

4402 ((Ë
AT91C_PB0_ETXCK_EREFCK
) |

4403 ((Ë
AT91C_PB9_EMDIO
 ) |

4404 ((Ë
AT91C_PB7_ERXER
 ) |

4405 ((Ë
AT91C_PB17_ERXCK
 ),

4407 
	}
}

4413 
__ölöe
 
	$AT91F_TC0_CfgPMC
 ()

4415 
	`AT91F_PMC_E«bÀPîùhClock
(

4416 
AT91C_BASE_PMC
,

4417 ((Ë1 << 
AT91C_ID_TC0
));

4418 
	}
}

4424 
__ölöe
 
	$AT91F_TC0_CfgPIO
 ()

4427 
	`AT91F_PIO_CfgPîùh
(

4428 
AT91C_BASE_PIOB
,

4429 ((Ë
AT91C_PB23_TIOA0
 ) |

4430 ((Ë
AT91C_PB24_TIOB0
 ),

4431 ((Ë
AT91C_PB12_TCLK0
 ));

4432 
	}
}

4438 
__ölöe
 
	$AT91F_TC1_CfgPMC
 ()

4440 
	`AT91F_PMC_E«bÀPîùhClock
(

4441 
AT91C_BASE_PMC
,

4442 ((Ë1 << 
AT91C_ID_TC1
));

4443 
	}
}

4449 
__ölöe
 
	$AT91F_TC1_CfgPIO
 ()

4452 
	`AT91F_PIO_CfgPîùh
(

4453 
AT91C_BASE_PIOB
,

4454 ((Ë
AT91C_PB25_TIOA1
 ) |

4455 ((Ë
AT91C_PB26_TIOB1
 ),

4456 ((Ë
AT91C_PB19_TCLK1
 ));

4457 
	}
}

4463 
__ölöe
 
	$AT91F_TC2_CfgPMC
 ()

4465 
	`AT91F_PMC_E«bÀPîùhClock
(

4466 
AT91C_BASE_PMC
,

4467 ((Ë1 << 
AT91C_ID_TC2
));

4468 
	}
}

4474 
__ölöe
 
	$AT91F_TC2_CfgPIO
 ()

4477 
	`AT91F_PIO_CfgPîùh
(

4478 
AT91C_BASE_PIOB
,

4479 ((Ë
AT91C_PB28_TIOB2
 ) |

4480 ((Ë
AT91C_PB27_TIOA2
 ),

4483 
	`AT91F_PIO_CfgPîùh
(

4484 
AT91C_BASE_PIOA
,

4486 ((Ë
AT91C_PA15_TCLK2
 ));

4487 
	}
}

4493 
__ölöe
 
	$AT91F_MC_CfgPMC
 ()

4495 
	`AT91F_PMC_E«bÀPîùhClock
(

4496 
AT91C_BASE_PMC
,

4497 ((Ë1 << 
AT91C_ID_SYS
));

4498 
	}
}

4504 
__ölöe
 
	$AT91F_PIOA_CfgPMC
 ()

4506 
	`AT91F_PMC_E«bÀPîùhClock
(

4507 
AT91C_BASE_PMC
,

4508 ((Ë1 << 
AT91C_ID_PIOA
));

4509 
	}
}

4515 
__ölöe
 
	$AT91F_PIOB_CfgPMC
 ()

4517 
	`AT91F_PMC_E«bÀPîùhClock
(

4518 
AT91C_BASE_PMC
,

4519 ((Ë1 << 
AT91C_ID_PIOB
));

4520 
	}
}

4526 
__ölöe
 
	$AT91F_CAN_CfgPMC
 ()

4528 
	`AT91F_PMC_E«bÀPîùhClock
(

4529 
AT91C_BASE_PMC
,

4530 ((Ë1 << 
AT91C_ID_CAN
));

4531 
	}
}

4537 
__ölöe
 
	$AT91F_CAN_CfgPIO
 ()

4540 
	`AT91F_PIO_CfgPîùh
(

4541 
AT91C_BASE_PIOA
,

4542 ((Ë
AT91C_PA20_CANTX
 ) |

4543 ((Ë
AT91C_PA19_CANRX
 ),

4545 
	}
}

4551 
__ölöe
 
	$AT91F_PWMC_CfgPMC
 ()

4553 
	`AT91F_PMC_E«bÀPîùhClock
(

4554 
AT91C_BASE_PMC
,

4555 ((Ë1 << 
AT91C_ID_PWMC
));

4556 
	}
}

	@portable/IAR/AtmelSAM7S64/port.c

72 
	~<°dlib.h
>

75 
	~"FªeRTOS.h
"

76 
	~"èsk.h
"

79 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

80 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

81 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

84 
	#p‹tPIT_CLOCK_DIVISOR
 ( ( 
uöt32_t
 ) 16 )

	)

85 
	#p‹tPIT_COUNTER_VALUE
 ( ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tPIT_CLOCK_DIVISOR
 ) / 1000UL ) * 
p‹tTICK_PERIOD_MS
 )

	)

88 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

91 
	#p‹tINT_LEVEL_SENSITIVE
 0

	)

92 
	#p‹tPIT_ENABLE
 ( ( 
uöt16_t
 ) 0x1 << 24 )

	)

93 
	#p‹tPIT_INT_ENABLE
 ( ( 
uöt16_t
 ) 0x1 << 25 )

	)

97 
¥vSëupTimîI¡îru±
( );

102 
uöt32_t
 
	gulCrôiˇlNe°ög
 = ( uint32_t ) 9999;

112 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

114 
SèckTy≥_t
 *
pxOrigöÆTOS
;

116 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

120 
pxT›OfSèck
--;

128 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

129 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaaaaaa;

132 
pxT›OfSèck
--;

133 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

134 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

158 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

163 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

168 if–––
uöt32_t
 ) 
pxCode
 & 0x01UL ) != 0x00UL )

171 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

174 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

181  
pxT›OfSèck
;

182 
	}
}

185 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

187 
	`vP‹tSèπFú°Task
( );

191 
	`¥vSëupTimîI¡îru±
();

194 
	`vP‹tSèπFú°Task
();

198 
	}
}

201 
	$vP‹tEndScheduÀr
( )

205 
	}
}

208 #i‡
c⁄figUSE_PREEMPTION
 == 0

212 
__¨m
 
__úq
 
vP‹tN⁄Pªem±iveTick
( );

213 
__¨m
 
__úq
 
	$vP‹tN⁄Pªem±iveTick
( )

215 
uöt32_t
 
ulDummy
;

220 
	`xTaskIn¸emítTick
();

223 
ulDummy
 = 
AT91C_BASE_PITC
->
PITC_PIVR
;

226 
AT91C_BASE_AIC
->
AIC_EOICR
 = 
ulDummy
;

227 
	}
}

238 
	$¥vSëupTimîI¡îru±
( )

240 
AT91PS_PITC
 
pxPIT
 = 
AT91C_BASE_PITC
;

244 #i‡
c⁄figUSE_PREEMPTION
 == 0

246 
	`AT91F_AIC_C⁄figuªIt
–
AT91C_BASE_AIC
, 
AT91C_ID_SYS
, 
AT91C_AIC_PRIOR_HIGHEST
, 
p‹tINT_LEVEL_SENSITIVE
, ( (*)(ËË
vP‹tN⁄Pªem±iveTick
 );

250 –
vP‹tPªem±iveTick
 )( );

251 
	`AT91F_AIC_C⁄figuªIt
–
AT91C_BASE_AIC
, 
AT91C_ID_SYS
, 
AT91C_AIC_PRIOR_HIGHEST
, 
p‹tINT_LEVEL_SENSITIVE
, ( (*)(ËË
vP‹tPªem±iveTick
 );

256 
pxPIT
->
PITC_PIMR
 = 
p‹tPIT_ENABLE
 | 
p‹tPIT_INT_ENABLE
 | 
p‹tPIT_COUNTER_VALUE
;

260 
	`AT91F_AIC_E«bÀIt
–
AT91C_BASE_AIC
, 
AT91C_ID_SYS
 );

261 
	}
}

264 
	$vP‹tE¡îCrôiˇl
( )

267 
	`__dißbÀ_öãºu±
();

272 
ulCrôiˇlNe°ög
++;

273 
	}
}

276 
	$vP‹tExôCrôiˇl
( )

278 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

281 
ulCrôiˇlNe°ög
--;

285 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

287 
	`__íabÀ_öãºu±
();

290 
	}
}

	@portable/IAR/AtmelSAM7S64/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

110 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

111 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

115 
__¨m
 
__öãrw‹k
 
vP‹tDißbÀI¡îru±sFromThumb
( );

116 
__¨m
 
__öãrw‹k
 
vP‹tE«bÀI¡îru±sFromThumb
( );

117 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

118 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

120 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_öãºu±
()

	)

121 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_öãºu±
()

	)

122 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

123 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

127 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

	)

129 
vTaskSwôchC⁄ãxt
( ); \

131 if–
	gxSwôchRequúed
 ) \

133 
vTaskSwôchC⁄ãxt
(); \

140 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

141 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

143 #ifde‡
__˝lu•lus


	@portable/IAR/AtmelSAM9XE/ISR_Support.h

1 
EXTERN
 
pxCuºítTCB


2 
EXTERN
 
	gulCrôiˇlNe°ög


5 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


8 
p‹tSAVE_CONTEXT
 
	gMACRO


10 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

11 
STMDB
 
	gSP
!, {
	gR0
}

13 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

14 
STMDB
 
	gSP
, {SP}^

15 
NOP


16 
SUB
 
	gSP
, SP, #4

17 
LDMIA
 
	gSP
!, {
	gR0
}

19 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

20 
STMDB
 
	gR0
!, {
	gLR
}

22 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

23 
MOV
 
	gLR
, 
	gR0


25 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

26 
LDMIA
 
	gSP
!, {
	gR0
}

28 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

29 
STMDB
 
	gLR
, {
	gR0
-LR}^

30 
NOP


31 
SUB
 
	gLR
, LR, #60

33 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

34 
MRS
 
	gR0
, 
SPSR


35 
STMDB
 
	gLR
!, {
	gR0
}

37 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


38 
LDR
 
R0
, [R0]

39 
STMDB
 
	gLR
!, {
	gR0
}

41 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

42 
LDR
 
	gR1
, =
pxCuºítTCB


43 
LDR
 
R0
, [
R1
]

44 
STR
 
	gLR
, [
R0
]

46 
ENDM


49 
p‹tRESTORE_CONTEXT
 
	gMACRO


51 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

52 
LDR
 
	gR1
, =
pxCuºítTCB


53 
LDR
 
R0
, [
R1
]

54 
LDR
 
	gLR
, [
R0
]

56 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

57 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

58 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


59 
LDMFD
 
LR
!, {
	gR1
}

60 
STR
 
	gR1
, [
R0
]

62 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

63 
LDMFD
 
	gLR
!, {
	gR0
}

64 
MSR
 
	gSPSR_cxsf
, 
	gR0


66 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

67 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

68 
	gNOP


70 ; 
Re°‹e
 
the
  
	gaddªss
.

71 
LDR
 
	gLR
, [
LR
, #+60]

73 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


74 ; 
c‹ª˘
 
	gaddªss
.

75 
SUBS
 
	gPC
, 
	gLR
, #4

77 
	gENDM


	@portable/IAR/AtmelSAM9XE/port.c

72 
	~<°dlib.h
>

75 
	~"FªeRTOS.h
"

76 
	~"èsk.h
"

79 
	~<bﬂrd.h
>

80 
	~<pio/pio.h
>

81 
	~<pio/pio_ô.h
>

82 
	~<pô/pô.h
>

83 
	~<aic/aic.h
>

84 
	~<tc/tc.h
>

85 
	~<utûôy/Àd.h
>

86 
	~<utûôy/åa˚.h
>

91 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

92 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

93 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

96 
	#p‹t1MHz_IN_Hz
 ( 1000000u»)

	)

97 
	#p‹t1SECOND_IN_uS
 ( 1000000.0 )

	)

100 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

103 
	#p‹tINT_LEVEL_SENSITIVE
 0

	)

104 
	#p‹tPIT_ENABLE
 ( ( 
uöt16_t
 ) 0x1 << 24 )

	)

105 
	#p‹tPIT_INT_ENABLE
 ( ( 
uöt16_t
 ) 0x1 << 25 )

	)

109 
¥vSëupTimîI¡îru±
( );

112 
vP‹tTickISR
( );

117 
uöt32_t
 
	gulCrôiˇlNe°ög
 = ( uint32_t ) 9999;

127 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

129 
SèckTy≥_t
 *
pxOrigöÆTOS
;

131 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

135 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

144 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaaaaaa;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

171 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

173 
pxT›OfSèck
--;

177 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

178 
pxT›OfSèck
--;

181 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

183 #ifde‡
THUMB_INTERWORK


186 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

190 
pxT›OfSèck
--;

195 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

197  
pxT›OfSèck
;

198 
	}
}

201 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

203 
	`vP‹tSèπFú°Task
( );

207 
	`¥vSëupTimîI¡îru±
();

210 
	`vP‹tSèπFú°Task
();

214 
	}
}

217 
	$vP‹tEndScheduÀr
( )

221 
	}
}

224 
__¨m
 
	$vP‹tTickISR
( )

226 vﬁ©ûê
uöt32_t
 
ulDummy
;

231 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

233 
	`vTaskSwôchC⁄ãxt
();

237 
ulDummy
 = 
AT91C_BASE_PITC
->
PITC_PIVR
;

240 –Ë
ulDummy
;

243 
	}
}

246 
	$¥vSëupTimîI¡îru±
( )

248 c⁄° 
uöt32_t
 
ulPîiodIn_uS
 = ( 1.0 / ( Ë
c⁄figTICK_RATE_HZ
 ) * 
p‹t1SECOND_IN_uS
;

251 
	`PIT_Inô
–
ulPîiodIn_uS
, 
BOARD_MCK
 / 
p‹t1MHz_IN_Hz
 );

254 
	`AIC_DißbÀIT
–
AT91C_ID_SYS
 );

255 
	`AIC_C⁄figuªIT
–
AT91C_ID_SYS
, 
AT91C_AIC_PRIOR_LOWEST
, 
vP‹tTickISR
 );

256 
	`AIC_E«bÀIT
–
AT91C_ID_SYS
 );

257 
	`PIT_E«bÀIT
();

258 
	}
}

261 
	$vP‹tE¡îCrôiˇl
( )

264 
	`__dißbÀ_úq
();

269 
ulCrôiˇlNe°ög
++;

270 
	}
}

273 
	$vP‹tExôCrôiˇl
( )

275 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

278 
ulCrôiˇlNe°ög
--;

282 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

284 
	`__íabÀ_úq
();

287 
	}
}

	@portable/IAR/AtmelSAM9XE/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 
	~<öåösics.h
>

72 #ifde‡
__˝lu•lus


87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

93 
	#p‹tBASE_TYPE
 

	)

95 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

96 
	tBa£Ty≥_t
;

97 
	tUBa£Ty≥_t
;

100 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

101 
uöt16_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

104 
uöt32_t
 
	tTickTy≥_t
;

105 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

110 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

111 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

112 
	#p‹tBYTE_ALIGNMENT
 8

	)

113 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

114 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

118 
__¨m
 
__öãrw‹k
 
vP‹tDißbÀI¡îru±sFromThumb
( );

119 
__¨m
 
__öãrw‹k
 
vP‹tE«bÀI¡îru±sFromThumb
( );

120 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

121 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

123 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_úq
()

	)

124 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_úq
()

	)

125 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

126 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

130 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

	)

132 
vTaskSwôchC⁄ãxt
( ); \

134 if–
	gxSwôchRequúed
 ) \

136 
vTaskSwôchC⁄ãxt
(); \

143 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

144 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

146 #ifde‡
__˝lu•lus


	@portable/IAR/LPC2000/ISR_Support.h

54 
EXTERN
 
pxCuºítTCB


55 
EXTERN
 
	gulCrôiˇlNe°ög


58 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


61 
p‹tSAVE_CONTEXT
 
	gMACRO


63 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

64 
STMDB
 
	gSP
!, {
	gR0
}

66 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

67 
STMDB
 
	gSP
, {SP}^

68 
NOP


69 
SUB
 
	gSP
, SP, #4

70 
LDMIA
 
	gSP
!, {
	gR0
}

72 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

73 
STMDB
 
	gR0
!, {
	gLR
}

75 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

76 
MOV
 
	gLR
, 
	gR0


78 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

79 
LDMIA
 
	gSP
!, {
	gR0
}

81 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

82 
STMDB
 
	gLR
, {
	gR0
-LR}^

83 
NOP


84 
SUB
 
	gLR
, LR, #60

86 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

87 
MRS
 
	gR0
, 
SPSR


88 
STMDB
 
	gLR
!, {
	gR0
}

90 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


91 
LDR
 
R0
, [R0]

92 
STMDB
 
	gLR
!, {
	gR0
}

94 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

95 
LDR
 
	gR1
, =
pxCuºítTCB


96 
LDR
 
R0
, [
R1
]

97 
STR
 
	gLR
, [
R0
]

99 
ENDM


102 
p‹tRESTORE_CONTEXT
 
	gMACRO


104 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

105 
LDR
 
	gR1
, =
pxCuºítTCB


106 
LDR
 
R0
, [
R1
]

107 
LDR
 
	gLR
, [
R0
]

109 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

110 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

111 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


112 
LDMFD
 
LR
!, {
	gR1
}

113 
STR
 
	gR1
, [
R0
]

115 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

116 
LDMFD
 
	gLR
!, {
	gR0
}

117 
MSR
 
	gSPSR_cxsf
, 
	gR0


119 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

120 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

121 
	gNOP


123 ; 
Re°‹e
 
the
  
	gaddªss
.

124 
LDR
 
	gLR
, [
LR
, #+60]

126 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


127 ; 
c‹ª˘
 
	gaddªss
.

128 
SUBS
 
	gPC
, 
	gLR
, #4

130 
	gENDM


	@portable/IAR/LPC2000/port.c

79 
	~<°dlib.h
>

80 
	~<öåösics.h
>

83 
	~"FªeRTOS.h
"

84 
	~"èsk.h
"

87 
	#p‹tENABLE_TIMER
 ( ( 
uöt8_t
 ) 0x01 )

	)

88 
	#p‹tPRESCALE_VALUE
 0x00

	)

89 
	#p‹tINTERRUPT_ON_MATCH
 ( ( 
uöt32_t
 ) 0x01 )

	)

90 
	#p‹tRESET_COUNT_ON_MATCH
 ( ( 
uöt32_t
 ) 0x02 )

	)

93 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

94 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

95 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

98 
	#p‹tPIT_CLOCK_DIVISOR
 ( ( 
uöt32_t
 ) 16 )

	)

99 
	#p‹tPIT_COUNTER_VALUE
 ( ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tPIT_CLOCK_DIVISOR
 ) / 1000UL ) * 
p‹tTICK_PERIOD_MS
 )

	)

102 
	#p‹tTIMER_MATCH_ISR_BIT
 ( ( 
uöt8_t
 ) 0x01 )

	)

103 
	#p‹tCLEAR_VIC_INTERRUPT
 ( ( 
uöt32_t
 ) 0 )

	)

106 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

109 
	#p‹tINT_LEVEL_SENSITIVE
 0

	)

110 
	#p‹tPIT_ENABLE
 ( ( 
uöt16_t
 ) 0x1 << 24 )

	)

111 
	#p‹tPIT_INT_ENABLE
 ( ( 
uöt16_t
 ) 0x1 << 25 )

	)

114 
	#p‹tTIMER_VIC_CHANNEL
 ( ( 
uöt32_t
 ) 0x0004 )

	)

115 
	#p‹tTIMER_VIC_CHANNEL_BIT
 ( ( 
uöt32_t
 ) 0x0010 )

	)

116 
	#p‹tTIMER_VIC_ENABLE
 ( ( 
uöt32_t
 ) 0x0020 )

	)

121 
¥vSëupTimîI¡îru±
( );

126 
uöt32_t
 
	gulCrôiˇlNe°ög
 = ( uint32_t ) 9999;

136 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

138 
SèckTy≥_t
 *
pxOrigöÆTOS
;

140 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

148 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

149 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaaaaaa;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

172 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

174 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

176 
pxT›OfSèck
--;

177 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

178 
pxT›OfSèck
--;

182 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

183 
pxT›OfSèck
--;

186 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

188 if–––
uöt32_t
 ) 
pxCode
 & 0x01UL ) != 0x00UL )

191 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

194 
pxT›OfSèck
--;

199 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

201  
pxT›OfSèck
;

202 
	}
}

205 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

207 
	`vP‹tSèπFú°Task
( );

211 
	`¥vSëupTimîI¡îru±
();

214 
	`vP‹tSèπFú°Task
();

218 
	}
}

221 
	$vP‹tEndScheduÀr
( )

225 
	}
}

228 #i‡
c⁄figUSE_PREEMPTION
 == 0

232 
__¨m
 
__úq
 
vP‹tN⁄Pªem±iveTick
( );

233 
__¨m
 
__úq
 
	$vP‹tN⁄Pªem±iveTick
( )

238 
	`xTaskIn¸emítTick
();

241 
T0IR
 = 
p‹tTIMER_MATCH_ISR_BIT
;

242 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

243 
	}
}

249 
vP‹tPªem±iveTick
( );

250 
	$vP‹tPªem±iveTick
( )

253 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

258 
	`vTaskSwôchC⁄ãxt
();

262 
T0IR
 = 
p‹tTIMER_MATCH_ISR_BIT
;

263 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

264 
	}
}

270 
	$¥vSëupTimîI¡îru±
( )

272 
uöt32_t
 
ulCom∑ªM©ch
;

276 
T0PR
 = 
p‹tPRESCALE_VALUE
;

279 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

283 #i‡
p‹tPRESCALE_VALUE
 != 0

285 
ulCom∑ªM©ch
 /–
p‹tPRESCALE_VALUE
 + 1 );

289 
T0MR0
 = 
ulCom∑ªM©ch
;

292 
T0MCR
 = 
p‹tRESET_COUNT_ON_MATCH
 | 
p‹tINTERRUPT_ON_MATCH
;

295 
VICI¡Sñe˘
 &~–
p‹tTIMER_VIC_CHANNEL_BIT
 );

296 
VICI¡E«bÀ
 |
p‹tTIMER_VIC_CHANNEL_BIT
;

300 #i‡
c⁄figUSE_PREEMPTION
 == 1

302 –
vP‹tPªem±iveTickE¡ry
 )( );

304 
VICVe˘Addr0
 = ( 
uöt32_t
 ) 
vP‹tPªem±iveTickE¡ry
;

308 –
vN⁄Pªem±iveTick
 )( );

310 
VICVe˘Addr0
 = ( 
öt32_t
 ) 
vP‹tN⁄Pªem±iveTick
;

314 
VICVe˘C¡l0
 = 
p‹tTIMER_VIC_CHANNEL
 | 
p‹tTIMER_VIC_ENABLE
;

318 
T0TCR
 = 
p‹tENABLE_TIMER
;

319 
	}
}

322 
	$vP‹tE¡îCrôiˇl
( )

325 
	`__dißbÀ_öãºu±
();

330 
ulCrôiˇlNe°ög
++;

331 
	}
}

334 
	$vP‹tExôCrôiˇl
( )

336 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

339 
ulCrôiˇlNe°ög
--;

343 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

345 
	`__íabÀ_öãºu±
();

348 
	}
}

	@portable/IAR/LPC2000/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 
	~<öåösics.h
>

72 #ifde‡
__˝lu•lus


87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

93 
	#p‹tBASE_TYPE
 

	)

95 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

96 
	tBa£Ty≥_t
;

97 
	tUBa£Ty≥_t
;

100 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

101 
uöt16_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

104 
uöt32_t
 
	tTickTy≥_t
;

105 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

110 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

111 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

112 
	#p‹tBYTE_ALIGNMENT
 8

	)

113 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

114 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

118 
__¨m
 
__öãrw‹k
 
vP‹tDißbÀI¡îru±sFromThumb
( );

119 
__¨m
 
__öãrw‹k
 
vP‹tE«bÀI¡îru±sFromThumb
( );

120 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

121 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

123 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_öãºu±
()

	)

124 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_öãºu±
()

	)

125 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

126 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

130 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

	)

132 
vTaskSwôchC⁄ãxt
( ); \

134 if–
	gxSwôchRequúed
 ) \

136 
vTaskSwôchC⁄ãxt
(); \

142 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

143 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

145 #ifde‡
__˝lu•lus


	@portable/IAR/MSP430/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

76 
	#p‹tACLK_FREQUENCY_HZ
 ( ( 
TickTy≥_t
 ) 32768 )

	)

77 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( 
uöt16_t
 ) 10 )

	)

78 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
SèckTy≥_t
 ) 0x08 )

	)

82 
	tTCB_t
;

83 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

93 vﬁ©ûê
uöt16_t
 
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

101 
vP‹tSëupTimîI¡îru±
( );

110 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

128 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

129 
pxT›OfSèck
--;

130 *
pxT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

131 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x4444;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x5555;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x6666;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x7777;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x8888;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x9999;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaa;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xbbbb;

149 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

154 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xdddd;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xeeee;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xffff;

161 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

170  
pxT›OfSèck
;

171 
	}
}

174 
	$vP‹tEndScheduÀr
( )

178 
	}
}

185 
	$vP‹tSëupTimîI¡îru±
( )

188 
TACTL
 = 0;

191 
TACTL
 = 
TASSEL_1
;

194 
TACTL
 |
TACLR
;

197 
TACCR0
 = 
p‹tACLK_FREQUENCY_HZ
 / 
c⁄figTICK_RATE_HZ
;

200 
TACCTL0
 = 
CCIE
;

203 
TACTL
 |
TACLR
;

206 
TACTL
 |
MC_1
;

207 
	}
}

	@portable/IAR/MSP430/portasm.h

66 #i‚de‡
PORTASM_H


67 
	#PORTASM_H


	)

69 
p‹tSAVE_CONTEXT
 
ma¸o


71 
IMPORT
 
pxCuºítTCB


72 
IMPORT
 
usCrôiˇlNe°ög


75 
push
 
r4


76 
push
 
r5


77 
push
 
r6


78 
push
 
r7


79 
push
 
r8


80 
push
 
r9


81 
push
 
r10


82 
push
 
r11


83 
push
 
r12


84 
push
 
r13


85 
push
 
r14


86 
push
 
r15


87 
	gmov
.
	gw
 &
	gusCrôiˇlNe°ög
, 
r14


88 
push
 
r14


89 
	gmov
.
	gw
 &
	gpxCuºítTCB
, 
r12


90 
	gmov
.
w
 
	gr1
, 0(
	gr12
)

91 
ídm


94 
p‹tRESTORE_CONTEXT
 
ma¸o


95 
	gmov
.
	gw
 &
	gpxCuºítTCB
, 
r12


96 
	gmov
.
	gw
 @
	gr12
, 
r1


97 
p›
 
r15


98 
	gmov
.
w
 
	gr15
, &
usCrôiˇlNe°ög


99 
p›
 
r15


100 
p›
 
r14


101 
p›
 
r13


102 
p›
 
r12


103 
p›
 
r11


104 
p›
 
r10


105 
p›
 
r9


106 
p›
 
r8


107 
p›
 
r7


108 
p›
 
r6


109 
p›
 
r5


110 
p›
 
r4


115 
	gbic
.
	gw
 #0
	gxf0
,0(
	gSP
)

117 
ªti


118 
	gídm


	@portable/IAR/MSP430/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

80 
	#p‹tCHAR
 

	)

81 
	#p‹tFLOAT
 

	)

82 
	#p‹tDOUBLE
 

	)

83 
	#p‹tLONG
 

	)

84 
	#p‹tSHORT
 

	)

85 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

86 
	#p‹tBASE_TYPE
 

	)

88 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

89 
	tBa£Ty≥_t
;

90 
	tUBa£Ty≥_t
;

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
uöt16_t
 
	tTickTy≥_t
;

95 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

97 
uöt32_t
 
	tTickTy≥_t
;

98 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

104 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`_DINT
(); 
	`_NOP
()

	)

105 
	#p‹tENABLE_INTERRUPTS
(Ë
	`_EINT
(); 
	`_NOP
()

	)

109 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
uöt16_t
 ) 0 )

	)

111 
	#p‹tENTER_CRITICAL
(Ë\

	)

113 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

115 
p‹tDISABLE_INTERRUPTS
(); \

120 
	gusCrôiˇlNe°ög
++; \

123 
	#p‹tEXIT_CRITICAL
(Ë\

	)

125 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

127 if–
	gusCrôiˇlNe°ög
 > 
	gp‹tNO_CRITICAL_SECTION_NESTING
 ) \

130 
	gusCrôiˇlNe°ög
--; \

134 if–
	gusCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

136 
p‹tENABLE_INTERRUPTS
(); \

147 
vP‹tYõld
( );

148 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

152 
	#p‹tBYTE_ALIGNMENT
 2

	)

153 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

154 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

155 
	#p‹tNOP
()

	)

159 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

160 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

162 #i‡
c⁄figINTERRUPT_EXAMPLE_METHOD
 == 2

164 
vTaskSwôchC⁄ãxt
( );

165 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x ) 
	`vTaskSwôchC⁄ãxt
()

	)

	@portable/IAR/MSP430X/data_model.h

66 #i‚de‡
DATA_MODEL_H


67 
	#DATA_MODEL_H


	)

69 #ifde‡
__DATA_MODEL_SMALL__


70 
	#pushm_x
 
pushm
.
w


	)

71 
	#p›m_x
 
p›m
.
w


	)

72 
	#push_x
 
push
.
w


	)

73 
	#p›_x
 
p›
.
w


	)

74 
	#mov_x
 
mov
.
w


	)

75 
	#cmp_x
 
cmp
.
w


	)

78 #ifde‡
__DATA_MODEL_MEDIUM__


79 
	#pushm_x
 
pushm
.
a


	)

80 
	#p›m_x
 
p›m
.
a


	)

81 
	#push_x
 
pushx
.
a


	)

82 
	#p›_x
 
p›x
.
a


	)

83 
	#mov_x
 
mov
.
w


	)

84 
	#cmp_x
 
cmp
.
w


	)

87 #ifde‡
__DATA_MODEL_LARGE__


88 
	#pushm_x
 
pushm
.
a


	)

89 
	#p›m_x
 
p›m
.
a


	)

90 
	#push_x
 
pushx
.
a


	)

91 
	#p›_x
 
p›x
.
a


	)

92 
	#mov_x
 
movx
.
a


	)

93 
	#cmp_x
 
cmpx
.
a


	)

96 #i‚de‡
pushm_x


97 #îr‹ 
The
 
as£mbÀr
 
›ti⁄s
 
mu°
 
deföe
 
⁄e
 
of
 
the
 
fﬁlowög
 
symbﬁs
: 
__DATA_MODEL_SMALL__
, 
__DATA_MODEL_MEDIUM__
, 
‹
 
__DATA_MODEL_LARGE__


	@portable/IAR/MSP430X/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

76 
	#p‹tACLK_FREQUENCY_HZ
 ( ( 
TickTy≥_t
 ) 32768 )

	)

77 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( 
uöt16_t
 ) 10 )

	)

78 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
SèckTy≥_t
 ) 0x08 )

	)

82 
	tTCB_t
;

83 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

93 vﬁ©ûê
uöt16_t
 
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

101 
vP‹tSëupTimîI¡îru±
( );

110 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

112 
uöt16_t
 *
pusT›OfSèck
;

113 
uöt32_t
 *
pulT›OfSèck
;

130 if––
SèckTy≥_t
 ) =–
uöt16_t
 ) )

133 
pusT›OfSèck
 = ( 
uöt16_t
 * ) 
pxT›OfSèck
;

134 
pusT›OfSèck
--;

135 
pulT›OfSèck
 = ( 
uöt32_t
 * ) 
pusT›OfSèck
;

139 
pulT›OfSèck
 = ( 
uöt32_t
 * ) 
pxT›OfSèck
;

141 *
pulT›OfSèck
 = ( 
uöt32_t
 ) 
pxCode
;

143 
pusT›OfSèck
 = ( 
uöt16_t
 * ) 
pulT›OfSèck
;

144 
pusT›OfSèck
--;

145 *
pusT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

146 
pusT›OfSèck
 -––
SèckTy≥_t
 ) / 2 );

149 
pxT›OfSèck
 = ( 
SèckTy≥_t
 * ) 
pusT›OfSèck
;

152 #ifde‡
PRELOAD_REGISTER_VALUES


153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xffff;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xeeee;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xdddd;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xbbbb;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaa;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x9999;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x8888;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x5555;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x6666;

172 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x5555;

174 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x4444;

176 
pxT›OfSèck
--;

178 
pxT›OfSèck
 -= 3;

179 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

180 
pxT›OfSèck
 -= 9;

187 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

191  
pxT›OfSèck
;

192 
	}
}

195 
	$vP‹tEndScheduÀr
( )

199 
	}
}

205 
	$vP‹tSëupTimîI¡îru±
( )

207 
	`vAµliˇti⁄SëupTimîI¡îru±
();

208 
	}
}

211 #¥agm®
ve˘‹
=
c⁄figTICK_VECTOR


212 
__öãºu±
 
__øw
 
	$vTickISRE¡ry
( )

214 
	`vP‹tTickISR
( );

216 
	`__bic_SR_ªgi°î_⁄_exô
–
SCG1
 + 
SCG0
 + 
OSCOFF
 + 
CPUOFF
 );

217 
	`vP‹tTickISR
();

218 
	}
}

	@portable/IAR/MSP430X/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

80 
	~"m•430.h
"

83 
	#p‹tCHAR
 

	)

84 
	#p‹tFLOAT
 

	)

85 
	#p‹tDOUBLE
 

	)

86 
	#p‹tLONG
 

	)

87 
	#p‹tSHORT
 

	)

88 
	#p‹tBASE_TYPE
 

	)

91 #if–
__DATA_MODEL__
 =
__DATA_MODEL_SMALL__
 )

92 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

94 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

97 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

98 
	tBa£Ty≥_t
;

99 
	tUBa£Ty≥_t
;

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
uöt16_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

105 
uöt32_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

112 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`_DINT
();
	`_NOP
()

	)

113 
	#p‹tENABLE_INTERRUPTS
(Ë
	`_EINT
(); 
	`_NOP
()

	)

117 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
uöt16_t
 ) 0 )

	)

119 
	#p‹tENTER_CRITICAL
(Ë\

	)

121 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

123 
p‹tDISABLE_INTERRUPTS
(); \

128 
	gusCrôiˇlNe°ög
++; \

131 
	#p‹tEXIT_CRITICAL
(Ë\

	)

133 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

135 if–
	gusCrôiˇlNe°ög
 > 
	gp‹tNO_CRITICAL_SECTION_NESTING
 ) \

138 
	gusCrôiˇlNe°ög
--; \

142 if–
	gusCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

144 
p‹tENABLE_INTERRUPTS
(); \

155 
vP‹tYõld
( );

156 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

160 
	#p‹tBYTE_ALIGNMENT
 2

	)

161 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

162 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

163 
	#p‹tNOP
(Ë
	`__no_›î©i⁄
()

	)

167 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

168 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

170 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x ) 
	`vP‹tYõld
()

	)

172 
vAµliˇti⁄SëupTimîI¡îru±
( );

176 
	#p‹tLU_PRINTF_SPECIFIER_REQUIRED


	)

	@portable/IAR/RL78/ISR_Support.h

56 
	~"FªeRTOSC⁄fig.h
"

58 ; 
V¨übÀs
 
u£d
 
by
 
	gscheduÀr


60 
EXTERN
 
pxCuºítTCB


61 
EXTERN
 
	gusCrôiˇlNe°ög


64 ; 
p‹tSAVE_CONTEXT
 
	gMACRO


65 ; 
Saves
 
the
 
c⁄ãxt
 
of
Åhê
gíîÆ
 
puΩo£
 
	gªgi°îs
, 
CS
 
™d
 
ES
 (
⁄ly
 
ö
 
Ár


66 ; 
mem‹y
 
mode
Ë
ªgi°îs
 
the
 
usCrôiˇlNe°ög
 
VÆue
 
™d
Åhê
Sèck
 
	gPoöãr


67 ; 
of
 
the
 
a˘ive
 
Task
 
⁄to
Åhê
èsk
 
	g°ack


69 
p‹tSAVE_CONTEXT
 
MACRO


71 
PUSH
 
	gAX
 ; 
Save
 
AX
 
Regi°î
 
to
 
	g°ack
.

72 
PUSH
 
	gHL


73 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_FAR__


74 
MOV
 
	gA
, 
	gCS
 ; 
Save
 
CS
 .

75 
XCH
 
	gA
, 
X


76 
MOV
 
	gA
, 
	gES
 ; 
Save
 
ES
 .

77 
PUSH
 
	gAX


79 
MOV
 
	gA
, 
	gCS
 ; 
Save
 
CS
 .

80 
PUSH
 
	gAX


82 
PUSH
 
	gDE
 ; 
Save
 
the
 
ªmaöög
 
gíîÆ
 
puΩo£
 
	gªgi°îs
.

83 
PUSH
 
BC


84 
MOVW
 
	gAX
, 
	gusCrôiˇlNe°ög
 ; 
Save
 
the
 
usCrôiˇlNe°ög
 
	gvÆue
.

85 
PUSH
 
AX


86 
MOVW
 
	gAX
, 
	gpxCuºítTCB
 ; 
Save
 
the
 
Sèck
 
	gpoöãr
.

87 
MOVW
 
	gHL
, 
AX


88 
MOVW
 
	gAX
, 
SP


89 
	gMOVW
 [
HL
], 
AX


90 
	gENDM


94 ; 
p‹tRESTORE_CONTEXT
 
	gMACRO


95 ; 
Re°‹es
 
the
 
èsk
 
Sèck
 
Poöãr
 
thí
 
u£
 
this
 
to
 
ª°‹e
 
	gusCrôiˇlNe°ög
,

96 ; 
gíîÆ
 
puΩo£
 
ªgi°îs
 
™d
 
the
 
CS
ánd 
ES
 (
⁄ly
 
ö
 
Ár
 
mem‹y
 
mode
)

97 ; 
of
 
the
 
£À˘ed
 
èsk
 
‰om
Åhêèsk 
	g°ack


99 
p‹tRESTORE_CONTEXT
 
MACRO


100 
MOVW
 
	gAX
, 
	gpxCuºítTCB
 ; 
Re°‹e
 
the
 
Sèck
 
	gpoöãr
.

101 
MOVW
 
	gHL
, 
AX


102 
MOVW
 
	gAX
, [
HL
]

103 
MOVW
 
	gSP
, 
AX


104 
POP
 
	gAX
 ; 
Re°‹e
 
usCrôiˇlNe°ög
 
	gvÆue
.

105 
MOVW
 
	gusCrôiˇlNe°ög
, 
AX


106 
POP
 
	gBC
 ; 
Re°‹e
 
the
 
√˚sßry
 
gíîÆ
 
puΩo£
 
	gªgi°îs
.

107 
POP
 
	gDE


108 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_FAR__


109 
POP
 
	gAX
 ; 
Re°‹e
 
the
 
ES
 .

110 
MOV
 
	gES
, 
A


111 
XCH
 
	gA
, 
	gX
 ; 
Re°‹e
 
the
 
CS
 .

112 
MOV
 
	gCS
, 
	gA


114 
POP
 
AX


115 
MOV
 
	gCS
, 
	gA
 ; 
Re°‹e
 
CS
 .

117 
POP
 
	gHL
 ; 
Re°‹e
 
gíîÆ
 
puΩo£
 HL.

118 
POP
 
	gAX
 ; 
Re°‹e
 AX.

119 
	gENDM


	@portable/IAR/RL78/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

72 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( 
uöt16_t
 ) 10 )

	)

85 
	#p‹tPSW
 ( 0xc6UL )

	)

89 
	tTCB_t
;

90 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

100 vﬁ©ûê
uöt16_t
 
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

110 
¥vSëupTimîI¡îru±
( );

111 #i‚de‡
c⁄figSETUP_TICK_INTERRUPT


114 
	#c⁄figSETUP_TICK_INTERRUPT
(Ë
	`¥vSëupTimîI¡îru±
()

	)

121 
vP‹tSèπFú°Task
( );

126 
¥vTaskExôEº‹
( );

136 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

138 
uöt32_t
 *
pulLoˇl
;

144 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_FAR__


148 
pxT›OfSèck
--;

151 
pulLoˇl
 = ( 
uöt32_t
 * ) 
pxT›OfSèck
;

152 *
pulLoˇl
 = ( 
uöt32_t
 ) 
pvP¨amëîs
;

153 
pxT›OfSèck
--;

158 
pxT›OfSèck
--;

159 
pulLoˇl
 = ( 
uöt32_t
 * ) 
pxT›OfSèck
;

160 *
pulLoˇl
 = ( 
uöt32_t
 ) 
¥vTaskExôEº‹
;

161 
pxT›OfSèck
--;

165 
pxT›OfSèck
--;

168 
pulLoˇl
 = ( 
uöt32_t
 * ) 
pxT›OfSèck
;

169 *
pulLoˇl
 = ( ( ( 
uöt32_t
 ) 
pxCode
 ) | ( 
p‹tPSW
 << 24UL ) );

170 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1111;

174 
pxT›OfSèck
--;

181 
pxT›OfSèck
--;

182 
pulLoˇl
 = ( 
uöt32_t
 * ) 
pxT›OfSèck
;

183 *
pulLoˇl
 = ( 
uöt32_t
 ) 
¥vTaskExôEº‹
;

184 
pxT›OfSèck
--;

188 
pxT›OfSèck
--;

191 
pulLoˇl
 = ( 
uöt32_t
 * ) 
pxT›OfSèck
;

192 *
pulLoˇl
 = ( ( ( 
uöt32_t
 ) 
pxCode
 ) | ( 
p‹tPSW
 << 24UL ) );

193 
pxT›OfSèck
--;

196 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

197 
pxT›OfSèck
--;

202 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x2222;

203 
pxT›OfSèck
--;

206 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0F00;

207 
pxT›OfSèck
--;

210 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xDEDE;

211 
pxT›OfSèck
--;

212 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xBCBC;

213 
pxT›OfSèck
--;

217 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

221  
pxT›OfSèck
;

222 
	}
}

225 
	$¥vTaskExôEº‹
( )

233 
	`c⁄figASSERT
–
usCrôiˇlNe°ög
 == ~0U );

234 
	`p‹tDISABLE_INTERRUPTS
();

236 
	}
}

239 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

243 
	`c⁄figSETUP_TICK_INTERRUPT
();

246 
	`vP‹tSèπFú°Task
();

254 
	`¥vSëupTimîI¡îru±
();

255  
pdTRUE
;

256 
	}
}

259 
	$vP‹tEndScheduÀr
( )

262 
	}
}

265 
	$¥vSëupTimîI¡îru±
( )

267 c⁄° 
uöt16_t
 
usClockHz
 = 15000UL;

268 c⁄° 
uöt16_t
 
usCom∑ªM©ch
 = ( 
usClockHz
 / 
c⁄figTICK_RATE_HZ
 ) + 1UL;

271 
OSMC
 = ( 
uöt8_t
 ) 0x16;

273 #ifde‡
RTCEN


276 
RTCEN
 = ( 
uöt8_t
 ) 1U;

279 
ITMK
 = ( 
uöt8_t
 ) 1;

282 
ITMC
 = ( 
uöt8_t
 ) 0x0000;

285 
ITIF
 = ( 
uöt8_t
 ) 0;

288 
ITMC
 = 
usCom∑ªM©ch
 | 0x8000U;

291 
ITMK
 = ( 
uöt8_t
 ) 0;

295 #ifde‡
TMKAEN


298 
TMKAEN
 = ( 
uöt8_t
 ) 1U;

301 
TMKAMK
 = ( 
uöt8_t
 ) 1;

304 
ITMC
 = ( 
uöt8_t
 ) 0x0000;

307 
TMKAIF
 = ( 
uöt8_t
 ) 0;

310 
ITMC
 = 
usCom∑ªM©ch
 | 0x8000U;

313 
TMKAMK
 = ( 
uöt8_t
 ) 0;

316 
	}
}

	@portable/IAR/RL78/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


83 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_FAR__
 && 
__CODE_MODEL__
 =
__CODE_MODEL_NEAR__


84 #w¨nög 
This
 
p‹t
 
has
 
nŸ
 
bìn
 
ã°ed
 
wôh
 
your
 
£À˘ed
 
mem‹y
 
modñ
 
combö©i⁄
. 
If
 
a
 
Ár
 
d©a
 modñ 
is
 
ªquúed
 
ô
 i†
ªcommíded
 
to
 
Æso
 
u£
á f¨ 
code
 model.

87 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_NEAR__
 && 
__CODE_MODEL__
 =
__CODE_MODEL_FAR__


88 #w¨nög 
This
 
p‹t
 
has
 
nŸ
 
bìn
 
ã°ed
 
wôh
 
your
 
£À˘ed
 
mem‹y
 
modñ
 
combö©i⁄
. 
If
 
a
 
Ár
 
code
 modñ 
is
 
ªquúed
 
ô
 i†
ªcommíded
 
to
 
Æso
 
u£
á f¨ 
d©a
 model.

93 
	#p‹tCHAR
 

	)

94 
	#p‹tFLOAT
 

	)

95 
	#p‹tDOUBLE
 

	)

96 
	#p‹tLONG
 

	)

97 
	#p‹tSHORT
 

	)

98 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

99 
	#p‹tBASE_TYPE
 

	)

101 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

102 
	tBa£Ty≥_t
;

103 
	tUBa£Ty≥_t
;

106 #i‡
__DATA_MODEL__
 =
__DATA_MODEL_FAR__


107 
	#p‹tPOINTER_SIZE_TYPE
 
uöt32_t


	)

109 
	#p‹tPOINTER_SIZE_TYPE
 
uöt16_t


	)

113 #i‡–
c⁄figUSE_16_BIT_TICKS
 == 1 )

114 
	tTickTy≥_t
;

115 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

117 
uöt32_t
 
	tTickTy≥_t
;

118 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

123 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
 ( "DI" )

	)

124 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
 ( "EI" )

	)

128 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
uöt16_t
 ) 0 )

	)

130 
	#p‹tENTER_CRITICAL
(Ë\

	)

132 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

134 
p‹tDISABLE_INTERRUPTS
(); \

139 
	gusCrôiˇlNe°ög
++; \

142 
	#p‹tEXIT_CRITICAL
(Ë\

	)

144 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

146 if–
	gusCrôiˇlNe°ög
 > 
	gp‹tNO_CRITICAL_SECTION_NESTING
 ) \

149 
	gusCrôiˇlNe°ög
--; \

153 if–
	gusCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

155 
p‹tENABLE_INTERRUPTS
(); \

162 
	#p‹tYIELD
(Ë
	`__asm
–"BRK" )

	)

163 
	#p‹tYIELD_FROM_ISR
–
xHighîPri‹ôyTaskWokí
 ) if–xHighîPri‹ôyTaskWokí ) 
	`vTaskSwôchC⁄ãxt
()

	)

164 
	#p‹tNOP
(Ë
	`__asm
–"NOP" )

	)

168 
	#p‹tBYTE_ALIGNMENT
 2

	)

169 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

170 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

174 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

175 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

177 #ifde‡
__˝lu•lus


	@portable/IAR/RX100/port.c

71 
	~"limôs.h
"

74 
	~"FªeRTOS.h
"

75 
	~"èsk.h
"

78 
	~"°rög.h
"

81 
	~"i‹x111.h
"

87 
	#p‹tINITIAL_PSW
 ( ( 
SèckTy≥_t
 ) 0x00030000 )

	)

91 #i‡–
c⁄figUSE_TICKLESS_IDLE
 == 0 )

93 
	#p‹tCLOCK_DIVISOR
 8UL

	)

94 #ñi‡–
c⁄figPERIPHERAL_CLOCK_HZ
 >= 12000000 )

95 
	#p‹tCLOCK_DIVISOR
 512UL

	)

96 #ñi‡–
c⁄figPERIPHERAL_CLOCK_HZ
 >= 6000000 )

97 
	#p‹tCLOCK_DIVISOR
 128UL

	)

98 #ñi‡–
c⁄figPERIPHERAL_CLOCK_HZ
 >= 1000000 )

99 
	#p‹tCLOCK_DIVISOR
 32UL

	)

101 
	#p‹tCLOCK_DIVISOR
 8UL

	)

107 
	#p‹tUNLOCK_KEY
 0xA50B

	)

108 
	#p‹tLOCK_KEY
 0xA500

	)

116 
¥vSèπFú°Task
( );

122 
__öãºu±
 
¥vTickISR
( );

130 
¥vSëupTimîI¡îru±
( );

131 #i‚de‡
c⁄figSETUP_TICK_INTERRUPT


134 
	#c⁄figSETUP_TICK_INTERRUPT
(Ë
	`¥vSëupTimîI¡îru±
()

	)

142 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

143 
¥vSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

148 *
pxCuºítTCB
;

153 c⁄° 
uöt32_t
 
	gulM©chVÆueF‹O√Tick
 = ( ( 
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tCLOCK_DIVISOR
 ) / 
c⁄figTICK_RATE_HZ
 );

155 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

161 c⁄° 
TickTy≥_t
 
	gxMaximumPossibÀSuµªs£dTicks
 = 
USHRT_MAX
 / ( ( 
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tCLOCK_DIVISOR
 ) / 
c⁄figTICK_RATE_HZ
 );

166 vﬁ©ûê
uöt32_t
 
	gulTickFœg
 = 
pdFALSE
;

174 c⁄° 
uöt32_t
 
	gulSt›≥dTimîCom≥nßti⁄
 = 100UL / ( 
c⁄figCPU_CLOCK_HZ
 / ( 
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tCLOCK_DIVISOR
 ) );

183 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

186 
pxT›OfSèck
--;

189 *
pxT›OfSèck
 = 0x00;

190 
pxT›OfSèck
--;

191 *
pxT›OfSèck
 = 0x00;

192 
pxT›OfSèck
--;

193 *
pxT›OfSèck
 = 
p‹tINITIAL_PSW
;

194 
pxT›OfSèck
--;

195 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

200 #ifde‡
USE_FULL_REGISTER_INITIALISATION


202 
pxT›OfSèck
--;

203 *
pxT›OfSèck
 = 0x12345678;

204 
pxT›OfSèck
--;

205 *
pxT›OfSèck
 = 0xaaaabbbb;

206 
pxT›OfSèck
--;

207 *
pxT›OfSèck
 = 0xdddddddd;

208 
pxT›OfSèck
--;

209 *
pxT›OfSèck
 = 0xcccccccc;

210 
pxT›OfSèck
--;

211 *
pxT›OfSèck
 = 0xbbbbbbbb;

212 
pxT›OfSèck
--;

213 *
pxT›OfSèck
 = 0xaaaaaaaa;

214 
pxT›OfSèck
--;

215 *
pxT›OfSèck
 = 0x99999999;

216 
pxT›OfSèck
--;

217 *
pxT›OfSèck
 = 0x88888888;

218 
pxT›OfSèck
--;

219 *
pxT›OfSèck
 = 0x77777777;

220 
pxT›OfSèck
--;

221 *
pxT›OfSèck
 = 0x66666666;

222 
pxT›OfSèck
--;

223 *
pxT›OfSèck
 = 0x55555555;

224 
pxT›OfSèck
--;

225 *
pxT›OfSèck
 = 0x44444444;

226 
pxT›OfSèck
--;

227 *
pxT›OfSèck
 = 0x33333333;

228 
pxT›OfSèck
--;

229 *
pxT›OfSèck
 = 0x22222222;

230 
pxT›OfSèck
--;

236 
pxT›OfSèck
 -= 15;

240 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

241 
pxT›OfSèck
--;

242 *
pxT›OfSèck
 = 0x12345678;

243 
pxT›OfSèck
--;

244 *
pxT›OfSèck
 = 0x87654321;

246  
pxT›OfSèck
;

247 
	}
}

250 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

253 if–
pxCuºítTCB
 !
NULL
 )

260 
	`c⁄figSETUP_TICK_INTERRUPT
();

263 
	`_IEN
–
_ICU_SWINT
 ) = 1;

266 
	`_IR
–
_ICU_SWINT
 ) = 0;

269 
	`_IPR
–
_ICU_SWINT
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

272 
	`¥vSèπFú°Task
();

281 
	`¥vSëupTimîI¡îru±
();

284  
pdFAIL
;

285 
	}
}

288 #¥agm®
ve˘‹
 = 
c⁄figTICK_VECTOR


289 
__öãºu±
 
	$¥vTickISR
( )

292 
	`__íabÀ_öãºu±
();

296 
	`__£t_öãºu±_Àvñ
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

298 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

300 
	`èskYIELD
();

303 
	`__£t_öãºu±_Àvñ
–
c⁄figKERNEL_INTERRUPT_PRIORITY
 );

305 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

308 
ulTickFœg
 = 
pdTRUE
;

312 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆueF‹O√Tick
;

315 
	}
}

318 
	$vP‹tEndScheduÀr
( )

322 
	`c⁄figASSERT
–
pxCuºítTCB
 =
NULL
 );

323 
	}
}

326 
	$¥vSëupTimîI¡îru±
( )

329 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tUNLOCK_KEY
;

332 
	`MSTP
–
CMT0
 ) = 0;

335 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tLOCK_KEY
;

338 
CMT0
.
CMCR
.
BIT
.
CMIE
 = 1;

341 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆueF‹O√Tick
;

344 #i‡
p‹tCLOCK_DIVISOR
 == 512

346 
CMT0
.
CMCR
.
BIT
.
CKS
 = 3;

348 #ñi‡
p‹tCLOCK_DIVISOR
 == 128

350 
CMT0
.
CMCR
.
BIT
.
CKS
 = 2;

352 #ñi‡
p‹tCLOCK_DIVISOR
 == 32

354 
CMT0
.
CMCR
.
BIT
.
CKS
 = 1;

356 #ñi‡
p‹tCLOCK_DIVISOR
 == 8

358 
CMT0
.
CMCR
.
BIT
.
CKS
 = 0;

362 #îr‹ 
InvÆid
 
p‹tCLOCK_DIVISOR
 
£âög


368 
	`_IEN
–
_CMT0_CMI0
 ) = 1;

371 
	`_IPR
–
_CMT0_CMI0
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

374 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

375 
	}
}

378 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

380 
	$¥vSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

383 
	`c⁄figPRE_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

388 if–
xEx≥˘edIdÀTime
 > 0 )

390 
	`__waô_f‹_öãºu±
();

394 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

395 
	}
}

400 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

402 
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

404 
uöt32_t
 
ulM©chVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCuºítCou¡
;

405 
eSÀïModeSètus
 
eSÀïA˘i⁄
;

410 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

412 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

417 
ulM©chVÆue
 = 
ulM©chVÆueF‹O√Tick
 * 
xEx≥˘edIdÀTime
;

418 if–
ulM©chVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

422 
ulM©chVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

429 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 0;

430  
CMT
.
CMSTR0
.
BIT
.
STR0
 == 1 )

437 
	`__dißbÀ_öãºu±
();

442 
ulTickFœg
 = 
pdFALSE
;

447 
eSÀïA˘i⁄
 = 
	`eTaskC⁄fúmSÀïModeSètus
();

448 if–
eSÀïA˘i⁄
 =
eAb‹tSÀï
 )

451 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

452 
	`__íabÀ_öãºu±
();

454 if–
eSÀïA˘i⁄
 =
eNoTasksWaôögTimeout
 )

457 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tUNLOCK_KEY
;

460 
SYSTEM
.
SBYCR
.
BIT
.
SSBY
 = 1;

463 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tLOCK_KEY
;

467 
	`¥vSÀï
–
xEx≥˘edIdÀTime
 );

470 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

475 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tUNLOCK_KEY
;

478 
SYSTEM
.
MSTPCRC
.
BIT
.
DSLPE
 = 1;

479 
SYSTEM
.
MSTPCRA
.
BIT
.
MSTPA28
 = 1;

480 
SYSTEM
.
SBYCR
.
BIT
.
SSBY
 = 0;

483 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tLOCK_KEY
;

487 
ulM©chVÆue
 -–
uöt32_t
 ) 
CMT0
.
CMCNT
;

488 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆue
;

491 
CMT0
.
CMCNT
 = 0;

492 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

496 
	`¥vSÀï
–
xEx≥˘edIdÀTime
 );

502 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 0;

503  
CMT
.
CMSTR0
.
BIT
.
STR0
 == 1 )

508 
ulCuºítCou¡
 = ( 
uöt32_t
 ) 
CMT0
.
CMCNT
;

510 if–
ulTickFœg
 !
pdFALSE
 )

517 
ulM©chVÆue
 = 
ulM©chVÆueF‹O√Tick
 - 
ulCuºítCou¡
;

518 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆue
;

526 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

533 
ulCom∂ëeTickPîiods
 = 
ulCuºítCou¡
 / 
ulM©chVÆueF‹O√Tick
;

537 
ulM©chVÆue
 = 
ulCuºítCou¡
 - ( 
ulCom∂ëeTickPîiods
 * 
ulM©chVÆueF‹O√Tick
 );

538 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆue
;

544 
CMT0
.
CMCNT
 = 0;

545 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

549 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

551 
	}
}

	@portable/IAR/RX100/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 
	~<öåösics.h
>

72 #ifde‡
__˝lu•lus


77 
	~"machöe.h
"

91 
	#p‹tCHAR
 

	)

92 
	#p‹tFLOAT
 

	)

93 
	#p‹tDOUBLE
 

	)

94 
	#p‹tLONG
 

	)

95 
	#p‹tSHORT
 

	)

96 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

97 
	#p‹tBASE_TYPE
 

	)

99 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

100 
	tBa£Ty≥_t
;

101 
	tUBa£Ty≥_t
;

104 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

105 
uöt16_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

108 
uöt32_t
 
	tTickTy≥_t
;

109 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

114 
	#p‹tBYTE_ALIGNMENT
 8

	)

115 
	#p‹tSTACK_GROWTH
 -1

	)

116 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

117 
	#p‹tNOP
(Ë
	`__no_›î©i⁄
()

	)

119 
	#p‹tYIELD
(Ë\

	)

120 
__asm
 volatile \

128 
	#p‹tYIELD_FROM_ISR
–
x
 ) if––x ) !
pdFALSE
 ) { 
	`p‹tYIELD
(); }

	)

139 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__£t_öãºu±_Àvñ
––
uöt8_t
 ) 0 )

	)

140 #ifde‡
c⁄figASSERT


141 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`c⁄figASSERT
––
	`__gë_öãºu±_Àvñ
(Ë<
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) )

	)

142 
	#p‹tDISABLE_INTERRUPTS
(Ëif–
	`__gë_öãºu±_Àvñ
(Ë< 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) 
	`__£t_öãºu±_Àvñ
––
uöt8_t
 ) c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY )

	)

144 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__£t_öãºu±_Àvñ
––
uöt8_t
 ) 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

148 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

151 
vTaskE¡îCrôiˇl
( );

152 
vTaskExôCrôiˇl
( );

153 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

154 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

157 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`__gë_öãºu±_Àvñ
(); 
	`p‹tDISABLE_INTERRUPTS
()

	)

158 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ) 
	`__£t_öãºu±_Àvñ
––
uöt8_t
 ) ( uxSavedI¡îru±Sètu†Ë)

	)

161 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

162 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


163 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

164 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

171 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

172 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

174 #ifde‡
__˝lu•lus


	@portable/IAR/RX600/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	~"°rög.h
"

78 
	~<i‹x62n.h
>

84 
	#p‹tINITIAL_PSW
 ( ( 
SèckTy≥_t
 ) 0x00030000 )

	)

85 
	#p‹tINITIAL_FPSW
 ( ( 
SèckTy≥_t
 ) 0x00000100 )

	)

93 
¥vSèπFú°Task
( );

99 
__öãºu±
 
vTickISR
( );

103 *
pxCuºítTCB
;

110 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

114 *
pxT›OfSèck
 = 0x00;

115 
pxT›OfSèck
--;

116 *
pxT›OfSèck
 = 
p‹tINITIAL_PSW
;

117 
pxT›OfSèck
--;

118 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

123 #ifde‡
USE_FULL_REGISTER_INITIALISATION


125 
pxT›OfSèck
--;

126 *
pxT›OfSèck
 = 0xffffffff;

127 
pxT›OfSèck
--;

128 *
pxT›OfSèck
 = 0xeeeeeeee;

129 
pxT›OfSèck
--;

130 *
pxT›OfSèck
 = 0xdddddddd;

131 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = 0xcccccccc;

133 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = 0xbbbbbbbb;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = 0xaaaaaaaa;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = 0x99999999;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = 0x88888888;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = 0x77777777;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = 0x66666666;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = 0x55555555;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = 0x44444444;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = 0x33333333;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = 0x22222222;

153 
pxT›OfSèck
--;

157 
pxT›OfSèck
 -= 15;

161 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = 
p‹tINITIAL_FPSW
;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = 0x12345678;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = 0x87654321;

169  
pxT›OfSèck
;

170 
	}
}

173 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

175 
	`vAµliˇti⁄SëupTimîI¡îru±
( );

178 if–
pxCuºítTCB
 !
NULL
 )

183 
	`vAµliˇti⁄SëupTimîI¡îru±
();

186 
	`_IEN
–
_ICU_SWINT
 ) = 1;

189 
	`_IR
–
_ICU_SWINT
 ) = 0;

192 
	`_IPR
–
_ICU_SWINT
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

195 
	`¥vSèπFú°Task
();

199  
pdFAIL
;

200 
	}
}

203 #¥agm®
ve˘‹
 = 
c⁄figTICK_VECTOR


204 
__öãºu±
 
	$vTickISR
( )

207 
	`__íabÀ_öãºu±
();

211 
	`__£t_öãºu±_Àvñ
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

213 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

215 
	`èskYIELD
();

218 
	`__£t_öãºu±_Àvñ
–
c⁄figKERNEL_INTERRUPT_PRIORITY
 );

219 
	}
}

222 
	$vP‹tEndScheduÀr
( )

226 
	`c⁄figASSERT
–
pxCuºítTCB
 =
NULL
 );

227 
	}
}

	@portable/IAR/RX600/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 
	~<öåösics.h
>

72 #ifde‡
__˝lu•lus


88 
	#p‹tCHAR
 

	)

89 
	#p‹tFLOAT
 

	)

90 
	#p‹tDOUBLE
 

	)

91 
	#p‹tLONG
 

	)

92 
	#p‹tSHORT
 

	)

93 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

94 
	#p‹tBASE_TYPE
 

	)

96 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

97 
	tBa£Ty≥_t
;

98 
	tUBa£Ty≥_t
;

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
uöt16_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

105 
uöt32_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

111 
	#p‹tBYTE_ALIGNMENT
 8

	)

112 
	#p‹tSTACK_GROWTH
 -1

	)

113 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

114 
	#p‹tNOP
(Ë
	`__no_›î©i⁄
()

	)

120 
	#p‹tYIELD
(Ë\

	)

121 
__asm
 volatile \

130 
	#p‹tYIELD_FROM_ISR
–
x
 ) if––x ) !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

141 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__£t_öãºu±_Àvñ
––
uöt8_t
 ) 0 )

	)

142 #ifde‡
c⁄figASSERT


143 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`c⁄figASSERT
––
	`__gë_öãºu±_Àvñ
(Ë<
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) )

	)

144 
	#p‹tDISABLE_INTERRUPTS
(Ëif–
	`__gë_öãºu±_Àvñ
(Ë< 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) 
	`__£t_öãºu±_Àvñ
––
uöt8_t
 ) c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY )

	)

146 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__£t_öãºu±_Àvñ
––
uöt8_t
 ) 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

150 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

153 
vTaskE¡îCrôiˇl
( );

154 
vTaskExôCrôiˇl
( );

155 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

156 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

159 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`__gë_öãºu±_Àvñ
(); 
	`p‹tDISABLE_INTERRUPTS
()

	)

160 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ) 
	`__£t_öãºu±_Àvñ
––
uöt8_t
 ) ( uxSavedI¡îru±Sètu†Ë)

	)

165 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

166 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

168 #ifde‡
__˝lu•lus


	@portable/IAR/STR71x/ISR_Support.h

54 
EXTERN
 
pxCuºítTCB


55 
EXTERN
 
	gulCrôiˇlNe°ög


58 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


61 
p‹tSAVE_CONTEXT
 
	gMACRO


63 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

64 
STMDB
 
	gSP
!, {
	gR0
}

66 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

67 
STMDB
 
	gSP
, {SP}^

68 
NOP


69 
SUB
 
	gSP
, SP, #4

70 
LDMIA
 
	gSP
!, {
	gR0
}

72 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

73 
STMDB
 
	gR0
!, {
	gLR
}

75 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

76 
MOV
 
	gLR
, 
	gR0


78 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

79 
LDMIA
 
	gSP
!, {
	gR0
}

81 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

82 
STMDB
 
	gLR
, {
	gR0
-LR}^

83 
NOP


84 
SUB
 
	gLR
, LR, #60

86 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

87 
MRS
 
	gR0
, 
SPSR


88 
STMDB
 
	gLR
!, {
	gR0
}

90 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


91 
LDR
 
R0
, [R0]

92 
STMDB
 
	gLR
!, {
	gR0
}

94 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

95 
LDR
 
	gR1
, =
pxCuºítTCB


96 
LDR
 
R0
, [
R1
]

97 
STR
 
	gLR
, [
R0
]

99 
ENDM


102 
p‹tRESTORE_CONTEXT
 
	gMACRO


104 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

105 
LDR
 
	gR1
, =
pxCuºítTCB


106 
LDR
 
R0
, [
R1
]

107 
LDR
 
	gLR
, [
R0
]

109 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

110 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

111 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


112 
LDMFD
 
LR
!, {
	gR1
}

113 
STR
 
	gR1
, [
R0
]

115 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

116 
LDMFD
 
	gLR
!, {
	gR0
}

117 
MSR
 
	gSPSR_cxsf
, 
	gR0


119 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

120 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

121 
	gNOP


123 ; 
Re°‹e
 
the
  
	gaddªss
.

124 
LDR
 
	gLR
, [
LR
, #+60]

126 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


127 ; 
c‹ª˘
 
	gaddªss
.

128 
SUBS
 
	gPC
, 
	gLR
, #4

130 
	gENDM


	@portable/IAR/STR71x/port.c

72 
	~"wdg.h
"

73 
	~"eic.h
"

76 
	~<°dlib.h
>

79 
	~"FªeRTOS.h
"

80 
	~"èsk.h
"

83 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

84 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

85 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

88 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

90 
	#p‹tMICROS_PER_SECOND
 1000000

	)

95 
¥vSëupTimîI¡îru±
( );

100 
uöt32_t
 
	gulCrôiˇlNe°ög
 = ( uint32_t ) 9999;

105 
__¨m
 
__úq
 
vP‹tN⁄Pªem±iveTick
( );

106 
vP‹tPªem±iveTick
( );

116 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

118 
SèckTy≥_t
 *
pxOrigöÆTOS
;

120 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

124 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

133 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaaaaaa;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

162 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

167 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

172 if–––
uöt32_t
 ) 
pxCode
 & 0x01UL ) != 0x00UL )

175 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

178 
pxT›OfSèck
--;

183 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

185  
pxT›OfSèck
;

186 
	}
}

189 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

191 
	`vP‹tSèπFú°Task
( );

195 
	`¥vSëupTimîI¡îru±
();

198 
	`vP‹tSèπFú°Task
();

202 
	}
}

205 
	$vP‹tEndScheduÀr
( )

209 
	}
}

214 
__¨m
 
__úq
 
	$vP‹tN⁄Pªem±iveTick
( )

219 
	`xTaskIn¸emítTick
();

222 
WDG
->
SR
 = 0x0000;

223 
	`p‹tCLEAR_EIC
();

224 
	}
}

229 
	$vP‹tPªem±iveTick
( )

232 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

235 
	`vTaskSwôchC⁄ãxt
();

239 
WDG
->
SR
 = 0x0000;

240 
	`p‹tCLEAR_EIC
();

241 
	}
}

244 
	$¥vSëupTimîI¡îru±
( )

247 
	`WDG_ECITC⁄fig
–
DISABLE
 );

248 
	`WDG_C¡OnOffC⁄fig
–
DISABLE
 );

249 
	`WDG_PîiodVÆueC⁄fig
–
p‹tMICROS_PER_SECOND
 / 
c⁄figTICK_RATE_HZ
 );

252 
	`EIC_IRQCh™√lPri‹ôyC⁄fig
–
WDG_IRQCh™√l
, 1 );

253 
	`EIC_IRQCh™√lC⁄fig
–
WDG_IRQCh™√l
, 
ENABLE
 );

254 
	`EIC_IRQC⁄fig
–
ENABLE
 );

255 
	`WDG_ECITC⁄fig
–
ENABLE
 );

259 
	`WDG_C¡OnOffC⁄fig
–
ENABLE
 );

260 
	}
}

263 
__¨m
 
__öãrw‹k
 
	$vP‹tE¡îCrôiˇl
( )

266 
	`__dißbÀ_öãºu±
();

271 
ulCrôiˇlNe°ög
++;

272 
	}
}

275 
__¨m
 
__öãrw‹k
 
	$vP‹tExôCrôiˇl
( )

277 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

280 
ulCrôiˇlNe°ög
--;

284 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

286 
	`__íabÀ_öãºu±
();

289 
	}
}

	@portable/IAR/STR71x/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

80 
	~<öåösics.h
>

82 #ifde‡
__˝lu•lus


88 
	#p‹tCHAR
 

	)

89 
	#p‹tFLOAT
 

	)

90 
	#p‹tDOUBLE
 

	)

91 
	#p‹tLONG
 

	)

92 
	#p‹tSHORT
 

	)

93 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

94 
	#p‹tBASE_TYPE
 

	)

96 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

97 
	tBa£Ty≥_t
;

98 
	tUBa£Ty≥_t
;

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
uöt16_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

105 
uöt32_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

111 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

112 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

113 
	#p‹tBYTE_ALIGNMENT
 8

	)

114 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

115 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

119 
__¨m
 
__öãrw‹k
 
vP‹tDißbÀI¡îru±sFromThumb
( );

120 
__¨m
 
__öãrw‹k
 
vP‹tE«bÀI¡îru±sFromThumb
( );

121 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

122 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

124 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_öãºu±
()

	)

125 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_öãºu±
()

	)

126 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

127 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

131 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

	)

133 
vTaskSwôchC⁄ãxt
( ); \

135 if–
	gxSwôchRequúed
 ) \

137 
vTaskSwôchC⁄ãxt
(); \

143 
	#p‹tEIC_CICR_ADDR
 *––
uöt32_t
 * ) 0xFFFFF804 )

	)

144 
	#p‹tEIC_IPR_ADDR
 *––
uöt32_t
 * ) 0xFFFFF840 )

	)

145 
	#p‹tCLEAR_EIC
(Ë
p‹tEIC_IPR_ADDR
 = 0x01 << 
p‹tEIC_CICR_ADDR


	)

150 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

151 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

153 #ifde‡
__˝lu•lus


	@portable/IAR/STR75x/ISR_Support.h

55 
EXTERN
 
pxCuºítTCB


56 
EXTERN
 
	gulCrôiˇlNe°ög


59 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


62 
p‹tSAVE_CONTEXT
 
	gMACRO


64 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

65 
STMDB
 
	gSP
!, {
	gR0
}

67 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

68 
STMDB
 
	gSP
, {SP}^

69 
NOP


70 
SUB
 
	gSP
, SP, #4

71 
LDMIA
 
	gSP
!, {
	gR0
}

73 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

74 
STMDB
 
	gR0
!, {
	gLR
}

76 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

77 
MOV
 
	gLR
, 
	gR0


79 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

80 
LDMIA
 
	gSP
!, {
	gR0
}

82 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

83 
STMDB
 
	gLR
, {
	gR0
-LR}^

84 
NOP


85 
SUB
 
	gLR
, LR, #60

87 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

88 
MRS
 
	gR0
, 
SPSR


89 
STMDB
 
	gLR
!, {
	gR0
}

91 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


92 
LDR
 
R0
, [R0]

93 
STMDB
 
	gLR
!, {
	gR0
}

95 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

96 
LDR
 
	gR1
, =
pxCuºítTCB


97 
LDR
 
R0
, [
R1
]

98 
STR
 
	gLR
, [
R0
]

100 
ENDM


103 
p‹tRESTORE_CONTEXT
 
	gMACRO


105 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

106 
LDR
 
	gR1
, =
pxCuºítTCB


107 
LDR
 
R0
, [
R1
]

108 
LDR
 
	gLR
, [
R0
]

110 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

111 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

112 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


113 
LDMFD
 
LR
!, {
	gR1
}

114 
STR
 
	gR1
, [
R0
]

116 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

117 
LDMFD
 
	gLR
!, {
	gR0
}

118 
MSR
 
	gSPSR_cxsf
, 
	gR0


120 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

121 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

122 
	gNOP


124 ; 
Re°‹e
 
the
  
	gaddªss
.

125 
LDR
 
	gLR
, [
LR
, #+60]

127 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


128 ; 
c‹ª˘
 
	gaddªss
.

129 
SUBS
 
	gPC
, 
	gLR
, #4

131 
	gENDM


	@portable/IAR/STR75x/port.c

72 
	~"75x_tb.h
"

73 
	~"75x_eic.h
"

76 
	~"FªeRTOS.h
"

77 
	~"èsk.h
"

80 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x3‡Ë

	)

81 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

84 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

87 
	#p‹tPRESCALE
 20

	)

93 
¥vSëupTimîI¡îru±
( );

98 
uöt32_t
 
	gulCrôiˇlNe°ög
 = ( uint32_t ) 9999;

101 
__¨m
 
vP‹tPªem±iveTick
( );

111 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

113 
SèckTy≥_t
 *
pxOrigöÆTOS
;

115 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

119 
pxT›OfSèck
--;

127 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

128 
pxT›OfSèck
--;

130 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaaaaaa;

131 
pxT›OfSèck
--;

132 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

133 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

157 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

162 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

166 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

173  
pxT›OfSèck
;

174 
	}
}

177 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

179 
	`vP‹tSèπFú°Task
( );

183 
	`¥vSëupTimîI¡îru±
();

186 
	`vP‹tSèπFú°Task
();

190 
	}
}

193 
	$vP‹tEndScheduÀr
( )

197 
	}
}

200 
__¨m
 
	$vP‹tPªem±iveTick
( )

203 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

206 
	`vTaskSwôchC⁄ãxt
();

209 
	`TB_CÀ¨ITPídögBô
–
TB_IT_Upd©e
 );

210 
	}
}

213 
	$¥vSëupTimîI¡îru±
( )

215 
EIC_IRQInôTy≥Def
 
EIC_IRQInôSåu˘uª
;

216 
TB_InôTy≥Def
 
TB_InôSåu˘uª
;

219 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√lCmd
 = 
ENABLE
;

220 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√l
 = 
TB_IRQCh™√l
;

221 
EIC_IRQInôSåu˘uª
.
EIC_IRQCh™√lPri‹ôy
 = 1;

222 
	`EIC_IRQInô
(&
EIC_IRQInôSåu˘uª
);

225 
TB_InôSåu˘uª
.
TB_Mode
 = 
TB_Mode_Timög
;

226 
TB_InôSåu˘uª
.
TB_Cou¡îMode
 = 
TB_Cou¡îMode_Down
;

227 
TB_InôSåu˘uª
.
TB_PªsˇÀr
 = 
p‹tPRESCALE
 - 1;

228 
TB_InôSåu˘uª
.
TB_AutoRñﬂd
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tPRESCALE
 ) / 
c⁄figTICK_RATE_HZ
 );

229 
	`TB_Inô
(&
TB_InôSåu˘uª
);

232 
	`TB_ITC⁄fig
(
TB_IT_Upd©e
, 
ENABLE
);

235 
	`TB_CÀ¨ITPídögBô
(
TB_IT_Upd©e
);

238 
	`TB_Cmd
(
ENABLE
);

239 
	}
}

242 
__¨m
 
__öãrw‹k
 
	$vP‹tE¡îCrôiˇl
( )

245 
	`__dißbÀ_öãºu±
();

250 
ulCrôiˇlNe°ög
++;

251 
	}
}

254 
__¨m
 
__öãrw‹k
 
	$vP‹tExôCrôiˇl
( )

256 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

259 
ulCrôiˇlNe°ög
--;

263 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

265 
	`__íabÀ_öãºu±
();

268 
	}
}

	@portable/IAR/STR75x/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

80 
	~<öåösics.h
>

82 #ifde‡
__˝lu•lus


87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

93 
	#p‹tBASE_TYPE
 

	)

95 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

96 
	tBa£Ty≥_t
;

97 
	tUBa£Ty≥_t
;

100 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

101 
uöt16_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

104 
uöt32_t
 
	tTickTy≥_t
;

105 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

110 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

111 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

112 
	#p‹tBYTE_ALIGNMENT
 8

	)

113 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

114 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

118 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

119 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

121 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_öãºu±
()

	)

122 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_öãºu±
()

	)

123 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

124 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

128 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

	)

130 
vTaskSwôchC⁄ãxt
( ); \

132 if–
	gxSwôchRequúed
 ) \

134 
vTaskSwôchC⁄ãxt
(); \

141 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

142 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

144 #ifde‡
__˝lu•lus


	@portable/IAR/STR91x/ISR_Support.h

66 
EXTERN
 
pxCuºítTCB


67 
EXTERN
 
	gulCrôiˇlNe°ög


70 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


73 
p‹tSAVE_CONTEXT
 
	gMACRO


75 ; 
Push
 
R0
 
as
 
we
 
¨e
 
goög
 
to
 
u£
 
the
 .

76 
STMDB
 
	gSP
!, {
	gR0
}

78 ; 
Së
 
R0
 
to
 
poöt
Åÿ
the
 
èsk
 
°ack
 
	gpoöãr
.

79 
STMDB
 
	gSP
, {SP}^

80 
NOP


81 
SUB
 
	gSP
, SP, #4

82 
LDMIA
 
	gSP
!, {
	gR0
}

84 ; 
Push
 
the
  
addªss
 
⁄to
Åhê
	g°ack
.

85 
STMDB
 
	gR0
!, {
	gLR
}

87 ; 
Now
 
we
 
have
 
ßved
 
LR
 wê
ˇn
 
u£
 
ô
 
ö°ód
 
of
 
	gR0
.

88 
MOV
 
	gLR
, 
	gR0


90 ; 
P›
 
R0
 
so
 
we
 
ˇn
 
ßve
 
ô
 
⁄to
 
the
 
sy°em
 
mode
 
	g°ack
.

91 
LDMIA
 
	gSP
!, {
	gR0
}

93 ; 
Push
 
Æl
 
the
 
sy°em
 
mode
 
ªgi°îs
 
⁄to
Åhê
èsk
 
	g°ack
.

94 
STMDB
 
	gLR
, {
	gR0
-LR}^

95 
NOP


96 
SUB
 
	gLR
, LR, #60

98 ; 
Push
 
the
 
SPSR
 
⁄to
Åhê
èsk
 
	g°ack
.

99 
MRS
 
	gR0
, 
SPSR


100 
STMDB
 
	gLR
!, {
	gR0
}

102 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


103 
LDR
 
R0
, [R0]

104 
STMDB
 
	gLR
!, {
	gR0
}

106 ; 
St‹e
 
the
 
√w
 
t›
 
of
 
°ack
 thê
	gèsk
.

107 
LDR
 
	gR1
, =
pxCuºítTCB


108 
LDR
 
R0
, [
R1
]

109 
STR
 
	gLR
, [
R0
]

111 
ENDM


114 
p‹tRESTORE_CONTEXT
 
	gMACRO


116 ; 
Së
 
the
 
LR
 
to
Åhê
èsk
 
	g°ack
.

117 
LDR
 
	gR1
, =
pxCuºítTCB


118 
LDR
 
R0
, [
R1
]

119 
LDR
 
	gLR
, [
R0
]

121 ; 
The
 
¸ôiˇl
 
√°ög
 
dïth
 
is
 
the
 
fú°
 
ôem
 
⁄
Åhê
	g°ack
.

122 ; 
Lﬂd
 
ô
 
öto
 
the
 
ulCrôiˇlNe°ög
 
	gv¨übÀ
.

123 
LDR
 
	gR0
, =
ulCrôiˇlNe°ög


124 
LDMFD
 
LR
!, {
	gR1
}

125 
STR
 
	gR1
, [
R0
]

127 ; 
Gë
 
the
 
SPSR
 
‰om
Åhê
	g°ack
.

128 
LDMFD
 
	gLR
!, {
	gR0
}

129 
MSR
 
	gSPSR_cxsf
, 
	gR0


131 ; 
Re°‹e
 
Æl
 
sy°em
 
mode
 
ªgi°îs
 
the
 
	gèsk
.

132 
LDMFD
 
	gLR
, {
	gR0
-
	gR14
}^

133 
	gNOP


135 ; 
Re°‹e
 
the
  
	gaddªss
.

136 
LDR
 
	gLR
, [
LR
, #+60]

138 ; 
And
  - 
c‹ª˘ög
 
the
 
off£t
 
ö
Åhê
LR
 
to
 
obèö
 
	gthe


139 ; 
c‹ª˘
 
	gaddªss
.

140 
SUBS
 
	gPC
, 
	gLR
, #4

142 
	gENDM


	@portable/IAR/STR91x/port.c

72 
	~"91x_lib.h
"

75 
	~<°dlib.h
>

76 
	~<as£π.h
>

79 
	~"FªeRTOS.h
"

80 
	~"èsk.h
"

82 #i‚de‡
c⁄figUSE_WATCHDOG_TICK


83 #îr‹ 
c⁄figUSE_WATCHDOG_TICK
 
mu°
 
be
 
£t
 
to
 
eôhî
 1 
‹
 0 
ö
 
FªeRTOSC⁄fig
.
h
Åÿ
u£
Éôhî 
the
 
W©chdog
 o∏
timî
 2Åÿ
gíî©e
Åhê
tick
 
öãºu±
 
ª•e˘ivñy
.

87 #i‚de‡
_RUN_TASK_IN_ARM_MODE_


88 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x3‡Ë

	)

90 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

93 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

96 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

98 #i‚de‡
abs


99 
	#abs
(
x
Ë((x)>0 ? (xË: -(x))

	)

114 
	#TOGGLE_LED
(
p‹t
,
pö
Ë\

	)

115 i‡–((((
	gp‹t
)->
	gDR
[(
pö
)<<2])Ë& (
	gpö
)Ë!
Bô_RESET
 ) \

117 (
p‹t
)->
DR
[(
pö
) <<2] = 0x00; \

121 (
	gp‹t
)->
	gDR
[(
pö
) <<2] = (pin); \

128 
¥vSëupTimîI¡îru±
( );

133 
uöt32_t
 
	gulCrôiˇlNe°ög
 = ( uint32_t ) 9999;

138 
WDG_IRQH™dÀr
( );

141 
¥vDeÁu…H™dÀr
( );

143 #i‡
c⁄figUSE_WATCHDOG_TICK
 == 0

145 
u16
 
	gs_nPul£Lígth
;

156 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

158 
SèckTy≥_t
 *
pxOrigöÆTOS
;

160 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

164 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

173 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaaaaaa;

176 
pxT›OfSèck
--;

177 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

178 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

180 
pxT›OfSèck
--;

181 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

182 
pxT›OfSèck
--;

183 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

184 
pxT›OfSèck
--;

185 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

186 
pxT›OfSèck
--;

187 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

188 
pxT›OfSèck
--;

189 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

190 
pxT›OfSèck
--;

191 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

192 
pxT›OfSèck
--;

193 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

194 
pxT›OfSèck
--;

195 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

196 
pxT›OfSèck
--;

197 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

198 
pxT›OfSèck
--;

199 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

200 
pxT›OfSèck
--;

201 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

202 
pxT›OfSèck
--;

206 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

207 
pxT›OfSèck
--;

210 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

211 
pxT›OfSèck
--;

216 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

218  
pxT›OfSèck
;

219 
	}
}

222 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

224 
	`vP‹tSèπFú°Task
( );

228 
	`¥vSëupTimîI¡îru±
();

231 
	`vP‹tSèπFú°Task
();

235 
	}
}

238 
	$vP‹tEndScheduÀr
( )

242 
	}
}

247 #i‡
c⁄figUSE_WATCHDOG_TICK
 == 1

249 
	$¥vFödFa˘‹s
(
u32
 
n
, 
u16
 *
a
, u32 *
b
)

254 
u32
 
b0
;

255 
u16
 
a0
;

256 
öt32_t
 
îr
, 
îr_mö
=
n
;

258 *
a
 = 
a0
 = ((
n
-1)/65536ul) + 1;

259 *
b
 = 
b0
 = 
n
 / *
a
;

261 ; *
a
 <= 256; (*a)++)

263 *
b
 = 
n
 / *
a
;

264 
îr
 = (
öt32_t
)*
a
 * (öt32_t)*
b
 - (öt32_t)
n
;

265 i‡(
	`abs
(
îr
Ë> (*
a
 / 2))

267 (*
b
)++;

268 
îr
 = (
öt32_t
)*
a
 * (öt32_t)*
b
 - (öt32_t)
n
;

270 i‡(
	`abs
(
îr
Ë<ábs(
îr_mö
))

272 
îr_mö
 = 
îr
;

273 
a0
 = *
a
;

274 
b0
 = *
b
;

275 i‡(
îr
 == 0) ;

279 *
a
 = 
a0
;

280 *
b
 = 
b0
;

281 
	}
}

284 
	$¥vSëupTimîI¡îru±
( )

286 
WDG_InôTy≥Def
 
xWdg
;

287 
uöt16_t
 
a
;

288 
uöt32_t
 
n
 = 
c⁄figCPU_PERIPH_HZ
 / 
c⁄figTICK_RATE_HZ
, 
b
;

293 
	`SCU_APBPîùhClockC⁄fig
–
__WDG
, 
ENABLE
 );

294 
	`WDG_DeInô
();

295 
	`WDG_Såu˘Inô
(&
xWdg
);

296 
	`¥vFödFa˘‹s
–
n
, &
a
, &
b
 );

297 
xWdg
.
WDG_PªsˇÀr
 = 
a
 - 1;

298 
xWdg
.
WDG_Pªlﬂd
 = 
b
 - 1;

299 
	`WDG_Inô
–&
xWdg
 );

300 
	`WDG_ITC⁄fig
(
ENABLE
);

303 
	`VIC_C⁄fig
–
WDG_ITLöe
, 
VIC_IRQ
, 10 );

304 
	`VIC_ITCmd
–
WDG_ITLöe
, 
ENABLE
 );

307 
VIC0
->
DVAR
 = ( 
uöt32_t
 ) 
¥vDeÁu…H™dÀr
;

308 
VIC1
->
DVAR
 = ( 
uöt32_t
 ) 
¥vDeÁu…H™dÀr
;

310 
	`WDG_Cmd
(
ENABLE
);

311 
	}
}

314 
	$WDG_IRQH™dÀr
( )

318 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

321 
	`vTaskSwôchC⁄ãxt
();

325 
WDG
->
SR
 &= ~0x0001;

327 
	}
}

331 
	$¥vFödFa˘‹s
(
u32
 
n
, 
u8
 *
a
, 
u16
 *
b
)

336 
u16
 
b0
;

337 
u8
 
a0
;

338 
öt32_t
 
îr
, 
îr_mö
=
n
;

341 *
a
 = 
a0
 = ((
n
-1)/256) + 1;

342 *
b
 = 
b0
 = 
n
 / *
a
;

344 ; *
a
 <= 256; (*a)++)

346 *
b
 = 
n
 / *
a
;

347 
îr
 = (
öt32_t
)*
a
 * (öt32_t)*
b
 - (öt32_t)
n
;

348 i‡(
	`abs
(
îr
Ë> (*
a
 / 2))

350 (*
b
)++;

351 
îr
 = (
öt32_t
)*
a
 * (öt32_t)*
b
 - (öt32_t)
n
;

353 i‡(
	`abs
(
îr
Ë<ábs(
îr_mö
))

355 
îr_mö
 = 
îr
;

356 
a0
 = *
a
;

357 
b0
 = *
b
;

358 i‡(
îr
 == 0) ;

362 *
a
 = 
a0
;

363 *
b
 = 
b0
;

364 
	}
}

367 
	$¥vSëupTimîI¡îru±
( )

369 
uöt8_t
 
a
;

370 
uöt16_t
 
b
;

371 
uöt32_t
 
n
 = 
c⁄figCPU_PERIPH_HZ
 / 
c⁄figTICK_RATE_HZ
;

373 
TIM_InôTy≥Def
 
timî
;

375 
	`SCU_APBPîùhClockC⁄fig
–
__TIM23
, 
ENABLE
 );

376 
	`TIM_DeInô
(
TIM2
);

377 
	`TIM_Såu˘Inô
(&
timî
);

378 
	`¥vFödFa˘‹s
–
n
, &
a
, &
b
 );

380 
timî
.
TIM_Mode
 = 
TIM_OCM_CHANNEL_1
;

381 
timî
.
TIM_OC1_Modes
 = 
TIM_TIMING
;

382 
timî
.
TIM_Clock_Sour˚
 = 
TIM_CLK_APB
;

383 
timî
.
TIM_Clock_Edge
 = 
TIM_CLK_EDGE_RISING
;

384 
timî
.
TIM_PªsˇÀr
 = 
a
-1;

385 
timî
.
TIM_Pul£_Levñ_1
 = 
TIM_HIGH
;

386 
timî
.
TIM_Pul£_Lígth_1
 = 
s_nPul£Lígth
 = 
b
-1;

388 
	`TIM_Inô
 (
TIM2
, &
timî
);

389 
	`TIM_ITC⁄fig
(
TIM2
, 
TIM_IT_OC1
, 
ENABLE
);

391 
	`VIC_C⁄fig
–
TIM2_ITLöe
, 
VIC_IRQ
, 10 );

392 
	`VIC_ITCmd
–
TIM2_ITLöe
, 
ENABLE
 );

395 
VIC0
->
DVAR
 = ( 
uöt32_t
 ) 
¥vDeÁu…H™dÀr
;

396 
VIC1
->
DVAR
 = ( 
uöt32_t
 ) 
¥vDeÁu…H™dÀr
;

398 
	`TIM_Cou¡îCmd
(
TIM2
, 
TIM_CLEAR
);

399 
	`TIM_Cou¡îCmd
(
TIM2
, 
TIM_START
);

400 
	}
}

403 
	$TIM2_IRQH™dÀr
( )

406 
TIM2
->
OC1R
 +
s_nPul£Lígth
;

409 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

412 
	`vTaskSwôchC⁄ãxt
();

416 
TIM2
->
SR
 &~
TIM_FLAG_OC1
;

417 
	}
}

423 
__¨m
 
__öãrw‹k
 
	$vP‹tE¡îCrôiˇl
( )

426 
	`p‹tDISABLE_INTERRUPTS
();

431 
ulCrôiˇlNe°ög
++;

432 
	}
}

435 
__¨m
 
__öãrw‹k
 
	$vP‹tExôCrôiˇl
( )

437 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

440 
ulCrôiˇlNe°ög
--;

444 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

446 
	`p‹tENABLE_INTERRUPTS
();

449 
	}
}

452 
	$¥vDeÁu…H™dÀr
( )

454 
	}
}

	@portable/IAR/STR91x/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

80 
	~<öåösics.h
>

82 #ifde‡
__˝lu•lus


87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

93 
	#p‹tBASE_TYPE
 

	)

95 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

96 
	tBa£Ty≥_t
;

97 
	tUBa£Ty≥_t
;

100 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

101 
uöt16_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

104 
uöt32_t
 
	tTickTy≥_t
;

105 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

110 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

111 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

112 
	#p‹tBYTE_ALIGNMENT
 8

	)

113 
	#p‹tYIELD
(Ë
	`asm
 ( "SWI 0" )

	)

114 
	#p‹tNOP
(Ë
	`asm
 ( "NOP" )

	)

118 
__¨m
 
__öãrw‹k
 
vP‹tE¡îCrôiˇl
( );

119 
__¨m
 
__öãrw‹k
 
vP‹tExôCrôiˇl
( );

120 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

121 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

123 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_öãºu±
()

	)

124 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_öãºu±
()

	)

130 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) \

	)

132 
vTaskSwôchC⁄ãxt
( ); \

134 if–
	gxSwôchRequúed
 ) \

136 
vTaskSwôchC⁄ãxt
(); \

143 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

144 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

146 #ifde‡
__˝lu•lus


	@portable/IAR/V850ES/ISR_Support.h

66 
EXTERN
 
pxCuºítTCB


67 
EXTERN
 
	gusCrôiˇlNe°ög


69 
	~"FªeRTOSC⁄fig.h
"

72 ; 
C⁄ãxt
 
ßve
 
™d
 
ª°‹e
 
ma¸o
 
	gdeföôi⁄s


75 
p‹tSAVE_CONTEXT
 
MACRO


77 
	gadd
 -0x0C,
	g•
 ; 
¥ï¨e
 
°ack
 
to
 
ßve
 
√˚sßry
 
vÆues


78 
	g°
.
w
 
	gÕ
,8[
•
] ; 
°‹e
 
LP
 
to
 
°ack


79 
	g°§
 0,
r31


80 
	g°
.
w
 
	gÕ
,4[
•
] ; 
°‹e
 
EIPC
 
to
 
°ack


81 
	g°§
 1,
Õ


82 
	g°
.
w
 
	gÕ
,0[
•
] ; 
°‹e
 
EIPSW
 
to
 
	g°ack


83 #i‡
c⁄figDATA_MODE
 =1 ; 
Usög
 
the
 
Töy
 
d©a
 
modñ


84 
	g¥ï¨e
 {
	gr20
,
	gr21
,
	gr22
,
	gr23
,
	gr24
,
	gr25
,
	gr26
,
	gr27
,
	gr28
,
	gr29
,
	gr30
},76,
	g•
 ; 
ßve
 
gíîÆ
 
puΩo£
 
ªgi°îs


85 
	gs°
.
w
 
	gr19
,72[
ï
]

86 
	gs°
.
w
 
	gr18
,68[
ï
]

87 
	gs°
.
w
 
	gr17
,64[
ï
]

88 
	gs°
.
w
 
	gr16
,60[
ï
]

89 
	gs°
.
w
 
	gr15
,56[
ï
]

90 
	gs°
.
w
 
	gr14
,52[
ï
]

91 
	gs°
.
w
 
	gr13
,48[
ï
]

92 
	gs°
.
w
 
	gr12
,44[
ï
]

93 
	gs°
.
w
 
	gr11
,40[
ï
]

94 
	gs°
.
w
 
	gr10
,36[
ï
]

95 
	gs°
.
w
 
	gr9
,32[
ï
]

96 
	gs°
.
w
 
	gr8
,28[
ï
]

97 
	gs°
.
w
 
	gr7
,24[
ï
]

98 
	gs°
.
w
 
	gr6
,20[
ï
]

99 
	gs°
.
w
 
	gr5
,16[
ï
]

100 
	gs°
.
w
 
	gr4
,12[
ï
]

102 
	g¥ï¨e
 {
	gr20
,
	gr21
,
	gr22
,
	gr23
,
	gr24
,
	gr26
,
	gr27
,
	gr28
,
	gr29
,
	gr30
},72,
	g•
 ; 
ßve
 
gíîÆ
 
puΩo£
 
ªgi°îs


103 
	gs°
.
w
 
	gr19
,68[
ï
]

104 
	gs°
.
w
 
	gr18
,64[
ï
]

105 
	gs°
.
w
 
	gr17
,60[
ï
]

106 
	gs°
.
w
 
	gr16
,56[
ï
]

107 
	gs°
.
w
 
	gr15
,52[
ï
]

108 
	gs°
.
w
 
	gr14
,48[
ï
]

109 
	gs°
.
w
 
	gr13
,44[
ï
]

110 
	gs°
.
w
 
	gr12
,40[
ï
]

111 
	gs°
.
w
 
	gr11
,36[
ï
]

112 
	gs°
.
w
 
	gr10
,32[
ï
]

113 
	gs°
.
w
 
	gr9
,28[
ï
]

114 
	gs°
.
w
 
	gr8
,24[
ï
]

115 
	gs°
.
w
 
	gr7
,20[
ï
]

116 
	gs°
.
w
 
	gr6
,16[
ï
]

117 
	gs°
.
w
 
	gr5
,12[
ï
]

119 
	gs°
.
w
 
	gr2
,8[
ï
]

120 
	gs°
.
w
 
	gr1
,4[
ï
]

121 
MOVHI
 
hi1
(
usCrôiˇlNe°ög
),
	gr0
,
	gr1
 ; 
ßve
 usCrôiˇlNe°ög 
vÆue
 
to
 
°ack


122 
	gld
.
w
 
lw1
(
usCrôiˇlNe°ög
)[
r1
],
r2


123 
	gs°
.
w
 
	gr2
,0[
ï
]

124 
MOVHI
 
hi1
(
pxCuºítTCB
),
	gr0
,
	gr1
 ; 
ßve
 
SP
 
to
 
t›
 
of
 
cuºít
 
TCB


125 
	gld
.
w
 
lw1
(
pxCuºítTCB
)[
r1
],
r2


126 
	g°
.
w
 
	g•
,0[
r2
]

127 
ENDM


130 
p‹tRESTORE_CONTEXT
 
MACRO


132 
MOVHI
 
hi1
(
pxCuºítTCB
),
	gr0
,
	gr1
 ; 
gë
 
Sèckpoöãr
 
addªss


133 
	gld
.
w
 
lw1
(
pxCuºítTCB
)[
r1
],
•


134 
MOV
 
	g•
,
r1


135 
	gld
.
	gw
 0[
r1
],
	g•
 ; 
lﬂd
 
°ackpoöãr


136 
MOV
 
	g•
,
	gï
 ; 
£t
 
°ack
 
poöãr
 
to
 
ñemít
Öointer

137 
	g¶d
.
	gw
 0[
ï
],
	gr1
 ; 
lﬂd
 
usCrôiˇlNe°ög
 
vÆue
 
‰om
 
°ack


138 
MOVHI
 
hi1
(
usCrôiˇlNe°ög
),
	gr0
,
r2


139 
	g°
.
w
 
	gr1
,
lw1
(
usCrôiˇlNe°ög
)[
r2
]

140 
	g¶d
.
	gw
 4[
ï
],
	gr1
 ; 
ª°‹e
 
gíîÆ
 
puΩo£
 
ªgi°îs


141 
	g¶d
.
	gw
 8[
ï
],
	gr2


142 #i‡
c⁄figDATA_MODE
 =1 ; 
Usög
 
Töy
 
d©a
 
modñ


143 
	g¶d
.
	gw
 12[
ï
],
r4


144 
	g¶d
.
	gw
 16[
ï
],
r5


145 
	g¶d
.
	gw
 20[
ï
],
r6


146 
	g¶d
.
	gw
 24[
ï
],
r7


147 
	g¶d
.
	gw
 28[
ï
],
r8


148 
	g¶d
.
	gw
 32[
ï
],
r9


149 
	g¶d
.
	gw
 36[
ï
],
r10


150 
	g¶d
.
	gw
 40[
ï
],
r11


151 
	g¶d
.
	gw
 44[
ï
],
r12


152 
	g¶d
.
	gw
 48[
ï
],
r13


153 
	g¶d
.
	gw
 52[
ï
],
r14


154 
	g¶d
.
	gw
 56[
ï
],
r15


155 
	g¶d
.
	gw
 60[
ï
],
r16


156 
	g¶d
.
	gw
 64[
ï
],
r17


157 
	g¶d
.
	gw
 68[
ï
],
r18


158 
	g¶d
.
	gw
 72[
ï
],
r19


159 
	gdi•o£
 76,{
	gr20
,
	gr21
,
	gr22
,
	gr23
,
	gr24
,
	gr25
,
	gr26
,
	gr27
,
	gr28
,
	gr29
,
	gr30
}

161 
	g¶d
.
	gw
 12[
ï
],
r5


162 
	g¶d
.
	gw
 16[
ï
],
r6


163 
	g¶d
.
	gw
 20[
ï
],
r7


164 
	g¶d
.
	gw
 24[
ï
],
r8


165 
	g¶d
.
	gw
 28[
ï
],
r9


166 
	g¶d
.
	gw
 32[
ï
],
r10


167 
	g¶d
.
	gw
 36[
ï
],
r11


168 
	g¶d
.
	gw
 40[
ï
],
r12


169 
	g¶d
.
	gw
 44[
ï
],
r13


170 
	g¶d
.
	gw
 48[
ï
],
r14


171 
	g¶d
.
	gw
 52[
ï
],
r15


172 
	g¶d
.
	gw
 56[
ï
],
r16


173 
	g¶d
.
	gw
 60[
ï
],
r17


174 
	g¶d
.
	gw
 64[
ï
],
r18


175 
	g¶d
.
	gw
 68[
ï
],
r19


176 
	gdi•o£
 72,{
	gr20
,
	gr21
,
	gr22
,
	gr23
,
	gr24
,
	gr26
,
	gr27
,
	gr28
,
	gr29
,
	gr30
}

178 
	gld
.
	gw
 0[
•
],
	gÕ
 ; 
ª°‹e
 
EIPSW
 
‰om
 
°ack


179 
ld§
 
	gÕ
,1

180 
	gld
.
	gw
 4[
•
],
	gÕ
 ; 
ª°‹e
 
EIPC
 
‰om
 
°ack


181 
ld§
 
	gÕ
,0

182 
	gld
.
	gw
 8[
•
],
	gÕ
 ; 
ª°‹e
 
LP
 
‰om
 
°ack


183 
	gadd
 0x0C,
	g•
 ; 
£t
 
SP
 
to
 
right
 
posôi⁄


185 
RETI


187 
	gENDM


	@portable/IAR/V850ES/port.c

67 
	~<°dlib.h
>

70 
	~"FªeRTOS.h
"

71 
	~"èsk.h
"

75 
	#p‹tINITIAL_CRITICAL_NESTING
 (–
SèckTy≥_t
 ) 10)

	)

78 
	#p‹tPSW
 (–
SèckTy≥_t
 ) 0x00000000)

	)

82 
	tTCB_t
;

83 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

86 vﬁ©ûê
SèckTy≥_t
 
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

90 
¥vSëupTimîI¡îru±
( );

93 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

95 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

96 
pxT›OfSèck
--;

97 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

98 
pxT›OfSèck
--;

99 *
pxT›OfSèck
 = 
p‹tPSW
;

100 
pxT›OfSèck
--;

101 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x20202020;

102 
pxT›OfSèck
--;

103 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x21212121;

104 
pxT›OfSèck
--;

105 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x22222222;

106 
pxT›OfSèck
--;

107 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x23232323;

108 
pxT›OfSèck
--;

109 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x24242424;

110 
pxT›OfSèck
--;

111 #i‡(
__DATA_MODEL__
 == 0) || (__DATA_MODEL__ == 1)

112 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x25252525;

113 
pxT›OfSèck
--;

115 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x26262626;

116 
pxT›OfSèck
--;

117 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x27272727;

118 
pxT›OfSèck
--;

119 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x28282828;

120 
pxT›OfSèck
--;

121 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x29292929;

122 
pxT›OfSèck
--;

123 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x30303030;

124 
pxT›OfSèck
--;

125 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x19191919;

126 
pxT›OfSèck
--;

127 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x18181818;

128 
pxT›OfSèck
--;

129 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x17171717;

130 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x16161616;

132 
pxT›OfSèck
--;

133 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x15151515;

134 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x14141414;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x13131313;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x99999999;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x88888888;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x77777777;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x66666666;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x55555555;

154 
pxT›OfSèck
--;

155 #i‡
__DATA_MODEL__
 == 0 || __DATA_MODEL__ == 1

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x44444444;

157 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x22222222;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

169  
pxT›OfSèck
;

170 
	}
}

173 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

177 
	`¥vSëupTimîI¡îru±
();

180 
	`vP‹tSèπ
();

183  
pdTRUE
;

184 
	}
}

187 
	$vP‹tEndScheduÀr
( )

191 
	}
}

197 
	$¥vSëupTimîI¡îru±
( )

199 
TM0CE
 = 0;

200 
TM0EQMK0
 = 1;

201 
TM0EQIF0
 = 0;

203 #ifde‡
__IAR_V850ES_Fx3__


205 
TM0CMP0
 = (((
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
) / 2)-1);

209 
TM0CMP0
 = (
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
);

213 
TM0EQIC0
 &= 0xF8;

214 
TM0CTL0
 = 0x00;

215 
TM0EQIF0
 = 0;

216 
TM0EQMK0
 = 0;

217 
TM0CE
 = 1;

218 
	}
}

	@portable/IAR/V850ES/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 

	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

97 #i‡(
c⁄figUSE_16_BIT_TICKS
==1)

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
 ( "DI" )

	)

108 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
 ( "EI" )

	)

112 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
UBa£Ty≥_t
 ) 0 )

	)

114 
	#p‹tENTER_CRITICAL
(Ë\

	)

116 vﬁ©ûê 
p‹tSTACK_TYPE
 
usCrôiˇlNe°ög
; \

118 
p‹tDISABLE_INTERRUPTS
(); \

123 
	gusCrôiˇlNe°ög
++; \

126 
	#p‹tEXIT_CRITICAL
(Ë\

	)

128 vﬁ©ûê 
p‹tSTACK_TYPE
 
usCrôiˇlNe°ög
; \

130 if–
	gusCrôiˇlNe°ög
 > 
	gp‹tNO_CRITICAL_SECTION_NESTING
 ) \

133 
	gusCrôiˇlNe°ög
--; \

137 if–
	gusCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

139 
p‹tENABLE_INTERRUPTS
(); \

146 
vP‹tYõld
( );

147 
vP‹tSèπ
( );

148 
p‹tSAVE_CONTEXT
( );

149 
p‹tRESTORE_CONTEXT
( );

150 
	#p‹tYIELD
(Ë
	`__asm
 ( "å≠ 0" )

	)

151 
	#p‹tNOP
(Ë
	`__asm
 ( "NOP" )

	)

152 
vTaskSwôchC⁄ãxt
( );

153 
	#p‹tYIELD_FROM_ISR
–
xHighîPri‹ôyTaskWokí
 ) if–xHighîPri‹ôyTaskWokí ) 
	`vTaskSwôchC⁄ãxt
()

	)

158 
	#p‹tBYTE_ALIGNMENT
 4

	)

159 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

160 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

164 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

165 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

168 #ifde‡
__˝lu•lus


	@portable/MPLAB/PIC18F/port.c

96 
	~"FªeRTOS.h
"

97 
	~"èsk.h
"

100 
	~"timîs.h
"

107 
	#p‹tTIMER_FOSC_SCALE
 ( ( 
uöt32_t
 ) 4 )

	)

111 
	#p‹tINITAL_INTERRUPT_STATE
 0xc0

	)

114 
	#p‹tGLOBAL_INTERRUPT_FLAG
 0x80

	)

118 
	#p‹tINTERRUPTS_UNCHANGED
 0x00

	)

124 
	#p‹tCOMPILER_MANAGED_MEMORY_SIZE
 ( ( 
uöt8_t
 ) 0x13 )

	)

128 
	tTCB_t
;

129 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

132 
	#p‹tBIT_SET
 ( ( 
uöt8_t
 ) 1 )

	)

133 
	#p‹tBIT_CLEAR
 ( ( 
uöt8_t
 ) 0 )

	)

139 
vSîülTxISR
( );

140 
vSîülRxISR
( );

145 
¥vSëupTimîI¡îru±
( );

151 
¥vTickISR
( );

157 
¥vLowI¡îru±
( );

184 
	#p‹tSAVE_CONTEXT
–
ucF‹˚dI¡îru±Fœgs
 ) \

	)

186 
	g_asm
 \

189 
MOVFF
 
	gWREG
, 
	gPREINC1
 \

190 
MOVFF
 
	gSTATUS
, 
	gPREINC1
 \

193 
MOVFF
 
	gINTCON
, 
	gWREG
 \

194 
IORLW
 
	gucF‹˚dI¡îru±Fœgs
 \

195 
MOVFF
 
	gWREG
, 
	gPREINC1
 \

196 
	g_ídasm
 \

198 
p‹tDISABLE_INTERRUPTS
(); \

200 
	g_asm
 \

202 
MOVFF
 
	gBSR
, 
	gPREINC1
 \

203 
MOVFF
 
	gFSR2L
, 
	gPREINC1
 \

204 
MOVFF
 
	gFSR2H
, 
	gPREINC1
 \

205 
MOVFF
 
	gFSR0L
, 
	gPREINC1
 \

206 
MOVFF
 
	gFSR0H
, 
	gPREINC1
 \

207 
MOVFF
 
	gTABLAT
, 
	gPREINC1
 \

208 
MOVFF
 
	gTBLPTRU
, 
	gPREINC1
 \

209 
MOVFF
 
	gTBLPTRH
, 
	gPREINC1
 \

210 
MOVFF
 
	gTBLPTRL
, 
	gPREINC1
 \

211 
MOVFF
 
	gPRODH
, 
	gPREINC1
 \

212 
MOVFF
 
	gPRODL
, 
	gPREINC1
 \

213 
MOVFF
 
	gPCLATU
, 
	gPREINC1
 \

214 
MOVFF
 
	gPCLATH
, 
	gPREINC1
 \

216 
CLRF
 
	gFSR0L
, 0 \

217 
CLRF
 
	gFSR0H
, 0 \

218 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

219 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

220 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

221 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

222 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

223 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

224 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

225 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

226 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

227 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

228 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

229 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

230 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

231 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

232 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

233 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

234 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

235 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

236 
MOVFF
 
	gPOSTINC0
, 
	gPREINC1
 \

237 
MOVFF
 
	gINDF0
, 
	gPREINC1
 \

238 
MOVFF
 
	gFSR0L
, 
	gPREINC1
 \

239 
MOVFF
 
	gFSR0H
, 
	gPREINC1
 \

242 
MOVFF
 
	gSTKPTR
, 
	gFSR0L
 \

243 
	g_ídasm
 \

246  
	gSTKPTR
 > ( 
	guöt8_t
 ) 0 ) \

248 
	g_asm
 \

249 
MOVFF
 
	gTOSL
, 
	gPREINC1
 \

250 
MOVFF
 
	gTOSH
, 
	gPREINC1
 \

251 
MOVFF
 
	gTOSU
, 
	gPREINC1
 \

252 
	gPOP
 \

253 
	g_ídasm
 \

256 
	g_asm
 \

259 
MOVFF
 
	gFSR0L
, 
	gPREINC1
 \

260 
MOVF
 
	gPREINC1
, 1, 0 \

261 
	g_ídasm
 \

264 
	g_asm
 \

265 
MOVFF
 
	gpxCuºítTCB
, 
	gFSR0L
 \

266 
MOVFF
 
	gpxCuºítTCB
 + 1, 
	gFSR0H
 \

267 
MOVFF
 
	gFSR1L
, 
	gPOSTINC0
 \

268 
MOVFF
 
	gFSR1H
, 
	gPOSTINC0
 \

269 
	g_ídasm
 \

277 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

279 
	g_asm
 \

281 
MOVFF
 
	gpxCuºítTCB
, 
	gFSR0L
 \

282 
MOVFF
 
	gpxCuºítTCB
 + 1, 
	gFSR0H
 \

286 
MOVFF
 
	gPOSTINC0
, 
	gFSR1L
 \

287 
MOVFF
 
	gPOSTINC0
, 
	gFSR1H
 \

291 
MOVFF
 
	gPOSTDEC1
, 
	gFSR0L
 \

292 
MOVFF
 
	gPOSTDEC1
, 
	gFSR0L
 \

293 
	g_ídasm
 \

296 
	gSTKPTR
 = 0; \

298  
	gSTKPTR
 < 
	gFSR0L
 ) \

300 
	g_asm
 \

301 
	gPUSH
 \

302 
MOVF
 
	gPOSTDEC1
, 0, 0 \

303 
MOVWF
 
	gTOSU
, 0 \

304 
MOVF
 
	gPOSTDEC1
, 0, 0 \

305 
MOVWF
 
	gTOSH
, 0 \

306 
MOVF
 
	gPOSTDEC1
, 0, 0 \

307 
MOVWF
 
	gTOSL
, 0 \

308 
	g_ídasm
 \

311 
	g_asm
 \

313 
MOVFF
 
	gPOSTDEC1
, 
	gFSR0H
 \

314 
MOVFF
 
	gPOSTDEC1
, 
	gFSR0L
 \

315 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

316 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

317 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

318 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

319 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

320 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

321 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

322 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

323 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

324 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

325 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

326 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

327 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

328 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

329 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

330 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

331 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

332 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

333 
MOVFF
 
	gPOSTDEC1
, 
	gPOSTDEC0
 \

334 
MOVFF
 
	gPOSTDEC1
, 
	gINDF0
 \

336 
MOVFF
 
	gPOSTDEC1
, 
	gPCLATH
 \

337 
MOVFF
 
	gPOSTDEC1
, 
	gPCLATU
 \

338 
MOVFF
 
	gPOSTDEC1
, 
	gPRODL
 \

339 
MOVFF
 
	gPOSTDEC1
, 
	gPRODH
 \

340 
MOVFF
 
	gPOSTDEC1
, 
	gTBLPTRL
 \

341 
MOVFF
 
	gPOSTDEC1
, 
	gTBLPTRH
 \

342 
MOVFF
 
	gPOSTDEC1
, 
	gTBLPTRU
 \

343 
MOVFF
 
	gPOSTDEC1
, 
	gTABLAT
 \

344 
MOVFF
 
	gPOSTDEC1
, 
	gFSR0H
 \

345 
MOVFF
 
	gPOSTDEC1
, 
	gFSR0L
 \

346 
MOVFF
 
	gPOSTDEC1
, 
	gFSR2H
 \

347 
MOVFF
 
	gPOSTDEC1
, 
	gFSR2L
 \

348 
MOVFF
 
	gPOSTDEC1
, 
	gBSR
 \

351 
MOVFF
 
	gPOSTDEC1
, 
	gWREG
 \

352 
	g_ídasm
 \

358 if–
	gWREG
 & 
	gp‹tGLOBAL_INTERRUPT_FLAG
 ) \

360 
	g_asm
 \

361 
MOVFF
 
	gPOSTDEC1
, 
	gSTATUS
 \

362 
MOVFF
 
	gPOSTDEC1
, 
	gWREG
 \

364 
	gRETFIE
 0 \

365 
	g_ídasm
 \

369 
	g_asm
 \

370 
MOVFF
 
	gPOSTDEC1
, 
	gSTATUS
 \

371 
MOVFF
 
	gPOSTDEC1
, 
	gWREG
 \

374 
	gRETURN
 0 \

375 
	g_ídasm
 \

383 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

385 
uöt32_t
 
ulAddªss
;

386 
uöt8_t
 
ucBlock
;

391 *
pxT›OfSèck
 = 0x11;

392 
pxT›OfSèck
++;

393 *
pxT›OfSèck
 = 0x22;

394 
pxT›OfSèck
++;

395 *
pxT›OfSèck
 = 0x33;

396 
pxT›OfSèck
++;

404 
ulAddªss
 = ( 
uöt32_t
 ) 
pvP¨amëîs
;

405 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulAddªss
 & ( 
uöt32_t
 ) 0x00ff );

406 
pxT›OfSèck
++;

408 
ulAddªss
 >>= 8;

409 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulAddªss
 & ( 
uöt32_t
 ) 0x00ff );

410 
pxT›OfSèck
++;

416 *
pxT›OfSèck
 = 0x44;

417 
pxT›OfSèck
++;

421 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x66;

422 
pxT›OfSèck
++;

424 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xcc;

425 
pxT›OfSèck
++;

428 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITAL_INTERRUPT_STATE
;

429 
pxT›OfSèck
++;

431 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11;

432 
pxT›OfSèck
++;

434 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x22;

435 
pxT›OfSèck
++;

437 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x33;

438 
pxT›OfSèck
++;

440 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x44;

441 
pxT›OfSèck
++;

443 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x55;

444 
pxT›OfSèck
++;

446 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x66;

447 
pxT›OfSèck
++;

449 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

450 
pxT›OfSèck
++;

452 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x88;

453 
pxT›OfSèck
++;

455 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x99;

456 
pxT›OfSèck
++;

458 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaa;

459 
pxT›OfSèck
++;

461 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xbb;

462 
pxT›OfSèck
++;

464 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

465 
pxT›OfSèck
++;

467 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

468 
pxT›OfSèck
++;

471  
ucBlock
 = 0; ucBlock <
p‹tCOMPILER_MANAGED_MEMORY_SIZE
; ucBlock++ )

473 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
ucBlock
;

474 *
pxT›OfSèck
++;

478 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tCOMPILER_MANAGED_MEMORY_SIZE
;

479 
pxT›OfSèck
++;

481 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00;

482 
pxT›OfSèck
++;

486 
ulAddªss
 = ( 
uöt32_t
 ) 
pxCode
;

489 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulAddªss
 & ( 
uöt32_t
 ) 0x00ff );

490 
pxT›OfSèck
++;

491 
ulAddªss
 >>= 8;

494 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulAddªss
 & ( 
uöt32_t
 ) 0x00ff );

495 
pxT›OfSèck
++;

496 
ulAddªss
 >>= 8;

499 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulAddªss
 & ( 
uöt32_t
 ) 0x00ff );

500 
pxT›OfSèck
++;

504 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 1;

505 
pxT›OfSèck
++;

507  
pxT›OfSèck
;

508 
	}
}

511 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

514 
	`¥vSëupTimîI¡îru±
();

517 
	`p‹tRESTORE_CONTEXT
();

520 –Ë
¥vLowI¡îru±
;

521 –Ë
¥vTickISR
;

523  
pdTRUE
;

524 
	}
}

527 
	$vP‹tEndScheduÀr
( )

532 
	}
}

540 
	$vP‹tYõld
( )

544 
	`p‹tSAVE_CONTEXT
–
p‹tINTERRUPTS_UNCHANGED
 );

547 
	`vTaskSwôchC⁄ãxt
();

550 
	`p‹tRESTORE_CONTEXT
();

551 
	}
}

557 #¥agm®
code
 
high_ve˘‹
=0x08

558 
	$¥vLowI¡îru±
( )

561 if–
PIR1bôs
.
CCP1IF
 )

563 
_asm


564 
¥vTickISR


565 
_ídasm


569 if–
PIR1bôs
.
RCIF
 )

571 
_asm


572 
vSîülRxISR


573 
_ídasm


577 if–
PIR1bôs
.
TXIF
 )

579 if–
PIE1bôs
.
TXIE
 )

581 
_asm


582 
vSîülTxISR


583 
_ídasm


586 
	}
}

587 #¥agm®
code


597 
	$¥vTickISR
( )

601 
	`p‹tSAVE_CONTEXT
–
p‹tGLOBAL_INTERRUPT_FLAG
 );

602 
PIR1bôs
.
CCP1IF
 = 0;

605 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

608 
	`vTaskSwôchC⁄ãxt
();

611 
	`p‹tRESTORE_CONTEXT
();

612 
	}
}

618 
	$¥vSëupTimîI¡îru±
( )

620 c⁄° 
uöt32_t
 
ulC⁄°Com∑ªVÆue
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tTIMER_FOSC_SCALE
 ) / 
c⁄figTICK_RATE_HZ
 );

621 
uöt32_t
 
ulCom∑ªVÆue
;

622 
uöt8_t
 
ucByã
;

630 
TMR1H
 = ( 
uöt8_t
 ) 0x00;

631 
TMR1L
 = ( 
uöt8_t
 ) 0x00;

634 
ulCom∑ªVÆue
 = 
ulC⁄°Com∑ªVÆue
;

635 
CCPR1L
 = ( 
uöt8_t
 ) ( 
ulCom∑ªVÆue
 & ( 
uöt32_t
 ) 0xff );

636 
ulCom∑ªVÆue
 >>–
uöt32_t
 ) 8;

637 
CCPR1H
 = ( 
uöt8_t
 ) ( 
ulCom∑ªVÆue
 & ( 
uöt32_t
 ) 0xff );

639 
CCP1CONbôs
.
CCP1M0
 = 
p‹tBIT_SET
;

640 
CCP1CONbôs
.
CCP1M1
 = 
p‹tBIT_SET
;

641 
CCP1CONbôs
.
CCP1M2
 = 
p‹tBIT_CLEAR
;

642 
CCP1CONbôs
.
CCP1M3
 = 
p‹tBIT_SET
;

643 
PIE1bôs
.
CCP1IE
 = 
p‹tBIT_SET
;

647 
INTCONbôs
.
GIEL
 = 
p‹tBIT_SET
;

651 
	`O≥nTimî1
–
T1_16BIT_RW
 & 
T1_SOURCE_INT
 & 
T1_PS_1_1
 & 
T1_CCP1_T3_CCP2
 );

652 
	}
}

	@portable/MPLAB/PIC18F/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

80 
	#p‹tCHAR
 

	)

81 
	#p‹tFLOAT
 

	)

82 
	#p‹tDOUBLE
 

	)

83 
	#p‹tLONG
 

	)

84 
	#p‹tSHORT
 

	)

85 
	#p‹tSTACK_TYPE
 
uöt8_t


	)

86 
	#p‹tBASE_TYPE
 

	)

88 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

89 sig√d 
	tBa£Ty≥_t
;

90 
	tUBa£Ty≥_t
;

92 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

93 
uöt16_t
 
	tTickTy≥_t
;

94 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

96 
uöt32_t
 
	tTickTy≥_t
;

97 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

102 
	#p‹tBYTE_ALIGNMENT
 1

	)

103 
	#p‹tGLOBAL_INT_ENABLE_BIT
 0x80

	)

104 
	#p‹tSTACK_GROWTH
 1

	)

105 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tDISABLE_INTERRUPTS
(Ë
INTCONbôs
.
GIEH
 = 0;

	)

110 
	#p‹tENABLE_INTERRUPTS
(Ë
INTCONbôs
.
GIEH
 = 1;

	)

113 
	#p‹tENTER_CRITICAL
(Ë
POSTINC1
 = 
INTCON
; \

	)

114 
	gINTCONbôs
.
	gGIEH
 = 0;

120 
	#p‹tEXIT_CRITICAL
(Ë
_asm
 \

	)

121 
MOVF
 
	gPOSTDEC1
, 1, 0 \

122 
	g_ídasm
 \

123 if–
	gINDF1
 & 
	gp‹tGLOBAL_INT_ENABLE_BIT
 ) \

125 
p‹tENABLE_INTERRUPTS
(); \

130 
vP‹tYõld
( );

131 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

135 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

136 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

140 #ifde‡
__DEBUG


141 
	#p‹tREMOVE_STATIC_QUALIFIER


	)

145 
	#p‹tNOP
(Ë
_asm
 \

	)

146 
	gNOP
 \

147 
	g_ídasm


	@portable/MPLAB/PIC18F/stdio.h

	@portable/MPLAB/PIC24_dsPIC/port.c

77 
	~"FªeRTOS.h
"

78 
	~"èsk.h
"

81 
	#p‹tBIT_SET
 1

	)

82 
	#p‹tTIMER_PRESCALE
 8

	)

83 
	#p‹tINITIAL_SR
 0

	)

87 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


88 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 1

	)

93 #i‚de‡
c⁄figTICK_INTERRUPT_HANDLER


94 
	#c⁄figTICK_INTERRUPT_HANDLER
 
_T1I¡îru±


	)

98 
	#p‹tUNUSED_PR_BITS
 0x7f

	)

101 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xef;

103 #i‡
c⁄figKERNEL_INTERRUPT_PRIORITY
 != 1

104 #îr‹ 
If
 
c⁄figKERNEL_INTERRUPT_PRIORITY
 
is
 
nŸ
 1 
thí
 
the
 #32 
ö
Åhê
fﬁlowög
 
ma¸os
 
√eds
 
ch™gög
 
to
 
equÆ
Åhê
p‹tINTERRUPT_BITS
 
vÆue
, 
which
 is ( configKERNEL_INTERRUPT_PRIORITY << 5 )

107 #i‡
deföed
–
__PIC24E__
 ) || deföed ( 
__PIC24F__
 ) || deföed–
__PIC24FK__
 ) || deföed–
__PIC24H__
 )

109 #ifde‡
__HAS_EDS__


110 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

111 
asm
 volatile( "MOV _pxCurrentTCB, W0 \n" \

130 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

131 
asm
 volatile( "MOV _pxCurrentTCB, W0 \n" \

151 #i‡
deföed
–
__dsPIC30F__
 ) || deföed–
__dsPIC33F__
 )

153 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

154 
asm
 volatile( "MOV _pxCurrentTCB, W0 \n" \

185 #i‚de‡
p‹tRESTORE_CONTEXT


186 #îr‹ 
Uƒecogni£d
 
devi˚
 
£À˘ed


192 
vAµliˇti⁄SëupTickTimîI¡îru±
( );

197 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

199 
uöt16_t
 
usCode
;

200 
UBa£Ty≥_t
 
i
;

202 c⁄° 
SèckTy≥_t
 
xInôülSèck
[] =

222 #ifde‡
MPLAB_DSPIC_PORT


240 
usCode
 = ( 
uöt16_t
 ) 
pxCode
;

241 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
usCode
;

242 
pxT›OfSèck
++;

247 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0;

248 
pxT›OfSèck
++;

251 *
pxT›OfSèck
 = 
p‹tINITIAL_SR
;

252 
pxT›OfSèck
++;

255 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

256 
pxT›OfSèck
++;

258  
i
 = 0; i < ( –
xInôülSèck
 ) / –
SèckTy≥_t
 ) ); i++ )

260 *
pxT›OfSèck
 = 
xInôülSèck
[ 
i
 ];

261 
pxT›OfSèck
++;

264 *
pxT›OfSèck
 = 
CORCON
;

265 
pxT›OfSèck
++;

267 #i‡
	`deföed
(
__HAS_EDS__
)

268 *
pxT›OfSèck
 = 
DSRPAG
;

269 
pxT›OfSèck
++;

270 *
pxT›OfSèck
 = 
DSWPAG
;

271 
pxT›OfSèck
++;

273 *
pxT›OfSèck
 = 
PSVPAG
;

274 
pxT›OfSèck
++;

278 *
pxT›OfSèck
 = 0x00;

279 
pxT›OfSèck
++;

281  
pxT›OfSèck
;

282 
	}
}

285 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

288 
	`vAµliˇti⁄SëupTickTimîI¡îru±
();

291 
	`p‹tRESTORE_CONTEXT
();

294 
asm
 volatile ( "return" );

297  
pdTRUE
;

298 
	}
}

301 
	$vP‹tEndScheduÀr
( )

305 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

306 
	}
}

312 
__©åibuã__
(–
wók
 )Ë
	$vAµliˇti⁄SëupTickTimîI¡îru±
( )

314 c⁄° 
uöt32_t
 
ulCom∑ªM©ch
 = ( ( 
c⁄figCPU_CLOCK_HZ
 / 
p‹tTIMER_PRESCALE
 ) / 
c⁄figTICK_RATE_HZ
 ) - 1;

317 
T1CON
 = 0;

318 
TMR1
 = 0;

320 
PR1
 = ( 
uöt16_t
 ) 
ulCom∑ªM©ch
;

323 
IPC0bôs
.
T1IP
 = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

326 
IFS0bôs
.
T1IF
 = 0;

329 
IEC0bôs
.
T1IE
 = 1;

332 
T1CONbôs
.
TCKPS0
 = 1;

333 
T1CONbôs
.
TCKPS1
 = 0;

336 
T1CONbôs
.
TON
 = 1;

337 
	}
}

340 
	$vP‹tE¡îCrôiˇl
( )

342 
	`p‹tDISABLE_INTERRUPTS
();

343 
uxCrôiˇlNe°ög
++;

344 
	}
}

347 
	$vP‹tExôCrôiˇl
( )

349 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

350 
uxCrôiˇlNe°ög
--;

351 if–
uxCrôiˇlNe°ög
 == 0 )

353 
	`p‹tENABLE_INTERRUPTS
();

355 
	}
}

358 
__©åibuã__
((
__öãºu±__
, 
auto_psv
)Ë
	$c⁄figTICK_INTERRUPT_HANDLER
( )

361 
IFS0bôs
.
T1IF
 = 0;

363 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

365 
	`p‹tYIELD
();

367 
	}
}

	@portable/MPLAB/PIC24_dsPIC/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

96 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

97 
uöt16_t
 
	tTickTy≥_t
;

98 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

100 
uöt32_t
 
	tTickTy≥_t
;

101 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

106 
	#p‹tBYTE_ALIGNMENT
 2

	)

107 
	#p‹tSTACK_GROWTH
 1

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

112 
	#p‹tINTERRUPT_BITS
 ( ( 
uöt16_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 << ( uöt16_àË5 )

	)

114 
	#p‹tDISABLE_INTERRUPTS
(Ë
SR
 |
p‹tINTERRUPT_BITS


	)

115 
	#p‹tENABLE_INTERRUPTS
(Ë
SR
 &~
p‹tINTERRUPT_BITS


	)

119 
vP‹tE¡îCrôiˇl
( );

120 
vP‹tExôCrôiˇl
( );

121 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

122 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

126 
vP‹tYõld
( );

127 
	#p‹tYIELD
(Ë
asm
 vﬁ©ûê–"CALL _vP‹tYõld \n" \

	)

132 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

133 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

137 #ifde‡
__DEBUG


138 
	#p‹tREMOVE_STATIC_QUALIFIER


	)

141 
	#p‹tNOP
(Ë
asm
 vﬁ©ûê–"NOP" )

	)

143 #ifde‡
__˝lu•lus


	@portable/MPLAB/PIC32MX/ISR_Support.h

66 
	~"FªeRTOSC⁄fig.h
"

68 
	#p‹tCONTEXT_SIZE
 132

	)

69 
	#p‹tEPC_STACK_LOCATION
 124

	)

70 
	#p‹tSTATUS_STACK_LOCATION
 128

	)

73 .
ma¸o
 
p‹tSAVE_CONTEXT


78 
mfc0
 
	gk0
, 
_CP0_CAUSE


79 
addiu
 
	g•
, sp, -
p‹tCONTEXT_SIZE


80 
mfc0
 
	gk1
, 
_CP0_STATUS


84 
sw
 
	gs6
, 44(
	g•
)

85 
sw
 
	gs5
, 40(
	g•
)

86 
sw
 
	gk1
, 
	$p‹tSTATUS_STACK_LOCATION
(
•
)

89 
§l
 
k0
, k0, 0xa

90 
ös
 
k1
, 
k0
, 10, 6

91 
ös
 
k1
, 
zîo
, 1, 4

94 
add
 
s5
, 
zîo
, 
•


97 
œ
 
k0
, 
uxI¡îru±Ne°ög


98 
lw
 
s6
, (
k0
)

102 
b√
 
s6
, 
zîo
, 1f

103 
n›


106 
œ
 
•
, 
xISRSèckT›


107 
lw
 
•
, (sp)

110 1: 
addiu
 
s6
, s6, 1

111 
sw
 
s6
, 0(
k0
)

114 
mfc0
 
s6
, 
_CP0_EPC


117 
mtc0
 
k1
, 
_CP0_STATUS


122 
sw
 
ø
, 120(
s5
)

123 
sw
 
s8
, 116(
s5
)

124 
sw
 
t9
, 112(
s5
)

125 
sw
 
t8
, 108(
s5
)

126 
sw
 
t7
, 104(
s5
)

127 
sw
 
t6
, 100(
s5
)

128 
sw
 
t5
, 96(
s5
)

129 
sw
 
t4
, 92(
s5
)

130 
sw
 
t3
, 88(
s5
)

131 
sw
 
t2
, 84(
s5
)

132 
sw
 
t1
, 80(
s5
)

133 
sw
 
t0
, 76(
s5
)

134 
sw
 
a3
, 72(
s5
)

135 
sw
 
a2
, 68(
s5
)

136 
sw
 
a1
, 64(
s5
)

137 
sw
 
a0
, 60(
s5
)

138 
sw
 
v1
, 56(
s5
)

139 
sw
 
v0
, 52(
s5
)

140 
sw
 
s6
, 
	$p‹tEPC_STACK_LOCATION
(
s5
)

141 
sw
 
$1
, 16(
s5
)

144 
mfhi
 
s6


145 
sw
 
s6
, 12(
s5
)

146 
mÊo
 
s6


147 
sw
 
s6
, 8(
s5
)

150 
œ
 
s6
, 
uxI¡îru±Ne°ög


151 
lw
 
s6
, (s6)

152 
addiu
 
s6
, s6, -1

153 
b√
 
s6
, 
zîo
, 1f

154 
n›


157 
œ
 
s6
, 
uxSavedTaskSèckPoöãr


158 
sw
 
s5
, (
s6
)

160 .
ídm


163 .
ma¸o
 
p‹tRESTORE_CONTEXT


167 
œ
 
s6
, 
uxI¡îru±Ne°ög


168 
lw
 
s6
, (s6)

169 
addiu
 
s6
, s6, -1

170 
b√
 
s6
, 
zîo
, 1f

171 
n›


172 
œ
 
s6
, 
uxSavedTaskSèckPoöãr


173 
lw
 
s5
, (
s6
)

176 1: 
lw
 
s6
, 8(
s5
)

177 
méo
 
s6


178 
lw
 
s6
, 12(
s5
)

179 
mthi
 
s6


180 
lw
 
$1
, 16(
s5
)

183 
lw
 
s6
, 44(
s5
)

184 
lw
 
v0
, 52(
s5
)

185 
lw
 
v1
, 56(
s5
)

186 
lw
 
a0
, 60(
s5
)

187 
lw
 
a1
, 64(
s5
)

188 
lw
 
a2
, 68(
s5
)

189 
lw
 
a3
, 72(
s5
)

190 
lw
 
t0
, 76(
s5
)

191 
lw
 
t1
, 80(
s5
)

192 
lw
 
t2
, 84(
s5
)

193 
lw
 
t3
, 88(
s5
)

194 
lw
 
t4
, 92(
s5
)

195 
lw
 
t5
, 96(
s5
)

196 
lw
 
t6
, 100(
s5
)

197 
lw
 
t7
, 104(
s5
)

198 
lw
 
t8
, 108(
s5
)

199 
lw
 
t9
, 112(
s5
)

200 
lw
 
s8
, 116(
s5
)

201 
lw
 
ø
, 120(
s5
)

204 
di


205 
ehb


208 
œ
 
k0
, 
uxI¡îru±Ne°ög


209 
lw
 
k1
, (
k0
)

210 
addiu
 
k1
, k1, -1

211 
sw
 
k1
, 0(
k0
)

213 
lw
 
k0
, 
	$p‹tSTATUS_STACK_LOCATION
(
s5
)

214 
lw
 
k1
, 
	$p‹tEPC_STACK_LOCATION
(
s5
)

218 
add
 
•
, 
zîo
, 
s5


219 
lw
 
s5
, 40(
•
)

220 
addiu
 
•
, sp, 
p‹tCONTEXT_SIZE


222 
mtc0
 
k0
, 
_CP0_STATUS


223 
mtc0
 
k1
, 
_CP0_EPC


224 
ehb


225 
îë


226 
n›


228 .
ídm


	@portable/MPLAB/PIC32MX/port.c

70 #i‚de‡
__XC


71 #îr‹ 
This
 
p‹t
 
is
 
desig√d
 
to
 
w‹k
 
wôh
 
XC32
. 
PÀa£
 
upd©e
 
your
 
C
 
compûî
 
vîsi⁄
.

75 
	~"FªeRTOS.h
"

76 
	~"èsk.h
"

79 
	#p‹tTIMER_PRESCALE
 8

	)

80 
	#p‹tPRESCALE_BITS
 1

	)

83 
	#p‹tIE_BIT
 ( 0x00000001 )

	)

84 
	#p‹tEXL_BIT
 ( 0x00000002 )

	)

87 
	#p‹tCORE_SW_0
 ( 0x00000100 )

	)

88 
	#p‹tCORE_SW_1
 ( 0x00000200 )

	)

92 
	#p‹tINITIAL_SR
 ( 
p‹tIE_BIT
 | 
p‹tEXL_BIT
 )

	)

111 #i‚de‡
c⁄figTICK_INTERRUPT_VECTOR


112 
	#c⁄figTICK_INTERRUPT_VECTOR
 
_TIMER_1_VECTOR


	)

113 
	#c⁄figCLEAR_TICK_TIMER_INTERRUPT
(Ë
IFS0CLR
 = 
_IFS0_T1IF_MASK


	)

115 #i‚de‡
c⁄figCLEAR_TICK_TIMER_INTERRUPT


116 #îr‹ 
If
 
c⁄figTICK_INTERRUPT_VECTOR
 
is
 
deföed
 
ö
 
≠∂iˇti⁄
 
code
 
thí
 
c⁄figCLEAR_TICK_TIMER_INTERRUPT
 
mu°
 
Æso
 
be
 defined inápplication code.

123 #ifde‡
c⁄figTASK_RETURN_ADDRESS


124 
	#p‹tTASK_RETURN_ADDRESS
 
c⁄figTASK_RETURN_ADDRESS


	)

126 
	#p‹tTASK_RETURN_ADDRESS
 
¥vTaskExôEº‹


	)

133 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 2 )

138 
	#p‹tISR_STACK_FILL_BYTE
 0xì

	)

140 c⁄° 
uöt8_t
 
	gucEx≥˘edSèckByãs
[] = {

141 
p‹tISR_STACK_FILL_BYTE
,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE, \

142 
p‹tISR_STACK_FILL_BYTE
,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE, \

143 
p‹tISR_STACK_FILL_BYTE
,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE, \

144 
p‹tISR_STACK_FILL_BYTE
,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE, \

145 
p‹tISR_STACK_FILL_BYTE
,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE }; \

147 
	#p‹tCHECK_ISR_STACK
(Ë
	`c⁄figASSERT
––
	`memcmp
––* ) 
xISRSèck
, ( * ) 
ucEx≥˘edSèckByãs
, –ucEx≥˘edSèckByã†ËË=0 ) )

	)

150 
	#p‹tCHECK_ISR_STACK
()

	)

162 
__©åibuã__
–(
öãºu±
(
ùl1
), 
	$ve˘‹
–
c⁄figTICK_INTERRUPT_VECTOR
 ))Ë
	`vP‹tTickI¡îru±H™dÀr
( );

170 
	`__©åibuã__
–(
	`öãºu±
(
ùl1
), 
	$ve˘‹
(
_CORE_SOFTWARE_0_VECTOR
))Ë
	`vP‹tYõldISR
( );

175 
	`¥vTaskExôEº‹
( );

181 vﬁ©ûê
UBa£Ty≥_t
 
uxI¡îru±Ne°ög
 = 0x01;

184 
UBa£Ty≥_t
 
uxSavedTaskSèckPoöãr
 = 0;

187 
SèckTy≥_t
 
xISRSèck
[ 
c⁄figISR_STACK_SIZE
 ] = { 0 
	}
};

191 c⁄° 
SèckTy≥_t
 * c⁄° 
	gxISRSèckT›
 = &–
xISRSèck
[ 
c⁄figISR_STACK_SIZE
 - 7 ] );

198 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

201 
pxT›OfSèck
--;

203 *
pxT›OfSèck
 = (
SèckTy≥_t
) 0xDEADBEEF;

204 
pxT›OfSèck
--;

206 *
pxT›OfSèck
 = (
SèckTy≥_t
) 0x12345678;

207 
pxT›OfSèck
--;

209 *
pxT›OfSèck
 = (
SèckTy≥_t
Ë
	`_CP0_GET_CAUSE
();

210 
pxT›OfSèck
--;

212 *
pxT›OfSèck
 = (
SèckTy≥_t
Ë
p‹tINITIAL_SR
;

213 
pxT›OfSèck
--;

215 *
pxT›OfSèck
 = (
SèckTy≥_t
Ë
pxCode
;

216 
pxT›OfSèck
--;

218 *
pxT›OfSèck
 = (
SèckTy≥_t
Ë
p‹tTASK_RETURN_ADDRESS
;

219 
pxT›OfSèck
 -= 15;

221 *
pxT›OfSèck
 = (
SèckTy≥_t
Ë
pvP¨amëîs
;

222 
pxT›OfSèck
 -= 15;

224  
pxT›OfSèck
;

225 
	}
}

228 
	$¥vTaskExôEº‹
( )

236 
	`c⁄figASSERT
–
uxSavedTaskSèckPoöãr
 == 0UL );

237 
	`p‹tDISABLE_INTERRUPTS
();

239 
	}
}

251 
__©åibuã__
(–
wók
 )Ë
	$vAµliˇti⁄SëupTickTimîI¡îru±
( )

253 c⁄° 
uöt32_t
 
ulCom∑ªM©ch
 = ( (
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tTIMER_PRESCALE
Ë/ 
c⁄figTICK_RATE_HZ
 ) - 1;

255 
T1CON
 = 0x0000;

256 
T1CONbôs
.
TCKPS
 = 
p‹tPRESCALE_BITS
;

257 
PR1
 = 
ulCom∑ªM©ch
;

258 
IPC1bôs
.
T1IP
 = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

261 
IFS0bôs
.
T1IF
 = 0;

264 
IEC0bôs
.
T1IE
 = 1;

267 
T1CONbôs
.
TON
 = 1;

268 
	}
}

271 
	$vP‹tEndScheduÀr
()

275 
	`c⁄figASSERT
–
uxI¡îru±Ne°ög
 == 1000UL );

276 
	}
}

279 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

281 
	`vP‹tSèπFú°Task
( );

282 *
pxCuºítTCB
;

284 #i‡–
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 2 )

287 
	`mem£t
––* ) 
xISRSèck
, 
p‹tISR_STACK_FILL_BYTE
, ( xISRStack ) );

292 
IFS0CLR
 = 
_IFS0_CS0IF_MASK
;

295 
IPC0CLR
 = 
_IPC0_CS0IP_MASK
;

296 
IPC0SET
 = ( 
c⁄figKERNEL_INTERRUPT_PRIORITY
 << 
_IPC0_CS0IP_POSITION
 );

299 
IEC0CLR
 = 
_IEC0_CS0IE_MASK
;

300 
IEC0SET
 = 1 << 
_IEC0_CS0IE_POSITION
;

304 
	`vAµliˇti⁄SëupTickTimîI¡îru±
();

308 
uxSavedTaskSèckPoöãr
 = *–
UBa£Ty≥_t
 * ) 
pxCuºítTCB
;

309 
	`vP‹tSèπFú°Task
();

315 
	`¥vTaskExôEº‹
();

317  
pdFALSE
;

318 
	}
}

321 
	$vP‹tIn¸emítTick
( )

323 
UBa£Ty≥_t
 
uxSavedSètus
;

325 
uxSavedSètus
 = 
	`uxP‹tSëI¡îru±MaskFromISR
();

327 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

330 
	`_CP0_BIS_CAUSE
–
p‹tCORE_SW_0
 );

333 
	`vP‹tCÀ¨I¡îru±MaskFromISR
–
uxSavedSètus
 );

336 
	`p‹tCHECK_ISR_STACK
();

339 
	`c⁄figCLEAR_TICK_TIMER_INTERRUPT
();

340 
	}
}

343 
UBa£Ty≥_t
 
	$uxP‹tSëI¡îru±MaskFromISR
( )

345 
UBa£Ty≥_t
 
uxSavedSètusRegi°î
;

347 
	`__buûtö_dißbÀ_öãºu±s
();

348 
uxSavedSètusRegi°î
 = 
	`_CP0_GET_STATUS
() | 0x01;

355 
	`_CP0_SET_STATUS
–––
uxSavedSètusRegi°î
 & ( ~
p‹tALL_IPL_BITS
 ) ) ) | ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 << 
p‹tIPL_SHIFT
 ) );

357  
uxSavedSètusRegi°î
;

358 
	}
}

361 
	$vP‹tCÀ¨I¡îru±MaskFromISR
–
UBa£Ty≥_t
 
uxSavedSètusRegi°î
 )

363 
	`_CP0_SET_STATUS
–
uxSavedSètusRegi°î
 );

364 
	}
}

	@portable/MPLAB/PIC32MX/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

70 
	~<xc.h
>

72 #ifde‡
__˝lu•lus


87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

93 
	#p‹tBASE_TYPE
 

	)

95 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

96 
	tBa£Ty≥_t
;

97 
	tUBa£Ty≥_t
;

99 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

100 
uöt16_t
 
	tTickTy≥_t
;

101 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

103 
uöt32_t
 
	tTickTy≥_t
;

104 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

110 
	#p‹tSTACK_GROWTH
 -1

	)

111 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

115 
	#p‹tIPL_SHIFT
 ( 10UL )

	)

116 
	#p‹tALL_IPL_BITS
 ( 0x3fUL << 
p‹tIPL_SHIFT
 )

	)

117 
	#p‹tSW0_BIT
 ( 0x01 << 8 )

	)

127 #ifde‡
c⁄figASSERT


128 
	#p‹tDISABLE_INTERRUPTS
(Ë\

	)

130 
uöt32_t
 
	gulSètus
; \

133 
	gulSètus
 = 
_CP0_GET_STATUS
(); \

136 if–––
	gulSètus
 & 
	gp‹tALL_IPL_BITS
 ) >> 
	gp‹tIPL_SHIFT
 ) < 
	gc⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) \

138 
	gulSètus
 &~
p‹tALL_IPL_BITS
; \

139 
_CP0_SET_STATUS
––
ulSètus
 | ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 << 
p‹tIPL_SHIFT
 ) ) ); \

143 
	#p‹tDISABLE_INTERRUPTS
(Ë\

	)

145 
uöt32_t
 
	gulSètus
; \

148 
	gulSètus
 = 
_CP0_GET_STATUS
(); \

149 
	gulSètus
 &~
p‹tALL_IPL_BITS
; \

150 
_CP0_SET_STATUS
––
ulSètus
 | ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 << 
p‹tIPL_SHIFT
 ) ) ); \

154 
	#p‹tENABLE_INTERRUPTS
(Ë\

	)

156 
uöt32_t
 
	gulSètus
; \

159 
	gulSètus
 = 
_CP0_GET_STATUS
(); \

160 
	gulSètus
 &~
p‹tALL_IPL_BITS
; \

161 
_CP0_SET_STATUS
–
ulSètus
 ); \

165 
vTaskE¡îCrôiˇl
( );

166 
vTaskExôCrôiˇl
( );

167 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

168 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

169 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

171 
UBa£Ty≥_t
 
uxP‹tSëI¡îru±MaskFromISR
();

172 
vP‹tCÀ¨I¡îru±MaskFromISR
–
UBa£Ty≥_t
 );

173 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`uxP‹tSëI¡îru±MaskFromISR
()

	)

174 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusRegi°î
 ) 
	`vP‹tCÀ¨I¡îru±MaskFromISR
–uxSavedSètusRegi°î )

	)

176 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

179 #if–
c⁄figMAX_PRIORITIES
 > 32 )

180 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

184 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

185 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

189 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`_˛z
––uxRódyPri‹ôõ†ËË)

	)

197 
	#p‹tYIELD
(Ë\

	)

199 
uöt32_t
 
	gulCau£
; \

202 
	gulCau£
 = 
_CP0_GET_CAUSE
(); \

203 
	gulCau£
 |
p‹tSW0_BIT
; \

204 
_CP0_SET_CAUSE
–
ulCau£
 ); \

207 
	#p‹tCURRENT_INTERRUPT_PRIORITY
 ( ( 
	`_CP0_GET_STATUS
(Ë& 
p‹tALL_IPL_BITS
 ) >> 
p‹tIPL_SHIFT
 )

	)

208 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`c⁄figASSERT
–
p‹tCURRENT_INTERRUPT_PRIORITY
 <
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

210 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûê–"n›" )

	)

215 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†Ë
	`__©åibuã__
((
n‹ëu∫
))

	)

216 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

219 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) \

	)

221 
p‹tYIELD
(); \

225 #ifde‡
__DEBUG


226 
	#p‹tREMOVE_STATIC_QUALIFIER


	)

229 #ifde‡
__˝lu•lus


	@portable/MPLAB/PIC32MZ/ISR_Support.h

66 
	~"FªeRTOSC⁄fig.h
"

68 
	#p‹tCONTEXT_SIZE
 160

	)

69 
	#p‹tEPC_STACK_LOCATION
 152

	)

70 
	#p‹tSTATUS_STACK_LOCATION
 156

	)

73 .
ma¸o
 
p‹tSAVE_CONTEXT


78 
mfc0
 
	gk0
, 
_CP0_CAUSE


79 
addiu
 
	g•
, sp, -
p‹tCONTEXT_SIZE


80 
mfc0
 
	gk1
, 
_CP0_STATUS


84 
sw
 
	gs6
, 44(
	g•
)

85 
sw
 
	gs5
, 40(
	g•
)

86 
sw
 
	gk1
, 
	$p‹tSTATUS_STACK_LOCATION
(
•
)

89 
§l
 
k0
, k0, 0xa

90 
ös
 
k1
, 
k0
, 10, 7

91 
§l
 
k0
, k0, 0x7

92 
ös
 
k1
, 
k0
, 18, 1

93 
ös
 
k1
, 
zîo
, 1, 4

96 
add
 
s5
, 
zîo
, 
•


99 
œ
 
k0
, 
uxI¡îru±Ne°ög


100 
lw
 
s6
, (
k0
)

104 
b√
 
s6
, 
zîo
, 1f

105 
n›


108 
œ
 
•
, 
xISRSèckT›


109 
lw
 
•
, (sp)

112 1: 
addiu
 
s6
, s6, 1

113 
sw
 
s6
, 0(
k0
)

116 
mfc0
 
s6
, 
_CP0_EPC


119 
mtc0
 
k1
, 
_CP0_STATUS


124 
sw
 
ø
, 120(
s5
)

125 
sw
 
s8
, 116(
s5
)

126 
sw
 
t9
, 112(
s5
)

127 
sw
 
t8
, 108(
s5
)

128 
sw
 
t7
, 104(
s5
)

129 
sw
 
t6
, 100(
s5
)

130 
sw
 
t5
, 96(
s5
)

131 
sw
 
t4
, 92(
s5
)

132 
sw
 
t3
, 88(
s5
)

133 
sw
 
t2
, 84(
s5
)

134 
sw
 
t1
, 80(
s5
)

135 
sw
 
t0
, 76(
s5
)

136 
sw
 
a3
, 72(
s5
)

137 
sw
 
a2
, 68(
s5
)

138 
sw
 
a1
, 64(
s5
)

139 
sw
 
a0
, 60(
s5
)

140 
sw
 
v1
, 56(
s5
)

141 
sw
 
v0
, 52(
s5
)

142 
sw
 
s6
, 
	$p‹tEPC_STACK_LOCATION
(
s5
)

143 
sw
 
$1
, 16(
s5
)

147 
mfhi
 
s6
, 
$ac1


148 
sw
 
s6
, 128(
s5
)

149 
mÊo
 
s6
, 
$ac1


150 
sw
 
s6
, 124(
s5
)

152 
mfhi
 
s6
, 
$ac2


153 
sw
 
s6
, 136(
s5
)

154 
mÊo
 
s6
, 
$ac2


155 
sw
 
s6
, 132(
s5
)

157 
mfhi
 
s6
, 
$ac3


158 
sw
 
s6
, 144(
s5
)

159 
mÊo
 
s6
, 
$ac3


160 
sw
 
s6
, 140(
s5
)

163 
rdd•
 
s6


164 
sw
 
s6
, 148(
s5
)

167 
mfhi
 
s6
, 
$ac0


168 
sw
 
s6
, 12(
s5
)

169 
mÊo
 
s6
, 
$ac0


170 
sw
 
s6
, 8(
s5
)

173 
œ
 
s6
, 
uxI¡îru±Ne°ög


174 
lw
 
s6
, (s6)

175 
addiu
 
s6
, s6, -1

176 
b√
 
s6
, 
zîo
, 1f

177 
n›


180 
œ
 
s6
, 
uxSavedTaskSèckPoöãr


181 
sw
 
s5
, (
s6
)

183 .
ídm


186 .
ma¸o
 
p‹tRESTORE_CONTEXT


190 
œ
 
s6
, 
uxI¡îru±Ne°ög


191 
lw
 
s6
, (s6)

192 
addiu
 
s6
, s6, -1

193 
b√
 
s6
, 
zîo
, 1f

194 
n›


195 
œ
 
s6
, 
uxSavedTaskSèckPoöãr


196 
lw
 
s5
, (
s6
)

199 1: 
lw
 
s6
, 128(
s5
)

200 
mthi
 
s6
, 
$ac1


201 
lw
 
s6
, 124(
s5
)

202 
méo
 
s6
, 
$ac1


204 
lw
 
s6
, 136(
s5
)

205 
mthi
 
s6
, 
$ac2


206 
lw
 
s6
, 132(
s5
)

207 
méo
 
s6
, 
$ac2


209 
lw
 
s6
, 144(
s5
)

210 
mthi
 
s6
, 
$ac3


211 
lw
 
s6
, 140(
s5
)

212 
méo
 
s6
, 
$ac3


215 
lw
 
s6
, 148(
s5
)

216 
wrd•
 
s6


218 
lw
 
s6
, 8(
s5
)

219 
méo
 
s6
, 
$ac0


220 
lw
 
s6
, 12(
s5
)

221 
mthi
 
s6
, 
$ac0


222 
lw
 
$1
, 16(
s5
)

226 
lw
 
s6
, 44(
s5
)

227 
lw
 
v0
, 52(
s5
)

228 
lw
 
v1
, 56(
s5
)

229 
lw
 
a0
, 60(
s5
)

230 
lw
 
a1
, 64(
s5
)

231 
lw
 
a2
, 68(
s5
)

232 
lw
 
a3
, 72(
s5
)

233 
lw
 
t0
, 76(
s5
)

234 
lw
 
t1
, 80(
s5
)

235 
lw
 
t2
, 84(
s5
)

236 
lw
 
t3
, 88(
s5
)

237 
lw
 
t4
, 92(
s5
)

238 
lw
 
t5
, 96(
s5
)

239 
lw
 
t6
, 100(
s5
)

240 
lw
 
t7
, 104(
s5
)

241 
lw
 
t8
, 108(
s5
)

242 
lw
 
t9
, 112(
s5
)

243 
lw
 
s8
, 116(
s5
)

244 
lw
 
ø
, 120(
s5
)

247 
di


248 
ehb


251 
œ
 
k0
, 
uxI¡îru±Ne°ög


252 
lw
 
k1
, (
k0
)

253 
addiu
 
k1
, k1, -1

254 
sw
 
k1
, 0(
k0
)

256 
lw
 
k0
, 
	$p‹tSTATUS_STACK_LOCATION
(
s5
)

257 
lw
 
k1
, 
	$p‹tEPC_STACK_LOCATION
(
s5
)

261 
add
 
•
, 
zîo
, 
s5


262 
lw
 
s5
, 40(
•
)

263 
addiu
 
•
, sp, 
p‹tCONTEXT_SIZE


265 
mtc0
 
k0
, 
_CP0_STATUS


266 
mtc0
 
k1
, 
_CP0_EPC


267 
ehb


268 
îë


269 
n›


271 .
ídm


	@portable/MPLAB/PIC32MZ/port.c

70 
	~<xc.h
>

73 
	~"FªeRTOS.h
"

74 
	~"èsk.h
"

76 #i‡!
deföed
(
__PIC32MZ__
)

77 #îr‹ 
This
 
p‹t
 
is
 
desig√d
 
to
 
w‹k
 
wôh
 
XC32
 
⁄
 
PIC32MZ
 
MCUs
. 
PÀa£
 
upd©e
 
your
 
C
 
compûî
 
vîsi⁄
 
‹
 
£âögs
.

80 #if––
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 >= 0x7 ) || ( configMAX_SYSCALL_INTERRUPT_PRIORITY == 0 ) )

81 #îr‹ 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 
mu°
 
be
 
Àss
 
th™
 7 
™d
 
gª©î
Åhan 0

85 
	#p‹tTIMER_PRESCALE
 8

	)

86 
	#p‹tPRESCALE_BITS
 1

	)

89 
	#p‹tIE_BIT
 ( 0x00000001 )

	)

90 
	#p‹tEXL_BIT
 ( 0x00000002 )

	)

91 
	#p‹tMX_BIT
 ( 0x01000000 )

	)

94 
	#p‹tCORE_SW_0
 ( 0x00000100 )

	)

95 
	#p‹tCORE_SW_1
 ( 0x00000200 )

	)

99 
	#p‹tINITIAL_SR
 ( 
p‹tIE_BIT
 | 
p‹tEXL_BIT
 | 
p‹tMX_BIT
 )

	)

118 #i‚de‡
c⁄figTICK_INTERRUPT_VECTOR


119 
	#c⁄figTICK_INTERRUPT_VECTOR
 
_TIMER_1_VECTOR


	)

120 
	#c⁄figCLEAR_TICK_TIMER_INTERRUPT
(Ë
IFS0CLR
 = 
_IFS0_T1IF_MASK


	)

122 #i‚de‡
c⁄figCLEAR_TICK_TIMER_INTERRUPT


123 #îr‹ 
If
 
c⁄figTICK_INTERRUPT_VECTOR
 
is
 
deföed
 
ö
 
≠∂iˇti⁄
 
code
 
thí
 
c⁄figCLEAR_TICK_TIMER_INTERRUPT
 
mu°
 
Æso
 
be
 defined inápplication code.

130 #ifde‡
c⁄figTASK_RETURN_ADDRESS


131 
	#p‹tTASK_RETURN_ADDRESS
 
c⁄figTASK_RETURN_ADDRESS


	)

133 
	#p‹tTASK_RETURN_ADDRESS
 
¥vTaskExôEº‹


	)

140 #if–
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 2 )

145 
	#p‹tISR_STACK_FILL_BYTE
 0xì

	)

147 c⁄° 
uöt8_t
 
	gucEx≥˘edSèckByãs
[] = {

148 
p‹tISR_STACK_FILL_BYTE
,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE, \

149 
p‹tISR_STACK_FILL_BYTE
,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE, \

150 
p‹tISR_STACK_FILL_BYTE
,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE, \

151 
p‹tISR_STACK_FILL_BYTE
,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE, \

152 
p‹tISR_STACK_FILL_BYTE
,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE,ÖortISR_STACK_FILL_BYTE }; \

154 
	#p‹tCHECK_ISR_STACK
(Ë
	`c⁄figASSERT
––
	`memcmp
––* ) 
xISRSèck
, ( * ) 
ucEx≥˘edSèckByãs
, –ucEx≥˘edSèckByã†ËË=0 ) )

	)

157 
	#p‹tCHECK_ISR_STACK
()

	)

165 
¥vTaskExôEº‹
( );

171 vﬁ©ûê
UBa£Ty≥_t
 
	guxI¡îru±Ne°ög
 = 0x01;

174 
UBa£Ty≥_t
 
	guxSavedTaskSèckPoöãr
 = 0;

177 
SèckTy≥_t
 
	gxISRSèck
[ 
c⁄figISR_STACK_SIZE
 ] = { 0 };

181 c⁄° 
SèckTy≥_t
 * c⁄° 
	gxISRSèckT›
 = &–
xISRSèck
[ 
c⁄figISR_STACK_SIZE
 - 7 ] );

188 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

191 
pxT›OfSèck
--;

193 *
pxT›OfSèck
 = (
SèckTy≥_t
) 0xDEADBEEF;

194 
pxT›OfSèck
--;

196 *
pxT›OfSèck
 = (
SèckTy≥_t
) 0x12345678;

197 
pxT›OfSèck
--;

199 *
pxT›OfSèck
 = (
SèckTy≥_t
Ë
	`_CP0_GET_CAUSE
();

200 
pxT›OfSèck
--;

202 *
pxT›OfSèck
 = (
SèckTy≥_t
Ë
p‹tINITIAL_SR
;

203 
pxT›OfSèck
--;

205 *
pxT›OfSèck
 = (
SèckTy≥_t
Ë
pxCode
;

206 
pxT›OfSèck
 -= 7;

208 *
pxT›OfSèck
 = (
SèckTy≥_t
) 0x00000000;

209 
pxT›OfSèck
--;

211 *
pxT›OfSèck
 = (
SèckTy≥_t
Ë
p‹tTASK_RETURN_ADDRESS
;

212 
pxT›OfSèck
 -= 15;

214 *
pxT›OfSèck
 = (
SèckTy≥_t
Ë
pvP¨amëîs
;

215 
pxT›OfSèck
 -= 15;

217  
pxT›OfSèck
;

218 
	}
}

221 
	$¥vTaskExôEº‹
( )

229 
	`c⁄figASSERT
–
uxSavedTaskSèckPoöãr
 == 0UL );

230 
	`p‹tDISABLE_INTERRUPTS
();

232 
	}
}

244 
__©åibuã__
(–
wók
 )Ë
	$vAµliˇti⁄SëupTickTimîI¡îru±
( )

246 c⁄° 
uöt32_t
 
ulCom∑ªM©ch
 = ( (
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tTIMER_PRESCALE
Ë/ 
c⁄figTICK_RATE_HZ
 ) - 1;

248 
T1CON
 = 0x0000;

249 
T1CONbôs
.
TCKPS
 = 
p‹tPRESCALE_BITS
;

250 
PR1
 = 
ulCom∑ªM©ch
;

251 
IPC1bôs
.
T1IP
 = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

254 
IFS0bôs
.
T1IF
 = 0;

257 
IEC0bôs
.
T1IE
 = 1;

260 
T1CONbôs
.
TON
 = 1;

261 
	}
}

264 
	$vP‹tEndScheduÀr
()

268 
	`c⁄figASSERT
–
uxI¡îru±Ne°ög
 == 1000UL );

269 
	}
}

272 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

274 
	`vP‹tSèπFú°Task
( );

275 *
pxCuºítTCB
;

277 #i‡–
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 2 )

280 
	`mem£t
––* ) 
xISRSèck
, 
p‹tISR_STACK_FILL_BYTE
, ( xISRStack ) );

285 
IFS0CLR
 = 
_IFS0_CS0IF_MASK
;

288 
IPC0CLR
 = 
_IPC0_CS0IP_MASK
;

289 
IPC0SET
 = ( 
c⁄figKERNEL_INTERRUPT_PRIORITY
 << 
_IPC0_CS0IP_POSITION
 );

292 
IEC0CLR
 = 
_IEC0_CS0IE_MASK
;

293 
IEC0SET
 = 1 << 
_IEC0_CS0IE_POSITION
;

297 
	`vAµliˇti⁄SëupTickTimîI¡îru±
();

301 
uxSavedTaskSèckPoöãr
 = *–
UBa£Ty≥_t
 * ) 
pxCuºítTCB
;

302 
	`vP‹tSèπFú°Task
();

308 
	`¥vTaskExôEº‹
();

310  
pdFALSE
;

311 
	}
}

314 
	$vP‹tIn¸emítTick
( )

316 
UBa£Ty≥_t
 
uxSavedSètus
;

318 
uxSavedSètus
 = 
	`uxP‹tSëI¡îru±MaskFromISR
();

320 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

323 
	`_CP0_BIS_CAUSE
–
p‹tCORE_SW_0
 );

326 
	`vP‹tCÀ¨I¡îru±MaskFromISR
–
uxSavedSètus
 );

329 
	`p‹tCHECK_ISR_STACK
();

332 
	`c⁄figCLEAR_TICK_TIMER_INTERRUPT
();

333 
	}
}

336 
UBa£Ty≥_t
 
	$uxP‹tSëI¡îru±MaskFromISR
( )

338 
UBa£Ty≥_t
 
uxSavedSètusRegi°î
;

340 
	`__buûtö_dißbÀ_öãºu±s
();

341 
uxSavedSètusRegi°î
 = 
	`_CP0_GET_STATUS
() | 0x01;

348 
	`_CP0_SET_STATUS
–––
uxSavedSètusRegi°î
 & ( ~
p‹tALL_IPL_BITS
 ) ) ) | ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 << 
p‹tIPL_SHIFT
 ) );

350  
uxSavedSètusRegi°î
;

351 
	}
}

354 
	$vP‹tCÀ¨I¡îru±MaskFromISR
–
UBa£Ty≥_t
 
uxSavedSètusRegi°î
 )

356 
	`_CP0_SET_STATUS
–
uxSavedSètusRegi°î
 );

357 
	}
}

	@portable/MPLAB/PIC32MZ/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

70 
	~<xc.h
>

72 #ifde‡
__˝lu•lus


87 
	#p‹tCHAR
 

	)

88 
	#p‹tFLOAT
 

	)

89 
	#p‹tDOUBLE
 

	)

90 
	#p‹tLONG
 

	)

91 
	#p‹tSHORT
 

	)

92 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

93 
	#p‹tBASE_TYPE
 

	)

95 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

96 
	tBa£Ty≥_t
;

97 
	tUBa£Ty≥_t
;

99 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

100 
uöt16_t
 
	tTickTy≥_t
;

101 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

103 
uöt32_t
 
	tTickTy≥_t
;

104 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

110 
	#p‹tSTACK_GROWTH
 -1

	)

111 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

115 
	#p‹tIPL_SHIFT
 ( 10UL )

	)

118 
	#p‹tALL_IPL_BITS
 ( 0x7FUL << 
p‹tIPL_SHIFT
 )

	)

119 
	#p‹tSW0_BIT
 ( 0x01 << 8 )

	)

129 #ifde‡
c⁄figASSERT


130 
	#p‹tDISABLE_INTERRUPTS
(Ë\

	)

132 
uöt32_t
 
	gulSètus
; \

135 
	gulSètus
 = 
_CP0_GET_STATUS
(); \

138 if–––
	gulSètus
 & 
	gp‹tALL_IPL_BITS
 ) >> 
	gp‹tIPL_SHIFT
 ) < 
	gc⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) \

140 
	gulSètus
 &~
p‹tALL_IPL_BITS
; \

141 
_CP0_SET_STATUS
––
ulSètus
 | ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 << 
p‹tIPL_SHIFT
 ) ) ); \

145 
	#p‹tDISABLE_INTERRUPTS
(Ë\

	)

147 
uöt32_t
 
	gulSètus
; \

150 
	gulSètus
 = 
_CP0_GET_STATUS
(); \

151 
	gulSètus
 &~
p‹tALL_IPL_BITS
; \

152 
_CP0_SET_STATUS
––
ulSètus
 | ( 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 << 
p‹tIPL_SHIFT
 ) ) ); \

156 
	#p‹tENABLE_INTERRUPTS
(Ë\

	)

158 
uöt32_t
 
	gulSètus
; \

161 
	gulSètus
 = 
_CP0_GET_STATUS
(); \

162 
	gulSètus
 &~
p‹tALL_IPL_BITS
; \

163 
_CP0_SET_STATUS
–
ulSètus
 ); \

167 
vTaskE¡îCrôiˇl
( );

168 
vTaskExôCrôiˇl
( );

169 
	#p‹tCRITICAL_NESTING_IN_TCB
 1

	)

170 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

171 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

173 
UBa£Ty≥_t
 
uxP‹tSëI¡îru±MaskFromISR
();

174 
vP‹tCÀ¨I¡îru±MaskFromISR
–
UBa£Ty≥_t
 );

175 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`uxP‹tSëI¡îru±MaskFromISR
()

	)

176 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedSètusRegi°î
 ) 
	`vP‹tCÀ¨I¡îru±MaskFromISR
–uxSavedSètusRegi°î )

	)

178 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

181 #if–
c⁄figMAX_PRIORITIES
 > 32 )

182 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

186 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

187 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

191 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`_˛z
––uxRódyPri‹ôõ†ËË)

	)

199 
	#p‹tYIELD
(Ë\

	)

201 
uöt32_t
 
	gulCau£
; \

204 
	gulCau£
 = 
_CP0_GET_CAUSE
(); \

205 
	gulCau£
 |
p‹tSW0_BIT
; \

206 
_CP0_SET_CAUSE
–
ulCau£
 ); \

209 
	#p‹tCURRENT_INTERRUPT_PRIORITY
 ( ( 
	`_CP0_GET_STATUS
(Ë& 
p‹tALL_IPL_BITS
 ) >> 
p‹tIPL_SHIFT
 )

	)

210 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`c⁄figASSERT
–
p‹tCURRENT_INTERRUPT_PRIORITY
 <
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

212 
	#p‹tNOP
(Ë
__asm
 vﬁ©ûê–"n›" )

	)

217 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†Ë
	`__©åibuã__
((
n‹ëu∫
))

	)

218 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

221 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) \

	)

223 
p‹tYIELD
(); \

227 #ifde‡
__DEBUG


228 
	#p‹tREMOVE_STATIC_QUALIFIER


	)

231 #ifde‡
__˝lu•lus


	@portable/MSVC-MingW/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

69 
	~<°dio.h
>

71 #ifde‡
__GNUC__


72 
	~"mmsy°em.h
"

74 #¥agm®
commít
(
lib
, "winmm.lib")

77 
	#p‹tMAX_INTERRUPTS
 ( ( 
uöt32_t
 ) –uöt32_àË* 8UL )

	)

78 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

86 
DWORD
 
WINAPI
 
¥vSimuœãdPîùhîÆTimî
–
LPVOID
 
ÕP¨amëî
 );

92 
¥vPro˚ssSimuœãdI¡îru±s
( );

98 
uöt32_t
 
¥vPro˚ssYõldI¡îru±
( );

99 
uöt32_t
 
¥vPro˚ssTickI¡îru±
( );

105 
BOOL
 
WINAPI
 
¥vEndPro˚ss
–
DWORD
 
dwCålTy≥
 );

117 *
	mpvThªad
;

119 } 
	txThªadSèã
;

123 vﬁ©ûê
uöt32_t
 
	gulPídögI¡îru±s
 = 0UL;

128 *
	gpvI¡îru±Evít
 = 
NULL
;

132 *
	gpvI¡îru±EvítMuãx
 = 
NULL
;

141 
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

146 
	$uöt32_t
 (*
ulI§H™dÀr
[ 
p‹tMAX_INTERRUPTS
 ])–Ë{ 0 
	}
};

149 *
pxCuºítTCB
;

152 
Ba£Ty≥_t
 
	gxP‹tRu¬ög
 = 
pdFALSE
;

156 
DWORD
 
WINAPI
 
	$¥vSimuœãdPîùhîÆTimî
–
LPVOID
 
ÕP¨amëî
 )

158 
TickTy≥_t
 
xMöimumWödowsBlockTime
;

159 
TIMECAPS
 
xTimeC≠s
;

162 if–
	`timeGëDevC≠s
–&
xTimeC≠s
, –xTimeC≠†ËË=
MMSYSERR_NOERROR
 )

164 
xMöimumWödowsBlockTime
 = ( 
TickTy≥_t
 ) 
xTimeC≠s
.
wPîiodMö
;

165 
	`timeBegöPîiod
–
xTimeC≠s
.
wPîiodMö
 );

169 
	`SëC⁄sﬁeCålH™dÀr
–
¥vEndPro˚ss
, 
TRUE
 );

173 
xMöimumWödowsBlockTime
 = ( 
TickTy≥_t
 ) 20;

177 –Ë
ÕP¨amëî
;

187 if–
p‹tTICK_PERIOD_MS
 < 
xMöimumWödowsBlockTime
 )

189 
	`SÀï
–
xMöimumWödowsBlockTime
 );

193 
	`SÀï
–
p‹tTICK_PERIOD_MS
 );

196 
	`c⁄figASSERT
–
xP‹tRu¬ög
 );

198 
	`WaôF‹SögÀObje˘
–
pvI¡îru±EvítMuãx
, 
INFINITE
 );

201 
ulPídögI¡îru±s
 |–1 << 
p‹tINTERRUPT_TICK
 );

205 if–
ulCrôiˇlNe°ög
 == 0 )

207 
	`SëEvít
–
pvI¡îru±Evít
 );

212 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

215 #ifde‡
__GNUC__


220 
	}
}

223 
BOOL
 
WINAPI
 
	$¥vEndPro˚ss
–
DWORD
 
dwCålTy≥
 )

225 
TIMECAPS
 
xTimeC≠s
;

227 –Ë
dwCålTy≥
;

229 if–
	`timeGëDevC≠s
–&
xTimeC≠s
, –xTimeC≠†ËË=
MMSYSERR_NOERROR
 )

233 
	`timeEndPîiod
–
xTimeC≠s
.
wPîiodMö
 );

236  
pdPASS
;

237 
	}
}

240 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

242 
xThªadSèã
 *
pxThªadSèã
 = 
NULL
;

243 
öt8_t
 *
pcT›OfSèck
 = ( i¡8_à* ) 
pxT›OfSèck
;

251 
pxThªadSèã
 = ( 
xThªadSèã
 * ) ( 
pcT›OfSèck
 - ( xThreadState ) );

254 
pxThªadSèã
->
pvThªad
 = 
	`Cª©eThªad
–
NULL
, 0, ( 
LPTHREAD_START_ROUTINE
 ) 
pxCode
, 
pvP¨amëîs
, 
CREATE_SUSPENDED
, NULL );

255 
	`c⁄figASSERT
–
pxThªadSèã
->
pvThªad
 );

256 
	`SëThªadAfföôyMask
–
pxThªadSèã
->
pvThªad
, 0x01 );

257 
	`SëThªadPri‹ôyBoo°
–
pxThªadSèã
->
pvThªad
, 
TRUE
 );

258 
	`SëThªadPri‹ôy
–
pxThªadSèã
->
pvThªad
, 
THREAD_PRIORITY_IDLE
 );

260  ( 
SèckTy≥_t
 * ) 
pxThªadSèã
;

261 
	}
}

264 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

266 *
pvH™dÀ
;

267 
öt32_t
 
lSuc˚ss
 = 
pdPASS
;

268 
xThªadSèã
 *
pxThªadSèã
;

271 
	`vP‹tSëI¡îru±H™dÀr
–
p‹tINTERRUPT_YIELD
, 
¥vPro˚ssYõldI¡îru±
 );

272 
	`vP‹tSëI¡îru±H™dÀr
–
p‹tINTERRUPT_TICK
, 
¥vPro˚ssTickI¡îru±
 );

276 
pvI¡îru±EvítMuãx
 = 
	`Cª©eMuãx
–
NULL
, 
FALSE
, NULL );

277 
pvI¡îru±Evít
 = 
	`Cª©eEvít
–
NULL
, 
FALSE
, FALSE, NULL );

279 if––
pvI¡îru±EvítMuãx
 =
NULL
 ) || ( 
pvI¡îru±Evít
 == NULL ) )

281 
lSuc˚ss
 = 
pdFAIL
;

287 
pvH™dÀ
 = 
	`GëCuºítThªad
();

288 if–
pvH™dÀ
 =
NULL
 )

290 
lSuc˚ss
 = 
pdFAIL
;

293 if–
lSuc˚ss
 =
pdPASS
 )

295 if–
	`SëThªadPri‹ôy
–
pvH™dÀ
, 
THREAD_PRIORITY_NORMAL
 ) == 0 )

297 
lSuc˚ss
 = 
pdFAIL
;

299 
	`SëThªadPri‹ôyBoo°
–
pvH™dÀ
, 
TRUE
 );

300 
	`SëThªadAfföôyMask
–
pvH™dÀ
, 0x01 );

303 if–
lSuc˚ss
 =
pdPASS
 )

309 
pvH™dÀ
 = 
	`Cª©eThªad
–
NULL
, 0, 
¥vSimuœãdPîùhîÆTimî
, NULL, 0, NULL );

310 if–
pvH™dÀ
 !
NULL
 )

312 
	`SëThªadPri‹ôy
–
pvH™dÀ
, 
THREAD_PRIORITY_BELOW_NORMAL
 );

313 
	`SëThªadPri‹ôyBoo°
–
pvH™dÀ
, 
TRUE
 );

314 
	`SëThªadAfföôyMask
–
pvH™dÀ
, 0x01 );

319 
pxThªadSèã
 = ( 
xThªadSèã
 * ) *––
uöt32_t
 * ) 
pxCuºítTCB
 );

320 
ulCrôiˇlNe°ög
 = 
p‹tNO_CRITICAL_NESTING
;

325 
	`ResumeThªad
–
pxThªadSèã
->
pvThªad
 );

329 
	`¥vPro˚ssSimuœãdI¡îru±s
();

335 
	}
}

338 
uöt32_t
 
	$¥vPro˚ssYõldI¡îru±
( )

340  
pdTRUE
;

341 
	}
}

344 
uöt32_t
 
	$¥vPro˚ssTickI¡îru±
( )

346 
uöt32_t
 
ulSwôchRequúed
;

349 
	`c⁄figASSERT
–
xP‹tRu¬ög
 );

350 
ulSwôchRequúed
 = ( 
uöt32_t
 ) 
	`xTaskIn¸emítTick
();

352  
ulSwôchRequúed
;

353 
	}
}

356 
	$¥vPro˚ssSimuœãdI¡îru±s
( )

358 
uöt32_t
 
ulSwôchRequúed
, 
i
;

359 
xThªadSèã
 *
pxThªadSèã
;

360 *
pvObje˘Li°
[ 2 ];

365 
pvObje˘Li°
[ 0 ] = 
pvI¡îru±EvítMuãx
;

366 
pvObje˘Li°
[ 1 ] = 
pvI¡îru±Evít
;

370 
ulPídögI¡îru±s
 |–1 << 
p‹tINTERRUPT_TICK
 );

371 
	`SëEvít
–
pvI¡îru±Evít
 );

373 
xP‹tRu¬ög
 = 
pdTRUE
;

377 
	`WaôF‹Mu…ùÀObje˘s
––
pvObje˘Li°
 ) / –* ),ÖvObje˘Li°, 
TRUE
, 
INFINITE
 );

381 
ulSwôchRequúed
 = 
pdFALSE
;

385  
i
 = 0; i < 
p‹tMAX_INTERRUPTS
; i++ )

388 if–
ulPídögI¡îru±s
 & ( 1UL << 
i
 ) )

391 if–
ulI§H™dÀr
[ 
i
 ] !
NULL
 )

394 if–
ulI§H™dÀr
[ 
i
 ](Ë!
pdFALSE
 )

396 
ulSwôchRequúed
 |–1 << 
i
 );

401 
ulPídögI¡îru±s
 &~–1UL << 
i
 );

405 if–
ulSwôchRequúed
 !
pdFALSE
 )

407 *
pvOldCuºítTCB
;

409 
pvOldCuºítTCB
 = 
pxCuºítTCB
;

412 
	`vTaskSwôchC⁄ãxt
();

416 if–
pvOldCuºítTCB
 !
pxCuºítTCB
 )

419 
pxThªadSèã
 = ( 
xThªadSèã
 *Ë*––
uöt32_t
 * ) 
pvOldCuºítTCB
 );

420 
	`Su•ídThªad
–
pxThªadSèã
->
pvThªad
 );

424 
pxThªadSèã
 = ( 
xThªadSèã
 * ) ( *–
uöt32_t
 *Ë
pxCuºítTCB
 );

425 
	`ResumeThªad
–
pxThªadSèã
->
pvThªad
 );

429 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

431 
	}
}

434 
	$vP‹tDñëeThªad
–*
pvTaskToDñëe
 )

436 
xThªadSèã
 *
pxThªadSèã
;

437 
uöt32_t
 
ulEº‹Code
;

440 –Ë
ulEº‹Code
;

443 
pxThªadSèã
 = ( 
xThªadSèã
 * ) ( *–
uöt32_t
 *Ë
pvTaskToDñëe
 );

449 if–
pxThªadSèã
->
pvThªad
 !
NULL
 )

451 
	`WaôF‹SögÀObje˘
–
pvI¡îru±EvítMuãx
, 
INFINITE
 );

453 
ulEº‹Code
 = 
	`Tîmö©eThªad
–
pxThªadSèã
->
pvThªad
, 0 );

454 
	`c⁄figASSERT
–
ulEº‹Code
 );

456 
ulEº‹Code
 = 
	`Clo£H™dÀ
–
pxThªadSèã
->
pvThªad
 );

457 
	`c⁄figASSERT
–
ulEº‹Code
 );

459 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

461 
	}
}

464 
	$vP‹tClo£Ru¬ögThªad
–*
pvTaskToDñëe
, vﬁ©ûê
Ba£Ty≥_t
 *
pxPídYõld
 )

466 
xThªadSèã
 *
pxThªadSèã
;

467 *
pvThªad
;

468 
uöt32_t
 
ulEº‹Code
;

471 –Ë
ulEº‹Code
;

474 
pxThªadSèã
 = ( 
xThªadSèã
 * ) ( *–
uöt32_t
 *Ë
pvTaskToDñëe
 );

475 
pvThªad
 = 
pxThªadSèã
->pvThread;

481 
	`SëThªadPri‹ôy
–
pvThªad
, 
THREAD_PRIORITY_ABOVE_NORMAL
 );

485 *
pxPídYõld
 = 
pdTRUE
;

489 
pxThªadSèã
->
pvThªad
 = 
NULL
;

492 
ulEº‹Code
 = 
	`Clo£H™dÀ
–
pvThªad
 );

493 
	`c⁄figASSERT
–
ulEº‹Code
 );

495 
	`ExôThªad
( 0 );

496 
	}
}

499 
	$vP‹tEndScheduÀr
( )

502 
	`Tîmö©ePro˚ss
–
	`GëCuºítPro˚ss
(), 0 );

503 
	}
}

506 
	$vP‹tGíî©eSimuœãdI¡îru±
–
uöt32_t
 
ulI¡îru±Numbî
 )

508 
	`c⁄figASSERT
–
xP‹tRu¬ög
 );

510 if––
ulI¡îru±Numbî
 < 
p‹tMAX_INTERRUPTS
 ) && ( 
pvI¡îru±EvítMuãx
 !
NULL
 ) )

513 
	`WaôF‹SögÀObje˘
–
pvI¡îru±EvítMuãx
, 
INFINITE
 );

514 
ulPídögI¡îru±s
 |–1 << 
ulI¡îru±Numbî
 );

519 if–
ulCrôiˇlNe°ög
 == 0 )

521 
	`SëEvít
–
pvI¡îru±Evít
 );

524 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

526 
	}
}

529 
vP‹tSëI¡îru±H™dÀr
–
uöt32_t
 
ulI¡îru±Numbî
, 
	$uöt32_t
 (*
pvH™dÀr
)( ) )

531 if–
ulI¡îru±Numbî
 < 
p‹tMAX_INTERRUPTS
 )

533 if–
pvI¡îru±EvítMuãx
 !
NULL
 )

535 
	`WaôF‹SögÀObje˘
–
pvI¡îru±EvítMuãx
, 
INFINITE
 );

536 
ulI§H™dÀr
[ 
ulI¡îru±Numbî
 ] = 
pvH™dÀr
;

537 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

541 
ulI§H™dÀr
[ 
ulI¡îru±Numbî
 ] = 
pvH™dÀr
;

544 
	}
}

547 
	$vP‹tE¡îCrôiˇl
( )

549 if–
xP‹tRu¬ög
 =
pdTRUE
 )

553 
	`WaôF‹SögÀObje˘
–
pvI¡îru±EvítMuãx
, 
INFINITE
 );

554 
ulCrôiˇlNe°ög
++;

558 
ulCrôiˇlNe°ög
++;

560 
	}
}

563 
	$vP‹tExôCrôiˇl
( )

565 
öt32_t
 
lMuãxNìdsRñósög
;

570 
lMuãxNìdsRñósög
 = 
pdTRUE
;

572 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

574 if–
ulCrôiˇlNe°ög
 =–
p‹tNO_CRITICAL_NESTING
 + 1 ) )

576 
ulCrôiˇlNe°ög
--;

580 if–
ulPídögI¡îru±s
 != 0UL )

582 
	`c⁄figASSERT
–
xP‹tRu¬ög
 );

583 
	`SëEvít
–
pvI¡îru±Evít
 );

587 
lMuãxNìdsRñósög
 = 
pdFALSE
;

588 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

595 
ulCrôiˇlNe°ög
--;

599 if–
pvI¡îru±EvítMuãx
 !
NULL
 )

601 if–
lMuãxNìdsRñósög
 =
pdTRUE
 )

603 
	`c⁄figASSERT
–
xP‹tRu¬ög
 );

604 
	`Rñó£Muãx
–
pvI¡îru±EvítMuãx
 );

607 
	}
}

	@portable/MSVC-MingW/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 
	~<Wödows.h
>

75 
	#p‹tCHAR
 

	)

76 
	#p‹tFLOAT
 

	)

77 
	#p‹tDOUBLE
 

	)

78 
	#p‹tLONG
 

	)

79 
	#p‹tSHORT
 

	)

80 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

81 
	#p‹tBASE_TYPE
 

	)

83 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

84 
	tBa£Ty≥_t
;

85 
	tUBa£Ty≥_t
;

88 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

89 
uöt16_t
 
	tTickTy≥_t
;

90 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

92 
uöt32_t
 
	tTickTy≥_t
;

93 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

97 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

98 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

99 
	#p‹tBYTE_ALIGNMENT
 4

	)

101 
	#p‹tYIELD
(Ë
	`vP‹tGíî©eSimuœãdI¡îru±
–
p‹tINTERRUPT_YIELD
 )

	)

103 
vP‹tClo£Ru¬ögThªad
–*
pvTaskToDñëe
, vﬁ©ûê
Ba£Ty≥_t
 *
pxPídYõld
 );

104 
vP‹tDñëeThªad
–*
pvThªadToDñëe
 );

105 
	#p‹tCLEAN_UP_TCB
–
pxTCB
 ) 
	`vP‹tDñëeThªad
–pxTCB )

	)

106 
	#p‹tPRE_TASK_DELETE_HOOK
–
pvTaskToDñëe
, 
pxPídYõld
 ) 
	`vP‹tClo£Ru¬ögThªad
––pvTaskToDñëê), (ÖxPídYõld ) )

	)

107 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

108 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tExôCrôiˇl
()

	)

111 
vP‹tE¡îCrôiˇl
( );

112 
vP‹tExôCrôiˇl
( );

114 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

115 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

117 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

120 #if–
c⁄figMAX_PRIORITIES
 > 32 )

121 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

125 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

126 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

131 #ifde‡
__GNUC__


132 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) \

	)

133 
__asm
 volatile( "mov %0, %%eax \n\t" \

136 :"Ù"(
uxT›Pri‹ôy
Ë: "r"(
uxRódyPri‹ôõs
) : "eax" )

140 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) 
	`_BôSˇnRevî£
––
DWORD
 * ) &–uxT›Pri‹ôy ), ( uxRódyPri‹ôõ†Ë)

	)

145 #i‚de‡
__GNUC__


146 
__¥agma
–
w¨nög
–
dißbÀ
:4211 ) )

151 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

152 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*ÖvP¨amëî†)

	)

155 
	#p‹tINTERRUPT_YIELD
 ( 0UL )

	)

156 
	#p‹tINTERRUPT_TICK
 ( 1UL )

	)

163 
vP‹tGíî©eSimuœãdI¡îru±
–
uöt32_t
 
ulI¡îru±Numbî
 );

174 
vP‹tSëI¡îru±H™dÀr
–
uöt32_t
 
ulI¡îru±Numbî
, 
	$uöt32_t
 (*
pvH™dÀr
)( ) );

	@portable/MemMang/heap_1.c

74 
	~<°dlib.h
>

79 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

81 
	~"FªeRTOS.h
"

82 
	~"èsk.h
"

84 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


87 
	#c⁄figADJUSTED_HEAP_SIZE
 ( 
c⁄figTOTAL_HEAP_SIZE
 - 
p‹tBYTE_ALIGNMENT
 )

	)

90 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

91 
size_t
 
	gxNextFªeByã
 = ( size_t ) 0;

95 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

97 *
pvRëu∫
 = 
NULL
;

98 
uöt8_t
 *
pucAlig√dHóp
 = 
NULL
;

101 #i‡
p‹tBYTE_ALIGNMENT
 != 1

102 if–
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 )

105 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

109 
	`vTaskSu•ídAŒ
();

111 if–
pucAlig√dHóp
 =
NULL
 )

114 
pucAlig√dHóp
 = ( 
uöt8_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 ) &
ucHóp
[ 
p‹tBYTE_ALIGNMENT
 ] ) & ( (Ö‹tPOINTER_SIZE_TYPE ) ~
p‹tBYTE_ALIGNMENT_MASK
 ) );

118 if–––
xNextFªeByã
 + 
xW™ãdSize
 ) < 
c⁄figADJUSTED_HEAP_SIZE
 ) &&

119 ––
xNextFªeByã
 + 
xW™ãdSize
 ) > xNextFreeByte ) )

123 
pvRëu∫
 = 
pucAlig√dHóp
 + 
xNextFªeByã
;

124 
xNextFªeByã
 +
xW™ãdSize
;

127 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

129 
	`xTaskResumeAŒ
();

131 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

133 if–
pvRëu∫
 =
NULL
 )

135 
	`vAµliˇti⁄MÆlocFaûedHook
( );

136 
	`vAµliˇti⁄MÆlocFaûedHook
();

141  
pvRëu∫
;

142 
	}
}

145 
	$vP‹tFªe
–*
pv
 )

150 –Ë
pv
;

153 
	`c⁄figASSERT
–
pv
 =
NULL
 );

154 
	}
}

157 
	$vP‹tInôüli£Blocks
( )

160 
xNextFªeByã
 = ( 
size_t
 ) 0;

161 
	}
}

164 
size_t
 
	$xP‹tGëFªeHópSize
( )

166  ( 
c⁄figADJUSTED_HEAP_SIZE
 - 
xNextFªeByã
 );

167 
	}
}

	@portable/MemMang/heap_2.c

75 
	~<°dlib.h
>

80 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

82 
	~"FªeRTOS.h
"

83 
	~"èsk.h
"

85 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


88 
	#c⁄figADJUSTED_HEAP_SIZE
 ( 
c⁄figTOTAL_HEAP_SIZE
 - 
p‹tBYTE_ALIGNMENT
 )

	)

93 
¥vHópInô
( );

96 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

100 
	sA_BLOCK_LINK


102 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

103 
size_t
 
	mxBlockSize
;

104 } 
	tBlockLök_t
;

107 c⁄° 
uöt16_t
 
	ghópSTRUCT_SIZE
 = ( (  ( 
BlockLök_t
 ) + ( 
p‹tBYTE_ALIGNMENT
 - 1 ) ) & ~
p‹tBYTE_ALIGNMENT_MASK
 );

108 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
hópSTRUCT_SIZE
 * 2 ) )

	)

111 
BlockLök_t
 
	gxSèπ
, 
	gxEnd
;

115 
size_t
 
	gxFªeByãsRemaöög
 = 
c⁄figADJUSTED_HEAP_SIZE
;

124 
	#¥vIn£πBlockI¡oFªeLi°
–
pxBlockToIn£π
 ) \

	)

126 
BlockLök_t
 *
	gpxIãøt‹
; \

127 
size_t
 
	gxBlockSize
; \

129 
	gxBlockSize
 = 
pxBlockToIn£π
->
xBlockSize
; \

133  
	gpxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
	gpxNextFªeBlock
->
	gxBlockSize
 < xBlockSize;ÖxIãøt‹ = 
pxIãøt‹
->
pxNextFªeBlock
 ) \

140 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock; \

141 
	gpxIãøt‹
->
	gpxNextFªeBlock
 = 
pxBlockToIn£π
; \

145 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

147 
BlockLök_t
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

148 
Ba£Ty≥_t
 
xHópHasBìnInôüli£d
 = 
pdFALSE
;

149 *
pvRëu∫
 = 
NULL
;

151 
	`vTaskSu•ídAŒ
();

155 if–
xHópHasBìnInôüli£d
 =
pdFALSE
 )

157 
	`¥vHópInô
();

158 
xHópHasBìnInôüli£d
 = 
pdTRUE
;

163 if–
xW™ãdSize
 > 0 )

165 
xW™ãdSize
 +
hópSTRUCT_SIZE
;

168 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0 )

171 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

175 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê< 
c⁄figADJUSTED_HEAP_SIZE
 ) )

179 
pxPªviousBlock
 = &
xSèπ
;

180 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

181  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

183 
pxPªviousBlock
 = 
pxBlock
;

184 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

188 if–
pxBlock
 !&
xEnd
 )

192 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
hópSTRUCT_SIZE
 );

196 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

199 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

204 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

208 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

209 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

212 
	`¥vIn£πBlockI¡oFªeLi°
––
pxNewBlockLök
 ) );

215 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

219 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

221 
	`xTaskResumeAŒ
();

223 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

225 if–
pvRëu∫
 =
NULL
 )

227 
	`vAµliˇti⁄MÆlocFaûedHook
( );

228 
	`vAµliˇti⁄MÆlocFaûedHook
();

233  
pvRëu∫
;

234 
	}
}

237 
	$vP‹tFªe
–*
pv
 )

239 
uöt8_t
 *
puc
 = ( uöt8_à* ) 
pv
;

240 
BlockLök_t
 *
pxLök
;

242 if–
pv
 !
NULL
 )

246 
puc
 -
hópSTRUCT_SIZE
;

250 
pxLök
 = ( * ) 
puc
;

252 
	`vTaskSu•ídAŒ
();

255 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

256 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

257 
	`åa˚FREE
–
pv
, 
pxLök
->
xBlockSize
 );

259 
	`xTaskResumeAŒ
();

261 
	}
}

264 
size_t
 
	$xP‹tGëFªeHópSize
( )

266  
xFªeByãsRemaöög
;

267 
	}
}

270 
	$vP‹tInôüli£Blocks
( )

273 
	}
}

276 
	$¥vHópInô
( )

278 
BlockLök_t
 *
pxFú°FªeBlock
;

279 
uöt8_t
 *
pucAlig√dHóp
;

282 
pucAlig√dHóp
 = ( 
uöt8_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 ) &
ucHóp
[ 
p‹tBYTE_ALIGNMENT
 ] ) & ( (Ö‹tPOINTER_SIZE_TYPE ) ~
p‹tBYTE_ALIGNMENT_MASK
 ) );

286 
xSèπ
.
pxNextFªeBlock
 = ( * ) 
pucAlig√dHóp
;

287 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0;

290 
xEnd
.
xBlockSize
 = 
c⁄figADJUSTED_HEAP_SIZE
;

291 
xEnd
.
pxNextFªeBlock
 = 
NULL
;

295 
pxFú°FªeBlock
 = ( * ) 
pucAlig√dHóp
;

296 
pxFú°FªeBlock
->
xBlockSize
 = 
c⁄figADJUSTED_HEAP_SIZE
;

297 
pxFú°FªeBlock
->
pxNextFªeBlock
 = &
xEnd
;

298 
	}
}

	@portable/MemMang/heap_3.c

78 
	~<°dlib.h
>

83 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

85 
	~"FªeRTOS.h
"

86 
	~"èsk.h
"

88 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


92 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

94 *
pvRëu∫
;

96 
	`vTaskSu•ídAŒ
();

98 
pvRëu∫
 = 
	`mÆloc
–
xW™ãdSize
 );

99 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

101 
	`xTaskResumeAŒ
();

103 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

105 if–
pvRëu∫
 =
NULL
 )

107 
	`vAµliˇti⁄MÆlocFaûedHook
( );

108 
	`vAµliˇti⁄MÆlocFaûedHook
();

113  
pvRëu∫
;

114 
	}
}

117 
	$vP‹tFªe
–*
pv
 )

119 if–
pv
 )

121 
	`vTaskSu•ídAŒ
();

123 
	`‰ì
–
pv
 );

124 
	`åa˚FREE
–
pv
, 0 );

126 
	`xTaskResumeAŒ
();

128 
	}
}

	@portable/MemMang/heap_4.c

74 
	~<°dlib.h
>

79 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

81 
	~"FªeRTOS.h
"

82 
	~"èsk.h
"

84 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


87 
	#hópMINIMUM_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
hópSTRUCT_SIZE
 * 2 ) )

	)

90 
	#hópBITS_PER_BYTE
 ( ( 
size_t
 ) 8 )

	)

93 
	#hópADJUSTED_HEAP_SIZE
 ( 
c⁄figTOTAL_HEAP_SIZE
 - 
p‹tBYTE_ALIGNMENT
 )

	)

96 
uöt8_t
 
	gucHóp
[ 
c⁄figTOTAL_HEAP_SIZE
 ];

100 
	sA_BLOCK_LINK


102 
A_BLOCK_LINK
 *
	mpxNextFªeBlock
;

103 
size_t
 
	mxBlockSize
;

104 } 
	tBlockLök_t
;

114 
¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 );

120 
¥vHópInô
( );

126 c⁄° 
uöt16_t
 
	ghópSTRUCT_SIZE
 = ( (  ( 
BlockLök_t
 ) + ( 
p‹tBYTE_ALIGNMENT
 - 1 ) ) & ~
p‹tBYTE_ALIGNMENT_MASK
 );

129 c⁄° 
size_t
 
	gxTŸÆHópSize
 = ( ( size_àË
hópADJUSTED_HEAP_SIZE
 ) & ( ( size_àË~
p‹tBYTE_ALIGNMENT_MASK
 );

132 
BlockLök_t
 
	gxSèπ
, *
	gpxEnd
 = 
NULL
;

136 
size_t
 
	gxFªeByãsRemaöög
 = ( ( size_àË
hópADJUSTED_HEAP_SIZE
 ) & ( ( size_àË~
p‹tBYTE_ALIGNMENT_MASK
 );

137 
size_t
 
	gxMöimumEvîFªeByãsRemaöög
 = ( ( size_àË
hópADJUSTED_HEAP_SIZE
 ) & ( ( size_àË~
p‹tBYTE_ALIGNMENT_MASK
 );

143 
size_t
 
	gxBlockAŒoˇãdBô
 = 0;

147 *
	$pvP‹tMÆloc
–
size_t
 
xW™ãdSize
 )

149 
BlockLök_t
 *
pxBlock
, *
pxPªviousBlock
, *
pxNewBlockLök
;

150 *
pvRëu∫
 = 
NULL
;

152 
	`vTaskSu•ídAŒ
();

156 if–
pxEnd
 =
NULL
 )

158 
	`¥vHópInô
();

162 
	`mtCOVERAGE_TEST_MARKER
();

169 if––
xW™ãdSize
 & 
xBlockAŒoˇãdBô
 ) == 0 )

173 if–
xW™ãdSize
 > 0 )

175 
xW™ãdSize
 +
hópSTRUCT_SIZE
;

179 if––
xW™ãdSize
 & 
p‹tBYTE_ALIGNMENT_MASK
 ) != 0x00 )

182 
xW™ãdSize
 +–
p‹tBYTE_ALIGNMENT
 - ( xW™ãdSizê& 
p‹tBYTE_ALIGNMENT_MASK
 ) );

186 
	`mtCOVERAGE_TEST_MARKER
();

191 
	`mtCOVERAGE_TEST_MARKER
();

194 if––
xW™ãdSize
 > 0 ) && ( xW™ãdSizê<
xFªeByãsRemaöög
 ) )

198 
pxPªviousBlock
 = &
xSèπ
;

199 
pxBlock
 = 
xSèπ
.
pxNextFªeBlock
;

200  ( 
pxBlock
->
xBlockSize
 < 
xW™ãdSize
 ) && (ÖxBlock->
pxNextFªeBlock
 !
NULL
 ) )

202 
pxPªviousBlock
 = 
pxBlock
;

203 
pxBlock
 =ÖxBlock->
pxNextFªeBlock
;

208 if–
pxBlock
 !
pxEnd
 )

212 
pvRëu∫
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxPªviousBlock
->
pxNextFªeBlock
 ) + 
hópSTRUCT_SIZE
 );

216 
pxPªviousBlock
->
pxNextFªeBlock
 = 
pxBlock
->pxNextFreeBlock;

220 if––
pxBlock
->
xBlockSize
 - 
xW™ãdSize
 ) > 
hópMINIMUM_BLOCK_SIZE
 )

226 
pxNewBlockLök
 = ( * ) ( ( ( 
uöt8_t
 * ) 
pxBlock
 ) + 
xW™ãdSize
 );

230 
pxNewBlockLök
->
xBlockSize
 = 
pxBlock
->xBlockSizê- 
xW™ãdSize
;

231 
pxBlock
->
xBlockSize
 = 
xW™ãdSize
;

234 
	`¥vIn£πBlockI¡oFªeLi°
––
pxNewBlockLök
 ) );

238 
	`mtCOVERAGE_TEST_MARKER
();

241 
xFªeByãsRemaöög
 -
pxBlock
->
xBlockSize
;

243 if–
xFªeByãsRemaöög
 < 
xMöimumEvîFªeByãsRemaöög
 )

245 
xMöimumEvîFªeByãsRemaöög
 = 
xFªeByãsRemaöög
;

249 
	`mtCOVERAGE_TEST_MARKER
();

254 
pxBlock
->
xBlockSize
 |
xBlockAŒoˇãdBô
;

255 
pxBlock
->
pxNextFªeBlock
 = 
NULL
;

259 
	`mtCOVERAGE_TEST_MARKER
();

264 
	`mtCOVERAGE_TEST_MARKER
();

269 
	`mtCOVERAGE_TEST_MARKER
();

272 
	`åa˚MALLOC
–
pvRëu∫
, 
xW™ãdSize
 );

274 
	`xTaskResumeAŒ
();

276 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

278 if–
pvRëu∫
 =
NULL
 )

280 
	`vAµliˇti⁄MÆlocFaûedHook
( );

281 
	`vAµliˇti⁄MÆlocFaûedHook
();

285 
	`mtCOVERAGE_TEST_MARKER
();

290  
pvRëu∫
;

291 
	}
}

294 
	$vP‹tFªe
–*
pv
 )

296 
uöt8_t
 *
puc
 = ( uöt8_à* ) 
pv
;

297 
BlockLök_t
 *
pxLök
;

299 if–
pv
 !
NULL
 )

303 
puc
 -
hópSTRUCT_SIZE
;

306 
pxLök
 = ( * ) 
puc
;

309 
	`c⁄figASSERT
––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 );

310 
	`c⁄figASSERT
–
pxLök
->
pxNextFªeBlock
 =
NULL
 );

312 if––
pxLök
->
xBlockSize
 & 
xBlockAŒoˇãdBô
 ) != 0 )

314 if–
pxLök
->
pxNextFªeBlock
 =
NULL
 )

318 
pxLök
->
xBlockSize
 &~
xBlockAŒoˇãdBô
;

320 
	`vTaskSu•ídAŒ
();

323 
xFªeByãsRemaöög
 +
pxLök
->
xBlockSize
;

324 
	`åa˚FREE
–
pv
, 
pxLök
->
xBlockSize
 );

325 
	`¥vIn£πBlockI¡oFªeLi°
–––
BlockLök_t
 * ) 
pxLök
 ) );

327 
	`xTaskResumeAŒ
();

331 
	`mtCOVERAGE_TEST_MARKER
();

336 
	`mtCOVERAGE_TEST_MARKER
();

339 
	}
}

342 
size_t
 
	$xP‹tGëFªeHópSize
( )

344  
xFªeByãsRemaöög
;

345 
	}
}

348 
size_t
 
	$xP‹tGëMöimumEvîFªeHópSize
( )

350  
xMöimumEvîFªeByãsRemaöög
;

351 
	}
}

354 
	$vP‹tInôüli£Blocks
( )

357 
	}
}

360 
	$¥vHópInô
( )

362 
BlockLök_t
 *
pxFú°FªeBlock
;

363 
uöt8_t
 *
pucHópEnd
, *
pucAlig√dHóp
;

366 
pucAlig√dHóp
 = ( 
uöt8_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 ) &
ucHóp
[ 
p‹tBYTE_ALIGNMENT
 ] ) & ( (Ö‹tPOINTER_SIZE_TYPE ) ~
p‹tBYTE_ALIGNMENT_MASK
 ) );

370 
xSèπ
.
pxNextFªeBlock
 = ( * ) 
pucAlig√dHóp
;

371 
xSèπ
.
xBlockSize
 = ( 
size_t
 ) 0;

375 
pucHópEnd
 = 
pucAlig√dHóp
 + 
xTŸÆHópSize
;

376 
pucHópEnd
 -
hópSTRUCT_SIZE
;

377 
pxEnd
 = ( * ) 
pucHópEnd
;

378 
	`c⁄figASSERT
––––
uöt32_t
 ) 
pxEnd
 ) & ( ( uöt32_àË
p‹tBYTE_ALIGNMENT_MASK
 ) ) == 0UL );

379 
pxEnd
->
xBlockSize
 = 0;

380 
pxEnd
->
pxNextFªeBlock
 = 
NULL
;

384 
pxFú°FªeBlock
 = ( * ) 
pucAlig√dHóp
;

385 
pxFú°FªeBlock
->
xBlockSize
 = 
xTŸÆHópSize
 - 
hópSTRUCT_SIZE
;

386 
pxFú°FªeBlock
->
pxNextFªeBlock
 = 
pxEnd
;

389 
xFªeByãsRemaöög
 -
hópSTRUCT_SIZE
;

392 
xBlockAŒoˇãdBô
 = ( ( 
size_t
 ) 1 ) << ( ( –size_àË* 
hópBITS_PER_BYTE
 ) - 1 );

393 
	}
}

396 
	$¥vIn£πBlockI¡oFªeLi°
–
BlockLök_t
 *
pxBlockToIn£π
 )

398 
BlockLök_t
 *
pxIãøt‹
;

399 
uöt8_t
 *
puc
;

403  
pxIãøt‹
 = &
xSèπ
;ÖxIãøt‹->
pxNextFªeBlock
 < 
pxBlockToIn£π
;ÖxIterator =ÖxIterator->pxNextFreeBlock )

410 
puc
 = ( 
uöt8_t
 * ) 
pxIãøt‹
;

411 if––
puc
 + 
pxIãøt‹
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxBlockToIn£π
 )

413 
pxIãøt‹
->
xBlockSize
 +
pxBlockToIn£π
->xBlockSize;

414 
pxBlockToIn£π
 = 
pxIãøt‹
;

418 
	`mtCOVERAGE_TEST_MARKER
();

423 
puc
 = ( 
uöt8_t
 * ) 
pxBlockToIn£π
;

424 if––
puc
 + 
pxBlockToIn£π
->
xBlockSize
 ) =–
uöt8_t
 * ) 
pxIãøt‹
->
pxNextFªeBlock
 )

426 if–
pxIãøt‹
->
pxNextFªeBlock
 !
pxEnd
 )

429 
pxBlockToIn£π
->
xBlockSize
 +
pxIãøt‹
->
pxNextFªeBlock
->xBlockSize;

430 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock->pxNextFreeBlock;

434 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxEnd
;

439 
pxBlockToIn£π
->
pxNextFªeBlock
 = 
pxIãøt‹
->pxNextFreeBlock;

446 if–
pxIãøt‹
 !
pxBlockToIn£π
 )

448 
pxIãøt‹
->
pxNextFªeBlock
 = 
pxBlockToIn£π
;

452 
	`mtCOVERAGE_TEST_MARKER
();

454 
	}
}

	@portable/Paradigm/Tern_EE/large_untested/port.c

73 
	~<embedded.h
>

74 
	~<´.h
>

77 
	~"FªeRTOS.h
"

78 
	~"èsk.h
"

79 
	~"p‹èsm.h
"

82 
	#p‹tTIMER_COMPARE
 ( 
uöt16_t
 ) ( ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) / ( 
uöt32_t
 ) 4 )

	)

85 
	#p‹tENABLE_TIMER_AND_INTERRUPT
 ( 
uöt16_t
 ) 0xe001

	)

88 
	#p‹tEIO_REGISTER
 0xff22

	)

89 
	#p‹tCLEAR_INTERRUPT
 0x0008

	)

92 
¥vSëupTimîI¡îru±
( );

96 #if–
c⁄figUSE_PREEMPTION
 == 1 )

99 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

103 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

107 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

112 
__öãºu±
 
__Ár
 
¥vDummyISR
( );

116 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

118 
SèckTy≥_t
 
DS_Reg
 = 0;

123 *
pxT›OfSèck
 = 0x1111;

124 
pxT›OfSèck
--;

125 *
pxT›OfSèck
 = 0x2222;

126 
pxT›OfSèck
--;

127 *
pxT›OfSèck
 = 0x3333;

128 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = 
	`FP_SEG
–
pvP¨amëîs
 );

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

141 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = 
p‹tINITIAL_SW
;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

149 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xAAAA;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xBBBB;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xCCCC;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xDDDD;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xEEEE;

163 
pxT›OfSèck
--;

166 
__asm
{ 
MOV
 
DS_Reg
, 
DS
 };

168 *
pxT›OfSèck
 = 
DS_Reg
;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0123;

171 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xDDDD;

173 
pxT›OfSèck
--;

174 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xBBBB;

176  
pxT›OfSèck
;

177 
	}
}

180 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

186 
	`£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

189 
	`¥vSëupTimîI¡îru±
();

192 
	`p‹tFIRST_CONTEXT
();

195  
pdFALSE
;

196 
	}
}

199 
__öãºu±
 
__Ár
 
	$¥vDummyISR
( )

204 
	`ouç‹t
–
p‹tEIO_REGISTER
, 
p‹tCLEAR_INTERRUPT
 );

205 
	}
}

210 #if–
c⁄figUSE_PREEMPTION
 == 1 )

211 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

214 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

217 
	`p‹tSWITCH_CONTEXT
();

221 
	`ouç‹t
–
p‹tEIO_REGISTER
, 
p‹tCLEAR_INTERRUPT
 );

222 
	}
}

224 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

228 
	`xTaskIn¸emítTick
();

231 
	`ouç‹t
–
p‹tEIO_REGISTER
, 
p‹tCLEAR_INTERRUPT
 );

232 
	}
}

236 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

239 
	`p‹tSWITCH_CONTEXT
();

240 
	}
}

243 
	$vP‹tEndScheduÀr
( )

246 
	}
}

249 
	$¥vSëupTimîI¡îru±
( )

251 c⁄° 
uöt16_t
 
usTimîACom∑ª
 = 
p‹tTIMER_COMPARE
, 
usTimîAMode
 = 
p‹tENABLE_TIMER_AND_INTERRUPT
;

252 c⁄° 
uöt16_t
 
usT2_IRQ
 = 0x13;

256 
	`t2_öô
–
usTimîAMode
, 
usTimîACom∑ª
, 
¥vDummyISR
 );

259 
	`p‹tDISABLE_INTERRUPTS
();

261 #if–
c⁄figUSE_PREEMPTION
 == 1 )

264 
	`£tve˘
–
usT2_IRQ
, 
¥vPªem±iveTick
 );

268 
	`£tve˘
–
usT2_IRQ
, 
¥vN⁄Pªem±iveTick
 );

270 
	}
}

	@portable/Paradigm/Tern_EE/large_untested/portasm.h

66 
	tTCB_t
;

67 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

68 
vTaskSwôchC⁄ãxt
( );

75 
p‹tSWITCH_CONTEXT
( );

82 
p‹tFIRST_CONTEXT
( );

84 
	#p‹tSWITCH_CONTEXT
(Ë\

	)

85 
	gasm
 { 
mov
 
	gax
, 
£g
 
	gpxCuºítTCB
 } \

86 
	gasm
 { 
mov
 
	gds
, 
	gax
 } \

87 
	gasm
 { 
Às
 
	gbx
, 
	gpxCuºítTCB
 } \

88 
	gasm
 { 
mov
 
	ges
:0x2[ 
bx
 ], 
	gss
 } \

89 
	gasm
 { 
mov
 
	ges
:[ 
bx
 ], 
	g•
 } \

90 
	gasm
 { 
ˇŒ
 
Ár
 
±r
 
	gvTaskSwôchC⁄ãxt
 } \

91 
	gasm
 { 
mov
 
	gax
, 
£g
 
	gpxCuºítTCB
 } \

92 
	gasm
 { 
mov
 
	gds
, 
	gax
 } \

93 
	gasm
 { 
Às
 
	gbx
, 
dw‹d
 
±r
 
	gpxCuºítTCB
 } \

94 
	gasm
 { 
mov
 
	gss
, 
	ges
:[ 
bx
 + 2 ] } \

95 
asm
 { 
mov
 
•
, 
	ges
:[ 
bx
 ] }

97 
	#p‹tFIRST_CONTEXT
(Ë\

	)

98 
asm
 { 
mov
 
ax
, 
£g
 
	gpxCuºítTCB
 } \

99 
	gasm
 { 
mov
 
	gds
, 
	gax
 } \

100 
	gasm
 { 
Às
 
	gbx
, 
dw‹d
 
±r
 
	gpxCuºítTCB
 } \

101 
	gasm
 { 
mov
 
	gss
, 
	ges
:[ 
bx
 + 2 ] } \

102 
asm
 { 
mov
 
•
, 
	ges
:[ 
bx
 ] } \

103 
asm
 { 
p›
 
bp
 } \

104 
asm
 { 
p›
 
di
 } \

105 
asm
 { 
p›
 
si
 } \

106 
asm
 { 
p›
 
ds
 } \

107 
asm
 { 
p›
 
es
 } \

108 
asm
 { 
p›
 
dx
 } \

109 
asm
 { 
p›
 
cx
 } \

110 
asm
 { 
p›
 
bx
 } \

111 
asm
 { 
p›
 
ax
 } \

112 
asm
 { 
úë
 }

	@portable/Paradigm/Tern_EE/large_untested/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tENTER_CRITICAL
(Ë
__asm
{ 
pushf
 } \

	)

108 
	g__asm
{ 
	g˛i
 } \

110 
	#p‹tEXIT_CRITICAL
(Ë
__asm
{ 
p›f
 }

	)

112 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
{ 
˛i
 }

	)

114 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
{ 
°i
 }

	)

118 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

119 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

120 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

121 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

122 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

123 
	#p‹tBYTE_ALIGNMENT
 2

	)

124 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

128 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

129 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

130 
	#p‹tINPUT_WORD
–
xAddr
 ) 
	`öpw
–xAdd∏)

	)

131 
	#p‹tOUTPUT_WORD
–
xAddr
, 
usVÆue
 ) 
	`ouçw
–xAddr, usVÆuê)

	)

135 
	#p‹tTASK_FUNCTION_PROTO
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

136 
	#p‹tTASK_FUNCTION
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

138 #ifde‡
__˝lu•lus


	@portable/Paradigm/Tern_EE/small/port.c

73 
	~<embedded.h
>

74 
	~<´.h
>

77 
	~"FªeRTOS.h
"

78 
	~"èsk.h
"

79 
	~"p‹èsm.h
"

82 
	#p‹tPRESCALE_VALUE
 ( 16 )

	)

83 
	#p‹tTIMER_COMPARE
 ( 
c⁄figCPU_CLOCK_HZ
 / ( 
c⁄figTICK_RATE_HZ
 * 4UL ) )

	)

86 
	#p‹tENABLE_TIMER_AND_INTERRUPT
 ( 
uöt16_t
 ) 0xe00b

	)

87 
	#p‹tENABLE_TIMER
 ( 
uöt16_t
 ) 0xC001

	)

90 
	#p‹tEIO_REGISTER
 0xff22

	)

91 
	#p‹tCLEAR_INTERRUPT
 0x0008

	)

94 
¥vSëupTimîI¡îru±
( );

98 #if–
c⁄figUSE_PREEMPTION
 == 1 )

101 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

105 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

109 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

113 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

115 
SèckTy≥_t
 
DS_Reg
 = 0;

118 
__asm
{ 
MOV
 
DS_Reg
, 
DS
 };

123 *
pxT›OfSèck
 = 0x1111;

124 
pxT›OfSèck
--;

125 *
pxT›OfSèck
 = 0x2222;

126 
pxT›OfSèck
--;

127 *
pxT›OfSèck
 = 0x3333;

128 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

137 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = 
p‹tINITIAL_SW
;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

145 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xAAAA;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xBBBB;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xCCCC;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xDDDD;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xEEEE;

159 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = 
DS_Reg
;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0123;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xDDDD;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xBBBB;

169  
pxT›OfSèck
;

170 
	}
}

173 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

179 
	`£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

182 
	`¥vSëupTimîI¡îru±
();

185 
	`p‹tFIRST_CONTEXT
();

188  
pdFALSE
;

189 
	}
}

194 #if–
c⁄figUSE_PREEMPTION
 == 1 )

195 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

198 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

201 
	`p‹tEND_SWITCHING_ISR
();

205 
	`ouç‹t
–
p‹tEIO_REGISTER
, 
p‹tCLEAR_INTERRUPT
 );

206 
	}
}

208 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

212 
	`xTaskIn¸emítTick
();

215 
	`ouç‹t
–
p‹tEIO_REGISTER
, 
p‹tCLEAR_INTERRUPT
 );

216 
	}
}

220 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

223 
	`p‹tEND_SWITCHING_ISR
();

224 
	}
}

227 
	$vP‹tEndScheduÀr
( )

230 
	}
}

233 
	$¥vSëupTimîI¡îru±
( )

235 c⁄° 
uöt32_t
 
ulCom∑ªVÆue
 = 
p‹tTIMER_COMPARE
;

236 
uöt16_t
 
usTimîCom∑ª
;

238 
usTimîCom∑ª
 = ( 
uöt16_t
 ) ( 
ulCom∑ªVÆue
 >> 4 );

239 
	`t2_öô
–
p‹tENABLE_TIMER
, 
p‹tPRESCALE_VALUE
, 
NULL
 );

241 #if–
c⁄figUSE_PREEMPTION
 == 1 )

244 
	`t1_öô
–
p‹tENABLE_TIMER_AND_INTERRUPT
, 
usTimîCom∑ª
, usTimîCom∑ª, 
¥vPªem±iveTick
 );

248 
	`t1_öô
–
p‹tENABLE_TIMER_AND_INTERRUPT
, 
usTimîCom∑ª
, usTimîCom∑ª, 
¥vN⁄Pªem±iveTick
 );

250 
	}
}

	@portable/Paradigm/Tern_EE/small/portasm.h

66 #i‚de‡
PORT_ASM_H


67 
	#PORT_ASM_H


	)

69 
	tTCB_t
;

70 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

71 
vTaskSwôchC⁄ãxt
( );

78 
p‹tEND_SWITCHING_ISR
( );

85 
p‹tFIRST_CONTEXT
( );

87 
	#p‹tEND_SWITCHING_ISR
(Ë\

	)

88 
	gasm
 { 
mov
 
	gbx
, [
pxCuºítTCB
] } \

89 
	gasm
 { 
mov
 
w‹d
 
	g±r
 [
bx
], 
	g•
 } \

90 
	gasm
 { 
ˇŒ
 
Ár
 
±r
 
	gvTaskSwôchC⁄ãxt
 } \

91 
	gasm
 { 
mov
 
	gbx
, [
pxCuºítTCB
] } \

92 
	gasm
 { 
mov
 
	g•
, [
bx
] }

94 
	#p‹tFIRST_CONTEXT
(Ë\

	)

95 
	gasm
 { 
mov
 
	gbx
, [
pxCuºítTCB
] } \

96 
	gasm
 { 
mov
 
	g•
, [
bx
] } \

97 
	gasm
 { 
p›
 
	gbp
 } \

98 
	gasm
 { 
p›
 
	gdi
 } \

99 
	gasm
 { 
p›
 
	gsi
 } \

100 
	gasm
 { 
p›
 
	gds
 } \

101 
	gasm
 { 
p›
 
	ges
 } \

102 
	gasm
 { 
p›
 
	gdx
 } \

103 
	gasm
 { 
p›
 
	gcx
 } \

104 
	gasm
 { 
p›
 
	gbx
 } \

105 
	gasm
 { 
p›
 
	gax
 } \

106 
	gasm
 { 
	gúë
 }

	@portable/Paradigm/Tern_EE/small/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

97 –
__öãºu±
 
	t__Ár
 *
	tpxISR
 )();

99 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

100 
uöt16_t
 
	tTickTy≥_t
;

101 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

103 
uöt32_t
 
	tTickTy≥_t
;

104 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

109 
	#p‹tENTER_CRITICAL
(Ë
__asm
{ 
pushf
 } \

	)

110 
	g__asm
{ 
	g˛i
 } \

112 
	#p‹tEXIT_CRITICAL
(Ë
__asm
{ 
p›f
 }

	)

114 
	#p‹tDISABLE_INTERRUPTS
(Ë
__asm
{ 
˛i
 }

	)

116 
	#p‹tENABLE_INTERRUPTS
(Ë
__asm
{ 
°i
 }

	)

120 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

121 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

122 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

123 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

124 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

125 
	#p‹tBYTE_ALIGNMENT
 2

	)

126 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

130 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

131 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

132 
	#p‹tINPUT_WORD
–
xAddr
 ) 
	`öpw
–xAdd∏)

	)

133 
	#p‹tOUTPUT_WORD
–
xAddr
, 
usVÆue
 ) 
	`ouçw
–xAddr, usVÆuê)

	)

137 
	#p‹tTASK_FUNCTION_PROTO
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

138 
	#p‹tTASK_FUNCTION
–
vTaskFun˘i⁄
, 
vP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*
pvP¨amëîs
 )

	)

140 #ifde‡
__˝lu•lus


	@portable/RVDS/ARM7_LPC21xx/port.c

68 
	~<°dlib.h
>

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

76 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

77 
	#p‹tINSTRUCTION_SIZE
 ( ( 
SèckTy≥_t
 ) 4 )

	)

78 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
SèckTy≥_t
 ) 0 )

	)

81 
	#p‹tENABLE_TIMER
 ( ( 
uöt8_t
 ) 0x01 )

	)

82 
	#p‹tPRESCALE_VALUE
 0x00

	)

83 
	#p‹tINTERRUPT_ON_MATCH
 ( ( 
uöt32_t
 ) 0x01 )

	)

84 
	#p‹tRESET_COUNT_ON_MATCH
 ( ( 
uöt32_t
 ) 0x02 )

	)

87 
	#p‹tTIMER_VIC_CHANNEL
 ( ( 
uöt32_t
 ) 0x0004 )

	)

88 
	#p‹tTIMER_VIC_CHANNEL_BIT
 ( ( 
uöt32_t
 ) 0x0010 )

	)

89 
	#p‹tTIMER_VIC_ENABLE
 ( ( 
uöt32_t
 ) 0x0020 )

	)

92 
	#p‹tTIMER_MATCH_ISR_BIT
 ( ( 
uöt8_t
 ) 0x01 )

	)

93 
	#p‹tCLEAR_VIC_INTERRUPT
 ( ( 
uöt32_t
 ) 0 )

	)

103 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

104 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

109 
¥vSëupTimîI¡îru±
( );

115 
__asm
 
vP‹tSèπFú°Task
( );

122 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

124 
SèckTy≥_t
 *
pxOrigöÆTOS
;

131 
pxOrigöÆTOS
 = 
pxT›OfSèck
;

135 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
 + 
p‹tINSTRUCTION_SIZE
;

141 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaaaaaa;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxOrigöÆTOS
;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

172 
pxT›OfSèck
--;

176 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

178 if–––
uöt32_t
 ) 
pxCode
 & 0x01UL ) != 0x00UL )

181 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

184 
pxT›OfSèck
--;

191 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_SECTION_NESTING
;

193  
pxT›OfSèck
;

194 
	}
}

197 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

200 
	`¥vSëupTimîI¡îru±
();

204 
	`vP‹tSèπFú°Task
();

208 
	}
}

211 
	$vP‹tEndScheduÀr
( )

216 
	}
}

219 #i‡
c⁄figUSE_PREEMPTION
 == 0

225 
	$vN⁄Pªem±iveTick
–Ë
__úq
;

226 
	$vN⁄Pªem±iveTick
–Ë
__úq


230 
	`xTaskIn¸emítTick
();

232 
T0IR
 = 
p‹tTIMER_MATCH_ISR_BIT
;

233 
VICVe˘Addr
 = 
p‹tCLEAR_VIC_INTERRUPT
;

234 
	}
}

246 
vPªem±iveTick
( );

251 
	$¥vSëupTimîI¡îru±
( )

253 
uöt32_t
 
ulCom∑ªM©ch
;

257 
T0PR
 = 
p‹tPRESCALE_VALUE
;

260 
ulCom∑ªM©ch
 = 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
;

264 #i‡
p‹tPRESCALE_VALUE
 != 0

266 
ulCom∑ªM©ch
 /–
p‹tPRESCALE_VALUE
 + 1 );

270 
T0MR0
 = 
ulCom∑ªM©ch
;

273 
T0MCR
 = 
p‹tRESET_COUNT_ON_MATCH
 | 
p‹tINTERRUPT_ON_MATCH
;

276 
VICI¡Sñe˘
 &~–
p‹tTIMER_VIC_CHANNEL_BIT
 );

277 
VICI¡E«bÀ
 |
p‹tTIMER_VIC_CHANNEL_BIT
;

281 #i‡
c⁄figUSE_PREEMPTION
 == 1

283 
VICVe˘Addr0
 = ( 
uöt32_t
 ) 
vPªem±iveTick
;

287 
VICVe˘Addr0
 = ( 
uöt32_t
 ) 
vN⁄Pªem±iveTick
;

291 
VICVe˘C¡l0
 = 
p‹tTIMER_VIC_CHANNEL
 | 
p‹tTIMER_VIC_ENABLE
;

295 
T0TCR
 = 
p‹tENABLE_TIMER
;

296 
	}
}

299 
	$vP‹tE¡îCrôiˇl
( )

302 
	`__dißbÀ_úq
();

307 
ulCrôiˇlNe°ög
++;

308 
	}
}

311 
	$vP‹tExôCrôiˇl
( )

313 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

316 
ulCrôiˇlNe°ög
--;

320 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

323 
	`__íabÀ_úq
();

326 
	}
}

	@portable/RVDS/ARM7_LPC21xx/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

108 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

109 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

110 
	#p‹tBYTE_ALIGNMENT
 8

	)

124 
	#p‹tEXIT_SWITCHING_ISR
(
SwôchRequúed
Ë\

	)

126 
vTaskSwôchC⁄ãxt
(); \

128 if(
	gSwôchRequúed
) \

130 
vTaskSwôchC⁄ãxt
(); \

134 
vP‹tYõld
( );

135 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

148 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_úq
()

	)

149 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_úq
()

	)

162 
vP‹tE¡îCrôiˇl
( );

163 
vP‹tExôCrôiˇl
( );

165 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

166 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

170 
	#ölöe


	)

171 

	)

172 
	#p‹tNOP
(Ë
__asm
{ 
NOP
 }

	)

176 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

177 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

179 #ifde‡
__˝lu•lus


	@portable/RVDS/ARM_CA9/port.c

67 
	~<°dlib.h
>

70 
	~"FªeRTOS.h
"

71 
	~"èsk.h
"

73 #i‚de‡
c⁄figINTERRUPT_CONTROLLER_BASE_ADDRESS


74 #îr‹ 
c⁄figINTERRUPT_CONTROLLER_BASE_ADDRESS
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

77 #i‚de‡
c⁄figINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET


78 #îr‹ 
c⁄figINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

81 #i‚de‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES


82 #îr‹ 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

85 #i‚de‡
c⁄figSETUP_TICK_INTERRUPT


86 #îr‹ 
c⁄figSETUP_TICK_INTERRUPT
(Ë
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

89 #i‚de‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY


90 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
be
 
deföed
. 
Sì
 
hâp
:

93 #i‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 == 0

94 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
nŸ
 
be
 
£t
 
to
 0

97 #i‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 > 
c⁄figUNIQUE_INTERRUPT_PRIORITIES


98 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
be
 
Àss
 
th™
 
‹
 
equÆ
 
to
 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 
as
 
the
 
lowî
Åhê
numîic
 
¥i‹ôy
 
vÆue
Åhê
highî
Åhê
logiˇl
 
öãºu±
Öriority

101 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

103 #if–
c⁄figMAX_PRIORITIES
 > 32 )

104 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

109 #i‡
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 <–
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 / 2 )

110 #îr‹ 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 
mu°
 
be
 
gª©î
 
th™
 ( 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 / 2 )

113 #i‚de‡
c⁄figCLEAR_TICK_INTERRUPT


114 
	#c⁄figCLEAR_TICK_INTERRUPT
()

	)

119 #i‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 16

120 
	#p‹tPRIORITY_SHIFT
 4

	)

121 
	#p‹tMAX_BINARY_POINT_VALUE
 3

	)

122 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 32

123 
	#p‹tPRIORITY_SHIFT
 3

	)

124 
	#p‹tMAX_BINARY_POINT_VALUE
 2

	)

125 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 64

126 
	#p‹tPRIORITY_SHIFT
 2

	)

127 
	#p‹tMAX_BINARY_POINT_VALUE
 1

	)

128 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 128

129 
	#p‹tPRIORITY_SHIFT
 1

	)

130 
	#p‹tMAX_BINARY_POINT_VALUE
 0

	)

131 #ñi‡
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 == 256

132 
	#p‹tPRIORITY_SHIFT
 0

	)

133 
	#p‹tMAX_BINARY_POINT_VALUE
 0

	)

135 #îr‹ 
InvÆid
 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 
£âög
. c⁄figUNIQUE_INTERRUPT_PRIORITIES 
mu°
 
be
 
£t
 
to
 
the
 
numbî
 
of
 
unique
 
¥i‹ôõs
 
im∂emíãd
 
by
Åhê
èrgë
 
h¨dw¨e


140 
	#p‹tNO_CRITICAL_NESTING
 ( ( 
uöt32_t
 ) 0 )

	)

144 
	#p‹tUNMASK_VALUE
 ( 0xFF )

	)

151 
	#p‹tNO_FLOATING_POINT_CONTEXT
 ( ( 
SèckTy≥_t
 ) 0 )

	)

154 
	#p‹tICCPMR_PRIORITY_MASK_OFFSET
 ( 0x04 )

	)

155 
	#p‹tICCIAR_INTERRUPT_ACKNOWLEDGE_OFFSET
 ( 0x0C )

	)

156 
	#p‹tICCEOIR_END_OF_INTERRUPT_OFFSET
 ( 0x10 )

	)

157 
	#p‹tICCBPR_BINARY_POINT_OFFSET
 ( 0x08 )

	)

158 
	#p‹tICCRPR_RUNNING_PRIORITY_OFFSET
 ( 0x14 )

	)

159 
	#p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 ( 
c⁄figINTERRUPT_CONTROLLER_BASE_ADDRESS
 + 
c⁄figINTERRUPT_CONTROLLER_CPU_INTERFACE_OFFSET
 )

	)

160 
	#p‹tICCPMR_PRIORITY_MASK_REGISTER
 ( *––vﬁ©ûê
uöt32_t
 * ) ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCPMR_PRIORITY_MASK_OFFSET
 ) ) )

	)

161 
	#p‹tICCIAR_INTERRUPT_ACKNOWLEDGE_REGISTER_ADDRESS
 ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCIAR_INTERRUPT_ACKNOWLEDGE_OFFSET
 )

	)

162 
	#p‹tICCEOIR_END_OF_INTERRUPT_REGISTER_ADDRESS
 ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCEOIR_END_OF_INTERRUPT_OFFSET
 )

	)

163 
	#p‹tICCPMR_PRIORITY_MASK_REGISTER_ADDRESS
 ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCPMR_PRIORITY_MASK_OFFSET
 )

	)

164 
	#p‹tICCBPR_BINARY_POINT_REGISTER
 ( *––c⁄° vﬁ©ûê
uöt32_t
 * ) ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCBPR_BINARY_POINT_OFFSET
 ) ) )

	)

165 
	#p‹tICCRPR_RUNNING_PRIORITY_REGISTER
 ( *––c⁄° vﬁ©ûê
uöt8_t
 * ) ( 
p‹tINTERRUPT_CONTROLLER_CPU_INTERFACE_ADDRESS
 + 
p‹tICCRPR_RUNNING_PRIORITY_OFFSET
 ) ) )

	)

169 
	#p‹tBINARY_POINT_BITS
 ( ( 
uöt8_t
 ) 0x03 )

	)

172 
	#p‹tINITIAL_SPSR
 ( ( 
SèckTy≥_t
 ) 0x1‡Ë

	)

173 
	#p‹tTHUMB_MODE_BIT
 ( ( 
SèckTy≥_t
 ) 0x20 )

	)

174 
	#p‹tTHUMB_MODE_ADDRESS
 ( 0x01UL )

	)

177 
	#p‹tAPSR_MODE_BITS_MASK
 ( 0x1F )

	)

181 
	#p‹tAPSR_USER_MODE
 ( 0x10 )

	)

184 
	#p‹tCLEAR_INTERRUPT_MASK
(Ë\

	)

186 
__dißbÀ_úq
(); \

187 
	gp‹tICCPMR_PRIORITY_MASK_REGISTER
 = 
p‹tUNMASK_VALUE
; \

188 
__asm
( "DSB \n" \

190 
__íabÀ_úq
(); \

199 
vP‹tRe°‹eTaskC⁄ãxt
( );

208 vﬁ©ûê
uöt32_t
 
	gulCrôiˇlNe°ög
 = 9999UL;

213 
uöt32_t
 
ulICCIAR
 
__©åibuã__
––
©
–
p‹tICCIAR_INTERRUPT_ACKNOWLEDGE_REGISTER_ADDRESS
 ) ) );

214 
uöt32_t
 
ulICCEOIR
 
__©åibuã__
––
©
–
p‹tICCEOIR_END_OF_INTERRUPT_REGISTER_ADDRESS
 ) ) );

215 
uöt32_t
 
ulICCPMR
 
__©åibuã__
––
©
–
p‹tICCPMR_PRIORITY_MASK_REGISTER_ADDRESS
 ) ) );

216 
uöt32_t
 
ulAsmAPIPri‹ôyMask
 
__©åibuã__
––
©
–
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 ) ) );

220 
uöt32_t
 
	gulP‹tTaskHasFPUC⁄ãxt
 = 
pdFALSE
;

223 
uöt32_t
 
	gulP‹tYõldRequúed
 = 
pdFALSE
;

227 
uöt32_t
 
	gulP‹tI¡îru±Ne°ög
 = 0UL;

234 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

242 *
pxT›OfSèck
 = 
NULL
;

243 
pxT›OfSèck
--;

244 *
pxT›OfSèck
 = 
NULL
;

245 
pxT›OfSèck
--;

246 *
pxT›OfSèck
 = 
NULL
;

247 
pxT›OfSèck
--;

248 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tINITIAL_SPSR
;

250 if–––
uöt32_t
 ) 
pxCode
 & 
p‹tTHUMB_MODE_ADDRESS
 ) != 0x00UL )

253 *
pxT›OfSèck
 |
p‹tTHUMB_MODE_BIT
;

256 
pxT›OfSèck
--;

259 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

260 
pxT›OfSèck
--;

263 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00000000;

264 
pxT›OfSèck
--;

265 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x12121212;

266 
pxT›OfSèck
--;

267 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11111111;

268 
pxT›OfSèck
--;

269 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x10101010;

270 
pxT›OfSèck
--;

271 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x09090909;

272 
pxT›OfSèck
--;

273 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x08080808;

274 
pxT›OfSèck
--;

275 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x07070707;

276 
pxT›OfSèck
--;

277 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x06060606;

278 
pxT›OfSèck
--;

279 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x05050505;

280 
pxT›OfSèck
--;

281 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x04040404;

282 
pxT›OfSèck
--;

283 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x03030303;

284 
pxT›OfSèck
--;

285 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x02020202;

286 
pxT›OfSèck
--;

287 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x01010101;

288 
pxT›OfSèck
--;

289 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

290 
pxT›OfSèck
--;

294 *
pxT›OfSèck
 = 
p‹tNO_CRITICAL_NESTING
;

295 
pxT›OfSèck
--;

300 *
pxT›OfSèck
 = 
p‹tNO_FLOATING_POINT_CONTEXT
;

302  
pxT›OfSèck
;

303 
	}
}

306 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

308 
uöt32_t
 
ulAPSR
;

312 
	`__asm
( "MRS ulAPSR, APSR" );

313 
ulAPSR
 &
p‹tAPSR_MODE_BITS_MASK
;

314 
	`c⁄figASSERT
–
ulAPSR
 !
p‹tAPSR_USER_MODE
 );

316 if–
ulAPSR
 !
p‹tAPSR_USER_MODE
 )

321 
	`c⁄figASSERT
––
p‹tICCBPR_BINARY_POINT_REGISTER
 & 
p‹tBINARY_POINT_BITS
 ) <
p‹tMAX_BINARY_POINT_VALUE
 );

323 if––
p‹tICCBPR_BINARY_POINT_REGISTER
 & 
p‹tBINARY_POINT_BITS
 ) <
p‹tMAX_BINARY_POINT_VALUE
 )

326 
	`c⁄figSETUP_TICK_INTERRUPT
();

328 
	`__íabÀ_úq
();

329 
	`vP‹tRe°‹eTaskC⁄ãxt
();

337 
	}
}

340 
	$vP‹tEndScheduÀr
( )

344 
	`c⁄figASSERT
–
ulCrôiˇlNe°ög
 == 1000UL );

345 
	}
}

348 
	$vP‹tE¡îCrôiˇl
( )

351 
	`ulP‹tSëI¡îru±Mask
();

356 
ulCrôiˇlNe°ög
++;

357 
	}
}

360 
	$vP‹tExôCrôiˇl
( )

362 if–
ulCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_NESTING
 )

366 
ulCrôiˇlNe°ög
--;

370 if–
ulCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_NESTING
 )

374 
	`p‹tCLEAR_INTERRUPT_MASK
();

377 
	}
}

380 
	$FªeRTOS_Tick_H™dÀr
( )

385 
	`__dißbÀ_úq
();

386 
p‹tICCPMR_PRIORITY_MASK_REGISTER
 = ( 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 );

387 
	`__asm
( "DSB \n"

389 
	`__íabÀ_úq
();

392 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

394 
ulP‹tYõldRequúed
 = 
pdTRUE
;

398 
	`p‹tCLEAR_INTERRUPT_MASK
();

399 
	`c⁄figCLEAR_TICK_INTERRUPT
();

400 
	}
}

403 
	$vP‹tTaskU£sFPU
( )

405 
uöt32_t
 
ulInôülFPSCR
 = 0;

409 
ulP‹tTaskHasFPUC⁄ãxt
 = 
pdTRUE
;

412 
	`__asm
( "FMXR FPSCR, ulInitialFPSCR" );

413 
	}
}

416 
	$vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 )

418 if–
ulNewMaskVÆue
 =
pdFALSE
 )

420 
	`p‹tCLEAR_INTERRUPT_MASK
();

422 
	}
}

425 
uöt32_t
 
	$ulP‹tSëI¡îru±Mask
( )

427 
uöt32_t
 
ulRëu∫
;

429 
	`__dißbÀ_úq
();

430 if–
p‹tICCPMR_PRIORITY_MASK_REGISTER
 =–
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 ) )

433 
ulRëu∫
 = 
pdTRUE
;

437 
ulRëu∫
 = 
pdFALSE
;

438 
p‹tICCPMR_PRIORITY_MASK_REGISTER
 = ( 
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 );

439 
	`__asm
( "DSB \n"

442 
	`__íabÀ_úq
();

444  
ulRëu∫
;

445 
	}
}

448 #if–
c⁄figASSERT_DEFINED
 == 1 )

450 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

470 
	`c⁄figASSERT
–
p‹tICCRPR_RUNNING_PRIORITY_REGISTER
 >–
c⁄figMAX_API_CALL_INTERRUPT_PRIORITY
 << 
p‹tPRIORITY_SHIFT
 ) );

482 
	`c⁄figASSERT
–
p‹tICCBPR_BINARY_POINT_REGISTER
 <
p‹tMAX_BINARY_POINT_VALUE
 );

483 
	}
}

	@portable/RVDS/ARM_CA9/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

116 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 )\

	)

118 
uöt32_t
 
ulP‹tYõldRequúed
; \

120 if–
	gxSwôchRequúed
 !
pdFALSE
 ) \

122 
ulP‹tYõldRequúed
 = 
pdTRUE
; \

126 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

127 
	#p‹tYIELD
(Ë
	`__asm
–"SWI 0" );

	)

134 
vP‹tE¡îCrôiˇl
( );

135 
vP‹tExôCrôiˇl
( );

136 
uöt32_t
 
ulP‹tSëI¡îru±Mask
( );

137 
vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMaskVÆue
 );

141 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
();

	)

142 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
();

	)

143 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

144 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
–0 )

	)

145 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

146 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
(x)

	)

153 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

154 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

158 
FªeRTOS_Tick_H™dÀr
( );

162 
vP‹tTaskU£sFPU
( );

163 
	#p‹tTASK_USES_FLOATING_POINT
(Ë
	`vP‹tTaskU£sFPU
()

	)

165 
	#p‹tLOWEST_INTERRUPT_PRIORITY
 ( ( ( 
uöt32_t
 ) 
c⁄figUNIQUE_INTERRUPT_PRIORITIES
 ) - 1UL )

	)

166 
	#p‹tLOWEST_USABLE_INTERRUPT_PRIORITY
 ( 
p‹tLOWEST_INTERRUPT_PRIORITY
 - 1UL )

	)

169 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

172 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

173 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

177 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`__˛z
–uxRódyPri‹ôõ†Ë)

	)

181 #ifde‡
c⁄figASSERT


182 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

183 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

186 
	#p‹tNOP
(Ë
	`__n›
()

	)

188 #ifde‡
__˝lu•lus


	@portable/RVDS/ARM_CM0/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000e010 )

	)

76 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000e014 )

	)

77 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000ed04 )

	)

78 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê
uöt32_t
 *Ë0xe000ed20 )

	)

79 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

80 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

81 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

82 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

83 
	#p‹tMIN_INTERRUPT_PRIORITY
 ( 255UL )

	)

84 
	#p‹tNVIC_PENDSV_PRI
 ( 
p‹tMIN_INTERRUPT_PRIORITY
 << 16UL )

	)

85 
	#p‹tNVIC_SYSTICK_PRI
 ( 
p‹tMIN_INTERRUPT_PRIORITY
 << 24UL )

	)

88 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

91 
	#p‹tSY_FULL_READ_WRITE
 ( 15 )

	)

95 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

100 
¥vSëupTimîI¡îru±
( );

105 
xP‹tPídSVH™dÀr
( );

106 
xP‹tSysTickH™dÀr
( );

107 
vP‹tSVCH™dÀr
( );

112 
¥vP‹tSèπFú°Task
( );

117 
¥vTaskExôEº‹
( );

124 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

128 
pxT›OfSèck
--;

129 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

130 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

132 
pxT›OfSèck
--;

133 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
¥vTaskExôEº‹
;

134 
pxT›OfSèck
 -= 5;

135 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

136 
pxT›OfSèck
 -= 8;

138  
pxT›OfSèck
;

139 
	}
}

142 
	$¥vTaskExôEº‹
( )

150 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

151 
	`p‹tDISABLE_INTERRUPTS
();

153 
	}
}

156 
	$vP‹tSVCH™dÀr
( )

160 
	}
}

163 
__asm
 
	$¥vP‹tSèπFú°Task
( )

165 
pxCuºítTCB
;

167 
PRESERVE8


173 
ldr
 
r3
, =
pxCuºítTCB


174 
ldr
 
r1
, [
r3
]

175 
ldr
 
r0
, [
r1
]

176 
adds
 
r0
, #32

177 
m§
 
p•
, 
r0


178 
movs
 
r0
, #2

179 
m§
 
CONTROL
, 
r0


180 
p›
 {
r0
-
r5
}

181 
mov
 
Ã
, 
r5


182 
˝sõ
 
i


183 
p›
 {
pc
}

185 
ALIGN


186 
	}
}

192 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

195 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

196 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

200 
	`¥vSëupTimîI¡îru±
();

203 
uxCrôiˇlNe°ög
 = 0;

206 
	`¥vP‹tSèπFú°Task
();

210 
	}
}

213 
	$vP‹tEndScheduÀr
( )

217 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

218 
	}
}

221 
	$vP‹tYõld
( )

224 *–
p‹tNVIC_INT_CTRL
 ) = 
p‹tNVIC_PENDSVSET
;

228 
	`__dsb
–
p‹tSY_FULL_READ_WRITE
 );

229 
	`__isb
–
p‹tSY_FULL_READ_WRITE
 );

230 
	}
}

233 
	$vP‹tE¡îCrôiˇl
( )

235 
	`p‹tDISABLE_INTERRUPTS
();

236 
uxCrôiˇlNe°ög
++;

237 
	`__dsb
–
p‹tSY_FULL_READ_WRITE
 );

238 
	`__isb
–
p‹tSY_FULL_READ_WRITE
 );

239 
	}
}

242 
	$vP‹tExôCrôiˇl
( )

244 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

245 
uxCrôiˇlNe°ög
--;

246 if–
uxCrôiˇlNe°ög
 == 0 )

248 
	`p‹tENABLE_INTERRUPTS
();

250 
	}
}

253 
__asm
 
uöt32_t
 
	$ulSëI¡îru±MaskFromISR
( )

255 
mrs
 
r0
, 
PRIMASK


256 
˝sid
 
i


257 
bx
 
Ã


258 
	}
}

261 
__asm
 
	$vCÀ¨I¡îru±MaskFromISR
–
uöt32_t
 
ulMask
 )

263 
m§
 
PRIMASK
, 
r0


264 
bx
 
Ã


265 
	}
}

268 
__asm
 
	$xP‹tPídSVH™dÀr
( )

270 
vTaskSwôchC⁄ãxt


271 
pxCuºítTCB


273 
PRESERVE8


275 
mrs
 
r0
, 
p•


277 
ldr
 
r3
, =
pxCuºítTCB


278 
ldr
 
r2
, [
r3
]

280 
subs
 
r0
, #32

281 
°r
 
r0
, [
r2
]

282 
°mü
 
r0
!, {
r4
-
r7
}

283 
mov
 
r4
, 
r8


284 
mov
 
r5
, 
r9


285 
mov
 
r6
, 
r10


286 
mov
 
r7
, 
r11


287 
°mü
 
r0
!, {
r4
-
r7
}

289 
push
 {
r3
, 
r14
}

290 
˝sid
 
i


291 
bl
 
vTaskSwôchC⁄ãxt


292 
˝sõ
 
i


293 
p›
 {
r2
, 
r3
}

295 
ldr
 
r1
, [
r2
]

296 
ldr
 
r0
, [
r1
]

297 
adds
 
r0
, #16

298 
ldmü
 
r0
!, {
r4
-
r7
}

299 
mov
 
r8
, 
r4


300 
mov
 
r9
, 
r5


301 
mov
 
r10
, 
r6


302 
mov
 
r11
, 
r7


304 
m§
 
p•
, 
r0


306 
subs
 
r0
, #32

307 
ldmü
 
r0
!, {
r4
-
r7
}

309 
bx
 
r3


310 
ALIGN


311 
	}
}

314 
	$xP‹tSysTickH™dÀr
( )

316 
uöt32_t
 
ulPªviousMask
;

318 
ulPªviousMask
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

321 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

324 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

327 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulPªviousMask
 );

328 
	}
}

335 
	$¥vSëupTimîI¡îru±
( )

338 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

339 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

340 
	}
}

	@portable/RVDS/ARM_CM0/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

114 
vP‹tYõld
( );

115 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

116 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

117 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

118 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT


	)

119 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

123 
vP‹tE¡îCrôiˇl
( );

124 
vP‹tExôCrôiˇl
( );

125 
uöt32_t
 
ulSëI¡îru±MaskFromISR
( );

126 
vCÀ¨I¡îru±MaskFromISR
–
uöt32_t
 
ulMask
 );

128 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulSëI¡îru±MaskFromISR
()

	)

129 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vCÀ¨I¡îru±MaskFromISR
–x )

	)

130 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__dißbÀ_úq
()

	)

131 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__íabÀ_úq
()

	)

132 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

133 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

138 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

139 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

141 
	#p‹tNOP
()

	)

143 #ifde‡
__˝lu•lus


	@portable/RVDS/ARM_CM3/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

74 #i‚de‡
c⁄figKERNEL_INTERRUPT_PRIORITY


75 
	#c⁄figKERNEL_INTERRUPT_PRIORITY
 255

	)

78 #i‡
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 == 0

79 #îr‹ 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 
mu°
 
nŸ
 
be
 
£t
 
to
 0. 
Sì
 
hâp
:

82 #i‚de‡
c⁄figSYSTICK_CLOCK_HZ


83 
	#c⁄figSYSTICK_CLOCK_HZ
 
c⁄figCPU_CLOCK_HZ


	)

85 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 1UL << 2UL )

	)

89 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 0 )

	)

97 #i‚de‡
c⁄figOVERRIDE_DEFAULT_TICK_CONFIGURATION


98 
	#c⁄figOVERRIDE_DEFAULT_TICK_CONFIGURATION
 0

	)

102 
	#p‹tNVIC_SYSTICK_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 ) )

	)

103 
	#p‹tNVIC_SYSTICK_LOAD_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 ) )

	)

104 
	#p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e018 ) )

	)

105 
	#p‹tNVIC_SYSPRI2_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 ) )

	)

107 
	#p‹tNVIC_SYSTICK_INT_BIT
 ( 1UL << 1UL )

	)

108 
	#p‹tNVIC_SYSTICK_ENABLE_BIT
 ( 1UL << 0UL )

	)

109 
	#p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ( 1UL << 16UL )

	)

110 
	#p‹tNVIC_PENDSVCLEAR_BIT
 ( 1UL << 27UL )

	)

111 
	#p‹tNVIC_PEND_SYSTICK_CLEAR_BIT
 ( 1UL << 25UL )

	)

113 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

114 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

117 
	#p‹tFIRST_USER_INTERRUPT_NUMBER
 ( 16 )

	)

118 
	#p‹tNVIC_IP_REGISTERS_OFFSET_16
 ( 0xE000E3F0 )

	)

119 
	#p‹tAIRCR_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xE000ED0C ) )

	)

120 
	#p‹tMAX_8_BIT_VALUE
 ( ( 
uöt8_t
 ) 0xf‡)

	)

121 
	#p‹tTOP_BIT_OF_BYTE
 ( ( 
uöt8_t
 ) 0x80 )

	)

122 
	#p‹tMAX_PRIGROUP_BITS
 ( ( 
uöt8_t
 ) 7 )

	)

123 
	#p‹tPRIORITY_GROUP_MASK
 ( 0x07UL << 8UL )

	)

124 
	#p‹tPRIGROUP_SHIFT
 ( 8UL )

	)

127 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

130 
	#p‹tSY_FULL_READ_WRITE
 ( 15 )

	)

133 
	#p‹tMAX_24_BIT_NUMBER
 ( 0xffffffUL )

	)

138 
	#p‹tMISSED_COUNTS_FACTOR
 ( 45UL )

	)

142 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

149 
vP‹tSëupTimîI¡îru±
( );

154 
xP‹tPídSVH™dÀr
( );

155 
xP‹tSysTickH™dÀr
( );

156 
vP‹tSVCH™dÀr
( );

161 
¥vSèπFú°Task
( );

166 
¥vTaskExôEº‹
( );

173 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

174 
uöt32_t
 
	gulTimîCou¡sF‹O√Tick
 = 0;

181 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

182 
uöt32_t
 
	gxMaximumPossibÀSuµªs£dTicks
 = 0;

189 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

190 
uöt32_t
 
	gulSt›≥dTimîCom≥nßti⁄
 = 0;

198 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

199 
uöt8_t
 
	gucMaxSysCÆlPri‹ôy
 = 0;

200 
uöt32_t
 
	gulMaxPRIGROUPVÆue
 = 0;

201 c⁄° vﬁ©ûê
uöt8_t
 * c⁄° 
	gpcI¡îru±Pri‹ôyRegi°îs
 = ( uöt8_à* ) 
p‹tNVIC_IP_REGISTERS_OFFSET_16
;

209 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

213 
pxT›OfSèck
--;

214 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

215 
pxT›OfSèck
--;

216 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

217 
pxT›OfSèck
--;

218 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
¥vTaskExôEº‹
;

220 
pxT›OfSèck
 -= 5;

221 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

222 
pxT›OfSèck
 -= 8;

224  
pxT›OfSèck
;

225 
	}
}

228 
	$¥vTaskExôEº‹
( )

236 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

237 
	`p‹tDISABLE_INTERRUPTS
();

239 
	}
}

242 
__asm
 
	$vP‹tSVCH™dÀr
( )

244 
PRESERVE8


246 
ldr
 
r3
, =
pxCuºítTCB


247 
ldr
 
r1
, [
r3
]

248 
ldr
 
r0
, [
r1
]

249 
ldmü
 
r0
!, {
r4
-
r11
}

250 
m§
 
p•
, 
r0


251 
isb


252 
mov
 
r0
, #0

253 
m§
 
ba£¥i
, 
r0


254 
‹r
 
r14
, #0
xd


255 
bx
 
r14


256 
	}
}

259 
__asm
 
	$¥vSèπFú°Task
( )

261 
PRESERVE8


264 
ldr
 
r0
, =0xE000ED08

265 
ldr
 
r0
, [r0]

266 
ldr
 
r0
, [r0]

268 
m§
 
m•
, 
r0


270 
˝sõ
 
i


271 
dsb


272 
isb


274 
svc
 0

275 
n›


276 
	}
}

282 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

284 #if–
c⁄figASSERT_DEFINED
 == 1 )

286 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

287 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( uöt8_à* ) ( 
p‹tNVIC_IP_REGISTERS_OFFSET_16
 + 
p‹tFIRST_USER_INTERRUPT_NUMBER
 );

288 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

296 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

300 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

303 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

306 
ucMaxSysCÆlPri‹ôy
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 & 
ucMaxPri‹ôyVÆue
;

310 
ulMaxPRIGROUPVÆue
 = 
p‹tMAX_PRIGROUP_BITS
;

311  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tTOP_BIT_OF_BYTE
 ) ==ÖortTOP_BIT_OF_BYTE )

313 
ulMaxPRIGROUPVÆue
--;

314 
ucMaxPri‹ôyVÆue
 <<–
uöt8_t
 ) 0x01;

319 
ulMaxPRIGROUPVÆue
 <<
p‹tPRIGROUP_SHIFT
;

320 
ulMaxPRIGROUPVÆue
 &
p‹tPRIORITY_GROUP_MASK
;

324 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

329 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_PENDSV_PRI
;

330 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_SYSTICK_PRI
;

334 
	`vP‹tSëupTimîI¡îru±
();

337 
uxCrôiˇlNe°ög
 = 0;

340 
	`¥vSèπFú°Task
();

344 
	}
}

347 
	$vP‹tEndScheduÀr
( )

351 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

352 
	}
}

355 
	$vP‹tYõld
( )

358 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

362 
	`__dsb
–
p‹tSY_FULL_READ_WRITE
 );

363 
	`__isb
–
p‹tSY_FULL_READ_WRITE
 );

364 
	}
}

367 
	$vP‹tE¡îCrôiˇl
( )

369 
	`p‹tDISABLE_INTERRUPTS
();

370 
uxCrôiˇlNe°ög
++;

371 
	`__dsb
–
p‹tSY_FULL_READ_WRITE
 );

372 
	`__isb
–
p‹tSY_FULL_READ_WRITE
 );

373 
	}
}

376 
	$vP‹tExôCrôiˇl
( )

378 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

379 
uxCrôiˇlNe°ög
--;

380 if–
uxCrôiˇlNe°ög
 == 0 )

382 
	`p‹tENABLE_INTERRUPTS
();

384 
	}
}

387 
__asm
 
	$xP‹tPídSVH™dÀr
( )

389 
uxCrôiˇlNe°ög
;

390 
pxCuºítTCB
;

391 
vTaskSwôchC⁄ãxt
;

393 
PRESERVE8


395 
mrs
 
r0
, 
p•


396 
isb


398 
ldr
 
r3
, =
pxCuºítTCB


399 
ldr
 
r2
, [
r3
]

401 
°mdb
 
r0
!, {
r4
-
r11
}

402 
°r
 
r0
, [
r2
]

404 
°mdb
 
•
!, {
r3
, 
r14
}

405 
mov
 
r0
, #configMAX_SYSCALL_INTERRUPT_PRIORITY

406 
m§
 
ba£¥i
, 
r0


407 
bl
 
vTaskSwôchC⁄ãxt


408 
mov
 
r0
, #0

409 
m§
 
ba£¥i
, 
r0


410 
ldmü
 
•
!, {
r3
, 
r14
}

412 
ldr
 
r1
, [
r3
]

413 
ldr
 
r0
, [
r1
]

414 
ldmü
 
r0
!, {
r4
-
r11
}

415 
m§
 
p•
, 
r0


416 
isb


417 
bx
 
r14


418 
n›


419 
	}
}

422 
	$xP‹tSysTickH™dÀr
( )

428 –Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

431 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

435 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

438 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
( 0 );

439 
	}
}

442 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

444 
__wók
 
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

446 
uöt32_t
 
ulRñﬂdVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCom∂ëedSysTickDe¸emíts
, 
ulSysTickCTRL
;

447 
TickTy≥_t
 
xModifübÀIdÀTime
;

450 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

452 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

459 
p‹tNVIC_SYSTICK_CTRL_REG
 &~
p‹tNVIC_SYSTICK_ENABLE_BIT
;

464 
ulRñﬂdVÆue
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 + ( 
ulTimîCou¡sF‹O√Tick
 * ( 
xEx≥˘edIdÀTime
 - 1UL ) );

465 if–
ulRñﬂdVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

467 
ulRñﬂdVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

472 
	`__dißbÀ_úq
();

476 if–
	`eTaskC⁄fúmSÀïModeSètus
(Ë=
eAb‹tSÀï
 )

480 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

483 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

487 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

491 
	`__íabÀ_úq
();

496 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulRñﬂdVÆue
;

500 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

503 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

510 
xModifübÀIdÀTime
 = 
xEx≥˘edIdÀTime
;

511 
	`c⁄figPRE_SLEEP_PROCESSING
–
xModifübÀIdÀTime
 );

512 if–
xModifübÀIdÀTime
 > 0 )

514 
	`__dsb
–
p‹tSY_FULL_READ_WRITE
 );

515 
	`__wfi
();

516 
	`__isb
–
p‹tSY_FULL_READ_WRITE
 );

518 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

524 
ulSysTickCTRL
 = 
p‹tNVIC_SYSTICK_CTRL_REG
;

525 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
ulSysTickCTRL
 & ~
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

529 
	`__íabÀ_úq
();

531 if––
ulSysTickCTRL
 & 
p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ) != 0 )

533 
uöt32_t
 
ulCÆcuœãdLﬂdVÆue
;

539 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL ) - ( 
ulRñﬂdVÆue
 - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 );

544 if––
ulCÆcuœãdLﬂdVÆue
 < 
ulSt›≥dTimîCom≥nßti⁄
 ) || ( ulCÆcuœãdLﬂdVÆuê> 
ulTimîCou¡sF‹O√Tick
 ) )

546 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL );

549 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulCÆcuœãdLﬂdVÆue
;

556 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

564 
ulCom∂ëedSysTickDe¸emíts
 = ( 
xEx≥˘edIdÀTime
 * 
ulTimîCou¡sF‹O√Tick
 ) - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

568 
ulCom∂ëeTickPîiods
 = 
ulCom∂ëedSysTickDe¸emíts
 / 
ulTimîCou¡sF‹O√Tick
;

572 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( ( 
ulCom∂ëeTickPîiods
 + 1 ) * 
ulTimîCou¡sF‹O√Tick
 ) - 
ulCom∂ëedSysTickDe¸emíts
;

580 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

581 
	`p‹tENTER_CRITICAL
();

583 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

584 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

585 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

587 
	`p‹tEXIT_CRITICAL
();

589 
	}
}

599 #i‡
c⁄figOVERRIDE_DEFAULT_TICK_CONFIGURATION
 == 0

601 
	$vP‹tSëupTimîI¡îru±
( )

604 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

606 
ulTimîCou¡sF‹O√Tick
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

607 
xMaximumPossibÀSuµªs£dTicks
 = 
p‹tMAX_24_BIT_NUMBER
 / 
ulTimîCou¡sF‹O√Tick
;

608 
ulSt›≥dTimîCom≥nßti⁄
 = 
p‹tMISSED_COUNTS_FACTOR
 / ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figSYSTICK_CLOCK_HZ
 );

613 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

614 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 | 
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

615 
	}
}

620 
__asm
 
uöt32_t
 
	$ulP‹tSëI¡îru±Mask
( )

622 
PRESERVE8


624 
mrs
 
r0
, 
ba£¥i


625 
mov
 
r1
, #configMAX_SYSCALL_INTERRUPT_PRIORITY

626 
m§
 
ba£¥i
, 
r1


627 
bx
 
r14


628 
	}
}

631 
__asm
 
	$vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMask
 )

633 
PRESERVE8


635 
m§
 
ba£¥i
, 
r0


636 
bx
 
r14


637 
	}
}

640 
__asm
 
uöt32_t
 
	$vP‹tGëIPSR
( )

642 
PRESERVE8


644 
mrs
 
r0
, 
ù§


645 
bx
 
r14


646 
	}
}

649 #if–
c⁄figASSERT_DEFINED
 == 1 )

651 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

653 
uöt32_t
 
ulCuºítI¡îru±
;

654 
uöt8_t
 
ucCuºítPri‹ôy
;

657 
ulCuºítI¡îru±
 = 
	`vP‹tGëIPSR
();

660 if–
ulCuºítI¡îru±
 >
p‹tFIRST_USER_INTERRUPT_NUMBER
 )

663 
ucCuºítPri‹ôy
 = 
pcI¡îru±Pri‹ôyRegi°îs
[ 
ulCuºítI¡îru±
 ];

688 
	`c⁄figASSERT
–
ucCuºítPri‹ôy
 >
ucMaxSysCÆlPri‹ôy
 );

704 
	`c⁄figASSERT
––
p‹tAIRCR_REG
 & 
p‹tPRIORITY_GROUP_MASK
 ) <
ulMaxPRIGROUPVÆue
 );

705 
	}
}

	@portable/RVDS/ARM_CM3/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

113 
vP‹tYõld
( );

114 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

115 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

116 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

117 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT


	)

118 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

122 
uöt32_t
 
ulP‹tSëI¡îru±Mask
( );

123 
vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMask
 );

124 
vP‹tE¡îCrôiˇl
( );

125 
vP‹tExôCrôiˇl
( );

127 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

128 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
–0 )

	)

129 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

130 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

131 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

132 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
(x)

	)

136 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


137 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

138 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

143 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

146 #if–
c⁄figMAX_PRIORITIES
 > 32 )

147 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

151 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

152 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

156 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`__˛z
––uxRódyPri‹ôõ†ËË)

	)

164 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

165 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

168 #ifde‡
c⁄figASSERT


169 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

170 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

174 
	#p‹tNOP
()

	)

176 #ifde‡
__˝lu•lus


	@portable/RVDS/ARM_CM4F/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

74 #i‚de‡
__TARGET_FPU_VFP


75 #îr‹ 
This
 
p‹t
 
ˇn
 
⁄ly
 
be
 
u£d
 
whí
 
the
 
¥oje˘
 
›ti⁄s
 
¨e
 
c⁄figuªd
 
to
 
íabÀ
 
h¨dw¨e
 
Êﬂtög
 
poöt
 
suµ‹t
.

78 #i‡
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 == 0

79 #îr‹ 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 
mu°
 
nŸ
 
be
 
£t
 
to
 0. 
Sì
 
hâp
:

82 #i‚de‡
c⁄figSYSTICK_CLOCK_HZ


83 
	#c⁄figSYSTICK_CLOCK_HZ
 
c⁄figCPU_CLOCK_HZ


	)

85 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 1UL << 2UL )

	)

89 
	#p‹tNVIC_SYSTICK_CLK_BIT
 ( 0 )

	)

97 #i‚de‡
c⁄figOVERRIDE_DEFAULT_TICK_CONFIGURATION


98 
	#c⁄figOVERRIDE_DEFAULT_TICK_CONFIGURATION
 0

	)

102 
	#p‹tNVIC_SYSTICK_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 ) )

	)

103 
	#p‹tNVIC_SYSTICK_LOAD_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 ) )

	)

104 
	#p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e018 ) )

	)

105 
	#p‹tNVIC_SYSPRI2_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 ) )

	)

107 
	#p‹tNVIC_SYSTICK_INT_BIT
 ( 1UL << 1UL )

	)

108 
	#p‹tNVIC_SYSTICK_ENABLE_BIT
 ( 1UL << 0UL )

	)

109 
	#p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ( 1UL << 16UL )

	)

110 
	#p‹tNVIC_PENDSVCLEAR_BIT
 ( 1UL << 27UL )

	)

111 
	#p‹tNVIC_PEND_SYSTICK_CLEAR_BIT
 ( 1UL << 25UL )

	)

113 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16UL )

	)

114 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24UL )

	)

117 
	#p‹tFIRST_USER_INTERRUPT_NUMBER
 ( 16 )

	)

118 
	#p‹tNVIC_IP_REGISTERS_OFFSET_16
 ( 0xE000E3F0 )

	)

119 
	#p‹tAIRCR_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xE000ED0C ) )

	)

120 
	#p‹tMAX_8_BIT_VALUE
 ( ( 
uöt8_t
 ) 0xf‡)

	)

121 
	#p‹tTOP_BIT_OF_BYTE
 ( ( 
uöt8_t
 ) 0x80 )

	)

122 
	#p‹tMAX_PRIGROUP_BITS
 ( ( 
uöt8_t
 ) 7 )

	)

123 
	#p‹tPRIORITY_GROUP_MASK
 ( 0x07UL << 8UL )

	)

124 
	#p‹tPRIGROUP_SHIFT
 ( 8UL )

	)

127 
	#p‹tFPCCR
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ef34 )

	)

128 
	#p‹tASPEN_AND_LSPEN_BITS
 ( 0x3UL << 30UL )

	)

131 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

132 
	#p‹tINITIAL_EXEC_RETURN
 ( 0xfffffffd )

	)

135 
	#p‹tSY_FULL_READ_WRITE
 ( 15 )

	)

138 
	#p‹tMAX_24_BIT_NUMBER
 ( 0xffffffUL )

	)

143 
	#p‹tMISSED_COUNTS_FACTOR
 ( 45UL )

	)

147 
UBa£Ty≥_t
 
	guxCrôiˇlNe°ög
 = 0xaaaaaaaa;

154 
vP‹tSëupTimîI¡îru±
( );

159 
xP‹tPídSVH™dÀr
( );

160 
xP‹tSysTickH™dÀr
( );

161 
vP‹tSVCH™dÀr
( );

166 
¥vSèπFú°Task
( );

171 
¥vE«bÀVFP
( );

176 
¥vTaskExôEº‹
( );

183 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

184 
uöt32_t
 
	gulTimîCou¡sF‹O√Tick
 = 0;

191 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

192 
uöt32_t
 
	gxMaximumPossibÀSuµªs£dTicks
 = 0;

199 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

200 
uöt32_t
 
	gulSt›≥dTimîCom≥nßti⁄
 = 0;

208 #i‡–
c⁄figASSERT_DEFINED
 == 1 )

209 
uöt8_t
 
	gucMaxSysCÆlPri‹ôy
 = 0;

210 
uöt32_t
 
	gulMaxPRIGROUPVÆue
 = 0;

211 c⁄° vﬁ©ûê
uöt8_t
 * c⁄° 
	gpcI¡îru±Pri‹ôyRegi°îs
 = ( uöt8_à* ) 
p‹tNVIC_IP_REGISTERS_OFFSET_16
;

219 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

226 
pxT›OfSèck
--;

228 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

229 
pxT›OfSèck
--;

230 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

231 
pxT›OfSèck
--;

232 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
¥vTaskExôEº‹
;

235 
pxT›OfSèck
 -= 5;

236 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

240 
pxT›OfSèck
--;

241 *
pxT›OfSèck
 = 
p‹tINITIAL_EXEC_RETURN
;

243 
pxT›OfSèck
 -= 8;

245  
pxT›OfSèck
;

246 
	}
}

249 
	$¥vTaskExôEº‹
( )

257 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == ~0UL );

258 
	`p‹tDISABLE_INTERRUPTS
();

260 
	}
}

263 
__asm
 
	$vP‹tSVCH™dÀr
( )

265 
PRESERVE8


268 
ldr
 
r3
, =
pxCuºítTCB


269 
ldr
 
r1
, [
r3
]

270 
ldr
 
r0
, [
r1
]

272 
ldmü
 
r0
!, {
r4
-
r11
, 
r14
}

273 
m§
 
p•
, 
r0


274 
isb


275 
mov
 
r0
, #0

276 
m§
 
ba£¥i
, 
r0


277 
bx
 
r14


278 
	}
}

281 
__asm
 
	$¥vSèπFú°Task
( )

283 
PRESERVE8


286 
ldr
 
r0
, =0xE000ED08

287 
ldr
 
r0
, [r0]

288 
ldr
 
r0
, [r0]

290 
m§
 
m•
, 
r0


292 
˝sõ
 
i


293 
dsb


294 
isb


296 
svc
 0

297 
n›


298 
	}
}

301 
__asm
 
	$¥vE«bÀVFP
( )

303 
PRESERVE8


306 
ldr
.
w
 
r0
, =0xE000ED88

307 
ldr
 
r1
, [
r0
]

310 
‹r
 
r1
,Ñ1, #( 0xf << 20 )

311 
°r
 
r1
, [
r0
]

312 
bx
 
r14


313 
n›


314 
	}
}

320 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

322 #if–
c⁄figASSERT_DEFINED
 == 1 )

324 vﬁ©ûê
uöt32_t
 
ulOrigöÆPri‹ôy
;

325 vﬁ©ûê
uöt8_t
 * c⁄° 
pucFú°U£rPri‹ôyRegi°î
 = ( uöt8_à* ) ( 
p‹tNVIC_IP_REGISTERS_OFFSET_16
 + 
p‹tFIRST_USER_INTERRUPT_NUMBER
 );

326 vﬁ©ûê
uöt8_t
 
ucMaxPri‹ôyVÆue
;

334 
ulOrigöÆPri‹ôy
 = *
pucFú°U£rPri‹ôyRegi°î
;

338 *
pucFú°U£rPri‹ôyRegi°î
 = 
p‹tMAX_8_BIT_VALUE
;

341 
ucMaxPri‹ôyVÆue
 = *
pucFú°U£rPri‹ôyRegi°î
;

344 
ucMaxSysCÆlPri‹ôy
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 & 
ucMaxPri‹ôyVÆue
;

348 
ulMaxPRIGROUPVÆue
 = 
p‹tMAX_PRIGROUP_BITS
;

349  ( 
ucMaxPri‹ôyVÆue
 & 
p‹tTOP_BIT_OF_BYTE
 ) ==ÖortTOP_BIT_OF_BYTE )

351 
ulMaxPRIGROUPVÆue
--;

352 
ucMaxPri‹ôyVÆue
 <<–
uöt8_t
 ) 0x01;

357 
ulMaxPRIGROUPVÆue
 <<
p‹tPRIGROUP_SHIFT
;

358 
ulMaxPRIGROUPVÆue
 &
p‹tPRIORITY_GROUP_MASK
;

362 *
pucFú°U£rPri‹ôyRegi°î
 = 
ulOrigöÆPri‹ôy
;

367 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_PENDSV_PRI
;

368 
p‹tNVIC_SYSPRI2_REG
 |
p‹tNVIC_SYSTICK_PRI
;

372 
	`vP‹tSëupTimîI¡îru±
();

375 
uxCrôiˇlNe°ög
 = 0;

378 
	`¥vE«bÀVFP
();

381 *–
p‹tFPCCR
 ) |
p‹tASPEN_AND_LSPEN_BITS
;

384 
	`¥vSèπFú°Task
();

388 
	}
}

391 
	$vP‹tEndScheduÀr
( )

395 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 == 1000UL );

396 
	}
}

399 
	$vP‹tYõld
( )

402 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

406 
	`__dsb
–
p‹tSY_FULL_READ_WRITE
 );

407 
	`__isb
–
p‹tSY_FULL_READ_WRITE
 );

408 
	}
}

411 
	$vP‹tE¡îCrôiˇl
( )

413 
	`p‹tDISABLE_INTERRUPTS
();

414 
uxCrôiˇlNe°ög
++;

415 
	`__dsb
–
p‹tSY_FULL_READ_WRITE
 );

416 
	`__isb
–
p‹tSY_FULL_READ_WRITE
 );

417 
	}
}

420 
	$vP‹tExôCrôiˇl
( )

422 
	`c⁄figASSERT
–
uxCrôiˇlNe°ög
 );

423 
uxCrôiˇlNe°ög
--;

424 if–
uxCrôiˇlNe°ög
 == 0 )

426 
	`p‹tENABLE_INTERRUPTS
();

428 
	}
}

431 
__asm
 
	$xP‹tPídSVH™dÀr
( )

433 
uxCrôiˇlNe°ög
;

434 
pxCuºítTCB
;

435 
vTaskSwôchC⁄ãxt
;

437 
PRESERVE8


439 
mrs
 
r0
, 
p•


440 
isb


442 
ldr
 
r3
, =
pxCuºítTCB


443 
ldr
 
r2
, [
r3
]

446 
t°
 
r14
, #0
x10


447 
ô
 
eq


448 
v°mdbeq
 
r0
!, {
s16
-
s31
}

451 
°mdb
 
r0
!, {
r4
-
r11
, 
r14
}

454 
°r
 
r0
, [
r2
]

456 
°mdb
 
•
!, {
r3
}

457 
mov
 
r0
, #configMAX_SYSCALL_INTERRUPT_PRIORITY

458 
m§
 
ba£¥i
, 
r0


459 
bl
 
vTaskSwôchC⁄ãxt


460 
mov
 
r0
, #0

461 
m§
 
ba£¥i
, 
r0


462 
ldmü
 
•
!, {
r3
}

465 
ldr
 
r1
, [
r3
]

466 
ldr
 
r0
, [
r1
]

469 
ldmü
 
r0
!, {
r4
-
r11
, 
r14
}

473 
t°
 
r14
, #0
x10


474 
ô
 
eq


475 
vldmüeq
 
r0
!, {
s16
-
s31
}

477 
m§
 
p•
, 
r0


478 
isb


479 #ifde‡
WORKAROUND_PMU_CM001


480 #i‡
WORKAROUND_PMU_CM001
 == 1

481 
push
 { 
r14
 }

482 
p›
 { 
pc
 }

483 
n›


487 
bx
 
r14


488 
n›


489 
	}
}

492 
	$xP‹tSysTickH™dÀr
( )

498 –Ë
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

501 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

505 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT
;

508 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
( 0 );

509 
	}
}

512 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

514 
__wók
 
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

516 
uöt32_t
 
ulRñﬂdVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCom∂ëedSysTickDe¸emíts
, 
ulSysTickCTRL
;

517 
TickTy≥_t
 
xModifübÀIdÀTime
;

520 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

522 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

529 
p‹tNVIC_SYSTICK_CTRL_REG
 &~
p‹tNVIC_SYSTICK_ENABLE_BIT
;

534 
ulRñﬂdVÆue
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 + ( 
ulTimîCou¡sF‹O√Tick
 * ( 
xEx≥˘edIdÀTime
 - 1UL ) );

535 if–
ulRñﬂdVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

537 
ulRñﬂdVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

542 
	`__dißbÀ_úq
();

546 if–
	`eTaskC⁄fúmSÀïModeSètus
(Ë=
eAb‹tSÀï
 )

550 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

553 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

557 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

561 
	`__íabÀ_úq
();

566 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulRñﬂdVÆue
;

570 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

573 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

580 
xModifübÀIdÀTime
 = 
xEx≥˘edIdÀTime
;

581 
	`c⁄figPRE_SLEEP_PROCESSING
–
xModifübÀIdÀTime
 );

582 if–
xModifübÀIdÀTime
 > 0 )

584 
	`__dsb
–
p‹tSY_FULL_READ_WRITE
 );

585 
	`__wfi
();

586 
	`__isb
–
p‹tSY_FULL_READ_WRITE
 );

588 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

594 
ulSysTickCTRL
 = 
p‹tNVIC_SYSTICK_CTRL_REG
;

595 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
ulSysTickCTRL
 & ~
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

599 
	`__íabÀ_úq
();

601 if––
ulSysTickCTRL
 & 
p‹tNVIC_SYSTICK_COUNT_FLAG_BIT
 ) != 0 )

603 
uöt32_t
 
ulCÆcuœãdLﬂdVÆue
;

609 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL ) - ( 
ulRñﬂdVÆue
 - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 );

614 if––
ulCÆcuœãdLﬂdVÆue
 < 
ulSt›≥dTimîCom≥nßti⁄
 ) || ( ulCÆcuœãdLﬂdVÆuê> 
ulTimîCou¡sF‹O√Tick
 ) )

616 
ulCÆcuœãdLﬂdVÆue
 = ( 
ulTimîCou¡sF‹O√Tick
 - 1UL );

619 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulCÆcuœãdLﬂdVÆue
;

626 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

634 
ulCom∂ëedSysTickDe¸emíts
 = ( 
xEx≥˘edIdÀTime
 * 
ulTimîCou¡sF‹O√Tick
 ) - 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
;

638 
ulCom∂ëeTickPîiods
 = 
ulCom∂ëedSysTickDe¸emíts
 / 
ulTimîCou¡sF‹O√Tick
;

642 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( ( 
ulCom∂ëeTickPîiods
 + 1 ) * 
ulTimîCou¡sF‹O√Tick
 ) - 
ulCom∂ëedSysTickDe¸emíts
;

650 
p‹tNVIC_SYSTICK_CURRENT_VALUE_REG
 = 0UL;

651 
	`p‹tENTER_CRITICAL
();

653 
p‹tNVIC_SYSTICK_CTRL_REG
 |
p‹tNVIC_SYSTICK_ENABLE_BIT
;

654 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

655 
p‹tNVIC_SYSTICK_LOAD_REG
 = 
ulTimîCou¡sF‹O√Tick
 - 1UL;

657 
	`p‹tEXIT_CRITICAL
();

659 
	}
}

669 #i‡
c⁄figOVERRIDE_DEFAULT_TICK_CONFIGURATION
 == 0

671 
	$vP‹tSëupTimîI¡îru±
( )

674 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

676 
ulTimîCou¡sF‹O√Tick
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 );

677 
xMaximumPossibÀSuµªs£dTicks
 = 
p‹tMAX_24_BIT_NUMBER
 / 
ulTimîCou¡sF‹O√Tick
;

678 
ulSt›≥dTimîCom≥nßti⁄
 = 
p‹tMISSED_COUNTS_FACTOR
 / ( 
c⁄figCPU_CLOCK_HZ
 / 
c⁄figSYSTICK_CLOCK_HZ
 );

683 
p‹tNVIC_SYSTICK_LOAD_REG
 = ( 
c⁄figSYSTICK_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

684 
p‹tNVIC_SYSTICK_CTRL_REG
 = ( 
p‹tNVIC_SYSTICK_CLK_BIT
 | 
p‹tNVIC_SYSTICK_INT_BIT
 | 
p‹tNVIC_SYSTICK_ENABLE_BIT
 );

685 
	}
}

690 
__asm
 
uöt32_t
 
	$ulP‹tSëI¡îru±Mask
( )

692 
PRESERVE8


694 
mrs
 
r0
, 
ba£¥i


695 
mov
 
r1
, #configMAX_SYSCALL_INTERRUPT_PRIORITY

696 
m§
 
ba£¥i
, 
r1


697 
bx
 
r14


698 
	}
}

701 
__asm
 
	$vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMask
 )

703 
PRESERVE8


705 
m§
 
ba£¥i
, 
r0


706 
bx
 
r14


707 
	}
}

710 
__asm
 
uöt32_t
 
	$vP‹tGëIPSR
( )

712 
PRESERVE8


714 
mrs
 
r0
, 
ù§


715 
bx
 
r14


716 
	}
}

719 #if–
c⁄figASSERT_DEFINED
 == 1 )

721 
	$vP‹tVÆid©eI¡îru±Pri‹ôy
( )

723 
uöt32_t
 
ulCuºítI¡îru±
;

724 
uöt8_t
 
ucCuºítPri‹ôy
;

727 
ulCuºítI¡îru±
 = 
	`vP‹tGëIPSR
();

730 if–
ulCuºítI¡îru±
 >
p‹tFIRST_USER_INTERRUPT_NUMBER
 )

733 
ucCuºítPri‹ôy
 = 
pcI¡îru±Pri‹ôyRegi°îs
[ 
ulCuºítI¡îru±
 ];

758 
	`c⁄figASSERT
–
ucCuºítPri‹ôy
 >
ucMaxSysCÆlPri‹ôy
 );

774 
	`c⁄figASSERT
––
p‹tAIRCR_REG
 & 
p‹tPRIORITY_GROUP_MASK
 ) <
ulMaxPRIGROUPVÆue
 );

775 
	}
}

	@portable/RVDS/ARM_CM4F/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

107 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

108 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

109 
	#p‹tBYTE_ALIGNMENT
 8

	)

113 
vP‹tYõld
( );

114 
	#p‹tNVIC_INT_CTRL_REG
 ( * ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 ) )

	)

115 
	#p‹tNVIC_PENDSVSET_BIT
 ( 1UL << 28UL )

	)

116 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

117 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) 
p‹tNVIC_INT_CTRL_REG
 = 
p‹tNVIC_PENDSVSET_BIT


	)

118 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

122 
uöt32_t
 
ulP‹tSëI¡îru±Mask
( );

123 
vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMask
 );

124 
vP‹tE¡îCrôiˇl
( );

125 
vP‹tExôCrôiˇl
( );

127 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

128 
	#p‹tENABLE_INTERRUPTS
(Ë
	`vP‹tCÀ¨I¡îru±Mask
–0 )

	)

129 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

130 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

131 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

132 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
(x)

	)

137 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


138 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

139 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

144 #i‡
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 1

147 #if–
c⁄figMAX_PRIORITIES
 > 32 )

148 #îr‹ 
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 
ˇn
 
⁄ly
 
be
 
£t
 
to
 1 
whí
 
c⁄figMAX_PRIORITIES
 
is
 
Àss
 
th™
 
‹
 
equÆ
Åÿ32. 
It
 i†
vîy
 
øª
 
th©
 
a
 
sy°em
 
ªquúes
 
m‹e
Åh™ 10Åÿ15 
dif„ªn˚
 
¥i‹ôõs
 
as
 
èsks
Åh© 
sh¨e
á 
¥i‹ôy
 
wûl
 
time
 
¶i˚
.

152 
	#p‹tRECORD_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë|–1UL << ( uxPri‹ôy ) )

	)

153 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxRódyPri‹ôõs
 ) ( uxRódyPri‹ôõ†Ë&~–1UL << ( uxPri‹ôy ) )

	)

157 
	#p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxRódyPri‹ôõs
 ) uxT›Pri‹ôy = ( 31 - 
	`__˛z
––uxRódyPri‹ôõ†ËË)

	)

165 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

166 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

169 #ifde‡
c⁄figASSERT


170 
vP‹tVÆid©eI¡îru±Pri‹ôy
( );

171 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`vP‹tVÆid©eI¡îru±Pri‹ôy
()

	)

175 
	#p‹tNOP
()

	)

177 #ifde‡
__˝lu•lus


	@portable/Renesas/RX100/port.c

71 
	~"limôs.h
"

74 
	~"FªeRTOS.h
"

75 
	~"èsk.h
"

78 
	~"°rög.h
"

81 
	~"iodeföe.h
"

87 
	#p‹tINITIAL_PSW
 ( ( 
SèckTy≥_t
 ) 0x00030000 )

	)

91 #i‡–
c⁄figUSE_TICKLESS_IDLE
 == 0 )

93 
	#p‹tCLOCK_DIVISOR
 8UL

	)

94 #ñi‡–
c⁄figPERIPHERAL_CLOCK_HZ
 >= 12000000 )

95 
	#p‹tCLOCK_DIVISOR
 512UL

	)

96 #ñi‡–
c⁄figPERIPHERAL_CLOCK_HZ
 >= 6000000 )

97 
	#p‹tCLOCK_DIVISOR
 128UL

	)

98 #ñi‡–
c⁄figPERIPHERAL_CLOCK_HZ
 >= 1000000 )

99 
	#p‹tCLOCK_DIVISOR
 32UL

	)

101 
	#p‹tCLOCK_DIVISOR
 8UL

	)

107 
	#p‹tUNLOCK_KEY
 0xA50B

	)

108 
	#p‹tLOCK_KEY
 0xA500

	)

115 
Ba£Ty≥_t
 
vSo·w¨eI¡îru±E¡ry
;

116 c⁄° 
Ba£Ty≥_t
 * 
	gp_vSo·w¨eI¡îru±E¡ry
 = &
vSo·w¨eI¡îru±E¡ry
;

124 
¥vSèπFú°Task
( );

131 
¥vYõldH™dÀr
( );

139 
vSo·w¨eI¡îru±ISR
( );

147 
¥vSëupTimîI¡îru±
( );

148 #i‚de‡
c⁄figSETUP_TICK_INTERRUPT


151 
	#c⁄figSETUP_TICK_INTERRUPT
(Ë
	`¥vSëupTimîI¡îru±
()

	)

159 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

160 
¥vSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

166 *
pxCuºítTCB
;

167 
vTaskSwôchC⁄ãxt
( );

172 c⁄° 
uöt32_t
 
	gulM©chVÆueF‹O√Tick
 = ( ( 
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tCLOCK_DIVISOR
 ) / 
c⁄figTICK_RATE_HZ
 );

174 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

180 c⁄° 
TickTy≥_t
 
	gxMaximumPossibÀSuµªs£dTicks
 = 
USHRT_MAX
 / ( ( 
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tCLOCK_DIVISOR
 ) / 
c⁄figTICK_RATE_HZ
 );

185 vﬁ©ûê
uöt32_t
 
	gulTickFœg
 = 
pdFALSE
;

193 c⁄° 
uöt32_t
 
	gulSt›≥dTimîCom≥nßti⁄
 = 100UL / ( 
c⁄figCPU_CLOCK_HZ
 / ( 
c⁄figPERIPHERAL_CLOCK_HZ
 / 
p‹tCLOCK_DIVISOR
 ) );

202 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

205 
pxT›OfSèck
--;

208 *
pxT›OfSèck
 = 0x00;

209 
pxT›OfSèck
--;

210 *
pxT›OfSèck
 = 0x00;

211 
pxT›OfSèck
--;

212 *
pxT›OfSèck
 = 
p‹tINITIAL_PSW
;

213 
pxT›OfSèck
--;

214 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

219 #ifde‡
USE_FULL_REGISTER_INITIALISATION


221 
pxT›OfSèck
--;

222 *
pxT›OfSèck
 = 0x12345678;

223 
pxT›OfSèck
--;

224 *
pxT›OfSèck
 = 0xaaaabbbb;

225 
pxT›OfSèck
--;

226 *
pxT›OfSèck
 = 0xdddddddd;

227 
pxT›OfSèck
--;

228 *
pxT›OfSèck
 = 0xcccccccc;

229 
pxT›OfSèck
--;

230 *
pxT›OfSèck
 = 0xbbbbbbbb;

231 
pxT›OfSèck
--;

232 *
pxT›OfSèck
 = 0xaaaaaaaa;

233 
pxT›OfSèck
--;

234 *
pxT›OfSèck
 = 0x99999999;

235 
pxT›OfSèck
--;

236 *
pxT›OfSèck
 = 0x88888888;

237 
pxT›OfSèck
--;

238 *
pxT›OfSèck
 = 0x77777777;

239 
pxT›OfSèck
--;

240 *
pxT›OfSèck
 = 0x66666666;

241 
pxT›OfSèck
--;

242 *
pxT›OfSèck
 = 0x55555555;

243 
pxT›OfSèck
--;

244 *
pxT›OfSèck
 = 0x44444444;

245 
pxT›OfSèck
--;

246 *
pxT›OfSèck
 = 0x33333333;

247 
pxT›OfSèck
--;

248 *
pxT›OfSèck
 = 0x22222222;

249 
pxT›OfSèck
--;

255 
pxT›OfSèck
 -= 15;

259 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

260 
pxT›OfSèck
--;

261 *
pxT›OfSèck
 = 0x12345678;

262 
pxT›OfSèck
--;

263 *
pxT›OfSèck
 = 0x87654321;

265  
pxT›OfSèck
;

266 
	}
}

269 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

272 if–
pxCuºítTCB
 !
NULL
 )

279 
	`c⁄figSETUP_TICK_INTERRUPT
();

282 
	`_IEN
–
_ICU_SWINT
 ) = 1;

285 
	`_IR
–
_ICU_SWINT
 ) = 0;

288 
	`_IPR
–
_ICU_SWINT
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

291 
	`¥vSèπFú°Task
();

300 
	`¥vSëupTimîI¡îru±
();

303 –Ë
	`vSo·w¨eI¡îru±ISR
();

306  
pdFAIL
;

307 
	}
}

310 #¥agm®
ölöe_asm
 
¥vSèπFú°Task


311 
	$¥vSèπFú°Task
( )

316 
SETPSW
 
U


320 
MOV
.
L
 #_pxCuºítTCB, 
R15


321 
MOV
.
L
 [
R15
], R15

322 
MOV
.
L
 [
R15
], 
R0


326 
POP
 
R15


327 
MVTACLO
 
R15


328 
POP
 
R15


329 
MVTACHI
 
R15


330 
POPM
 
R1
-
R15


331 
RTE


332 
NOP


333 
NOP


334 
	}
}

337 #¥agm®
öãºu±
 ( 
¥vTickISR
–
ve˘
 = 
c⁄figTICK_VECTOR
, 
íabÀ
 ) )

338 
	$¥vTickISR
( )

342 
	`£t_ùl
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

344 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

346 
	`èskYIELD
();

349 
	`£t_ùl
–
c⁄figKERNEL_INTERRUPT_PRIORITY
 );

351 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

354 
ulTickFœg
 = 
pdTRUE
;

358 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆueF‹O√Tick
;

361 
	}
}

364 
	$vSo·w¨eI¡îru±ISR
( )

366 
	`¥vYõldH™dÀr
();

367 
	}
}

370 #¥agm®
ölöe_asm
 
¥vYõldH™dÀr


371 
	$¥vYõldH™dÀr
( )

374 
SETPSW
 
I


380 
PUSH
.
L
 
R15


383 
MVFC
 
USP
, 
R15


386 
SUB
 #12, 
R15


387 
MVTC
 
R15
, 
USP


390 
MOV
.
L
 [ 
R0
 ], [ 
R15
 ] ; R15

391 
MOV
.
L
 4[ 
R0
 ], 4[ 
R15
 ] ; 
PC


392 
MOV
.
L
 8[ 
R0
 ], 8[ 
R15
 ] ; 
PSW


395 
ADD
 #12, 
R0


398 
SETPSW
 
U


401 
PUSHM
 
R1
-
R14


404 
MVFACHI
 
R15


405 
PUSH
.
L
 
R15


406 
MVFACMI
 
R15
 ; 
MiddÀ
 
‹dî
 
w‹d
.

407 
SHLL
 #16, 
R15
 ; 
Shi·ed
 
À·
 
as
 
ô
 
is
 
ª°‹ed
 
to
 
the
 
low
 
‹dî
 
w‹d
.

408 
PUSH
.
L
 
R15


411 
MOV
.
L
 #_pxCuºítTCB, 
R15


412 
MOV
.
L
 [ 
R15
 ], R15

413 
MOV
.
L
 
R0
, [ 
R15
 ]

417 
MVTIPL
 #configMAX_SYSCALL_INTERRUPT_PRIORITY

420 
BSR
.
A
 
_vTaskSwôchC⁄ãxt


424 
MVTIPL
 #configKERNEL_INTERRUPT_PRIORITY

428 
MOV
.
L
 #_pxCuºítTCB,
R15


429 
MOV
.
L
 [ 
R15
 ], R15

430 
MOV
.
L
 [ 
R15
 ], 
R0


434 
POP
 
R15


435 
MVTACLO
 
R15


436 
POP
 
R15


437 
MVTACHI
 
R15


438 
POPM
 
R1
-
R15


439 
RTE


440 
NOP


441 
NOP


442 
	}
}

445 
	$vP‹tEndScheduÀr
( )

449 
	`c⁄figASSERT
–
pxCuºítTCB
 =
NULL
 );

452 –Ë
	`vTaskSwôchC⁄ãxt
();

453 
	}
}

456 
	$¥vSëupTimîI¡îru±
( )

459 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tUNLOCK_KEY
;

462 
	`MSTP
–
CMT0
 ) = 0;

465 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tLOCK_KEY
;

468 
CMT0
.
CMCR
.
BIT
.
CMIE
 = 1;

471 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆueF‹O√Tick
;

474 #i‡
p‹tCLOCK_DIVISOR
 == 512

476 
CMT0
.
CMCR
.
BIT
.
CKS
 = 3;

478 #ñi‡
p‹tCLOCK_DIVISOR
 == 128

480 
CMT0
.
CMCR
.
BIT
.
CKS
 = 2;

482 #ñi‡
p‹tCLOCK_DIVISOR
 == 32

484 
CMT0
.
CMCR
.
BIT
.
CKS
 = 1;

486 #ñi‡
p‹tCLOCK_DIVISOR
 == 8

488 
CMT0
.
CMCR
.
BIT
.
CKS
 = 0;

492 #îr‹ 
InvÆid
 
p‹tCLOCK_DIVISOR
 
£âög


498 
	`_IEN
–
_CMT0_CMI0
 ) = 1;

501 
	`_IPR
–
_CMT0_CMI0
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

504 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

505 
	}
}

508 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

510 
	$¥vSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

513 
	`c⁄figPRE_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

518 if–
xEx≥˘edIdÀTime
 > 0 )

520 
	`waô
();

524 
	`c⁄figPOST_SLEEP_PROCESSING
–
xEx≥˘edIdÀTime
 );

525 
	}
}

530 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

532 
	$vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 )

534 
uöt32_t
 
ulM©chVÆue
, 
ulCom∂ëeTickPîiods
, 
ulCuºítCou¡
;

535 
eSÀïModeSètus
 
eSÀïA˘i⁄
;

540 if–
xEx≥˘edIdÀTime
 > 
xMaximumPossibÀSuµªs£dTicks
 )

542 
xEx≥˘edIdÀTime
 = 
xMaximumPossibÀSuµªs£dTicks
;

547 
ulM©chVÆue
 = 
ulM©chVÆueF‹O√Tick
 * 
xEx≥˘edIdÀTime
;

548 if–
ulM©chVÆue
 > 
ulSt›≥dTimîCom≥nßti⁄
 )

552 
ulM©chVÆue
 -
ulSt›≥dTimîCom≥nßti⁄
;

559 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 0;

560  
CMT
.
CMSTR0
.
BIT
.
STR0
 == 1 )

567 
	`˛Ωsw_i
();

572 
ulTickFœg
 = 
pdFALSE
;

577 
eSÀïA˘i⁄
 = 
	`eTaskC⁄fúmSÀïModeSètus
();

578 if–
eSÀïA˘i⁄
 =
eAb‹tSÀï
 )

581 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

582 
	`£çsw_i
();

584 if–
eSÀïA˘i⁄
 =
eNoTasksWaôögTimeout
 )

587 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tUNLOCK_KEY
;

590 
SYSTEM
.
SBYCR
.
BIT
.
SSBY
 = 1;

593 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tLOCK_KEY
;

597 
	`¥vSÀï
–
xEx≥˘edIdÀTime
 );

600 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

605 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tUNLOCK_KEY
;

608 
SYSTEM
.
MSTPCRC
.
BIT
.
DSLPE
 = 1;

609 
SYSTEM
.
MSTPCRA
.
BIT
.
MSTPA28
 = 1;

610 
SYSTEM
.
SBYCR
.
BIT
.
SSBY
 = 0;

613 
SYSTEM
.
PRCR
.
WORD
 = 
p‹tLOCK_KEY
;

617 
ulM©chVÆue
 -–
uöt32_t
 ) 
CMT0
.
CMCNT
;

618 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆue
;

621 
CMT0
.
CMCNT
 = 0;

622 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

626 
	`¥vSÀï
–
xEx≥˘edIdÀTime
 );

632 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 0;

633  
CMT
.
CMSTR0
.
BIT
.
STR0
 == 1 )

638 
ulCuºítCou¡
 = ( 
uöt32_t
 ) 
CMT0
.
CMCNT
;

640 if–
ulTickFœg
 !
pdFALSE
 )

647 
ulM©chVÆue
 = 
ulM©chVÆueF‹O√Tick
 - 
ulCuºítCou¡
;

648 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆue
;

656 
ulCom∂ëeTickPîiods
 = 
xEx≥˘edIdÀTime
 - 1UL;

663 
ulCom∂ëeTickPîiods
 = 
ulCuºítCou¡
 / 
ulM©chVÆueF‹O√Tick
;

667 
ulM©chVÆue
 = 
ulCuºítCou¡
 - ( 
ulCom∂ëeTickPîiods
 * 
ulM©chVÆueF‹O√Tick
 );

668 
CMT0
.
CMCOR
 = ( 
uöt16_t
 ) 
ulM©chVÆue
;

674 
CMT0
.
CMCNT
 = 0;

675 
CMT
.
CMSTR0
.
BIT
.
STR0
 = 1;

679 
	`vTaskSãpTick
–
ulCom∂ëeTickPîiods
 );

681 
	}
}

	@portable/Renesas/RX100/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


75 
	~"machöe.h
"

89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

95 
	#p‹tBASE_TYPE
 

	)

97 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

98 
	tBa£Ty≥_t
;

99 
	tUBa£Ty≥_t
;

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
uöt16_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

105 
uöt32_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

111 
	#p‹tBYTE_ALIGNMENT
 8

	)

112 
	#p‹tSTACK_GROWTH
 -1

	)

113 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

114 
	#p‹tNOP
(Ë
	`n›
()

	)

116 #¥agm®
ölöe_asm
 
vP‹tYõld


117 
vP‹tYõld
( )

122 
	gPUSH
.
L
 
R5


124 
	gMOV
.
	gL
 #872E0
	gH
, 
R5


125 
	gMOV
.
	gB
 #1, [
R5
]

127 
	gMOV
.
	gL
 [
R5
], R5

129 
POP
 
	gR5


131 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

132 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) { 
	`p‹tYIELD
(); }

	)

143 
	#p‹tENABLE_INTERRUPTS
(Ë
	`£t_ùl
––Ë0 )

	)

144 #ifde‡
c⁄figASSERT


145 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`c⁄figASSERT
––
	`gë_ùl
(Ë<
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) )

	)

146 
	#p‹tDISABLE_INTERRUPTS
(Ëif–
	`gë_ùl
(Ë< 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) 
	`£t_ùl
––Ëc⁄figMAX_SYSCALL_INTERRUPT_PRIORITY )

	)

148 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`£t_ùl
––Ë
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

152 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

155 
vTaskE¡îCrôiˇl
( );

156 
vTaskExôCrôiˇl
( );

157 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

158 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

161 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`gë_ùl
(); 
	`£t_ùl
––Ë
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

162 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ) 
	`£t_ùl
––ËuxSavedI¡îru±Sètu†)

	)

167 #i‡
c⁄figUSE_TICKLESS_IDLE
 == 1

168 #i‚de‡
p‹tSUPPRESS_TICKS_AND_SLEEP


169 
vP‹tSuµªssTicksAndSÀï
–
TickTy≥_t
 
xEx≥˘edIdÀTime
 );

170 
	#p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 ) 
	`vP‹tSuµªssTicksAndSÀï
–xEx≥˘edIdÀTimê)

	)

177 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

178 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

180 #ifde‡
__˝lu•lus


	@portable/Renesas/RX200/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	~"°rög.h
"

78 
	~"iodeföe.h
"

84 
	#p‹tINITIAL_PSW
 ( ( 
SèckTy≥_t
 ) 0x00030000 )

	)

91 
Ba£Ty≥_t
 
vSo·w¨eI¡îru±E¡ry
;

92 c⁄° 
Ba£Ty≥_t
 * 
	gp_vSo·w¨eI¡îru±E¡ry
 = &
vSo·w¨eI¡îru±E¡ry
;

100 
¥vSèπFú°Task
( );

107 
¥vYõldH™dÀr
( );

115 
vSo·w¨eI¡îru±ISR
( );

121 *
pxCuºítTCB
;

122 
vTaskSwôchC⁄ãxt
( );

129 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

132 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = 0x00;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = 0x00;

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = 
p‹tINITIAL_PSW
;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

146 #ifde‡
USE_FULL_REGISTER_INITIALISATION


148 
pxT›OfSèck
--;

149 *
pxT›OfSèck
 = 0x12345678;

150 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = 0xaaaabbbb;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = 0xdddddddd;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = 0xcccccccc;

156 
pxT›OfSèck
--;

157 *
pxT›OfSèck
 = 0xbbbbbbbb;

158 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = 0xaaaaaaaa;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = 0x99999999;

162 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = 0x88888888;

164 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = 0x77777777;

166 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = 0x66666666;

168 
pxT›OfSèck
--;

169 *
pxT›OfSèck
 = 0x55555555;

170 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = 0x44444444;

172 
pxT›OfSèck
--;

173 *
pxT›OfSèck
 = 0x33333333;

174 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = 0x22222222;

176 
pxT›OfSèck
--;

180 
pxT›OfSèck
 -= 15;

184 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

185 
pxT›OfSèck
--;

186 *
pxT›OfSèck
 = 0x12345678;

187 
pxT›OfSèck
--;

188 *
pxT›OfSèck
 = 0x87654321;

190  
pxT›OfSèck
;

191 
	}
}

194 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

196 
	`vAµliˇti⁄SëupTimîI¡îru±
( );

199 if–
pxCuºítTCB
 !
NULL
 )

204 
	`vAµliˇti⁄SëupTimîI¡îru±
();

207 
	`_IEN
–
_ICU_SWINT
 ) = 1;

210 
	`_IR
–
_ICU_SWINT
 ) = 0;

213 
	`_IPR
–
_ICU_SWINT
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

216 
	`¥vSèπFú°Task
();

220 –Ë
	`vSo·w¨eI¡îru±ISR
();

223  
pdFAIL
;

224 
	}
}

227 #¥agm®
ölöe_asm
 
¥vSèπFú°Task


228 
	$¥vSèπFú°Task
( )

233 
SETPSW
 
U


237 
MOV
.
L
 #_pxCuºítTCB, 
R15


238 
MOV
.
L
 [
R15
], R15

239 
MOV
.
L
 [
R15
], 
R0


243 
POP
 
R15


244 
MVTACLO
 
R15


245 
POP
 
R15


246 
MVTACHI
 
R15


247 
POPM
 
R1
-
R15


248 
RTE


249 
NOP


250 
NOP


251 
	}
}

254 #¥agm®
öãºu±
 ( 
vTickISR
–
ve˘
 = 
_VECT
–
c⁄figTICK_VECTOR
 ), 
íabÀ
 ) )

255 
	$vTickISR
( )

259 
	`£t_ùl
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

261 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

263 
	`èskYIELD
();

266 
	`£t_ùl
–
c⁄figKERNEL_INTERRUPT_PRIORITY
 );

267 
	}
}

270 
	$vSo·w¨eI¡îru±ISR
( )

272 
	`¥vYõldH™dÀr
();

273 
	}
}

276 #¥agm®
ölöe_asm
 
¥vYõldH™dÀr


277 
	$¥vYõldH™dÀr
( )

280 
SETPSW
 
I


286 
PUSH
.
L
 
R15


289 
MVFC
 
USP
, 
R15


292 
SUB
 #12, 
R15


293 
MVTC
 
R15
, 
USP


296 
MOV
.
L
 [ 
R0
 ], [ 
R15
 ] ; R15

297 
MOV
.
L
 4[ 
R0
 ], 4[ 
R15
 ] ; 
PC


298 
MOV
.
L
 8[ 
R0
 ], 8[ 
R15
 ] ; 
PSW


301 
ADD
 #12, 
R0


304 
SETPSW
 
U


307 
PUSHM
 
R1
-
R14


310 
MVFACHI
 
R15


311 
PUSH
.
L
 
R15


312 
MVFACMI
 
R15
 ; 
MiddÀ
 
‹dî
 
w‹d
.

313 
SHLL
 #16, 
R15
 ; 
Shi·ed
 
À·
 
as
 
ô
 
is
 
ª°‹ed
 
to
 
the
 
low
 
‹dî
 
w‹d
.

314 
PUSH
.
L
 
R15


317 
MOV
.
L
 #_pxCuºítTCB, 
R15


318 
MOV
.
L
 [ 
R15
 ], R15

319 
MOV
.
L
 
R0
, [ 
R15
 ]

323 
MVTIPL
 #configMAX_SYSCALL_INTERRUPT_PRIORITY

326 
BSR
.
A
 
_vTaskSwôchC⁄ãxt


329 
MVTIPL
 #configKERNEL_INTERRUPT_PRIORITY

333 
MOV
.
L
 #_pxCuºítTCB,
R15


334 
MOV
.
L
 [ 
R15
 ], R15

335 
MOV
.
L
 [ 
R15
 ], 
R0


339 
POP
 
R15


340 
MVTACLO
 
R15


341 
POP
 
R15


342 
MVTACHI
 
R15


343 
POPM
 
R1
-
R15


344 
RTE


345 
NOP


346 
NOP


347 
	}
}

350 
	$vP‹tEndScheduÀr
( )

354 
	`c⁄figASSERT
–
pxCuºítTCB
 =
NULL
 );

357 –Ë
	`vTaskSwôchC⁄ãxt
();

358 
	}
}

	@portable/Renesas/RX200/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


75 
	~"machöe.h
"

89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

95 
	#p‹tBASE_TYPE
 

	)

97 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

98 
	tBa£Ty≥_t
;

99 
	tUBa£Ty≥_t
;

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
uöt16_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

105 
uöt32_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

111 
	#p‹tBYTE_ALIGNMENT
 8

	)

112 
	#p‹tSTACK_GROWTH
 -1

	)

113 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

114 
	#p‹tNOP
(Ë
	`n›
()

	)

116 #¥agm®
ölöe_asm
 
vP‹tYõld


117 
vP‹tYõld
( )

122 
	gPUSH
.
L
 
R5


124 
	gMOV
.
	gL
 #553696, 
R5


125 
	gMOV
.
	gB
 #1, [
R5
]

127 
	gMOV
.
	gL
 [
R5
], R5

129 
POP
 
	gR5


131 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

132 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

143 
	#p‹tENABLE_INTERRUPTS
(Ë
	`£t_ùl
––Ë0 )

	)

144 #ifde‡
c⁄figASSERT


145 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`c⁄figASSERT
––
	`gë_ùl
(Ë<
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) )

	)

146 
	#p‹tDISABLE_INTERRUPTS
(Ëif–
	`gë_ùl
(Ë< 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) 
	`£t_ùl
––Ëc⁄figMAX_SYSCALL_INTERRUPT_PRIORITY )

	)

148 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`£t_ùl
––Ë
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

152 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

155 
vTaskE¡îCrôiˇl
( );

156 
vTaskExôCrôiˇl
( );

157 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

158 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

161 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`gë_ùl
(); 
	`£t_ùl
––Ë
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

162 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ) 
	`£t_ùl
––ËuxSavedI¡îru±Sètu†)

	)

167 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

168 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

170 #ifde‡
__˝lu•lus


	@portable/Renesas/RX600/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	~"°rög.h
"

78 
	~"iodeföe.h
"

84 
	#p‹tINITIAL_PSW
 ( ( 
SèckTy≥_t
 ) 0x00030000 )

	)

85 
	#p‹tINITIAL_FPSW
 ( ( 
SèckTy≥_t
 ) 0x00000100 )

	)

92 
Ba£Ty≥_t
 
vSo·w¨eI¡îru±E¡ry
;

93 c⁄° 
Ba£Ty≥_t
 * 
	gp_vSo·w¨eI¡îru±E¡ry
 = &
vSo·w¨eI¡îru±E¡ry
;

101 
¥vSèπFú°Task
( );

108 
¥vYõldH™dÀr
( );

116 
vSo·w¨eI¡îru±ISR
( );

122 *
pxCuºítTCB
;

123 
vTaskSwôchC⁄ãxt
( );

130 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

134 *
pxT›OfSèck
 = 0x00;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = 
p‹tINITIAL_PSW
;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

143 #ifde‡
USE_FULL_REGISTER_INITIALISATION


145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = 0xffffffff;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = 0xeeeeeeee;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = 0xdddddddd;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = 0xcccccccc;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = 0xbbbbbbbb;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = 0xaaaaaaaa;

157 
pxT›OfSèck
--;

158 *
pxT›OfSèck
 = 0x99999999;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = 0x88888888;

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = 0x77777777;

163 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = 0x66666666;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = 0x55555555;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = 0x44444444;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = 0x33333333;

171 
pxT›OfSèck
--;

172 *
pxT›OfSèck
 = 0x22222222;

173 
pxT›OfSèck
--;

177 
pxT›OfSèck
 -= 15;

181 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

182 
pxT›OfSèck
--;

183 *
pxT›OfSèck
 = 
p‹tINITIAL_FPSW
;

184 
pxT›OfSèck
--;

185 *
pxT›OfSèck
 = 0x12345678;

186 
pxT›OfSèck
--;

187 *
pxT›OfSèck
 = 0x87654321;

189  
pxT›OfSèck
;

190 
	}
}

193 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

195 
	`vAµliˇti⁄SëupTimîI¡îru±
( );

198 if–
pxCuºítTCB
 !
NULL
 )

203 
	`vAµliˇti⁄SëupTimîI¡îru±
();

206 
	`_IEN
–
_ICU_SWINT
 ) = 1;

209 
	`_IR
–
_ICU_SWINT
 ) = 0;

212 
	`_IPR
–
_ICU_SWINT
 ) = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

215 
	`¥vSèπFú°Task
();

219 –Ë
	`vSo·w¨eI¡îru±ISR
();

222  
pdFAIL
;

223 
	}
}

226 #¥agm®
ölöe_asm
 
¥vSèπFú°Task


227 
	$¥vSèπFú°Task
( )

232 
SETPSW
 
U


236 
MOV
.
L
 #_pxCuºítTCB, 
R15


237 
MOV
.
L
 [
R15
], R15

238 
MOV
.
L
 [
R15
], 
R0


242 
POP
 
R15


243 
MVTACLO
 
R15


244 
POP
 
R15


245 
MVTACHI
 
R15


246 
POP
 
R15


247 
MVTC
 
R15
,
FPSW


248 
POPM
 
R1
-
R15


249 
RTE


250 
NOP


251 
NOP


252 
	}
}

255 #¥agm®
öãºu±
 ( 
vTickISR
–
ve˘
 = 
_VECT
–
c⁄figTICK_VECTOR
 ), 
íabÀ
 ) )

256 
	$vTickISR
( )

260 
	`£t_ùl
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 );

262 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

264 
	`èskYIELD
();

267 
	`£t_ùl
–
c⁄figKERNEL_INTERRUPT_PRIORITY
 );

268 
	}
}

271 
	$vSo·w¨eI¡îru±ISR
( )

273 
	`¥vYõldH™dÀr
();

274 
	}
}

277 #¥agm®
ölöe_asm
 
¥vYõldH™dÀr


278 
	$¥vYõldH™dÀr
( )

281 
SETPSW
 
I


287 
PUSH
.
L
 
R15


290 
MVFC
 
USP
, 
R15


293 
SUB
 #12, 
R15


294 
MVTC
 
R15
, 
USP


297 
MOV
.
L
 [ 
R0
 ], [ 
R15
 ] ; R15

298 
MOV
.
L
 4[ 
R0
 ], 4[ 
R15
 ] ; 
PC


299 
MOV
.
L
 8[ 
R0
 ], 8[ 
R15
 ] ; 
PSW


302 
ADD
 #12, 
R0


305 
SETPSW
 
U


308 
PUSHM
 
R1
-
R14


311 
MVFC
 
FPSW
, 
R15


312 
PUSH
.
L
 
R15


313 
MVFACHI
 
R15


314 
PUSH
.
L
 
R15


315 
MVFACMI
 
R15
 ; 
MiddÀ
 
‹dî
 
w‹d
.

316 
SHLL
 #16, 
R15
 ; 
Shi·ed
 
À·
 
as
 
ô
 
is
 
ª°‹ed
 
to
 
the
 
low
 
‹dî
 
w‹d
.

317 
PUSH
.
L
 
R15


320 
MOV
.
L
 #_pxCuºítTCB, 
R15


321 
MOV
.
L
 [ 
R15
 ], R15

322 
MOV
.
L
 
R0
, [ 
R15
 ]

326 
MVTIPL
 #configMAX_SYSCALL_INTERRUPT_PRIORITY

329 
BSR
.
A
 
_vTaskSwôchC⁄ãxt


332 
MVTIPL
 #configKERNEL_INTERRUPT_PRIORITY

336 
MOV
.
L
 #_pxCuºítTCB,
R15


337 
MOV
.
L
 [ 
R15
 ], R15

338 
MOV
.
L
 [ 
R15
 ], 
R0


342 
POP
 
R15


343 
MVTACLO
 
R15


344 
POP
 
R15


345 
MVTACHI
 
R15


346 
POP
 
R15


347 
MVTC
 
R15
,
FPSW


348 
POPM
 
R1
-
R15


349 
RTE


350 
NOP


351 
NOP


352 
	}
}

355 
	$vP‹tEndScheduÀr
( )

359 
	`c⁄figASSERT
–
pxCuºítTCB
 =
NULL
 );

362 –Ë
	`vTaskSwôchC⁄ãxt
();

363 
	}
}

	@portable/Renesas/RX600/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


75 
	~"machöe.h
"

89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

95 
	#p‹tBASE_TYPE
 

	)

97 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

98 
	tBa£Ty≥_t
;

99 
	tUBa£Ty≥_t
;

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
uöt16_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

105 
uöt32_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

111 
	#p‹tBYTE_ALIGNMENT
 8

	)

112 
	#p‹tSTACK_GROWTH
 -1

	)

113 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

114 
	#p‹tNOP
(Ë
	`n›
()

	)

117 #¥agm®
ölöe_asm
 
vP‹tYõld


118 
vP‹tYõld
( )

123 
	gPUSH
.
L
 
R5


125 
	gMOV
.
	gL
 #553696, 
R5


126 
	gMOV
.
	gB
 #1, [
R5
]

128 
	gMOV
.
	gL
 [
R5
], R5

130 
POP
 
	gR5


132 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

133 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) 
	`p‹tYIELD
()

	)

144 
	#p‹tENABLE_INTERRUPTS
(Ë
	`£t_ùl
––Ë0 )

	)

145 #ifde‡
c⁄figASSERT


146 
	#p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
(Ë
	`c⁄figASSERT
––
	`gë_ùl
(Ë<
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) )

	)

147 
	#p‹tDISABLE_INTERRUPTS
(Ëif–
	`gë_ùl
(Ë< 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) 
	`£t_ùl
––Ëc⁄figMAX_SYSCALL_INTERRUPT_PRIORITY )

	)

149 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`£t_ùl
––Ë
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

153 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

156 
vTaskE¡îCrôiˇl
( );

157 
vTaskExôCrôiˇl
( );

158 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
()

	)

159 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
()

	)

162 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`gë_ùl
(); 
	`£t_ùl
––Ë
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

163 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 ) 
	`£t_ùl
––ËuxSavedI¡îru±Sètu†)

	)

168 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

169 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

171 #ifde‡
__˝lu•lus


	@portable/Renesas/SH2A_FPU/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	~"°rög.h
"

81 
	#p‹tINITIAL_SR
 ( 0UL )

	)

87 
	#p‹tFLOP_REGISTERS_TO_STORE
 ( 18 )

	)

88 
	#p‹tFLOP_STORAGE_SIZE
 ( 
p‹tFLOP_REGISTERS_TO_STORE
 * 4 )

	)

95 
vP‹tYõld
( );

100 
vP‹tSèπFú°Task
( );

105 
uöt32_t
 
ulP‹tGëGBR
( );

112 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

115 *
pxT›OfSèck
 = 0x11111111UL;

116 
pxT›OfSèck
--;

117 *
pxT›OfSèck
 = 0x22222222UL;

118 
pxT›OfSèck
--;

119 *
pxT›OfSèck
 = 0x33333333UL;

120 
pxT›OfSèck
--;

123 *
pxT›OfSèck
 = 
p‹tINITIAL_SR
;

124 
pxT›OfSèck
--;

127 *
pxT›OfSèck
 = ( 
uöt32_t
 ) 
pxCode
;

128 
pxT›OfSèck
--;

131 *
pxT›OfSèck
 = 15;

132 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = 14;

136 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = 13;

140 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = 12;

144 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = 11;

148 
pxT›OfSèck
--;

151 *
pxT›OfSèck
 = 10;

152 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = 9;

156 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = 8;

160 
pxT›OfSèck
--;

163 *
pxT›OfSèck
 = 7;

164 
pxT›OfSèck
--;

167 *
pxT›OfSèck
 = 6;

168 
pxT›OfSèck
--;

171 *
pxT›OfSèck
 = 5;

172 
pxT›OfSèck
--;

175 *
pxT›OfSèck
 = ( 
uöt32_t
 ) 
pvP¨amëîs
;

176 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = 3;

180 
pxT›OfSèck
--;

183 *
pxT›OfSèck
 = 2;

184 
pxT›OfSèck
--;

187 *
pxT›OfSèck
 = 1;

188 
pxT›OfSèck
--;

191 *
pxT›OfSèck
 = 0;

192 
pxT›OfSèck
--;

195 *
pxT›OfSèck
 = 16;

196 
pxT›OfSèck
--;

199 *
pxT›OfSèck
 = 17;

200 
pxT›OfSèck
--;

203 *
pxT›OfSèck
 = 
	`ulP‹tGëGBR
();

210  
pxT›OfSèck
;

211 
	}
}

214 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

216 
	`vAµliˇti⁄SëupTimîI¡îru±
( );

221 
	`vAµliˇti⁄SëupTimîI¡îru±
();

228 
	`å≠a
–
p‹tSTART_SCHEDULER_TRAP_NO
 );

231  
pdFAIL
;

232 
	}
}

235 
	$vP‹tEndScheduÀr
( )

238 
	}
}

241 
	$vP‹tYõld
( )

243 
öt32_t
 
lI¡îru±Mask
;

247 
lI¡îru±Mask
 = 
	`gë_imask
();

252 
	`£t_imask
–
p‹tKERNEL_INTERRUPT_PRIORITY
 );

254 
	`å≠a
–
p‹tYIELD_TRAP_NO
 );

258 
	`£t_imask
––Ë
lI¡îru±Mask
 );

259 
	}
}

262 
Ba£Ty≥_t
 
	$xP‹tU£sFlﬂtögPoöt
–
TaskH™dÀ_t
 
xTask
 )

264 
uöt32_t
 *
pulFl›Buf„r
;

265 
Ba£Ty≥_t
 
xRëu∫
;

266 * vﬁ©ûê
pxCuºítTCB
;

274 if–
xTask
 =
NULL
 )

276 
xTask
 = ( 
TaskH™dÀ_t
 ) 
pxCuºítTCB
;

280 
pulFl›Buf„r
 = ( 
uöt32_t
 * ) 
	`pvP‹tMÆloc
–
p‹tFLOP_STORAGE_SIZE
 );

282 if–
pulFl›Buf„r
 !
NULL
 )

285 
	`mem£t
––* ) 
pulFl›Buf„r
, 0x00, 
p‹tFLOP_STORAGE_SIZE
 );

289 *
pulFl›Buf„r
 = 
	`gë_Âs¸
();

293 
	`vTaskSëAµliˇti⁄TaskTag
–
xTask
, ( * ) ( 
pulFl›Buf„r
 + 
p‹tFLOP_REGISTERS_TO_STORE
 ) );

294 
xRëu∫
 = 
pdPASS
;

298 
xRëu∫
 = 
pdFAIL
;

301  
xRëu∫
;

302 
	}
}

	@portable/Renesas/SH2A_FPU/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 
	~<machöe.h
>

72 #ifde‡
__˝lu•lus


88 
	#p‹tCHAR
 

	)

89 
	#p‹tFLOAT
 

	)

90 
	#p‹tDOUBLE
 

	)

91 
	#p‹tLONG
 

	)

92 
	#p‹tSHORT
 

	)

93 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

94 
	#p‹tBASE_TYPE
 

	)

96 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

97 
	tBa£Ty≥_t
;

98 
	tUBa£Ty≥_t
;

100 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

101 
uöt16_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

104 
uöt32_t
 
	tTickTy≥_t
;

105 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

110 
	#p‹tBYTE_ALIGNMENT
 8

	)

111 
	#p‹tSTACK_GROWTH
 -1

	)

112 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

113 
	#p‹tNOP
(Ë
	`n›
()

	)

114 
	#p‹tSTART_SCHEDULER_TRAP_NO
 ( 32 )

	)

115 
	#p‹tYIELD_TRAP_NO
 ( 33 )

	)

116 
	#p‹tKERNEL_INTERRUPT_PRIORITY
 ( 1 )

	)

118 
vP‹tYõld
( );

119 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

121 
vTaskSwôchC⁄ãxt
( );

122 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x !
pdFALSE
 ) 
	`vTaskSwôchC⁄ãxt
()

	)

129 
Ba£Ty≥_t
 
xP‹tU£sFlﬂtögPoöt
–* 
xTask
 );

135 
vP‹tSaveFl›Regi°îs
–*
pulBuf„r
 );

136 
vP‹tRe°‹eFl›Regi°îs
–*
pulBuf„r
 );

143 
	#åa˚TASK_SWITCHED_OUT
(Ëif–
pxCuºítTCB
->
pxTaskTag
 !
NULL
 ) 
	`vP‹tSaveFl›Regi°îs
–pxCuºítTCB->pxTaskTag )

	)

144 
	#åa˚TASK_SWITCHED_IN
(Ëif–
pxCuºítTCB
->
pxTaskTag
 !
NULL
 ) 
	`vP‹tRe°‹eFl›Regi°îs
–pxCuºítTCB->pxTaskTag )

	)

150 
	#p‹tENABLE_INTERRUPTS
(Ë
	`£t_imask
–0x00 )

	)

151 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`£t_imask
–
p‹tKERNEL_INTERRUPT_PRIORITY
 )

	)

154 
	#p‹tCRITICAL_NESTING_IN_TCB
 ( 1 )

	)

157 
vTaskE¡îCrôiˇl
( );

158 
vTaskExôCrôiˇl
( );

159 
	#p‹tENTER_CRITICAL
(Ë
	`vTaskE¡îCrôiˇl
();

	)

160 
	#p‹tEXIT_CRITICAL
(Ë
	`vTaskExôCrôiˇl
();

	)

165 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

166 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

168 #ifde‡
__˝lu•lus


	@portable/Rowley/MSP430F449/port.c

67 
	~"FªeRTOS.h
"

68 
	~"èsk.h
"

76 
	#p‹tACLK_FREQUENCY_HZ
 ( ( 
TickTy≥_t
 ) 32768 )

	)

77 
	#p‹tINITIAL_CRITICAL_NESTING
 ( ( 
uöt16_t
 ) 10 )

	)

78 
	#p‹tFLAGS_INT_ENABLED
 ( ( 
SèckTy≥_t
 ) 0x08 )

	)

82 
	tTCB_t
;

83 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

93 vﬁ©ûê
uöt16_t
 
	gusCrôiˇlNe°ög
 = 
p‹tINITIAL_CRITICAL_NESTING
;

101 
¥vSëupTimîI¡îru±
( );

110 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

128 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

129 
pxT›OfSèck
--;

130 *
pxT›OfSèck
 = 
p‹tFLAGS_INT_ENABLED
;

131 
pxT›OfSèck
--;

134 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x4444;

135 
pxT›OfSèck
--;

136 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x5555;

137 
pxT›OfSèck
--;

138 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x6666;

139 
pxT›OfSèck
--;

140 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x7777;

141 
pxT›OfSèck
--;

142 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x8888;

143 
pxT›OfSèck
--;

144 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x9999;

145 
pxT›OfSèck
--;

146 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xaaaa;

147 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xbbbb;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xcccc;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xdddd;

153 
pxT›OfSèck
--;

154 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xeeee;

155 
pxT›OfSèck
--;

159 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

160 
pxT›OfSèck
--;

165 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

169  
pxT›OfSèck
;

170 
	}
}

173 
	$vP‹tEndScheduÀr
( )

177 
	}
}

184 
	$¥vSëupTimîI¡îru±
( )

187 
TACTL
 = 0;

190 
TACTL
 = 
TASSEL_1
;

193 
TACTL
 |
TACLR
;

196 
TACCR0
 = 
p‹tACLK_FREQUENCY_HZ
 / 
c⁄figTICK_RATE_HZ
;

199 
TACCTL0
 = 
CCIE
;

202 
TACTL
 |
TACLR
;

205 
TACTL
 |
MC_1
;

206 
	}
}

	@portable/Rowley/MSP430F449/portasm.h

66 #i‚de‡
PORT_ASM_H


67 
	#PORT_ASM_H


	)

69 
p‹tSAVE_CONTEXT
 
ma¸o


71 
push
 
r4


72 
push
 
r5


73 
push
 
r6


74 
push
 
r7


75 
push
 
r8


76 
push
 
r9


77 
push
 
r10


78 
push
 
r11


79 
push
 
r12


80 
push
 
r13


81 
push
 
r14


82 
push
 
r15


83 
	gmov
.
	gw
 &
	g_usCrôiˇlNe°ög
, 
r14


84 
push
 
r14


85 
	gmov
.
	gw
 &
	g_pxCuºítTCB
, 
r12


86 
	gmov
.
w
 
	gr1
, @
r12


87 
ídm


90 
p‹tRESTORE_CONTEXT
 
ma¸o


91 
	gmov
.
	gw
 &
	g_pxCuºítTCB
, 
r12


92 
	gmov
.
	gw
 @
	gr12
, 
r1


93 
p›
 
r15


94 
	gmov
.
w
 
	gr15
, &
_usCrôiˇlNe°ög


95 
p›
 
r15


96 
p›
 
r14


97 
p›
 
r13


98 
p›
 
r12


99 
p›
 
r11


100 
p›
 
r10


101 
p›
 
r9


102 
p›
 
r8


103 
p›
 
r7


104 
p›
 
r6


105 
p›
 
r5


106 
p›
 
r4


111 
	gbic
.
	gw
 #0
	gxf0
,0(
	gSP
)

113 
ªti


114 
	gídm


	@portable/Rowley/MSP430F449/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

80 
	#p‹tCHAR
 

	)

81 
	#p‹tFLOAT
 

	)

82 
	#p‹tDOUBLE
 

	)

83 
	#p‹tLONG
 

	)

84 
	#p‹tSHORT
 

	)

85 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

86 
	#p‹tBASE_TYPE
 

	)

88 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

89 
	tBa£Ty≥_t
;

90 
	tUBa£Ty≥_t
;

93 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

94 
uöt16_t
 
	tTickTy≥_t
;

95 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

97 
uöt32_t
 
	tTickTy≥_t
;

98 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

104 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`_DINT
(); 
	`_NOP
()

	)

105 
	#p‹tENABLE_INTERRUPTS
(Ë
	`_EINT
();

	)

109 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
uöt16_t
 ) 0 )

	)

111 
	#p‹tENTER_CRITICAL
(Ë\

	)

113 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

115 
p‹tDISABLE_INTERRUPTS
(); \

120 
	gusCrôiˇlNe°ög
++; \

123 
	#p‹tEXIT_CRITICAL
(Ë\

	)

125 vﬁ©ûê
uöt16_t
 
usCrôiˇlNe°ög
; \

127 if–
	gusCrôiˇlNe°ög
 > 
	gp‹tNO_CRITICAL_SECTION_NESTING
 ) \

130 
	gusCrôiˇlNe°ög
--; \

134 if–
	gusCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

136 
p‹tENABLE_INTERRUPTS
(); \

147 
vP‹tYõld
( );

148 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

152 
	#p‹tBYTE_ALIGNMENT
 2

	)

153 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

154 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

155 
	#p‹tNOP
()

	)

159 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

160 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†Ë
__t›Àvñ


	)

162 #i‡
c⁄figINTERRUPT_EXAMPLE_METHOD
 == 2

164 
vTaskSwôchC⁄ãxt
( );

165 
	#p‹tYIELD_FROM_ISR
–
x
 ) if–x ) 
	`vTaskSwôchC⁄ãxt
()

	)

	@portable/SDCC/Cygnal/port.c

71 
	~<°rög.h
>

74 
	~"FªeRTOS.h
"

75 
	~"èsk.h
"

78 
	#p‹tCLOCK_DIVISOR
 ( ( 
uöt32_t
 ) 12 )

	)

79 
	#p‹tMAX_TIMER_VALUE
 ( ( 
uöt32_t
 ) 0xfff‡)

	)

80 
	#p‹tENABLE_TIMER
 ( ( 
uöt8_t
 ) 0x04 )

	)

81 
	#p‹tTIMER_2_INTERRUPT_ENABLE
 ( ( 
uöt8_t
 ) 0x20 )

	)

84 
	#p‹tGLOBAL_INTERRUPT_BIT
 ( ( 
SèckTy≥_t
 ) 0x80 )

	)

87 
	#p‹tINITIAL_PSW
 ( ( 
SèckTy≥_t
 ) 0x00 )

	)

90 
	#p‹tCLEAR_INTERRUPT_FLAG
(Ë
TMR2CN
 &~0x80;

	)

94 
d©a
 
uöt8_t
 
	gucSèckByãs
;

98 
xd©a
 
SèckTy≥_t
 * 
d©a
 
	gpxXRAMSèck
;

102 
d©a
 
SèckTy≥_t
 * d©®
	gpxRAMSèck
;

106 
	tTCB_t
;

107 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

113 
¥vSëupTimîI¡îru±
( );

121 
	#p‹tCOPY_STACK_TO_XRAM
(Ë\

	)

126 
	gpxXRAMSèck
 = ( 
xd©a
 
SèckTy≥_t
 * ) *––xd©®SèckTy≥_à** ) 
pxCuºítTCB
 ); \

129 
	gpxRAMSèck
 = ( 
d©a
 
SèckTy≥_t
 * d©®Ë
c⁄figSTACK_START
; \

133 
	gucSèckByãs
 = 
SP
 - ( 
c⁄figSTACK_START
 - 1 ); \

137 *
	gpxXRAMSèck
 = 
ucSèckByãs
; \

141  
	gucSèckByãs
 ) \

143 
	gpxXRAMSèck
++; \

144 *
	gpxXRAMSèck
 = *
pxRAMSèck
; \

145 
	gpxRAMSèck
++; \

146 
	gucSèckByãs
--; \

155 
	#p‹tCOPY_XRAM_TO_STACK
(Ë\

	)

159 
	gpxXRAMSèck
 = ( 
xd©a
 
SèckTy≥_t
 * ) *––xd©®SèckTy≥_à** ) 
pxCuºítTCB
 ); \

160 
	gpxRAMSèck
 = ( 
d©a
 
SèckTy≥_t
 * d©®Ë–
c⁄figSTACK_START
 - 1 ); \

164 
	gucSèckByãs
 = 
pxXRAMSèck
[ 0 ]; \

169 
	gpxXRAMSèck
++; \

170 
	gpxRAMSèck
++; \

171 *
	gpxRAMSèck
 = *
pxXRAMSèck
; \

172 
	gucSèckByãs
--; \

173 }  
	gucSèckByãs
 ); \

176 
	gSP
 = ( 
uöt8_t
 ) 
pxRAMSèck
; \

184 
	#p‹tSAVE_CONTEXT
(Ë\

	)

186 
	g_asm
 \

189 
push
 
	gACC
 \

191 
push
 
	gIE
 \

192 
˛r
 
	g_EA
 \

193 
push
 
	gDPL
 \

194 
push
 
	gDPH
 \

195 
push
 
	gb
 \

196 
push
 
	g¨2
 \

197 
push
 
	g¨3
 \

198 
push
 
	g¨4
 \

199 
push
 
	g¨5
 \

200 
push
 
	g¨6
 \

201 
push
 
	g¨7
 \

202 
push
 
	g¨0
 \

203 
push
 
	g¨1
 \

204 
push
 
	gPSW
 \

205 
	g_ídasm
; \

206 
	gPSW
 = 0; \

207 
	g_asm
 \

208 
push
 
	g_bp
 \

209 
	g_ídasm
; \

217 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

219 
	g_asm
 \

220 
p›
 
	g_bp
 \

221 
p›
 
	gPSW
 \

222 
p›
 
	g¨1
 \

223 
p›
 
	g¨0
 \

224 
p›
 
	g¨7
 \

225 
p›
 
	g¨6
 \

226 
p›
 
	g¨5
 \

227 
p›
 
	g¨4
 \

228 
p›
 
	g¨3
 \

229 
p›
 
	g¨2
 \

230 
p›
 
	gb
 \

231 
p›
 
	gDPH
 \

232 
p›
 
	gDPL
 \

236 
p›
 
	gACC
 \

237 
JB
 
	gACC
.7,0098
	g$
 \

238 
CLR
 
	gIE
.7 \

239 
	gLJMP
 0099
	g$
 \

240 0098
	g$
: \

241 
SETB
 
IE
.7 \

242 0099
$
: \

244 
p›
 
ACC
 \

245 
ªti
 \

246 
_ídasm
; \

253 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

255 
uöt32_t
 
ulAddªss
;

256 
SèckTy≥_t
 *
pxSèπOfSèck
;

259 
pxSèπOfSèck
 = 
pxT›OfSèck
;

260 
pxT›OfSèck
++;

276 
ulAddªss
 = ( 
uöt32_t
 ) 
pxCode
;

277 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
ulAddªss
;

278 
ulAddªss
 >>= 8;

279 
pxT›OfSèck
++;

280 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
ulAddªss
 );

281 
pxT›OfSèck
++;

284 *
pxT›OfSèck
 = 0xaa;

285 
pxT›OfSèck
++;

288 *
pxT›OfSèck
 = 
p‹tGLOBAL_INTERRUPT_BIT
;

289 
pxT›OfSèck
++;

293 
ulAddªss
 = ( 
uöt32_t
 ) 
pvP¨amëîs
;

294 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
ulAddªss
;

295 
ulAddªss
 >>= 8;

296 *
pxT›OfSèck
++;

297 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
ulAddªss
;

298 
ulAddªss
 >>= 8;

299 
pxT›OfSèck
++;

300 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
ulAddªss
;

301 
pxT›OfSèck
++;

304 *
pxT›OfSèck
 = 0x02;

305 
pxT›OfSèck
++;

306 *
pxT›OfSèck
 = 0x03;

307 
pxT›OfSèck
++;

308 *
pxT›OfSèck
 = 0x04;

309 
pxT›OfSèck
++;

310 *
pxT›OfSèck
 = 0x05;

311 
pxT›OfSèck
++;

312 *
pxT›OfSèck
 = 0x06;

313 
pxT›OfSèck
++;

314 *
pxT›OfSèck
 = 0x07;

315 
pxT›OfSèck
++;

316 *
pxT›OfSèck
 = 0x00;

317 
pxT›OfSèck
++;

318 *
pxT›OfSèck
 = 0x01;

319 
pxT›OfSèck
++;

320 *
pxT›OfSèck
 = 0x00;

321 
pxT›OfSèck
++;

322 *
pxT›OfSèck
 = 0xbb;

328 *
pxSèπOfSèck
 = ( 
SèckTy≥_t
 ) ( 
pxT›OfSèck
 -ÖxStartOfStack );

332  
pxSèπOfSèck
;

333 
	}
}

339 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

342 
	`¥vSëupTimîI¡îru±
();

346 
SFRPAGE
 = 0;

350 
	`p‹tCOPY_XRAM_TO_STACK
();

351 
	`p‹tRESTORE_CONTEXT
();

354  
pdTRUE
;

355 
	}
}

358 
	$vP‹tEndScheduÀr
( )

361 
	}
}

368 
	$vP‹tYõld
–Ë
_«ked


376 
	`p‹tSAVE_CONTEXT
();

377 
	`p‹tCOPY_STACK_TO_XRAM
();

380 
	`vTaskSwôchC⁄ãxt
();

384 
	`p‹tCOPY_XRAM_TO_STACK
();

385 
	`p‹tRESTORE_CONTEXT
();

386 
	}
}

389 #i‡
c⁄figUSE_PREEMPTION
 == 1

390 
	$vTimî2ISR
–Ë
öãºu±
 5 
_«ked


396 
	`p‹tSAVE_CONTEXT
();

397 
	`p‹tCOPY_STACK_TO_XRAM
();

399 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

401 
	`vTaskSwôchC⁄ãxt
();

404 
	`p‹tCLEAR_INTERRUPT_FLAG
();

405 
	`p‹tCOPY_XRAM_TO_STACK
();

406 
	`p‹tRESTORE_CONTEXT
();

407 
	}
}

409 
	$vTimî2ISR
–Ë
öãºu±
 5

414 
	`xTaskIn¸emítTick
();

415 
	`p‹tCLEAR_INTERRUPT_FLAG
();

416 
	}
}

420 
	$¥vSëupTimîI¡îru±
( )

422 
uöt8_t
 
ucOrigöÆSFRPage
;

425 c⁄° 
uöt32_t
 
ulTicksPîSec⁄d
 = 
c⁄figCPU_CLOCK_HZ
 / 
p‹tCLOCK_DIVISOR
;

426 c⁄° 
uöt32_t
 
ulC≠tuªTime
 = 
ulTicksPîSec⁄d
 / 
c⁄figTICK_RATE_HZ
;

427 c⁄° 
uöt32_t
 
ulC≠tuªVÆue
 = 
p‹tMAX_TIMER_VALUE
 - 
ulC≠tuªTime
;

428 c⁄° 
uöt8_t
 
ucLowC≠tuªByã
 = ( uöt8_àË–
ulC≠tuªVÆue
 & ( 
uöt32_t
 ) 0xff );

429 c⁄° 
uöt8_t
 
ucHighC≠tuªByã
 = ( uöt8_àË–
ulC≠tuªVÆue
 >> ( 
uöt32_t
 ) 8 );

435 
ucOrigöÆSFRPage
 = 
SFRPAGE
;

436 
SFRPAGE
 = 0;

439 
TMR2CF
 = ( 
uöt8_t
 ) 0;

442 
RCAP2L
 = 
ucLowC≠tuªByã
;

443 
RCAP2H
 = 
ucHighC≠tuªByã
;

446 
TMR2L
 = 
ucLowC≠tuªByã
;

447 
TMR2H
 = 
ucHighC≠tuªByã
;

450 
IE
 |
p‹tTIMER_2_INTERRUPT_ENABLE
;

454 
TMR2CN
 = 
p‹tENABLE_TIMER
;

457 
SFRPAGE
 = 
ucOrigöÆSFRPage
;

458 
	}
}

	@portable/SDCC/Cygnal/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #i‡
c⁄figUSE_PREEMPTION
 == 0

70 
	$vTimî2ISR
–Ë
öãºu±
 5;

72 
	$vTimî2ISR
–Ë
öãºu±
 5 
_«ked
;

75 
	$vSîülISR
–Ë
öãºu±
 4;

89 
	#p‹tCHAR
 

	)

90 
	#p‹tFLOAT
 

	)

91 
	#p‹tDOUBLE
 

	)

92 
	#p‹tLONG
 

	)

93 
	#p‹tSHORT
 

	)

94 
	#p‹tSTACK_TYPE
 
uöt8_t


	)

95 
	#p‹tBASE_TYPE
 

	)

97 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

98 sig√d 
	tBa£Ty≥_t
;

99 
	tUBa£Ty≥_t
;

101 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

102 
uöt16_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

105 
uöt32_t
 
	tTickTy≥_t
;

106 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

111 
	#p‹tENTER_CRITICAL
(Ë
_asm
 \

	)

112 
push
 
ACC
 \

113 
push
 
IE
 \

114 
_ídasm
; \

115 
EA
 = 0;

117 
	#p‹tEXIT_CRITICAL
(Ë
_asm
 \

	)

118 
p›
 
ACC
 \

119 
_ídasm
; \

120 
ACC
 &= 0x80; \

121 
IE
 |
ACC
; \

122 
_asm
 \

123 
p›
 
ACC
 \

124 
_ídasm
;

126 
	#p‹tDISABLE_INTERRUPTS
(Ë
EA
 = 0;

	)

127 
	#p‹tENABLE_INTERRUPTS
(Ë
EA
 = 1;

	)

131 
	#p‹tBYTE_ALIGNMENT
 1

	)

132 
	#p‹tSTACK_GROWTH
 ( 1 )

	)

133 
	#p‹tTICK_PERIOD_MS
 ( ( 
uöt32_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

137 
	$vP‹tYõld
–Ë
_«ked
;

138 
	#p‹tYIELD
(Ë
	`vP‹tYõld
();

	)

141 
	#p‹tNOP
(Ë
_asm
 \

	)

142 
n›
 \

143 
_ídasm
;

148 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

149 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

	@portable/Softune/MB91460/__STD_LIB_sbrk.c

1 
	~"FªeRTOSC⁄fig.h
"

2 
	~<°dlib.h
>

4 
	gbrk_siz
 = 0;

6 
	t_hìp_t
;

7 
	#ROUNDUP
(
s
Ë(((s)+(
_hìp_t
)-1)&~((_hìp_t)-1))

	)

8 
_hìp_t
 
	g_hìp
[
ROUNDUP
(
c⁄figTOTAL_HEAP_SIZE
)/(_heep_t)];

9 
	#_hìp_size
 
	`ROUNDUP
(
c⁄figTOTAL_HEAP_SIZE
)

	)

15 *
	$sbrk
(
size
)

17 i‡(
brk_siz
 + 
size
 > 
_hìp_size
 || brk_siz + size < 0)

20 
brk_siz
 +
size
;

21 –(*)
_hìp
 + 
brk_siz
 - 
size
);

22 
	}
}

	@portable/Softune/MB91460/port.c

66 
	~"FªeRTOS.h
"

67 
	~"èsk.h
"

68 
	~"mb91467d.h
"

74 
	tTCB_t
;

75 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

79 #¥agm®
asm


80 #ma¸ÿ
SaveC⁄ãxt


81 
	gORCCR
 #0
	gx20
 ;
Swôch
 
to
 
u£r
 
°ack


82 
ST
 
	gRP
,@-
	gR15
 ;
St‹e
 
RP


83 
STM0
 (
R7
,
R6
,
R5
,
R4
,
R3
,
R2
,
R1
,
R0
Ë;
St‹e
 
	gR7
-R0

84 
STM1
 (
R14
,
R13
,
R12
,
R11
,
R10
,
R9
,
R8
Ë;
St‹e
 
	gR14
-R8

85 
ST
 
	gMDH
, @-
	gR15
 ;
St‹e
 
MDH


86 
ST
 
	gMDL
, @-
	gR15
 ;
St‹e
 
MDL


88 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
back
 
to
 
sy°em
 
°ack


89 
	gLD
 @
	gR15
+,
	gR0
 ;
St‹e
 
PC
 
to
 
R0


90 
	gORCCR
 #0
	gx20
 ;
Swôch
 
to
 
u£r
 
°ack


91 
ST
 
	gR0
,@-
	gR15
 ;
St‹e
 
PC
 
to
 
U£r
 
°ack


93 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
back
 
to
 
sy°em
 
°ack


94 
	gLD
 @
	gR15
+,
	gR0
 ;
St‹e
 
PS
 
to
 
R0


95 
	gORCCR
 #0
	gx20
 ;
Swôch
 
to
 
u£r
 
°ack


96 
ST
 
	gR0
,@-
	gR15
 ;
St‹e
 
PS
 
to
 
U£r
 
°ack


98 
	gLDI
 #_pxCuºítTCB, 
	gR0
 ;
Gë
 
pxCuºítTCB
 
addªss


99 
	gLD
 @
	gR0
, R0 ;
Gë
 
the
 
	gpxCuºítTCB
->
pxT›OfSèck
 
addªss


100 
ST
 
	gR15
,@
	gR0
 ;
St‹e
 
USP
 
to
 
	gpxCuºítTCB
->
pxT›OfSèck


102 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
back
 
to
 
sy°em
 
°ack
 
the
 
ª°
 
of
 
tick
 
	gISR


105 #ma¸ÿ
Re°‹eC⁄ãxt


106 
	gLDI
 #_pxCuºítTCB, 
	gR0
 ;
Gë
 
pxCuºítTCB
 
addªss


107 
	gLD
 @
	gR0
, R0 ;
Gë
 
the
 
	gpxCuºítTCB
->
pxT›OfSèck
 
addªss


108 
	gORCCR
 #0
	gx20
 ;
Swôch
 
to
 
u£r
 
°ack


109 
	gLD
 @
	gR0
, 
	gR15
 ;
Re°‹e
 
USP
 
‰om
 
	gpxCuºítTCB
->
pxT›OfSèck


111 
	gLD
 @
	gR15
+,
	gR0
 ;
St‹e
 
PS
 
to
 
R0


112 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
to
 
sy°em
 
°ack


113 
ST
 
	gR0
,@-
	gR15
 ;
St‹e
 
PS
 
to
 
sy°em
 
°ack


115 
	gORCCR
 #0
	gx20
 ;
Swôch
 
to
 
u£r
 
°ack


116 
	gLD
 @
	gR15
+,
	gR0
 ;
St‹e
 
PC
 
to
 
R0


117 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
to
 
sy°em
 
°ack


118 
ST
 
	gR0
,@-
	gR15
 ;
St‹e
 
PC
 
to
 
sy°em
 
°ack


120 
	gORCCR
 #0
	gx20
 ;
Swôch
 
back
 
to
 
ªåõve
 
the
 
ªmaöög
 
c⁄ãxt


122 
	gLD
 @
	gR15
+, 
	gMDL
 ;
Re°‹e
 
MDL


123 
	gLD
 @
	gR15
+, 
	gMDH
 ;
Re°‹e
 
MDH


124 
LDM1
 (
R14
,
R13
,
R12
,
R11
,
R10
,
R9
,
R8
Ë;
Re°‹e
 
	gR14
-R8

125 
LDM0
 (
R7
,
R6
,
R5
,
R4
,
R3
,
R2
,
R1
,
R0
Ë;
Re°‹e
 
	gR7
-R0

126 
	gLD
 @
	gR15
+, 
	gRP
 ;
Re°‹e
 
RP


128 
	gANDCCR
 #0
	gxDF
 ;
Swôch
 
back
 
to
 
sy°em
 
°ack
 
the
 
ª°
 
of
 
tick
 
	gISR


130 #¥agm®
ídasm


137 
¥vSëupTimîI¡îru±
( );

146 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

151 *
pxT›OfSèck
 = 0x11111111;

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = 0x22222222;

154 
pxT›OfSèck
--;

155 *
pxT›OfSèck
 = 0x33333333;

156 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = (
SèckTy≥_t
)(
pvP¨amëîs
);

162 
pxT›OfSèck
--;

164 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00000000;

165 
pxT›OfSèck
--;

166 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00007777;

167 
pxT›OfSèck
--;

168 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00006666;

169 
pxT›OfSèck
--;

170 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00005555;

171 
pxT›OfSèck
--;

177 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) (
pvP¨amëîs
);

178 
pxT›OfSèck
--;

179 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00003333;

180 
pxT›OfSèck
--;

181 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00002222;

182 
pxT›OfSèck
--;

183 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00001111;

184 
pxT›OfSèck
--;

185 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00000001;

186 
pxT›OfSèck
--;

187 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0000EEEE;

188 
pxT›OfSèck
--;

189 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0000DDDD;

190 
pxT›OfSèck
--;

191 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0000CCCC;

192 
pxT›OfSèck
--;

193 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0000BBBB;

194 
pxT›OfSèck
--;

195 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0000AAAA;

196 
pxT›OfSèck
--;

197 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00009999;

198 
pxT›OfSèck
--;

199 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x00008888;

200 
pxT›OfSèck
--;

201 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x11110000;

202 
pxT›OfSèck
--;

203 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x22220000;

204 
pxT›OfSèck
--;

207 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

208 
pxT›OfSèck
--;

211 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x001F0030;

213  
pxT›OfSèck
;

214 
	}
}

217 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

220 
	`¥vSëupTimîI¡îru±
();

223 #¥agm®
asm


224 
Re°‹eC⁄ãxt


225 #¥agm®
ídasm


229 
	`__asm
("Ñeti ");

232  
pdFAIL
;

233 
	}
}

236 
	$vP‹tEndScheduÀr
( )

240 
	}
}

243 
	$¥vSëupTimîI¡îru±
( )

246 c⁄° 
uöt16_t
 
usRñﬂdVÆue
 = ( uöt16_àË–––
c⁄figPER_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) / 32UL ) - 1UL );

250 
TMCSR0_CNTE
 = 0;

251 
TMCSR0_CSL
 = 0x2;

252 
TMCSR0_MOD
 = 0;

253 
TMCSR0_RELD
 = 1;

255 
TMCSR0_UF
 = 0;

256 
TMRLR0
 = 
usRñﬂdVÆue
;

257 
TMCSR0_INTE
 = 1;

258 
TMCSR0_CNTE
 = 1;

259 
TMCSR0_TRG
 = 1;

261 
PORTEN
 = 0x3;

262 
	}
}

265 #i‡
c⁄figUSE_PREEMPTION
 == 1

273 #¥agm®
asm


275 .
globÆ
 
_RñﬂdTimî0_IRQH™dÀr


276 
	g_RñﬂdTimî0_IRQH™dÀr
:

278 
ANDCCR
 #0
xEF
 ;
DißbÀ
 
I¡îru±s


279 
	gSaveC⁄ãxt
 ;
Save
 
c⁄ãxt


280 
	gORCCR
 #0
	gx10
 ;
	gRe
-
íabÀ
 
I¡îru±s


282 
	gLDI
 #0
	gxFFFB
,
R1


283 
	gLDI
 #_tmc§0, 
R0


284 
AND
 
	gR1
,@
	gR0
 ;
CÀ¨
 
RLT0
 
öãºu±
 
Êag


286 
CALL32
 
	g_xTaskIn¸emítTick
,
	gR12
 ;
In¸emít
 
Tick


287 
CALL32
 
	g_vTaskSwôchC⁄ãxt
,
	gR12
 ;
Swôch
 
c⁄ãxt
 
ªquúed


289 
	gANDCCR
 #0
	gxEF
 ;
DißbÀ
 
I¡îru±s


290 
	gRe°‹eC⁄ãxt
 ;
Re°‹e
 
c⁄ãxt


291 
	gORCCR
 #0
	gx10
 ;
	gRe
-
íabÀ
 
I¡îru±s


293 
	gRETI


295 #¥agm®
ídasm


304 
__öãºu±
 
	$RñﬂdTimî0_IRQH™dÀr
( )

307 
TMCSR0_UF
 = 0;

308 
	`xTaskIn¸emítTick
();

309 
	}
}

318 #¥agm®
asm


320 .
globÆ
 
_vP‹tYõldDñayed


321 
	g_vP‹tYõldDñayed
:

323 
ANDCCR
 #0
xEF
 ;
DißbÀ
 
I¡îru±s


324 
	gSaveC⁄ãxt
 ;
Save
 
c⁄ãxt


325 
	gORCCR
 #0
	gx10
 ;
	gRe
-
íabÀ
 
I¡îru±s


327 
	gLDI
 #_di¸, 
R0


328 
	gBANDL
 #0
	gx0E
, @
	gR0
 ;
CÀ¨
 
Dñayed
 
öãºu±
 
Êag


330 
CALL32
 
	g_vTaskSwôchC⁄ãxt
,
	gR12
 ;
Swôch
 
c⁄ãxt
 
ªquúed


332 
	gANDCCR
 #0
	gxEF
 ;
DißbÀ
 
I¡îru±s


333 
	gRe°‹eC⁄ãxt
 ;
Re°‹e
 
c⁄ãxt


334 
	gORCCR
 #0
	gx10
 ;
	gRe
-
íabÀ
 
I¡îru±s


336 
	gRETI


338 #¥agm®
ídasm


346 #¥agm®
asm


348 .
globÆ
 
_vP‹tYõld


349 
	g_vP‹tYõld
:

351 
SaveC⁄ãxt
 ;
Save
 
c⁄ãxt


352 
CALL32
 
	g_vTaskSwôchC⁄ãxt
,
	gR12
 ;
Swôch
 
c⁄ãxt
 
ªquúed


353 
	gRe°‹eC⁄ãxt
 ;
Re°‹e
 
c⁄ãxt


355 
	gRETI


357 #¥agm®
ídasm


	@portable/Softune/MB91460/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

70 
	~"mb91467d.h
"

73 
	~<°ddef.h
>

86 
	#p‹tCHAR
 

	)

87 
	#p‹tFLOAT
 

	)

88 
	#p‹tDOUBLE
 

	)

89 
	#p‹tLONG
 

	)

90 
	#p‹tSHORT
 

	)

91 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

92 
	#p‹tBASE_TYPE
 

	)

94 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

95 
	tBa£Ty≥_t
;

96 
	tUBa£Ty≥_t
;

99 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

100 
uöt16_t
 
	tTickTy≥_t
;

101 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

103 
uöt32_t
 
	tTickTy≥_t
;

104 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

109 #i‡
c⁄figKERNEL_INTERRUPT_PRIORITY
 != 30

110 #îr‹ 
c⁄figKERNEL_INTERRUPT_PRIORITY
 (
£t
 
ö
 
FªeRTOSC⁄fig
.
h
Ë
mu°
 
m©ch
 
the
 
ILM
 
vÆue
 së i¿thê
fﬁlowög
 
löe
 - 30 (1EhË
beög
Åhe .

112 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
(" STILM #1Eh ")

	)

113 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
(" STILM #1Fh ")

	)

115 
	#p‹tENTER_CRITICAL
(Ë\

	)

116 
__asm
(" ST PS,@-R15 "); \

117 
__asm
(" ANDCCR #0xef "); \

120 
	#p‹tEXIT_CRITICAL
(Ë\

	)

121 
__asm
(" LD @R15+,PS "); \

126 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

127 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

128 
	#p‹tBYTE_ALIGNMENT
 4

	)

129 
	#p‹tNOP
(Ë
	`__asm
–"Ç› " );

	)

133 
	#p‹tYIELD
(Ë
	`__asm
–" INT #40H " );

	)

136 
	#p‹tYIELD_FROM_ISR
(Ë
DICR_DLYI
 = 1

	)

140 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

141 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

143 
	#p‹tMINIMAL_STACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

	@portable/Softune/MB96340/__STD_LIB_sbrk.c

11 
	~"FªeRTOSC⁄fig.h
"

12 
	~<°dlib.h
>

14 
	gbrk_siz
 = 0;

15 
	t_hìp_t
;

16 
	#ROUNDUP
(
s
Ë(((s)+(
_hìp_t
)-1)&~((_hìp_t)-1))

	)

17 
_hìp_t
 
	g_hìp
[
ROUNDUP
(
c⁄figTOTAL_HEAP_SIZE
)/(_heep_t)];

18 
	#_hìp_size
 
	`ROUNDUP
(
c⁄figTOTAL_HEAP_SIZE
)

	)

20 *
	$sbrk
(
size
)

22 i‡(
brk_siz
 + 
size
 > 
_hìp_size
 || brk_siz + size < 0)

25 
brk_siz
 +
size
;

26 –(*)
_hìp
 + 
brk_siz
 - 
size
);

27 
	}
}

	@portable/Softune/MB96340/port.c

66 
	~"FªeRTOS.h
"

67 
	~"èsk.h
"

76 
SèckTy≥_t
 
xGë_DPR_ADB_b™k
( );

81 
SèckTy≥_t
 
xGë_DTB_PCB_b™k
( );

87 
¥vSëupRLT0I¡îru±
( );

95 
	tTCB_t
;

96 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

110 #if––
c⁄figMEMMODEL
 =
p‹tSMALL
 ) || ( c⁄figMEMMODEL =
p‹tMEDIUM
 ) )

112 
	#p‹tSAVE_CONTEXT
(Ë\

	)

113 { 
__asm
(" POPW A "); \

114 
__asm
(" AND CCR,#H'DF "); \

115 
__asm
(" PUSHW A "); \

116 
__asm
(" OR CCR,#H'20 "); \

117 
__asm
(" POPW A "); \

118 
__asm
(" AND CCR,#H'DF "); \

119 
__asm
(" PUSHW A "); \

120 
__asm
(" OR CCR,#H'20 "); \

121 
__asm
(" POPW A "); \

122 
__asm
(" AND CCR,#H'DF "); \

123 
__asm
(" PUSHW A "); \

124 
__asm
(" OR CCR,#H'20 "); \

125 
__asm
(" POPW A "); \

126 
__asm
(" AND CCR,#H'DF "); \

127 
__asm
(" PUSHW A "); \

128 
__asm
(" OR CCR,#H'20 "); \

129 
__asm
(" POPW A "); \

130 
__asm
(" AND CCR,#H'DF "); \

131 
__asm
(" PUSHW A "); \

132 
__asm
(" OR CCR,#H'20 "); \

133 
__asm
(" POPW A "); \

134 
__asm
(" AND CCR,#H'DF "); \

135 
__asm
(" PUSHW A "); \

136 
__asm
(" PUSHW (RW0,RW1,RW2,RW3,RW4,RW5,RW6,RW7) "); \

137 
__asm
(" MOVW A, _pxCurrentTCB "); \

138 
__asm
(" MOVW A, SP "); \

139 
__asm
(" SWAPW "); \

140 
__asm
(" MOVW @AL, AH "); \

141 
__asm
(" OR CCR,#H'20 "); \

154 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

155 { 
__asm
(" MOVW A, _pxCurrentTCB "); \

156 
__asm
(" MOVW A, @A "); \

157 
__asm
(" AND CCR,#H'DF "); \

158 
__asm
(" MOVW SP, A "); \

159 
__asm
(" POPW (RW0,RW1,RW2,RW3,RW4,RW5,RW6,RW7) "); \

160 
__asm
(" POPW A "); \

161 
__asm
(" OR CCR,#H'20 "); \

162 
__asm
(" PUSHW A "); \

163 
__asm
(" AND CCR,#H'DF "); \

164 
__asm
(" POPW A "); \

165 
__asm
(" OR CCR,#H'20 "); \

166 
__asm
(" PUSHW A "); \

167 
__asm
(" AND CCR,#H'DF "); \

168 
__asm
(" POPW A "); \

169 
__asm
(" OR CCR,#H'20 "); \

170 
__asm
(" PUSHW A "); \

171 
__asm
(" AND CCR,#H'DF "); \

172 
__asm
(" POPW A "); \

173 
__asm
(" OR CCR,#H'20 "); \

174 
__asm
(" PUSHW A "); \

175 
__asm
(" AND CCR,#H'DF "); \

176 
__asm
(" POPW A "); \

177 
__asm
(" OR CCR,#H'20 "); \

178 
__asm
(" PUSHW A "); \

179 
__asm
(" AND CCR,#H'DF "); \

180 
__asm
(" POPW A "); \

181 
__asm
(" OR CCR,#H'20 "); \

182 
__asm
(" PUSHW A "); \

185 #ñif––
c⁄figMEMMODEL
 =
p‹tCOMPACT
 ) || ( c⁄figMEMMODEL =
p‹tLARGE
 ) )

187 
	#p‹tSAVE_CONTEXT
(Ë\

	)

188 { 
__asm
(" POPW A "); \

189 
__asm
(" AND CCR,#H'DF "); \

190 
__asm
(" PUSHW A "); \

191 
__asm
(" OR CCR,#H'20 "); \

192 
__asm
(" POPW A "); \

193 
__asm
(" AND CCR,#H'DF "); \

194 
__asm
(" PUSHW A "); \

195 
__asm
(" OR CCR,#H'20 "); \

196 
__asm
(" POPW A "); \

197 
__asm
(" AND CCR,#H'DF "); \

198 
__asm
(" PUSHW A "); \

199 
__asm
(" OR CCR,#H'20 "); \

200 
__asm
(" POPW A "); \

201 
__asm
(" AND CCR,#H'DF "); \

202 
__asm
(" PUSHW A "); \

203 
__asm
(" OR CCR,#H'20 "); \

204 
__asm
(" POPW A "); \

205 
__asm
(" AND CCR,#H'DF "); \

206 
__asm
(" PUSHW A "); \

207 
__asm
(" OR CCR,#H'20 "); \

208 
__asm
(" POPW A "); \

209 
__asm
(" AND CCR,#H'DF "); \

210 
__asm
(" PUSHW A "); \

211 
__asm
(" PUSHW (RW0,RW1,RW2,RW3,RW4,RW5,RW6,RW7) "); \

212 
__asm
(" MOVL A, _pxCurrentTCB "); \

213 
__asm
(" MOVL RL2, A "); \

214 
__asm
(" MOVW A, SP "); \

215 
__asm
(" MOVW @RL2+0, A "); \

216 
__asm
(" MOV A, USB "); \

217 
__asm
(" MOV @RL2+2, A "); \

220 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

221 { 
__asm
(" MOVL A, _pxCurrentTCB "); \

222 
__asm
(" MOVL RL2, A "); \

223 
__asm
(" MOVW A, @RL2+0 "); \

224 
__asm
(" AND CCR,#H'DF "); \

225 
__asm
(" MOVW SP, A "); \

226 
__asm
(" MOV A, @RL2+2 "); \

227 
__asm
(" MOV USB, A "); \

228 
__asm
(" POPW (RW0,RW1,RW2,RW3,RW4,RW5,RW6,RW7) "); \

229 
__asm
(" POPW A "); \

230 
__asm
(" OR CCR,#H'20 "); \

231 
__asm
(" PUSHW A "); \

232 
__asm
(" AND CCR,#H'DF "); \

233 
__asm
(" POPW A "); \

234 
__asm
(" OR CCR,#H'20 "); \

235 
__asm
(" PUSHW A "); \

236 
__asm
(" AND CCR,#H'DF "); \

237 
__asm
(" POPW A "); \

238 
__asm
(" OR CCR,#H'20 "); \

239 
__asm
(" PUSHW A "); \

240 
__asm
(" AND CCR,#H'DF "); \

241 
__asm
(" POPW A "); \

242 
__asm
(" OR CCR,#H'20 "); \

243 
__asm
(" PUSHW A "); \

244 
__asm
(" AND CCR,#H'DF "); \

245 
__asm
(" POPW A "); \

246 
__asm
(" OR CCR,#H'20 "); \

247 
__asm
(" PUSHW A "); \

248 
__asm
(" AND CCR,#H'DF "); \

249 
__asm
(" POPW A "); \

250 
__asm
(" OR CCR,#H'20 "); \

251 
__asm
(" PUSHW A "); \

261 #¥agm®
asm


263 .
GLOBAL
 
	g_xGë_DPR_ADB_b™k


264 .
GLOBAL
 
	g_xGë_DTB_PCB_b™k


265 .
SECTION
 
	gCODE
, CODE, 
	gALIGN
=1

267 
_xGë_DPR_ADB_b™k
:

269 
MOV
 
A
, 
DPR


270 
SWAP


271 
MOV
 
	gA
, 
ADB


272 
ORW
 
	gA


273 #i‡
c⁄figMEMMODEL
 =
p‹tMEDIUM
 || c⁄figMEMMODEL =
p‹tLARGE


274 
	gRETP


275 #ñi‡
c⁄figMEMMODEL
 =
p‹tSMALL
 || c⁄figMEMMODEL =
p‹tCOMPACT


276 
	gRET


280 
	g_xGë_DTB_PCB_b™k
:

282 
MOV
 
A
, 
DTB


283 
SWAP


284 
MOV
 
	gA
, 
PCB


285 
ORW
 
	gA


286 #i‡
c⁄figMEMMODEL
 =
p‹tMEDIUM
 || c⁄figMEMMODEL =
p‹tLARGE


287 
	gRETP


288 #ñi‡
c⁄figMEMMODEL
 =
p‹tSMALL
 || c⁄figMEMMODEL =
p‹tCOMPACT


289 
	gRET


292 #¥agm®
ídasm


301 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

305 *
pxT›OfSèck
 = 0x1111;

306 
pxT›OfSèck
--;

307 *
pxT›OfSèck
 = 0x2222;

308 
pxT›OfSèck
--;

309 *
pxT›OfSèck
 = 0x3333;

310 
pxT›OfSèck
--;

317 #if––
c⁄figMEMMODEL
 =
p‹tCOMPACT
 ) || ( c⁄figMEMMODEL =
p‹tLARGE
 ) )

319 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( ( 
uöt32_t
 ) ( 
pvP¨amëîs
 ) >> 16 );

320 
pxT›OfSèck
--;

324 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
pvP¨amëîs
 );

325 
pxT›OfSèck
--;

330 #if––
c⁄figMEMMODEL
 =
p‹tMEDIUM
 ) || ( c⁄figMEMMODEL =
p‹tLARGE
 ) )

332 *
pxT›OfSèck
 = ( 
	`xGë_DTB_PCB_b™k
(Ë& 0xff00 ) | ( ( ( 
öt32_t
 ) ( 
pxCode
 ) >> 16 ) & 0xff );

333 
pxT›OfSèck
--;

339 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
pxCode
 );

340 
pxT›OfSèck
--;

343 *
pxT›OfSèck
 = 0xE0C0;

344 
pxT›OfSèck
--;

347 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) ( 
pxCode
 );

348 
pxT›OfSèck
--;

351 #i‡
c⁄figMEMMODEL
 =
p‹tSMALL
 || c⁄figMEMMODEL =
p‹tCOMPACT


353 *
pxT›OfSèck
 = 
	`xGë_DTB_PCB_b™k
();

354 
pxT›OfSèck
--;

360 #if––
c⁄figMEMMODEL
 =
p‹tMEDIUM
 ) || ( c⁄figMEMMODEL =
p‹tLARGE
 ) )

362 *
pxT›OfSèck
 = ( 
	`xGë_DTB_PCB_b™k
(Ë& 0xff00 ) | ( ( ( 
öt32_t
 ) ( 
pxCode
 ) >> 16 ) & 0xff );

363 
pxT›OfSèck
--;

368 *
pxT›OfSèck
 = 
	`xGë_DPR_ADB_b™k
();

369 
pxT›OfSèck
--;

372 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x9999;

373 
pxT›OfSèck
--;

376 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xAAAA;

377 
pxT›OfSèck
--;

380 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x7777;

381 
pxT›OfSèck
--;

382 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x6666;

383 
pxT›OfSèck
--;

384 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x5555;

385 
pxT›OfSèck
--;

386 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x4444;

387 
pxT›OfSèck
--;

388 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x3333;

389 
pxT›OfSèck
--;

390 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x2222;

391 
pxT›OfSèck
--;

392 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x1111;

393 
pxT›OfSèck
--;

394 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x8888;

396  
pxT›OfSèck
;

397 
	}
}

400 
	$¥vSëupRLT0I¡îru±
( )

403 c⁄° 
uöt16_t
 
usRñﬂdVÆue
 = ( uöt16_àË–––
c⁄figCLKP1_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) / 16UL ) - 1UL );

406 
TMRLR0
 = 
usRñﬂdVÆue
;

409 
TMCSR0
 = 0x041B;

410 
	}
}

413 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

416 
	`¥vSëupRLT0I¡îru±
();

419 
	`p‹tRESTORE_CONTEXT
();

423 
	`__asm
("Ñeti ");

427  
pdTRUE
;

428 
	}
}

431 
	$vP‹tEndScheduÀr
( )

435 
	}
}

444 #i‡
c⁄figUSE_PREEMPTION
 == 1

452 
__noßvîeg
 
__öãºu±
 
	$¥vRLT0_TICKISR
( )

455 
	`__DI
();

458 
	`p‹tSAVE_CONTEXT
();

461 
	`__EI
();

464 
TMCSR0_UF
 = 0;

468 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

470 
	`vTaskSwôchC⁄ãxt
();

474 
	`__DI
();

477 
	`p‹tRESTORE_CONTEXT
();

480 
	`__EI
();

481 
	}
}

490 
__öãºu±
 
	$¥vRLT0_TICKISR
( )

493 
TMCSR0_UF
 = 0;

495 
	`xTaskIn¸emítTick
();

496 
	}
}

507 
__noßvîeg
 
__öãºu±
 
	$vP‹tYõld
( )

510 
	`p‹tSAVE_CONTEXT
();

513 
	`vTaskSwôchC⁄ãxt
();

516 
	`p‹tRESTORE_CONTEXT
();

517 
	}
}

520 
__noßvîeg
 
__öãºu±
 
	$vP‹tYõldDñayed
( )

523 
	`__DI
();

526 
	`p‹tSAVE_CONTEXT
();

529 
	`__EI
();

532 
	`__asm
 (" CLRB 03A4H:0 ");

535 
	`vTaskSwôchC⁄ãxt
();

538 
	`__DI
();

541 
	`p‹tRESTORE_CONTEXT
();

544 
	`__EI
();

545 
	}
}

	@portable/Softune/MB96340/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

71 
	~<°ddef.h
>

75 
	#p‹tSMALL
 0

	)

76 
	#p‹tMEDIUM
 1

	)

77 
	#p‹tCOMPACT
 2

	)

78 
	#p‹tLARGE
 3

	)

92 
	#p‹tCHAR
 

	)

93 
	#p‹tFLOAT
 

	)

94 
	#p‹tDOUBLE
 

	)

95 
	#p‹tLONG
 

	)

96 
	#p‹tSHORT
 

	)

97 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

98 
	#p‹tBASE_TYPE
 

	)

100 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

101 
	tBa£Ty≥_t
;

102 
	tUBa£Ty≥_t
;

105 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

106 
uöt16_t
 
	tTickTy≥_t
;

107 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

109 
uöt32_t
 
	tTickTy≥_t
;

110 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

115 #i‡
c⁄figKERNEL_INTERRUPT_PRIORITY
 != 6

116 #îr‹ 
c⁄figKERNEL_INTERRUPT_PRIORITY
 (
£t
 
ö
 
FªeRTOSC⁄fig
.
h
Ë
mu°
 
m©ch
 
the
 
ILM
 
vÆue
 së i¿thê
fﬁlowög
 
löe
 - #06
H
 
beög
Åhe .

118 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`__asm
(" MOV ILM, #06h ")

	)

119 
	#p‹tENABLE_INTERRUPTS
(Ë
	`__asm
(" MOV ILM, #07h ")

	)

121 
	#p‹tENTER_CRITICAL
(Ë\

	)

122 { 
__asm
(" PUSHW PS "); \

123 
p‹tDISABLE_INTERRUPTS
(); \

126 
	#p‹tEXIT_CRITICAL
(Ë\

	)

127 { 
__asm
(" POPW PS "); \

133 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

134 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

135 
	#p‹tBYTE_ALIGNMENT
 2

	)

136 
	#p‹tNOP
(Ë
	`__asm
–" NOP " );

	)

140 
	#p‹tYIELD
(Ë
	`__asm
–" INT #122 " );

	)

143 
	#p‹tYIELD_FROM_ISR
(Ë
	`__asm
–" SETB 03A4H:0 " );

	)

147 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

148 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

150 
	#p‹tMINIMAL_STACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

	@portable/Tasking/ARM_CM4F/port.c

71 
	~"FªeRTOS.h
"

72 
	~"èsk.h
"

75 
	#p‹tNVIC_SYSTICK_CTRL
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e010 )

	)

76 
	#p‹tNVIC_SYSTICK_LOAD
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000e014 )

	)

77 
	#p‹tNVIC_SYSPRI2
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed20 )

	)

78 
	#p‹tNVIC_SYSTICK_CLK
 0x00000004

	)

79 
	#p‹tNVIC_SYSTICK_INT
 0x00000002

	)

80 
	#p‹tNVIC_SYSTICK_ENABLE
 0x00000001

	)

81 
	#p‹tNVIC_PENDSV_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 16 )

	)

82 
	#p‹tNVIC_SYSTICK_PRI
 ( ( ( 
uöt32_t
 ) 
c⁄figKERNEL_INTERRUPT_PRIORITY
 ) << 24 )

	)

85 
	#p‹tFPCCR
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ef34 )

	)

86 
	#p‹tASPEN_AND_LSPEN_BITS
 ( 0x3UL << 30UL )

	)

89 
	#p‹tINITIAL_XPSR
 ( 0x01000000 )

	)

90 
	#p‹tINITIAL_EXEC_RETURN
 ( 0xfffffffd )

	)

95 #ifde‡
c⁄figTASK_RETURN_ADDRESS


96 
	#p‹tTASK_RETURN_ADDRESS
 
c⁄figTASK_RETURN_ADDRESS


	)

98 
	#p‹tTASK_RETURN_ADDRESS
 
¥vTaskExôEº‹


	)

103 c⁄° 
uöt32_t
 
	gulKî√lPri‹ôy
 = 
c⁄figKERNEL_INTERRUPT_PRIORITY
;

107 
uöt32_t
 
	gulCrôiˇlNe°ög
 = 0xaaaaaaaaUL;

112 
¥vSëupTimîI¡îru±
( );

117 
SysTick_H™dÀr
( );

122 
vP‹tE«bÀVFP
( );

123 
vP‹tSèπFú°Task
( );

128 
¥vTaskExôEº‹
( );

132 c⁄° 
uöt32_t
 
	gulMaxSysˇŒI¡îru±Pri‹ôyC⁄°
 = 
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
;

139 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

146 
pxT›OfSèck
--;

148 *
pxT›OfSèck
 = 
p‹tINITIAL_XPSR
;

149 
pxT›OfSèck
--;

150 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pxCode
;

151 
pxT›OfSèck
--;

152 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
p‹tTASK_RETURN_ADDRESS
;

155 
pxT›OfSèck
 -= 5;

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 
pvP¨amëîs
;

160 
pxT›OfSèck
--;

161 *
pxT›OfSèck
 = 
p‹tINITIAL_EXEC_RETURN
;

163 
pxT›OfSèck
 -= 8;

165  
pxT›OfSèck
;

166 
	}
}

169 
	$¥vTaskExôEº‹
( )

177 
	`c⁄figASSERT
–
ulCrôiˇlNe°ög
 == ~0UL );

178 
	`p‹tDISABLE_INTERRUPTS
();

180 
	}
}

186 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

190 
	`c⁄figASSERT
––
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 ) );

193 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_PENDSV_PRI
;

194 *(
p‹tNVIC_SYSPRI2
Ë|
p‹tNVIC_SYSTICK_PRI
;

198 
	`¥vSëupTimîI¡îru±
();

201 
ulCrôiˇlNe°ög
 = 0;

204 
	`vP‹tE«bÀVFP
();

207 *–
p‹tFPCCR
 ) |
p‹tASPEN_AND_LSPEN_BITS
;

210 
	`vP‹tSèπFú°Task
();

214 
	}
}

217 
	$vP‹tEndScheduÀr
( )

221 
	`c⁄figASSERT
–
ulCrôiˇlNe°ög
 == 1000UL );

222 
	}
}

225 
	$vP‹tYõld
( )

228 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

232 
	`__DSB
();

233 
	`__ISB
();

234 
	}
}

237 
	$vP‹tE¡îCrôiˇl
( )

239 
	`p‹tDISABLE_INTERRUPTS
();

240 
ulCrôiˇlNe°ög
++;

241 
	`__DSB
();

242 
	`__ISB
();

243 
	}
}

246 
	$vP‹tExôCrôiˇl
( )

248 
	`c⁄figASSERT
–
ulCrôiˇlNe°ög
 );

249 
ulCrôiˇlNe°ög
--;

250 if–
ulCrôiˇlNe°ög
 == 0 )

252 
	`p‹tENABLE_INTERRUPTS
();

254 
	}
}

257 
	$SysTick_H™dÀr
( )

259 
uöt32_t
 
ulDummy
;

261 
ulDummy
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

263 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

266 *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET
;

269 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
ulDummy
 );

270 
	}
}

277 
	$¥vSëupTimîI¡îru±
( )

280 *(
p‹tNVIC_SYSTICK_LOAD
Ë–
c⁄figCPU_CLOCK_HZ
 / 
c⁄figTICK_RATE_HZ
 ) - 1UL;

281 *(
p‹tNVIC_SYSTICK_CTRL
Ë
p‹tNVIC_SYSTICK_CLK
 | 
p‹tNVIC_SYSTICK_INT
 | 
p‹tNVIC_SYSTICK_ENABLE
;

282 
	}
}

	@portable/Tasking/ARM_CM4F/portmacro.h

67 #i‚de‡
PORTMACRO_H


68 
	#PORTMACRO_H


	)

70 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt32_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

108 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

109 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

110 
	#p‹tBYTE_ALIGNMENT
 8

	)

115 
vP‹tYõld
( );

116 
	#p‹tNVIC_INT_CTRL
 ( ( vﬁ©ûê
uöt32_t
 * ) 0xe000ed04 )

	)

117 
	#p‹tNVIC_PENDSVSET
 0x10000000

	)

118 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

120 
	#p‹tEND_SWITCHING_ISR
–
xSwôchRequúed
 ) if–xSwôchRequúed ) *(
p‹tNVIC_INT_CTRL
Ë
p‹tNVIC_PENDSVSET


	)

121 
	#p‹tYIELD_FROM_ISR
–
x
 ) 
	`p‹tEND_SWITCHING_ISR
–x )

	)

131 
	#p‹tSET_INTERRUPT_MASK
(Ë
	`__£t_BASEPRI
–
c⁄figMAX_SYSCALL_INTERRUPT_PRIORITY
 )

	)

138 
	#p‹tCLEAR_INTERRUPT_MASK
(Ë
	`__£t_BASEPRI
–0 )

	)

140 
uöt32_t
 
ulP‹tSëI¡îru±Mask
( );

141 
vP‹tCÀ¨I¡îru±Mask
–
uöt32_t
 
ulNewMask
 );

142 
	#p‹tSET_INTERRUPT_MASK_FROM_ISR
(Ë
	`ulP‹tSëI¡îru±Mask
()

	)

143 
	#p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
(
x
Ë
	`vP‹tCÀ¨I¡îru±Mask
–x )

	)

146 
vP‹tE¡îCrôiˇl
( );

147 
vP‹tExôCrôiˇl
( );

149 
	#p‹tDISABLE_INTERRUPTS
(Ë
	`p‹tSET_INTERRUPT_MASK
()

	)

150 
	#p‹tENABLE_INTERRUPTS
(Ë
	`p‹tCLEAR_INTERRUPT_MASK
()

	)

151 
	#p‹tENTER_CRITICAL
(Ë
	`vP‹tE¡îCrôiˇl
()

	)

152 
	#p‹tEXIT_CRITICAL
(Ë
	`vP‹tExôCrôiˇl
()

	)

157 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

158 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

160 
	#p‹tNOP
()

	)

162 #ifde‡
__˝lu•lus


	@portable/WizC/PIC18/Drivers/Tick/Tick.c

77 
	~<FªeRTOS.h
>

78 
	~<èsk.h
>

81 
	#p‹tBIT_SET
 (1)

	)

82 
	#p‹tBIT_CLEAR
 (0)

	)

90 
	#p‹tTIMER_COMPARE_BASE
 ((
APROCFREQ
/4)/
c⁄figTICK_RATE_HZ
)

	)

92 #i‡
p‹tTIMER_COMPARE_BASE
 < 0x10000

93 
	#p‹tTIMER_COMPARE_VALUE
 (
p‹tTIMER_COMPARE_BASE
)

	)

94 
	#p‹tTIMER_COMPARE_PS1
 (
p‹tBIT_CLEAR
)

	)

95 
	#p‹tTIMER_COMPARE_PS0
 (
p‹tBIT_CLEAR
)

	)

96 #ñi‡
p‹tTIMER_COMPARE_BASE
 < 0x20000

97 
	#p‹tTIMER_COMPARE_VALUE
 (
p‹tTIMER_COMPARE_BASE
 / 2)

	)

98 
	#p‹tTIMER_COMPARE_PS1
 (
p‹tBIT_CLEAR
)

	)

99 
	#p‹tTIMER_COMPARE_PS0
 (
p‹tBIT_SET
)

	)

100 #ñi‡
p‹tTIMER_COMPARE_BASE
 < 0x40000

101 
	#p‹tTIMER_COMPARE_VALUE
 (
p‹tTIMER_COMPARE_BASE
 / 4)

	)

102 
	#p‹tTIMER_COMPARE_PS1
 (
p‹tBIT_SET
)

	)

103 
	#p‹tTIMER_COMPARE_PS0
 (
p‹tBIT_CLEAR
)

	)

104 #ñi‡
p‹tTIMER_COMPARE_BASE
 < 0x80000

105 
	#p‹tTIMER_COMPARE_VALUE
 (
p‹tTIMER_COMPARE_BASE
 / 8)

	)

106 
	#p‹tTIMER_COMPARE_PS1
 (
p‹tBIT_SET
)

	)

107 
	#p‹tTIMER_COMPARE_PS0
 (
p‹tBIT_SET
)

	)

117 
	$p‹tSëupTick
( )

131 
CCPR1H
 = ( 
uöt8_t
 ) ( ( 
p‹tTIMER_COMPARE_VALUE
 >> 8 ) & 0xff );

132 
CCPR1L
 = ( 
uöt8_t
 ) ( 
p‹tTIMER_COMPARE_VALUE
 & 0xff );

137 
bCCP1M3
 = 
p‹tBIT_SET
;

138 
bCCP1M2
 = 
p‹tBIT_CLEAR
;

139 
bCCP1M1
 = 
p‹tBIT_SET
;

140 
bCCP1M0
 = 
p‹tBIT_SET
;

145 
bCCP1IE
 = 
p‹tBIT_SET
;

151 
bIPEN
 = 
p‹tBIT_CLEAR
;

152 
bPEIE
 = 
p‹tBIT_SET
;

162 
TMR1H
 = ( 
uöt8_t
 ) 0x00;

163 
TMR1L
 = ( 
uöt8_t
 ) 0x00;

168 
bRD16
 = 
p‹tBIT_SET
;

169 
bT1CKPS1
 = 
p‹tTIMER_COMPARE_PS1
;

170 
bT1CKPS0
 = 
p‹tTIMER_COMPARE_PS0
;

171 
bT1OSCEN
 = 
p‹tBIT_SET
;

172 
bT1SYNC
 = 
p‹tBIT_SET
;

173 
bTMR1CS
 = 
p‹tBIT_CLEAR
;

175 
bTMR1ON
 = 
p‹tBIT_SET
;

176 
	}
}

	@portable/WizC/PIC18/Drivers/Tick/isrTick.c

86 #i‚de‡
_FREERTOS_DRIVERS_TICK_ISRTICK_C


87 
	#_FREERTOS_DRIVERS_TICK_ISRTICK_C


	)

93 if–
	gbCCP1IF
 && 
	gbCCP1IE
 )

98 
	gbCCP1IF
 = 0;

103 if–
xTaskIn¸emítTick
(Ë!
pdFALSE
 )

109 
uxSwôchReque°ed
 = 
pdTRUE
;

114 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/Tick.c"

	@portable/WizC/PIC18/addFreeRTOS.h

79 #i‚de‡
WIZC_FREERTOS_H


80 
	#WIZC_FREERTOS_H


	)

82 #¥agm®
nohóp


83 #¥agm®
wiz˝p
 
ex∑nd∆
 
⁄


84 #¥agm®
wiz˝p
 
£¨ch∑th
 "$__PATHNAME__/libFreeRTOS/Include/"

85 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/libFreeRTOS/Modules/Croutine.c"

86 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/libFreeRTOS/Modules/Tasks.c"

87 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/libFreeRTOS/Modules/Queue.c"

88 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/libFreeRTOS/Modules/List.c"

89 #¥agm®
wiz˝p
 
u£lib
 "$__PATHNAME__/libFreeRTOS/Modules/Port.c"

	@portable/WizC/PIC18/port.c

82 
	~<FªeRTOS.h
>

83 
	~<èsk.h
>

85 
	~<mÆloc.h
>

95 
	tTCB_t
;

96 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

117 #i‡
_ROMSIZE
 > 0x8000

118 
	#p‹tSTACK_FSR_BYTES
 ( 15 )

	)

119 
	#p‹tSTACK_CALLRETURN_ENTRY_SIZE
 ( 3 )

	)

121 
	#p‹tSTACK_FSR_BYTES
 ( 13 )

	)

122 
	#p‹tSTACK_CALLRETURN_ENTRY_SIZE
 ( 2 )

	)

125 
	#p‹tSTACK_MINIMAL_CALLRETURN_DEPTH
 ( 10 )

	)

126 
	#p‹tSTACK_OTHER_BYTES
 ( 20 )

	)

128 
uöt16_t
 
	gusCÆcMöSèckSize
 = 0;

138 
uöt8_t
 
	gucCrôiˇlNe°ög
 = 0x7F;

146 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

148 
uöt8_t
 
ucS¸©ch
;

153 
	`_Pøgma
("asm")

154 
movlw
 
OVERHEADPAGE0
-
LOCOPTSIZE
+
MAXLOCOPTSIZE


155 
movwf
 
PRODL
,
ACCESS
 ; PRODL 
is
 
u£d
 
as
 
ãmp
 

156 
	`_Pøgma
("asmend")

157 
ucS¸©ch
 = 
PRODL
;

176 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) ( (–
uöt16_t
 ) 
pvP¨amëîs
 >> 8) & 0x00ff );

177 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) ( ( 
uöt16_t
 ) 
pvP¨amëîs
 & 0x00ff );

182 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x11;

183 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x22;

184 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x33;

185 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x44;

186 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x55;

187 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x66;

188 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x77;

189 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x88;

190 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x99;

191 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0xAA;

192 #i‡
_ROMSIZE
 > 0x8000

193 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0x00;

195 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0xCC;

196 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0xDD;

197 #i‡
_ROMSIZE
 > 0x8000

198 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0xEE;

200 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0xFF;

205 
ucS¸©ch
-- > 0)

207 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0;

216 #i‡
_ROMSIZE
 > 0x8000

217 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 0;

219 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) ( ( ( 
uöt16_t
 ) 
pxCode
 >> 8 ) & 0x00ff );

220 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) ( ( 
uöt16_t
 ) 
pxCode
 & 0x00ff );

226 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 1;

235 *
pxT›OfSèck
-- = ( 
SèckTy≥_t
 ) 
p‹tNO_CRITICAL_SECTION_NESTING
;

237  
pxT›OfSèck
;

238 
	}
}

241 
uöt16_t
 
	$usP‹tCALCULATE_MINIMAL_STACK_SIZE
( )

246 
	`_Pøgma
("asm")

247 
movlw
 
OVERHEADPAGE0
-
LOCOPTSIZE
+
MAXLOCOPTSIZE


248 
movlb
 
usCÆcMöSèckSize
>>8

249 
movwf
 
usCÆcMöSèckSize
,
BANKED


250 
	`_Pøgma
("asmend")

255 
usCÆcMöSèckSize
 +–
p‹tSTACK_FSR_BYTES
 )

256 + ( 
p‹tSTACK_MINIMAL_CALLRETURN_DEPTH
 * 
p‹tSTACK_CALLRETURN_ENTRY_SIZE
 )

257 + ( 
p‹tSTACK_OTHER_BYTES
 );

259 (
usCÆcMöSèckSize
);

260 
	}
}

264 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

266 
	`p‹tSëupTick
( );

271 
	`p‹tSëupTick
();

276 
	`p‹tRESTORE_CONTEXT
();

281  
pdTRUE
;

282 
	}
}

286 
	$vP‹tEndScheduÀr
( )

293 
	`_Pøgma
(
asmlöe
 
ª£t
);

294 
	}
}

303 
	$vP‹tYõld
( )

308 
	`p‹tSAVE_CONTEXT
–
p‹tINTERRUPTS_UNCHANGED
 );

313 
	`vTaskSwôchC⁄ãxt
();

318 
	`p‹tRESTORE_CONTEXT
();

319 
	}
}

323 *
	$pvP‹tMÆloc
–
uöt16_t
 
usW™ãdSize
 )

325 *
pvRëu∫
;

327 
	`vTaskSu•ídAŒ
();

329 
pvRëu∫
 = 
	`mÆloc
––
mÆloc_t
 ) 
usW™ãdSize
 );

331 
	`xTaskResumeAŒ
();

333  
pvRëu∫
;

334 
	}
}

336 
	$vP‹tFªe
–*
pv
 )

338 if–
pv
 )

340 
	`vTaskSu•ídAŒ
();

342 
	`‰ì
–
pv
 );

344 
	`xTaskResumeAŒ
();

346 
	}
}

	@portable/WizC/PIC18/portmacro.h

71 #i‚de‡
PORTMACRO_H


72 
	#PORTMACRO_H


	)

74 #i‡!
deföed
(
_SERIES
) || _SERIES != 18

78 #i‡!
deföed
(
QUICKCALL
) || QUICKCALL != 1

82 
	~<°ddef.h
>

83 
	~<pic.h
>

85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 
p‹tFLOAT


	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt8_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 sig√d 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) ( 0xFFFF )

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) ( 0xFFFFFFFF )

	)

106 
	#p‹tBYTE_ALIGNMENT
 1

	)

114 
	#p‹tINTERRUPTS_FORCED
 (0x01)

	)

120 
	#p‹tINTERRUPTS_UNCHANGED
 (0x00)

	)

125 
	#p‹tINTERRUPTS_INITIAL_STATE
 (
p‹tINTERRUPTS_FORCED
)

	)

130 
	#p‹tDISABLE_INTERRUPTS
(Ë\

	)

133 
	gbGIE
=0; \

134 } 
bGIE
)

136 
	#p‹tENABLE_INTERRUPTS
(Ë\

	)

139 
bGIE
=1; \

140 
	}
} 0)

147 
uöt8_t
 
ucCrôiˇlNe°ög
;

149 
	#p‹tNO_CRITICAL_SECTION_NESTING
 ( ( 
uöt8_t
 ) 0 )

	)

151 
	#p‹tENTER_CRITICAL
(Ë\

	)

154 
	`p‹tDISABLE_INTERRUPTS
(); \

162 
ucCrôiˇlNe°ög
++; \

163 
	}
} 0)

165 
	#p‹tEXIT_CRITICAL
(Ë\

	)

168 if(
ucCrôiˇlNe°ög
 > 
p‹tNO_CRITICAL_SECTION_NESTING
) \

174 
ucCrôiˇlNe°ög
--; \

181 if–
ucCrôiˇlNe°ög
 =
p‹tNO_CRITICAL_SECTION_NESTING
 ) \

183 
	`p‹tENABLE_INTERRUPTS
(); \

185 
	}
} 0)

194 
uöt16_t
 
	`usP‹tCALCULATE_MINIMAL_STACK_SIZE
( );

195 
uöt16_t
 
usCÆcMöSèckSize
;

197 
	#p‹tMINIMAL_STACK_SIZE
 \

	)

198 ((
usCÆcMöSèckSize
 == 0) \

199 ? 
	`usP‹tCALCULATE_MINIMAL_STACK_SIZE
() \

200 : 
usCÆcMöSèckSize
 )

205 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

241 
	#p‹tSAVE_CONTEXT
–
ucI¡îru±F‹˚d
 ) \

	)

244 
	`p‹tDISABLE_INTERRUPTS
(); \

246 
	`_Pøgma
("asm") \

248 ; 
Push
 
the
 
ªÀv™t
 
SFR
'†⁄tÿthêèsk'
s
 
°ack
 \

250 
movff
 
STATUS
,
POSTDEC2
 \

251 
movff
 
WREG
,
POSTDEC2
 \

252 
movff
 
BSR
,
POSTDEC2
 \

253 
movff
 
PRODH
,
POSTDEC2
 \

254 
movff
 
PRODL
,
POSTDEC2
 \

255 
movff
 
FSR0H
,
POSTDEC2
 \

256 
movff
 
FSR0L
,
POSTDEC2
 \

257 
movff
 
FSR1H
,
POSTDEC2
 \

258 
movff
 
FSR1L
,
POSTDEC2
 \

259 
movff
 
TABLAT
,
POSTDEC2
 \

260 
__ROMSIZE
 > 0x8000 \

261 
movff
 
TBLPTRU
,
POSTDEC2
 \

262 
ídif
 \

263 
movff
 
TBLPTRH
,
POSTDEC2
 \

264 
movff
 
TBLPTRL
,
POSTDEC2
 \

265 
__ROMSIZE
 > 0x8000 \

266 
movff
 
PCLATU
,
POSTDEC2
 \

267 
ídif
 \

268 
movff
 
PCLATH
,
POSTDEC2
 \

270 ; 
St‹e
 
the
 
compûî
-
s¸©ch
-
¨ó
 
as
 
des¸ibed
 
above
. \

272 
movlw
 
OVERHEADPAGE0
-
LOCOPTSIZE
+
MAXLOCOPTSIZE
 \

273 
˛rf
 
FSR0L
,
ACCESS
 \

274 
˛rf
 
FSR0H
,
ACCESS
 \

275 
_πos_S1
: \

276 
movff
 
POSTINC0
,
POSTDEC2
 \

277 
decfsz
 
WREG
,
W
,
ACCESS
 \

278 
SMARTJUMP
 
_πos_S1
 \

280 ; 
Save
 
the
 
pic
 
ˇŒ
/-
°ack
 
bñ⁄gög
 
to
Åhe \

281 ; 
cuºít
 
èsk
 
by
 
c›yög
 
ô
 
to
 
the
Åask's software- \

282 ; 
°ack
. 
We
 
ßve
 
the
 
h¨dw¨e
 sèck 
	`poöãr
 (
which
 \

283 ; 
is
 
the
 
numbî
 
of
 
addªs£s
 
⁄
Åhê
°ack
Ë
ö
Åhe \

284 ; 
W
-
fú°
 
beˇu£
 
we
 
√ed
 
ô
 
œãr
 
™d
 it \

285 ; 
is
 
modifõd
 
ö
 
the
 
ßve
-
lo›
 
by
 
executög
 
p›
's. \

286 ; 
A·î
 
the
 
lo›
Åhê
W
-
is
 
°‹ed
 
⁄
Åhe \

287 ; 
°ack
, 
too
. \

289 
movf
 
STKPTR
,
W
,
ACCESS
 \

290 
bz
 
_πos_s3
 \

291 
_πos_S2
: \

292 
__ROMSIZE
 > 0x8000 \

293 
movff
 
TOSU
,
POSTDEC2
 \

294 
ídif
 \

295 
movff
 
TOSH
,
POSTDEC2
 \

296 
movff
 
TOSL
,
POSTDEC2
 \

297 
p›
 \

298 
t°fsz
 
STKPTR
,
ACCESS
 \

299 
SMARTJUMP
 
_πos_S2
 \

300 
_πos_s3
: \

301 
movwf
 
POSTDEC2
,
ACCESS
 \

303 ; 
Next
 
the
 
vÆue
 
ucCrôiˇlNe°ög
 
u£d
 
by
Åhe \

304 ; 
èsk
 
is
 
°‹ed
 
⁄
 
the
 
°ack
. 
Whí
 \

305 ; (
ucI¡îru±F‹˚d
 =
p‹tINTERRUPTS_FORCED
), 
we
 
ßve
 \

306 ; 
ô
 
as
 0 (
p‹tNO_CRITICAL_SECTION_NESTING
). \

308 
ucI¡îru±F‹˚d
 =
p‹tINTERRUPTS_FORCED
 \

309 
˛rf
 
POSTDEC2
,
ACCESS
 \

311 
movff
 
ucCrôiˇlNe°ög
,
POSTDEC2
 \

312 
ídif
 \

314 ; 
Save
 
the
 
√w
 
t›
 
of
Åhê
so·w¨e
 
°ack
 
ö
Åhê
TCB
. \

316 
movff
 
pxCuºítTCB
,
FSR0L
 \

317 
movff
 
pxCuºítTCB
+1,
FSR0H
 \

318 
movff
 
FSR2L
,
POSTINC0
 \

319 
movff
 
FSR2H
,
POSTINC0
 \

320 
	`_Pøgma
("asmend") \

321 
	}
} 0)

328 
	#p‹tRESTORE_CONTEXT
(Ë\

	)

331 
	`_Pøgma
("asm") \

333 ; 
Së
 
FSR0
 
to
 
poöt
Åÿ
pxCuºítTCB
->
pxT›OfSèck
. \

335 
movff
 
pxCuºítTCB
,
FSR0L
 \

336 
movff
 
pxCuºítTCB
+1,
FSR0H
 \

338 ; 
De
-
ª„ªn˚
 
FSR0
 
to
 
£t
 
the
 
addªss
 
ô
 
hﬁds
 
öto
 \

339 ; 
	`FSR2
 (
i
.
e
. *–
pxCuºítTCB
->
pxT›OfSèck
 ) ). 
FSR2
 \

340 ; 
is
 
u£d
 
by
 
wizC
 
as
 
°ackpoöãr
. \

342 
movff
 
POSTINC0
,
FSR2L
 \

343 
movff
 
POSTINC0
,
FSR2H
 \

345 ; 
Next
, 
the
 
vÆue
 
ucCrôiˇlNe°ög
 
u£d
 
by
Åhe \

346 ; 
èsk
 
is
 
ªåõved
 
‰om
 
the
 
°ack
. \

348 
movff
 
PREINC2
,
ucCrôiˇlNe°ög
 \

350 ; 
Rebuûd
 
the
 
pic
 
ˇŒ
/-
°ack
. 
The
 
numbî
 
of
 \

351 ;  
addªs£s
 
is
 
the
 
√xt
 
ôem
 
⁄
Åhê
èsk
 
°ack
. \

352 ; 
Save
 
this
 
numbî
 
ö
 
PRODL
. 
Thí
 
„tch
 
the
 
addªs£s
 \

353 ; 
™d
 
°‹e
 
them
 
⁄
 
the
 
h¨dw¨e°ack
. \

354 ; 
The
 
d©ashìts
 
ßy
 
we
 
ˇn
't use movff here... \

356 
movff
 
PREINC2
,
PRODL


357 
˛rf
 
STKPTR
,
ACCESS
 \

358 
_πos_R1
: \

359 
push
 \

360 
movf
 
PREINC2
,
W
,
ACCESS
 \

361 
movwf
 
TOSL
,
ACCESS
 \

362 
movf
 
PREINC2
,
W
,
ACCESS
 \

363 
movwf
 
TOSH
,
ACCESS
 \

364 
__ROMSIZE
 > 0x8000 \

365 
movf
 
PREINC2
,
W
,
ACCESS
 \

366 
movwf
 
TOSU
,
ACCESS
 \

368 
˛rf
 
TOSU
,
ACCESS
 \

369 
ídif
 \

370 
decfsz
 
PRODL
,
F
,
ACCESS
 \

371 
SMARTJUMP
 
_πos_R1
 \

373 ; 
Re°‹e
 
the
 
compûî
's working storageáreaÅoÖage 0 \

375 
movlw
 
OVERHEADPAGE0
-
LOCOPTSIZE
+
MAXLOCOPTSIZE
 \

376 
movwf
 
FSR0L
,
ACCESS
 \

377 
˛rf
 
FSR0H
,
ACCESS
 \

378 
_πos_R2
: \

379 
decf
 
FSR0L
,
F
,
ACCESS
 \

380 
movff
 
PREINC2
,
INDF0
 \

381 
t°fsz
 
FSR0L
,
ACCESS
 \

382 
SMARTJUMP
 
_πos_R2
 \

384 ; 
Re°‹e
 
the
 
s‰
's formingÅheÅasks context. \

385 ; 
We
 
ˇ¬Ÿ
 
yë
 
ª°‹e
 
b§
, 
w
 
™d
 
°©us
 
beˇu£
 \

386 ; 
we
 
√ed
 
the£
 
ªgi°îs
 
a
 
föÆ
 
ã°
. \

388 
movff
 
PREINC2
,
PCLATH
 \

389 
__ROMSIZE
 > 0x8000 \

390 
movff
 
PREINC2
,
PCLATU
 \

392 
˛rf
 
PCLATU
,
ACCESS
 \

393 
ídif
 \

394 
movff
 
PREINC2
,
TBLPTRL
 \

395 
movff
 
PREINC2
,
TBLPTRH
 \

396 
__ROMSIZE
 > 0x8000 \

397 
movff
 
PREINC2
,
TBLPTRU
 \

399 
˛rf
 
TBLPTRU
,
ACCESS
 \

400 
ídif
 \

401 
movff
 
PREINC2
,
TABLAT
 \

402 
movff
 
PREINC2
,
FSR1L
 \

403 
movff
 
PREINC2
,
FSR1H
 \

404 
movff
 
PREINC2
,
FSR0L
 \

405 
movff
 
PREINC2
,
FSR0H
 \

406 
movff
 
PREINC2
,
PRODL
 \

407 
movff
 
PREINC2
,
PRODH
 \

409 ; 
The
  
‰om
 
	`p‹tRESTORE_CONTEXT
(Ë
dïíds
 
⁄
 \

410 ; 
the
 
vÆue
 
of
 
ucCrôiˇlNe°ög
. 
Whí
 
ô
 
is
 
zîo
, \

411 ; 
öãºu±s
 
√ed
 
to
 
be
 
íabÀd
. 
This
 
is
 
d⁄e
 
vü
 
a
 \

412 ; 
ªtfõ
 
ö°ru˘i⁄
 
beˇu£
 
we
 
√ed
 
the
 \

413 ; 
öãºu±
-
íablög
 
™d
 
the
  
to
Åhê
ª°‹ed
 \

414 ; 
èsk
 
to
 
be
 
unöãºu±abÀ
. \

415 ; 
Beˇu£
 
b§
, 
°©us
 
™d
 
W
 
¨e
 
af„˘ed
 
by
 
the
 
ã°
 \

416 ; 
they
 
¨e
 
ª°‹ed
 
a·î
 
the
 
ã°
. \

418 
movlb
 
ucCrôiˇlNe°ög
>>8 \

419 
t°fsz
 
ucCrôiˇlNe°ög
,
BANKED
 \

420 
SMARTJUMP
 
_πos_R4
 \

421 
_πos_R3
: \

422 
movff
 
PREINC2
,
BSR
 \

423 
movff
 
PREINC2
,
WREG
 \

424 
movff
 
PREINC2
,
STATUS
 \

425 
ªtfõ
 0 ; 
Rëu∫
 
íablög
 
öãºu±s
 \

426 
_πos_R4
: \

427 
movff
 
PREINC2
,
BSR
 \

428 
movff
 
PREINC2
,
WREG
 \

429 
movff
 
PREINC2
,
STATUS
 \

430  0 ; 
Rëu∫
 
wôhout
 
af„˘ög
 
öãºu±s
 \

431 
	`_Pøgma
("asmend") \

432 
	}
} 0)

436 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

440 
	`vP‹tYõld
( );

441 
	#p‹tYIELD
(Ë
	`vP‹tYõld
()

	)

443 
	#p‹tNOP
(Ë
	`_Pøgma
("asm"Ë\

	)

444 
n›
 \

445 
	`_Pøgma
("asmend")

449 
	#p‹tTASK_FUNCTION
–
xFun˘i⁄
, 
pvP¨amëîs
 ) \

	)

450 
poöãd
 
	`xFun˘i⁄
–*
pvP¨amëîs
 ) \

451 
	$_Pøgma
(
asmfunc
 
xFun˘i⁄
)

453 
	#p‹tTASK_FUNCTION_PROTO
 
p‹tTASK_FUNCTION


	)

457 vﬁ©ûe

	)

458 

	)

	@portable/oWatcom/16BitDOS/Flsh186/port.c

89 
	~<°dlib.h
>

90 
	~<i86.h
>

91 
	~<dos.h
>

92 
	~<£tjmp.h
>

94 
	~"FªeRTOS.h
"

95 
	~"èsk.h
"

96 
	~"p‹èsm.h
"

100 
	#p‹tTIMER_EOI_TYPE
 ( 8 )

	)

101 
	#p‹tRESET_PIC
(Ë
	`p‹tOUTPUT_WORD
––
uöt16_t
 ) 0xff22, 
p‹tTIMER_EOI_TYPE
 )

	)

102 
	#p‹tTIMER_INT_NUMBER
 0x12

	)

104 
	#p‹tTIMER_1_CONTROL_REGISTER
 ( ( 
uöt16_t
 ) 0xff5ê)

	)

105 
	#p‹tTIMER_0_CONTROL_REGISTER
 ( ( 
uöt16_t
 ) 0xff56 )

	)

106 
	#p‹tTIMER_INTERRUPT_ENABLE
 ( ( 
uöt16_t
 ) 0x2000 )

	)

109 
¥vSëTickFªquícy
–
uöt32_t
 
ulTickR©eHz
 );

112 
¥vExôFun˘i⁄
( );

114 #i‡
c⁄figUSE_PREEMPTION
 == 1

117 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

121 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

125 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

130 
öt16_t
 
	gsScheduÀrRu¬ög
 = 
pdFALSE
;

133 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISR
 )();

136 
jmp_buf
 
	gxJumpBuf
;

141 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

147 
pxOldSwôchISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 );

151 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

153 #i‡
c⁄figUSE_PREEMPTION
 == 1

156 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vPªem±iveTick
 );

161 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vN⁄Pªem±iveTick
 );

165 
	`¥vSëTickFªquícy
–
c⁄figTICK_RATE_HZ
 );

168 if–
	`£tjmp
–
xJumpBuf
 ) != 0 )

170 
	`¥vExôFun˘i⁄
();

171 
sScheduÀrRu¬ög
 = 
pdFALSE
;

175 
sScheduÀrRu¬ög
 = 
pdTRUE
;

178 
	`p‹tFIRST_CONTEXT
();

181  
sScheduÀrRu¬ög
;

182 
	}
}

187 #i‡
c⁄figUSE_PREEMPTION
 == 1

188 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

191 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

194 
	`p‹tSWITCH_CONTEXT
();

198 
	`p‹tRESET_PIC
();

199 
	}
}

201 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

205 
	`xTaskIn¸emítTick
();

206 
	`p‹tRESET_PIC
();

207 
	}
}

211 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

214 
	`p‹tSWITCH_CONTEXT
();

215 
	}
}

218 
	$vP‹tEndScheduÀr
( )

223 
	`l⁄gjmp
–
xJumpBuf
, 1 );

224 
	}
}

227 
	$¥vExôFun˘i⁄
( )

229 c⁄° 
uöt16_t
 
usTimîDißbÀ
 = 0x0000;

230 
uöt16_t
 
usTimî0C⁄åﬁ
;

234 
	`p‹tDISABLE_INTERRUPTS
();

235 if–
sScheduÀrRu¬ög
 =
pdTRUE
 )

239 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
pxOldSwôchISR
 );

245 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_1_CONTROL_REGISTER
, 
usTimîDißbÀ
 );

248 
usTimî0C⁄åﬁ
 = 
	`p‹tINPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
 );

249 
usTimî0C⁄åﬁ
 |
p‹tTIMER_INTERRUPT_ENABLE
;

250 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
, 
usTimî0C⁄åﬁ
 );

253 
	`p‹tENABLE_INTERRUPTS
();

254 
	}
}

257 
	$¥vSëTickFªquícy
–
uöt32_t
 
ulTickR©eHz
 )

259 c⁄° 
uöt16_t
 
usMaxCou¡Regi°î
 = 0xff5a;

260 c⁄° 
uöt16_t
 
usTimîPri‹ôyRegi°î
 = 0xff32;

261 c⁄° 
uöt16_t
 
usTimîE«bÀ
 = 0xC000;

262 c⁄° 
uöt16_t
 
usRëriggî
 = 0x0001;

263 c⁄° 
uöt16_t
 
usTimîHighPri‹ôy
 = 0x0000;

264 
uöt16_t
 
usTimî0C⁄åﬁ
;

268 c⁄° 
uöt32_t
 
ulClockFªquícy
 = 0x7f31a0;

270 
uöt32_t
 
ulTimîCou¡
 = 
ulClockFªquícy
 / 
ulTickR©eHz
;

272 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_1_CONTROL_REGISTER
, 
usTimîE«bÀ
 | 
p‹tTIMER_INTERRUPT_ENABLE
 | 
usRëriggî
 );

273 
	`p‹tOUTPUT_WORD
–
usMaxCou¡Regi°î
, ( 
uöt16_t
 ) 
ulTimîCou¡
 );

274 
	`p‹tOUTPUT_WORD
–
usTimîPri‹ôyRegi°î
, 
usTimîHighPri‹ôy
 );

277 
usTimî0C⁄åﬁ
 = 
	`p‹tINPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
 );

278 
usTimî0C⁄åﬁ
 &~
p‹tTIMER_INTERRUPT_ENABLE
;

279 
	`p‹tOUTPUT_WORD
–
p‹tTIMER_0_CONTROL_REGISTER
, 
usTimî0C⁄åﬁ
 );

280 
	}
}

	@portable/oWatcom/16BitDOS/Flsh186/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


85 
	#p‹tCHAR
 

	)

86 
	#p‹tFLOAT
 

	)

87 
	#p‹tDOUBLE
 

	)

88 
	#p‹tLONG
 

	)

89 
	#p‹tSHORT
 

	)

90 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

91 
	#p‹tBASE_TYPE
 

	)

93 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

94 
	tBa£Ty≥_t
;

95 
	tUBa£Ty≥_t
;

98 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

99 
uöt16_t
 
	tTickTy≥_t
;

100 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

102 
uöt32_t
 
	tTickTy≥_t
;

103 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

108 
p‹tENTER_CRITICAL
( );

109 #¥agm®
aux
 
p‹tENTER_CRITICAL
 = "pushf" \

112 
p‹tEXIT_CRITICAL
( );

113 #¥agm®
aux
 
p‹tEXIT_CRITICAL
 = "popf";

115 
p‹tDISABLE_INTERRUPTS
( );

116 #¥agm®
aux
 
p‹tDISABLE_INTERRUPTS
 = "cli";

118 
p‹tENABLE_INTERRUPTS
( );

119 #¥agm®
aux
 
p‹tENABLE_INTERRUPTS
 = "sti";

123 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

124 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

125 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

126 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

127 
	#p‹tBYTE_ALIGNMENT
 2

	)

128 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

129 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

133 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

134 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

135 
	#p‹tINPUT_WORD
–
xAddr
 ) 
	`öpw
–xAdd∏)

	)

136 
	#p‹tOUTPUT_WORD
–
xAddr
, 
usVÆue
 ) 
	`ouçw
–xAddr, usVÆuê)

	)

140 
	#p‹tTASK_FUNCTION_PROTO
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

141 
	#p‹tTASK_FUNCTION
–
vFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vFun˘i⁄
–*pvP¨amëî†)

	)

143 #ifde‡
__˝lu•lus


	@portable/oWatcom/16BitDOS/PC/port.c

89 
	~<°dlib.h
>

90 
	~<°dio.h
>

91 
	~<i86.h
>

92 
	~<dos.h
>

93 
	~<£tjmp.h
>

95 
	~"FªeRTOS.h
"

96 
	~"èsk.h
"

97 
	~"p‹èsm.h
"

106 
	#p‹tTIMER_INT_NUMBER
 0x08

	)

109 
¥vSëTickFªquícy
–
uöt32_t
 
ulTickR©eHz
 );

112 
¥vExôFun˘i⁄
( );

117 
¥vP‹tRe£tPIC
( );

121 #i‡
c⁄figUSE_PREEMPTION
 == 1

124 
__öãºu±
 
__Ár
 
¥vPªem±iveTick
( );

128 
__öãºu±
 
__Ár
 
¥vN⁄Pªem±iveTick
( );

131 
__öãºu±
 
__Ár
 
¥vYõldPro˚ss‹
( );

135 
¥vSëTickFªquícyDeÁu…
( );

140 
öt16_t
 
	gsDOSTickCou¡î
;

143 
öt16_t
 
	gsScheduÀrRu¬ög
 = 
pdFALSE
;

146 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISR
 )();

149 –
__öãºu±
 
__Ár
 *
	gpxOldSwôchISRPlus1
 )();

152 
jmp_buf
 
	gxJumpBuf
;

157 
Ba£Ty≥_t
 
	$xP‹tSèπScheduÀr
( )

159 
pxISR
 
pxOrigöÆTickISR
;

165 
pxOldSwôchISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 );

166 
pxOrigöÆTickISR
 = 
	`_dos_gëve˘
–
p‹tTIMER_INT_NUMBER
 );

167 
pxOldSwôchISRPlus1
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 + 1 );

169 
	`¥vSëTickFªquícy
–
c⁄figTICK_RATE_HZ
 );

173 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
¥vYõldPro˚ss‹
 );

177 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
 + 1, 
pxOrigöÆTickISR
 );

179 #i‡
c⁄figUSE_PREEMPTION
 == 1

182 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vPªem±iveTick
 );

187 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
¥vN⁄Pªem±iveTick
 );

194 
sDOSTickCou¡î
 = 
p‹tTICKS_PER_DOS_TICK
;

197 if–
	`£tjmp
–
xJumpBuf
 ) != 0 )

199 
	`¥vExôFun˘i⁄
();

200 
sScheduÀrRu¬ög
 = 
pdFALSE
;

204 
sScheduÀrRu¬ög
 = 
pdTRUE
;

207 
	`p‹tFIRST_CONTEXT
();

210  
sScheduÀrRu¬ög
;

211 
	}
}

216 #i‡
c⁄figUSE_PREEMPTION
 == 1

219 
__öãºu±
 
__Ár
 
	$¥vPªem±iveTick
( )

222 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

225 
	`p‹tSWITCH_CONTEXT
();

229 
	`¥vP‹tRe£tPIC
();

230 
	}
}

232 
__öãºu±
 
__Ár
 
	$¥vN⁄Pªem±iveTick
( )

236 
	`xTaskIn¸emítTick
();

237 
	`¥vP‹tRe£tPIC
();

238 
	}
}

243 
__öãºu±
 
__Ár
 
	$¥vYõldPro˚ss‹
( )

246 
	`p‹tSWITCH_CONTEXT
();

247 
	}
}

250 
	$¥vP‹tRe£tPIC
( )

256 --
sDOSTickCou¡î
;

257 if–
sDOSTickCou¡î
 <= 0 )

259 
sDOSTickCou¡î
 = ( 
öt16_t
 ) 
p‹tTICKS_PER_DOS_TICK
;

260 
__asm
{ 
p‹tSWITCH_INT_NUMBER
 + 1 };

266 
__asm


268 
mov
 
Æ
, 20
H


269 
out
 20
H
, 
Æ


272 
	}
}

275 
	$vP‹tEndScheduÀr
( )

280 
	`l⁄gjmp
–
xJumpBuf
, 1 );

281 
	}
}

284 
	$¥vExôFun˘i⁄
( )

286 –
__öãºu±
 
__Ár
 *
pxOrigöÆTickISR
 )();

290 
	`p‹tDISABLE_INTERRUPTS
();

291 if–
sScheduÀrRu¬ög
 =
pdTRUE
 )

294 
pxOrigöÆTickISR
 = 
	`_dos_gëve˘
–
p‹tSWITCH_INT_NUMBER
 + 1 );

295 
	`_dos_£tve˘
–
p‹tTIMER_INT_NUMBER
, 
pxOrigöÆTickISR
 );

296 
	`¥vSëTickFªquícyDeÁu…
();

300 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
, 
pxOldSwôchISR
 );

301 
	`_dos_£tve˘
–
p‹tSWITCH_INT_NUMBER
 + 1, 
pxOldSwôchISRPlus1
 );

305 
	`p‹tENABLE_INTERRUPTS
();

306 
	}
}

309 
	$¥vSëTickFªquícy
–
uöt32_t
 
ulTickR©eHz
 )

311 c⁄° 
uöt16_t
 
usPIT_MODE
 = ( uint16_t ) 0x43;

312 c⁄° 
uöt16_t
 
usPIT0
 = ( uint16_t ) 0x40;

313 c⁄° 
uöt32_t
 
ulPIT_CONST
 = ( uint32_t ) 1193180;

314 c⁄° 
uöt16_t
 
us8254_CTR0_MODE3
 = ( uint16_t ) 0x36;

315 
uöt32_t
 
ulOuçut
;

318 
	`p‹tOUTPUT_BYTE
–
usPIT_MODE
, 
us8254_CTR0_MODE3
 );

319 
ulOuçut
 = 
ulPIT_CONST
 / 
ulTickR©eHz
;

321 
	`p‹tOUTPUT_BYTE
–
usPIT0
, ( 
uöt16_t
 )–
ulOuçut
 & ( 
uöt32_t
 ) 0xff ) );

322 
ulOuçut
 >>= 8;

323 
	`p‹tOUTPUT_BYTE
–
usPIT0
, ( 
uöt16_t
 ) ( 
ulOuçut
 & ( 
uöt32_t
 ) 0xff ) );

324 
	}
}

327 
	$¥vSëTickFªquícyDeÁu…
( )

329 c⁄° 
uöt16_t
 
usPIT_MODE
 = ( uint16_t ) 0x43;

330 c⁄° 
uöt16_t
 
usPIT0
 = ( uint16_t ) 0x40;

331 c⁄° 
uöt16_t
 
us8254_CTR0_MODE3
 = ( uint16_t ) 0x36;

333 
	`p‹tOUTPUT_BYTE
–
usPIT_MODE
, 
us8254_CTR0_MODE3
 );

334 
	`p‹tOUTPUT_BYTE
–
usPIT0
,0 );

335 
	`p‹tOUTPUT_BYTE
–
usPIT0
,0 );

336 
	}
}

	@portable/oWatcom/16BitDOS/PC/portmacro.h

66 #i‚de‡
PORTMACRO_H


67 
	#PORTMACRO_H


	)

69 #ifde‡
__˝lu•lus


84 
	#p‹tCHAR
 

	)

85 
	#p‹tFLOAT
 

	)

86 
	#p‹tDOUBLE
 

	)

87 
	#p‹tLONG
 

	)

88 
	#p‹tSHORT
 

	)

89 
	#p‹tSTACK_TYPE
 
uöt16_t


	)

90 
	#p‹tBASE_TYPE
 

	)

92 
p‹tSTACK_TYPE
 
	tSèckTy≥_t
;

93 
	tBa£Ty≥_t
;

94 
	tUBa£Ty≥_t
;

97 #if–
c⁄figUSE_16_BIT_TICKS
 == 1 )

98 
uöt16_t
 
	tTickTy≥_t
;

99 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffff

	)

101 
uöt32_t
 
	tTickTy≥_t
;

102 
	#p‹tMAX_DELAY
 ( 
TickTy≥_t
 ) 0xffffffffUL

	)

108 
p‹tLOCAL_ENTER_CRITICAL
( );

109 #¥agm®
aux
 
p‹tLOCAL_ENTER_CRITICAL
 = "pushf" \

111 
	#p‹tENTER_CRITICAL
(Ë
	`p‹tLOCAL_ENTER_CRITICAL
()

	)

113 
p‹tEXIT_CRITICAL
( );

114 #¥agm®
aux
 
p‹tEXIT_CRITICAL
 = "popf";

116 
p‹tDISABLE_INTERRUPTS
( );

117 #¥agm®
aux
 
p‹tDISABLE_INTERRUPTS
 = "cli";

119 
p‹tENABLE_INTERRUPTS
( );

120 #¥agm®
aux
 
p‹tENABLE_INTERRUPTS
 = "sti";

124 
	#p‹tSTACK_GROWTH
 ( -1 )

	)

125 
	#p‹tSWITCH_INT_NUMBER
 0x80

	)

126 
	#p‹tYIELD
(Ë
__asm
{ 
p‹tSWITCH_INT_NUMBER
 }

	)

127 
	#p‹tDOS_TICK_RATE
 ( 18.20648 )

	)

128 
	#p‹tTICK_PERIOD_MS
 ( ( 
TickTy≥_t
 ) 1000 / 
c⁄figTICK_RATE_HZ
 )

	)

129 
	#p‹tTICKS_PER_DOS_TICK
 ( ( 
uöt16_t
 ) ( ( ( 
p‹tDOUBLE
 ) 
c⁄figTICK_RATE_HZ
 / 
p‹tDOS_TICK_RATE
 ) + 0.5 ) )

	)

130 
	#p‹tINITIAL_SW
 ( ( 
p‹tSTACK_TYPE
 ) 0x0202 )

	)

131 
	#p‹tBYTE_ALIGNMENT
 ( 2 )

	)

135 
	#p‹tINPUT_BYTE
–
xAddr
 ) 
	`öp
–xAdd∏)

	)

136 
	#p‹tOUTPUT_BYTE
–
xAddr
, 
ucVÆue
 ) 
	`ouç
–xAddr, ucVÆuê)

	)

137 
	#p‹tNOP
(Ë
__asm
{ 
n›
 }

	)

141 
	#p‹tTASK_FUNCTION_PROTO
–
vTaskFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*pvP¨amëî†)

	)

142 
	#p‹tTASK_FUNCTION
–
vTaskFun˘i⁄
, 
pvP¨amëîs
 ) 
	`vTaskFun˘i⁄
–*pvP¨amëî†)

	)

144 #ifde‡
__˝lu•lus


	@portable/oWatcom/16BitDOS/common/portasm.h

66 
	tTCB_t
;

67 vﬁ©ûê
TCB_t
 * vﬁ©ûê
pxCuºítTCB
;

68 
vTaskSwôchC⁄ãxt
( );

75 
p‹tSWITCH_CONTEXT
( );

82 
p‹tFIRST_CONTEXT
( );

90 #ifde‡
DEBUG_BUILD


92 #¥agm®
aux
 
p‹tSWITCH_CONTEXT
 = "mováx, segÖxCurrentTCB" \

108 #¥agm®
aux
 
p‹tFIRST_CONTEXT
 = "mováx, segÖxCurrentTCB" \

122 #¥agm®
aux
 
p‹tSWITCH_CONTEXT
 = "mováx, segÖxCurrentTCB" \

135 #¥agm®
aux
 
p‹tFIRST_CONTEXT
 = "mováx, segÖxCurrentTCB" \

	@portable/oWatcom/16BitDOS/common/portcomn.c

85 
	~<°dlib.h
>

86 
	~"FªeRTOS.h
"

91 
SèckTy≥_t
 *
	$pxP‹tInôüli£Sèck
–
SèckTy≥_t
 *
pxT›OfSèck
, 
TaskFun˘i⁄_t
 
pxCode
, *
pvP¨amëîs
 )

93 
SèckTy≥_t
 
DS_Reg
 = 0, *
pxOrigöÆSP
;

98 *
pxT›OfSèck
 = 0x1111;

99 
pxT›OfSèck
--;

100 *
pxT›OfSèck
 = 0x2222;

101 
pxT›OfSèck
--;

102 *
pxT›OfSèck
 = 0x3333;

103 
pxT›OfSèck
--;

104 *
pxT›OfSèck
 = 0x4444;

105 
pxT›OfSèck
--;

106 *
pxT›OfSèck
 = 0x5555;

107 
pxT›OfSèck
--;

116 *
pxT›OfSèck
 = 
p‹tINITIAL_SW
;

117 
pxT›OfSèck
--;

118 *
pxT›OfSèck
 = 
	`FP_SEG
–
pxCode
 );

119 
pxT›OfSèck
--;

120 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxCode
 );

121 
pxT›OfSèck
--;

128 
pxOrigöÆSP
 = 
pxT›OfSèck
;

133 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

134 
pxT›OfSèck
--;

135 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xCCCC;

136 
pxT›OfSèck
--;

137 *
pxT›OfSèck
 = 
	`FP_SEG
–
pvP¨amëîs
 );

138 
pxT›OfSèck
--;

139 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xBBBB;

140 
pxT›OfSèck
--;

141 *
pxT›OfSèck
 = 
	`FP_OFF
–
pxOrigöÆSP
 );

142 
pxT›OfSèck
--;

143 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xBBBB;

144 
pxT›OfSèck
--;

145 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0x0123;

146 
pxT›OfSèck
--;

147 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xDDDD;

150 
__asm
{ 
MOV
 
DS_Reg
, 
DS
 };

152 
pxT›OfSèck
--;

153 *
pxT›OfSèck
 = 
DS_Reg
;

155 
pxT›OfSèck
--;

156 *
pxT›OfSèck
 = ( 
SèckTy≥_t
 ) 0xEEEE;

159 
pxT›OfSèck
--;

160 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

161 
pxT›OfSèck
--;

162 *
pxT›OfSèck
 = 
	`FP_OFF
–
pvP¨amëîs
 );

165 #ifde‡
DEBUG_BUILD


170 
pxT›OfSèck
--;

175  
pxT›OfSèck
;

176 
	}
}

	@queue.c

66 
	~<°dlib.h
>

67 
	~<°rög.h
>

72 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

74 
	~"FªeRTOS.h
"

75 
	~"èsk.h
"

76 
	~"queue.h
"

78 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

79 
	~"¸outöe.h
"

86 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


90 
	#queueUNLOCKED
 ( ( 
Ba£Ty≥_t
 ) -1 )

	)

91 
	#queueLOCKED_UNMODIFIED
 ( ( 
Ba£Ty≥_t
 ) 0 )

	)

104 
	#pxMuãxHﬁdî
 
pcTaû


	)

105 
	#uxQueueTy≥
 
pcHód


	)

106 
	#queueQUEUE_IS_MUTEX
 
NULL


	)

110 
	#queueSEMAPHORE_QUEUE_ITEM_LENGTH
 ( ( 
UBa£Ty≥_t
 ) 0 )

	)

111 
	#queueMUTEX_GIVE_BLOCK_TIME
 ( ( 
TickTy≥_t
 ) 0U )

	)

113 #if–
c⁄figUSE_PREEMPTION
 == 0 )

116 
	#queueYIELD_IF_USING_PREEMPTION
()

	)

118 
	#queueYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

125 
	sQueueDeföôi⁄


127 
öt8_t
 *
	mpcHód
;

128 
öt8_t
 *
	mpcTaû
;

129 
öt8_t
 *
	mpcWrôeTo
;

133 
öt8_t
 *
	mpcRódFrom
;

134 
UBa£Ty≥_t
 
	muxRecursiveCÆlCou¡
;

135 } 
	mu
;

137 
Li°_t
 
	mxTasksWaôögToSíd
;

138 
Li°_t
 
	mxTasksWaôögToRe˚ive
;

140 vﬁ©ûê
UBa£Ty≥_t
 
	muxMesßgesWaôög
;

141 
UBa£Ty≥_t
 
	muxLígth
;

142 
UBa£Ty≥_t
 
	muxIãmSize
;

144 vﬁ©ûê
Ba£Ty≥_t
 
	mxRxLock
;

145 vﬁ©ûê
Ba£Ty≥_t
 
	mxTxLock
;

147 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

148 
UBa£Ty≥_t
 
	muxQueueNumbî
;

149 
uöt8_t
 
	mucQueueTy≥
;

152 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

153 
QueueDeföôi⁄
 *
	mpxQueueSëC⁄èöî
;

156 } 
	txQUEUE
;

160 
xQUEUE
 
	tQueue_t
;

168 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

173 
	sQUEUE_REGISTRY_ITEM


175 c⁄° *
	mpcQueueName
;

176 
QueueH™dÀ_t
 
	mxH™dÀ
;

177 } 
	txQueueRegi°ryIãm
;

182 
xQueueRegi°ryIãm
 
	tQueueRegi°ryIãm_t
;

187 
QueueRegi°ryIãm_t
 
	gxQueueRegi°ry
[ 
c⁄figQUEUE_REGISTRY_SIZE
 ];

199 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

206 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 *
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

213 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 *
pxQueue
 ) 
PRIVILEGED_FUNCTION
;

219 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
, c⁄° *
pvIãmToQueue
, c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

224 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
, * c⁄° 
pvBuf„r
 ) 
PRIVILEGED_FUNCTION
;

226 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

231 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 ) 
PRIVILEGED_FUNCTION
;

240 
	#¥vLockQueue
–
pxQueue
 ) \

	)

241 
	`èskENTER_CRITICAL
(); \

243 if––
pxQueue
 )->
xRxLock
 =
queueUNLOCKED
 ) \

245 –
pxQueue
 )->
xRxLock
 = 
queueLOCKED_UNMODIFIED
; \

247 if––
pxQueue
 )->
xTxLock
 =
queueUNLOCKED
 ) \

249 –
pxQueue
 )->
xTxLock
 = 
queueLOCKED_UNMODIFIED
; \

251 
	}
} \

252 
	$èskEXIT_CRITICAL
()

255 
Ba£Ty≥_t
 
	$xQueueGíîicRe£t
–
QueueH™dÀ_t
 
xQueue
, 
Ba£Ty≥_t
 
xNewQueue
 )

257 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

259 
	`c⁄figASSERT
–
pxQueue
 );

261 
	`èskENTER_CRITICAL
();

263 
pxQueue
->
pcTaû
 =ÖxQueue->
pcHód
 + (ÖxQueue->
uxLígth
 *ÖxQueue->
uxIãmSize
 );

264 
pxQueue
->
uxMesßgesWaôög
 = ( 
UBa£Ty≥_t
 ) 0U;

265 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

266 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
 + ( (ÖxQueue->
uxLígth
 - ( 
UBa£Ty≥_t
 ) 1U ) *ÖxQueue->
uxIãmSize
 );

267 
pxQueue
->
xRxLock
 = 
queueUNLOCKED
;

268 
pxQueue
->
xTxLock
 = 
queueUNLOCKED
;

270 if–
xNewQueue
 =
pdFALSE
 )

277 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

279 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

281 
	`queueYIELD_IF_USING_PREEMPTION
();

285 
	`mtCOVERAGE_TEST_MARKER
();

290 
	`mtCOVERAGE_TEST_MARKER
();

296 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToSíd
 ) );

297 
	`vLi°Inôüli£
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

300 
	`èskEXIT_CRITICAL
();

304  
pdPASS
;

305 
	}
}

308 
QueueH™dÀ_t
 
	$xQueueGíîicCª©e
–c⁄° 
UBa£Ty≥_t
 
uxQueueLígth
, c⁄° UBa£Ty≥_à
uxIãmSize
, c⁄° 
uöt8_t
 
ucQueueTy≥
 )

310 
Queue_t
 *
pxNewQueue
;

311 
size_t
 
xQueueSizeInByãs
;

312 
QueueH™dÀ_t
 
xRëu∫
 = 
NULL
;

316 –Ë
ucQueueTy≥
;

319 if–
uxQueueLígth
 > ( 
UBa£Ty≥_t
 ) 0 )

321 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`pvP‹tMÆloc
( ( Queue_t ) );

322 if–
pxNewQueue
 !
NULL
 )

326 
xQueueSizeInByãs
 = ( 
size_t
 ) ( 
uxQueueLígth
 * 
uxIãmSize
 ) + ( size_t ) 1;

328 
pxNewQueue
->
pcHód
 = ( 
öt8_t
 * ) 
	`pvP‹tMÆloc
–
xQueueSizeInByãs
 );

329 if–
pxNewQueue
->
pcHód
 !
NULL
 )

333 
pxNewQueue
->
uxLígth
 = 
uxQueueLígth
;

334 
pxNewQueue
->
uxIãmSize
 = uxItemSize;

335 –Ë
	`xQueueGíîicRe£t
–
pxNewQueue
, 
pdTRUE
 );

337 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

339 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

343 #if–
c⁄figUSE_QUEUE_SETS
 == 1 )

345 
pxNewQueue
->
pxQueueSëC⁄èöî
 = 
NULL
;

349 
	`åa˚QUEUE_CREATE
–
pxNewQueue
 );

350 
xRëu∫
 = 
pxNewQueue
;

354 
	`åa˚QUEUE_CREATE_FAILED
–
ucQueueTy≥
 );

355 
	`vP‹tFªe
–
pxNewQueue
 );

360 
	`mtCOVERAGE_TEST_MARKER
();

365 
	`mtCOVERAGE_TEST_MARKER
();

368 
	`c⁄figASSERT
–
xRëu∫
 );

370  
xRëu∫
;

371 
	}
}

374 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

376 
QueueH™dÀ_t
 
	$xQueueCª©eMuãx
–c⁄° 
uöt8_t
 
ucQueueTy≥
 )

378 
Queue_t
 *
pxNewQueue
;

382 –Ë
ucQueueTy≥
;

385 
pxNewQueue
 = ( 
Queue_t
 * ) 
	`pvP‹tMÆloc
( ( Queue_t ) );

386 if–
pxNewQueue
 !
NULL
 )

389 
pxNewQueue
->
pxMuãxHﬁdî
 = 
NULL
;

390 
pxNewQueue
->
uxQueueTy≥
 = 
queueQUEUE_IS_MUTEX
;

394 
pxNewQueue
->
pcWrôeTo
 = 
NULL
;

395 
pxNewQueue
->
u
.
pcRódFrom
 = 
NULL
;

400 
pxNewQueue
->
uxMesßgesWaôög
 = ( 
UBa£Ty≥_t
 ) 0U;

401 
pxNewQueue
->
uxLígth
 = ( 
UBa£Ty≥_t
 ) 1U;

402 
pxNewQueue
->
uxIãmSize
 = ( 
UBa£Ty≥_t
 ) 0U;

403 
pxNewQueue
->
xRxLock
 = 
queueUNLOCKED
;

404 
pxNewQueue
->
xTxLock
 = 
queueUNLOCKED
;

406 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

408 
pxNewQueue
->
ucQueueTy≥
 = ucQueueType;

412 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

414 
pxNewQueue
->
pxQueueSëC⁄èöî
 = 
NULL
;

419 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToSíd
 ) );

420 
	`vLi°Inôüli£
–&–
pxNewQueue
->
xTasksWaôögToRe˚ive
 ) );

422 
	`åa˚CREATE_MUTEX
–
pxNewQueue
 );

425 –Ë
	`xQueueGíîicSíd
–
pxNewQueue
, 
NULL
, ( 
TickTy≥_t
 ) 0U, 
queueSEND_TO_BACK
 );

429 
	`åa˚CREATE_MUTEX_FAILED
();

432 
	`c⁄figASSERT
–
pxNewQueue
 );

433  
pxNewQueue
;

434 
	}
}

439 #i‡––
c⁄figUSE_MUTEXES
 =1 ) && ( 
INCLUDE_xSem≠h‹eGëMuãxHﬁdî
 == 1 ) )

441 * 
	$xQueueGëMuãxHﬁdî
–
QueueH™dÀ_t
 
xSem≠h‹e
 )

443 *
pxRëu∫
;

450 
	`èskENTER_CRITICAL
();

452 if–––
Queue_t
 * ) 
xSem≠h‹e
 )->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

454 
pxRëu∫
 = ( * ) ( ( 
Queue_t
 * ) 
xSem≠h‹e
 )->
pxMuãxHﬁdî
;

458 
pxRëu∫
 = 
NULL
;

461 
	`èskEXIT_CRITICAL
();

463  
pxRëu∫
;

464 
	}
}

469 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

471 
Ba£Ty≥_t
 
	$xQueueGiveMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
 )

473 
Ba£Ty≥_t
 
xRëu∫
;

474 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

476 
	`c⁄figASSERT
–
pxMuãx
 );

484 if–
pxMuãx
->
pxMuãxHﬁdî
 =–* ) 
	`xTaskGëCuºítTaskH™dÀ
() )

486 
	`åa˚GIVE_MUTEX_RECURSIVE
–
pxMuãx
 );

493 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )--;

496 if–
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 =–
UBa£Ty≥_t
 ) 0 )

500 –Ë
	`xQueueGíîicSíd
–
pxMuãx
, 
NULL
, 
queueMUTEX_GIVE_BLOCK_TIME
, 
queueSEND_TO_BACK
 );

504 
	`mtCOVERAGE_TEST_MARKER
();

507 
xRëu∫
 = 
pdPASS
;

512 
xRëu∫
 = 
pdFAIL
;

514 
	`åa˚GIVE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

517  
xRëu∫
;

518 
	}
}

523 #i‡–
c⁄figUSE_RECURSIVE_MUTEXES
 == 1 )

525 
Ba£Ty≥_t
 
	$xQueueTakeMuãxRecursive
–
QueueH™dÀ_t
 
xMuãx
, 
TickTy≥_t
 
xTicksToWaô
 )

527 
Ba£Ty≥_t
 
xRëu∫
;

528 
Queue_t
 * c⁄° 
pxMuãx
 = ( Queue_à* ) 
xMuãx
;

530 
	`c⁄figASSERT
–
pxMuãx
 );

535 
	`åa˚TAKE_MUTEX_RECURSIVE
–
pxMuãx
 );

537 if–
pxMuãx
->
pxMuãxHﬁdî
 =–* ) 
	`xTaskGëCuºítTaskH™dÀ
() )

539 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )++;

540 
xRëu∫
 = 
pdPASS
;

544 
xRëu∫
 = 
	`xQueueGíîicRe˚ive
–
pxMuãx
, 
NULL
, 
xTicksToWaô
, 
pdFALSE
 );

548 if–
xRëu∫
 =
pdPASS
 )

550 –
pxMuãx
->
u
.
uxRecursiveCÆlCou¡
 )++;

554 
	`åa˚TAKE_MUTEX_RECURSIVE_FAILED
–
pxMuãx
 );

558  
xRëu∫
;

559 
	}
}

564 #i‡–
c⁄figUSE_COUNTING_SEMAPHORES
 == 1 )

566 
QueueH™dÀ_t
 
	$xQueueCª©eCou¡ögSem≠h‹e
–c⁄° 
UBa£Ty≥_t
 
uxMaxCou¡
, c⁄° UBa£Ty≥_à
uxInôülCou¡
 )

568 
QueueH™dÀ_t
 
xH™dÀ
;

570 
	`c⁄figASSERT
–
uxMaxCou¡
 != 0 );

571 
	`c⁄figASSERT
–
uxInôülCou¡
 <
uxMaxCou¡
 );

573 
xH™dÀ
 = 
	`xQueueGíîicCª©e
–
uxMaxCou¡
, 
queueSEMAPHORE_QUEUE_ITEM_LENGTH
, 
queueQUEUE_TYPE_COUNTING_SEMAPHORE
 );

575 if–
xH™dÀ
 !
NULL
 )

577 ––
Queue_t
 * ) 
xH™dÀ
 )->
uxMesßgesWaôög
 = 
uxInôülCou¡
;

579 
	`åa˚CREATE_COUNTING_SEMAPHORE
();

583 
	`åa˚CREATE_COUNTING_SEMAPHORE_FAILED
();

586 
	`c⁄figASSERT
–
xH™dÀ
 );

587  
xH™dÀ
;

588 
	}
}

593 
Ba£Ty≥_t
 
	$xQueueGíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

595 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

596 
TimeOut_t
 
xTimeOut
;

597 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

599 
	`c⁄figASSERT
–
pxQueue
 );

600 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

601 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

602 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

604 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

614 
	`èskENTER_CRITICAL
();

620 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

622 
	`åa˚QUEUE_SEND
–
pxQueue
 );

623 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

625 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

627 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

629 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
xC›yPosôi⁄
 ) =
pdTRUE
 )

634 
	`queueYIELD_IF_USING_PREEMPTION
();

638 
	`mtCOVERAGE_TEST_MARKER
();

645 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

647 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

653 
	`queueYIELD_IF_USING_PREEMPTION
();

657 
	`mtCOVERAGE_TEST_MARKER
();

662 
	`mtCOVERAGE_TEST_MARKER
();

670 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

672 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

678 
	`queueYIELD_IF_USING_PREEMPTION
();

682 
	`mtCOVERAGE_TEST_MARKER
();

687 
	`mtCOVERAGE_TEST_MARKER
();

692 
	`èskEXIT_CRITICAL
();

696  
pdPASS
;

700 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

704 
	`èskEXIT_CRITICAL
();

708 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

709  
îrQUEUE_FULL
;

711 if–
xE¡ryTimeSë
 =
pdFALSE
 )

715 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

716 
xE¡ryTimeSë
 = 
pdTRUE
;

721 
	`mtCOVERAGE_TEST_MARKER
();

725 
	`èskEXIT_CRITICAL
();

730 
	`vTaskSu•ídAŒ
();

731 
	`¥vLockQueue
–
pxQueue
 );

734 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

736 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

738 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

739 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

746 
	`¥vU∆ockQueue
–
pxQueue
 );

753 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

755 
	`p‹tYIELD_WITHIN_API
();

761 
	`¥vU∆ockQueue
–
pxQueue
 );

762 –Ë
	`xTaskResumeAŒ
();

768 
	`¥vU∆ockQueue
–
pxQueue
 );

769 –Ë
	`xTaskResumeAŒ
();

773 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

774  
îrQUEUE_FULL
;

777 
	}
}

780 #i‡–
c⁄figUSE_ALTERNATIVE_API
 == 1 )

782 
Ba£Ty≥_t
 
	$xQueueA…GíîicSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
, 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

784 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

785 
TimeOut_t
 
xTimeOut
;

786 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

788 
	`c⁄figASSERT
–
pxQueue
 );

789 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

793 
	`èskENTER_CRITICAL
();

797 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

799 
	`åa˚QUEUE_SEND
–
pxQueue
 );

800 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

804 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

806 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdTRUE
 )

810 
	`p‹tYIELD_WITHIN_API
();

814 
	`mtCOVERAGE_TEST_MARKER
();

819 
	`mtCOVERAGE_TEST_MARKER
();

822 
	`èskEXIT_CRITICAL
();

823  
pdPASS
;

827 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

829 
	`èskEXIT_CRITICAL
();

830  
îrQUEUE_FULL
;

832 if–
xE¡ryTimeSë
 =
pdFALSE
 )

834 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

835 
xE¡ryTimeSë
 = 
pdTRUE
;

839 
	`èskEXIT_CRITICAL
();

841 
	`èskENTER_CRITICAL
();

843 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

845 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

847 
	`åa˚BLOCKING_ON_QUEUE_SEND
–
pxQueue
 );

848 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ), 
xTicksToWaô
 );

849 
	`p‹tYIELD_WITHIN_API
();

853 
	`mtCOVERAGE_TEST_MARKER
();

858 
	`èskEXIT_CRITICAL
();

859 
	`åa˚QUEUE_SEND_FAILED
–
pxQueue
 );

860  
îrQUEUE_FULL
;

863 
	`èskEXIT_CRITICAL
();

865 
	}
}

870 #i‡–
c⁄figUSE_ALTERNATIVE_API
 == 1 )

872 
Ba£Ty≥_t
 
	$xQueueA…GíîicRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, 
Ba£Ty≥_t
 
xJu°Pìkög
 )

874 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

875 
TimeOut_t
 
xTimeOut
;

876 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

877 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

879 
	`c⁄figASSERT
–
pxQueue
 );

880 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

884 
	`èskENTER_CRITICAL
();

886 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

889 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
pcRódFrom
;

891 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

893 if–
xJu°Pìkög
 =
pdFALSE
 )

895 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

898 --–
pxQueue
->
uxMesßgesWaôög
 );

900 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

902 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

906 
pxQueue
->
pxMuãxHﬁdî
 = ( 
öt8_t
 * ) 
	`xTaskGëCuºítTaskH™dÀ
();

910 
	`mtCOVERAGE_TEST_MARKER
();

915 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

917 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

919 
	`p‹tYIELD_WITHIN_API
();

923 
	`mtCOVERAGE_TEST_MARKER
();

929 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

933 
pxQueue
->
u
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

937 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

941 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

944 
	`p‹tYIELD_WITHIN_API
();

948 
	`mtCOVERAGE_TEST_MARKER
();

953 
	`mtCOVERAGE_TEST_MARKER
();

957 
	`èskEXIT_CRITICAL
();

958  
pdPASS
;

962 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

964 
	`èskEXIT_CRITICAL
();

965 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

966  
îrQUEUE_EMPTY
;

968 if–
xE¡ryTimeSë
 =
pdFALSE
 )

970 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

971 
xE¡ryTimeSë
 = 
pdTRUE
;

975 
	`èskEXIT_CRITICAL
();

977 
	`èskENTER_CRITICAL
();

979 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

981 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

983 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

985 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

987 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

989 
	`èskENTER_CRITICAL
();

991 
	`vTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

993 
	`èskEXIT_CRITICAL
();

997 
	`mtCOVERAGE_TEST_MARKER
();

1002 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1003 
	`p‹tYIELD_WITHIN_API
();

1007 
	`mtCOVERAGE_TEST_MARKER
();

1012 
	`èskEXIT_CRITICAL
();

1013 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1014  
îrQUEUE_EMPTY
;

1017 
	`èskEXIT_CRITICAL
();

1019 
	}
}

1025 
Ba£Ty≥_t
 
	$xQueueGíîicSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° * c⁄° 
pvIãmToQueue
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° Ba£Ty≥_à
xC›yPosôi⁄
 )

1027 
Ba£Ty≥_t
 
xRëu∫
;

1028 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1029 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1031 
	`c⁄figASSERT
–
pxQueue
 );

1032 
	`c⁄figASSERT
–!––
pvIãmToQueue
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1033 
	`c⁄figASSERT
–!––
xC›yPosôi⁄
 =
queueOVERWRITE
 ) && ( 
pxQueue
->
uxLígth
 != 1 ) ) );

1049 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1056 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1058 if––
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 ) || ( 
xC›yPosôi⁄
 =
queueOVERWRITE
 ) )

1060 
	`åa˚QUEUE_SEND_FROM_ISR
–
pxQueue
 );

1062 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
xC›yPosôi⁄
 );

1066 if–
pxQueue
->
xTxLock
 =
queueUNLOCKED
 )

1068 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1070 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1072 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
xC›yPosôi⁄
 ) =
pdTRUE
 )

1077 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1079 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1083 
	`mtCOVERAGE_TEST_MARKER
();

1088 
	`mtCOVERAGE_TEST_MARKER
();

1093 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1095 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1099 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1101 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1105 
	`mtCOVERAGE_TEST_MARKER
();

1110 
	`mtCOVERAGE_TEST_MARKER
();

1115 
	`mtCOVERAGE_TEST_MARKER
();

1121 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1123 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1127 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1129 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1133 
	`mtCOVERAGE_TEST_MARKER
();

1138 
	`mtCOVERAGE_TEST_MARKER
();

1143 
	`mtCOVERAGE_TEST_MARKER
();

1152 ++–
pxQueue
->
xTxLock
 );

1155 
xRëu∫
 = 
pdPASS
;

1159 
	`åa˚QUEUE_SEND_FROM_ISR_FAILED
–
pxQueue
 );

1160 
xRëu∫
 = 
îrQUEUE_FULL
;

1163 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1165  
xRëu∫
;

1166 
	}
}

1169 
Ba£Ty≥_t
 
	$xQueueGíîicRe˚ive
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
, c⁄° 
Ba£Ty≥_t
 
xJu°Pìkög
 )

1171 
Ba£Ty≥_t
 
xE¡ryTimeSë
 = 
pdFALSE
;

1172 
TimeOut_t
 
xTimeOut
;

1173 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

1174 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1176 
	`c⁄figASSERT
–
pxQueue
 );

1177 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1178 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

1180 
	`c⁄figASSERT
–!––
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_SUSPENDED
 ) && ( 
xTicksToWaô
 != 0 ) ) );

1190 
	`èskENTER_CRITICAL
();

1194 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1198 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
pcRódFrom
;

1200 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1202 if–
xJu°Pìkög
 =
pdFALSE
 )

1204 
	`åa˚QUEUE_RECEIVE
–
pxQueue
 );

1207 --–
pxQueue
->
uxMesßgesWaôög
 );

1209 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1211 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1215 
pxQueue
->
pxMuãxHﬁdî
 = ( 
öt8_t
 * ) 
	`xTaskGëCuºítTaskH™dÀ
();

1219 
	`mtCOVERAGE_TEST_MARKER
();

1224 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1226 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdTRUE
 )

1228 
	`queueYIELD_IF_USING_PREEMPTION
();

1232 
	`mtCOVERAGE_TEST_MARKER
();

1237 
	`mtCOVERAGE_TEST_MARKER
();

1242 
	`åa˚QUEUE_PEEK
–
pxQueue
 );

1246 
pxQueue
->
u
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1250 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1254 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1257 
	`queueYIELD_IF_USING_PREEMPTION
();

1261 
	`mtCOVERAGE_TEST_MARKER
();

1266 
	`mtCOVERAGE_TEST_MARKER
();

1270 
	`èskEXIT_CRITICAL
();

1271  
pdPASS
;

1275 if–
xTicksToWaô
 =–
TickTy≥_t
 ) 0 )

1279 
	`èskEXIT_CRITICAL
();

1280 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1281  
îrQUEUE_EMPTY
;

1283 if–
xE¡ryTimeSë
 =
pdFALSE
 )

1287 
	`vTaskSëTimeOutSèã
–&
xTimeOut
 );

1288 
xE¡ryTimeSë
 = 
pdTRUE
;

1293 
	`mtCOVERAGE_TEST_MARKER
();

1297 
	`èskEXIT_CRITICAL
();

1302 
	`vTaskSu•ídAŒ
();

1303 
	`¥vLockQueue
–
pxQueue
 );

1306 if–
	`xTaskCheckF‹TimeOut
–&
xTimeOut
, &
xTicksToWaô
 ) =
pdFALSE
 )

1308 if–
	`¥vIsQueueEm±y
–
pxQueue
 ) !
pdFALSE
 )

1310 
	`åa˚BLOCKING_ON_QUEUE_RECEIVE
–
pxQueue
 );

1312 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1314 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1316 
	`èskENTER_CRITICAL
();

1318 
	`vTaskPri‹ôyInhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1320 
	`èskEXIT_CRITICAL
();

1324 
	`mtCOVERAGE_TEST_MARKER
();

1329 
	`vTaskPœ˚OnEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

1330 
	`¥vU∆ockQueue
–
pxQueue
 );

1331 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

1333 
	`p‹tYIELD_WITHIN_API
();

1337 
	`mtCOVERAGE_TEST_MARKER
();

1343 
	`¥vU∆ockQueue
–
pxQueue
 );

1344 –Ë
	`xTaskResumeAŒ
();

1349 
	`¥vU∆ockQueue
–
pxQueue
 );

1350 –Ë
	`xTaskResumeAŒ
();

1351 
	`åa˚QUEUE_RECEIVE_FAILED
–
pxQueue
 );

1352  
îrQUEUE_EMPTY
;

1355 
	}
}

1358 
Ba£Ty≥_t
 
	$xQueueRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
, 
Ba£Ty≥_t
 * c⁄° 
pxHighîPri‹ôyTaskWokí
 )

1360 
Ba£Ty≥_t
 
xRëu∫
;

1361 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1362 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1364 
	`c⁄figASSERT
–
pxQueue
 );

1365 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1381 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1383 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1386 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1388 
	`åa˚QUEUE_RECEIVE_FROM_ISR
–
pxQueue
 );

1390 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1391 --–
pxQueue
->
uxMesßgesWaôög
 );

1397 if–
pxQueue
->
xRxLock
 =
queueUNLOCKED
 )

1399 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1401 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1405 if–
pxHighîPri‹ôyTaskWokí
 !
NULL
 )

1407 *
pxHighîPri‹ôyTaskWokí
 = 
pdTRUE
;

1411 
	`mtCOVERAGE_TEST_MARKER
();

1416 
	`mtCOVERAGE_TEST_MARKER
();

1421 
	`mtCOVERAGE_TEST_MARKER
();

1428 ++–
pxQueue
->
xRxLock
 );

1431 
xRëu∫
 = 
pdPASS
;

1435 
xRëu∫
 = 
pdFAIL
;

1436 
	`åa˚QUEUE_RECEIVE_FROM_ISR_FAILED
–
pxQueue
 );

1439 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1441  
xRëu∫
;

1442 
	}
}

1445 
Ba£Ty≥_t
 
	$xQueuePìkFromISR
–
QueueH™dÀ_t
 
xQueue
, * c⁄° 
pvBuf„r
 )

1447 
Ba£Ty≥_t
 
xRëu∫
;

1448 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1449 
öt8_t
 *
pcOrigöÆRódPosôi⁄
;

1450 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1452 
	`c⁄figASSERT
–
pxQueue
 );

1453 
	`c⁄figASSERT
–!––
pvBuf„r
 =
NULL
 ) && ( 
pxQueue
->
uxIãmSize
 !–
UBa£Ty≥_t
 ) 0U ) ) );

1469 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1471 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1474 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1476 
	`åa˚QUEUE_PEEK_FROM_ISR
–
pxQueue
 );

1480 
pcOrigöÆRódPosôi⁄
 = 
pxQueue
->
u
.
pcRódFrom
;

1481 
	`¥vC›yD©aFromQueue
–
pxQueue
, 
pvBuf„r
 );

1482 
pxQueue
->
u
.
pcRódFrom
 = 
pcOrigöÆRódPosôi⁄
;

1484 
xRëu∫
 = 
pdPASS
;

1488 
xRëu∫
 = 
pdFAIL
;

1489 
	`åa˚QUEUE_PEEK_FROM_ISR_FAILED
–
pxQueue
 );

1492 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1494  
xRëu∫
;

1495 
	}
}

1498 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôög
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1500 
UBa£Ty≥_t
 
uxRëu∫
;

1502 
	`c⁄figASSERT
–
xQueue
 );

1504 
	`èskENTER_CRITICAL
();

1506 
uxRëu∫
 = ( ( 
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
;

1508 
	`èskEXIT_CRITICAL
();

1510  
uxRëu∫
;

1511 
	}
}

1514 
UBa£Ty≥_t
 
	$uxQueueS∑˚sAvaûabÀ
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1516 
UBa£Ty≥_t
 
uxRëu∫
;

1517 
Queue_t
 *
pxQueue
;

1519 
pxQueue
 = ( 
Queue_t
 * ) 
xQueue
;

1520 
	`c⁄figASSERT
–
pxQueue
 );

1522 
	`èskENTER_CRITICAL
();

1524 
uxRëu∫
 = 
pxQueue
->
uxLígth
 -ÖxQueue->
uxMesßgesWaôög
;

1526 
	`èskEXIT_CRITICAL
();

1528  
uxRëu∫
;

1529 
	}
}

1532 
UBa£Ty≥_t
 
	$uxQueueMesßgesWaôögFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1534 
UBa£Ty≥_t
 
uxRëu∫
;

1536 
	`c⁄figASSERT
–
xQueue
 );

1538 
uxRëu∫
 = ( ( 
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
;

1540  
uxRëu∫
;

1541 
	}
}

1544 
	$vQueueDñëe
–
QueueH™dÀ_t
 
xQueue
 )

1546 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1548 
	`c⁄figASSERT
–
pxQueue
 );

1550 
	`åa˚QUEUE_DELETE
–
pxQueue
 );

1551 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

1553 
	`vQueueUƒegi°îQueue
–
pxQueue
 );

1556 if–
pxQueue
->
pcHód
 !
NULL
 )

1558 
	`vP‹tFªe
–
pxQueue
->
pcHód
 );

1560 
	`vP‹tFªe
–
pxQueue
 );

1561 
	}
}

1564 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1566 
UBa£Ty≥_t
 
	$uxQueueGëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
 )

1568  ( ( 
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
;

1569 
	}
}

1574 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1576 
	$vQueueSëQueueNumbî
–
QueueH™dÀ_t
 
xQueue
, 
UBa£Ty≥_t
 
uxQueueNumbî
 )

1578 ––
Queue_t
 * ) 
xQueue
 )->
uxQueueNumbî
 = uxQueueNumber;

1579 
	}
}

1584 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1586 
uöt8_t
 
	$ucQueueGëQueueTy≥
–
QueueH™dÀ_t
 
xQueue
 )

1588  ( ( 
Queue_t
 * ) 
xQueue
 )->
ucQueueTy≥
;

1589 
	}
}

1594 
	$¥vC›yD©aToQueue
–
Queue_t
 * c⁄° 
pxQueue
, c⁄° *
pvIãmToQueue
, c⁄° 
Ba£Ty≥_t
 
xPosôi⁄
 )

1596 if–
pxQueue
->
uxIãmSize
 =–
UBa£Ty≥_t
 ) 0 )

1598 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1600 if–
pxQueue
->
uxQueueTy≥
 =
queueQUEUE_IS_MUTEX
 )

1603 
	`vTaskPri‹ôyDisöhîô
––* ) 
pxQueue
->
pxMuãxHﬁdî
 );

1604 
pxQueue
->
pxMuãxHﬁdî
 = 
NULL
;

1608 
	`mtCOVERAGE_TEST_MARKER
();

1613 if–
xPosôi⁄
 =
queueSEND_TO_BACK
 )

1615 –Ë
	`mem˝y
––* ) 
pxQueue
->
pcWrôeTo
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

1616 
pxQueue
->
pcWrôeTo
 +pxQueue->
uxIãmSize
;

1617 if–
pxQueue
->
pcWrôeTo
 >pxQueue->
pcTaû
 )

1619 
pxQueue
->
pcWrôeTo
 =ÖxQueue->
pcHód
;

1623 
	`mtCOVERAGE_TEST_MARKER
();

1628 –Ë
	`mem˝y
––* ) 
pxQueue
->
u
.
pcRódFrom
, 
pvIãmToQueue
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

1629 
pxQueue
->
u
.
pcRódFrom
 -pxQueue->
uxIãmSize
;

1630 if–
pxQueue
->
u
.
pcRódFrom
 <ÖxQueue->
pcHód
 )

1632 
pxQueue
->
u
.
pcRódFrom
 = (ÖxQueue->
pcTaû
 -ÖxQueue->
uxIãmSize
 );

1636 
	`mtCOVERAGE_TEST_MARKER
();

1639 if–
xPosôi⁄
 =
queueOVERWRITE
 )

1641 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1647 --–
pxQueue
->
uxMesßgesWaôög
 );

1651 
	`mtCOVERAGE_TEST_MARKER
();

1656 
	`mtCOVERAGE_TEST_MARKER
();

1660 ++–
pxQueue
->
uxMesßgesWaôög
 );

1661 
	}
}

1664 
	$¥vC›yD©aFromQueue
–
Queue_t
 * c⁄° 
pxQueue
, * c⁄° 
pvBuf„r
 )

1666 if–
pxQueue
->
uxQueueTy≥
 !
queueQUEUE_IS_MUTEX
 )

1668 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

1669 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

1671 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

1675 
	`mtCOVERAGE_TEST_MARKER
();

1677 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( 
size_t
 )ÖxQueue->
uxIãmSize
 );

1681 
	`mtCOVERAGE_TEST_MARKER
();

1683 
	}
}

1686 
	$¥vU∆ockQueue
–
Queue_t
 * c⁄° 
pxQueue
 )

1694 
	`èskENTER_CRITICAL
();

1697  
pxQueue
->
xTxLock
 > 
queueLOCKED_UNMODIFIED
 )

1701 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

1703 if–
pxQueue
->
pxQueueSëC⁄èöî
 !
NULL
 )

1705 if–
	`¥vNŸifyQueueSëC⁄èöî
–
pxQueue
, 
queueSEND_TO_BACK
 ) =
pdTRUE
 )

1710 
	`vTaskMis£dYõld
();

1714 
	`mtCOVERAGE_TEST_MARKER
();

1721 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1723 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1727 
	`vTaskMis£dYõld
();

1731 
	`mtCOVERAGE_TEST_MARKER
();

1744 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1746 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1750 
	`vTaskMis£dYõld
();

1754 
	`mtCOVERAGE_TEST_MARKER
();

1764 --–
pxQueue
->
xTxLock
 );

1767 
pxQueue
->
xTxLock
 = 
queueUNLOCKED
;

1769 
	`èskEXIT_CRITICAL
();

1772 
	`èskENTER_CRITICAL
();

1774  
pxQueue
->
xRxLock
 > 
queueLOCKED_UNMODIFIED
 )

1776 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

1778 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

1780 
	`vTaskMis£dYõld
();

1784 
	`mtCOVERAGE_TEST_MARKER
();

1787 --–
pxQueue
->
xRxLock
 );

1795 
pxQueue
->
xRxLock
 = 
queueUNLOCKED
;

1797 
	`èskEXIT_CRITICAL
();

1798 
	}
}

1801 
Ba£Ty≥_t
 
	$¥vIsQueueEm±y
–c⁄° 
Queue_t
 *
pxQueue
 )

1803 
Ba£Ty≥_t
 
xRëu∫
;

1805 
	`èskENTER_CRITICAL
();

1807 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

1809 
xRëu∫
 = 
pdTRUE
;

1813 
xRëu∫
 = 
pdFALSE
;

1816 
	`èskEXIT_CRITICAL
();

1818  
xRëu∫
;

1819 
	}
}

1822 
Ba£Ty≥_t
 
	$xQueueIsQueueEm±yFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1824 
Ba£Ty≥_t
 
xRëu∫
;

1826 
	`c⁄figASSERT
–
xQueue
 );

1827 if–––
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

1829 
xRëu∫
 = 
pdTRUE
;

1833 
xRëu∫
 = 
pdFALSE
;

1836  
xRëu∫
;

1837 
	}
}

1840 
Ba£Ty≥_t
 
	$¥vIsQueueFuŒ
–c⁄° 
Queue_t
 *
pxQueue
 )

1842 
Ba£Ty≥_t
 
xRëu∫
;

1844 
	`èskENTER_CRITICAL
();

1846 if–
pxQueue
->
uxMesßgesWaôög
 =pxQueue->
uxLígth
 )

1848 
xRëu∫
 = 
pdTRUE
;

1852 
xRëu∫
 = 
pdFALSE
;

1855 
	`èskEXIT_CRITICAL
();

1857  
xRëu∫
;

1858 
	}
}

1861 
Ba£Ty≥_t
 
	$xQueueIsQueueFuŒFromISR
–c⁄° 
QueueH™dÀ_t
 
xQueue
 )

1863 
Ba£Ty≥_t
 
xRëu∫
;

1865 
	`c⁄figASSERT
–
xQueue
 );

1866 if–––
Queue_t
 * ) 
xQueue
 )->
uxMesßgesWaôög
 =––Queue_à* ) xQueuê)->
uxLígth
 )

1868 
xRëu∫
 = 
pdTRUE
;

1872 
xRëu∫
 = 
pdFALSE
;

1875  
xRëu∫
;

1876 
	}
}

1879 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

1881 
Ba£Ty≥_t
 
	$xQueueCRSíd
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
TickTy≥_t
 
xTicksToWaô
 )

1883 
Ba£Ty≥_t
 
xRëu∫
;

1884 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1889 
	`p‹tDISABLE_INTERRUPTS
();

1891 if–
	`¥vIsQueueFuŒ
–
pxQueue
 ) !
pdFALSE
 )

1895 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

1899 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToSíd
 ) );

1900 
	`p‹tENABLE_INTERRUPTS
();

1901  
îrQUEUE_BLOCKED
;

1905 
	`p‹tENABLE_INTERRUPTS
();

1906  
îrQUEUE_FULL
;

1910 
	`p‹tENABLE_INTERRUPTS
();

1912 
	`p‹tDISABLE_INTERRUPTS
();

1914 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

1917 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

1918 
xRëu∫
 = 
pdPASS
;

1921 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

1927 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

1931 
xRëu∫
 = 
îrQUEUE_YIELD
;

1935 
	`mtCOVERAGE_TEST_MARKER
();

1940 
	`mtCOVERAGE_TEST_MARKER
();

1945 
xRëu∫
 = 
îrQUEUE_FULL
;

1948 
	`p‹tENABLE_INTERRUPTS
();

1950  
xRëu∫
;

1951 
	}
}

1956 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

1958 
Ba£Ty≥_t
 
	$xQueueCRRe˚ive
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
TickTy≥_t
 
xTicksToWaô
 )

1960 
Ba£Ty≥_t
 
xRëu∫
;

1961 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

1966 
	`p‹tDISABLE_INTERRUPTS
();

1968 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0 )

1972 if–
xTicksToWaô
 > ( 
TickTy≥_t
 ) 0 )

1976 
	`vCoRoutöeAddToDñayedLi°
–
xTicksToWaô
, &–
pxQueue
->
xTasksWaôögToRe˚ive
 ) );

1977 
	`p‹tENABLE_INTERRUPTS
();

1978  
îrQUEUE_BLOCKED
;

1982 
	`p‹tENABLE_INTERRUPTS
();

1983  
îrQUEUE_FULL
;

1988 
	`mtCOVERAGE_TEST_MARKER
();

1991 
	`p‹tENABLE_INTERRUPTS
();

1993 
	`p‹tDISABLE_INTERRUPTS
();

1995 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

1998 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

1999 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

2001 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2005 
	`mtCOVERAGE_TEST_MARKER
();

2007 --–
pxQueue
->
uxMesßgesWaôög
 );

2008 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2010 
xRëu∫
 = 
pdPASS
;

2013 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2019 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2021 
xRëu∫
 = 
îrQUEUE_YIELD
;

2025 
	`mtCOVERAGE_TEST_MARKER
();

2030 
	`mtCOVERAGE_TEST_MARKER
();

2035 
xRëu∫
 = 
pdFAIL
;

2038 
	`p‹tENABLE_INTERRUPTS
();

2040  
xRëu∫
;

2041 
	}
}

2046 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2048 
Ba£Ty≥_t
 
	$xQueueCRSídFromISR
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pvIãmToQueue
, 
Ba£Ty≥_t
 
xCoRoutöePªviou¶yWokí
 )

2050 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2054 if–
pxQueue
->
uxMesßgesWaôög
 <ÖxQueue->
uxLígth
 )

2056 
	`¥vC›yD©aToQueue
–
pxQueue
, 
pvIãmToQueue
, 
queueSEND_TO_BACK
 );

2060 if–
xCoRoutöePªviou¶yWokí
 =
pdFALSE
 )

2062 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2064 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2066  
pdTRUE
;

2070 
	`mtCOVERAGE_TEST_MARKER
();

2075 
	`mtCOVERAGE_TEST_MARKER
();

2080 
	`mtCOVERAGE_TEST_MARKER
();

2085 
	`mtCOVERAGE_TEST_MARKER
();

2088  
xCoRoutöePªviou¶yWokí
;

2089 
	}
}

2094 #i‡–
c⁄figUSE_CO_ROUTINES
 == 1 )

2096 
Ba£Ty≥_t
 
	$xQueueCRRe˚iveFromISR
–
QueueH™dÀ_t
 
xQueue
, *
pvBuf„r
, 
Ba£Ty≥_t
 *
pxCoRoutöeWokí
 )

2098 
Ba£Ty≥_t
 
xRëu∫
;

2099 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2103 if–
pxQueue
->
uxMesßgesWaôög
 > ( 
UBa£Ty≥_t
 ) 0 )

2106 
pxQueue
->
u
.
pcRódFrom
 +pxQueue->
uxIãmSize
;

2107 if–
pxQueue
->
u
.
pcRódFrom
 >pxQueue->
pcTaû
 )

2109 
pxQueue
->
u
.
pcRódFrom
 =ÖxQueue->
pcHód
;

2113 
	`mtCOVERAGE_TEST_MARKER
();

2115 --–
pxQueue
->
uxMesßgesWaôög
 );

2116 –Ë
	`mem˝y
––* ) 
pvBuf„r
, ( * ) 
pxQueue
->
u
.
pcRódFrom
, ( ËpxQueue->
uxIãmSize
 );

2118 if––*
pxCoRoutöeWokí
 ) =
pdFALSE
 )

2120 if–
	`li°LIST_IS_EMPTY
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) =
pdFALSE
 )

2122 if–
	`xCoRoutöeRemoveFromEvítLi°
–&–
pxQueue
->
xTasksWaôögToSíd
 ) ) !
pdFALSE
 )

2124 *
pxCoRoutöeWokí
 = 
pdTRUE
;

2128 
	`mtCOVERAGE_TEST_MARKER
();

2133 
	`mtCOVERAGE_TEST_MARKER
();

2138 
	`mtCOVERAGE_TEST_MARKER
();

2141 
xRëu∫
 = 
pdPASS
;

2145 
xRëu∫
 = 
pdFAIL
;

2148  
xRëu∫
;

2149 
	}
}

2154 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2156 
	$vQueueAddToRegi°ry
–
QueueH™dÀ_t
 
xQueue
, c⁄° *
pcQueueName
 )

2158 
UBa£Ty≥_t
 
ux
;

2162  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2164 if–
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =
NULL
 )

2167 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 =ÖcQueueName;

2168 
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 = 
xQueue
;

2170 
	`åa˚QUEUE_REGISTRY_ADD
–
xQueue
, 
pcQueueName
 );

2175 
	`mtCOVERAGE_TEST_MARKER
();

2178 
	}
}

2183 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

2185 
	$vQueueUƒegi°îQueue
–
QueueH™dÀ_t
 
xQueue
 )

2187 
UBa£Ty≥_t
 
ux
;

2191  
ux
 = ( 
UBa£Ty≥_t
 ) 0U; ux < ( UBa£Ty≥_àË
c⁄figQUEUE_REGISTRY_SIZE
; ux++ )

2193 if–
xQueueRegi°ry
[ 
ux
 ].
xH™dÀ
 =
xQueue
 )

2196 
xQueueRegi°ry
[ 
ux
 ].
pcQueueName
 = 
NULL
;

2201 
	`mtCOVERAGE_TEST_MARKER
();

2205 
	}
}

2210 #i‡–
c⁄figUSE_TIMERS
 == 1 )

2212 
	$vQueueWaôF‹MesßgeRe°ri˘ed
–
QueueH™dÀ_t
 
xQueue
, 
TickTy≥_t
 
xTicksToWaô
 )

2214 
Queue_t
 * c⁄° 
pxQueue
 = ( Queue_à* ) 
xQueue
;

2230 
	`¥vLockQueue
–
pxQueue
 );

2231 if–
pxQueue
->
uxMesßgesWaôög
 =–
UBa£Ty≥_t
 ) 0U )

2234 
	`vTaskPœ˚OnEvítLi°Re°ri˘ed
–&–
pxQueue
->
xTasksWaôögToRe˚ive
 ), 
xTicksToWaô
 );

2238 
	`mtCOVERAGE_TEST_MARKER
();

2240 
	`¥vU∆ockQueue
–
pxQueue
 );

2241 
	}
}

2246 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2248 
QueueSëH™dÀ_t
 
	$xQueueCª©eSë
–c⁄° 
UBa£Ty≥_t
 
uxEvítQueueLígth
 )

2250 
QueueSëH™dÀ_t
 
pxQueue
;

2252 
pxQueue
 = 
	`xQueueGíîicCª©e
–
uxEvítQueueLígth
, –
Queue_t
 * ), 
queueQUEUE_TYPE_SET
 );

2254  
pxQueue
;

2255 
	}
}

2260 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2262 
Ba£Ty≥_t
 
	$xQueueAddToSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

2264 
Ba£Ty≥_t
 
xRëu∫
;

2266 
	`èskENTER_CRITICAL
();

2268 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 !
NULL
 )

2271 
xRëu∫
 = 
pdFAIL
;

2273 if–––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2277 
xRëu∫
 = 
pdFAIL
;

2281 ––
Queue_t
 * ) 
xQueueOrSem≠h‹e
 )->
pxQueueSëC⁄èöî
 = 
xQueueSë
;

2282 
xRëu∫
 = 
pdPASS
;

2285 
	`èskEXIT_CRITICAL
();

2287  
xRëu∫
;

2288 
	}
}

2293 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2295 
Ba£Ty≥_t
 
	$xQueueRemoveFromSë
–
QueueSëMembîH™dÀ_t
 
xQueueOrSem≠h‹e
, 
QueueSëH™dÀ_t
 
xQueueSë
 )

2297 
Ba£Ty≥_t
 
xRëu∫
;

2298 
Queue_t
 * c⁄° 
pxQueueOrSem≠h‹e
 = ( Queue_à* ) 
xQueueOrSem≠h‹e
;

2300 if–
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 !
xQueueSë
 )

2303 
xRëu∫
 = 
pdFAIL
;

2305 if–
pxQueueOrSem≠h‹e
->
uxMesßgesWaôög
 !–
UBa£Ty≥_t
 ) 0 )

2310 
xRëu∫
 = 
pdFAIL
;

2314 
	`èskENTER_CRITICAL
();

2317 
pxQueueOrSem≠h‹e
->
pxQueueSëC⁄èöî
 = 
NULL
;

2319 
	`èskEXIT_CRITICAL
();

2320 
xRëu∫
 = 
pdPASS
;

2323  
xRëu∫
;

2324 
	}
}

2329 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2331 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSë
–
QueueSëH™dÀ_t
 
xQueueSë
, 
TickTy≥_t
 c⁄° 
xTicksToWaô
 )

2333 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2335 –Ë
	`xQueueGíîicRe˚ive
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
xTicksToWaô
, 
pdFALSE
 );

2336  
xRëu∫
;

2337 
	}
}

2342 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2344 
QueueSëMembîH™dÀ_t
 
	$xQueueSñe˘FromSëFromISR
–
QueueSëH™dÀ_t
 
xQueueSë
 )

2346 
QueueSëMembîH™dÀ_t
 
xRëu∫
 = 
NULL
;

2348 –Ë
	`xQueueRe˚iveFromISR
––
QueueH™dÀ_t
 ) 
xQueueSë
, &
xRëu∫
, 
NULL
 );

2349  
xRëu∫
;

2350 
	}
}

2355 #i‡–
c⁄figUSE_QUEUE_SETS
 == 1 )

2357 
Ba£Ty≥_t
 
	$¥vNŸifyQueueSëC⁄èöî
–c⁄° 
Queue_t
 * c⁄° 
pxQueue
, c⁄° 
Ba£Ty≥_t
 
xC›yPosôi⁄
 )

2359 
Queue_t
 *
pxQueueSëC⁄èöî
 = 
pxQueue
->pxQueueSetContainer;

2360 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

2364 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
 );

2365 
	`c⁄figASSERT
–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 );

2367 if–
pxQueueSëC⁄èöî
->
uxMesßgesWaôög
 <ÖxQueueSëC⁄èöî->
uxLígth
 )

2369 
	`åa˚QUEUE_SEND
–
pxQueueSëC⁄èöî
 );

2371 
	`¥vC›yD©aToQueue
–
pxQueueSëC⁄èöî
, &
pxQueue
, 
xC›yPosôi⁄
 );

2372 if–
	`li°LIST_IS_EMPTY
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) =
pdFALSE
 )

2374 if–
	`xTaskRemoveFromEvítLi°
–&–
pxQueueSëC⁄èöî
->
xTasksWaôögToRe˚ive
 ) ) !
pdFALSE
 )

2377 
xRëu∫
 = 
pdTRUE
;

2381 
	`mtCOVERAGE_TEST_MARKER
();

2386 
	`mtCOVERAGE_TEST_MARKER
();

2391 
	`mtCOVERAGE_TEST_MARKER
();

2394  
xRëu∫
;

2395 
	}
}

	@tasks.c

67 
	~<°dlib.h
>

68 
	~<°rög.h
>

73 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

76 
	~"FªeRTOS.h
"

77 
	~"èsk.h
"

78 
	~"timîs.h
"

79 
	~"SèckMa¸os.h
"

85 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


87 #i‡–
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 == 1 )

92 
	~<°dio.h
>

96 #i‡
c⁄figUSE_TICKLESS_IDLE
 != 0

97 #i‡
INCLUDE_vTaskSu•íd
 != 1

98 #îr‹ 
INCLUDE_vTaskSu•íd
 
mu°
 
be
 
£t
 
to
 1 
c⁄figUSE_TICKLESS_IDLE
 
is
 
nŸ
 setÅo 0

105 
	#tskIDLE_STACK_SIZE
 
c⁄figMINIMAL_STACK_SIZE


	)

107 #if–
c⁄figUSE_PREEMPTION
 == 0 )

110 
	#èskYIELD_IF_USING_PREEMPTION
()

	)

112 
	#èskYIELD_IF_USING_PREEMPTION
(Ë
	`p‹tYIELD_WITHIN_API
()

	)

120 
	stskTaskC⁄åﬁBlock


122 vﬁ©ûê
SèckTy≥_t
 *
	mpxT›OfSèck
;

124 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

125 
xMPU_SETTINGS
 
	mxMPUSëtögs
;

128 
Li°Iãm_t
 
	mxGíîicLi°Iãm
;

129 
Li°Iãm_t
 
	mxEvítLi°Iãm
;

130 
UBa£Ty≥_t
 
	muxPri‹ôy
;

131 
SèckTy≥_t
 *
	mpxSèck
;

132 
	mpcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 ];

134 #i‡–
p‹tSTACK_GROWTH
 > 0 )

135 
SèckTy≥_t
 *
	mpxEndOfSèck
;

138 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

139 
UBa£Ty≥_t
 
	muxCrôiˇlNe°ög
;

142 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

143 
UBa£Ty≥_t
 
	muxTCBNumbî
;

144 
UBa£Ty≥_t
 
	muxTaskNumbî
;

147 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

148 
UBa£Ty≥_t
 
	muxBa£Pri‹ôy
;

151 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

152 
TaskHookFun˘i⁄_t
 
	mpxTaskTag
;

155 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

156 
uöt32_t
 
	mulRunTimeCou¡î
;

159 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

167 
_ªít
 
	mxNewLib_ªít
;

170 } 
	ttskTCB
;

174 
tskTCB
 
	tTCB_t
;

180 #ifde‡
p‹tREMOVE_STATIC_QUALIFIER


181 

	)

187 
PRIVILEGED_DATA
 
TCB_t
 * vﬁ©ûê
	gpxCuºítTCB
 = 
NULL
;

190 
PRIVILEGED_DATA
 
Li°_t
 
	gpxRódyTasksLi°s
[ 
c⁄figMAX_PRIORITIES
 ];

191 
PRIVILEGED_DATA
 
Li°_t
 
	gxDñayedTaskLi°1
;

192 
PRIVILEGED_DATA
 
Li°_t
 
	gxDñayedTaskLi°2
;

193 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
	gpxDñayedTaskLi°
;

194 
PRIVILEGED_DATA
 
Li°_t
 * vﬁ©ûê
	gpxOvîÊowDñayedTaskLi°
;

195 
PRIVILEGED_DATA
 
Li°_t
 
	gxPídögRódyLi°
;

197 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

199 
PRIVILEGED_DATA
 
Li°_t
 
	gxTasksWaôögTîmö©i⁄
;

200 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxTasksDñëed
 = ( UBaseType_t ) 0U;

204 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

206 
PRIVILEGED_DATA
 
Li°_t
 
	gxSu•ídedTaskLi°
;

210 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

212 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
	gxIdÀTaskH™dÀ
 = 
NULL
;

217 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxCuºítNumbîOfTasks
 = ( UBaseType_t ) 0U;

218 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
	gxTickCou¡
 = ( TickType_t ) 0U;

219 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxT›RódyPri‹ôy
 = 
tskIDLE_PRIORITY
;

220 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxScheduÀrRu¬ög
 = 
pdFALSE
;

221 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxPídedTicks
 = ( UBaseType_t ) 0U;

222 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxYõldPídög
 = 
pdFALSE
;

223 
PRIVILEGED_DATA
 vﬁ©ûê
Ba£Ty≥_t
 
	gxNumOfOvîÊows
 = ( BaseType_t ) 0;

224 
PRIVILEGED_DATA
 
UBa£Ty≥_t
 
	guxTaskNumbî
 = ( UBaseType_t ) 0U;

225 
PRIVILEGED_DATA
 vﬁ©ûê
TickTy≥_t
 
	gxNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

235 
PRIVILEGED_DATA
 vﬁ©ûê
UBa£Ty≥_t
 
	guxScheduÀrSu•íded
 = ( UBa£Ty≥_àË
pdFALSE
;

237 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

239 
PRIVILEGED_DATA
 
uöt32_t
 
	gulTaskSwôchedInTime
 = 0UL;

240 
PRIVILEGED_DATA
 
uöt32_t
 
	gulTŸÆRunTime
 = 0UL;

252 
	#tskSTACK_FILL_BYTE
 ( 0xa5U )

	)

257 
	#tskBLOCKED_CHAR
 ( 'B' )

	)

258 
	#tskREADY_CHAR
 ( 'R' )

	)

259 
	#tskDELETED_CHAR
 ( 'D' )

	)

260 
	#tskSUSPENDED_CHAR
 ( 'S' )

	)

264 #i‡–
c⁄figUSE_PORT_OPTIMISED_TASK_SELECTION
 == 0 )

272 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) \

	)

274 if––
	guxPri‹ôy
 ) > 
	guxT›RódyPri‹ôy
 ) \

276 
	guxT›RódyPri‹ôy
 = ( 
uxPri‹ôy
 ); \

282 
	#èskSELECT_HIGHEST_PRIORITY_TASK
(Ë\

	)

285  
li°LIST_IS_EMPTY
–&–
pxRódyTasksLi°s
[ 
uxT›RódyPri‹ôy
 ] ) ) ) \

287 
c⁄figASSERT
–
uxT›RódyPri‹ôy
 ); \

288 --
	guxT›RódyPri‹ôy
; \

293 
li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›RódyPri‹ôy
 ] ) ); \

301 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 )

	)

302 
	#p‹tRESET_READY_PRIORITY
–
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 )

	)

311 
	#èskRECORD_READY_PRIORITY
–
uxPri‹ôy
 ) 
	`p‹tRECORD_READY_PRIORITY
–uxPri‹ôy, 
uxT›RódyPri‹ôy
 )

	)

315 
	#èskSELECT_HIGHEST_PRIORITY_TASK
(Ë\

	)

317 
UBa£Ty≥_t
 
	guxT›Pri‹ôy
; \

320 
p‹tGET_HIGHEST_PRIORITY
–
uxT›Pri‹ôy
, 
uxT›RódyPri‹ôy
 ); \

321 
c⁄figASSERT
–
li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ) > 0 ); \

322 
li°GET_OWNER_OF_NEXT_ENTRY
–
pxCuºítTCB
, &–
pxRódyTasksLi°s
[ 
uxT›Pri‹ôy
 ] ) ); \

330 
	#èskRESET_READY_PRIORITY
–
uxPri‹ôy
 ) \

	)

332 if–
li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ ( 
uxPri‹ôy
 ) ] ) ) == 0 ) \

334 
p‹tRESET_READY_PRIORITY
––
uxPri‹ôy
 ), ( 
uxT›RódyPri‹ôy
 ) ); \

344 
	#èskSWITCH_DELAYED_LISTS
(Ë\

	)

346 
Li°_t
 *
	gpxTemp
; \

349 
c⁄figASSERT
––
li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) ) ); \

351 
	gpxTemp
 = 
pxDñayedTaskLi°
; \

352 
	gpxDñayedTaskLi°
 = 
pxOvîÊowDñayedTaskLi°
; \

353 
	gpxOvîÊowDñayedTaskLi°
 = 
pxTemp
; \

354 
	gxNumOfOvîÊows
++; \

355 
¥vRe£tNextTaskUnblockTime
(); \

364 
	#¥vAddTaskToRódyLi°
–
pxTCB
 ) \

	)

365 
åa˚MOVED_TASK_TO_READY_STATE
–
pxTCB
 ) \

366 
èskRECORD_READY_PRIORITY
––
pxTCB
 )->
uxPri‹ôy
 ); \

367 
vLi°In£πEnd
–&–
pxRódyTasksLi°s
[ ( 
pxTCB
 )->
uxPri‹ôy
 ] ), &––pxTCB )->
xGíîicLi°Iãm
 ) )

376 
	#¥vGëTCBFromH™dÀ
–
pxH™dÀ
 ) ( ( (ÖxH™dÀ ) =
NULL
 ) ? ( 
TCB_t
 * ) 
pxCuºítTCB
 : ( TCB_à* ) (ÖxH™dÀ ) )

	)

386 #i‡
c⁄figUSE_16_BIT_TICKS
 == 1

387 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x8000U

	)

389 
	#èskEVENT_LIST_ITEM_VALUE_IN_USE
 0x80000000UL

	)

393 #i‡
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 0

394 
vAµliˇti⁄SèckOvîÊowHook
–
TaskH™dÀ_t
 
xTask
, *
pcTaskName
 );

397 #i‡
c⁄figUSE_TICK_HOOK
 > 0

398 
vAµliˇti⁄TickHook
( );

407 
	$¥vInôüli£TCBV¨übÀs
–
TCB_t
 * c⁄° 
pxTCB
, c⁄° * c⁄° 
pcName
, 
UBa£Ty≥_t
 
uxPri‹ôy
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
, c⁄° 
uöt16_t
 
usSèckDïth
 ) 
PRIVILEGED_FUNCTION
;

414 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 ) 
PRIVILEGED_FUNCTION
;

420 
	$¥vInôüli£TaskLi°s
–Ë
PRIVILEGED_FUNCTION
;

433 
	`p‹tTASK_FUNCTION_PROTO
–
¥vIdÀTask
, 
pvP¨amëîs
 );

442 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

444 
	$¥vDñëeTCB
–
TCB_t
 *
pxTCB
 ) 
PRIVILEGED_FUNCTION
;

453 
	$¥vCheckTasksWaôögTîmö©i⁄
–Ë
PRIVILEGED_FUNCTION
;

459 
	$¥vAddCuºítTaskToDñayedLi°
–c⁄° 
TickTy≥_t
 
xTimeToWake
 ) 
PRIVILEGED_FUNCTION
;

465 
TCB_t
 *
	$¥vAŒoˇãTCBAndSèck
–c⁄° 
uöt16_t
 
usSèckDïth
, 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
 ) 
PRIVILEGED_FUNCTION
;

475 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

477 
UBa£Ty≥_t
 
	$¥vLi°TaskWôhöSögÀLi°
–
TaskSètus_t
 *
pxTaskSètusAºay
, 
Li°_t
 *
pxLi°
, 
eTaskSèã
 
eSèã
 ) 
PRIVILEGED_FUNCTION
;

486 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

488 
uöt16_t
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 ) 
PRIVILEGED_FUNCTION
;

501 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

503 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
–Ë
PRIVILEGED_FUNCTION
;

511 
	`¥vRe£tNextTaskUnblockTime
( );

515 
Ba£Ty≥_t
 
	$xTaskGíîicCª©e
–
TaskFun˘i⁄_t
 
pxTaskCode
, c⁄° * c⁄° 
pcName
, c⁄° 
uöt16_t
 
usSèckDïth
, * c⁄° 
pvP¨amëîs
, 
UBa£Ty≥_t
 
uxPri‹ôy
, 
TaskH™dÀ_t
 * c⁄° 
pxCª©edTask
, 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

517 
Ba£Ty≥_t
 
xRëu∫
;

518 
TCB_t
 * 
pxNewTCB
;

520 
	`c⁄figASSERT
–
pxTaskCode
 );

521 
	`c⁄figASSERT
–––
uxPri‹ôy
 & ( ~
p‹tPRIVILEGE_BIT
 ) ) < 
c⁄figMAX_PRIORITIES
 ) );

525 
pxNewTCB
 = 
	`¥vAŒoˇãTCBAndSèck
–
usSèckDïth
, 
puxSèckBuf„r
 );

527 if–
pxNewTCB
 !
NULL
 )

529 
SèckTy≥_t
 *
pxT›OfSèck
;

531 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

533 
Ba£Ty≥_t
 
xRunPrivûeged
;

534 if––
uxPri‹ôy
 & 
p‹tPRIVILEGE_BIT
 ) != 0U )

536 
xRunPrivûeged
 = 
pdTRUE
;

540 
xRunPrivûeged
 = 
pdFALSE
;

542 
uxPri‹ôy
 &~
p‹tPRIVILEGE_BIT
;

549 #if–
p‹tSTACK_GROWTH
 < 0 )

551 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
 + ( 
usSèckDïth
 - ( 
uöt16_t
 ) 1 );

552 
pxT›OfSèck
 = ( 
SèckTy≥_t
 * ) ( ( ( 
p‹tPOINTER_SIZE_TYPE
 )ÖxT›OfSèck ) & ( (Ö‹tPOINTER_SIZE_TYPE ) ~
p‹tBYTE_ALIGNMENT_MASK
 ) );

555 
	`c⁄figASSERT
––––
uöt32_t
 ) 
pxT›OfSèck
 & ( uöt32_àË
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

559 
pxT›OfSèck
 = 
pxNewTCB
->
pxSèck
;

562 
	`c⁄figASSERT
––––
uöt32_t
 ) 
pxNewTCB
->
pxSèck
 & ( uöt32_àË
p‹tBYTE_ALIGNMENT_MASK
 ) == 0UL ) );

567 
pxNewTCB
->
pxEndOfSèck
 =ÖxNewTCB->
pxSèck
 + ( 
usSèckDïth
 - 1 );

572 
	`¥vInôüli£TCBV¨übÀs
–
pxNewTCB
, 
pcName
, 
uxPri‹ôy
, 
xRegi⁄s
, 
usSèckDïth
 );

578 #if–
p‹tUSING_MPU_WRAPPERS
 == 1 )

580 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
, 
xRunPrivûeged
 );

584 
pxNewTCB
->
pxT›OfSèck
 = 
	`pxP‹tInôüli£Sèck
–pxT›OfSèck, 
pxTaskCode
, 
pvP¨amëîs
 );

588 if––* ) 
pxCª©edTask
 !
NULL
 )

593 *
pxCª©edTask
 = ( 
TaskH™dÀ_t
 ) 
pxNewTCB
;

597 
	`mtCOVERAGE_TEST_MARKER
();

602 
	`èskENTER_CRITICAL
();

604 
uxCuºítNumbîOfTasks
++;

605 if–
pxCuºítTCB
 =
NULL
 )

609 
pxCuºítTCB
 = 
pxNewTCB
;

611 if–
uxCuºítNumbîOfTasks
 =–
UBa£Ty≥_t
 ) 1 )

616 
	`¥vInôüli£TaskLi°s
();

620 
	`mtCOVERAGE_TEST_MARKER
();

628 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

630 if–
pxCuºítTCB
->
uxPri‹ôy
 <= uxPriority )

632 
pxCuºítTCB
 = 
pxNewTCB
;

636 
	`mtCOVERAGE_TEST_MARKER
();

641 
	`mtCOVERAGE_TEST_MARKER
();

645 
uxTaskNumbî
++;

647 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

650 
pxNewTCB
->
uxTCBNumbî
 = 
uxTaskNumbî
;

653 
	`åa˚TASK_CREATE
–
pxNewTCB
 );

655 
	`¥vAddTaskToRódyLi°
–
pxNewTCB
 );

657 
xRëu∫
 = 
pdPASS
;

658 
	`p‹tSETUP_TCB
–
pxNewTCB
 );

660 
	`èskEXIT_CRITICAL
();

664 
xRëu∫
 = 
îrCOULD_NOT_ALLOCATE_REQUIRED_MEMORY
;

665 
	`åa˚TASK_CREATE_FAILED
();

668 if–
xRëu∫
 =
pdPASS
 )

670 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

674 if–
pxCuºítTCB
->
uxPri‹ôy
 < uxPriority )

676 
	`èskYIELD_IF_USING_PREEMPTION
();

680 
	`mtCOVERAGE_TEST_MARKER
();

685 
	`mtCOVERAGE_TEST_MARKER
();

689  
xRëu∫
;

690 
	}
}

693 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

695 
	$vTaskDñëe
–
TaskH™dÀ_t
 
xTaskToDñëe
 )

697 
TCB_t
 *
pxTCB
;

699 
	`èskENTER_CRITICAL
();

703 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToDñëe
 );

709 if–
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

711 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

715 
	`mtCOVERAGE_TEST_MARKER
();

719 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

721 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

725 
	`mtCOVERAGE_TEST_MARKER
();

728 
	`vLi°In£πEnd
–&
xTasksWaôögTîmö©i⁄
, &–
pxTCB
->
xGíîicLi°Iãm
 ) );

733 ++
uxTasksDñëed
;

737 
uxTaskNumbî
++;

739 
	`åa˚TASK_DELETE
–
pxTCB
 );

741 
	`èskEXIT_CRITICAL
();

745 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

747 if–
pxTCB
 =
pxCuºítTCB
 )

749 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

756 
	`p‹tPRE_TASK_DELETE_HOOK
–
pxTCB
, &
xYõldPídög
 );

757 
	`p‹tYIELD_WITHIN_API
();

763 
	`¥vRe£tNextTaskUnblockTime
();

766 
	}
}

771 #i‡–
INCLUDE_vTaskDñayU¡û
 == 1 )

773 
	$vTaskDñayU¡û
–
TickTy≥_t
 * c⁄° 
pxPªviousWakeTime
, c⁄° TickTy≥_à
xTimeIn¸emít
 )

775 
TickTy≥_t
 
xTimeToWake
;

776 
Ba£Ty≥_t
 
xAÃódyYõlded
, 
xShouldDñay
 = 
pdFALSE
;

778 
	`c⁄figASSERT
–
pxPªviousWakeTime
 );

779 
	`c⁄figASSERT
––
xTimeIn¸emít
 > 0U ) );

780 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

782 
	`vTaskSu•ídAŒ
();

786 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

789 
xTimeToWake
 = *
pxPªviousWakeTime
 + 
xTimeIn¸emít
;

791 if–
xC⁄°TickCou¡
 < *
pxPªviousWakeTime
 )

798 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) && ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

800 
xShouldDñay
 = 
pdTRUE
;

804 
	`mtCOVERAGE_TEST_MARKER
();

812 if––
xTimeToWake
 < *
pxPªviousWakeTime
 ) || ( xTimeToWakê> 
xC⁄°TickCou¡
 ) )

814 
xShouldDñay
 = 
pdTRUE
;

818 
	`mtCOVERAGE_TEST_MARKER
();

823 *
pxPªviousWakeTime
 = 
xTimeToWake
;

825 if–
xShouldDñay
 !
pdFALSE
 )

827 
	`åa˚TASK_DELAY_UNTIL
();

831 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

836 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

840 
	`mtCOVERAGE_TEST_MARKER
();

843 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

847 
	`mtCOVERAGE_TEST_MARKER
();

850 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

854 if–
xAÃódyYõlded
 =
pdFALSE
 )

856 
	`p‹tYIELD_WITHIN_API
();

860 
	`mtCOVERAGE_TEST_MARKER
();

862 
	}
}

867 #i‡–
INCLUDE_vTaskDñay
 == 1 )

869 
	$vTaskDñay
–c⁄° 
TickTy≥_t
 
xTicksToDñay
 )

871 
TickTy≥_t
 
xTimeToWake
;

872 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

876 if–
xTicksToDñay
 > ( 
TickTy≥_t
 ) 0U )

878 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

879 
	`vTaskSu•ídAŒ
();

881 
	`åa˚TASK_DELAY
();

893 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToDñay
;

898 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

903 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

907 
	`mtCOVERAGE_TEST_MARKER
();

909 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

911 
xAÃódyYõlded
 = 
	`xTaskResumeAŒ
();

915 
	`mtCOVERAGE_TEST_MARKER
();

920 if–
xAÃódyYõlded
 =
pdFALSE
 )

922 
	`p‹tYIELD_WITHIN_API
();

926 
	`mtCOVERAGE_TEST_MARKER
();

928 
	}
}

933 #i‡–
INCLUDE_eTaskGëSèã
 == 1 )

935 
eTaskSèã
 
	$eTaskGëSèã
–
TaskH™dÀ_t
 
xTask
 )

937 
eTaskSèã
 
eRëu∫
;

938 
Li°_t
 *
pxSèãLi°
;

939 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTask
;

941 
	`c⁄figASSERT
–
pxTCB
 );

943 if–
pxTCB
 =
pxCuºítTCB
 )

946 
eRëu∫
 = 
eRu¬ög
;

950 
	`èskENTER_CRITICAL
();

952 
pxSèãLi°
 = ( 
Li°_t
 * ) 
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

954 
	`èskEXIT_CRITICAL
();

956 if––
pxSèãLi°
 =
pxDñayedTaskLi°
 ) || (ÖxSèãLi° =
pxOvîÊowDñayedTaskLi°
 ) )

960 
eRëu∫
 = 
eBlocked
;

963 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

964 if–
pxSèãLi°
 =&
xSu•ídedTaskLi°
 )

969 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) =
NULL
 )

971 
eRëu∫
 = 
eSu•íded
;

975 
eRëu∫
 = 
eBlocked
;

980 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

981 if–
pxSèãLi°
 =&
xTasksWaôögTîmö©i⁄
 )

985 
eRëu∫
 = 
eDñëed
;

993 
eRëu∫
 = 
eRódy
;

997  
eRëu∫
;

998 
	}
}

1003 #i‡–
INCLUDE_uxTaskPri‹ôyGë
 == 1 )

1005 
UBa£Ty≥_t
 
	$uxTaskPri‹ôyGë
–
TaskH™dÀ_t
 
xTask
 )

1007 
TCB_t
 *
pxTCB
;

1008 
UBa£Ty≥_t
 
uxRëu∫
;

1010 
	`èskENTER_CRITICAL
();

1014 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1015 
uxRëu∫
 = 
pxTCB
->
uxPri‹ôy
;

1017 
	`èskEXIT_CRITICAL
();

1019  
uxRëu∫
;

1020 
	}
}

1025 #i‡–
INCLUDE_vTaskPri‹ôySë
 == 1 )

1027 
	$vTaskPri‹ôySë
–
TaskH™dÀ_t
 
xTask
, 
UBa£Ty≥_t
 
uxNewPri‹ôy
 )

1029 
TCB_t
 *
pxTCB
;

1030 
UBa£Ty≥_t
 
uxCuºítBa£Pri‹ôy
, 
uxPri‹ôyU£dOnE¡ry
;

1031 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1033 
	`c⁄figASSERT
––
uxNewPri‹ôy
 < 
c⁄figMAX_PRIORITIES
 ) );

1036 if–
uxNewPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

1038 
uxNewPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

1042 
	`mtCOVERAGE_TEST_MARKER
();

1045 
	`èskENTER_CRITICAL
();

1049 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

1051 
	`åa˚TASK_PRIORITY_SET
–
pxTCB
, 
uxNewPri‹ôy
 );

1053 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1055 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxBa£Pri‹ôy
;

1059 
uxCuºítBa£Pri‹ôy
 = 
pxTCB
->
uxPri‹ôy
;

1063 if–
uxCuºítBa£Pri‹ôy
 !
uxNewPri‹ôy
 )

1067 if–
uxNewPri‹ôy
 > 
uxCuºítBa£Pri‹ôy
 )

1069 if–
pxTCB
 !
pxCuºítTCB
 )

1074 if–
uxNewPri‹ôy
 >
pxCuºítTCB
->
uxPri‹ôy
 )

1076 
xYõldRequúed
 = 
pdTRUE
;

1080 
	`mtCOVERAGE_TEST_MARKER
();

1090 if–
pxTCB
 =
pxCuºítTCB
 )

1095 
xYõldRequúed
 = 
pdTRUE
;

1107 
uxPri‹ôyU£dOnE¡ry
 = 
pxTCB
->
uxPri‹ôy
;

1109 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

1113 if–
pxTCB
->
uxBa£Pri‹ôy
 =pxTCB->
uxPri‹ôy
 )

1115 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1119 
	`mtCOVERAGE_TEST_MARKER
();

1123 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxNewPri‹ôy
;

1127 
pxTCB
->
uxPri‹ôy
 = 
uxNewPri‹ôy
;

1133 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

1135 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxNewPri‹ôy
 ) );

1139 
	`mtCOVERAGE_TEST_MARKER
();

1146 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôyU£dOnE¡ry
 ] ), &–
pxTCB
->
xGíîicLi°Iãm
 ) ) !
pdFALSE
 )

1151 if–
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1156 
	`p‹tRESET_READY_PRIORITY
–
uxPri‹ôyU£dOnE¡ry
, 
uxT›RódyPri‹ôy
 );

1160 
	`mtCOVERAGE_TEST_MARKER
();

1162 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1166 
	`mtCOVERAGE_TEST_MARKER
();

1169 if–
xYõldRequúed
 =
pdTRUE
 )

1171 
	`èskYIELD_IF_USING_PREEMPTION
();

1175 
	`mtCOVERAGE_TEST_MARKER
();

1180 –Ë
uxPri‹ôyU£dOnE¡ry
;

1183 
	`èskEXIT_CRITICAL
();

1184 
	}
}

1189 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1191 
	$vTaskSu•íd
–
TaskH™dÀ_t
 
xTaskToSu•íd
 )

1193 
TCB_t
 *
pxTCB
;

1195 
	`èskENTER_CRITICAL
();

1199 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToSu•íd
 );

1201 
	`åa˚TASK_SUSPEND
–
pxTCB
 );

1205 if–
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

1207 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

1211 
	`mtCOVERAGE_TEST_MARKER
();

1215 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1217 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1221 
	`mtCOVERAGE_TEST_MARKER
();

1224 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xGíîicLi°Iãm
 ) );

1226 
	`èskEXIT_CRITICAL
();

1228 if–
pxTCB
 =
pxCuºítTCB
 )

1230 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1233 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 == 0 );

1234 
	`p‹tYIELD_WITHIN_API
();

1241 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =
uxCuºítNumbîOfTasks
 )

1247 
pxCuºítTCB
 = 
NULL
;

1251 
	`vTaskSwôchC⁄ãxt
();

1257 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

1262 
	`¥vRe£tNextTaskUnblockTime
();

1266 
	`mtCOVERAGE_TEST_MARKER
();

1269 
	}
}

1274 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1276 
Ba£Ty≥_t
 
	$¥vTaskIsTaskSu•íded
–c⁄° 
TaskH™dÀ_t
 
xTask
 )

1278 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFALSE
;

1279 c⁄° 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTask
;

1285 
	`c⁄figASSERT
–
xTask
 );

1288 if–
	`li°IS_CONTAINED_WITHIN
–&
xSu•ídedTaskLi°
, &–
pxTCB
->
xGíîicLi°Iãm
 ) ) !
pdFALSE
 )

1291 if–
	`li°IS_CONTAINED_WITHIN
–&
xPídögRódyLi°
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) =
pdFALSE
 )

1295 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTCB
->
xEvítLi°Iãm
 ) ) !
pdFALSE
 )

1297 
xRëu∫
 = 
pdTRUE
;

1301 
	`mtCOVERAGE_TEST_MARKER
();

1306 
	`mtCOVERAGE_TEST_MARKER
();

1311 
	`mtCOVERAGE_TEST_MARKER
();

1314  
xRëu∫
;

1315 
	}
}

1320 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1322 
	$vTaskResume
–
TaskH™dÀ_t
 
xTaskToResume
 )

1324 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTaskToResume
;

1327 
	`c⁄figASSERT
–
xTaskToResume
 );

1331 if––
pxTCB
 !
NULL
 ) && (ÖxTCB !
pxCuºítTCB
 ) )

1333 
	`èskENTER_CRITICAL
();

1335 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) =
pdTRUE
 )

1337 
	`åa˚TASK_RESUME
–
pxTCB
 );

1341 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1342 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1345 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1350 
	`èskYIELD_IF_USING_PREEMPTION
();

1354 
	`mtCOVERAGE_TEST_MARKER
();

1359 
	`mtCOVERAGE_TEST_MARKER
();

1362 
	`èskEXIT_CRITICAL
();

1366 
	`mtCOVERAGE_TEST_MARKER
();

1368 
	}
}

1374 #i‡––
INCLUDE_xTaskResumeFromISR
 =1 ) && ( 
INCLUDE_vTaskSu•íd
 == 1 ) )

1376 
Ba£Ty≥_t
 
	$xTaskResumeFromISR
–
TaskH™dÀ_t
 
xTaskToResume
 )

1378 
Ba£Ty≥_t
 
xYõldRequúed
 = 
pdFALSE
;

1379 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
xTaskToResume
;

1380 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1382 
	`c⁄figASSERT
–
xTaskToResume
 );

1400 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1402 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1404 if–
	`¥vTaskIsTaskSu•íded
–
pxTCB
 ) =
pdTRUE
 )

1406 
	`åa˚TASK_RESUME_FROM_ISR
–
pxTCB
 );

1409 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1413 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1415 
xYõldRequúed
 = 
pdTRUE
;

1419 
	`mtCOVERAGE_TEST_MARKER
();

1422 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1423 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1430 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxTCB
->
xEvítLi°Iãm
 ) );

1435 
	`mtCOVERAGE_TEST_MARKER
();

1438 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1440  
xYõldRequúed
;

1441 
	}
}

1446 
	$vTaskSèπScheduÀr
( )

1448 
Ba£Ty≥_t
 
xRëu∫
;

1451 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

1455 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
, "IDLE", 
tskIDLE_STACK_SIZE
, ( * ) 
NULL
, ( 
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ), &
xIdÀTaskH™dÀ
 );

1460 
xRëu∫
 = 
	`xTaskCª©e
–
¥vIdÀTask
, "IDLE", 
tskIDLE_STACK_SIZE
, ( * ) 
NULL
, ( 
tskIDLE_PRIORITY
 | 
p‹tPRIVILEGE_BIT
 ), NULL );

1464 #i‡–
c⁄figUSE_TIMERS
 == 1 )

1466 if–
xRëu∫
 =
pdPASS
 )

1468 
xRëu∫
 = 
	`xTimîCª©eTimîTask
();

1472 
	`mtCOVERAGE_TEST_MARKER
();

1477 if–
xRëu∫
 =
pdPASS
 )

1484 
	`p‹tDISABLE_INTERRUPTS
();

1486 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

1490 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

1494 
xScheduÀrRu¬ög
 = 
pdTRUE
;

1495 
xTickCou¡
 = ( 
TickTy≥_t
 ) 0U;

1500 
	`p‹tCONFIGURE_TIMER_FOR_RUN_TIME_STATS
();

1504 if–
	`xP‹tSèπScheduÀr
(Ë!
pdFALSE
 )

1519 
	`c⁄figASSERT
–
xRëu∫
 );

1521 
	}
}

1524 
	$vTaskEndScheduÀr
( )

1529 
	`p‹tDISABLE_INTERRUPTS
();

1530 
xScheduÀrRu¬ög
 = 
pdFALSE
;

1531 
	`vP‹tEndScheduÀr
();

1532 
	}
}

1535 
	$vTaskSu•ídAŒ
( )

1541 ++
uxScheduÀrSu•íded
;

1542 
	}
}

1545 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

1547 
TickTy≥_t
 
	$¥vGëEx≥˘edIdÀTime
( )

1549 
TickTy≥_t
 
xRëu∫
;

1551 if–
pxCuºítTCB
->
uxPri‹ôy
 > 
tskIDLE_PRIORITY
 )

1553 
xRëu∫
 = 0;

1555 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > 1 )

1560 
xRëu∫
 = 0;

1564 
xRëu∫
 = 
xNextTaskUnblockTime
 - 
xTickCou¡
;

1567  
xRëu∫
;

1568 
	}
}

1573 
Ba£Ty≥_t
 
	$xTaskResumeAŒ
( )

1575 
TCB_t
 *
pxTCB
;

1576 
Ba£Ty≥_t
 
xAÃódyYõlded
 = 
pdFALSE
;

1580 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 );

1587 
	`èskENTER_CRITICAL
();

1589 --
uxScheduÀrSu•íded
;

1591 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1593 if–
uxCuºítNumbîOfTasks
 > ( 
UBa£Ty≥_t
 ) 0U )

1597  
	`li°LIST_IS_EMPTY
–&
xPídögRódyLi°
 ) =
pdFALSE
 )

1599 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xPídögRódyLi°
 ) );

1600 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1601 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1602 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1606 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1608 
xYõldPídög
 = 
pdTRUE
;

1612 
	`mtCOVERAGE_TEST_MARKER
();

1620 if–
uxPídedTicks
 > ( 
UBa£Ty≥_t
 ) 0U )

1622  
uxPídedTicks
 > ( 
UBa£Ty≥_t
 ) 0U )

1624 if–
	`xTaskIn¸emítTick
(Ë!
pdFALSE
 )

1626 
xYõldPídög
 = 
pdTRUE
;

1630 
	`mtCOVERAGE_TEST_MARKER
();

1632 --
uxPídedTicks
;

1637 
	`mtCOVERAGE_TEST_MARKER
();

1640 if–
xYõldPídög
 =
pdTRUE
 )

1642 #if–
c⁄figUSE_PREEMPTION
 != 0 )

1644 
xAÃódyYõlded
 = 
pdTRUE
;

1647 
	`èskYIELD_IF_USING_PREEMPTION
();

1651 
	`mtCOVERAGE_TEST_MARKER
();

1657 
	`mtCOVERAGE_TEST_MARKER
();

1660 
	`èskEXIT_CRITICAL
();

1662  
xAÃódyYõlded
;

1663 
	}
}

1666 
TickTy≥_t
 
	$xTaskGëTickCou¡
( )

1668 
TickTy≥_t
 
xTicks
;

1671 
	`èskENTER_CRITICAL
();

1673 
xTicks
 = 
xTickCou¡
;

1675 
	`èskEXIT_CRITICAL
();

1677  
xTicks
;

1678 
	}
}

1681 
TickTy≥_t
 
	$xTaskGëTickCou¡FromISR
( )

1683 
TickTy≥_t
 
xRëu∫
;

1684 
UBa£Ty≥_t
 
uxSavedI¡îru±Sètus
;

1700 
	`p‹tASSERT_IF_INTERRUPT_PRIORITY_INVALID
();

1702 
uxSavedI¡îru±Sètus
 = 
	`p‹tSET_INTERRUPT_MASK_FROM_ISR
();

1704 
xRëu∫
 = 
xTickCou¡
;

1706 
	`p‹tCLEAR_INTERRUPT_MASK_FROM_ISR
–
uxSavedI¡îru±Sètus
 );

1708  
xRëu∫
;

1709 
	}
}

1712 
UBa£Ty≥_t
 
	$uxTaskGëNumbîOfTasks
( )

1716  
uxCuºítNumbîOfTasks
;

1717 
	}
}

1720 #i‡–
INCLUDE_pcTaskGëTaskName
 == 1 )

1722 *
	$pcTaskGëTaskName
–
TaskH™dÀ_t
 
xTaskToQuîy
 )

1724 
TCB_t
 *
pxTCB
;

1727 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToQuîy
 );

1728 
	`c⁄figASSERT
–
pxTCB
 );

1729  &–
pxTCB
->
pcTaskName
[ 0 ] );

1730 
	}
}

1735 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

1737 
UBa£Ty≥_t
 
	$uxTaskGëSy°emSèã
–
TaskSètus_t
 * c⁄° 
pxTaskSètusAºay
, c⁄° 
UBa£Ty≥_t
 
uxAºaySize
, 
uöt32_t
 * c⁄° 
pulTŸÆRunTime
 )

1739 
UBa£Ty≥_t
 
uxTask
 = 0, 
uxQueue
 = 
c⁄figMAX_PRIORITIES
;

1741 
	`vTaskSu•ídAŒ
();

1744 if–
uxAºaySize
 >
uxCuºítNumbîOfTasks
 )

1750 
uxQueue
--;

1751 
uxTask
 +
	`¥vLi°TaskWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &–
pxRódyTasksLi°s
[ 
uxQueue
 ] ), 
eRódy
 );

1753 }  
uxQueue
 > ( 
UBa£Ty≥_t
 ) 
tskIDLE_PRIORITY
 );

1757 
uxTask
 +
	`¥vLi°TaskWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxDñayedTaskLi°
, 
eBlocked
 );

1758 
uxTask
 +
	`¥vLi°TaskWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), ( 
Li°_t
 * ) 
pxOvîÊowDñayedTaskLi°
, 
eBlocked
 );

1760 #if–
INCLUDE_vTaskDñëe
 == 1 )

1764 
uxTask
 +
	`¥vLi°TaskWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xTasksWaôögTîmö©i⁄
, 
eDñëed
 );

1768 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

1772 
uxTask
 +
	`¥vLi°TaskWôhöSögÀLi°
–&–
pxTaskSètusAºay
[ uxTask ] ), &
xSu•ídedTaskLi°
, 
eSu•íded
 );

1773 
	}
}

1776 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1)

1778 if–
	gpulTŸÆRunTime
 !
NULL
 )

1780 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


1781 
p‹tALT_GET_RUN_TIME_COUNTER_VALUE
––*
pulTŸÆRunTime
 ) );

1783 *
	gpulTŸÆRunTime
 = 
p‹tGET_RUN_TIME_COUNTER_VALUE
();

1789 if–
	gpulTŸÆRunTime
 !
NULL
 )

1791 *
pulTŸÆRunTime
 = 0;

1798 
mtCOVERAGE_TEST_MARKER
();

1801 –Ë
xTaskResumeAŒ
();

1803  
	guxTask
;

1809 #i‡–
INCLUDE_xTaskGëIdÀTaskH™dÀ
 == 1 )

1811 
TaskH™dÀ_t
 
	$xTaskGëIdÀTaskH™dÀ
( )

1815 
	`c⁄figASSERT
––
xIdÀTaskH™dÀ
 !
NULL
 ) );

1816  
xIdÀTaskH™dÀ
;

1817 
	}
}

1826 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

1828 
	$vTaskSãpTick
–c⁄° 
TickTy≥_t
 
xTicksToJump
 )

1833 
	`c⁄figASSERT
––
xTickCou¡
 + 
xTicksToJump
 ) <
xNextTaskUnblockTime
 );

1834 
xTickCou¡
 +
xTicksToJump
;

1835 
	`åa˚INCREASE_TICK_COUNT
–
xTicksToJump
 );

1836 
	}
}

1841 
Ba£Ty≥_t
 
	$xTaskIn¸emítTick
( )

1843 
TCB_t
 * 
pxTCB
;

1844 
TickTy≥_t
 
xIãmVÆue
;

1845 
Ba£Ty≥_t
 
xSwôchRequúed
 = 
pdFALSE
;

1850 
	`åa˚TASK_INCREMENT_TICK
–
xTickCou¡
 );

1851 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

1855 ++
xTickCou¡
;

1860 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

1862 if–
xC⁄°TickCou¡
 =–
TickTy≥_t
 ) 0U )

1864 
	`èskSWITCH_DELAYED_LISTS
();

1868 
	`mtCOVERAGE_TEST_MARKER
();

1875 if–
xC⁄°TickCou¡
 >
xNextTaskUnblockTime
 )

1879 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

1886 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

1895 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

1896 
xIãmVÆue
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1898 if–
xC⁄°TickCou¡
 < 
xIãmVÆue
 )

1905 
xNextTaskUnblockTime
 = 
xIãmVÆue
;

1910 
	`mtCOVERAGE_TEST_MARKER
();

1914 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

1918 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

1920 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

1924 
	`mtCOVERAGE_TEST_MARKER
();

1929 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

1933 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

1939 if–
pxTCB
->
uxPri‹ôy
 >
pxCuºítTCB
->uxPriority )

1941 
xSwôchRequúed
 = 
pdTRUE
;

1945 
	`mtCOVERAGE_TEST_MARKER
();

1957 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figUSE_TIME_SLICING
 == 1 ) )

1959 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
pxCuºítTCB
->
uxPri‹ôy
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

1961 
xSwôchRequúed
 = 
pdTRUE
;

1965 
	`mtCOVERAGE_TEST_MARKER
();

1970 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

1974 if–
uxPídedTicks
 =–
UBa£Ty≥_t
 ) 0U )

1976 
	`vAµliˇti⁄TickHook
();

1980 
	`mtCOVERAGE_TEST_MARKER
();

1987 ++
uxPídedTicks
;

1991 #i‡–
c⁄figUSE_TICK_HOOK
 == 1 )

1993 
	`vAµliˇti⁄TickHook
();

1998 #i‡–
c⁄figUSE_PREEMPTION
 == 1 )

2000 if–
xYõldPídög
 !
pdFALSE
 )

2002 
xSwôchRequúed
 = 
pdTRUE
;

2006 
	`mtCOVERAGE_TEST_MARKER
();

2011  
xSwôchRequúed
;

2012 
	}
}

2015 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2017 
	$vTaskSëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
, 
TaskHookFun˘i⁄_t
 
pxHookFun˘i⁄
 )

2019 
TCB_t
 *
xTCB
;

2023 if–
xTask
 =
NULL
 )

2025 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2029 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2034 
	`èskENTER_CRITICAL
();

2035 
xTCB
->
pxTaskTag
 = 
pxHookFun˘i⁄
;

2036 
	`èskEXIT_CRITICAL
();

2037 
	}
}

2042 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2044 
TaskHookFun˘i⁄_t
 
	$xTaskGëAµliˇti⁄TaskTag
–
TaskH™dÀ_t
 
xTask
 )

2046 
TCB_t
 *
xTCB
;

2047 
TaskHookFun˘i⁄_t
 
xRëu∫
;

2050 if–
xTask
 =
NULL
 )

2052 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2056 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2061 
	`èskENTER_CRITICAL
();

2063 
xRëu∫
 = 
xTCB
->
pxTaskTag
;

2065 
	`èskEXIT_CRITICAL
();

2067  
xRëu∫
;

2068 
	}
}

2073 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2075 
Ba£Ty≥_t
 
	$xTaskCÆlAµliˇti⁄TaskHook
–
TaskH™dÀ_t
 
xTask
, *
pvP¨amëî
 )

2077 
TCB_t
 *
xTCB
;

2078 
Ba£Ty≥_t
 
xRëu∫
;

2081 if–
xTask
 =
NULL
 )

2083 
xTCB
 = ( 
TCB_t
 * ) 
pxCuºítTCB
;

2087 
xTCB
 = ( 
TCB_t
 * ) 
xTask
;

2090 if–
xTCB
->
pxTaskTag
 !
NULL
 )

2092 
xRëu∫
 = 
xTCB
->
	`pxTaskTag
–
pvP¨amëî
 );

2096 
xRëu∫
 = 
pdFAIL
;

2099  
xRëu∫
;

2100 
	}
}

2105 
	$vTaskSwôchC⁄ãxt
( )

2107 if–
uxScheduÀrSu•íded
 !–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2111 
xYõldPídög
 = 
pdTRUE
;

2115 
xYõldPídög
 = 
pdFALSE
;

2116 
	`åa˚TASK_SWITCHED_OUT
();

2118 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2120 #ifde‡
p‹tALT_GET_RUN_TIME_COUNTER_VALUE


2121 
	`p‹tALT_GET_RUN_TIME_COUNTER_VALUE
–
ulTŸÆRunTime
 );

2123 
ulTŸÆRunTime
 = 
	`p‹tGET_RUN_TIME_COUNTER_VALUE
();

2133 if–
ulTŸÆRunTime
 > 
ulTaskSwôchedInTime
 )

2135 
pxCuºítTCB
->
ulRunTimeCou¡î
 +–
ulTŸÆRunTime
 - 
ulTaskSwôchedInTime
 );

2139 
	`mtCOVERAGE_TEST_MARKER
();

2141 
ulTaskSwôchedInTime
 = 
ulTŸÆRunTime
;

2145 
	`èskFIRST_CHECK_FOR_STACK_OVERFLOW
();

2146 
	`èskSECOND_CHECK_FOR_STACK_OVERFLOW
();

2148 
	`èskSELECT_HIGHEST_PRIORITY_TASK
();

2150 
	`åa˚TASK_SWITCHED_IN
();

2152 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

2156 
_impuª_±r
 = &–
pxCuºítTCB
->
xNewLib_ªít
 );

2160 
	}
}

2163 
	$vTaskPœ˚OnEvítLi°
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

2165 
TickTy≥_t
 
xTimeToWake
;

2167 
	`c⁄figASSERT
–
pxEvítLi°
 );

2176 
	`vLi°In£π
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2181 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

2185 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

2189 
	`mtCOVERAGE_TEST_MARKER
();

2192 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2194 if–
xTicksToWaô
 =
p‹tMAX_DELAY
 )

2199 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2206 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

2207 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

2215 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

2216 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

2219 
	}
}

2222 
	$vTaskPœ˚OnUn‹dîedEvítLi°
–
Li°_t
 * 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xIãmVÆue
, c⁄° TickTy≥_à
xTicksToWaô
 )

2224 
TickTy≥_t
 
xTimeToWake
;

2226 
	`c⁄figASSERT
–
pxEvítLi°
 );

2230 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 != 0 );

2235 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

2242 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2247 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

2251 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

2255 
	`mtCOVERAGE_TEST_MARKER
();

2258 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2260 if–
xTicksToWaô
 =
p‹tMAX_DELAY
 )

2265 
	`vLi°In£πEnd
–&
xSu•ídedTaskLi°
, &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2272 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

2273 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

2281 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

2282 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

2285 
	}
}

2288 #i‡
c⁄figUSE_TIMERS
 == 1

2290 
	$vTaskPœ˚OnEvítLi°Re°ri˘ed
–
Li°_t
 * c⁄° 
pxEvítLi°
, c⁄° 
TickTy≥_t
 
xTicksToWaô
 )

2292 
TickTy≥_t
 
xTimeToWake
;

2294 
	`c⁄figASSERT
–
pxEvítLi°
 );

2306 
	`vLi°In£πEnd
–
pxEvítLi°
, &–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

2311 if–
	`uxLi°Remove
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

2315 
	`p‹tRESET_READY_PRIORITY
–
pxCuºítTCB
->
uxPri‹ôy
, 
uxT›RódyPri‹ôy
 );

2319 
	`mtCOVERAGE_TEST_MARKER
();

2324 
xTimeToWake
 = 
xTickCou¡
 + 
xTicksToWaô
;

2326 
	`åa˚TASK_DELAY_UNTIL
();

2327 
	`¥vAddCuºítTaskToDñayedLi°
–
xTimeToWake
 );

2328 
	}
}

2333 
Ba£Ty≥_t
 
	$xTaskRemoveFromEvítLi°
–c⁄° 
Li°_t
 * c⁄° 
pxEvítLi°
 )

2335 
TCB_t
 *
pxUnblockedTCB
;

2336 
Ba£Ty≥_t
 
xRëu∫
;

2351 
pxUnblockedTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxEvítLi°
 );

2352 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

2353 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

2355 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

2357 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xGíîicLi°Iãm
 ) );

2358 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

2364 
	`vLi°In£πEnd
–&–
xPídögRódyLi°
 ), &–
pxUnblockedTCB
->
xEvítLi°Iãm
 ) );

2367 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

2372 
xRëu∫
 = 
pdTRUE
;

2376 
xYõldPídög
 = 
pdTRUE
;

2380 
xRëu∫
 = 
pdFALSE
;

2383  
xRëu∫
;

2384 
	}
}

2387 
Ba£Ty≥_t
 
	$xTaskRemoveFromUn‹dîedEvítLi°
–
Li°Iãm_t
 * 
pxEvítLi°Iãm
, c⁄° 
TickTy≥_t
 
xIãmVÆue
 )

2389 
TCB_t
 *
pxUnblockedTCB
;

2390 
Ba£Ty≥_t
 
xRëu∫
;

2394 
	`c⁄figASSERT
–
uxScheduÀrSu•íded
 !
pdFALSE
 );

2397 
	`li°SET_LIST_ITEM_VALUE
–
pxEvítLi°Iãm
, 
xIãmVÆue
 | 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 );

2401 
pxUnblockedTCB
 = ( 
TCB_t
 * ) 
	`li°GET_LIST_ITEM_OWNER
–
pxEvítLi°Iãm
 );

2402 
	`c⁄figASSERT
–
pxUnblockedTCB
 );

2403 –Ë
	`uxLi°Remove
–
pxEvítLi°Iãm
 );

2408 –Ë
	`uxLi°Remove
–&–
pxUnblockedTCB
->
xGíîicLi°Iãm
 ) );

2409 
	`¥vAddTaskToRódyLi°
–
pxUnblockedTCB
 );

2411 if–
pxUnblockedTCB
->
uxPri‹ôy
 > 
pxCuºítTCB
->uxPriority )

2417 
xRëu∫
 = 
pdTRUE
;

2421 
xYõldPídög
 = 
pdTRUE
;

2425 
xRëu∫
 = 
pdFALSE
;

2428  
xRëu∫
;

2429 
	}
}

2432 
	$vTaskSëTimeOutSèã
–
TimeOut_t
 * c⁄° 
pxTimeOut
 )

2434 
	`c⁄figASSERT
–
pxTimeOut
 );

2435 
pxTimeOut
->
xOvîÊowCou¡
 = 
xNumOfOvîÊows
;

2436 
pxTimeOut
->
xTimeOnE¡îög
 = 
xTickCou¡
;

2437 
	}
}

2440 
Ba£Ty≥_t
 
	$xTaskCheckF‹TimeOut
–
TimeOut_t
 * c⁄° 
pxTimeOut
, 
TickTy≥_t
 * c⁄° 
pxTicksToWaô
 )

2442 
Ba£Ty≥_t
 
xRëu∫
;

2444 
	`c⁄figASSERT
–
pxTimeOut
 );

2445 
	`c⁄figASSERT
–
pxTicksToWaô
 );

2447 
	`èskENTER_CRITICAL
();

2450 c⁄° 
TickTy≥_t
 
xC⁄°TickCou¡
 = 
xTickCou¡
;

2452 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2456 if–*
pxTicksToWaô
 =
p‹tMAX_DELAY
 )

2458 
xRëu∫
 = 
pdFALSE
;

2463 if––
xNumOfOvîÊows
 !
pxTimeOut
->
xOvîÊowCou¡
 ) && ( 
xC⁄°TickCou¡
 >pxTimeOut->
xTimeOnE¡îög
 ) )

2469 
xRëu∫
 = 
pdTRUE
;

2471 if––
xC⁄°TickCou¡
 - 
pxTimeOut
->
xTimeOnE¡îög
 ) < *
pxTicksToWaô
 )

2474 *
pxTicksToWaô
 -–
xC⁄°TickCou¡
 - 
pxTimeOut
->
xTimeOnE¡îög
 );

2475 
	`vTaskSëTimeOutSèã
–
pxTimeOut
 );

2476 
xRëu∫
 = 
pdFALSE
;

2480 
xRëu∫
 = 
pdTRUE
;

2483 
	`èskEXIT_CRITICAL
();

2485  
xRëu∫
;

2486 
	}
}

2489 
	$vTaskMis£dYõld
( )

2491 
xYõldPídög
 = 
pdTRUE
;

2492 
	}
}

2495 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2497 
UBa£Ty≥_t
 
	$uxTaskGëTaskNumbî
–
TaskH™dÀ_t
 
xTask
 )

2499 
UBa£Ty≥_t
 
uxRëu∫
;

2500 
TCB_t
 *
pxTCB
;

2502 if–
xTask
 !
NULL
 )

2504 
pxTCB
 = ( 
TCB_t
 * ) 
xTask
;

2505 
uxRëu∫
 = 
pxTCB
->
uxTaskNumbî
;

2509 
uxRëu∫
 = 0U;

2512  
uxRëu∫
;

2513 
	}
}

2518 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2520 
	$vTaskSëTaskNumbî
–
TaskH™dÀ_t
 
xTask
, c⁄° 
UBa£Ty≥_t
 
uxH™dÀ
 )

2522 
TCB_t
 *
pxTCB
;

2524 if–
xTask
 !
NULL
 )

2526 
pxTCB
 = ( 
TCB_t
 * ) 
xTask
;

2527 
pxTCB
->
uxTaskNumbî
 = 
uxH™dÀ
;

2529 
	}
}

2544 
	$p‹tTASK_FUNCTION
–
¥vIdÀTask
, 
pvP¨amëîs
 )

2547 –Ë
pvP¨amëîs
;

2552 
	`¥vCheckTasksWaôögTîmö©i⁄
();

2554 #i‡–
c⁄figUSE_PREEMPTION
 == 0 )

2560 
	`èskYIELD
();

2564 #i‡––
c⁄figUSE_PREEMPTION
 =1 ) && ( 
c⁄figIDLE_SHOULD_YIELD
 == 1 ) )

2575 if–
	`li°CURRENT_LIST_LENGTH
–&–
pxRódyTasksLi°s
[ 
tskIDLE_PRIORITY
 ] ) ) > ( 
UBa£Ty≥_t
 ) 1 )

2577 
	`èskYIELD
();

2581 
	`mtCOVERAGE_TEST_MARKER
();

2586 #i‡–
c⁄figUSE_IDLE_HOOK
 == 1 )

2588 
	`vAµliˇti⁄IdÀHook
( );

2595 
	`vAµliˇti⁄IdÀHook
();

2603 #i‡–
c⁄figUSE_TICKLESS_IDLE
 != 0 )

2605 
TickTy≥_t
 
xEx≥˘edIdÀTime
;

2612 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

2614 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

2616 
	`vTaskSu•ídAŒ
();

2621 
	`c⁄figASSERT
–
xNextTaskUnblockTime
 >
xTickCou¡
 );

2622 
xEx≥˘edIdÀTime
 = 
	`¥vGëEx≥˘edIdÀTime
();

2624 if–
xEx≥˘edIdÀTime
 >
c⁄figEXPECTED_IDLE_TIME_BEFORE_SLEEP
 )

2626 
	`åa˚LOW_POWER_IDLE_BEGIN
();

2627 
	`p‹tSUPPRESS_TICKS_AND_SLEEP
–
xEx≥˘edIdÀTime
 );

2628 
	`åa˚LOW_POWER_IDLE_END
();

2632 
	`mtCOVERAGE_TEST_MARKER
();

2635 –Ë
	`xTaskResumeAŒ
();

2639 
	`mtCOVERAGE_TEST_MARKER
();

2644 
	}
}

2647 #i‡
c⁄figUSE_TICKLESS_IDLE
 != 0

2649 
eSÀïModeSètus
 
	$eTaskC⁄fúmSÀïModeSètus
( )

2651 
eSÀïModeSètus
 
eRëu∫
 = 
eSènd¨dSÀï
;

2653 if–
	`li°CURRENT_LIST_LENGTH
–&
xPídögRódyLi°
 ) != 0 )

2656 
eRëu∫
 = 
eAb‹tSÀï
;

2658 if–
xYõldPídög
 !
pdFALSE
 )

2661 
eRëu∫
 = 
eAb‹tSÀï
;

2665 #i‡
c⁄figUSE_TIMERS
 == 0

2668 c⁄° 
UBa£Ty≥_t
 
uxN⁄Aµliˇti⁄Tasks
 = 1;

2674 if–
	`li°CURRENT_LIST_LENGTH
–&
xSu•ídedTaskLi°
 ) =–
uxCuºítNumbîOfTasks
 - 
uxN⁄Aµliˇti⁄Tasks
 ) )

2676 
eRëu∫
 = 
eNoTasksWaôögTimeout
;

2680 
	`mtCOVERAGE_TEST_MARKER
();

2686  
eRëu∫
;

2687 
	}
}

2691 
	$¥vInôüli£TCBV¨übÀs
–
TCB_t
 * c⁄° 
pxTCB
, c⁄° * c⁄° 
pcName
, 
UBa£Ty≥_t
 
uxPri‹ôy
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
, c⁄° 
uöt16_t
 
usSèckDïth
 )

2693 
UBa£Ty≥_t
 
x
;

2696  
x
 = ( 
UBa£Ty≥_t
 ) 0; x < ( UBa£Ty≥_àË
c⁄figMAX_TASK_NAME_LEN
; x++ )

2698 
pxTCB
->
pcTaskName
[ 
x
 ] = 
pcName
[ x ];

2703 if–
pcName
[ 
x
 ] == 0x00 )

2709 
	`mtCOVERAGE_TEST_MARKER
();

2715 
pxTCB
->
pcTaskName
[ 
c⁄figMAX_TASK_NAME_LEN
 - 1 ] = '\0';

2719 if–
uxPri‹ôy
 >–
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 )

2721 
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( UBaseType_t ) 1U;

2725 
	`mtCOVERAGE_TEST_MARKER
();

2728 
pxTCB
->
uxPri‹ôy
 = uxPriority;

2729 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2731 
pxTCB
->
uxBa£Pri‹ôy
 = 
uxPri‹ôy
;

2735 
	`vLi°Inôüli£Iãm
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2736 
	`vLi°Inôüli£Iãm
–&–
pxTCB
->
xEvítLi°Iãm
 ) );

2740 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTCB
->
xGíîicLi°Iãm
 ),ÖxTCB );

2743 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
uxPri‹ôy
 );

2744 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTCB
->
xEvítLi°Iãm
 ),ÖxTCB );

2746 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

2748 
pxTCB
->
uxCrôiˇlNe°ög
 = ( 
UBa£Ty≥_t
 ) 0U;

2752 #i‡–
c⁄figUSE_APPLICATION_TASK_TAG
 == 1 )

2754 
pxTCB
->
pxTaskTag
 = 
NULL
;

2758 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2760 
pxTCB
->
ulRunTimeCou¡î
 = 0UL;

2764 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

2766 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
,ÖxTCB->
pxSèck
, 
usSèckDïth
 );

2770 –Ë
xRegi⁄s
;

2771 –Ë
usSèckDïth
;

2775 #i‡–
c⁄figUSE_NEWLIB_REENTRANT
 == 1 )

2778 
	`_REENT_INIT_PTR
––&–
pxTCB
->
xNewLib_ªít
 ) ) );

2781 
	}
}

2784 #i‡–
p‹tUSING_MPU_WRAPPERS
 == 1 )

2786 
	$vTaskAŒoˇãMPURegi⁄s
–
TaskH™dÀ_t
 
xTaskToModify
, c⁄° 
Mem‹yRegi⁄_t
 * c⁄° 
xRegi⁄s
 )

2788 
TCB_t
 *
pxTCB
;

2791 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTaskToModify
 );

2793 
	`vP‹tSt‹eTaskMPUSëtögs
–&–
pxTCB
->
xMPUSëtögs
 ), 
xRegi⁄s
, 
NULL
, 0 );

2794 
	}
}

2799 
	$¥vInôüli£TaskLi°s
( )

2801 
UBa£Ty≥_t
 
uxPri‹ôy
;

2803  
uxPri‹ôy
 = ( 
UBa£Ty≥_t
 ) 0U; uxPri‹ôy < ( UBa£Ty≥_àË
c⁄figMAX_PRIORITIES
; uxPriority++ )

2805 
	`vLi°Inôüli£
–&–
pxRódyTasksLi°s
[ 
uxPri‹ôy
 ] ) );

2808 
	`vLi°Inôüli£
–&
xDñayedTaskLi°1
 );

2809 
	`vLi°Inôüli£
–&
xDñayedTaskLi°2
 );

2810 
	`vLi°Inôüli£
–&
xPídögRódyLi°
 );

2812 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2814 
	`vLi°Inôüli£
–&
xTasksWaôögTîmö©i⁄
 );

2818 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2820 
	`vLi°Inôüli£
–&
xSu•ídedTaskLi°
 );

2826 
pxDñayedTaskLi°
 = &
xDñayedTaskLi°1
;

2827 
pxOvîÊowDñayedTaskLi°
 = &
xDñayedTaskLi°2
;

2828 
	}
}

2831 
	$¥vCheckTasksWaôögTîmö©i⁄
( )

2833 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

2835 
Ba£Ty≥_t
 
xLi°IsEm±y
;

2839  
uxTasksDñëed
 > ( 
UBa£Ty≥_t
 ) 0U )

2841 
	`vTaskSu•ídAŒ
();

2843 
xLi°IsEm±y
 = 
	`li°LIST_IS_EMPTY
–&
xTasksWaôögTîmö©i⁄
 );

2845 –Ë
	`xTaskResumeAŒ
();

2847 if–
xLi°IsEm±y
 =
pdFALSE
 )

2849 
TCB_t
 *
pxTCB
;

2851 
	`èskENTER_CRITICAL
();

2853 
pxTCB
 = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
––&
xTasksWaôögTîmö©i⁄
 ) );

2854 –Ë
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) );

2855 --
uxCuºítNumbîOfTasks
;

2856 --
uxTasksDñëed
;

2858 
	`èskEXIT_CRITICAL
();

2860 
	`¥vDñëeTCB
–
pxTCB
 );

2864 
	`mtCOVERAGE_TEST_MARKER
();

2869 
	}
}

2872 
	$¥vAddCuºítTaskToDñayedLi°
–c⁄° 
TickTy≥_t
 
xTimeToWake
 )

2875 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xGíîicLi°Iãm
 ), 
xTimeToWake
 );

2877 if–
xTimeToWake
 < 
xTickCou¡
 )

2880 
	`vLi°In£π
–
pxOvîÊowDñayedTaskLi°
, &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2885 
	`vLi°In£π
–
pxDñayedTaskLi°
, &–
pxCuºítTCB
->
xGíîicLi°Iãm
 ) );

2890 if–
xTimeToWake
 < 
xNextTaskUnblockTime
 )

2892 
xNextTaskUnblockTime
 = 
xTimeToWake
;

2896 
	`mtCOVERAGE_TEST_MARKER
();

2899 
	}
}

2902 
TCB_t
 *
	$¥vAŒoˇãTCBAndSèck
–c⁄° 
uöt16_t
 
usSèckDïth
, 
SèckTy≥_t
 * c⁄° 
puxSèckBuf„r
 )

2904 
TCB_t
 *
pxNewTCB
;

2908 
pxNewTCB
 = ( 
TCB_t
 * ) 
	`pvP‹tMÆloc
( ( TCB_t ) );

2910 if–
pxNewTCB
 !
NULL
 )

2915 
pxNewTCB
->
pxSèck
 = ( 
SèckTy≥_t
 * ) 
	`pvP‹tMÆlocAlig√d
––––
size_t
 ) 
usSèckDïth
 ) * –SèckTy≥_àË), 
puxSèckBuf„r
 );

2917 if–
pxNewTCB
->
pxSèck
 =
NULL
 )

2920 
	`vP‹tFªe
–
pxNewTCB
 );

2921 
pxNewTCB
 = 
NULL
;

2926 #if––
c⁄figCHECK_FOR_STACK_OVERFLOW
 > 1 ) || ( 
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

2929 –Ë
	`mem£t
–
pxNewTCB
->
pxSèck
, ( Ë
tskSTACK_FILL_BYTE
, ( 
size_t
 ) 
usSèckDïth
 * –
SèckTy≥_t
 ) );

2935  
pxNewTCB
;

2936 
	}
}

2939 #i‡–
c⁄figUSE_TRACE_FACILITY
 == 1 )

2941 
UBa£Ty≥_t
 
	$¥vLi°TaskWôhöSögÀLi°
–
TaskSètus_t
 *
pxTaskSètusAºay
, 
Li°_t
 *
pxLi°
, 
eTaskSèã
 
eSèã
 )

2943 vﬁ©ûê
TCB_t
 *
pxNextTCB
, *
pxFú°TCB
;

2944 
UBa£Ty≥_t
 
uxTask
 = 0;

2946 if–
	`li°CURRENT_LIST_LENGTH
–
pxLi°
 ) > ( 
UBa£Ty≥_t
 ) 0 )

2948 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxFú°TCB
, 
pxLi°
 );

2956 
	`li°GET_OWNER_OF_NEXT_ENTRY
–
pxNextTCB
, 
pxLi°
 );

2958 
pxTaskSètusAºay
[ 
uxTask
 ].
xH™dÀ
 = ( 
TaskH™dÀ_t
 ) 
pxNextTCB
;

2959 
pxTaskSètusAºay
[ 
uxTask
 ].
pcTaskName
 = ( c⁄° * ) &–
pxNextTCB
->pcTaskName [ 0 ] );

2960 
pxTaskSètusAºay
[ 
uxTask
 ].
xTaskNumbî
 = 
pxNextTCB
->
uxTCBNumbî
;

2961 
pxTaskSètusAºay
[ 
uxTask
 ].
eCuºítSèã
 = 
eSèã
;

2962 
pxTaskSètusAºay
[ 
uxTask
 ].
uxCuºítPri‹ôy
 = 
pxNextTCB
->
uxPri‹ôy
;

2964 #i‡–
INCLUDE_vTaskSu•íd
 == 1 )

2969 if–
eSèã
 =
eSu•íded
 )

2971 if–
	`li°LIST_ITEM_CONTAINER
–&–
pxNextTCB
->
xEvítLi°Iãm
 ) ) !
NULL
 )

2973 
pxTaskSètusAºay
[ 
uxTask
 ].
eCuºítSèã
 = 
eBlocked
;

2979 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

2981 
pxTaskSètusAºay
[ 
uxTask
 ].
uxBa£Pri‹ôy
 = 
pxNextTCB
->uxBasePriority;

2985 
pxTaskSètusAºay
[ 
uxTask
 ].
uxBa£Pri‹ôy
 = 0;

2989 #i‡–
c⁄figGENERATE_RUN_TIME_STATS
 == 1 )

2991 
pxTaskSètusAºay
[ 
uxTask
 ].
ulRunTimeCou¡î
 = 
pxNextTCB
->ulRunTimeCounter;

2995 
pxTaskSètusAºay
[ 
uxTask
 ].
ulRunTimeCou¡î
 = 0;

2999 #i‡–
p‹tSTACK_GROWTH
 > 0 )

3001 
pxTaskSètusAºay
[ 
uxTask
 ].
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxNextTCB
->
pxEndOfSèck
 );

3005 
pxTaskSètusAºay
[ 
uxTask
 ].
usSèckHighW©îM¨k
 = 
	`¥vTaskCheckFªeSèckS∑˚
––
uöt8_t
 * ) 
pxNextTCB
->
pxSèck
 );

3009 
uxTask
++;

3011 }  
pxNextTCB
 !
pxFú°TCB
 );

3015 
	`mtCOVERAGE_TEST_MARKER
();

3018  
uxTask
;

3019 
	}
}

3024 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) || ( 
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 ) )

3026 
uöt16_t
 
	$¥vTaskCheckFªeSèckS∑˚
–c⁄° 
uöt8_t
 * 
pucSèckByã
 )

3028 
uöt32_t
 
ulCou¡
 = 0U;

3030  *
pucSèckByã
 =
tskSTACK_FILL_BYTE
 )

3032 
pucSèckByã
 -
p‹tSTACK_GROWTH
;

3033 
ulCou¡
++;

3036 
ulCou¡
 /–
uöt32_t
 ) –
SèckTy≥_t
 );

3038  ( 
uöt16_t
 ) 
ulCou¡
;

3039 
	}
}

3044 #i‡–
INCLUDE_uxTaskGëSèckHighW©îM¨k
 == 1 )

3046 
UBa£Ty≥_t
 
	$uxTaskGëSèckHighW©îM¨k
–
TaskH™dÀ_t
 
xTask
 )

3048 
TCB_t
 *
pxTCB
;

3049 
uöt8_t
 *
pucEndOfSèck
;

3050 
UBa£Ty≥_t
 
uxRëu∫
;

3052 
pxTCB
 = 
	`¥vGëTCBFromH™dÀ
–
xTask
 );

3054 #i‡
p‹tSTACK_GROWTH
 < 0

3056 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxSèck
;

3060 
pucEndOfSèck
 = ( 
uöt8_t
 * ) 
pxTCB
->
pxEndOfSèck
;

3064 
uxRëu∫
 = ( 
UBa£Ty≥_t
 ) 
	`¥vTaskCheckFªeSèckS∑˚
–
pucEndOfSèck
 );

3066  
uxRëu∫
;

3067 
	}
}

3072 #i‡–
INCLUDE_vTaskDñëe
 == 1 )

3074 
	$¥vDñëeTCB
–
TCB_t
 *
pxTCB
 )

3079 
	`p‹tCLEAN_UP_TCB
–
pxTCB
 );

3083 
	`vP‹tFªeAlig√d
–
pxTCB
->
pxSèck
 );

3084 
	`vP‹tFªe
–
pxTCB
 );

3085 
	}
}

3090 
	$¥vRe£tNextTaskUnblockTime
( )

3092 
TCB_t
 *
pxTCB
;

3094 if–
	`li°LIST_IS_EMPTY
–
pxDñayedTaskLi°
 ) !
pdFALSE
 )

3101 
xNextTaskUnblockTime
 = 
p‹tMAX_DELAY
;

3109 –
pxTCB
 ) = ( 
TCB_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxDñayedTaskLi°
 );

3110 
xNextTaskUnblockTime
 = 
	`li°GET_LIST_ITEM_VALUE
–&––
pxTCB
 )->
xGíîicLi°Iãm
 ) );

3112 
	}
}

3115 #i‡––
INCLUDE_xTaskGëCuºítTaskH™dÀ
 =1 ) || ( 
c⁄figUSE_MUTEXES
 == 1 ) )

3117 
TaskH™dÀ_t
 
	$xTaskGëCuºítTaskH™dÀ
( )

3119 
TaskH™dÀ_t
 
xRëu∫
;

3124 
xRëu∫
 = 
pxCuºítTCB
;

3126  
xRëu∫
;

3127 
	}
}

3132 #i‡––
INCLUDE_xTaskGëScheduÀrSèã
 =1 ) || ( 
c⁄figUSE_TIMERS
 == 1 ) )

3134 
Ba£Ty≥_t
 
	$xTaskGëScheduÀrSèã
( )

3136 
Ba£Ty≥_t
 
xRëu∫
;

3138 if–
xScheduÀrRu¬ög
 =
pdFALSE
 )

3140 
xRëu∫
 = 
èskSCHEDULER_NOT_STARTED
;

3144 if–
uxScheduÀrSu•íded
 =–
UBa£Ty≥_t
 ) 
pdFALSE
 )

3146 
xRëu∫
 = 
èskSCHEDULER_RUNNING
;

3150 
xRëu∫
 = 
èskSCHEDULER_SUSPENDED
;

3154  
xRëu∫
;

3155 
	}
}

3160 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3162 
	$vTaskPri‹ôyInhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

3164 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
pxMuãxHﬁdî
;

3168 if–
pxMuãxHﬁdî
 !
NULL
 )

3170 if–
pxTCB
->
uxPri‹ôy
 < 
pxCuºítTCB
->uxPriority )

3175 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

3177 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àË
pxCuºítTCB
->
uxPri‹ôy
 );

3181 
	`mtCOVERAGE_TEST_MARKER
();

3186 if–
	`li°IS_CONTAINED_WITHIN
–&–
pxRódyTasksLi°s
[ 
pxTCB
->
uxPri‹ôy
 ] ), &–pxTCB->
xGíîicLi°Iãm
 ) ) !
pdFALSE
 )

3188 if–
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

3190 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

3194 
	`mtCOVERAGE_TEST_MARKER
();

3198 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

3199 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

3204 
pxTCB
->
uxPri‹ôy
 = 
pxCuºítTCB
->uxPriority;

3207 
	`åa˚TASK_PRIORITY_INHERIT
–
pxTCB
, 
pxCuºítTCB
->
uxPri‹ôy
 );

3211 
	`mtCOVERAGE_TEST_MARKER
();

3216 
	`mtCOVERAGE_TEST_MARKER
();

3218 
	}
}

3223 #i‡–
c⁄figUSE_MUTEXES
 == 1 )

3225 
	$vTaskPri‹ôyDisöhîô
–
TaskH™dÀ_t
 c⁄° 
pxMuãxHﬁdî
 )

3227 
TCB_t
 * c⁄° 
pxTCB
 = ( TCB_à* ) 
pxMuãxHﬁdî
;

3229 if–
pxMuãxHﬁdî
 !
NULL
 )

3231 if–
pxTCB
->
uxPri‹ôy
 !pxTCB->
uxBa£Pri‹ôy
 )

3235 if–
	`uxLi°Remove
–&–
pxTCB
->
xGíîicLi°Iãm
 ) ) =–
UBa£Ty≥_t
 ) 0 )

3237 
	`èskRESET_READY_PRIORITY
–
pxTCB
->
uxPri‹ôy
 );

3241 
	`mtCOVERAGE_TEST_MARKER
();

3246 
	`åa˚TASK_PRIORITY_DISINHERIT
–
pxTCB
,ÖxTCB->
uxBa£Pri‹ôy
 );

3247 
pxTCB
->
uxPri‹ôy
 =ÖxTCB->
uxBa£Pri‹ôy
;

3251 if––
	`li°GET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ) ) & 
èskEVENT_LIST_ITEM_VALUE_IN_USE
 ) == 0UL )

3253 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTCB
->
xEvítLi°Iãm
 ), ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxTCB->
uxPri‹ôy
 );

3257 
	`mtCOVERAGE_TEST_MARKER
();

3259 
	`¥vAddTaskToRódyLi°
–
pxTCB
 );

3263 
	`mtCOVERAGE_TEST_MARKER
();

3268 
	`mtCOVERAGE_TEST_MARKER
();

3270 
	}
}

3275 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

3277 
	$vTaskE¡îCrôiˇl
( )

3279 
	`p‹tDISABLE_INTERRUPTS
();

3281 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

3283 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )++;

3287 
	`mtCOVERAGE_TEST_MARKER
();

3289 
	}
}

3294 #i‡–
p‹tCRITICAL_NESTING_IN_TCB
 == 1 )

3296 
	$vTaskExôCrôiˇl
( )

3298 if–
xScheduÀrRu¬ög
 !
pdFALSE
 )

3300 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 > 0U )

3302 –
pxCuºítTCB
->
uxCrôiˇlNe°ög
 )--;

3304 if–
pxCuºítTCB
->
uxCrôiˇlNe°ög
 == 0U )

3306 
	`p‹tENABLE_INTERRUPTS
();

3310 
	`mtCOVERAGE_TEST_MARKER
();

3315 
	`mtCOVERAGE_TEST_MARKER
();

3320 
	`mtCOVERAGE_TEST_MARKER
();

3322 
	}
}

3327 #i‡––
c⁄figUSE_TRACE_FACILITY
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 == 1 ) )

3329 
	$vTaskLi°
–* 
pcWrôeBuf„r
 )

3331 
TaskSètus_t
 *
pxTaskSètusAºay
;

3332 vﬁ©ûê
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

3333 
cSètus
;

3361 *
pcWrôeBuf„r
 = 0x00;

3365 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

3368 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

3370 if–
pxTaskSètusAºay
 !
NULL
 )

3373 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, 
NULL
 );

3376  
x
 = 0; x < 
uxAºaySize
; x++ )

3378  
pxTaskSètusAºay
[ 
x
 ].
eCuºítSèã
 )

3380 
eRódy
: 
cSètus
 = 
tskREADY_CHAR
;

3383 
eBlocked
: 
cSètus
 = 
tskBLOCKED_CHAR
;

3386 
eSu•íded
: 
cSètus
 = 
tskSUSPENDED_CHAR
;

3389 
eDñëed
: 
cSètus
 = 
tskDELETED_CHAR
;

3394 
cSètus
 = 0x00;

3398 
	`•rötf
–
pcWrôeBuf„r
, "%s\t\t%c\t%u\t%u\t%u\r\n", 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
, 
cSètus
, ( ËpxTaskSètusAºay[ x ].
uxCuºítPri‹ôy
, ( ËpxTaskSètusAºay[ x ].
usSèckHighW©îM¨k
, ( ËpxTaskSètusAºay[ x ].
xTaskNumbî
 );

3399 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

3403 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

3407 
	`mtCOVERAGE_TEST_MARKER
();

3409 
	}
}

3414 #i‡––
c⁄figGENERATE_RUN_TIME_STATS
 =1 ) && ( 
c⁄figUSE_STATS_FORMATTING_FUNCTIONS
 == 1 ) )

3416 
	$vTaskGëRunTimeSèts
–*
pcWrôeBuf„r
 )

3418 
TaskSètus_t
 *
pxTaskSètusAºay
;

3419 vﬁ©ûê
UBa£Ty≥_t
 
uxAºaySize
, 
x
;

3420 
uöt32_t
 
ulTŸÆTime
, 
ulSètsAsPî˚¡age
;

3422 #if–
c⁄figUSE_TRACE_FACILITY
 != 1 )

3424 #îr‹ 
c⁄figUSE_TRACE_FACILITY
 
mu°
 
Æso
 
be
 
£t
 
to
 1 
ö
 
FªeRTOSC⁄fig
.
h
Åÿ
u£
 
	`vTaskGëRunTimeSèts
().

3454 *
pcWrôeBuf„r
 = 0x00;

3458 
uxAºaySize
 = 
uxCuºítNumbîOfTasks
;

3461 
pxTaskSètusAºay
 = 
	`pvP‹tMÆloc
–
uxCuºítNumbîOfTasks
 * –
TaskSètus_t
 ) );

3463 if–
pxTaskSètusAºay
 !
NULL
 )

3466 
uxAºaySize
 = 
	`uxTaskGëSy°emSèã
–
pxTaskSètusAºay
, uxAºaySize, &
ulTŸÆTime
 );

3469 
ulTŸÆTime
 /= 100UL;

3472 if–
ulTŸÆTime
 > 0 )

3475  
x
 = 0; x < 
uxAºaySize
; x++ )

3480 
ulSètsAsPî˚¡age
 = 
pxTaskSètusAºay
[ 
x
 ].
ulRunTimeCou¡î
 / 
ulTŸÆTime
;

3482 if–
ulSètsAsPî˚¡age
 > 0UL )

3484 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


3486 
	`•rötf
–
pcWrôeBuf„r
, "%s\t\t%lu\t\t%lu%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
,ÖxTaskSètusAºay[ x ].
ulRunTimeCou¡î
, 
ulSètsAsPî˚¡age
 );

3492 
	`•rötf
–
pcWrôeBuf„r
, "%s\t\t%u\t\t%u%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
, ( ËpxTaskSètusAºay[ x ].
ulRunTimeCou¡î
, ( Ë
ulSètsAsPî˚¡age
 );

3500 #ifde‡
p‹tLU_PRINTF_SPECIFIER_REQUIRED


3502 
	`•rötf
–
pcWrôeBuf„r
, "%s\t\t%lu\t\t<1%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
,ÖxTaskSètusAºay[ x ].
ulRunTimeCou¡î
 );

3508 
	`•rötf
–
pcWrôeBuf„r
, "%s\t\t%u\t\t<1%%\r\n", 
pxTaskSètusAºay
[ 
x
 ].
pcTaskName
, ( ËpxTaskSètusAºay[ x ].
ulRunTimeCou¡î
 );

3513 
pcWrôeBuf„r
 +
	`°æí
(ÖcWriteBuffer );

3518 
	`mtCOVERAGE_TEST_MARKER
();

3522 
	`vP‹tFªe
–
pxTaskSètusAºay
 );

3526 
	`mtCOVERAGE_TEST_MARKER
();

3528 
	}
}

3533 
TickTy≥_t
 
	$uxTaskRe£tEvítIãmVÆue
( )

3535 
TickTy≥_t
 
uxRëu∫
;

3537 
uxRëu∫
 = 
	`li°GET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ) );

3541 
	`li°SET_LIST_ITEM_VALUE
–&–
pxCuºítTCB
->
xEvítLi°Iãm
 ), ( ( 
TickTy≥_t
 ) 
c⁄figMAX_PRIORITIES
 - ( TickTy≥_àËpxCuºítTCB->
uxPri‹ôy
 ) );

3543  
uxRëu∫
;

3544 
	}
}

3547 #ifde‡
FREERTOS_MODULE_TEST


3548 
	~"èsks_ã°_ac˚ss_fun˘i⁄s.h
"

	@timers.c

67 
	~<°dlib.h
>

72 
	#MPU_WRAPPERS_INCLUDED_FROM_API_FILE


	)

74 
	~"FªeRTOS.h
"

75 
	~"èsk.h
"

76 
	~"queue.h
"

77 
	~"timîs.h
"

79 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 =1 ) && ( 
c⁄figUSE_TIMERS
 == 0 )

80 #îr‹ 
c⁄figUSE_TIMERS
 
mu°
 
be
 
£t
 
to
 1Åÿ
make
 
the
 
xTimîPídFun˘i⁄CÆl
(Ë
fun˘i⁄
 
avaûabÀ
.

87 #unde‡
MPU_WRAPPERS_INCLUDED_FROM_API_FILE


94 #i‡–
c⁄figUSE_TIMERS
 == 1 )

97 
	#tmrNO_DELAY
 ( 
TickTy≥_t
 ) 0U

	)

100 
	stmrTimîC⁄åﬁ


102 c⁄° *
	mpcTimîName
;

103 
Li°Iãm_t
 
	mxTimîLi°Iãm
;

104 
TickTy≥_t
 
	mxTimîPîiodInTicks
;

105 
UBa£Ty≥_t
 
	muxAutoRñﬂd
;

106 *
	mpvTimîID
;

107 
TimîCÆlbackFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

108 #if–
c⁄figUSE_TRACE_FACILITY
 == 1 )

109 
UBa£Ty≥_t
 
	muxTimîNumbî
;

111 } 
	txTIMER
;

115 
xTIMER
 
	tTimî_t
;

122 
	stmrTimîP¨amëîs


124 
TickTy≥_t
 
	mxMesßgeVÆue
;

125 
Timî_t
 * 
	mpxTimî
;

126 } 
	tTimîP¨amëî_t
;

129 
	stmrCÆlbackP¨amëîs


131 
PídedFun˘i⁄_t
 
	mpxCÆlbackFun˘i⁄
;

132 *
	mpvP¨amëî1
;

133 
uöt32_t
 
	mulP¨amëî2
;

134 } 
	tCÆlbackP¨amëîs_t
;

138 
	stmrTimîQueueMesßge


140 
Ba£Ty≥_t
 
	mxMesßgeID
;

143 
TimîP¨amëî_t
 
	mxTimîP¨amëîs
;

147 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

148 
CÆlbackP¨amëîs_t
 
	mxCÆlbackP¨amëîs
;

150 } 
	mu
;

151 } 
	tD´m⁄TaskMesßge_t
;

159 
PRIVILEGED_DATA
 
Li°_t
 
	gxA˘iveTimîLi°1
;

160 
PRIVILEGED_DATA
 
Li°_t
 
	gxA˘iveTimîLi°2
;

161 
PRIVILEGED_DATA
 
Li°_t
 *
	gpxCuºítTimîLi°
;

162 
PRIVILEGED_DATA
 
Li°_t
 *
	gpxOvîÊowTimîLi°
;

165 
PRIVILEGED_DATA
 
QueueH™dÀ_t
 
	gxTimîQueue
 = 
NULL
;

167 #i‡–
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 == 1 )

169 
PRIVILEGED_DATA
 
TaskH™dÀ_t
 
	gxTimîTaskH™dÀ
 = 
NULL
;

181 
	$¥vCheckF‹VÆidLi°AndQueue
–Ë
PRIVILEGED_FUNCTION
;

188 
	$¥vTimîTask
–*
pvP¨amëîs
 ) 
PRIVILEGED_FUNCTION
;

194 
	$¥vPro˚ssRe˚ivedComm™ds
–Ë
PRIVILEGED_FUNCTION
;

200 
Ba£Ty≥_t
 
	$¥vIn£πTimîInA˘iveLi°
–
Timî_t
 * c⁄° 
pxTimî
, c⁄° 
TickTy≥_t
 
xNextExpúyTime
, c⁄° TickTy≥_à
xTimeNow
, c⁄° TickTy≥_à
xComm™dTime
 ) 
PRIVILEGED_FUNCTION
;

206 
	$¥vPro˚ssExpúedTimî
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, c⁄° TickTy≥_à
xTimeNow
 ) 
PRIVILEGED_FUNCTION
;

212 
	$¥vSwôchTimîLi°s
–Ë
PRIVILEGED_FUNCTION
;

218 
TickTy≥_t
 
	$¥vSam∂eTimeNow
–
Ba£Ty≥_t
 * c⁄° 
pxTimîLi°sWîeSwôched
 ) 
PRIVILEGED_FUNCTION
;

226 
TickTy≥_t
 
	$¥vGëNextExpúeTime
–
Ba£Ty≥_t
 * c⁄° 
pxLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

232 
	$¥vPro˚ssTimîOrBlockTask
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, c⁄° 
Ba£Ty≥_t
 
xLi°WasEm±y
 ) 
PRIVILEGED_FUNCTION
;

236 
Ba£Ty≥_t
 
	$xTimîCª©eTimîTask
( )

238 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

244 
	`¥vCheckF‹VÆidLi°AndQueue
();

246 if–
xTimîQueue
 !
NULL
 )

248 #i‡–
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 == 1 )

252 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
, "Tm∏Svc", ( 
uöt16_t
 ) 
c⁄figTIMER_TASK_STACK_DEPTH
, 
NULL
, ( ( 
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
, &
xTimîTaskH™dÀ
 );

257 
xRëu∫
 = 
	`xTaskCª©e
–
¥vTimîTask
, "Tm∏Svc", ( 
uöt16_t
 ) 
c⁄figTIMER_TASK_STACK_DEPTH
, 
NULL
, ( ( 
UBa£Ty≥_t
 ) 
c⁄figTIMER_TASK_PRIORITY
 ) | 
p‹tPRIVILEGE_BIT
, NULL);

263 
	`mtCOVERAGE_TEST_MARKER
();

266 
	`c⁄figASSERT
–
xRëu∫
 );

267  
xRëu∫
;

268 
	}
}

271 
TimîH™dÀ_t
 
	$xTimîCª©e
–c⁄° * c⁄° 
pcTimîName
, c⁄° 
TickTy≥_t
 
xTimîPîiodInTicks
, c⁄° 
UBa£Ty≥_t
 
uxAutoRñﬂd
, * c⁄° 
pvTimîID
, 
TimîCÆlbackFun˘i⁄_t
 
pxCÆlbackFun˘i⁄
 )

273 
Timî_t
 *
pxNewTimî
;

276 if–
xTimîPîiodInTicks
 =–
TickTy≥_t
 ) 0U )

278 
pxNewTimî
 = 
NULL
;

282 
pxNewTimî
 = ( 
Timî_t
 * ) 
	`pvP‹tMÆloc
( ( Timer_t ) );

283 if–
pxNewTimî
 !
NULL
 )

287 
	`¥vCheckF‹VÆidLi°AndQueue
();

290 
pxNewTimî
->
pcTimîName
 =ÖcTimerName;

291 
pxNewTimî
->
xTimîPîiodInTicks
 = xTimerPeriodInTicks;

292 
pxNewTimî
->
uxAutoRñﬂd
 = uxAutoReload;

293 
pxNewTimî
->
pvTimîID
 =ÖvTimerID;

294 
pxNewTimî
->
pxCÆlbackFun˘i⁄
 =ÖxCallbackFunction;

295 
	`vLi°Inôüli£Iãm
–&–
pxNewTimî
->
xTimîLi°Iãm
 ) );

297 
	`åa˚TIMER_CREATE
–
pxNewTimî
 );

301 
	`åa˚TIMER_CREATE_FAILED
();

306 
	`c⁄figASSERT
––
xTimîPîiodInTicks
 > 0 ) );

308  ( 
TimîH™dÀ_t
 ) 
pxNewTimî
;

309 
	}
}

312 
Ba£Ty≥_t
 
	$xTimîGíîicComm™d
–
TimîH™dÀ_t
 
xTimî
, c⁄° 
Ba£Ty≥_t
 
xComm™dID
, c⁄° 
TickTy≥_t
 
xO±i⁄ÆVÆue
, Ba£Ty≥_à* c⁄° 
pxHighîPri‹ôyTaskWokí
, c⁄° TickTy≥_à
xTicksToWaô
 )

314 
Ba£Ty≥_t
 
xRëu∫
 = 
pdFAIL
;

315 
D´m⁄TaskMesßge_t
 
xMesßge
;

319 if–
xTimîQueue
 !
NULL
 )

322 
xMesßge
.
xMesßgeID
 = 
xComm™dID
;

323 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 = 
xO±i⁄ÆVÆue
;

324 
xMesßge
.
u
.
xTimîP¨amëîs
.
pxTimî
 = ( 
Timî_t
 * ) 
xTimî
;

326 if–
xComm™dID
 < 
tmrFIRST_FROM_ISR_COMMAND
 )

328 if–
	`xTaskGëScheduÀrSèã
(Ë=
èskSCHEDULER_RUNNING
 )

330 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xTicksToWaô
 );

334 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 );

339 
xRëu∫
 = 
	`xQueueSídToBackFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

342 
	`åa˚TIMER_COMMAND_SEND
–
xTimî
, 
xComm™dID
, 
xO±i⁄ÆVÆue
, 
xRëu∫
 );

346 
	`mtCOVERAGE_TEST_MARKER
();

349  
xRëu∫
;

350 
	}
}

353 #i‡–
INCLUDE_xTimîGëTimîD´m⁄TaskH™dÀ
 == 1 )

355 
TaskH™dÀ_t
 
	$xTimîGëTimîD´m⁄TaskH™dÀ
( )

359 
	`c⁄figASSERT
––
xTimîTaskH™dÀ
 !
NULL
 ) );

360  
xTimîTaskH™dÀ
;

361 
	}
}

366 
	$¥vPro˚ssExpúedTimî
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, c⁄° TickTy≥_à
xTimeNow
 )

368 
Ba£Ty≥_t
 
xResu…
;

369 
Timî_t
 * c⁄° 
pxTimî
 = ( Timî_à* ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

373 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

374 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

378 if–
pxTimî
->
uxAutoRñﬂd
 =–
UBa£Ty≥_t
 ) 
pdTRUE
 )

383 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xNextExpúeTime
 +ÖxTimî->
xTimîPîiodInTicks
 ), 
xTimeNow
, xNextExpúeTimêË=
pdTRUE
 )

387 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

388 
	`c⁄figASSERT
–
xResu…
 );

389 –Ë
xResu…
;

393 
	`mtCOVERAGE_TEST_MARKER
();

398 
	`mtCOVERAGE_TEST_MARKER
();

402 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

403 
	}
}

406 
	$¥vTimîTask
–*
pvP¨amëîs
 )

408 
TickTy≥_t
 
xNextExpúeTime
;

409 
Ba£Ty≥_t
 
xLi°WasEm±y
;

412 –Ë
pvP¨amëîs
;

418 
xNextExpúeTime
 = 
	`¥vGëNextExpúeTime
–&
xLi°WasEm±y
 );

422 
	`¥vPro˚ssTimîOrBlockTask
–
xNextExpúeTime
, 
xLi°WasEm±y
 );

425 
	`¥vPro˚ssRe˚ivedComm™ds
();

427 
	}
}

430 
	$¥vPro˚ssTimîOrBlockTask
–c⁄° 
TickTy≥_t
 
xNextExpúeTime
, c⁄° 
Ba£Ty≥_t
 
xLi°WasEm±y
 )

432 
TickTy≥_t
 
xTimeNow
;

433 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
;

435 
	`vTaskSu•ídAŒ
();

442 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

443 if–
xTimîLi°sWîeSwôched
 =
pdFALSE
 )

446 if––
xLi°WasEm±y
 =
pdFALSE
 ) && ( 
xNextExpúeTime
 <
xTimeNow
 ) )

448 –Ë
	`xTaskResumeAŒ
();

449 
	`¥vPro˚ssExpúedTimî
–
xNextExpúeTime
, 
xTimeNow
 );

459 
	`vQueueWaôF‹MesßgeRe°ri˘ed
–
xTimîQueue
, ( 
xNextExpúeTime
 - 
xTimeNow
 ) );

461 if–
	`xTaskResumeAŒ
(Ë=
pdFALSE
 )

467 
	`p‹tYIELD_WITHIN_API
();

471 
	`mtCOVERAGE_TEST_MARKER
();

477 –Ë
	`xTaskResumeAŒ
();

480 
	}
}

483 
TickTy≥_t
 
	$¥vGëNextExpúeTime
–
Ba£Ty≥_t
 * c⁄° 
pxLi°WasEm±y
 )

485 
TickTy≥_t
 
xNextExpúeTime
;

494 *
pxLi°WasEm±y
 = 
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 );

495 if–*
pxLi°WasEm±y
 =
pdFALSE
 )

497 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

502 
xNextExpúeTime
 = ( 
TickTy≥_t
 ) 0U;

505  
xNextExpúeTime
;

506 
	}
}

509 
TickTy≥_t
 
	$¥vSam∂eTimeNow
–
Ba£Ty≥_t
 * c⁄° 
pxTimîLi°sWîeSwôched
 )

511 
TickTy≥_t
 
xTimeNow
;

512 
PRIVILEGED_DATA
 
TickTy≥_t
 
xLa°Time
 = ( TickType_t ) 0U;

514 
xTimeNow
 = 
	`xTaskGëTickCou¡
();

516 if–
xTimeNow
 < 
xLa°Time
 )

518 
	`¥vSwôchTimîLi°s
();

519 *
pxTimîLi°sWîeSwôched
 = 
pdTRUE
;

523 *
pxTimîLi°sWîeSwôched
 = 
pdFALSE
;

526 
xLa°Time
 = 
xTimeNow
;

528  
xTimeNow
;

529 
	}
}

532 
Ba£Ty≥_t
 
	$¥vIn£πTimîInA˘iveLi°
–
Timî_t
 * c⁄° 
pxTimî
, c⁄° 
TickTy≥_t
 
xNextExpúyTime
, c⁄° TickTy≥_à
xTimeNow
, c⁄° TickTy≥_à
xComm™dTime
 )

534 
Ba£Ty≥_t
 
xPro˚ssTimîNow
 = 
pdFALSE
;

536 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xNextExpúyTime
 );

537 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

539 if–
xNextExpúyTime
 <
xTimeNow
 )

543 if––
xTimeNow
 - 
xComm™dTime
 ) >
pxTimî
->
xTimîPîiodInTicks
 )

547 
xPro˚ssTimîNow
 = 
pdTRUE
;

551 
	`vLi°In£π
–
pxOvîÊowTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

556 if––
xTimeNow
 < 
xComm™dTime
 ) && ( 
xNextExpúyTime
 >= xCommandTime ) )

561 
xPro˚ssTimîNow
 = 
pdTRUE
;

565 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

569  
xPro˚ssTimîNow
;

570 
	}
}

573 
	$¥vPro˚ssRe˚ivedComm™ds
( )

575 
D´m⁄TaskMesßge_t
 
xMesßge
;

576 
Timî_t
 *
pxTimî
;

577 
Ba£Ty≥_t
 
xTimîLi°sWîeSwôched
, 
xResu…
;

578 
TickTy≥_t
 
xTimeNow
;

580  
	`xQueueRe˚ive
–
xTimîQueue
, &
xMesßge
, 
tmrNO_DELAY
 ) !
pdFAIL
 )

582 #i‡–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

586 if–
xMesßge
.
xMesßgeID
 < 0 )

588 c⁄° 
CÆlbackP¨amëîs_t
 * c⁄° 
pxCÆlback
 = &–
xMesßge
.
u
.
xCÆlbackP¨amëîs
 );

592 
	`c⁄figASSERT
–
pxCÆlback
 );

595 
pxCÆlback
->
	`pxCÆlbackFun˘i⁄
–pxCÆlback->
pvP¨amëî1
,ÖxCÆlback->
ulP¨amëî2
 );

599 
	`mtCOVERAGE_TEST_MARKER
();

606 if–
xMesßge
.
xMesßgeID
 >–
Ba£Ty≥_t
 ) 0 )

610 
pxTimî
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.pxTimer;

612 if–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) =
pdFALSE
 )

615 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

619 
	`mtCOVERAGE_TEST_MARKER
();

622 
	`åa˚TIMER_COMMAND_RECEIVED
–
pxTimî
, 
xMesßge
.
xMesßgeID
, xMesßge.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 );

630 
xTimeNow
 = 
	`¥vSam∂eTimeNow
–&
xTimîLi°sWîeSwôched
 );

632  
xMesßge
.
xMesßgeID
 )

634 
tmrCOMMAND_START
 :

635 
tmrCOMMAND_START_FROM_ISR
 :

636 
tmrCOMMAND_RESET
 :

637 
tmrCOMMAND_RESET_FROM_ISR
 :

638 
tmrCOMMAND_START_DONT_TRACE
 :

640 if–
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
xTimeNow
, xMesßge.u.xTimîP¨amëîs.xMesßgeVÆuêË=
pdTRUE
 )

644 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

645 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

647 if–
pxTimî
->
uxAutoRñﬂd
 =–
UBa£Ty≥_t
 ) 
pdTRUE
 )

649 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
 +ÖxTimî->
xTimîPîiodInTicks
, 
NULL
, 
tmrNO_DELAY
 );

650 
	`c⁄figASSERT
–
xResu…
 );

651 –Ë
xResu…
;

655 
	`mtCOVERAGE_TEST_MARKER
();

660 
	`mtCOVERAGE_TEST_MARKER
();

664 
tmrCOMMAND_STOP
 :

665 
tmrCOMMAND_STOP_FROM_ISR
 :

670 
tmrCOMMAND_CHANGE_PERIOD
 :

671 
tmrCOMMAND_CHANGE_PERIOD_FROM_ISR
 :

672 
pxTimî
->
xTimîPîiodInTicks
 = 
xMesßge
.
u
.
xTimîP¨amëîs
.
xMesßgeVÆue
;

673 
	`c⁄figASSERT
––
pxTimî
->
xTimîPîiodInTicks
 > 0 ) );

681 –Ë
	`¥vIn£πTimîInA˘iveLi°
–
pxTimî
, ( 
xTimeNow
 +ÖxTimî->
xTimîPîiodInTicks
 ), xTimeNow, xTimeNow );

684 
tmrCOMMAND_DELETE
 :

687 
	`vP‹tFªe
–
pxTimî
 );

696 
	}
}

699 
	$¥vSwôchTimîLi°s
( )

701 
TickTy≥_t
 
xNextExpúeTime
, 
xRñﬂdTime
;

702 
Li°_t
 *
pxTemp
;

703 
Timî_t
 *
pxTimî
;

704 
Ba£Ty≥_t
 
xResu…
;

710  
	`li°LIST_IS_EMPTY
–
pxCuºítTimîLi°
 ) =
pdFALSE
 )

712 
xNextExpúeTime
 = 
	`li°GET_ITEM_VALUE_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

715 
pxTimî
 = ( 
Timî_t
 * ) 
	`li°GET_OWNER_OF_HEAD_ENTRY
–
pxCuºítTimîLi°
 );

716 –Ë
	`uxLi°Remove
–&–
pxTimî
->
xTimîLi°Iãm
 ) );

717 
	`åa˚TIMER_EXPIRED
–
pxTimî
 );

722 
pxTimî
->
	`pxCÆlbackFun˘i⁄
––
TimîH™dÀ_t
 )ÖxTimer );

724 if–
pxTimî
->
uxAutoRñﬂd
 =–
UBa£Ty≥_t
 ) 
pdTRUE
 )

732 
xRñﬂdTime
 = ( 
xNextExpúeTime
 + 
pxTimî
->
xTimîPîiodInTicks
 );

733 if–
xRñﬂdTime
 > 
xNextExpúeTime
 )

735 
	`li°SET_LIST_ITEM_VALUE
–&–
pxTimî
->
xTimîLi°Iãm
 ), 
xRñﬂdTime
 );

736 
	`li°SET_LIST_ITEM_OWNER
–&–
pxTimî
->
xTimîLi°Iãm
 ),ÖxTimer );

737 
	`vLi°In£π
–
pxCuºítTimîLi°
, &–
pxTimî
->
xTimîLi°Iãm
 ) );

741 
xResu…
 = 
	`xTimîGíîicComm™d
–
pxTimî
, 
tmrCOMMAND_START_DONT_TRACE
, 
xNextExpúeTime
, 
NULL
, 
tmrNO_DELAY
 );

742 
	`c⁄figASSERT
–
xResu…
 );

743 –Ë
xResu…
;

748 
	`mtCOVERAGE_TEST_MARKER
();

752 
pxTemp
 = 
pxCuºítTimîLi°
;

753 
pxCuºítTimîLi°
 = 
pxOvîÊowTimîLi°
;

754 
pxOvîÊowTimîLi°
 = 
pxTemp
;

755 
	}
}

758 
	$¥vCheckF‹VÆidLi°AndQueue
( )

763 
	`èskENTER_CRITICAL
();

765 if–
xTimîQueue
 =
NULL
 )

767 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°1
 );

768 
	`vLi°Inôüli£
–&
xA˘iveTimîLi°2
 );

769 
pxCuºítTimîLi°
 = &
xA˘iveTimîLi°1
;

770 
pxOvîÊowTimîLi°
 = &
xA˘iveTimîLi°2
;

771 
xTimîQueue
 = 
	`xQueueCª©e
––
UBa£Ty≥_t
 ) 
c⁄figTIMER_QUEUE_LENGTH
, –
D´m⁄TaskMesßge_t
 ) );

772 
	`c⁄figASSERT
–
xTimîQueue
 );

774 #i‡–
c⁄figQUEUE_REGISTRY_SIZE
 > 0 )

776 if–
xTimîQueue
 !
NULL
 )

778 
	`vQueueAddToRegi°ry
–
xTimîQueue
, "TmrQ" );

782 
	`mtCOVERAGE_TEST_MARKER
();

789 
	`mtCOVERAGE_TEST_MARKER
();

792 
	`èskEXIT_CRITICAL
();

793 
	}
}

796 
Ba£Ty≥_t
 
	$xTimîIsTimîA˘ive
–
TimîH™dÀ_t
 
xTimî
 )

798 
Ba£Ty≥_t
 
xTimîIsInA˘iveLi°
;

799 
Timî_t
 *
pxTimî
 = ( Timî_à* ) 
xTimî
;

802 
	`èskENTER_CRITICAL
();

807 
xTimîIsInA˘iveLi°
 = !–
	`li°IS_CONTAINED_WITHIN
–
NULL
, &–
pxTimî
->
xTimîLi°Iãm
 ) ) );

809 
	`èskEXIT_CRITICAL
();

811  
xTimîIsInA˘iveLi°
;

812 
	}
}

815 *
	$pvTimîGëTimîID
–c⁄° 
TimîH™dÀ_t
 
xTimî
 )

817 
Timî_t
 * c⁄° 
pxTimî
 = ( Timî_à* ) 
xTimî
;

819  
pxTimî
->
pvTimîID
;

820 
	}
}

823 #if–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

825 
Ba£Ty≥_t
 
	$xTimîPídFun˘i⁄CÆlFromISR
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
Ba£Ty≥_t
 *
pxHighîPri‹ôyTaskWokí
 )

827 
D´m⁄TaskMesßge_t
 
xMesßge
;

828 
Ba£Ty≥_t
 
xRëu∫
;

832 
xMesßge
.
xMesßgeID
 = 
tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR
;

833 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pxCÆlbackFun˘i⁄
 = 
xFun˘i⁄ToPíd
;

834 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pvP¨amëî1
 =ÖvParameter1;

835 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
ulP¨amëî2
 = ulParameter2;

837 
xRëu∫
 = 
	`xQueueSídFromISR
–
xTimîQueue
, &
xMesßge
, 
pxHighîPri‹ôyTaskWokí
 );

839 
	`åa˚PEND_FUNC_CALL_FROM_ISR
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
xRëu∫
 );

841  
xRëu∫
;

842 
	}
}

847 #if–
INCLUDE_xTimîPídFun˘i⁄CÆl
 == 1 )

849 
Ba£Ty≥_t
 
	$xTimîPídFun˘i⁄CÆl
–
PídedFun˘i⁄_t
 
xFun˘i⁄ToPíd
, *
pvP¨amëî1
, 
uöt32_t
 
ulP¨amëî2
, 
TickTy≥_t
 
xTicksToWaô
 )

851 
D´m⁄TaskMesßge_t
 
xMesßge
;

852 
Ba£Ty≥_t
 
xRëu∫
;

856 
xMesßge
.
xMesßgeID
 = 
tmrCOMMAND_EXECUTE_CALLBACK
;

857 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pxCÆlbackFun˘i⁄
 = 
xFun˘i⁄ToPíd
;

858 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
pvP¨amëî1
 =ÖvParameter1;

859 
xMesßge
.
u
.
xCÆlbackP¨amëîs
.
ulP¨amëî2
 = ulParameter2;

861 
xRëu∫
 = 
	`xQueueSídToBack
–
xTimîQueue
, &
xMesßge
, 
xTicksToWaô
 );

863 
	`åa˚PEND_FUNC_CALL
–
xFun˘i⁄ToPíd
, 
pvP¨amëî1
, 
ulP¨amëî2
, 
xRëu∫
 );

865  
xRëu∫
;

866 
	}
}

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

40 #ifde‡
_LIBC


41 
	#__MALLOC_HOOK_VOLATILE


	)

42 
	#__MALLOC_DEPRECATED


	)

44 
	#__MALLOC_HOOK_VOLATILE
 
__vﬁ©ûe


	)

45 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

50 
	#__MALLOC_P
(
¨gs
Ë
	)
args

51 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

52 
	#__MALLOC_HOOK_VOLATILE


	)

53 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

58 
__BEGIN_DECLS


61 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

64 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

65 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

72 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

73 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

76 
	$‰ì
 (*
__±r
Ë
__THROW
;

79 
	$c‰ì
 (*
__±r
Ë
__THROW
;

82 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

83 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

86 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

90 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

94 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

97 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

98 
__THROW
 
__©åibuã_mÆloc__
;

102 
	smÆlöfo


104 
¨ía
;

105 
‹dblks
;

106 
smblks
;

107 
hblks
;

108 
hblkhd
;

109 
usmblks
;

110 
fsmblks
;

111 
u‹dblks
;

112 
f‹dblks
;

113 
kìpco°
;

117 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

120 #i‚de‡
M_MXFAST


121 
	#M_MXFAST
 1

	)

123 #i‚de‡
M_NLBLKS


124 
	#M_NLBLKS
 2

	)

126 #i‚de‡
M_GRAIN


127 
	#M_GRAIN
 3

	)

129 #i‚de‡
M_KEEP


130 
	#M_KEEP
 4

	)

134 
	#M_TRIM_THRESHOLD
 -1

	)

135 
	#M_TOP_PAD
 -2

	)

136 
	#M_MMAP_THRESHOLD
 -3

	)

137 
	#M_MMAP_MAX
 -4

	)

138 
	#M_CHECK_ACTION
 -5

	)

139 
	#M_PERTURB
 -6

	)

140 
	#M_ARENA_TEST
 -7

	)

141 
	#M_ARENA_MAX
 -8

	)

144 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

148 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

152 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

155 
	$mÆloc_°©s
 (Ë
__THROW
;

158 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

161 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

165 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

170 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

171 
__MALLOC_DEPRECATED
;

173 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

174 
__c⁄°
 
__mÆloc_±r_t
)

175 
__MALLOC_DEPRECATED
;

176 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

177 
__c⁄°
 
__mÆloc_±r_t
)

178 
__MALLOC_DEPRECATED
;

179 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

180 
size_t
 
__size
,

181 
__c⁄°
 
__mÆloc_±r_t
)

182 
__MALLOC_DEPRECATED
;

183 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

184 
size_t
 
__size
,

185 
__c⁄°
 
__mÆloc_±r_t
)

186 
__MALLOC_DEPRECATED
;

187 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

190 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

193 
__END_DECLS


	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

116 #i‡
__USE_FORTIFY_LEVEL
 > 0

117 
	~<bôs/£tjmp2.h
>

120 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
248
7949
croutine.c
event_groups.c
include/FreeRTOS.h
include/StackMacros.h
include/croutine.h
include/event_groups.h
include/list.h
include/mpu_wrappers.h
include/portable.h
include/projdefs.h
include/queue.h
include/semphr.h
include/task.h
include/timers.h
list.c
portable/BCC/16BitDOS/Flsh186/port.c
portable/BCC/16BitDOS/Flsh186/prtmacro.h
portable/BCC/16BitDOS/PC/port.c
portable/BCC/16BitDOS/PC/prtmacro.h
portable/BCC/16BitDOS/common/portasm.h
portable/BCC/16BitDOS/common/portcomn.c
portable/CCS/ARM_Cortex-R4/port.c
portable/CCS/ARM_Cortex-R4/portmacro.h
portable/CCS/MSP430X/data_model.h
portable/CCS/MSP430X/port.c
portable/CCS/MSP430X/portmacro.h
portable/CodeWarrior/ColdFire_V1/port.c
portable/CodeWarrior/ColdFire_V1/portmacro.h
portable/CodeWarrior/ColdFire_V2/port.c
portable/CodeWarrior/ColdFire_V2/portmacro.h
portable/CodeWarrior/HCS12/port.c
portable/CodeWarrior/HCS12/portmacro.h
portable/GCC/ARM7_AT91FR40008/port.c
portable/GCC/ARM7_AT91FR40008/portISR.c
portable/GCC/ARM7_AT91FR40008/portmacro.h
portable/GCC/ARM7_AT91SAM7S/AT91SAM7X256.h
portable/GCC/ARM7_AT91SAM7S/ioat91sam7x256.h
portable/GCC/ARM7_AT91SAM7S/lib_AT91SAM7X256.c
portable/GCC/ARM7_AT91SAM7S/lib_AT91SAM7X256.h
portable/GCC/ARM7_AT91SAM7S/port.c
portable/GCC/ARM7_AT91SAM7S/portISR.c
portable/GCC/ARM7_AT91SAM7S/portmacro.h
portable/GCC/ARM7_LPC2000/port.c
portable/GCC/ARM7_LPC2000/portISR.c
portable/GCC/ARM7_LPC2000/portmacro.h
portable/GCC/ARM7_LPC23xx/port.c
portable/GCC/ARM7_LPC23xx/portISR.c
portable/GCC/ARM7_LPC23xx/portmacro.h
portable/GCC/ARM_CA9/port.c
portable/GCC/ARM_CA9/portmacro.h
portable/GCC/ARM_CM0/port.c
portable/GCC/ARM_CM0/portmacro.h
portable/GCC/ARM_CM3/port.c
portable/GCC/ARM_CM3/portmacro.h
portable/GCC/ARM_CM3_MPU/port.c
portable/GCC/ARM_CM3_MPU/portmacro.h
portable/GCC/ARM_CM4F/port.c
portable/GCC/ARM_CM4F/portmacro.h
portable/GCC/ATMega323/port.c
portable/GCC/ATMega323/portmacro.h
portable/GCC/AVR32_UC3/port.c
portable/GCC/AVR32_UC3/portmacro.h
portable/GCC/CORTUS_APS3/port.c
portable/GCC/CORTUS_APS3/portmacro.h
portable/GCC/ColdFire_V2/port.c
portable/GCC/ColdFire_V2/portmacro.h
portable/GCC/H8S2329/port.c
portable/GCC/H8S2329/portmacro.h
portable/GCC/HCS12/port.c
portable/GCC/HCS12/portmacro.h
portable/GCC/MCF5235/port.c
portable/GCC/MCF5235/portmacro.h
portable/GCC/MSP430F449/port.c
portable/GCC/MSP430F449/portmacro.h
portable/GCC/MicroBlaze/port.c
portable/GCC/MicroBlaze/portmacro.h
portable/GCC/MicroBlazeV8/port.c
portable/GCC/MicroBlazeV8/port_exceptions.c
portable/GCC/MicroBlazeV8/portmacro.h
portable/GCC/NiosII/port.c
portable/GCC/NiosII/portmacro.h
portable/GCC/PPC405_Xilinx/FPU_Macros.h
portable/GCC/PPC405_Xilinx/port.c
portable/GCC/PPC405_Xilinx/portmacro.h
portable/GCC/PPC440_Xilinx/FPU_Macros.h
portable/GCC/PPC440_Xilinx/port.c
portable/GCC/PPC440_Xilinx/portmacro.h
portable/GCC/RX100/port.c
portable/GCC/RX100/portmacro.h
portable/GCC/RX600/port.c
portable/GCC/RX600/portmacro.h
portable/GCC/STR75x/port.c
portable/GCC/STR75x/portISR.c
portable/GCC/STR75x/portmacro.h
portable/GCC/TriCore_1782/port.c
portable/GCC/TriCore_1782/portmacro.h
portable/GCC/TriCore_1782/porttrap.c
portable/IAR/78K0R/ISR_Support.h
portable/IAR/78K0R/port.c
portable/IAR/78K0R/portmacro.h
portable/IAR/ARM_CA9/port.c
portable/IAR/ARM_CA9/portASM.h
portable/IAR/ARM_CA9/portmacro.h
portable/IAR/ARM_CM0/port.c
portable/IAR/ARM_CM0/portmacro.h
portable/IAR/ARM_CM3/port.c
portable/IAR/ARM_CM3/portmacro.h
portable/IAR/ARM_CM4F/port.c
portable/IAR/ARM_CM4F/portmacro.h
portable/IAR/ATMega323/port.c
portable/IAR/ATMega323/portmacro.h
portable/IAR/AVR32_UC3/port.c
portable/IAR/AVR32_UC3/portmacro.h
portable/IAR/AVR32_UC3/read.c
portable/IAR/AVR32_UC3/write.c
portable/IAR/AtmelSAM7S64/AT91SAM7S64.h
portable/IAR/AtmelSAM7S64/AT91SAM7S64_inc.h
portable/IAR/AtmelSAM7S64/AT91SAM7X128.h
portable/IAR/AtmelSAM7S64/AT91SAM7X128_inc.h
portable/IAR/AtmelSAM7S64/AT91SAM7X256.h
portable/IAR/AtmelSAM7S64/AT91SAM7X256_inc.h
portable/IAR/AtmelSAM7S64/ISR_Support.h
portable/IAR/AtmelSAM7S64/lib_AT91SAM7S64.h
portable/IAR/AtmelSAM7S64/lib_AT91SAM7X128.h
portable/IAR/AtmelSAM7S64/lib_AT91SAM7X256.h
portable/IAR/AtmelSAM7S64/port.c
portable/IAR/AtmelSAM7S64/portmacro.h
portable/IAR/AtmelSAM9XE/ISR_Support.h
portable/IAR/AtmelSAM9XE/port.c
portable/IAR/AtmelSAM9XE/portmacro.h
portable/IAR/LPC2000/ISR_Support.h
portable/IAR/LPC2000/port.c
portable/IAR/LPC2000/portmacro.h
portable/IAR/MSP430/port.c
portable/IAR/MSP430/portasm.h
portable/IAR/MSP430/portmacro.h
portable/IAR/MSP430X/data_model.h
portable/IAR/MSP430X/port.c
portable/IAR/MSP430X/portmacro.h
portable/IAR/RL78/ISR_Support.h
portable/IAR/RL78/port.c
portable/IAR/RL78/portmacro.h
portable/IAR/RX100/port.c
portable/IAR/RX100/portmacro.h
portable/IAR/RX600/port.c
portable/IAR/RX600/portmacro.h
portable/IAR/STR71x/ISR_Support.h
portable/IAR/STR71x/port.c
portable/IAR/STR71x/portmacro.h
portable/IAR/STR75x/ISR_Support.h
portable/IAR/STR75x/port.c
portable/IAR/STR75x/portmacro.h
portable/IAR/STR91x/ISR_Support.h
portable/IAR/STR91x/port.c
portable/IAR/STR91x/portmacro.h
portable/IAR/V850ES/ISR_Support.h
portable/IAR/V850ES/port.c
portable/IAR/V850ES/portmacro.h
portable/MPLAB/PIC18F/port.c
portable/MPLAB/PIC18F/portmacro.h
portable/MPLAB/PIC18F/stdio.h
portable/MPLAB/PIC24_dsPIC/port.c
portable/MPLAB/PIC24_dsPIC/portmacro.h
portable/MPLAB/PIC32MX/ISR_Support.h
portable/MPLAB/PIC32MX/port.c
portable/MPLAB/PIC32MX/portmacro.h
portable/MPLAB/PIC32MZ/ISR_Support.h
portable/MPLAB/PIC32MZ/port.c
portable/MPLAB/PIC32MZ/portmacro.h
portable/MSVC-MingW/port.c
portable/MSVC-MingW/portmacro.h
portable/MemMang/heap_1.c
portable/MemMang/heap_2.c
portable/MemMang/heap_3.c
portable/MemMang/heap_4.c
portable/Paradigm/Tern_EE/large_untested/port.c
portable/Paradigm/Tern_EE/large_untested/portasm.h
portable/Paradigm/Tern_EE/large_untested/portmacro.h
portable/Paradigm/Tern_EE/small/port.c
portable/Paradigm/Tern_EE/small/portasm.h
portable/Paradigm/Tern_EE/small/portmacro.h
portable/RVDS/ARM7_LPC21xx/port.c
portable/RVDS/ARM7_LPC21xx/portmacro.h
portable/RVDS/ARM_CA9/port.c
portable/RVDS/ARM_CA9/portmacro.h
portable/RVDS/ARM_CM0/port.c
portable/RVDS/ARM_CM0/portmacro.h
portable/RVDS/ARM_CM3/port.c
portable/RVDS/ARM_CM3/portmacro.h
portable/RVDS/ARM_CM4F/port.c
portable/RVDS/ARM_CM4F/portmacro.h
portable/Renesas/RX100/port.c
portable/Renesas/RX100/portmacro.h
portable/Renesas/RX200/port.c
portable/Renesas/RX200/portmacro.h
portable/Renesas/RX600/port.c
portable/Renesas/RX600/portmacro.h
portable/Renesas/SH2A_FPU/port.c
portable/Renesas/SH2A_FPU/portmacro.h
portable/Rowley/MSP430F449/port.c
portable/Rowley/MSP430F449/portasm.h
portable/Rowley/MSP430F449/portmacro.h
portable/SDCC/Cygnal/port.c
portable/SDCC/Cygnal/portmacro.h
portable/Softune/MB91460/__STD_LIB_sbrk.c
portable/Softune/MB91460/port.c
portable/Softune/MB91460/portmacro.h
portable/Softune/MB96340/__STD_LIB_sbrk.c
portable/Softune/MB96340/port.c
portable/Softune/MB96340/portmacro.h
portable/Tasking/ARM_CM4F/port.c
portable/Tasking/ARM_CM4F/portmacro.h
portable/WizC/PIC18/Drivers/Tick/Tick.c
portable/WizC/PIC18/Drivers/Tick/isrTick.c
portable/WizC/PIC18/addFreeRTOS.h
portable/WizC/PIC18/port.c
portable/WizC/PIC18/portmacro.h
portable/oWatcom/16BitDOS/Flsh186/port.c
portable/oWatcom/16BitDOS/Flsh186/portmacro.h
portable/oWatcom/16BitDOS/PC/port.c
portable/oWatcom/16BitDOS/PC/portmacro.h
portable/oWatcom/16BitDOS/common/portasm.h
portable/oWatcom/16BitDOS/common/portcomn.c
queue.c
tasks.c
timers.c
/usr/include/assert.h
/usr/include/errno.h
/usr/include/limits.h
/usr/include/malloc.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/ctype.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
